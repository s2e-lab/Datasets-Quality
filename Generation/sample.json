{
    "task_id": "0",
    "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n",
    "entry_point": "has_close_elements",
    "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
    "completion_0": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
    "result_0": {
        "task_id": "0",
        "passed": true,
        "result": "passed",
        "completion_id": null
    },
    "completion_1": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
    "result_1": {
        "task_id": "0",
        "passed": true,
        "result": "passed",
        "completion_id": null
    },
    "completion_2": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
    "result_2": {
        "task_id": "0",
        "passed": true,
        "result": "passed",
        "completion_id": null
    },
    "completion_3": "    numbers.sort()\n    for i in range(len(numbers)-1):\n    if numbers[i+1] - numbers[i] < threshold:\n        return True\n    return False\n",
    "result_3": {
        "task_id": "0",
        "passed": false,
        "result": "failed: expected an indented block (<string>, line 14)",
        "completion_id": null
    },
    "completion_4": "    for i in range(len(numbers)):\n    for j in range(i+1, len(numbers)):\n        if abs(numbers[i] - numbers[j]) < threshold:\n            return True\n    return False\n",
    "result_4": {
        "task_id": "0",
        "passed": false,
        "result": "failed: expected an indented block (<string>, line 13)",
        "completion_id": null
    },
    "completion_5": "    n = len(numbers)\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    \n    return False\n",
    "result_5": {
        "task_id": "0",
        "passed": true,
        "result": "passed",
        "completion_id": null
    },
    "completion_6": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
    "result_6": {
        "task_id": "0",
        "passed": true,
        "result": "passed",
        "completion_id": null
    },
    "completion_7": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False\n        \n    print(has_close_elements([1.0, 2.0, 3.0], 0.5))\n    print(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3))\n",
    "result_7": {
        "task_id": "0",
        "passed": true,
        "result": "passed",
        "completion_id": null
    },
    "completion_8": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
    "result_8": {
        "task_id": "0",
        "passed": true,
        "result": "passed",
        "completion_id": null
    },
    "completion_9": "    numbers.sort()\n    for i in range(len(numbers)-1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False\n",
    "result_9": {
        "task_id": "0",
        "passed": true,
        "result": "passed",
        "completion_id": null
    },
    "completion_10": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i]-numbers[j]) < threshold:\n                return True\n    return False\n",
    "result_10": {
        "task_id": "0",
        "passed": true,
        "result": "passed",
        "completion_id": null
    },
    "completion_11": "    n = len(numbers)\n    for i in range(n):\n    for j in range(i + 1, n):\n        if abs(numbers[i] - numbers[j]) < threshold:\n            return True\n    return False\n",
    "result_11": {
        "task_id": "0",
        "passed": false,
        "result": "failed: expected an indented block (<string>, line 14)",
        "completion_id": null
    },
    "completion_12": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) <= threshold:\n            return True\n    return False\n",
    "result_12": {
        "task_id": "0",
        "passed": true,
        "result": "passed",
        "completion_id": null
    },
    "completion_13": "    n = len(numbers)\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n    \n",
    "result_13": {
        "task_id": "0",
        "passed": true,
        "result": "passed",
        "completion_id": null
    },
    "completion_14": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
    "result_14": {
        "task_id": "0",
        "passed": true,
        "result": "passed",
        "completion_id": null
    },
    "completion_15": "    numbers.sort()\n",
    "result_15": {
        "task_id": "0",
        "passed": false,
        "result": "failed: ",
        "completion_id": null
    },
    "completion_16": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
    "result_16": {
        "task_id": "0",
        "passed": true,
        "result": "passed",
        "completion_id": null
    },
    "completion_17": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
    "result_17": {
        "task_id": "0",
        "passed": true,
        "result": "passed",
        "completion_id": null
    },
    "completion_18": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False\n",
    "result_18": {
        "task_id": "0",
        "passed": true,
        "result": "passed",
        "completion_id": null
    },
    "completion_19": "    numbers.sort()\n    for i in range(1, len(numbers)):\n    if abs(numbers[i] - numbers[i-1]) <= threshold:\n        return True\n    return False\n",
    "result_19": {
        "task_id": "0",
        "passed": false,
        "result": "failed: expected an indented block (<string>, line 14)",
        "completion_id": null
    }
}