[
    {
        "model": "datasets_study.problem",
        "pk": 3,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/0",
            "content": {
                "task_id": "NumpyEval/0",
                "prompt": "import numpy as np\n\na = np.array([1, 1, 1, 1, 1, 2, 2, 2, 3, 4, 3, 4, 3, 4, 3, 4, 5, 5, 5])\n# Is there an efficient numpy way to find each index where the value changes? \n# You can get this functionality in numpy by comparing each element with it's neighbor\n# and then using np.where(condition).\nresult =",
                "entry_point": "none",
                "canonical_solution": [
                    " np.where(a[1:] != a[:-1])[0]"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'where'\n}\n\n\ndef check():\n    assert np.array_equal(result, np.array([4, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n\n\n",
                "nl": "# Is there an efficient numpy way to find each index where the value changes? \n\n# Is there an efficient numpy way to find each index where the value changes? \n\n# Is there an efficient numpy way to find each index where the value changes? \n"
            },
            "language": "py",
            "problems": [
                7,
                1,
                12
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 4,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/2",
            "content": {
                "task_id": "NumpyEval/2",
                "prompt": "import numpy as np\n\narr = np.array([[1,2,3], [4,5,6], [7,8,9]])\n# How to get the cumulative distribution function with NumPy?\n# set bins to 10\n# and then generate a cumulative sum of the histogram contents to variable hist self\nhist, bin_edges =",
                "entry_point": "none",
                "canonical_solution": [
                    " np.histogram(arr, bins=10)\nhist = hist.cumsum()"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'histogram_cumsum'\n}\n\n\ndef check():\n    assert np.array_equal(hist, np.array([1, 2, 3, 4, 4, 5, 6, 7, 8, 9]))\n\n\n",
                "nl": "# How to get the cumulative distribution function with NumPy?\n\n# How to get the cumulative distribution function with NumPy?\n\n# How to get the cumulative distribution function with NumPy?\n"
            },
            "language": "py",
            "problems": [
                7,
                1,
                12
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 5,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/3",
            "content": {
                "task_id": "NumpyEval/3",
                "prompt": "import numpy as np\n\ndef convert_string_in_array_to_float(arr):\n    # How to convert an array of strings to an array of floats in numpy?\n    # Return the final result\n",
                "entry_point": "convert_string_in_array_to_float",
                "canonical_solution": [
                    "    return arr.astype(np.float)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'astype'\n}\n\n\ndef check(candidate):\n    assert np.array_equal(candidate(np.array(['1.0', '2.0', '3.0'])), np.array([1.0, 2.0, 3.0]))\n    assert np.array_equal(candidate(np.array(['1.0', '3.0', '3.0'])), np.array([1.0, 3.0, 3.0]))\n    assert np.array_equal(candidate(np.array(['1.0', '2.0', '4.0'])), np.array([1.0, 2.0, 4.0]))\n    assert np.array_equal(candidate(np.array(['1.0', '2.0', '6.0'])), np.array([1.0, 2.0, 6.0]))\n    assert np.array_equal(candidate(np.array(['3.0', '2.0', '3.0'])), np.array([3.0, 2.0, 3.0]))\n    assert np.array_equal(candidate(np.array(['1.0', '3.0', '3.0'])), np.array([1.0, 3.0, 3.0]))\n    assert np.array_equal(candidate(np.array(['13.0', '2.0', '3.0'])), np.array([13.0, 2.0, 3.0]))\n    assert np.array_equal(candidate(np.array(['133.0', '23.0', '3.0'])), np.array([133.0, 23.0, 3.0]))\n    assert np.array_equal(candidate(np.array(['1.0', '2.0', '343.0'])), np.array([1.0, 2.0, 343.0]))\n\n",
                "nl": "# How to convert an array of strings to an array of floats in numpy?\n\n# How to convert an array of strings to an array of floats in numpy?\n"
            },
            "language": "py",
            "problems": [
                7,
                1,
                12
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 6,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/4",
            "content": {
                "task_id": "NumpyEval/4",
                "prompt": "import numpy as np\n\nimport itertools\ndata = [[1], [1, 2]]\n# Convert Python sequence to NumPy array, filling missing values with 0\nresult =",
                "entry_point": "none",
                "canonical_solution": [
                    " np.array(list(itertools.zip_longest(*data, fillvalue=0)))"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'array_list_zip_longest'\n}\n\n\ndef check():\n    assert np.array_equal(result, np.array([[1, 1], [0, 2]]))\n\n\n",
                "nl": "# Convert Python sequence to NumPy array, filling missing values with 0\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 7,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/5",
            "content": {
                "task_id": "NumpyEval/5",
                "prompt": "import numpy as np\n\ndef matrix_to_array(matrix):\n    # I am using numpy. I have a matrix with 1 column and N rows and I want to get an array from with N elements.\n    # For example, if i have M = matrix([[1], [2], [3], [4]]), I want to get A = array([1,2,3,4]).\n    # Return the array\n",
                "entry_point": "matrix_to_array",
                "canonical_solution": [
                    "    return np.squeeze(np.asarray(matrix))"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'squeeze'\n}\n\n\ndef check(candidate):\n    assert np.array_equal(candidate(np.array([[1], [2], [3], [4]])), np.array([1,2,3,4]))\n    assert np.array_equal(candidate(np.array([[2], [3], [7], [3]])), np.array([2,3,7,3]))\n    assert np.array_equal(candidate(np.array([[2], [3], [7], [3]])), np.array([2,3,7,3]))\n    assert np.array_equal(candidate(np.array([[3], [3], [7], [3]])), np.array([3,3,7,3]))\n    assert np.array_equal(candidate(np.array([[2], [4], [7], [3]])), np.array([2,4,7,3]))\n    assert np.array_equal(candidate(np.array([[2], [3], [5], [3]])), np.array([2,3,5,3]))\n    assert np.array_equal(candidate(np.array([[9], [3], [7], [3]])), np.array([9,3,7,3]))\n    assert np.array_equal(candidate(np.array([[1], [3], [7], [3]])), np.array([1,3,7,3]))\n    assert np.array_equal(candidate(np.array([[2], [3], [7], [4]])), np.array([2,3,7,4]))\n    assert np.array_equal(candidate(np.array([[3], [3], [3], [3]])), np.array([3,3,3,3]))\n\n",
                "nl": "# I am using numpy. I have a matrix with 1 column and N rows and I want to get an array from with N elements.\n\n# I am using numpy. I have a matrix with 1 column and N rows and I want to get an array from with N elements.\n\n# I am using numpy. I have a matrix with 1 column and N rows and I want to get an array from with N elements.\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 8,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/6",
            "content": {
                "task_id": "NumpyEval/6",
                "prompt": "import numpy as np\n\ndef arr2tuple(arr):\n    # Convert numpy array to tuple\n    # Return the transformed tuple\n",
                "entry_point": "arr2tuple",
                "canonical_solution": [
                    "    return tuple(map(tuple, arr))"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'tuple_map'\n}\n\n\ndef check(candidate):\n    assert candidate(np.array(((2,2),(2,-2)))) == ((2,2),(2,-2))\n    assert candidate(np.array(((2,2),(2,2)))) == ((2,2),(2,2))\n    assert candidate(np.array(((2,3),(2,-2)))) == ((2,3),(2,-2))\n    assert candidate(np.array(((4,2),(2,-2)))) == ((4,2),(2,-2))\n    assert candidate(np.array(((2,2),(5,-2)))) == ((2,2),(5,-2))\n    assert candidate(np.array(((2,32),(2,-2)))) == ((2,32),(2,-2))\n    assert candidate(np.array(((21,2),(2,-2)))) == ((21,2),(2,-2))\n    assert candidate(np.array(((2,2),(32,-2)))) == ((2,2),(32,-2))\n    assert candidate(np.array(((2,2),(2,-12)))) == ((2,2),(2,-12))\n    assert candidate(np.array(((222,2),(2,-2)))) == ((222,2),(2,-2))\n\n\n",
                "nl": "# Convert numpy array to tuple\n\n# Convert numpy array to tuple\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 9,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/7",
            "content": {
                "task_id": "NumpyEval/7",
                "prompt": "import numpy as np\n\na = np.array([[[10, 1, 1, 2], [2, 2, 2, 3], [3, 3, 3, 4]],\n              [[1, 1, 1, 2], [2, 2, 2, 3], [3, 3, 3, 4]]])\n\n# Conducting the reverse operation along with the last dimension\n\nb =",
                "entry_point": "none",
                "canonical_solution": [
                    " a[:, :, ::-1]"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'indice'\n}\n\n\ndef check():\n    assert np.array_equal(b, a[:, :, ::-1])\n\n\n",
                "nl": "# Conducting the reverse operation along with the last dimension\n"
            },
            "language": "py",
            "problems": [
                7
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 10,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/8",
            "content": {
                "task_id": "NumpyEval/8",
                "prompt": "import numpy as np\n\ndef remove_all_rows_contain_non_numeric_values(arr):\n    # How to remove all rows in a numpy.ndarray that contain non-numeric values?\n    # Return the final result\n",
                "entry_point": "remove_all_rows_contain_non_numeric_values",
                "canonical_solution": [
                    "    return arr[~np.isnan(arr).any(axis=1)]"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'isnan_any'\n}\n\n\ndef check(candidate):\n    assert np.array_equal(candidate(np.array([[1,2,3], [4,5,np.nan], [7,8,9]])), np.array([[1,2,3], [7,8,9]]))\n    assert np.array_equal(candidate(np.array([[1,2,3], [np.nan,5,np.nan], [7,8,9]])), np.array([[1,2,3], [7,8,9]]))\n    assert np.array_equal(candidate(np.array([[1,2,3], [np.nan, np.nan, np.nan], [7,8,9]])), np.array([[1,2,3], [7,8,9]]))\n    assert np.array_equal(candidate(np.array([[1,2,np.nan], [np.nan, np.nan, np.nan], [7,8,9]])), np.array([[7,8,9]]))\n    assert np.array_equal(candidate(np.array([[1,np.nan,np.nan], [np.nan, np.nan, np.nan], [7,8,9]])), np.array([[7,8,9]]))\n    assert np.array_equal(candidate(np.array([[np.nan,np.nan,np.nan], [np.nan, np.nan, np.nan], [7,8,9]])), np.array([[7,8,9]]))\n    assert np.array_equal(candidate(np.array([[np.nan,np.nan,np.nan], [7,8,9], [np.nan, np.nan, np.nan]])), np.array([[7,8,9]]))\n    assert np.array_equal(candidate(np.array([[np.nan,np.nan,np.nan], [7,8,2], [np.nan, np.nan, np.nan]])), np.array([[7,8,2]]))\n    assert np.array_equal(candidate(np.array([[np.nan,np.nan,np.nan], [7,2,2], [np.nan, np.nan, np.nan]])), np.array([[7,2,2]]))\n    assert np.array_equal(candidate(np.array([[np.nan,np.nan,np.nan], [2,2,2], [np.nan, np.nan, np.nan]])), np.array([[2,2,2]]))\n\n\n",
                "nl": "# How to remove all rows in a numpy.ndarray that contain non-numeric values?\n\n# How to remove all rows in a numpy.ndarray that contain non-numeric values?\n"
            },
            "language": "py",
            "problems": [
                7,
                1,
                12
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 11,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/11",
            "content": {
                "task_id": "NumpyEval/11",
                "prompt": "import numpy as np\n\ninput_list = [np.array([[ 0.00353654]]), np.array([[ 0.00353654]]), np.array([[ 0.00353654]]), np.array([[ 0.00353654]]), np.array([[ 0.00353654]]), np.array([[ 0.00353654]]), np.array([[ 0.00353654]]), np.array([[ 0.00353654]])]\n# Flattening a list of NumPy arrays?\n# We can use numpy.concatenate, which as the name suggests, basically concatenates all the elements of such an input list into a single NumPy array\n# And then we can use numpy.ravel to flatten the array\noutput = ",
                "entry_point": "none",
                "canonical_solution": [
                    "np.concatenate(input_list).ravel()"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'concatenate_ravel'\n}\n\n\ndef check():\n    assert np.array_equal(output, np.concatenate(input_list).ravel())\n\n\n",
                "nl": "# Flattening a list of NumPy arrays?\n\n# Flattening a list of NumPy arrays?\n\n# Flattening a list of NumPy arrays?\n"
            },
            "language": "py",
            "problems": [
                7,
                1,
                12
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 12,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/12",
            "content": {
                "task_id": "NumpyEval/12",
                "prompt": "import numpy as np\n\na = np.zeros((2,5))\n# How can I get the shape of NumPy array?\na_shape =",
                "entry_point": "none",
                "canonical_solution": [
                    " a.shape"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'shape'\n}\n\n\ndef check():\n    assert a_shape == (2, 5)\n\n\n",
                "nl": "# How can I get the shape of NumPy array?\n"
            },
            "language": "py",
            "problems": [
                7,
                1,
                12
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 13,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/13",
            "content": {
                "task_id": "NumpyEval/13",
                "prompt": "import numpy as np\n\ndef inverse_matrix(matrix):\n    # Inverse of a matrix using numpy and return it.\n    # Input:\n    #   matrix: numpy array, shape (n, n)\n    # Output:\n    #   inverse: numpy array, shape (n, n)\n",
                "entry_point": "inverse_matrix",
                "canonical_solution": [
                    "    return np.linalg.inv(matrix)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'linalg_inv'\n}\n\n\ndef check(candidate):\n    assert np.array_equal(candidate(np.matrix([[2,3],[4,5]])), np.matrix([[-2.5,1.5],[2,-1]]))\n    assert np.array_equal(candidate(np.matrix([[2,2],[4,5]])), np.matrix([[2.5,-1],[-2,1]]))\n    assert np.array_equal(candidate(np.matrix([[0,1],[4,5]])), np.matrix([[-1.25,0.25],[1,0]]))\n\n\n",
                "nl": "# Inverse of a matrix using numpy and return it.\n\n# Inverse of a matrix using numpy and return it.\n\n# Inverse of a matrix using numpy and return it.\n\n# Inverse of a matrix using numpy and return it.\n\n# Inverse of a matrix using numpy and return it.\n"
            },
            "language": "py",
            "problems": [
                7,
                1,
                2
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 14,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/14",
            "content": {
                "task_id": "NumpyEval/14",
                "prompt": "import numpy as np\n\ndef numpy_is_empty(arr):\n    # How can I check whether a numpy array is empty or not?\n    # Return the reuslt that contains True or False\n",
                "entry_point": "numpy_is_empty",
                "canonical_solution": [
                    "    return arr.size == 0"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'size'\n}\n\n\ndef check(candidate):\n    assert candidate(np.array([])) == True\n    assert candidate(np.array([1])) == False\n    assert candidate(np.array([2])) == False\n    assert candidate(np.array([1, 2])) == False\n    assert candidate(np.array([1, 3, 4])) == False\n    assert candidate(np.array([8])) == False\n    assert candidate(np.array([5])) == False\n    assert candidate(np.array([3, 5])) == False\n    assert candidate(np.array([3, 1])) == False\n    assert candidate(np.array([7])) == False\n\n\n",
                "nl": "# How can I check whether a numpy array is empty or not?\n\n# How can I check whether a numpy array is empty or not?\n"
            },
            "language": "py",
            "problems": [
                7,
                1,
                12
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 15,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/16",
            "content": {
                "task_id": "NumpyEval/16",
                "prompt": "import numpy as np\n\nmaster = np.array([1,2,3,4,5])\nsearch = np.array([4,2,2,3])\n\n# Find indices of a list of values in a numpy array\nout =",
                "entry_point": "none",
                "canonical_solution": [
                    " np.searchsorted(master, search)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'searchsorted'\n}\n\n\ndef check():\n    assert np.array_equal(out, np.array([3, 1, 1, 2]))\n\n\n",
                "nl": "# Find indices of a list of values in a numpy array\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 16,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/17",
            "content": {
                "task_id": "NumpyEval/17",
                "prompt": "import numpy as np\n\na = np.array([np.array([13.16]), np.array([1.58 , 1.2]), np.array([13.1]), np.array([1. , 2.6])], dtype=object)\n# I need a general way to flatten that array into a single array of N elements, with N=every float in all the sub-arrays.\n\nout =",
                "entry_point": "none",
                "canonical_solution": [
                    " np.hstack(aa)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'hstack'\n}\n\n\ndef check():\n    assert np.array_equal(out, np.array([13.16, 1.58, 1.2, 13.1, 1. , 2.6]))\n\n\n",
                "nl": "# I need a general way to flatten that array into a single array of N elements, with N=every float in all the sub-arrays.\n"
            },
            "language": "py",
            "problems": [
                7
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 17,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/18",
            "content": {
                "task_id": "NumpyEval/18",
                "prompt": "import numpy as np\ndef get_minimum_value(arr):\n    # I wish to find and return the minimum value in this 2D array\n    # The following code is aim to implement it\n",
                "entry_point": "get_minimum_value",
                "canonical_solution": [
                    "    return np.min(arr)",
                    "    return values.min()",
                    "    return min(values.flatten())",
                    "    return np.amin(values)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'min'\n}\n\n\ndef check(candidate):\n    assert candidate(np.array([[8,2,3,4,5,6], [3,8,5,1,-2,9]])) == -2\n    assert candidate(np.array([[8,2,3,4,4,6], [3,8,3,1,-2,9]])) == -2\n    assert candidate(np.array([[81,2,3,41,5,6], [3,8,5,1,-2,9]])) == -2\n    assert candidate(np.array([[8,2,3,4,15,6], [3,8,5,1,-3,19]])) == -3\n    assert candidate(np.array([[8,12,3,4,35,6], [3,8,5,1,-2,9]])) == -2\n    assert candidate(np.array([[8,2,3,44,5,6], [3,8,5,1,-2,9]])) == -2\n    assert candidate(np.array([[8,2,33,4,5,6], [3,84,5,1,-2,9]])) == -2\n    assert candidate(np.array([[83,2,3,44,5,6], [3,8,5,11,-2,9]])) == -2\n    assert candidate(np.array([[8,12,3,42,5,6], [3,8,5,1,-2,19]])) == -2\n    assert candidate(np.array([[8,12,3,4,5,26], [3,-8,5,1,-2,9]])) == -8\n\n\n",
                "nl": "# I wish to find and return the minimum value in this 2D array\n\n# I wish to find and return the minimum value in this 2D array\n"
            },
            "language": "py",
            "problems": [
                7
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 18,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/19",
            "content": {
                "task_id": "NumpyEval/19",
                "prompt": "import numpy as np\n\n# How do I create an array where every entry is the same value?\n# I know numpy.ones() and numpy.zeros() do this for 1's and 0's, but what about -1?\n# the shape of the array is (5, 5)\nout =",
                "entry_point": "none",
                "canonical_solution": [
                    " np.full((5, 5), -1.)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'full'\n}\n\n\ndef check():\n    assert np.array_equal(out, np.full((5, 5), -1.))\n\n\n",
                "nl": "# How do I create an array where every entry is the same value?\n\n# How do I create an array where every entry is the same value?\n\n# How do I create an array where every entry is the same value?\n"
            },
            "language": "py",
            "problems": [
                7,
                1,
                12
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 19,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/20",
            "content": {
                "task_id": "NumpyEval/20",
                "prompt": "import numpy as np\n\narr = np.array([1, 2, 3, 4, 5, 6])\n\n# Convert a numpy.ndarray to string\n# and convert it back to numpy.ndarray with dtype=int\nts = arr.tostring()\nnew_arr =",
                "entry_point": "none",
                "canonical_solution": [
                    " np.fromstring(ts, dtype=int)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'fromstring'\n}\n\n\ndef check():\n    assert np.array_equal(new_arr, np.array([1, 2, 3, 4, 5, 6]))\n\n\n",
                "nl": "# Convert a numpy.ndarray to string\n\n# Convert a numpy.ndarray to string\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 20,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/21",
            "content": {
                "task_id": "NumpyEval/21",
                "prompt": "import numpy as np\n\na = np.arange(0,10)\n# How to print a Numpy array without brackets?\n# For example, I want to convert a = np.array([1,2,3,4,5]) into a_string = \"1 2 3 4 5\".\na_string =",
                "entry_point": "none",
                "canonical_solution": [
                    " \" \".join(str(i) for i in a)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'str'\n}\n\n\ndef check():\n    assert a_string == \"0 1 2 3 4 5 6 7 8 9\"\n\n\n",
                "nl": "# How to print a Numpy array without brackets?\n\n# How to print a Numpy array without brackets?\n"
            },
            "language": "py",
            "problems": [
                7,
                1,
                12
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 21,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/22",
            "content": {
                "task_id": "NumpyEval/22",
                "prompt": "import numpy as np\n\ndef average_every_3_elements(arr):\n    # Averaging over every 3 elements of a numpy array\n    # I have a numpy array. I want to create a new array which is the average over every consecutive triplet of elements. So the new array will be a third of the size as the original.\n    # Return it\n",
                "entry_point": "average_every_3_elements",
                "canonical_solution": [
                    "    return np.mean(arr.reshape(-1, 3), axis=1)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'mean_reshape'\n}\n\n\n\ndef check(candidate):\n    assert np.array_equal(candidate(np.array([1,2,3,1,2,3,1,2,3])), np.array([2, 2, 2]))\n    assert np.array_equal(candidate(np.array([1,2,3,1,2,3,2,3,4])), np.array([2, 2, 3]))\n    assert np.array_equal(candidate(np.array([1,2,3,3,4,5,2,3,4])), np.array([2, 4, 3]))\n\n\n",
                "nl": "# Averaging over every 3 elements of a numpy array\n\n# Averaging over every 3 elements of a numpy array\n\n# Averaging over every 3 elements of a numpy array\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 22,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/23",
            "content": {
                "task_id": "NumpyEval/23",
                "prompt": "import numpy as np\n\ndef xor_operation(x, y, z):\n    \"\"\"\n    How can I define in numpy a matrix that uses operations modulo 2?\n    This operation is called \"xor\".\n    Arguments:\n        x: a numpy array\n        y: a numpy array\n        z: a numpy array\n    Returns:\n        a numpy array containing the result of the operation\n    \"\"\"\n",
                "entry_point": "xor_operation",
                "canonical_solution": [
                    "    return (x ^ y ^ z)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'difference_where'\n}\n\n\ndef check(candidate):\n    assert np.array_equal(candidate(np.array([1, 2, 3]), np.array([5, 6, 7]), np.array([9, 10, 11])), np.array([13, 14, 15]))\n    assert np.array_equal(candidate(np.array([4, 3, 2]), np.array([8, 7, 6]), np.array([9, 10, 11])), np.array([5, 14, 15]))\n    assert np.array_equal(candidate(np.array([4, 4, 2]), np.array([8, 7, 6]), np.array([9, 10, 11])), np.array([5, 9, 15]))\n    assert np.array_equal(candidate(np.array([44, 4, 2]), np.array([8, 7, 6]), np.array([9, 10, 11])), np.array([45, 9, 15]))\n    assert np.array_equal(candidate(np.array([44, 2, 2]), np.array([8, 7, 6]), np.array([9, 10, 11])), np.array([45, 15, 15]))\n    assert np.array_equal(candidate(np.array([44, 2, 1]), np.array([8, 7, 6]), np.array([9, 10, 11])), np.array([45, 15, 12]))\n    assert np.array_equal(candidate(np.array([44, 2, 1]), np.array([83, 7, 6]), np.array([9, 10, 11])), np.array([118, 15, 12]))\n    assert np.array_equal(candidate(np.array([44, 2, 1]), np.array([83, 7, 3]), np.array([9, 10, 11])), np.array([118, 15, 9]))\n    assert np.array_equal(candidate(np.array([2, 2, 1]), np.array([83, 7, 3]), np.array([9, 10, 11])), np.array([88, 15, 9]))\n    assert np.array_equal(candidate(np.array([2, 31, 1]), np.array([83, 7, 3]), np.array([9, 10, 11])), np.array([88, 18, 9]))\n\n\n",
                "nl": "\"\"\"\n    How can I define in numpy a matrix that uses operations modulo 2?\n    This operation is called \"xor\".\n    Arguments:\n        x: a numpy array\n        y: a numpy array\n        z: a numpy array\n    Returns:\n        a numpy array containing the result of the operation\n    \"\"\""
            },
            "language": "py",
            "problems": [
                1,
                12
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 23,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/24",
            "content": {
                "task_id": "NumpyEval/24",
                "prompt": "import numpy as np\n\na = np.array([1, 2, 3])\nb = np.array([4, 5])\n# if function is c(i, j) = a(i) + b(j)*2:\nc =",
                "entry_point": "none",
                "canonical_solution": [
                    " a[:, None] + b*2"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'index'\n}\n\n\ndef check():\n    assert np.array_equal(c, a[:, None] + b*2)\n\n\n",
                "nl": "# if function is c(i, j) = a(i) + b(j)*2:\n"
            },
            "language": "py",
            "problems": [
                7
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 24,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/25",
            "content": {
                "task_id": "NumpyEval/25",
                "prompt": "import numpy as np\n\ndef get_multiply_diff(t):\n    # Is there a function that returns an array with the results of dividing the next element by the previous one? Like a \"diff()\", but with dividing\n    # Not-numpy-example:\n    # source = [1,3,6,24,36]\n    # target = [j / i for i, j in zip(source[:-1], source[1:])]\n    # Return: target implemented in numpy.\n",
                "entry_point": "get_multiply_diff",
                "canonical_solution": [
                    "    return t[1:] / t[:-1]"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'diff'\n}\n\n\ndef check(candidate):\n    assert np.array_equal(candidate(np.array([1,3,6,24,36])), np.array([3, 2, 4, 1.5]))\n    assert np.array_equal(candidate(np.array([1,3,6,48,36])), np.array([3, 2, 8, 0.75]))\n    assert np.array_equal(candidate(np.array([1,3,6,48,96])), np.array([3, 2, 8, 2]))\n    assert np.array_equal(candidate(np.array([1,3,6,48,144])), np.array([3, 2, 8, 3]))\n    assert np.array_equal(candidate(np.array([1,3,6,48,192])), np.array([3, 2, 8, 4]))\n    assert np.array_equal(candidate(np.array([1,3,6,48,240])), np.array([3, 2, 8, 5]))\n    assert np.array_equal(candidate(np.array([1,3,6,48,288])), np.array([3, 2, 8, 6]))\n    assert np.array_equal(candidate(np.array([1,3,6,48,336])), np.array([3, 2, 8, 7]))\n    assert np.array_equal(candidate(np.array([1,3,6,48,384])), np.array([3, 2, 8, 8]))\n    assert np.array_equal(candidate(np.array([1,3,6,48,432])), np.array([3, 2, 8, 9]))\n\n\n",
                "nl": "# Is there a function that returns an array with the results of dividing the next element by the previous one? Like a \"diff()\", but with dividing\n\n# Is there a function that returns an array with the results of dividing the next element by the previous one? Like a \"diff()\", but with dividing\n\n# Is there a function that returns an array with the results of dividing the next element by the previous one? Like a \"diff()\", but with dividing\n\n# Is there a function that returns an array with the results of dividing the next element by the previous one? Like a \"diff()\", but with dividing\n\n# Is there a function that returns an array with the results of dividing the next element by the previous one? Like a \"diff()\", but with dividing\n"
            },
            "language": "py",
            "problems": [
                7,
                1,
                12,
                2
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 25,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/26",
            "content": {
                "task_id": "NumpyEval/26",
                "prompt": "import numpy as np\n\n# List of arrays.\nL = [np.random.randn(5,4,2,5,1,2) for i in range(10)]\n# Stack them using axis that is negative one .\nM = ",
                "entry_point": "none",
                "canonical_solution": [
                    "np.stack(L, axis=-1)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'stack'\n}\n\n\ndef check():\n    assert np.array_equal(M, np.stack(L, axis=-1))\n\n\n",
                "nl": "# List of arrays.\n\n# List of arrays.\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 26,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/27",
            "content": {
                "task_id": "NumpyEval/27",
                "prompt": "import numpy as np\n\narr = np.array([[1, 2, 3], [3, 4, 5], [5, 6, 7]])\n# How to invoke the standard deviation function on a 2d array?\n# with axis=0, it will return a 1d array with the standard deviation of each column\narr_sd =",
                "entry_point": "none",
                "canonical_solution": [
                    " np.std(arr, axis=0)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'std'\n}\n\n\ndef check():\n    assert np.array_equal(arr_sd, np.std(arr, axis=0))\n\n\n",
                "nl": "# How to invoke the standard deviation function on a 2d array?\n\n# How to invoke the standard deviation function on a 2d array?\n"
            },
            "language": "py",
            "problems": [
                7,
                12
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 27,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/28",
            "content": {
                "task_id": "NumpyEval/28",
                "prompt": "import numpy as np\ndef matrix2array(M):\n    # I am using numpy. I have a matrix `M` 1*N and I want to get an array from with N elements.\n    # To achieve it, Does anyone know a more elegant way to get the result?\n",
                "entry_point": "matrix2array",
                "canonical_solution": [
                    "    return np.squeeze(np.asarray(M))",
                    "    return np.array(M.T)[0]",
                    "    return np.asarray(M).reshape(-1)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'squeeze_T_asarray'\n}\n\n\ndef check(candidate):\n    assert np.array_equal(candidate(np.matrix([[1], [2], [3], [4]])), np.array([1, 2, 3, 4]))\n    assert np.array_equal(candidate(np.matrix([[1], [2], [3], [5]])), np.array([1, 2, 3, 5]))\n    assert np.array_equal(candidate(np.matrix([[1], [5], [3], [5]])), np.array([1, 5, 3, 5]))\n    assert np.array_equal(candidate(np.matrix([[2], [5], [3], [5]])), np.array([2, 5, 3, 5]))\n    assert np.array_equal(candidate(np.matrix([[2], [5], [4], [5]])), np.array([2, 5, 4, 5]))\n    assert np.array_equal(candidate(np.matrix([[4], [5], [4], [5]])), np.array([4, 5, 4, 5]))\n    assert np.array_equal(candidate(np.matrix([[4], [5], [4]])), np.array([4, 5, 4]))\n    assert np.array_equal(candidate(np.matrix([[1], [5], [4]])), np.array([1, 5, 4]))\n    assert np.array_equal(candidate(np.matrix([[1], [2], [4]])), np.array([1, 2, 4]))\n    assert np.array_equal(candidate(np.matrix([[1], [2], [3]])), np.array([1, 2, 3]))\n\n",
                "nl": "# I am using numpy. I have a matrix `M` 1*N and I want to get an array from with N elements.\n\n# I am using numpy. I have a matrix `M` 1*N and I want to get an array from with N elements.\n"
            },
            "language": "py",
            "problems": [
                7,
                1,
                12
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 28,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/29",
            "content": {
                "task_id": "NumpyEval/29",
                "prompt": "import numpy as np\n\ndef get_index_max_element(arr, axis_value):\n    # How to get the index of a maximum element in a NumPy array along axis_value?\n    # Return the result\n",
                "entry_point": "get_index_max_element",
                "canonical_solution": [
                    "    return np.argmax(arr, axis=axis_value)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'argmax'\n}\n\n\ndef check(candidate):\n    assert np.array_equal(candidate(np.array([[1, 2, 3], [2, 3, 4]]), 1), np.array([2, 2]))\n    assert np.array_equal(candidate(np.array([[1, 2, 3], [2, 3, 4]]), 0), np.array([1, 1, 1]))\n    assert np.array_equal(candidate(np.array([[1, 2, 3], [2, 2, 4]]), 0), np.array([1, 0, 1]))\n    assert np.array_equal(candidate(np.array([[1, 2, 4], [2, 2, 4]]), 0), np.array([1, 0, 0]))\n    assert np.array_equal(candidate(np.array([[1, 2, 14], [2, 2, 4]]), 0), np.array([1, 0, 0]))\n    assert np.array_equal(candidate(np.array([[1, 12, 14], [2, 2, 4]]), 0), np.array([1, 0, 0]))\n    assert np.array_equal(candidate(np.array([[1, 12, 14], [2, 2, 1]]), 0), np.array([1, 0, 0]))\n    assert np.array_equal(candidate(np.array([[1, 12, 14], [2, 1, 1]]), 0), np.array([1, 0, 0]))\n    assert np.array_equal(candidate(np.array([[1, 12, 14], [2, 1, 11]]), 0), np.array([1, 0, 0]))\n\n\n",
                "nl": "# How to get the index of a maximum element in a NumPy array along axis_value?\n\n# How to get the index of a maximum element in a NumPy array along axis_value?\n"
            },
            "language": "py",
            "problems": [
                7,
                1,
                12
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 29,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/31",
            "content": {
                "task_id": "NumpyEval/31",
                "prompt": "import numpy as np\n\na = np.array([[1, 2],\n           [3, 4]])\nb = np.array([1,1])\n# I'd like to use b in index a, I would like to get 4 instead of [a[1], a[1]]\n# the code below is the solution\nout =",
                "entry_point": "none",
                "canonical_solution": [
                    " a[tuple(b)]"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'tuple'\n}\n\n\ndef check():\n    assert out == 4\n\n\n",
                "nl": "# I'd like to use b in index a, I would like to get 4 instead of [a[1], a[1]]\n\n# I'd like to use b in index a, I would like to get 4 instead of [a[1], a[1]]\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 30,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/33",
            "content": {
                "task_id": "NumpyEval/33",
                "prompt": "import numpy as np\n\narr = np.zeros((50,100,25))\n# Is there a quick way to \"sub-flatten\" or flatten only some of the first dimensions in a numpy array?\n# Given a numpy array of dimensions (50,100,25), the resultant dimensions would be (5000,25)\nresult = ",
                "entry_point": "none",
                "canonical_solution": [
                    "np.reshape(arr, (5000,25))",
                    "arr.reshape((5000,25))"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'reshape'\n}\n\n\ndef check():\n    assert np.array_equal(result, np.reshape(arr, (5000,25)))\n\n\n",
                "nl": "# Is there a quick way to \"sub-flatten\" or flatten only some of the first dimensions in a numpy array?\n\n# Is there a quick way to \"sub-flatten\" or flatten only some of the first dimensions in a numpy array?\n"
            },
            "language": "py",
            "problems": [
                7,
                1,
                12
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 31,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/34",
            "content": {
                "task_id": "NumpyEval/34",
                "prompt": "import numpy as np\n\ny = np.array([2,1,5,2])          # y axis\n# filter out values larger than 2\nm = np.ma.masked_where(y>2, y)   \n# remove masked values from m\nout =",
                "entry_point": "none",
                "canonical_solution": [
                    " m.compressed()"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'compressed'\n}\n\n\ndef check():\n    assert np.array_equal(out, np.array([2,1,2]))\n\n\n",
                "nl": "# y axis\n\n# y axis\n\n# y axis\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 32,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/35",
            "content": {
                "task_id": "NumpyEval/35",
                "prompt": "import numpy as np\n\n# create a numpy array composed of a list [[8, 7, 2], [5, 6, 1], [8, 2, 6]]\narray = ",
                "entry_point": "none",
                "canonical_solution": [
                    "np.array([[8, 7, 2], [5, 6, 1], [8, 2, 6]])"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'array'\n}\n\n\ndef check():\n    assert np.array_equal(array, np.array([[8, 7, 2], [5, 6, 1], [8, 2, 6]]))\n    assert type(array) == np.ndarray\n\n\n",
                "nl": "# create a numpy array composed of a list [[8, 7, 2], [5, 6, 1], [8, 2, 6]]\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 33,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/36",
            "content": {
                "task_id": "NumpyEval/36",
                "prompt": "import numpy as np\n\n# I have a NumPy array that looks like this:\narr = np.array([100.10, 200.42, 4.14, 89.00, 34.55, 1.12])\n# How can I get multiple values from this array by index?\n# How can I get the values at the index positions 1 and 4?\nresult_arr =",
                "entry_point": "none",
                "canonical_solution": [
                    " arr[[1, 4]]"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'indices'\n}\n\n\ndef check():\n    assert np.array_equal(result_arr,np.array([200.42, 34.55]))\n\n\n",
                "nl": "# I have a NumPy array that looks like this:\n\n# I have a NumPy array that looks like this:\n\n# I have a NumPy array that looks like this:\n"
            },
            "language": "py",
            "problems": [
                7,
                1,
                12
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 34,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/37",
            "content": {
                "task_id": "NumpyEval/37",
                "prompt": "import numpy as np\n\ndef find_most_frequent_number(arr):\n    # Find the most frequent number in a NumPy array\n    # Return the number\n",
                "entry_point": "find_most_frequent_number",
                "canonical_solution": [
                    "    return np.bincount(arr).argmax()"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'bincount_argmax'\n}\n\n\ndef check(candidate):\n    assert candidate(np.array([1,2,3,1,2,1,1,1,3,2,2,1])) == 1\n    assert candidate(np.array([1,1,3,1,2,1,1,1,3,2,2,1])) == 1\n    assert candidate(np.array([1,2,1,1,2,1,1,1,3,2,2,1])) == 1\n    assert candidate(np.array([1,2,3,1,2,1,1,1,1,2,2,1])) == 1\n    assert candidate(np.array([1,2,3,1,2,1,1,1,3,2,1,0])) == 1\n    assert candidate(np.array([1,2,3,1,2,1,1,1,3,1,1,1])) == 1\n    assert candidate(np.array([1,2,3,1,2,1,1,1,1,2,2,1])) == 1\n    assert candidate(np.array([1,2,3,1,2,1,1,1,0,1,1,1])) == 1\n    assert candidate(np.array([1,1,3,1,2,1,1,1,1,2,2,1])) == 1\n    assert candidate(np.array([2,2,3,2,2,2,2,2,3,2,2,2])) == 2\n\n\n",
                "nl": "# Find the most frequent number in a NumPy array\n\n# Find the most frequent number in a NumPy array\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 35,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/38",
            "content": {
                "task_id": "NumpyEval/38",
                "prompt": "import numpy as np\n\n# I have a list containing numpy arrays something like L=[a,b,c] where a, b and c are numpy arrays with sizes N_a in T, N_b in T and N_c in T.\n# I want to row-wise concatenate a, b and c and get a numpy array with shape (N_a+N_b+N_c, T). \n# Clearly one solution is run a for loop and use numpy.concatenate, but is there any pythonic way to do this?\na = np.ones((3,2))\nb = np.zeros((2,2))\nc = np.ones((4,2))\nL = [a,b,c]\nconcated_arr =",
                "entry_point": "none",
                "canonical_solution": [
                    " np.concatenate(L, axis=0)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'concatenate'\n}\n\n\ndef check():\n    assert np.array_equal(concated_arr, np.concatenate(L, axis=0))\n\n\n",
                "nl": "# I have a list containing numpy arrays something like L=[a,b,c] where a, b and c are numpy arrays with sizes N_a in T, N_b in T and N_c in T.\n\n# I have a list containing numpy arrays something like L=[a,b,c] where a, b and c are numpy arrays with sizes N_a in T, N_b in T and N_c in T.\n\n# I have a list containing numpy arrays something like L=[a,b,c] where a, b and c are numpy arrays with sizes N_a in T, N_b in T and N_c in T.\n"
            },
            "language": "py",
            "problems": [
                7,
                1,
                12
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 36,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/39",
            "content": {
                "task_id": "NumpyEval/39",
                "prompt": "import numpy as np\n\na = np.array([[ 0,  1,  2],\n       [ 3,  4,  5],\n       [ 6,  7,  8],\n       [ 9, 10, 11],\n       [12, 13, 14]])\n\n# We want row with the first column value is 0\n# and the second colum value is 1\n# Maybe using np.where() is better\nb =",
                "entry_point": "none",
                "canonical_solution": [
                    " a[np.where((a[:,0] == 0) * (a[:,1] == 1))]"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'where_equal'\n}\n\n\ndef check():\n    assert np.array_equal(b, np.array([[0, 1, 2]]))\n\n\n",
                "nl": "# We want row with the first column value is 0\n\n# We want row with the first column value is 0\n\n# We want row with the first column value is 0\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 37,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/40",
            "content": {
                "task_id": "NumpyEval/40",
                "prompt": "import numpy as np\n\ndef interweaving_two_arrays(a, b):\n    # How would one interweave them efficiently?\n    # It can be assumed that length(a)==length(b).\n    c = np.empty((a.size + b.size,), dtype=a.dtype)\n",
                "entry_point": "interweaving_two_arrays",
                "canonical_solution": [
                    "    c[0::2] = a\n    c[1::2] = b\n    return c"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'list'\n}\n\n\ndef check(candidate):\n    assert np.array_equal(candidate(np.array([1,3,5]), np.array([2,4,6])), np.array([1,2,3,4,5,6]))\n    assert np.array_equal(candidate(np.array([1,3,5]), np.array([2,4,7])), np.array([1,2,3,4,5,7]))\n    assert np.array_equal(candidate(np.array([1,3,5]), np.array([2,3,6])), np.array([1,2,3,3,5,6]))\n    assert np.array_equal(candidate(np.array([12,3,5]), np.array([2,4,6])), np.array([12,2,3,4,5,6]))\n    assert np.array_equal(candidate(np.array([1,23,5]), np.array([2,4,6])), np.array([1,2,23,4,5,6]))\n    assert np.array_equal(candidate(np.array([1,3,53]), np.array([2,4,6])), np.array([1,2,3,4,53,6]))\n    assert np.array_equal(candidate(np.array([1,3,5]), np.array([42,4,6])), np.array([1,42,3,4,5,6]))\n    assert np.array_equal(candidate(np.array([1,3,5]), np.array([2,43,6])), np.array([1,2,3,43,5,6]))\n    assert np.array_equal(candidate(np.array([1,3,5]), np.array([2,4,64])), np.array([1,2,3,4,5,64]))\n    assert np.array_equal(candidate(np.array([1,3,5]), np.array([2,4,63])), np.array([1,2,3,4,5,63]))\n\n\n",
                "nl": "# How would one interweave them efficiently?\n\n# How would one interweave them efficiently?\n"
            },
            "language": "py",
            "problems": [
                7,
                12
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 38,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/41",
            "content": {
                "task_id": "NumpyEval/41",
                "prompt": "import numpy as np\n\na = np.arange(9)\na = a.reshape((3, 3))\nb = np.zeros((5, 5))\n# Copy numpy array 'a' into part of another array 'b' in [1:4, 1:4]\n",
                "entry_point": "none",
                "canonical_solution": [
                    "b[1:4, 1:4] = a"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'copy'\n}\n\n\ndef check():\n    tmp_b = np.zeros((5, 5))\n    tmp_b[1:4, 1:4] = a\n    assert np.array_equal(b, tmp_b)\n\n\n",
                "nl": "# Copy numpy array 'a' into part of another array 'b' in [1:4, 1:4]\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 39,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/42",
            "content": {
                "task_id": "NumpyEval/42",
                "prompt": "import numpy as np\n\na = np.array([[1, 1, 1, 0, 0, 0],\n       [0, 1, 1, 1, 0, 0],\n       [0, 1, 1, 1, 0, 0],\n       [1, 1, 1, 0, 0, 0],\n       [1, 1, 1, 1, 1, 0]])\n# I need to find unique rows in a numpy.array.\nout =",
                "entry_point": "none",
                "canonical_solution": [
                    " np.unique(a, axis=0)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'unique'\n}\n\n\ndef check():\n    assert np.array_equal(out, np.unique(a, axis=0))\n\n\n",
                "nl": "# I need to find unique rows in a numpy.array.\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 40,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/43",
            "content": {
                "task_id": "NumpyEval/43",
                "prompt": "import numpy as np\n\na = np.array([1,3,4])\nb = np.array([5,2,1])\n\n# I have two simple one-dimensional arrays in NumPy. \n# I should be able to concatenate them using numpy.concatenate.\nc =",
                "entry_point": "none",
                "canonical_solution": [
                    " np.concatenate([a, b])"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'concatenate'\n}\n\n\ndef check():\n    assert np.array_equal(c, np.concatenate((a, b)))\n\n\n",
                "nl": "# I have two simple one-dimensional arrays in NumPy. \n\n# I have two simple one-dimensional arrays in NumPy. \n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 41,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/45",
            "content": {
                "task_id": "NumpyEval/45",
                "prompt": "import numpy as np\n\na = np.array([[1,3,4],[1,2,3],[1,2,1]])\nb = np.array([1,2,3])\n# How to add items into a numpy array?\n# add one element to each row using column stack operation.\nc =",
                "entry_point": "none",
                "canonical_solution": [
                    " np.column_stack((a, b))"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'column_stack'\n}\n\n\ndef check():\n    assert np.array_equal(c, np.column_stack((a, b)))\n\n\n",
                "nl": "# How to add items into a numpy array?\n\n# How to add items into a numpy array?\n"
            },
            "language": "py",
            "problems": [
                7,
                1,
                12
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 42,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/46",
            "content": {
                "task_id": "NumpyEval/46",
                "prompt": "import numpy as np\n\nlist_of_arrays = map(lambda x: x*np.ones(2), range(5))\n# I generate a list of one dimensional numpy arrays in a loop and later convert this list to a 2d numpy array.\n# I would've preallocated a 2d numpy array if i knew the number of items ahead of time, but I don't, therefore I put everything in a list.\n# s there a better way (performancewise) to go about the task of collecting sequential numerical data (in my case numpy arrays) than putting them in a list and then making a numpy.array out of it (I am creating a new obj and copying the data)? Is there an \"expandable\" matrix data structure available in a well tested module?\nmyarray =",
                "entry_point": "none",
                "canonical_solution": [
                    " np.stack(list_of_arrays)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'stack'\n}\n\n\ndef check():\n    tmp = map(lambda x: x*np.ones(2), range(5))\n    assert np.array_equal(myarray, np.vstack(tmp))\n\n\n",
                "nl": "# I generate a list of one dimensional numpy arrays in a loop and later convert this list to a 2d numpy array.\n\n# I generate a list of one dimensional numpy arrays in a loop and later convert this list to a 2d numpy array.\n\n# I generate a list of one dimensional numpy arrays in a loop and later convert this list to a 2d numpy array.\n"
            },
            "language": "py",
            "problems": [
                7,
                1,
                12
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 43,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/47",
            "content": {
                "task_id": "NumpyEval/47",
                "prompt": "import numpy as np\n\na = np.array([1,2,3,4,5,6])\nb = np.array([2,3,5])\n\n# Perform a symmetric difference between two numpy arrays.\n# Don't convert the numpy array to a set to perform exclusive-or. Use setxor1d directly.\ndiff_arr =",
                "entry_point": "none",
                "canonical_solution": [
                    " np.setxor1d(a, b)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'setxor1d'\n}\n\n\ndef check():\n    assert np.array_equal(diff_arr, np.array([1, 4, 6]))\n\n\n",
                "nl": "# Perform a symmetric difference between two numpy arrays.\n\n# Perform a symmetric difference between two numpy arrays.\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 44,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/48",
            "content": {
                "task_id": "NumpyEval/48",
                "prompt": "import numpy as np\n\ndef count_true_number(arr):\n    # How to count the number of true elements in a NumPy bool array?\n    # return the count value\n",
                "entry_point": "count_true_number",
                "canonical_solution": [
                    "    return arr.sum()"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'sum'\n}\n\n\ndef check(candidate):\n    assert candidate(np.array([[0, 0, 1], [1, 0, 1], [1, 0, 1]], dtype=np.bool)) == 5\n    assert candidate(np.array([[0, 0, 1], [1, 1, 1], [1, 0, 1]], dtype=np.bool)) == 6\n    assert candidate(np.array([[0, 1, 1], [1, 1, 1], [1, 0, 1]], dtype=np.bool)) == 7\n    assert candidate(np.array([[0, 0, 0], [1, 1, 1], [1, 0, 1]], dtype=np.bool)) == 5\n    assert candidate(np.array([[1, 1, 1], [1, 1, 1], [1, 0, 1]], dtype=np.bool)) == 8\n    assert candidate(np.array([[0, 0, 1], [1, 1, 1]], dtype=np.bool)) == 4\n    assert candidate(np.array([[0, 1, 1], [1, 1, 1]], dtype=np.bool)) == 5\n    assert candidate(np.array([[1, 1, 1], [1, 1, 1]], dtype=np.bool)) == 6\n    assert candidate(np.array([[0, 0, 1], [0, 1, 1]], dtype=np.bool)) == 3\n    assert candidate(np.array([[0, 0, 1], [0, 0, 1]], dtype=np.bool)) == 2\n\n\n",
                "nl": "# How to count the number of true elements in a NumPy bool array?\n\n# How to count the number of true elements in a NumPy bool array?\n"
            },
            "language": "py",
            "problems": [
                7,
                1,
                12
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 45,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/49",
            "content": {
                "task_id": "NumpyEval/49",
                "prompt": "import numpy as np\n\ndef append_arr_to_new_empty_arr(arr1, arr2):\n    new_arr = np.array([])\n    # How to add a new row to an empty numpy array\n    # example: \n    # input: np.array([1,2,3]) and np.array([4,5,6])\n    # output: np.array([[1,2,3],[4,5,6]])\n    # Return the new array\n",
                "entry_point": "append_arr_to_new_empty_arr",
                "canonical_solution": [
                    "    return np.vstack((np.hstack((new_arr, arr1)), arr2))"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'hstack_vstack'\n}\n\n\ndef check(candidate):\n    assert np.array_equal(candidate(np.array([1,2,3]), np.array([4,5,6])), np.array([[1,2,3],[4,5,6]]))\n    assert np.array_equal(candidate(np.array([5,2,1]), np.array([8,5,0])), np.array([[5,2,1],[8,5,0]]))\n    assert np.array_equal(candidate(np.array([5,5,5]), np.array([8,5,0])), np.array([[5,5,5],[8,5,0]]))\n    assert np.array_equal(candidate(np.array([2,2,2]), np.array([8,5,0])), np.array([[2,2,2],[8,5,0]]))\n    assert np.array_equal(candidate(np.array([5,4,1]), np.array([8,5,0])), np.array([[5,4,1],[8,5,0]]))\n    assert np.array_equal(candidate(np.array([5,2,1]), np.array([8,4,4])), np.array([[5,2,1],[8,4,4]]))\n    assert np.array_equal(candidate(np.array([5,2,1]), np.array([8,8,8])), np.array([[5,2,1],[8,8,8]]))\n    assert np.array_equal(candidate(np.array([5,2,1]), np.array([5,5,5])), np.array([[5,2,1],[5,5,5]]))\n    assert np.array_equal(candidate(np.array([5,2,1]), np.array([0,5,0])), np.array([[5,2,1],[0,5,0]]))\n    assert np.array_equal(candidate(np.array([5,2,1]), np.array([4,5,0])), np.array([[5,2,1],[4,5,0]]))\n\n",
                "nl": "# How to add a new row to an empty numpy array\n\n# How to add a new row to an empty numpy array\n\n# How to add a new row to an empty numpy array\n\n# How to add a new row to an empty numpy array\n\n# How to add a new row to an empty numpy array\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 46,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/50",
            "content": {
                "task_id": "NumpyEval/50",
                "prompt": "import numpy as np\n\na = np.array([10, 20, 30])\nb = np.array([30, 20, 20])\nc = np.array([50, 20, 40])\n\n# I'd like to calculate element-wise average between a, b and c.\nmean_array =",
                "entry_point": "none",
                "canonical_solution": [
                    " np.mean([a, b, c], axis=0)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'mean'\n}\n\n\ndef check():\n    assert np.array_equal(mean_array, np.array([30, 20, 30]))\n\n\n",
                "nl": "# I'd like to calculate element-wise average between a, b and c.\n"
            },
            "language": "py",
            "problems": [
                7
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 47,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/51",
            "content": {
                "task_id": "NumpyEval/51",
                "prompt": "import numpy as np\n\nA = np.array([1, 7, 9, 2, 0.1, 17, 17, 1.5])\nk = 3\n\n# Find the index of the k smallest values of a numpy array\nidx = ",
                "entry_point": "none",
                "canonical_solution": [
                    "np.argpartition(A, k)[:k]"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'argpartition'\n}\n\n\ndef check():\n    assert np.array_equal(idx, np.array([4, 0, 7]))\n\n\n",
                "nl": "# Find the index of the k smallest values of a numpy array\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 48,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/52",
            "content": {
                "task_id": "NumpyEval/52",
                "prompt": "import numpy as np\n\n# I have a 2D numpy array of shape (N,2) which is holding N points.\na = np.array([(3, 2), (6, 2), (3, 6), (3, 4), (5, 3)])\n# Sorting it such that my points are ordered by x-coordinate, and then by y in cases where the x coordinate is the same, and get the values by inplace\nind =",
                "entry_point": "none",
                "canonical_solution": [
                    " np.lexsort((a[:, 0], a[:, 1]))\na = a[ind]"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'lexsort_value'\n}\n\n\ndef check():\n    assert np.array_equal(a, np.array([(3, 2), (6, 2), (5, 3), (3, 4), (3, 6)]))\n\n\n",
                "nl": "# I have a 2D numpy array of shape (N,2) which is holding N points.\n\n# I have a 2D numpy array of shape (N,2) which is holding N points.\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 49,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/53",
            "content": {
                "task_id": "NumpyEval/53",
                "prompt": "import numpy as np\n\na = np.array([[1,11], [3,9], [5,7]])\n# Firstly, We need to find the minimun value of each column with axis 0,\n# Then conduct subtract operation between each element of the column and the minimum value.\nresult =",
                "entry_point": "none",
                "canonical_solution": [
                    " a - a.min(axis=0)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'min'\n}\n\n\ndef check():\n    assert np.array_equal(result, a - a.min(axis=0))\n\n\n",
                "nl": "# Firstly, We need to find the minimun value of each column with axis 0,\n\n# Firstly, We need to find the minimun value of each column with axis 0,\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 50,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/54",
            "content": {
                "task_id": "NumpyEval/54",
                "prompt": "import numpy as np\n\na = np.arange(1, 10)\na = a.reshape(len(a), 1)\n# I want to access the elements from index 4 to the end:\nb =",
                "entry_point": "none",
                "canonical_solution": [
                    " a[4:]"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'slice'\n}\n\n\ndef check():\n    assert np.array_equal(b, a[4:])\n\n\n",
                "nl": "# I want to access the elements from index 4 to the end:\n"
            },
            "language": "py",
            "problems": [
                7
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 51,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/55",
            "content": {
                "task_id": "NumpyEval/55",
                "prompt": "import numpy as np\n\na = np.array([1, 2, 3, -4, 5])\n# Is there a simple way of replacing all negative values in an array with `0`?\n# using a NumPy function `where` to solve it.\nresult = ",
                "entry_point": "none",
                "canonical_solution": [
                    "np.where(a < 0, 0, a)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'where'\n}\n\n\ndef check():\n    assert np.array_equal(result, np.where(a < 0, 0, a))\n\n\n",
                "nl": "# Is there a simple way of replacing all negative values in an array with `0`?\n\n# Is there a simple way of replacing all negative values in an array with `0`?\n"
            },
            "language": "py",
            "problems": [
                7,
                1,
                12
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 52,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/56",
            "content": {
                "task_id": "NumpyEval/56",
                "prompt": "import numpy as np\n\ndists = np.array([[5,1,2], [2,8,1], [1,6,3], [5,2,2], [5,1,2], [3,1,2]])\nr, dr = 2, 3\n# I have an array of distances called dists. I want to select dists which are within a range [r, r+dr].\n# You don't actually need where if you're just trying to filter out the elements of dists that don't fit your criteria:\nout =",
                "entry_point": "none",
                "canonical_solution": [
                    " dists[np.where(np.logical_and(dists >= r, dists <= r+dr))]",
                    " dists[(dists >= r) & (dists <= r+dr)]"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'where_logical'\n}\n\n\ndef check():\n    assert np.array_equal(out, np.array([5, 2, 2, 3, 5, 2, 2, 5, 2, 3, 2]))\n\n\n",
                "nl": "# I have an array of distances called dists. I want to select dists which are within a range [r, r+dr].\n\n# I have an array of distances called dists. I want to select dists which are within a range [r, r+dr].\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 53,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/57",
            "content": {
                "task_id": "NumpyEval/57",
                "prompt": "import numpy as np\n\nn = 2\na = np.asarray([1,2,3,4,5])\ncond = (a % 2) == 0  #condition is True on even numbers\n# I have an array a and I would like to repeat the elements of a n times if they are even or if they are positive. \n# I mean I want to repeat only the elements that respect some condition, other elements are not displayed.\n# In detail, if a meets the condition cond, I want to repeat it n times. \nm =",
                "entry_point": "none",
                "canonical_solution": [
                    " np.repeat(a[cond], n)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'repeat'\n}\n\n\ndef check():\n    assert np.array_equal(m, np.array([2, 2, 4, 4]))\n\n\n",
                "nl": "#condition is True on even numbers\n\n#condition is True on even numbers\n\n#condition is True on even numbers\n\n#condition is True on even numbers\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 54,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/58",
            "content": {
                "task_id": "NumpyEval/58",
                "prompt": "import numpy as np\n\na = np.array([1,2,3,4,5])\n# I have a numpy array and I like to check if it is sorted.\n# Using numpy.all to do this.\nis_sorted =",
                "entry_point": "none",
                "canonical_solution": [
                    " np.all(a[:-1] <= a[1:])"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'all_sort'\n}\n\n\ndef check():\n    assert is_sorted == True\n\n\n",
                "nl": "# I have a numpy array and I like to check if it is sorted.\n\n# I have a numpy array and I like to check if it is sorted.\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 55,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/59",
            "content": {
                "task_id": "NumpyEval/59",
                "prompt": "import numpy as np\n\na = np.arange(8)[:,None].repeat(8,axis=1)\n# How can I use reshape to divide it into 4 chucks, such that it looks like this:\n# I would like to reshape a to (2, 4, 2, 4) and then transpose it by (0, 2, 1, 3) to c\nb =",
                "entry_point": "none",
                "canonical_solution": [
                    " a.reshape(2,4,2,4)\nc = b.transpose(0,2,1,3)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'reshape_transpose'\n}\n\n\ndef check():\n    tmp_b = a.reshape(2, 4, 2, 4)\n    tmp_c = tmp_b.transpose(0, 2, 1, 3)\n    assert np.array_equal(c, tmp_c)\n\n\n",
                "nl": "# How can I use reshape to divide it into 4 chucks, such that it looks like this:\n\n# How can I use reshape to divide it into 4 chucks, such that it looks like this:\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 56,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/60",
            "content": {
                "task_id": "NumpyEval/60",
                "prompt": "import numpy as np\nx = np.array([[0, 1], [3, 2]])\n# Return the indices of the minimum values along (axis is zero).\nout =",
                "entry_point": "none",
                "canonical_solution": [
                    " np.argmin(x, axis=0)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'argmin'\n}\n\n\ndef check():\n    assert np.array_equal(out, np.array([0, 0]))\n\n\n",
                "nl": "# Return the indices of the minimum values along (axis is zero).\n"
            },
            "language": "py",
            "problems": [
                7
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 57,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/61",
            "content": {
                "task_id": "NumpyEval/61",
                "prompt": "import numpy as np\n\nm = np.arange(2*3*5).reshape((2,3,5))\naxis, start, end = 2, 1, 3\ntarget = m[:, :, 1:3]\nslc = [slice(None)] * len(m.shape)\n# I would like to dynamically slice a numpy array along a specific axis.\n# I think one way would be to use slice(start, end):\n",
                "entry_point": "none",
                "canonical_solution": [
                    "slc[axis] = slice(start, end)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'slice'\n}\n\n\ndef check():\n    assert slc == [slice(None, None, None), slice(None, None, None), slice(1, 3, None)]\n\n\n",
                "nl": "# I would like to dynamically slice a numpy array along a specific axis.\n\n# I would like to dynamically slice a numpy array along a specific axis.\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 58,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/62",
            "content": {
                "task_id": "NumpyEval/62",
                "prompt": "import numpy as np\n\nmyarray = np.array([(\"Hello\",2.5,3),(\"World\",3.6,2)])\n# Converting a 2D numpy array to a structured array\n# You can 'create a record array from a (flat) list of arrays' using numpy.core.records.fromarrays as follows:\n# Note that we need conduct the transpose on the array, and the names reset to 'col1, co2, col3'\nnewrecarray =",
                "entry_point": "none",
                "canonical_solution": [
                    " np.core.records.fromarrays(myarray.T, names='col1, col2, col3')"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'fromarrays_transpose'\n}\n\n\ndef check():\n    assert np.array_equal(newrecarray, np.core.records.fromarrays(myarray.T, names='col1, col2, col3'))\n\n\n",
                "nl": "# Converting a 2D numpy array to a structured array\n\n# Converting a 2D numpy array to a structured array\n\n# Converting a 2D numpy array to a structured array\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 59,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/64",
            "content": {
                "task_id": "NumpyEval/64",
                "prompt": "import numpy as np\n\na = np.array([0,33,4444522])\n# Converting int arrays to string arrays in numpy without truncation\na_str =",
                "entry_point": "none",
                "canonical_solution": [
                    " np.array([str(x) for x in a])"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'astype'\n}\n\n\ndef check():\n    assert np.array_equal(a_str, np.array([str(x) for x in a]))\n\n\n",
                "nl": "# Converting int arrays to string arrays in numpy without truncation\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 60,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/65",
            "content": {
                "task_id": "NumpyEval/65",
                "prompt": "import numpy as np\n\ndef add_row_to_arr(arr, row):\n    # How does one add rows to a numpy array?\n    # Is there a numpythonic way to do this?\n",
                "entry_point": "add_row_to_arr",
                "canonical_solution": [
                    "    return np.vstack((arr, row))"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'vstack'\n}\n\n\ndef check(candidate):\n    assert np.array_equal(candidate(np.array([[1, 2, 3]]), np.array([[4, 5, 6]])), np.array([[1, 2, 3], [4, 5, 6]]))\n    assert np.array_equal(candidate(np.array([[1, 2, 4]]), np.array([[4, 5, 6]])), np.array([[1, 2, 4], [4, 5, 6]]))\n    assert np.array_equal(candidate(np.array([[1, 3, 4]]), np.array([[4, 5, 6]])), np.array([[1, 3, 4], [4, 5, 6]]))\n    assert np.array_equal(candidate(np.array([[1, 3, 4]]), np.array([[4, 8, 6]])), np.array([[1, 3, 4], [4, 8, 6]]))\n    assert np.array_equal(candidate(np.array([[2, 3, 4]]), np.array([[4, 8, 6]])), np.array([[2, 3, 4], [4, 8, 6]]))\n    assert np.array_equal(candidate(np.array([[3, 3, 4]]), np.array([[4, 8, 6]])), np.array([[3, 3, 4], [4, 8, 6]]))\n    assert np.array_equal(candidate(np.array([[4, 3, 4]]), np.array([[4, 8, 6]])), np.array([[4, 3, 4], [4, 8, 6]]))\n    assert np.array_equal(candidate(np.array([[4, 4, 4]]), np.array([[4, 8, 6]])), np.array([[4, 4, 4], [4, 8, 6]]))\n    assert np.array_equal(candidate(np.array([[4, 4]]), np.array([[4, 8]])), np.array([[4, 4], [4, 8]]))\n    assert np.array_equal(candidate(np.array([[4, 6]]), np.array([[4, 8]])), np.array([[4, 6], [4, 8]]))\n\n\n",
                "nl": "# How does one add rows to a numpy array?\n\n# How does one add rows to a numpy array?\n"
            },
            "language": "py",
            "problems": [
                7,
                1,
                12
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 61,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/67",
            "content": {
                "task_id": "NumpyEval/67",
                "prompt": "import numpy as np\n\ndef find_indices_zero(arr):\n    # Find indices of elements equal to zero in a NumPy array\n    # Return the indices\n",
                "entry_point": "find_indices_zero",
                "canonical_solution": [
                    "    return np.where(arr == 0)[0]",
                    "    return np.argwhere(arr == 0)",
                    "    return np.nonzero(x==0)[0]"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'nonzero'\n}\n\n\ndef check(candidate):\n    assert np.array_equal(candidate(np.array([1, 0, 2, 3, 9, 0])), np.array([1, 5]))\n    assert np.array_equal(candidate(np.array([1, 0, 2, 3, 10, 0])), np.array([1, 5]))\n    assert np.array_equal(candidate(np.array([1, 0, 3, 3, 10, 0])), np.array([1, 5]))\n    assert np.array_equal(candidate(np.array([1, 0, 4, 3, 10, 0])), np.array([1, 5]))\n    assert np.array_equal(candidate(np.array([1, 0, 4, 3, 10, 2])), np.array([1]))\n    assert np.array_equal(candidate(np.array([1, 0, 0, 3, 10, 2])), np.array([1, 2]))\n    assert np.array_equal(candidate(np.array([1, 0, 0, 4, 10, 2])), np.array([1, 2]))\n    assert np.array_equal(candidate(np.array([1, 0, 0, 4, 0, 2])), np.array([1, 2, 4]))\n    assert np.array_equal(candidate(np.array([1, 0, 0, 4, 0, 4])), np.array([1, 2, 4]))\n    assert np.array_equal(candidate(np.array([1, 0, 0, 4, 0, 31])), np.array([1, 2, 4]))\n\n\n",
                "nl": "# Find indices of elements equal to zero in a NumPy array\n\n# Find indices of elements equal to zero in a NumPy array\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 62,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/68",
            "content": {
                "task_id": "NumpyEval/68",
                "prompt": "import numpy as np\n\n# We array `data` defines the columns of the nonzero elements in the output array. \ndata = np.array([1, 0, 3])\n# We need to also define the rows and then use fancy indexing in the following way:\nresult = np.zeros((data.size, data.max()+1))\n# Convert array of indices to 1-hot encoded numpy array\nresult",
                "entry_point": "none",
                "canonical_solution": [
                    "[np.arange(data.size), data] = 1"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'arange'\n}\n\n\ndef check():\n    assert np.array_equal(result, np.array([[0., 1., 0., 0.], [1., 0., 0., 0.], [0., 0., 0., 1.]]))\n\n\n",
                "nl": "# We array `data` defines the columns of the nonzero elements in the output array. \n\n# We array `data` defines the columns of the nonzero elements in the output array. \n\n# We array `data` defines the columns of the nonzero elements in the output array. \n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 63,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/69",
            "content": {
                "task_id": "NumpyEval/69",
                "prompt": "import numpy as np\n\nA = np.array([[1, 2], [3, 0]])\n\n# How can I know the (row, column) index of the minimum of a numpy array/matrix?\n# Use unravel_index()\nout =",
                "entry_point": "none",
                "canonical_solution": [
                    " np.unravel_index(A.argmin(), A.shape)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'unravel_index'\n}\n\n\ndef check():\n    assert out == (1, 1)\n\n\n",
                "nl": "# How can I know the (row, column) index of the minimum of a numpy array/matrix?\n\n# How can I know the (row, column) index of the minimum of a numpy array/matrix?\n"
            },
            "language": "py",
            "problems": [
                7,
                1,
                12
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 64,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/70",
            "content": {
                "task_id": "NumpyEval/70",
                "prompt": "import numpy as np\n\ndat = np.array([[1,2,3], [4,5,np.nan], [np.nan,6,np.nan]])\nmdat = np.ma.masked_array(dat,np.isnan(dat))\n# How can I calculate matrix mean values along the row of matrix, but to remove nan values from calculation?\n# If all row values is NaNs, the mean value is set to NaN.\nmm =",
                "entry_point": "none",
                "canonical_solution": [
                    " np.mean(mdat,axis=1).filled(np.nan)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'mean_filled'\n}\n\n\ndef check():\n    assert np.array_equal(mm, np.array([2., 4.5, 6.]))\n\n\n",
                "nl": "# How can I calculate matrix mean values along the row of matrix, but to remove nan values from calculation?\n\n# How can I calculate matrix mean values along the row of matrix, but to remove nan values from calculation?\n"
            },
            "language": "py",
            "problems": [
                7,
                1,
                12
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 65,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/71",
            "content": {
                "task_id": "NumpyEval/71",
                "prompt": "import numpy as np\n\ndef replace_elements_that_greater_than_value(arr, value, new_value):\n    # Replace all elements of Python NumPy Array that are greater than `value` with `new_value`\n    # Return the array\n",
                "entry_point": "replace_elements_that_greater_than_value",
                "canonical_solution": [
                    "    arr[arr > value] = new_value\n    return arr"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'replace'\n}\n\ndef check(candidate):\n    assert np.array_equal(candidate(np.array([[1, 2, 3, 4], [5, 6, 7, 8]]), 5, 0), np.array([[1, 2, 3, 4], [5, 0, 0, 0]]))\n    assert np.array_equal(candidate(np.array([[1, 2, 3, 4], [5, 6, 7, 8]]), 5, 1), np.array([[1, 2, 3, 4], [5, 1, 1, 1]]))\n    assert np.array_equal(candidate(np.array([[1, 2, 3, 4], [5, 6, 7, 8]]), 6, 1), np.array([[1, 2, 3, 4], [5, 6, 1, 1]]))\n    assert np.array_equal(candidate(np.array([[1, 2, 3, 4], [5, 6, 7, 8]]), 7, 1), np.array([[1, 2, 3, 4], [5, 6, 7, 1]]))\n    assert np.array_equal(candidate(np.array([[1, 2, 3, 4], [5, 6, 7, 9]]), 7, 1), np.array([[1, 2, 3, 4], [5, 6, 7, 1]]))\n    assert np.array_equal(candidate(np.array([[1, 2, 3, 4], [5, 6, 7, 10]]), 7, 1), np.array([[1, 2, 3, 4], [5, 6, 7, 1]]))\n    assert np.array_equal(candidate(np.array([[1, 2, 3, 4], [5, 6, 7, 11]]), 7, 1), np.array([[1, 2, 3, 4], [5, 6, 7, 1]]))\n    assert np.array_equal(candidate(np.array([[1, 2, 3, 4], [5, 6, 7, 12]]), 7, 1), np.array([[1, 2, 3, 4], [5, 6, 7, 1]]))\n    assert np.array_equal(candidate(np.array([[1, 2, 3, 4], [5, 6, 7, 15]]), 7, 1), np.array([[1, 2, 3, 4], [5, 6, 7, 1]]))\n    assert np.array_equal(candidate(np.array([[1, 2, 3, 4], [5, 6, 7, 15]]), 7, 0), np.array([[1, 2, 3, 4], [5, 6, 7, 0]]))\n\n\n",
                "nl": "# Replace all elements of Python NumPy Array that are greater than `value` with `new_value`\n\n# Replace all elements of Python NumPy Array that are greater than `value` with `new_value`\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 66,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/72",
            "content": {
                "task_id": "NumpyEval/72",
                "prompt": "import numpy as np\n\ndef get_i_th_index_in_last_dim(arr, i):\n    \"\"\"\n    I would like to slice a numpy array to obtain the i-th index in the last dimension.\n    Is there a way I can obtain this slice for any array without explicitly having to write the array dimensions?\n    There is ... or Ellipsis, which does exactly this\n    Returns: numpy array\n    \"\"\"\n",
                "entry_point": "get_i_th_index_in_last_dim",
                "canonical_solution": [
                    "    return arr[...,i]"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'slicing'\n}\n\n\ndef check(candidate):\n    assert np.array_equal(candidate(np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]]), 1), np.array([2,6,10]))\n    assert np.array_equal(candidate(np.array([[10,2,3,4], [5,6,7,8], [9,10,11,12]]), 1), np.array([2,6,10]))\n    assert np.array_equal(candidate(np.array([[10,2,3,4], [15,6,7,8], [9,10,11,12]]), 1), np.array([2,6,10]))\n    assert np.array_equal(candidate(np.array([[10,2,3,4], [15,16,7,8], [9,10,11,12]]), 1), np.array([2,16,10]))\n    assert np.array_equal(candidate(np.array([[10,2,3,4], [15,16,7,8], [9,110,11,12]]), 1), np.array([2,16,110]))\n    assert np.array_equal(candidate(np.array([[10,2,3,4], [15,16,7,8], [9,110,111,12]]), 1), np.array([2,16,110]))\n    assert np.array_equal(candidate(np.array([[10,2,3,4], [15,16,7,8], [9,110,111,112]]), 1), np.array([2,16,110]))\n    assert np.array_equal(candidate(np.array([[10,2,3,4], [15,16,7,8], [19,110,111,112]]), 1), np.array([2,16,110]))\n    assert np.array_equal(candidate(np.array([[10,2,3,4], [15,16,17,8], [19,110,111,112]]), 1), np.array([2,16,110]))\n    assert np.array_equal(candidate(np.array([[10,2,23,4], [15,16,17,8], [19,110,111,112]]), 1), np.array([2,16,110]))\n\n\n",
                "nl": "\"\"\"\n    I would like to slice a numpy array to obtain the i-th index in the last dimension.\n    Is there a way I can obtain this slice for any array without explicitly having to write the array dimensions?\n    There is ... or Ellipsis, which does exactly this\n    Returns: numpy array\n    \"\"\""
            },
            "language": "py",
            "problems": [
                1,
                12
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 67,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/74",
            "content": {
                "task_id": "NumpyEval/74",
                "prompt": "import numpy as np\n\ndef find_index_within_range(arr, low, high):\n    # find index of the elements within range [low, high]\n    # Return the final array of indices.\n",
                "entry_point": "find_index_within_range",
                "canonical_solution": [
                    "    return np.where(np.logical_and(arr >= low, arr <= high))[0]"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'where_logical_and'\n}\n\n\ndef check(candidate):\n    assert np.array_equal(candidate(np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 3, 6), np.array([2, 3, 4, 5]))\n    assert np.array_equal(candidate(np.array([1, 2, 3, 4, 5, 1, 7, 8, 9, 10]), 3, 6), np.array([2, 3, 4]))\n    assert np.array_equal(candidate(np.array([1, 2, 3, 4, 5, 1, 7, 11, 9, 10]), 3, 6), np.array([2, 3, 4]))\n    assert np.array_equal(candidate(np.array([1, 2, 3, 4, 5, 1, 1, 11, 9, 10]), 3, 6), np.array([2, 3, 4]))\n    assert np.array_equal(candidate(np.array([1, 2, 3, 4, 5, 1, 121, 11, 9, 10]), 3, 6), np.array([2, 3, 4]))\n    assert np.array_equal(candidate(np.array([1, 2, 3, 4, 5, 1, 121, 11, 19, 10]), 3, 6), np.array([2, 3, 4]))\n    assert np.array_equal(candidate(np.array([1, 2, 13, 4, 5, 1, 121, 11, 19, 10]), 3, 6), np.array([3, 4]))\n    assert np.array_equal(candidate(np.array([1, 2, 13, 4, 5, 1, 121, 11, 19, 10]), 3, 10), np.array([3, 4, 9]))\n    assert np.array_equal(candidate(np.array([1, 2, 13, 4, 5, 1, 121, 11, 100, 10]), 3, 10), np.array([3, 4, 9]))\n    assert np.array_equal(candidate(np.array([1, 2, 13, 4, 5, 11, 121, 11, 100, 10]), 3, 10), np.array([3, 4, 9]))\n\n\n",
                "nl": "# find index of the elements within range [low, high]\n\n# find index of the elements within range [low, high]\n"
            },
            "language": "py",
            "problems": [
                7
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 68,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/75",
            "content": {
                "task_id": "NumpyEval/75",
                "prompt": "import numpy as np\n\nx=np.array([range(100,1,-1)])\n#This will tell me those values\n# generate a mask to find all values that are even numbers\n# Is there an efficient Numpy mechanism to retrieve the integer indexes of locations in an array based on a condition is true as opposed to the Boolean mask array?\nout =",
                "entry_point": "none",
                "canonical_solution": [
                    " np.where(x % 2 == 0)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'where_condition'\n}\n\n\ndef check():\n    assert np.array_equal(out[1], np.where(x % 2 == 0)[1])\n\n\n",
                "nl": "#This will tell me those values\n\n#This will tell me those values\n\n#This will tell me those values\n"
            },
            "language": "py",
            "problems": [
                7,
                1,
                12
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 69,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/76",
            "content": {
                "task_id": "NumpyEval/76",
                "prompt": "import numpy as np\nresult = {0: 1.1, 1: 0.5, 2: 0.4, 3: 0.4, 4: 1.0, 5: 0.1, 6: 0.2}\n\nnames = ['id','data']\nformats = ['f8','f8']\ndtype = dict(names = names, formats=formats)\n# I have a dictionary that I need to convert to a NumPy structured array. \narray =",
                "entry_point": "none",
                "canonical_solution": [
                    " np.array(list(result.items()), dtype=dtype)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'shape'\n}\n\n\ndef check():\n    assert np.array_equal(array, np.array(list(result.items()), dtype=dtype))\n\n\n",
                "nl": "# I have a dictionary that I need to convert to a NumPy structured array. \n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 70,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/77",
            "content": {
                "task_id": "NumpyEval/77",
                "prompt": "import numpy as np\n\nz = np.array([ 0, 1, 3, 9, 18 ])\n# What is the inverse of the numpy cumsum function?\nz[1:] =",
                "entry_point": "none",
                "canonical_solution": [
                    " z[:-1]"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'slice'\n}\n\n\ndef check():\n    assert np.array_equal(z, [ 0, 0, 1, 3, 9 ])\n\n\n",
                "nl": "# What is the inverse of the numpy cumsum function?\n"
            },
            "language": "py",
            "problems": [
                7,
                1,
                12
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 71,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/80",
            "content": {
                "task_id": "NumpyEval/80",
                "prompt": "import numpy as np\n\nx = np.arange(8.0)\n# Partition array into 3 chunks with Numpy\nresult = ",
                "entry_point": "none",
                "canonical_solution": [
                    "np.array_split(x, 3)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'array_split'\n}\n\n\ndef check():\n    assert np.array_equal(result[0], np.array_split(x, 3)[0]) \n    assert np.array_equal(result[1], np.array_split(x, 3)[1]) \n    assert np.array_equal(result[2], np.array_split(x, 3)[2]) \n\n\n",
                "nl": "# Partition array into 3 chunks with Numpy\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 72,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/81",
            "content": {
                "task_id": "NumpyEval/81",
                "prompt": "import numpy as np\n\ndef crop(arr, top, bottom, left, right):\n    # How do I extract a sub-array from a numpy 2d array? \n    # I'd like to extract a numpy array with a specified size from a numpy 2d array--essentially I want to crop the array.\n    # Return a sub-array from a numpy 2d array.\n",
                "entry_point": "crop",
                "canonical_solution": [
                    "    return arr[top:bottom, left:right]"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 't_b_l_r'\n}\n\n\ndef check(candidate):\n    assert np.array_equal(candidate(np.array([[1, 3, 3], [4, 6, 6], [7, 8, 9]]), 0, 2, 0, 2), np.array([[1, 3], [4, 6]]))\n    assert np.array_equal(candidate(np.array([[2, 3, 3], [2, 6, 6], [7, 8, 9]]), 0, 2, 0, 2), np.array([[2, 3], [2, 6]]))\n    assert np.array_equal(candidate(np.array([[2, 3, 4], [2, 6, 6], [7, 8, 9]]), 0, 2, 0, 2), np.array([[2, 3], [2, 6]]))\n    assert np.array_equal(candidate(np.array([[2, 3, 42], [2, 6, 6], [7, 8, 9]]), 0, 2, 0, 2), np.array([[2, 3], [2, 6]]))\n    assert np.array_equal(candidate(np.array([[1, 9, 3], [2, 6, 6], [7, 8, 9]]), 0, 2, 0, 2), np.array([[1, 9], [2, 6]]))\n    assert np.array_equal(candidate(np.array([[0, 3, 3], [2, 6, 6], [7, 8, 9]]), 0, 2, 0, 2), np.array([[0, 3], [2, 6]]))\n    assert np.array_equal(candidate(np.array([[6, 3, 3], [2, 1, 6], [7, 8, 9]]), 0, 2, 0, 2), np.array([[6, 3], [2, 1]]))\n    assert np.array_equal(candidate(np.array([[2, 3, 3], [2, 6, 3], [7, 8, 3]]), 0, 2, 0, 2), np.array([[2, 3], [2, 6]]))\n    assert np.array_equal(candidate(np.array([[12, 3, 3], [2, 6, 6], [7, 8, 9]]), 0, 2, 0, 2), np.array([[12, 3], [2, 6]]))\n    assert np.array_equal(candidate(np.array([[23, 34, 3], [2, 6, 6], [7, 8, 9]]), 0, 2, 0, 2), np.array([[23, 34], [2, 6]]))\n\n\n",
                "nl": "# How do I extract a sub-array from a numpy 2d array? \n\n# How do I extract a sub-array from a numpy 2d array? \n\n# How do I extract a sub-array from a numpy 2d array? \n"
            },
            "language": "py",
            "problems": [
                7,
                1,
                12
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 73,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/82",
            "content": {
                "task_id": "NumpyEval/82",
                "prompt": "import numpy as np\n\ndef add_first_element_to_arr(arr):\n    # I want to add the first element on to the end of the array.\n    # Return the appended array.\n",
                "entry_point": "add_first_element_to_arr",
                "canonical_solution": [
                    "    return np.append(arr, arr[0])"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'append'\n}\n\n\ndef check(candidate):\n    assert np.array_equal(candidate(np.array([1, 2, 3])), np.array([1, 2, 3, 1]))\n    assert np.array_equal(candidate(np.array([1, 3, 3])), np.array([1, 3, 3, 1]))\n    assert np.array_equal(candidate(np.array([2, 2, 3])), np.array([2, 2, 3, 2]))\n    assert np.array_equal(candidate(np.array([1, 3])), np.array([1, 3, 1]))\n    assert np.array_equal(candidate(np.array([1, 2, 3, 4])), np.array([1, 2, 3, 4, 1]))\n    assert np.array_equal(candidate(np.array([1, 4, 3])), np.array([1, 4, 3, 1]))\n    assert np.array_equal(candidate(np.array([1, 2, 13])), np.array([1, 2, 13, 1]))\n    assert np.array_equal(candidate(np.array([1, 12, 13])), np.array([1, 12, 13, 1]))\n    assert np.array_equal(candidate(np.array([1, 32, 3])), np.array([1, 32, 3, 1]))\n    assert np.array_equal(candidate(np.array([11, 2, 3])), np.array([11, 2, 3, 11]))\n\n",
                "nl": "# I want to add the first element on to the end of the array.\n\n# I want to add the first element on to the end of the array.\n"
            },
            "language": "py",
            "problems": [
                7
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 74,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/83",
            "content": {
                "task_id": "NumpyEval/83",
                "prompt": "import numpy as np\n\nSamples = {5.207403005022627: 0.69973543384229719, 6.8970222167794759: 0.080782939731898179, 7.8338517407140973: 0.10308033284258854, 8.5301143255505334: 0.018640838362318335, 10.418899728838058: 0.14427355015329846, 5.3983946820220501: 0.51319796560976771}\n# I want to separate the keys and values into 2 numpy arrays. \nkeys = np.fromiter(Samples.keys(), dtype=float)\nvals =",
                "entry_point": "none",
                "canonical_solution": [
                    " np.fromiter(Samples.values(), dtype=float)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'fromiter'\n}\n\n\ndef check():\n    assert np.array_equal(vals, np.fromiter(Samples.values(), dtype=float))\n\n\n",
                "nl": "# I want to separate the keys and values into 2 numpy arrays. \n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 75,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/84",
            "content": {
                "task_id": "NumpyEval/84",
                "prompt": "import numpy as np\n\na = np.array([0 +  0.5j, 0.25 + 1.2352444e-24j, 0.25+ 0j, 2.46519033e-32 + 0j])\ntol = 1e-16\n# what is the fastest and easiest way to set the super low value named tol to zero?\n# Handling of real and imaginary numbers separately\na.real[np.abs(a.real) < tol] = 0\n",
                "entry_point": "none",
                "canonical_solution": [
                    "a.imag[np.abs(a.imag) < tol] = 0"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'imag_abs_tol'\n}\n\n\ndef check():\n    assert np.array_equal(a, np.array([0 +  0.5j, 0.25 + 0j, 0.25+ 0j, 0 + 0j]))\n\n\n",
                "nl": "# what is the fastest and easiest way to set the super low value named tol to zero?\n\n# what is the fastest and easiest way to set the super low value named tol to zero?\n"
            },
            "language": "py",
            "problems": [
                7,
                1,
                12
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 76,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/85",
            "content": {
                "task_id": "NumpyEval/85",
                "prompt": "import numpy as np\n\ndef test_arr_contain_only_zeros(arr):\n    # Test if numpy array contains only zeros\n    # Return the result\n",
                "entry_point": "test_arr_contain_only_zeros",
                "canonical_solution": [
                    "    return not np.any(arr)",
                    "    return not a.any()"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'any'\n}\n\n\ndef check(candidate):\n    assert candidate(np.array(((0,0),(0,0)))) == True\n    assert candidate(np.array(((1,0),(0,0)))) == False\n    assert candidate(np.array(((1,0),(1,0)))) == False\n    assert candidate(np.array(((1,0),(12,0)))) == False\n    assert candidate(np.array(((1,0),(10,10)))) == False\n    assert candidate(np.array(((12,0),(12,0)))) == False\n    assert candidate(np.array(((1,20),(0,0)))) == False\n    assert candidate(np.array(((1,0),(0,1230)))) == False\n    assert candidate(np.array(((1,10),(10,0)))) == False\n    assert candidate(np.array(((1,230),(10,10)))) == False\n\n\n",
                "nl": "# Test if numpy array contains only zeros\n\n# Test if numpy array contains only zeros\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 77,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/86",
            "content": {
                "task_id": "NumpyEval/86",
                "prompt": "import numpy as np\n\nx = np.array([[1], [2], [3]])\n# Numpy Vector (N,1) dimension -> (N,) dimension conversion\nout =",
                "entry_point": "none",
                "canonical_solution": [
                    " x.reshape(3,)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'reshape'\n}\n\n\ndef check():\n    assert out.shape == (3,)\n\n\n",
                "nl": "# Numpy Vector (N,1) dimension -> (N,) dimension conversion\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 78,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/87",
            "content": {
                "task_id": "NumpyEval/87",
                "prompt": "import numpy as np\n\na = np.array([[1,1,0],[1,0,0],[1,0,0],[1,1,0]])\n# I want to check if all values in the columns of a numpy array/matrix are the same.\n# A column shares a common value if all the values in that column are True:\n# The below code checks if all values in the columns are the same using a == a[0,:] and axis=0\nresult =",
                "entry_point": "none",
                "canonical_solution": [
                    " np.all(a == a[0,:], axis = 0)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'all_axis'\n}\n\n\ndef check():\n    assert np.array_equal(result, np.array([True, False, True]))\n\n\n",
                "nl": "# I want to check if all values in the columns of a numpy array/matrix are the same.\n\n# I want to check if all values in the columns of a numpy array/matrix are the same.\n\n# I want to check if all values in the columns of a numpy array/matrix are the same.\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 79,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/88",
            "content": {
                "task_id": "NumpyEval/88",
                "prompt": "import numpy as np\n\ndef convert_nan_to_zero(arr):\n    # convert nan value to zero\n    # Return the changed array\n",
                "entry_point": "convert_nan_to_zero",
                "canonical_solution": [
                    "    arr[np.isnan(arr)] = 0\n    return arr"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'isnan'\n}\n\n\ndef check(candidate):\n    assert np.array_equal(candidate(np.array([1, 2, np.nan, 4, np.nan])), np.array([1, 2, 0, 4, 0]))\n    assert np.array_equal(candidate(np.array([1, 2, 3, 4, np.nan])), np.array([1, 2, 3, 4, 0]))\n    assert np.array_equal(candidate(np.array([1, 2, 5, 4, np.nan])), np.array([1, 2, 5, 4, 0]))\n    assert np.array_equal(candidate(np.array([1, 2, np.nan, np.nan, np.nan])), np.array([1, 2, 0, 0, 0]))\n    assert np.array_equal(candidate(np.array([1, 2, 5, 4, np.nan])), np.array([1, 2, 5, 4, 0]))\n    assert np.array_equal(candidate(np.array([1, 2, 1, 4, 5])), np.array([1, 2, 1, 4, 5]))\n    assert np.array_equal(candidate(np.array([1, 2, 1, np.nan, 5])), np.array([1, 2, 1, 0, 5]))\n    assert np.array_equal(candidate(np.array([np.nan, 2, 1, 2, 5])), np.array([0, 2, 1, 2, 5]))\n    assert np.array_equal(candidate(np.array([np.nan, 2, np.nan, 2, 5])), np.array([0, 2, 0, 2, 5]))\n    assert np.array_equal(candidate(np.array([np.nan, 2, 1, np.nan, 5])), np.array([0, 2, 1, 0, 5]))\n\n\n",
                "nl": "# convert nan value to zero\n\n# convert nan value to zero\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 80,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/89",
            "content": {
                "task_id": "NumpyEval/89",
                "prompt": "import numpy as np\n\ndef consecutive(data, stepsize=1):\n    # How to find the groups of consecutive elements in a NumPy array\n    # I have to cluster the consecutive elements from a NumPy array. Considering the following example\n    # a = [ 0, 47, 48, 49, 50, 97, 98, 99]\n    # The output should be a list of tuples as follows\n    # [(0), (47, 48, 49, 50), (97, 98, 99)]\n    # Here the difference is just one between the elements. It will be great if the difference can also be specified as a limit or a hardcoded number.\n    # Finally, return the number of consecutive elements in the array.\n",
                "entry_point": "consecutive",
                "canonical_solution": [
                    "    return len(np.split(data, np.where(np.diff(data) != stepsize)[0]+1))"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'shape'\n}\n\n\ndef check(candidate):\n    assert candidate(np.array([0, 47, 48, 49, 50, 97, 98, 99])) == 3\n    assert candidate(np.array([0, 47, 48, 49, 20, 97, 98, 99])) == 4\n    assert candidate(np.array([0, 2, 3, 49, 50, 97, 98, 99])) == 4\n    assert candidate(np.array([0, 2, 3, 4, 50, 97, 98, 99])) == 4\n    assert candidate(np.array([0, 2, 3, 4, 5, 97, 98, 99])) == 3\n    assert candidate(np.array([0, 2, 3, 4, 5, 9, 98, 99])) == 4\n    assert candidate(np.array([0, 2, 2, 4, 5, 9, 98, 99])) == 6\n    assert candidate(np.array([0, 2, 2, 4, 5, 9, 100, 99])) == 7\n    assert candidate(np.array([0, 2, 2, 4, 5, 9, 100, 200])) == 7\n\n\n",
                "nl": "# How to find the groups of consecutive elements in a NumPy array\n\n# How to find the groups of consecutive elements in a NumPy array\n\n# How to find the groups of consecutive elements in a NumPy array\n\n# How to find the groups of consecutive elements in a NumPy array\n\n# How to find the groups of consecutive elements in a NumPy array\n\n# How to find the groups of consecutive elements in a NumPy array\n\n# How to find the groups of consecutive elements in a NumPy array\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 81,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/90",
            "content": {
                "task_id": "NumpyEval/90",
                "prompt": "import numpy as np\n\ndef concatenate_two_arrays(arr1, arr2):\n    # Concatenate a NumPy array to another NumPy array\n\n",
                "entry_point": "concatenate_two_arrays",
                "canonical_solution": [
                    "    return np.concatenate((arr1, arr2))"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'concatenate'\n}\n\n\ndef check(candidate):\n    assert np.array_equal(candidate(np.array([[1,2]]), np.array([[3,4]])), np.array([[1,2],[3,4]]))\n    assert np.array_equal(candidate(np.array([[1,2]]), np.array([[3,5]])), np.array([[1,2],[3,5]]))\n    assert np.array_equal(candidate(np.array([[2,2]]), np.array([[3,5]])), np.array([[2,2],[3,5]]))\n    assert np.array_equal(candidate(np.array([[1,2]]), np.array([[4,5]])), np.array([[1,2],[4,5]]))\n    assert np.array_equal(candidate(np.array([[31,2]]), np.array([[3,5]])), np.array([[31,2],[3,5]]))\n    assert np.array_equal(candidate(np.array([[3,2]]), np.array([[3,5]])), np.array([[3,2],[3,5]]))\n    assert np.array_equal(candidate(np.array([[31,2]]), np.array([[3,52]])), np.array([[31,2],[3,52]]))\n    assert np.array_equal(candidate(np.array([[31,2]]), np.array([[31,15]])), np.array([[31,2],[31,15]]))\n    assert np.array_equal(candidate(np.array([[31,2]]), np.array([[33,5]])), np.array([[31,2],[33,5]]))\n    assert np.array_equal(candidate(np.array([[32,12]]), np.array([[3,5]])), np.array([[32,12],[3,5]]))\n\n",
                "nl": "# Concatenate a NumPy array to another NumPy array\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 82,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/91",
            "content": {
                "task_id": "NumpyEval/91",
                "prompt": "import numpy as np\n\na = np.arange(12).reshape(3,4)\n# Removing columns with index 1 and 3 in numpy\n# If you ever want to delete more than one columns, you just pass indices of columns you want deleted as a list to np.delete, like this:\nout =",
                "entry_point": "none",
                "canonical_solution": [
                    " np.delete(a, [1, 3], axis=1)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'delete'\n}\n\n\ndef check():\n    assert np.array_equal(out, np.array([[0, 2], [4, 6], [8, 10]]))\n\n\n",
                "nl": "# Removing columns with index 1 and 3 in numpy\n\n# Removing columns with index 1 and 3 in numpy\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 83,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/92",
            "content": {
                "task_id": "NumpyEval/92",
                "prompt": "import numpy as np\n\na = np.matrix([[ 0.16666667, 0.66666667, 0.16666667]])\n# how can I make a python list obj from this matrix?\n# # the list should be one dimensional and contain all values of the matrix\na_list =",
                "entry_point": "none",
                "canonical_solution": [
                    " list(np.array(a).reshape(-1,))"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'list_reshape'\n}\n\n\ndef check():\n    assert a_list == [0.16666667, 0.66666667, 0.16666667]\n\n\n",
                "nl": "# how can I make a python list obj from this matrix?\n\n# how can I make a python list obj from this matrix?\n"
            },
            "language": "py",
            "problems": [
                7,
                12
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 84,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/93",
            "content": {
                "task_id": "NumpyEval/93",
                "prompt": "import numpy as np\n\ndata = np.array([1,2,3,4,5,6,7,8,9])\n# How to remove specific elements in a numpy array\uff1f\n# I then want to remove 3,4,7 from a. All I know is the index of the values (index=[2,3,6]).\nindex = [2, 3, 6]\nresult =",
                "entry_point": "none",
                "canonical_solution": [
                    "np.delete(data, index)",
                    "np.delete(data, index, axis=0)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'delete'\n}\n\n\ndef check():\n    assert np.array_equal(result, np.array([1, 2, 5, 6, 8, 9]))\n\n\n",
                "nl": "# How to remove specific elements in a numpy array\uff1f\n\n# How to remove specific elements in a numpy array\uff1f\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 85,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/94",
            "content": {
                "task_id": "NumpyEval/94",
                "prompt": "import numpy as np\n\narr = np.array([[ 1.41421356, 0.70710678, 0.70710678], [0., 1.22474487,1.22474487], [0., 0., 0.]])\n# remove zero rows 2-D numpy array\n# Use np.all with an axis argument:\nnew_arr =",
                "entry_point": "none",
                "canonical_solution": [
                    " arr[~np.all(arr == 0, axis=1)]"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'all'\n}\n\n\ndef check():\n    assert np.array_equal(new_arr, np.array([[ 1.41421356, 0.70710678, 0.70710678], [0., 1.22474487,1.22474487]]))\n\n\n",
                "nl": "# remove zero rows 2-D numpy array\n\n# remove zero rows 2-D numpy array\n"
            },
            "language": "py",
            "problems": [
                7,
                1
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 86,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/95",
            "content": {
                "task_id": "NumpyEval/95",
                "prompt": "import numpy as np\n\na = np.array([1,2,3,4,5,6])\nb = np.array([1,4,5])\n\n# Is there a way to compare what elements in a exist in b?\n# Return a array of booleans, True if elements in a exist in b, False otherwise\nc =",
                "entry_point": "none",
                "canonical_solution": [
                    " np.in1d(a,b)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'in1d'\n}\n\n\ndef check():\n    assert np.array_equal(c, np.array([True, False, False, True, True, False]))\n\n\n",
                "nl": "# Is there a way to compare what elements in a exist in b?\n\n# Is there a way to compare what elements in a exist in b?\n"
            },
            "language": "py",
            "problems": [
                7,
                1,
                12
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 87,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/96",
            "content": {
                "task_id": "NumpyEval/96",
                "prompt": "import numpy as np\n\n# How do I create a numpy array of arbitrary shape 3x4 filled with all True?\ndata =",
                "entry_point": "none",
                "canonical_solution": [
                    " np.ones((3, 4), dtype=bool)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'ones'\n}\n\n\ndef check():\n    assert np.array_equal(data, np.ones((3, 4), dtype=bool))\n\n\n",
                "nl": "# How do I create a numpy array of arbitrary shape 3x4 filled with all True?\n"
            },
            "language": "py",
            "problems": [
                7,
                1,
                12
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 88,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/97",
            "content": {
                "task_id": "NumpyEval/97",
                "prompt": "import numpy as np\nfrom numpy import newaxis\n\na = np.array([\n     [1,2],\n     [3,4],\n     [5,6],\n     [7,8]])\n\nb = np.array([1,2,3,4])\n\n# multiply arrays rowwise\n# Basically out[i] = a[i] * b[i], where a[i].shape is (2,) and b[i] then is a scalar.\n# What's the trick?\nout =",
                "entry_point": "none",
                "canonical_solution": [
                    " a * b[:, newaxis]"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'multipy_newaxis'\n}\n\n\ndef check():\n    assert np.array_equal(out, a * b[:, newaxis])\n\n\n",
                "nl": "# multiply arrays rowwise\n\n# multiply arrays rowwise\n\n# multiply arrays rowwise\n"
            },
            "language": "py",
            "problems": [
                7,
                12
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 89,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/98",
            "content": {
                "task_id": "NumpyEval/98",
                "prompt": "import numpy as np\n\na = np.array((1,2,3))\nb = np.array((4,5,6))\n# How can the Euclidean distance be calculated with NumPy?\ndist = ",
                "entry_point": "none",
                "canonical_solution": [
                    "np.linalg.norm(a-b)"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra-v-dazan',\n    'dataset': 'test',\n    'type': 'linalg'\n}\n\n\ndef check():\n    assert np.array_equal(dist, np.linalg.norm(a-b))\n\n\n",
                "nl": "# How can the Euclidean distance be calculated with NumPy?\n"
            },
            "language": "py",
            "problems": [
                7,
                1,
                12
            ]
        }
    },
    {
        "model": "datasets_study.problem",
        "pk": 90,
        "fields": {
            "source_dataset": "CoderEval4Python",
            "prompt_id": "NumpyEval/99",
            "content": {
                "task_id": "NumpyEval/99",
                "prompt": "import numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame({'A': [5, 6, 7], 'B': [7, 8, 9]})\n# What's the best way to sum all values in a Pandas dataframe?\n# the result is a numeric value\nsum_value =",
                "entry_point": "none",
                "canonical_solution": [
                    " df.to_numpy().sum()"
                ],
                "test": "\n\nMETADATA = {\n    'author': 'msra',\n    'dataset': 'test',\n    'type': 'shape'\n}\n\n\ndef check():\n    assert sum_value == 42\n\n\n",
                "nl": "# What's the best way to sum all values in a Pandas dataframe?\n\n# What's the best way to sum all values in a Pandas dataframe?\n"
            },
            "language": "py",
            "problems": [
                7,
                1,
                12
            ]
        }
    }
]