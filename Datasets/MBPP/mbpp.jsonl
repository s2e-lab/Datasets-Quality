






<!DOCTYPE html>
<html lang="en" data-color-mode="auto" data-light-theme="light" data-dark-theme="dark" data-a11y-animated-images="system">
  <head>
    <meta charset="utf-8">
  <link rel="dns-prefetch" href="https://github.githubassets.com">
  <link rel="dns-prefetch" href="https://avatars.githubusercontent.com">
  <link rel="dns-prefetch" href="https://github-cloud.s3.amazonaws.com">
  <link rel="dns-prefetch" href="https://user-images.githubusercontent.com/">
  <link rel="preconnect" href="https://github.githubassets.com" crossorigin>
  <link rel="preconnect" href="https://avatars.githubusercontent.com">

  

  <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/light-0946cdc16f15.css" /><link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/dark-3946c959759a.css" /><link data-color-theme="dark_dimmed" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/dark_dimmed-9b9a8c91acc5.css" /><link data-color-theme="dark_high_contrast" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/dark_high_contrast-11302a585e33.css" /><link data-color-theme="dark_colorblind" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/dark_colorblind-1a4564ab0fbf.css" /><link data-color-theme="light_colorblind" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/light_colorblind-12a8b2aa9101.css" /><link data-color-theme="light_high_contrast" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/light_high_contrast-5924a648f3e7.css" /><link data-color-theme="light_tritanopia" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/light_tritanopia-05358496cb79.css" /><link data-color-theme="dark_tritanopia" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/dark_tritanopia-aad6b801a158.css" />
    <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/primer-primitives-fb1d51d1ef66.css" />
    <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/primer-0e3420bbec16.css" />
    <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/global-0d04dfcdc794.css" />
    <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/github-c7a3a0ac71d4.css" />
  <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/code-9271f811184f.css" />

    <meta name="optimizely-datafile" content="{&quot;groups&quot;: [], &quot;environmentKey&quot;: &quot;production&quot;, &quot;rollouts&quot;: [], &quot;typedAudiences&quot;: [], &quot;projectId&quot;: &quot;16737760170&quot;, &quot;variables&quot;: [], &quot;featureFlags&quot;: [], &quot;experiments&quot;: [], &quot;version&quot;: &quot;4&quot;, &quot;audiences&quot;: [{&quot;conditions&quot;: &quot;[\&quot;or\&quot;, {\&quot;match\&quot;: \&quot;exact\&quot;, \&quot;name\&quot;: \&quot;$opt_dummy_attribute\&quot;, \&quot;type\&quot;: \&quot;custom_attribute\&quot;, \&quot;value\&quot;: \&quot;$opt_dummy_value\&quot;}]&quot;, &quot;id&quot;: &quot;$opt_dummy_audience&quot;, &quot;name&quot;: &quot;Optimizely-Generated Audience for Backwards Compatibility&quot;}], &quot;anonymizeIP&quot;: true, &quot;sdkKey&quot;: &quot;WTc6awnGuYDdG98CYRban&quot;, &quot;attributes&quot;: [{&quot;id&quot;: &quot;16822470375&quot;, &quot;key&quot;: &quot;user_id&quot;}, {&quot;id&quot;: &quot;17143601254&quot;, &quot;key&quot;: &quot;spammy&quot;}, {&quot;id&quot;: &quot;18175660309&quot;, &quot;key&quot;: &quot;organization_plan&quot;}, {&quot;id&quot;: &quot;18813001570&quot;, &quot;key&quot;: &quot;is_logged_in&quot;}, {&quot;id&quot;: &quot;19073851829&quot;, &quot;key&quot;: &quot;geo&quot;}, {&quot;id&quot;: &quot;20175462351&quot;, &quot;key&quot;: &quot;requestedCurrency&quot;}, {&quot;id&quot;: &quot;20785470195&quot;, &quot;key&quot;: &quot;country_code&quot;}, {&quot;id&quot;: &quot;21656311196&quot;, &quot;key&quot;: &quot;opened_downgrade_dialog&quot;}], &quot;botFiltering&quot;: false, &quot;accountId&quot;: &quot;16737760170&quot;, &quot;events&quot;: [{&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;17911811441&quot;, &quot;key&quot;: &quot;hydro_click.dashboard.teacher_toolbox_cta&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18124116703&quot;, &quot;key&quot;: &quot;submit.organizations.complete_sign_up&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18145892387&quot;, &quot;key&quot;: &quot;no_metric.tracked_outside_of_optimizely&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18178755568&quot;, &quot;key&quot;: &quot;click.org_onboarding_checklist.add_repo&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18180553241&quot;, &quot;key&quot;: &quot;submit.repository_imports.create&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18186103728&quot;, &quot;key&quot;: &quot;click.help.learn_more_about_repository_creation&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18188530140&quot;, &quot;key&quot;: &quot;test_event&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18191963644&quot;, &quot;key&quot;: &quot;click.empty_org_repo_cta.transfer_repository&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18195612788&quot;, &quot;key&quot;: &quot;click.empty_org_repo_cta.import_repository&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18210945499&quot;, &quot;key&quot;: &quot;click.org_onboarding_checklist.invite_members&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18211063248&quot;, &quot;key&quot;: &quot;click.empty_org_repo_cta.create_repository&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18215721889&quot;, &quot;key&quot;: &quot;click.org_onboarding_checklist.update_profile&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18224360785&quot;, &quot;key&quot;: &quot;click.org_onboarding_checklist.dismiss&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18234832286&quot;, &quot;key&quot;: &quot;submit.organization_activation.complete&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18252392383&quot;, &quot;key&quot;: &quot;submit.org_repository.create&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18257551537&quot;, &quot;key&quot;: &quot;submit.org_member_invitation.create&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18259522260&quot;, &quot;key&quot;: &quot;submit.organization_profile.update&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18564603625&quot;, &quot;key&quot;: &quot;view.classroom_select_organization&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18568612016&quot;, &quot;key&quot;: &quot;click.classroom_sign_in_click&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18572592540&quot;, &quot;key&quot;: &quot;view.classroom_name&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18574203855&quot;, &quot;key&quot;: &quot;click.classroom_create_organization&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18582053415&quot;, &quot;key&quot;: &quot;click.classroom_select_organization&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18589463420&quot;, &quot;key&quot;: &quot;click.classroom_create_classroom&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18591323364&quot;, &quot;key&quot;: &quot;click.classroom_create_first_classroom&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18591652321&quot;, &quot;key&quot;: &quot;click.classroom_grant_access&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18607131425&quot;, &quot;key&quot;: &quot;view.classroom_creation&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18831680583&quot;, &quot;key&quot;: &quot;upgrade_account_plan&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;19064064515&quot;, &quot;key&quot;: &quot;click.signup&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;19075373687&quot;, &quot;key&quot;: &quot;click.view_account_billing_page&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;19077355841&quot;, &quot;key&quot;: &quot;click.dismiss_signup_prompt&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;19079713938&quot;, &quot;key&quot;: &quot;click.contact_sales&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;19120963070&quot;, &quot;key&quot;: &quot;click.compare_account_plans&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;19151690317&quot;, &quot;key&quot;: &quot;click.upgrade_account_cta&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;19424193129&quot;, &quot;key&quot;: &quot;click.open_account_switcher&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;19520330825&quot;, &quot;key&quot;: &quot;click.visit_account_profile&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;19540970635&quot;, &quot;key&quot;: &quot;click.switch_account_context&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;19730198868&quot;, &quot;key&quot;: &quot;submit.homepage_signup&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;19820830627&quot;, &quot;key&quot;: &quot;click.homepage_signup&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;19988571001&quot;, &quot;key&quot;: &quot;click.create_enterprise_trial&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20036538294&quot;, &quot;key&quot;: &quot;click.create_organization_team&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20040653299&quot;, &quot;key&quot;: &quot;click.input_enterprise_trial_form&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20062030003&quot;, &quot;key&quot;: &quot;click.continue_with_team&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20068947153&quot;, &quot;key&quot;: &quot;click.create_organization_free&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20086636658&quot;, &quot;key&quot;: &quot;click.signup_continue.username&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20091648988&quot;, &quot;key&quot;: &quot;click.signup_continue.create_account&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20103637615&quot;, &quot;key&quot;: &quot;click.signup_continue.email&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20111574253&quot;, &quot;key&quot;: &quot;click.signup_continue.password&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20120044111&quot;, &quot;key&quot;: &quot;view.pricing_page&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20152062109&quot;, &quot;key&quot;: &quot;submit.create_account&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20165800992&quot;, &quot;key&quot;: &quot;submit.upgrade_payment_form&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20171520319&quot;, &quot;key&quot;: &quot;submit.create_organization&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20222645674&quot;, &quot;key&quot;: &quot;click.recommended_plan_in_signup.discuss_your_needs&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20227443657&quot;, &quot;key&quot;: &quot;submit.verify_primary_user_email&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20234607160&quot;, &quot;key&quot;: &quot;click.recommended_plan_in_signup.try_enterprise&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20238175784&quot;, &quot;key&quot;: &quot;click.recommended_plan_in_signup.team&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20239847212&quot;, &quot;key&quot;: &quot;click.recommended_plan_in_signup.continue_free&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20251097193&quot;, &quot;key&quot;: &quot;recommended_plan&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20438619534&quot;, &quot;key&quot;: &quot;click.pricing_calculator.1_member&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20456699683&quot;, &quot;key&quot;: &quot;click.pricing_calculator.15_members&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20467868331&quot;, &quot;key&quot;: &quot;click.pricing_calculator.10_members&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20476267432&quot;, &quot;key&quot;: &quot;click.trial_days_remaining&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20476357660&quot;, &quot;key&quot;: &quot;click.discover_feature&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20479287901&quot;, &quot;key&quot;: &quot;click.pricing_calculator.custom_members&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20481107083&quot;, &quot;key&quot;: &quot;click.recommended_plan_in_signup.apply_teacher_benefits&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20483089392&quot;, &quot;key&quot;: &quot;click.pricing_calculator.5_members&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20484283944&quot;, &quot;key&quot;: &quot;click.onboarding_task&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20484996281&quot;, &quot;key&quot;: &quot;click.recommended_plan_in_signup.apply_student_benefits&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20486713726&quot;, &quot;key&quot;: &quot;click.onboarding_task_breadcrumb&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20490791319&quot;, &quot;key&quot;: &quot;click.upgrade_to_enterprise&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20491786766&quot;, &quot;key&quot;: &quot;click.talk_to_us&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20494144087&quot;, &quot;key&quot;: &quot;click.dismiss_enterprise_trial&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20499722759&quot;, &quot;key&quot;: &quot;completed_all_tasks&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20500710104&quot;, &quot;key&quot;: &quot;completed_onboarding_tasks&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20513160672&quot;, &quot;key&quot;: &quot;click.read_doc&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20516196762&quot;, &quot;key&quot;: &quot;actions_enabled&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20518980986&quot;, &quot;key&quot;: &quot;click.dismiss_trial_banner&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20535446721&quot;, &quot;key&quot;: &quot;click.issue_actions_prompt.dismiss_prompt&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20557002247&quot;, &quot;key&quot;: &quot;click.issue_actions_prompt.setup_workflow&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20595070227&quot;, &quot;key&quot;: &quot;click.pull_request_setup_workflow&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20626600314&quot;, &quot;key&quot;: &quot;click.seats_input&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20642310305&quot;, &quot;key&quot;: &quot;click.decrease_seats_number&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20662990045&quot;, &quot;key&quot;: &quot;click.increase_seats_number&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20679620969&quot;, &quot;key&quot;: &quot;click.public_product_roadmap&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20761240940&quot;, &quot;key&quot;: &quot;click.dismiss_survey_banner&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20767210721&quot;, &quot;key&quot;: &quot;click.take_survey&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20795281201&quot;, &quot;key&quot;: &quot;click.archive_list&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20966790249&quot;, &quot;key&quot;: &quot;contact_sales.submit&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20996500333&quot;, &quot;key&quot;: &quot;contact_sales.existing_customer&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20996890162&quot;, &quot;key&quot;: &quot;contact_sales.blank_message_field&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21000470317&quot;, &quot;key&quot;: &quot;contact_sales.personal_email&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21002790172&quot;, &quot;key&quot;: &quot;contact_sales.blank_phone_field&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21354412592&quot;, &quot;key&quot;: &quot;click.dismiss_create_readme&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21366102546&quot;, &quot;key&quot;: &quot;click.dismiss_zero_user_content&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21370252505&quot;, &quot;key&quot;: &quot;account_did_downgrade&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21370840408&quot;, &quot;key&quot;: &quot;click.cta_create_readme&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21375451068&quot;, &quot;key&quot;: &quot;click.cta_create_new_repository&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21385390948&quot;, &quot;key&quot;: &quot;click.zero_user_content&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21467712175&quot;, &quot;key&quot;: &quot;click.downgrade_keep&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21484112202&quot;, &quot;key&quot;: &quot;click.downgrade&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21495292213&quot;, &quot;key&quot;: &quot;click.downgrade_survey_exit&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21508241468&quot;, &quot;key&quot;: &quot;click.downgrade_survey_submit&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21512030356&quot;, &quot;key&quot;: &quot;click.downgrade_support&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21539090022&quot;, &quot;key&quot;: &quot;click.downgrade_exit&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21543640644&quot;, &quot;key&quot;: &quot;click_fetch_upstream&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21646510300&quot;, &quot;key&quot;: &quot;click.move_your_work&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21656151116&quot;, &quot;key&quot;: &quot;click.add_branch_protection_rule&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21663860599&quot;, &quot;key&quot;: &quot;click.downgrade_dialog_open&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21687860483&quot;, &quot;key&quot;: &quot;click.learn_about_protected_branches&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21689050333&quot;, &quot;key&quot;: &quot;click.dismiss_protect_this_branch&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;21864370109&quot;, &quot;key&quot;: &quot;click.sign_in&quot;}], &quot;revision&quot;: &quot;1372&quot;}" />


  <script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/wp-runtime-14f3ad9684cf.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_stacktrace-parser_dist_stack-trace-parser_esm_js-node_modules_github_bro-a4c183-ae93d3fba59c.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/ui_packages_failbot_failbot_ts-e38c93eab86e.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/environment-de3997b81651.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_selector-observer_dist_index_esm_js-2646a2c533e3.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_relative-time-element_dist_index_js-99e288659d4f.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_fzy_js_index_js-node_modules_github_markdown-toolbar-element_dist_index_js-e3de700a4c9d.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_delegated-events_dist_index_js-node_modules_github_auto-complete-element-5b3870-ff38694180c6.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_file-attachment-element_dist_index_js-node_modules_github_text-ex-3415a8-7ecc10fb88d0.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_filter-input-element_dist_index_js-node_modules_github_remote-inp-8873b7-5771678648e0.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_primer_view-components_app_components_primer_primer_js-node_modules_gith-3af896-d8cf3e5f5813.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/github-elements-6f05fe60d18a.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/element-registry-84be4ef284ec.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_lit-html_lit-html_js-9d9fe1859ce5.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_mini-throttle_dist_index_js-node_modules_github_alive-client_dist-bf5aa2-424aa982deef.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_turbo_dist_turbo_es2017-esm_js-ba0e4d5b3207.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_color-convert_index_js-node_modules_github_jtml_lib_index_js-40bf234a19dc.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_remote-form_dist_index_js-node_modules_scroll-anchoring_dist_scro-52dc4b-e1e33bfc0b7e.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_paste-markdown_dist_index_esm_js-node_modules_github_quote-select-743f1d-1b20d530fbf0.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/app_assets_modules_github_updatable-content_ts-dadb69f79923.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/app_assets_modules_github_behaviors_keyboard-shortcuts-helper_ts-app_assets_modules_github_be-f5afdb-3f05df4c282b.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/app_assets_modules_github_sticky-scroll-into-view_ts-050ad6637d58.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/app_assets_modules_github_behaviors_ajax-error_ts-app_assets_modules_github_behaviors_include-2e2258-7effad8d88d4.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/app_assets_modules_github_behaviors_commenting_edit_ts-app_assets_modules_github_behaviors_ht-83c235-c97eacdef68a.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/app_assets_modules_github_blob-anchor_ts-app_assets_modules_github_filter-sort_ts-app_assets_-e5f169-c54621d9e188.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/behaviors-3647463f0628.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_delegated-events_dist_index_js-node_modules_github_catalyst_lib_index_js-623425af41e1.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/notifications-global-4dc6f295cc92.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_optimizely_optimizely-sdk_dist_optimizely_browser_es_min_js-node_modules-089adc-2328ba323205.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/optimizely-1c55a525615e.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_virtualized-list_es_index_js-node_modules_github_template-parts_lib_index_js-c3e624db1d89.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_mini-throttle_dist_decorators_js-node_modules_github_remote-form_-e3de2b-779fd9166293.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_file-attachment-element_dist_index_js-node_modules_github_filter--b2311f-15fe0f17a114.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/app_assets_modules_github_ref-selector_ts-8f8b76ecd8d3.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/repositories-0355d3fe50ee.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_clipboard-copy-element_dist_index_esm_js-node_modules_scroll-anch-c93c97-d63d35dd5d0b.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/app_assets_modules_github_diffs_blob-lines_ts-app_assets_modules_github_diffs_linkable-line-n-f96c66-97aade341120.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/diffs-e4bf217e85f5.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/code-menu-da1cefc25b0a.js"></script>
  

  <title>google-research/mbpp.jsonl at master · google-research/google-research · GitHub</title>



  <meta name="route-pattern" content="/:user_id/:repository/blob/*name(/*path)">

    
  <meta name="current-catalog-service-hash" content="581425c0eaaa5e5e53c5b736f58a14dbe5d38b0be425901738ad0670bd1d5a33">


  <meta name="request-id" content="C6DB:7CE4:A92E0D:B2D01F:6479F474" data-pjax-transient="true"/><meta name="html-safe-nonce" content="00f549a5248936d37d8d60bc5e2ffb3214ea3f8f2e70cc5a270fb75a0869bc33" data-pjax-transient="true"/><meta name="visitor-payload" content="eyJyZWZlcnJlciI6Imh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUtcmVzZWFyY2gvZ29vZ2xlLXJlc2VhcmNoL3RyZWUvbWFzdGVyL21icHAiLCJyZXF1ZXN0X2lkIjoiQzZEQjo3Q0U0OkE5MkUwRDpCMkQwMUY6NjQ3OUY0NzQiLCJ2aXNpdG9yX2lkIjoiNzYwNTc0NjM1OTY4MDI4NjAzMCIsInJlZ2lvbl9lZGdlIjoic291dGhlYXN0YXNpYSIsInJlZ2lvbl9yZW5kZXIiOiJzb3V0aGVhc3Rhc2lhIn0=" data-pjax-transient="true"/><meta name="visitor-hmac" content="ab570b8c66405746c429e3e08291dc17c3239abebccaedc17e9a8fe76b925a32" data-pjax-transient="true"/>


    <meta name="hovercard-subject-tag" content="repository:151619717" data-turbo-transient>


  <meta name="github-keyboard-shortcuts" content="repository,source-code,file-tree" data-turbo-transient="true" />
  

  <meta name="selected-link" value="repo_source" data-turbo-transient>
  <link rel="assets" href="https://github.githubassets.com/">

    <meta name="google-site-verification" content="c1kuD-K2HIVF635lypcsWPoD4kilo5-jA_wBFyT4uMY">
  <meta name="google-site-verification" content="KT5gs8h0wvaagLKAVWq8bbeNwnZZK1r1XQysX3xurLU">
  <meta name="google-site-verification" content="ZzhVyEFwb7w3e0-uOTltm8Jsck2F5StVihD0exw2fsA">
  <meta name="google-site-verification" content="GXs5KoUUkNCoaAZn7wPN-t01Pywp9M3sEjnt_3_ZWPc">
  <meta name="google-site-verification" content="Apib7-x98H0j5cPqHWwSMm6dNU4GmODRoqxLiDzdx9I">

<meta name="octolytics-url" content="https://collector.github.com/github/collect" />

  <meta name="analytics-location" content="/&lt;user-name&gt;/&lt;repo-name&gt;/blob/show" data-turbo-transient="true" />

  




  

    <meta name="user-login" content="">

  

    <meta name="viewport" content="width=device-width">
    
      <meta name="description" content="Google Research. Contribute to google-research/google-research development by creating an account on GitHub.">
      <link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="GitHub">
    <link rel="fluid-icon" href="https://github.com/fluidicon.png" title="GitHub">
    <meta property="fb:app_id" content="1401488693436528">
    <meta name="apple-itunes-app" content="app-id=1477376905" />
      <meta name="twitter:image:src" content="https://opengraph.githubassets.com/b348fe702502c828d2f13cd73c0d62255cc3faa0286c68278366a36874968968/google-research/google-research" /><meta name="twitter:site" content="@github" /><meta name="twitter:card" content="summary_large_image" /><meta name="twitter:title" content="google-research/mbpp.jsonl at master · google-research/google-research" /><meta name="twitter:description" content="Google Research. Contribute to google-research/google-research development by creating an account on GitHub." />
      <meta property="og:image" content="https://opengraph.githubassets.com/b348fe702502c828d2f13cd73c0d62255cc3faa0286c68278366a36874968968/google-research/google-research" /><meta property="og:image:alt" content="Google Research. Contribute to google-research/google-research development by creating an account on GitHub." /><meta property="og:image:width" content="1200" /><meta property="og:image:height" content="600" /><meta property="og:site_name" content="GitHub" /><meta property="og:type" content="object" /><meta property="og:title" content="google-research/mbpp.jsonl at master · google-research/google-research" /><meta property="og:url" content="https://github.com/google-research/google-research" /><meta property="og:description" content="Google Research. Contribute to google-research/google-research development by creating an account on GitHub." />
      



        <meta name="hostname" content="github.com">



        <meta name="expected-hostname" content="github.com">

    <meta name="enabled-features" content="TURBO_EXPERIMENT_RISKY,IMAGE_METRIC_TRACKING,GEOJSON_AZURE_MAPS">


  <meta http-equiv="x-pjax-version" content="a3637ff62dc8d924a99331ef7de29c3cdf4b54e929628c27a396e8afbff27af8" data-turbo-track="reload">
  <meta http-equiv="x-pjax-csp-version" content="0db263f9a873141d8256f783c35f244c06d490aacc3b680f99794dd8fd59fb59" data-turbo-track="reload">
  <meta http-equiv="x-pjax-css-version" content="3a5ebe862e241f673b94226e4d40972fd95ee6fdb7d57b8b44f2b2fa29ce05f7" data-turbo-track="reload">
  <meta http-equiv="x-pjax-js-version" content="65c18b75ccf679d0131b4f236c454eb595219a3c00cd46e77ff85aea5a3f56ea" data-turbo-track="reload">

  <meta name="turbo-cache-control" content="no-preview" data-turbo-transient="">

        <meta data-hydrostats="publish">

  <meta name="go-import" content="github.com/google-research/google-research git https://github.com/google-research/google-research.git">

  <meta name="octolytics-dimension-user_id" content="43830688" /><meta name="octolytics-dimension-user_login" content="google-research" /><meta name="octolytics-dimension-repository_id" content="151619717" /><meta name="octolytics-dimension-repository_nwo" content="google-research/google-research" /><meta name="octolytics-dimension-repository_public" content="true" /><meta name="octolytics-dimension-repository_is_fork" content="false" /><meta name="octolytics-dimension-repository_network_root_id" content="151619717" /><meta name="octolytics-dimension-repository_network_root_nwo" content="google-research/google-research" />



    <link rel="canonical" href="https://github.com/google-research/google-research/blob/master/mbpp/mbpp.jsonl" data-turbo-transient>
  <meta name="turbo-body-classes" content="logged-out env-production page-responsive page-blob">


  <meta name="browser-stats-url" content="https://api.github.com/_private/browser/stats">

  <meta name="browser-errors-url" content="https://api.github.com/_private/browser/errors">

  <meta name="browser-optimizely-client-errors-url" content="https://api.github.com/_private/browser/optimizely_client/errors">

  <link rel="mask-icon" href="https://github.githubassets.com/pinned-octocat.svg" color="#000000">
  <link rel="alternate icon" class="js-site-favicon" type="image/png" href="https://github.githubassets.com/favicons/favicon.png">
  <link rel="icon" class="js-site-favicon" type="image/svg+xml" href="https://github.githubassets.com/favicons/favicon.svg">

<meta name="theme-color" content="#1e2327">
<meta name="color-scheme" content="light dark" />

  <meta name="msapplication-TileImage" content="/windows-tile.png">
  <meta name="msapplication-TileColor" content="#ffffff">

  <link rel="manifest" href="/manifest.json" crossOrigin="use-credentials">

  </head>

  <body class="logged-out env-production page-responsive page-blob" style="word-wrap: break-word;">
    <div data-turbo-body class="logged-out env-production page-responsive page-blob" style="word-wrap: break-word;">
      


    <div class="position-relative js-header-wrapper ">
      <a href="#start-of-content" class="px-2 py-4 color-bg-accent-emphasis color-fg-on-emphasis show-on-focus js-skip-to-content">Skip to content</a>
      <span data-view-component="true" class="progress-pjax-loader Progress position-fixed width-full">
    <span style="width: 0%;" data-view-component="true" class="Progress-item progress-pjax-loader-bar left-0 top-0 color-bg-accent-emphasis"></span>
</span>      
      


        

            <script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_remote-form_dist_index_js-node_modules_github_memoize_dist_esm_in-687f35-d131f0b6de8e.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/sessions-2638decb9ee5.js"></script>
<header class="Header-old header-logged-out js-details-container Details position-relative f4 py-3" role="banner">
  <button type="button" class="Header-backdrop d-lg-none border-0 position-fixed top-0 left-0 width-full height-full js-details-target" aria-label="Toggle navigation">
    <span class="d-none">Toggle navigation</span>
  </button>

  <div class="container-xl d-flex flex-column flex-lg-row flex-items-center p-responsive height-full position-relative z-1">
    <div class="d-flex flex-justify-between flex-items-center width-full width-lg-auto">
      <a class="mr-lg-3 color-fg-inherit flex-order-2" href="https://github.com/" aria-label="Homepage" data-ga-click="(Logged out) Header, go to homepage, icon:logo-wordmark">
        <svg height="32" aria-hidden="true" viewBox="0 0 16 16" version="1.1" width="32" data-view-component="true" class="octicon octicon-mark-github">
    <path d="M8 0c4.42 0 8 3.58 8 8a8.013 8.013 0 0 1-5.45 7.59c-.4.08-.55-.17-.55-.38 0-.27.01-1.13.01-2.2 0-.75-.25-1.23-.54-1.48 1.78-.2 3.65-.88 3.65-3.95 0-.88-.31-1.59-.82-2.15.08-.2.36-1.02-.08-2.12 0 0-.67-.22-2.2.82-.64-.18-1.32-.27-2-.27-.68 0-1.36.09-2 .27-1.53-1.03-2.2-.82-2.2-.82-.44 1.1-.16 1.92-.08 2.12-.51.56-.82 1.28-.82 2.15 0 3.06 1.86 3.75 3.64 3.95-.23.2-.44.55-.51 1.07-.46.21-1.61.55-2.33-.66-.15-.24-.6-.83-1.23-.82-.67.01-.27.38.01.53.34.19.73.9.82 1.13.16.45.68 1.31 2.69.94 0 .67.01 1.3.01 1.49 0 .21-.15.45-.55.38A7.995 7.995 0 0 1 0 8c0-4.42 3.58-8 8-8Z"></path>
</svg>
      </a>

        <div class="flex-1">
          <a href="/signup?ref_cta=Sign+up&amp;ref_loc=header+logged+out&amp;ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E%2Fblob%2Fshow&amp;source=header-repo"
            class="d-inline-block d-lg-none flex-order-1 f5 no-underline border color-border-default rounded-2 px-2 py-1 color-fg-inherit"
            data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/google-research/google-research/blob/master/mbpp/mbpp.jsonl&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="12ddbf091ec49c2fc457962e98e1775a72076c52d1acee04ae52ae2edc7dc206"
          >
            Sign&nbsp;up
          </a>
        </div>

      <div class="flex-1 flex-order-2 text-right">
          <button aria-label="Toggle navigation" aria-expanded="false" type="button" data-view-component="true" class="js-details-target Button--link Button--medium Button d-lg-none color-fg-inherit p-1">    <span class="Button-content">
      <span class="Button-label"><div class="HeaderMenu-toggle-bar rounded my-1"></div>
            <div class="HeaderMenu-toggle-bar rounded my-1"></div>
            <div class="HeaderMenu-toggle-bar rounded my-1"></div></span>
    </span>
</button>  
      </div>
    </div>


    <div class="HeaderMenu--logged-out p-responsive height-fit position-lg-relative d-lg-flex flex-column flex-auto pt-7 pb-4 top-0">
      <div class="header-menu-wrapper d-flex flex-column flex-self-end flex-lg-row flex-justify-between flex-auto p-3 p-lg-0 rounded rounded-lg-0 mt-3 mt-lg-0">
          <nav class="mt-0 px-3 px-lg-0 mb-3 mb-lg-0" aria-label="Global">
            <ul class="d-lg-flex list-style-none">
                <li class="HeaderMenu-item position-relative flex-wrap flex-justify-between flex-items-center d-block d-lg-flex flex-lg-nowrap flex-lg-items-center js-details-container js-header-menu-item">
      <button type="button" class="HeaderMenu-link border-0 width-full width-lg-auto px-0 px-lg-2 py-3 py-lg-2 no-wrap d-flex flex-items-center flex-justify-between js-details-target" aria-expanded="false">
        Product
        <svg opacity="0.5" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-chevron-down HeaderMenu-icon ml-1">
    <path d="M12.78 5.22a.749.749 0 0 1 0 1.06l-4.25 4.25a.749.749 0 0 1-1.06 0L3.22 6.28a.749.749 0 1 1 1.06-1.06L8 8.939l3.72-3.719a.749.749 0 0 1 1.06 0Z"></path>
</svg>
      </button>
      <div class="HeaderMenu-dropdown dropdown-menu rounded m-0 p-0 py-2 py-lg-4 position-relative position-lg-absolute left-0 left-lg-n3 d-lg-flex dropdown-menu-wide">
          <div class="px-lg-4 border-lg-right mb-4 mb-lg-0 pr-lg-7">
            <ul class="list-style-none f5" >
                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center pb-lg-3" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Actions&quot;,&quot;label&quot;:&quot;ref_cta:Actions;&quot;}" href="/features/actions">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-workflow color-fg-subtle mr-3">
    <path d="M1 3a2 2 0 0 1 2-2h6.5a2 2 0 0 1 2 2v6.5a2 2 0 0 1-2 2H7v4.063C7 16.355 7.644 17 8.438 17H12.5v-2.5a2 2 0 0 1 2-2H21a2 2 0 0 1 2 2V21a2 2 0 0 1-2 2h-6.5a2 2 0 0 1-2-2v-2.5H8.437A2.939 2.939 0 0 1 5.5 15.562V11.5H3a2 2 0 0 1-2-2Zm2-.5a.5.5 0 0 0-.5.5v6.5a.5.5 0 0 0 .5.5h6.5a.5.5 0 0 0 .5-.5V3a.5.5 0 0 0-.5-.5ZM14.5 14a.5.5 0 0 0-.5.5V21a.5.5 0 0 0 .5.5H21a.5.5 0 0 0 .5-.5v-6.5a.5.5 0 0 0-.5-.5Z"></path>
</svg>
      <div>
        <div class="color-fg-default h4">Actions</div>
        Automate any workflow
      </div>

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center pb-lg-3" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Packages&quot;,&quot;label&quot;:&quot;ref_cta:Packages;&quot;}" href="/features/packages">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-package color-fg-subtle mr-3">
    <path d="M12.876.64V.639l8.25 4.763c.541.313.875.89.875 1.515v9.525a1.75 1.75 0 0 1-.875 1.516l-8.25 4.762a1.748 1.748 0 0 1-1.75 0l-8.25-4.763a1.75 1.75 0 0 1-.875-1.515V6.917c0-.625.334-1.202.875-1.515L11.126.64a1.748 1.748 0 0 1 1.75 0Zm-1 1.298L4.251 6.34l7.75 4.474 7.75-4.474-7.625-4.402a.248.248 0 0 0-.25 0Zm.875 19.123 7.625-4.402a.25.25 0 0 0 .125-.216V7.639l-7.75 4.474ZM3.501 7.64v8.803c0 .09.048.172.125.216l7.625 4.402v-8.947Z"></path>
</svg>
      <div>
        <div class="color-fg-default h4">Packages</div>
        Host and manage packages
      </div>

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center pb-lg-3" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Security&quot;,&quot;label&quot;:&quot;ref_cta:Security;&quot;}" href="/features/security">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-shield-check color-fg-subtle mr-3">
    <path d="M16.53 9.78a.75.75 0 0 0-1.06-1.06L11 13.19l-1.97-1.97a.75.75 0 0 0-1.06 1.06l2.5 2.5a.75.75 0 0 0 1.06 0l5-5Z"></path><path d="m12.54.637 8.25 2.675A1.75 1.75 0 0 1 22 4.976V10c0 6.19-3.771 10.704-9.401 12.83a1.704 1.704 0 0 1-1.198 0C5.77 20.705 2 16.19 2 10V4.976c0-.758.489-1.43 1.21-1.664L11.46.637a1.748 1.748 0 0 1 1.08 0Zm-.617 1.426-8.25 2.676a.249.249 0 0 0-.173.237V10c0 5.46 3.28 9.483 8.43 11.426a.199.199 0 0 0 .14 0C17.22 19.483 20.5 15.461 20.5 10V4.976a.25.25 0 0 0-.173-.237l-8.25-2.676a.253.253 0 0 0-.154 0Z"></path>
</svg>
      <div>
        <div class="color-fg-default h4">Security</div>
        Find and fix vulnerabilities
      </div>

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center pb-lg-3" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Codespaces&quot;,&quot;label&quot;:&quot;ref_cta:Codespaces;&quot;}" href="/features/codespaces">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-codespaces color-fg-subtle mr-3">
    <path d="M3.5 3.75C3.5 2.784 4.284 2 5.25 2h13.5c.966 0 1.75.784 1.75 1.75v7.5A1.75 1.75 0 0 1 18.75 13H5.25a1.75 1.75 0 0 1-1.75-1.75Zm-2 12c0-.966.784-1.75 1.75-1.75h17.5c.966 0 1.75.784 1.75 1.75v4a1.75 1.75 0 0 1-1.75 1.75H3.25a1.75 1.75 0 0 1-1.75-1.75ZM5.25 3.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h13.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Zm-2 12a.25.25 0 0 0-.25.25v4c0 .138.112.25.25.25h17.5a.25.25 0 0 0 .25-.25v-4a.25.25 0 0 0-.25-.25Z"></path><path d="M10 17.75a.75.75 0 0 1 .75-.75h6.5a.75.75 0 0 1 0 1.5h-6.5a.75.75 0 0 1-.75-.75Zm-4 0a.75.75 0 0 1 .75-.75h.5a.75.75 0 0 1 0 1.5h-.5a.75.75 0 0 1-.75-.75Z"></path>
</svg>
      <div>
        <div class="color-fg-default h4">Codespaces</div>
        Instant dev environments
      </div>

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center pb-lg-3" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Copilot&quot;,&quot;label&quot;:&quot;ref_cta:Copilot;&quot;}" href="/features/copilot">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-copilot color-fg-subtle mr-3">
    <path d="M9.75 14a.75.75 0 0 1 .75.75v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 .75-.75Zm4.5 0a.75.75 0 0 1 .75.75v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 .75-.75Z"></path><path d="M12 2c2.214 0 4.248.657 5.747 1.756.136.099.268.204.397.312.584.235 1.077.546 1.474.952.85.869 1.132 2.037 1.132 3.368 0 .368-.014.733-.052 1.086l.633 1.478.043.022A4.75 4.75 0 0 1 24 15.222v1.028c0 .529-.309.987-.565 1.293-.28.336-.636.653-.966.918a13.84 13.84 0 0 1-1.299.911l-.024.015-.006.004-.039.025c-.223.135-.45.264-.68.386-.46.245-1.122.571-1.941.895C16.845 21.344 14.561 22 12 22c-2.561 0-4.845-.656-6.479-1.303a19.046 19.046 0 0 1-1.942-.894 14.081 14.081 0 0 1-.535-.3l-.144-.087-.04-.025-.006-.004-.024-.015a13.16 13.16 0 0 1-1.299-.911 6.913 6.913 0 0 1-.967-.918C.31 17.237 0 16.779 0 16.25v-1.028a4.75 4.75 0 0 1 2.626-4.248l.043-.022.633-1.478a10.195 10.195 0 0 1-.052-1.086c0-1.331.282-2.498 1.132-3.368.397-.406.89-.717 1.474-.952.129-.108.261-.213.397-.312C7.752 2.657 9.786 2 12 2Zm-8 9.654v6.669a17.59 17.59 0 0 0 2.073.98C7.595 19.906 9.686 20.5 12 20.5c2.314 0 4.405-.594 5.927-1.197a17.59 17.59 0 0 0 2.073-.98v-6.669l-.038-.09c-.046.061-.095.12-.145.177-.793.9-2.057 1.259-3.782 1.259-1.59 0-2.738-.544-3.508-1.492a4.323 4.323 0 0 1-.355-.508h-.344a4.323 4.323 0 0 1-.355.508C10.704 12.456 9.555 13 7.965 13c-1.725 0-2.989-.359-3.782-1.259a3.026 3.026 0 0 1-.145-.177Zm6.309-1.092c.445-.547.708-1.334.851-2.301.057-.357.087-.718.09-1.079v-.031c-.001-.762-.166-1.26-.43-1.568l-.008-.01c-.341-.391-1.046-.689-2.533-.529-1.505.163-2.347.537-2.824 1.024-.462.473-.705 1.18-.705 2.32 0 .605.044 1.087.135 1.472.092.384.231.672.423.89.365.413 1.084.75 2.657.75.91 0 1.527-.223 1.964-.564.14-.11.268-.235.38-.374Zm2.504-2.497c.136 1.057.403 1.913.878 2.497.442.545 1.134.938 2.344.938 1.573 0 2.292-.337 2.657-.751.384-.435.558-1.151.558-2.361 0-1.14-.243-1.847-.705-2.319-.477-.488-1.318-.862-2.824-1.025-1.487-.161-2.192.139-2.533.529-.268.308-.437.808-.438 1.578v.02c.002.299.023.598.063.894Z"></path>
</svg>
      <div>
        <div class="color-fg-default h4">Copilot</div>
        Write better code with AI
      </div>

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center pb-lg-3" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Code review&quot;,&quot;label&quot;:&quot;ref_cta:Code review;&quot;}" href="/features/code-review">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-code-review color-fg-subtle mr-3">
    <path d="M10.3 6.74a.75.75 0 0 1-.04 1.06l-2.908 2.7 2.908 2.7a.75.75 0 1 1-1.02 1.1l-3.5-3.25a.75.75 0 0 1 0-1.1l3.5-3.25a.75.75 0 0 1 1.06.04Zm3.44 1.06a.75.75 0 1 1 1.02-1.1l3.5 3.25a.75.75 0 0 1 0 1.1l-3.5 3.25a.75.75 0 1 1-1.02-1.1l2.908-2.7-2.908-2.7Z"></path><path d="M1.5 4.25c0-.966.784-1.75 1.75-1.75h17.5c.966 0 1.75.784 1.75 1.75v12.5a1.75 1.75 0 0 1-1.75 1.75h-9.69l-3.573 3.573A1.458 1.458 0 0 1 5 21.043V18.5H3.25a1.75 1.75 0 0 1-1.75-1.75ZM3.25 4a.25.25 0 0 0-.25.25v12.5c0 .138.112.25.25.25h2.5a.75.75 0 0 1 .75.75v3.19l3.72-3.72a.749.749 0 0 1 .53-.22h10a.25.25 0 0 0 .25-.25V4.25a.25.25 0 0 0-.25-.25Z"></path>
</svg>
      <div>
        <div class="color-fg-default h4">Code review</div>
        Manage code changes
      </div>

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center pb-lg-3" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Issues&quot;,&quot;label&quot;:&quot;ref_cta:Issues;&quot;}" href="/features/issues">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-issue-opened color-fg-subtle mr-3">
    <path d="M12 1c6.075 0 11 4.925 11 11s-4.925 11-11 11S1 18.075 1 12 5.925 1 12 1ZM2.5 12a9.5 9.5 0 0 0 9.5 9.5 9.5 9.5 0 0 0 9.5-9.5A9.5 9.5 0 0 0 12 2.5 9.5 9.5 0 0 0 2.5 12Zm9.5 2a2 2 0 1 1-.001-3.999A2 2 0 0 1 12 14Z"></path>
</svg>
      <div>
        <div class="color-fg-default h4">Issues</div>
        Plan and track work
      </div>

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Discussions&quot;,&quot;label&quot;:&quot;ref_cta:Discussions;&quot;}" href="/features/discussions">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-comment-discussion color-fg-subtle mr-3">
    <path d="M1.75 1h12.5c.966 0 1.75.784 1.75 1.75v9.5A1.75 1.75 0 0 1 14.25 14H8.061l-2.574 2.573A1.458 1.458 0 0 1 3 15.543V14H1.75A1.75 1.75 0 0 1 0 12.25v-9.5C0 1.784.784 1 1.75 1ZM1.5 2.75v9.5c0 .138.112.25.25.25h2a.75.75 0 0 1 .75.75v2.19l2.72-2.72a.749.749 0 0 1 .53-.22h6.5a.25.25 0 0 0 .25-.25v-9.5a.25.25 0 0 0-.25-.25H1.75a.25.25 0 0 0-.25.25Z"></path><path d="M22.5 8.75a.25.25 0 0 0-.25-.25h-3.5a.75.75 0 0 1 0-1.5h3.5c.966 0 1.75.784 1.75 1.75v9.5A1.75 1.75 0 0 1 22.25 20H21v1.543a1.457 1.457 0 0 1-2.487 1.03L15.939 20H10.75A1.75 1.75 0 0 1 9 18.25v-1.465a.75.75 0 0 1 1.5 0v1.465c0 .138.112.25.25.25h5.5a.75.75 0 0 1 .53.22l2.72 2.72v-2.19a.75.75 0 0 1 .75-.75h2a.25.25 0 0 0 .25-.25v-9.5Z"></path>
</svg>
      <div>
        <div class="color-fg-default h4">Discussions</div>
        Collaborate outside of code
      </div>

    
</a></li>

            </ul>
          </div>
          <div class="px-lg-4">
              <span class="d-block h4 color-fg-default my-1" id="product-explore-heading">Explore</span>
            <ul class="list-style-none f5" aria-labelledby="product-explore-heading">
                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to All features&quot;,&quot;label&quot;:&quot;ref_cta:All features;&quot;}" href="/features">
      All features

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" target="_blank" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Documentation&quot;,&quot;label&quot;:&quot;ref_cta:Documentation;&quot;}" href="https://docs.github.com">
      Documentation

    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-link-external HeaderMenu-external-icon color-fg-subtle">
    <path d="M3.75 2h3.5a.75.75 0 0 1 0 1.5h-3.5a.25.25 0 0 0-.25.25v8.5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25v-3.5a.75.75 0 0 1 1.5 0v3.5A1.75 1.75 0 0 1 12.25 14h-8.5A1.75 1.75 0 0 1 2 12.25v-8.5C2 2.784 2.784 2 3.75 2Zm6.854-1h4.146a.25.25 0 0 1 .25.25v4.146a.25.25 0 0 1-.427.177L13.03 4.03 9.28 7.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.75-3.75-1.543-1.543A.25.25 0 0 1 10.604 1Z"></path>
</svg>
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" target="_blank" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to GitHub Skills&quot;,&quot;label&quot;:&quot;ref_cta:GitHub Skills;&quot;}" href="https://skills.github.com/">
      GitHub Skills

    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-link-external HeaderMenu-external-icon color-fg-subtle">
    <path d="M3.75 2h3.5a.75.75 0 0 1 0 1.5h-3.5a.25.25 0 0 0-.25.25v8.5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25v-3.5a.75.75 0 0 1 1.5 0v3.5A1.75 1.75 0 0 1 12.25 14h-8.5A1.75 1.75 0 0 1 2 12.25v-8.5C2 2.784 2.784 2 3.75 2Zm6.854-1h4.146a.25.25 0 0 1 .25.25v4.146a.25.25 0 0 1-.427.177L13.03 4.03 9.28 7.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.75-3.75-1.543-1.543A.25.25 0 0 1 10.604 1Z"></path>
</svg>
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" target="_blank" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Blog&quot;,&quot;label&quot;:&quot;ref_cta:Blog;&quot;}" href="https://github.blog">
      Blog

    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-link-external HeaderMenu-external-icon color-fg-subtle">
    <path d="M3.75 2h3.5a.75.75 0 0 1 0 1.5h-3.5a.25.25 0 0 0-.25.25v8.5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25v-3.5a.75.75 0 0 1 1.5 0v3.5A1.75 1.75 0 0 1 12.25 14h-8.5A1.75 1.75 0 0 1 2 12.25v-8.5C2 2.784 2.784 2 3.75 2Zm6.854-1h4.146a.25.25 0 0 1 .25.25v4.146a.25.25 0 0 1-.427.177L13.03 4.03 9.28 7.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.75-3.75-1.543-1.543A.25.25 0 0 1 10.604 1Z"></path>
</svg>
</a></li>

            </ul>
          </div>
      </div>
</li>


                <li class="HeaderMenu-item position-relative flex-wrap flex-justify-between flex-items-center d-block d-lg-flex flex-lg-nowrap flex-lg-items-center js-details-container js-header-menu-item">
      <button type="button" class="HeaderMenu-link border-0 width-full width-lg-auto px-0 px-lg-2 py-3 py-lg-2 no-wrap d-flex flex-items-center flex-justify-between js-details-target" aria-expanded="false">
        Solutions
        <svg opacity="0.5" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-chevron-down HeaderMenu-icon ml-1">
    <path d="M12.78 5.22a.749.749 0 0 1 0 1.06l-4.25 4.25a.749.749 0 0 1-1.06 0L3.22 6.28a.749.749 0 1 1 1.06-1.06L8 8.939l3.72-3.719a.749.749 0 0 1 1.06 0Z"></path>
</svg>
      </button>
      <div class="HeaderMenu-dropdown dropdown-menu rounded m-0 p-0 py-2 py-lg-4 position-relative position-lg-absolute left-0 left-lg-n3 px-lg-4">
          <div class="border-bottom pb-3 mb-3">
              <span class="d-block h4 color-fg-default my-1" id="solutions-for-heading">For</span>
            <ul class="list-style-none f5" aria-labelledby="solutions-for-heading">
                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Solutions&quot;,&quot;action&quot;:&quot;click to go to Enterprise&quot;,&quot;label&quot;:&quot;ref_cta:Enterprise;&quot;}" href="/enterprise">
      Enterprise

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Solutions&quot;,&quot;action&quot;:&quot;click to go to Teams&quot;,&quot;label&quot;:&quot;ref_cta:Teams;&quot;}" href="/team">
      Teams

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Solutions&quot;,&quot;action&quot;:&quot;click to go to Startups&quot;,&quot;label&quot;:&quot;ref_cta:Startups;&quot;}" href="/enterprise/startups">
      Startups

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" target="_blank" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Solutions&quot;,&quot;action&quot;:&quot;click to go to Education&quot;,&quot;label&quot;:&quot;ref_cta:Education;&quot;}" href="https://education.github.com">
      Education

    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-link-external HeaderMenu-external-icon color-fg-subtle">
    <path d="M3.75 2h3.5a.75.75 0 0 1 0 1.5h-3.5a.25.25 0 0 0-.25.25v8.5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25v-3.5a.75.75 0 0 1 1.5 0v3.5A1.75 1.75 0 0 1 12.25 14h-8.5A1.75 1.75 0 0 1 2 12.25v-8.5C2 2.784 2.784 2 3.75 2Zm6.854-1h4.146a.25.25 0 0 1 .25.25v4.146a.25.25 0 0 1-.427.177L13.03 4.03 9.28 7.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.75-3.75-1.543-1.543A.25.25 0 0 1 10.604 1Z"></path>
</svg>
</a></li>

            </ul>
          </div>
          <div class="border-bottom pb-3 mb-3">
              <span class="d-block h4 color-fg-default my-1" id="solutions-by-solution-heading">By Solution</span>
            <ul class="list-style-none f5" aria-labelledby="solutions-by-solution-heading">
                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Solutions&quot;,&quot;action&quot;:&quot;click to go to CI/CD &amp;amp; Automation&quot;,&quot;label&quot;:&quot;ref_cta:CI/CD &amp;amp; Automation;&quot;}" href="/solutions/ci-cd/">
      CI/CD &amp; Automation

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" target="_blank" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Solutions&quot;,&quot;action&quot;:&quot;click to go to DevOps&quot;,&quot;label&quot;:&quot;ref_cta:DevOps;&quot;}" href="https://resources.github.com/devops/">
      DevOps

    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-link-external HeaderMenu-external-icon color-fg-subtle">
    <path d="M3.75 2h3.5a.75.75 0 0 1 0 1.5h-3.5a.25.25 0 0 0-.25.25v8.5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25v-3.5a.75.75 0 0 1 1.5 0v3.5A1.75 1.75 0 0 1 12.25 14h-8.5A1.75 1.75 0 0 1 2 12.25v-8.5C2 2.784 2.784 2 3.75 2Zm6.854-1h4.146a.25.25 0 0 1 .25.25v4.146a.25.25 0 0 1-.427.177L13.03 4.03 9.28 7.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.75-3.75-1.543-1.543A.25.25 0 0 1 10.604 1Z"></path>
</svg>
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" target="_blank" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Solutions&quot;,&quot;action&quot;:&quot;click to go to DevSecOps&quot;,&quot;label&quot;:&quot;ref_cta:DevSecOps;&quot;}" href="https://resources.github.com/devops/fundamentals/devsecops/">
      DevSecOps

    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-link-external HeaderMenu-external-icon color-fg-subtle">
    <path d="M3.75 2h3.5a.75.75 0 0 1 0 1.5h-3.5a.25.25 0 0 0-.25.25v8.5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25v-3.5a.75.75 0 0 1 1.5 0v3.5A1.75 1.75 0 0 1 12.25 14h-8.5A1.75 1.75 0 0 1 2 12.25v-8.5C2 2.784 2.784 2 3.75 2Zm6.854-1h4.146a.25.25 0 0 1 .25.25v4.146a.25.25 0 0 1-.427.177L13.03 4.03 9.28 7.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.75-3.75-1.543-1.543A.25.25 0 0 1 10.604 1Z"></path>
</svg>
</a></li>

            </ul>
          </div>
          <div class="">
              <span class="d-block h4 color-fg-default my-1" id="solutions-case-studies-heading">Case Studies</span>
            <ul class="list-style-none f5" aria-labelledby="solutions-case-studies-heading">
                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Solutions&quot;,&quot;action&quot;:&quot;click to go to Customer Stories&quot;,&quot;label&quot;:&quot;ref_cta:Customer Stories;&quot;}" href="/customer-stories">
      Customer Stories

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" target="_blank" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Solutions&quot;,&quot;action&quot;:&quot;click to go to Resources&quot;,&quot;label&quot;:&quot;ref_cta:Resources;&quot;}" href="https://resources.github.com/">
      Resources

    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-link-external HeaderMenu-external-icon color-fg-subtle">
    <path d="M3.75 2h3.5a.75.75 0 0 1 0 1.5h-3.5a.25.25 0 0 0-.25.25v8.5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25v-3.5a.75.75 0 0 1 1.5 0v3.5A1.75 1.75 0 0 1 12.25 14h-8.5A1.75 1.75 0 0 1 2 12.25v-8.5C2 2.784 2.784 2 3.75 2Zm6.854-1h4.146a.25.25 0 0 1 .25.25v4.146a.25.25 0 0 1-.427.177L13.03 4.03 9.28 7.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.75-3.75-1.543-1.543A.25.25 0 0 1 10.604 1Z"></path>
</svg>
</a></li>

            </ul>
          </div>
      </div>
</li>


                <li class="HeaderMenu-item position-relative flex-wrap flex-justify-between flex-items-center d-block d-lg-flex flex-lg-nowrap flex-lg-items-center js-details-container js-header-menu-item">
      <button type="button" class="HeaderMenu-link border-0 width-full width-lg-auto px-0 px-lg-2 py-3 py-lg-2 no-wrap d-flex flex-items-center flex-justify-between js-details-target" aria-expanded="false">
        Open Source
        <svg opacity="0.5" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-chevron-down HeaderMenu-icon ml-1">
    <path d="M12.78 5.22a.749.749 0 0 1 0 1.06l-4.25 4.25a.749.749 0 0 1-1.06 0L3.22 6.28a.749.749 0 1 1 1.06-1.06L8 8.939l3.72-3.719a.749.749 0 0 1 1.06 0Z"></path>
</svg>
      </button>
      <div class="HeaderMenu-dropdown dropdown-menu rounded m-0 p-0 py-2 py-lg-4 position-relative position-lg-absolute left-0 left-lg-n3 px-lg-4">
          <div class="border-bottom pb-3 mb-3">
            <ul class="list-style-none f5" >
                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Open Source&quot;,&quot;action&quot;:&quot;click to go to GitHub Sponsors&quot;,&quot;label&quot;:&quot;ref_cta:GitHub Sponsors;&quot;}" href="/sponsors">
      
      <div>
        <div class="color-fg-default h4">GitHub Sponsors</div>
        Fund open source developers
      </div>

    
</a></li>

            </ul>
          </div>
          <div class="border-bottom pb-3 mb-3">
            <ul class="list-style-none f5" >
                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Open Source&quot;,&quot;action&quot;:&quot;click to go to The ReadME Project&quot;,&quot;label&quot;:&quot;ref_cta:The ReadME Project;&quot;}" href="/readme">
      
      <div>
        <div class="color-fg-default h4">The ReadME Project</div>
        GitHub community articles
      </div>

    
</a></li>

            </ul>
          </div>
          <div class="">
              <span class="d-block h4 color-fg-default my-1" id="open-source-repositories-heading">Repositories</span>
            <ul class="list-style-none f5" aria-labelledby="open-source-repositories-heading">
                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Open Source&quot;,&quot;action&quot;:&quot;click to go to Topics&quot;,&quot;label&quot;:&quot;ref_cta:Topics;&quot;}" href="/topics">
      Topics

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Open Source&quot;,&quot;action&quot;:&quot;click to go to Trending&quot;,&quot;label&quot;:&quot;ref_cta:Trending;&quot;}" href="/trending">
      Trending

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Open Source&quot;,&quot;action&quot;:&quot;click to go to Collections&quot;,&quot;label&quot;:&quot;ref_cta:Collections;&quot;}" href="/collections">
      Collections

    
</a></li>

            </ul>
          </div>
      </div>
</li>


                <li class="HeaderMenu-item position-relative flex-wrap flex-justify-between flex-items-center d-block d-lg-flex flex-lg-nowrap flex-lg-items-center js-details-container js-header-menu-item">
    <a class="HeaderMenu-link no-underline px-0 px-lg-2 py-3 py-lg-2 d-block d-lg-inline-block" data-analytics-event="{&quot;category&quot;:&quot;Header menu top item (logged out)&quot;,&quot;action&quot;:&quot;click to go to Pricing&quot;,&quot;label&quot;:&quot;ref_cta:Pricing;&quot;}" href="/pricing">Pricing</a>
</li>

            </ul>
          </nav>

        <div class="d-lg-flex flex-items-center px-3 px-lg-0 mb-3 mb-lg-0 text-center text-lg-left">
            <div class="d-lg-flex min-width-0 mb-2 mb-lg-0">
              



<div class="header-search flex-auto position-relative js-site-search flex-self-stretch flex-md-self-auto mb-3 mb-md-0 mr-0 mr-md-3 scoped-search site-scoped-search js-jump-to"
>
  <div class="position-relative">
    <!-- '"` --><!-- </textarea></xmp> --></option></form><form class="js-site-search-form" role="search" aria-label="Site" data-scope-type="Repository" data-scope-id="151619717" data-scoped-search-url="/google-research/google-research/search" data-owner-scoped-search-url="/orgs/google-research/search" data-unscoped-search-url="/search" data-turbo="false" action="/google-research/google-research/search" accept-charset="UTF-8" method="get">
      <label class="form-control header-search-wrapper input-sm p-0 js-chromeless-input-container header-search-wrapper-jump-to position-relative d-flex flex-justify-between flex-items-center">
        <input type="text"
          class="form-control js-site-search-focus header-search-input jump-to-field js-jump-to-field js-site-search-field is-clearable"
          data-hotkey=s,/
          name="q"
          
          placeholder="Search"
          data-unscoped-placeholder="Search GitHub"
          data-scoped-placeholder="Search"
          autocapitalize="off"
          role="combobox"
          aria-haspopup="listbox"
          aria-expanded="false"
          aria-autocomplete="list"
          aria-controls="jump-to-results"
          aria-label="Search"
          data-jump-to-suggestions-path="/_graphql/GetSuggestedNavigationDestinations"
          spellcheck="false"
          autocomplete="off"
        >
        <input type="hidden" data-csrf="true" class="js-data-jump-to-suggestions-path-csrf" value="Rcha0RMowCpGY0pVeNQhrL6SooKZIPUn6zLVXem7nnsmpWtTEU8rcKTl/qB7Vl6aCADiFM08wg7Jw+lQg/NikQ==" />
        <input type="hidden" class="js-site-search-type-field" name="type" >
            <svg xmlns="http://www.w3.org/2000/svg" width="22" height="20" aria-hidden="true" class="mr-1 header-search-key-slash"><path fill="none" stroke="#979A9C" opacity=".4" d="M3.5.5h12c1.7 0 3 1.3 3 3v13c0 1.7-1.3 3-3 3h-12c-1.7 0-3-1.3-3-3v-13c0-1.7 1.3-3 3-3z"></path><path fill="#979A9C" d="M11.8 6L8 15.1h-.9L10.8 6h1z"></path></svg>


          <div class="Box position-absolute overflow-hidden d-none jump-to-suggestions js-jump-to-suggestions-container">
            
<ul class="d-none js-jump-to-suggestions-template-container">
  

<li class="d-flex flex-justify-start flex-items-center p-0 f5 navigation-item js-navigation-item js-jump-to-suggestion" role="option">
  <a tabindex="-1" class="no-underline d-flex flex-auto flex-items-center jump-to-suggestions-path js-jump-to-suggestion-path js-navigation-open p-2" href="" data-item-type="suggestion">
    <div class="jump-to-octicon js-jump-to-octicon flex-shrink-0 mr-2 text-center d-none">
      <svg title="Repository" aria-label="Repository" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-repo js-jump-to-octicon-repo d-none flex-shrink-0">
    <path d="M2 2.5A2.5 2.5 0 0 1 4.5 0h8.75a.75.75 0 0 1 .75.75v12.5a.75.75 0 0 1-.75.75h-2.5a.75.75 0 0 1 0-1.5h1.75v-2h-8a1 1 0 0 0-.714 1.7.75.75 0 1 1-1.072 1.05A2.495 2.495 0 0 1 2 11.5Zm10.5-1h-8a1 1 0 0 0-1 1v6.708A2.486 2.486 0 0 1 4.5 9h8ZM5 12.25a.25.25 0 0 1 .25-.25h3.5a.25.25 0 0 1 .25.25v3.25a.25.25 0 0 1-.4.2l-1.45-1.087a.249.249 0 0 0-.3 0L5.4 15.7a.25.25 0 0 1-.4-.2Z"></path>
</svg>
      <svg title="Project" aria-label="Project" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-project js-jump-to-octicon-project d-none flex-shrink-0">
    <path d="M1.75 0h12.5C15.216 0 16 .784 16 1.75v12.5A1.75 1.75 0 0 1 14.25 16H1.75A1.75 1.75 0 0 1 0 14.25V1.75C0 .784.784 0 1.75 0ZM1.5 1.75v12.5c0 .138.112.25.25.25h12.5a.25.25 0 0 0 .25-.25V1.75a.25.25 0 0 0-.25-.25H1.75a.25.25 0 0 0-.25.25ZM11.75 3a.75.75 0 0 1 .75.75v7.5a.75.75 0 0 1-1.5 0v-7.5a.75.75 0 0 1 .75-.75Zm-8.25.75a.75.75 0 0 1 1.5 0v5.5a.75.75 0 0 1-1.5 0ZM8 3a.75.75 0 0 1 .75.75v3.5a.75.75 0 0 1-1.5 0v-3.5A.75.75 0 0 1 8 3Z"></path>
</svg>
      <svg title="Search" aria-label="Search" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-search js-jump-to-octicon-search d-none flex-shrink-0">
    <path d="M10.68 11.74a6 6 0 0 1-7.922-8.982 6 6 0 0 1 8.982 7.922l3.04 3.04a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215ZM11.5 7a4.499 4.499 0 1 0-8.997 0A4.499 4.499 0 0 0 11.5 7Z"></path>
</svg>
    </div>

    <img class="avatar mr-2 flex-shrink-0 js-jump-to-suggestion-avatar d-none" alt="" aria-label="Team" src="" width="28" height="28">

    <div class="jump-to-suggestion-name js-jump-to-suggestion-name flex-auto overflow-hidden text-left no-wrap css-truncate css-truncate-target">
    </div>

    <div class="border rounded-2 flex-shrink-0 color-bg-subtle px-1 color-fg-muted ml-1 f6 d-none js-jump-to-badge-search">
      <span class="js-jump-to-badge-search-text-default d-none" aria-label="in this repository">
        In this repository
      </span>
      <span class="js-jump-to-badge-search-text-global d-none" aria-label="in all of GitHub">
        All GitHub
      </span>
      <span aria-hidden="true" class="d-inline-block ml-1 v-align-middle">↵</span>
    </div>

    <div aria-hidden="true" class="border rounded-2 flex-shrink-0 color-bg-subtle px-1 color-fg-muted ml-1 f6 d-none d-on-nav-focus js-jump-to-badge-jump">
      Jump to
      <span class="d-inline-block ml-1 v-align-middle">↵</span>
    </div>
  </a>
</li>

</ul>

<ul class="d-none js-jump-to-no-results-template-container">
  <li class="d-flex flex-justify-center flex-items-center f5 d-none js-jump-to-suggestion p-2">
    <span class="color-fg-muted">No suggested jump to results</span>
  </li>
</ul>

<ul id="jump-to-results" role="listbox" class="p-0 m-0 js-navigation-container jump-to-suggestions-results-container js-jump-to-suggestions-results-container">
  

<li class="d-flex flex-justify-start flex-items-center p-0 f5 navigation-item js-navigation-item js-jump-to-scoped-search d-none" role="option">
  <a tabindex="-1" class="no-underline d-flex flex-auto flex-items-center jump-to-suggestions-path js-jump-to-suggestion-path js-navigation-open p-2" href="" data-item-type="scoped_search">
    <div class="jump-to-octicon js-jump-to-octicon flex-shrink-0 mr-2 text-center d-none">
      <svg title="Repository" aria-label="Repository" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-repo js-jump-to-octicon-repo d-none flex-shrink-0">
    <path d="M2 2.5A2.5 2.5 0 0 1 4.5 0h8.75a.75.75 0 0 1 .75.75v12.5a.75.75 0 0 1-.75.75h-2.5a.75.75 0 0 1 0-1.5h1.75v-2h-8a1 1 0 0 0-.714 1.7.75.75 0 1 1-1.072 1.05A2.495 2.495 0 0 1 2 11.5Zm10.5-1h-8a1 1 0 0 0-1 1v6.708A2.486 2.486 0 0 1 4.5 9h8ZM5 12.25a.25.25 0 0 1 .25-.25h3.5a.25.25 0 0 1 .25.25v3.25a.25.25 0 0 1-.4.2l-1.45-1.087a.249.249 0 0 0-.3 0L5.4 15.7a.25.25 0 0 1-.4-.2Z"></path>
</svg>
      <svg title="Project" aria-label="Project" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-project js-jump-to-octicon-project d-none flex-shrink-0">
    <path d="M1.75 0h12.5C15.216 0 16 .784 16 1.75v12.5A1.75 1.75 0 0 1 14.25 16H1.75A1.75 1.75 0 0 1 0 14.25V1.75C0 .784.784 0 1.75 0ZM1.5 1.75v12.5c0 .138.112.25.25.25h12.5a.25.25 0 0 0 .25-.25V1.75a.25.25 0 0 0-.25-.25H1.75a.25.25 0 0 0-.25.25ZM11.75 3a.75.75 0 0 1 .75.75v7.5a.75.75 0 0 1-1.5 0v-7.5a.75.75 0 0 1 .75-.75Zm-8.25.75a.75.75 0 0 1 1.5 0v5.5a.75.75 0 0 1-1.5 0ZM8 3a.75.75 0 0 1 .75.75v3.5a.75.75 0 0 1-1.5 0v-3.5A.75.75 0 0 1 8 3Z"></path>
</svg>
      <svg title="Search" aria-label="Search" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-search js-jump-to-octicon-search d-none flex-shrink-0">
    <path d="M10.68 11.74a6 6 0 0 1-7.922-8.982 6 6 0 0 1 8.982 7.922l3.04 3.04a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215ZM11.5 7a4.499 4.499 0 1 0-8.997 0A4.499 4.499 0 0 0 11.5 7Z"></path>
</svg>
    </div>

    <img class="avatar mr-2 flex-shrink-0 js-jump-to-suggestion-avatar d-none" alt="" aria-label="Team" src="" width="28" height="28">

    <div class="jump-to-suggestion-name js-jump-to-suggestion-name flex-auto overflow-hidden text-left no-wrap css-truncate css-truncate-target">
    </div>

    <div class="border rounded-2 flex-shrink-0 color-bg-subtle px-1 color-fg-muted ml-1 f6 d-none js-jump-to-badge-search">
      <span class="js-jump-to-badge-search-text-default d-none" aria-label="in this repository">
        In this repository
      </span>
      <span class="js-jump-to-badge-search-text-global d-none" aria-label="in all of GitHub">
        All GitHub
      </span>
      <span aria-hidden="true" class="d-inline-block ml-1 v-align-middle">↵</span>
    </div>

    <div aria-hidden="true" class="border rounded-2 flex-shrink-0 color-bg-subtle px-1 color-fg-muted ml-1 f6 d-none d-on-nav-focus js-jump-to-badge-jump">
      Jump to
      <span class="d-inline-block ml-1 v-align-middle">↵</span>
    </div>
  </a>
</li>

  

<li class="d-flex flex-justify-start flex-items-center p-0 f5 navigation-item js-navigation-item js-jump-to-owner-scoped-search d-none" role="option">
  <a tabindex="-1" class="no-underline d-flex flex-auto flex-items-center jump-to-suggestions-path js-jump-to-suggestion-path js-navigation-open p-2" href="" data-item-type="owner_scoped_search">
    <div class="jump-to-octicon js-jump-to-octicon flex-shrink-0 mr-2 text-center d-none">
      <svg title="Repository" aria-label="Repository" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-repo js-jump-to-octicon-repo d-none flex-shrink-0">
    <path d="M2 2.5A2.5 2.5 0 0 1 4.5 0h8.75a.75.75 0 0 1 .75.75v12.5a.75.75 0 0 1-.75.75h-2.5a.75.75 0 0 1 0-1.5h1.75v-2h-8a1 1 0 0 0-.714 1.7.75.75 0 1 1-1.072 1.05A2.495 2.495 0 0 1 2 11.5Zm10.5-1h-8a1 1 0 0 0-1 1v6.708A2.486 2.486 0 0 1 4.5 9h8ZM5 12.25a.25.25 0 0 1 .25-.25h3.5a.25.25 0 0 1 .25.25v3.25a.25.25 0 0 1-.4.2l-1.45-1.087a.249.249 0 0 0-.3 0L5.4 15.7a.25.25 0 0 1-.4-.2Z"></path>
</svg>
      <svg title="Project" aria-label="Project" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-project js-jump-to-octicon-project d-none flex-shrink-0">
    <path d="M1.75 0h12.5C15.216 0 16 .784 16 1.75v12.5A1.75 1.75 0 0 1 14.25 16H1.75A1.75 1.75 0 0 1 0 14.25V1.75C0 .784.784 0 1.75 0ZM1.5 1.75v12.5c0 .138.112.25.25.25h12.5a.25.25 0 0 0 .25-.25V1.75a.25.25 0 0 0-.25-.25H1.75a.25.25 0 0 0-.25.25ZM11.75 3a.75.75 0 0 1 .75.75v7.5a.75.75 0 0 1-1.5 0v-7.5a.75.75 0 0 1 .75-.75Zm-8.25.75a.75.75 0 0 1 1.5 0v5.5a.75.75 0 0 1-1.5 0ZM8 3a.75.75 0 0 1 .75.75v3.5a.75.75 0 0 1-1.5 0v-3.5A.75.75 0 0 1 8 3Z"></path>
</svg>
      <svg title="Search" aria-label="Search" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-search js-jump-to-octicon-search d-none flex-shrink-0">
    <path d="M10.68 11.74a6 6 0 0 1-7.922-8.982 6 6 0 0 1 8.982 7.922l3.04 3.04a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215ZM11.5 7a4.499 4.499 0 1 0-8.997 0A4.499 4.499 0 0 0 11.5 7Z"></path>
</svg>
    </div>

    <img class="avatar mr-2 flex-shrink-0 js-jump-to-suggestion-avatar d-none" alt="" aria-label="Team" src="" width="28" height="28">

    <div class="jump-to-suggestion-name js-jump-to-suggestion-name flex-auto overflow-hidden text-left no-wrap css-truncate css-truncate-target">
    </div>

    <div class="border rounded-2 flex-shrink-0 color-bg-subtle px-1 color-fg-muted ml-1 f6 d-none js-jump-to-badge-search">
      <span class="js-jump-to-badge-search-text-default d-none" aria-label="in this organization">
        In this organization
      </span>
      <span class="js-jump-to-badge-search-text-global d-none" aria-label="in all of GitHub">
        All GitHub
      </span>
      <span aria-hidden="true" class="d-inline-block ml-1 v-align-middle">↵</span>
    </div>

    <div aria-hidden="true" class="border rounded-2 flex-shrink-0 color-bg-subtle px-1 color-fg-muted ml-1 f6 d-none d-on-nav-focus js-jump-to-badge-jump">
      Jump to
      <span class="d-inline-block ml-1 v-align-middle">↵</span>
    </div>
  </a>
</li>

  

<li class="d-flex flex-justify-start flex-items-center p-0 f5 navigation-item js-navigation-item js-jump-to-global-search d-none" role="option">
  <a tabindex="-1" class="no-underline d-flex flex-auto flex-items-center jump-to-suggestions-path js-jump-to-suggestion-path js-navigation-open p-2" href="" data-item-type="global_search">
    <div class="jump-to-octicon js-jump-to-octicon flex-shrink-0 mr-2 text-center d-none">
      <svg title="Repository" aria-label="Repository" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-repo js-jump-to-octicon-repo d-none flex-shrink-0">
    <path d="M2 2.5A2.5 2.5 0 0 1 4.5 0h8.75a.75.75 0 0 1 .75.75v12.5a.75.75 0 0 1-.75.75h-2.5a.75.75 0 0 1 0-1.5h1.75v-2h-8a1 1 0 0 0-.714 1.7.75.75 0 1 1-1.072 1.05A2.495 2.495 0 0 1 2 11.5Zm10.5-1h-8a1 1 0 0 0-1 1v6.708A2.486 2.486 0 0 1 4.5 9h8ZM5 12.25a.25.25 0 0 1 .25-.25h3.5a.25.25 0 0 1 .25.25v3.25a.25.25 0 0 1-.4.2l-1.45-1.087a.249.249 0 0 0-.3 0L5.4 15.7a.25.25 0 0 1-.4-.2Z"></path>
</svg>
      <svg title="Project" aria-label="Project" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-project js-jump-to-octicon-project d-none flex-shrink-0">
    <path d="M1.75 0h12.5C15.216 0 16 .784 16 1.75v12.5A1.75 1.75 0 0 1 14.25 16H1.75A1.75 1.75 0 0 1 0 14.25V1.75C0 .784.784 0 1.75 0ZM1.5 1.75v12.5c0 .138.112.25.25.25h12.5a.25.25 0 0 0 .25-.25V1.75a.25.25 0 0 0-.25-.25H1.75a.25.25 0 0 0-.25.25ZM11.75 3a.75.75 0 0 1 .75.75v7.5a.75.75 0 0 1-1.5 0v-7.5a.75.75 0 0 1 .75-.75Zm-8.25.75a.75.75 0 0 1 1.5 0v5.5a.75.75 0 0 1-1.5 0ZM8 3a.75.75 0 0 1 .75.75v3.5a.75.75 0 0 1-1.5 0v-3.5A.75.75 0 0 1 8 3Z"></path>
</svg>
      <svg title="Search" aria-label="Search" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-search js-jump-to-octicon-search d-none flex-shrink-0">
    <path d="M10.68 11.74a6 6 0 0 1-7.922-8.982 6 6 0 0 1 8.982 7.922l3.04 3.04a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215ZM11.5 7a4.499 4.499 0 1 0-8.997 0A4.499 4.499 0 0 0 11.5 7Z"></path>
</svg>
    </div>

    <img class="avatar mr-2 flex-shrink-0 js-jump-to-suggestion-avatar d-none" alt="" aria-label="Team" src="" width="28" height="28">

    <div class="jump-to-suggestion-name js-jump-to-suggestion-name flex-auto overflow-hidden text-left no-wrap css-truncate css-truncate-target">
    </div>

    <div class="border rounded-2 flex-shrink-0 color-bg-subtle px-1 color-fg-muted ml-1 f6 d-none js-jump-to-badge-search">
      <span class="js-jump-to-badge-search-text-default d-none" aria-label="in this repository">
        In this repository
      </span>
      <span class="js-jump-to-badge-search-text-global d-none" aria-label="in all of GitHub">
        All GitHub
      </span>
      <span aria-hidden="true" class="d-inline-block ml-1 v-align-middle">↵</span>
    </div>

    <div aria-hidden="true" class="border rounded-2 flex-shrink-0 color-bg-subtle px-1 color-fg-muted ml-1 f6 d-none d-on-nav-focus js-jump-to-badge-jump">
      Jump to
      <span class="d-inline-block ml-1 v-align-middle">↵</span>
    </div>
  </a>
</li>


</ul>

          </div>
      </label>
</form>  </div>
</div>

            </div>

          <div class="position-relative mr-lg-3 d-lg-inline-block">
            <a href="/login?return_to=https%3A%2F%2Fgithub.com%2Fgoogle-research%2Fgoogle-research%2Fblob%2Fmaster%2Fmbpp%2Fmbpp.jsonl"
              class="HeaderMenu-link HeaderMenu-link--sign-in flex-shrink-0 no-underline d-block d-lg-inline-block border border-lg-0 rounded rounded-lg-0 p-2 p-lg-0"
              data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/google-research/google-research/blob/master/mbpp/mbpp.jsonl&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="b521721eb9f215333ed47b8c6cc181fd6dd1e31b78fab4fe78e772bb6b44b839"
              data-ga-click="(Logged out) Header, clicked Sign in, text:sign-in">
              Sign in
            </a>
          </div>

            <a href="/signup?ref_cta=Sign+up&amp;ref_loc=header+logged+out&amp;ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E%2Fblob%2Fshow&amp;source=header-repo&amp;source_repo=google-research%2Fgoogle-research"
              class="HeaderMenu-link HeaderMenu-link--sign-up flex-shrink-0 d-none d-lg-inline-block no-underline border color-border-default rounded px-2 py-1"
              data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/google-research/google-research/blob/master/mbpp/mbpp.jsonl&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="b521721eb9f215333ed47b8c6cc181fd6dd1e31b78fab4fe78e772bb6b44b839"
              data-analytics-event="{&quot;category&quot;:&quot;Sign up&quot;,&quot;action&quot;:&quot;click to sign up for account&quot;,&quot;label&quot;:&quot;ref_page:/&lt;user-name&gt;/&lt;repo-name&gt;/blob/show;ref_cta:Sign up;ref_loc:header logged out&quot;}"
            >
              Sign up
            </a>
        </div>
      </div>
    </div>
  </div>
</header>

    </div>

  <div id="start-of-content" class="show-on-focus"></div>








    <div id="js-flash-container" data-turbo-replace>





  <template class="js-flash-template">
    
<div class="flash flash-full   {{ className }}">
  <div class="px-2" >
    <button autofocus class="flash-close js-flash-close" type="button" aria-label="Dismiss this message">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x">
    <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"></path>
</svg>
    </button>
    <div aria-atomic="true" role="alert" class="js-flash-alert">
      
      <div>{{ message }}</div>

    </div>
  </div>
</div>
  </template>
</div>


    
    <include-fragment class="js-notification-shelf-include-fragment" data-base-src="https://github.com/notifications/beta/shelf"></include-fragment>






  <div
    class="application-main "
    data-commit-hovercards-enabled
    data-discussion-hovercards-enabled
    data-issue-and-pr-hovercards-enabled
  >
        <div itemscope itemtype="http://schema.org/SoftwareSourceCode" class="">
    <main id="js-repo-pjax-container" >
      
  


    
    

    






  
  <div id="repository-container-header"  class="pt-3 hide-full-screen" style="background-color: var(--color-page-header-bg);" data-turbo-replace>

      <div class="d-flex flex-wrap flex-justify-end mb-3  px-3 px-md-4 px-lg-5" style="gap: 1rem;">

        <div class="flex-auto min-width-0 width-fit mr-3">
            
  <div class=" d-flex flex-wrap flex-items-center wb-break-word f3 text-normal">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-repo color-fg-muted mr-2">
    <path d="M2 2.5A2.5 2.5 0 0 1 4.5 0h8.75a.75.75 0 0 1 .75.75v12.5a.75.75 0 0 1-.75.75h-2.5a.75.75 0 0 1 0-1.5h1.75v-2h-8a1 1 0 0 0-.714 1.7.75.75 0 1 1-1.072 1.05A2.495 2.495 0 0 1 2 11.5Zm10.5-1h-8a1 1 0 0 0-1 1v6.708A2.486 2.486 0 0 1 4.5 9h8ZM5 12.25a.25.25 0 0 1 .25-.25h3.5a.25.25 0 0 1 .25.25v3.25a.25.25 0 0 1-.4.2l-1.45-1.087a.249.249 0 0 0-.3 0L5.4 15.7a.25.25 0 0 1-.4-.2Z"></path>
</svg>
    
    <span class="author flex-self-stretch" itemprop="author">
      <a class="url fn" rel="author" data-hovercard-type="organization" data-hovercard-url="/orgs/google-research/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/google-research">
        google-research
</a>    </span>
    <span class="mx-1 flex-self-stretch color-fg-muted">/</span>
    <strong itemprop="name" class="mr-2 flex-self-stretch">
      <a data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" href="/google-research/google-research">google-research</a>
    </strong>

    <span></span><span class="Label Label--secondary v-align-middle mr-1">Public</span>
  </div>


        </div>

        <div id="repository-details-container" data-turbo-replace>
            <ul class="pagehead-actions flex-shrink-0 d-none d-md-inline" style="padding: 2px 0;">
    
      

  <li>
            <a href="/login?return_to=%2Fgoogle-research%2Fgoogle-research" rel="nofollow" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;notification subscription menu watch&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;LOG_IN&quot;,&quot;originating_url&quot;:&quot;https://github.com/google-research/google-research/blob/master/mbpp/mbpp.jsonl&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="529dcc9f191a8e50ac2b59e16a0cae6f8fa8f3136a93f6230bd66a289d6c71a7" aria-label="You must be signed in to change notification settings" data-view-component="true" class="tooltipped tooltipped-s btn-sm btn">    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-bell mr-2">
    <path d="M8 16a2 2 0 0 0 1.985-1.75c.017-.137-.097-.25-.235-.25h-3.5c-.138 0-.252.113-.235.25A2 2 0 0 0 8 16ZM3 5a5 5 0 0 1 10 0v2.947c0 .05.015.098.042.139l1.703 2.555A1.519 1.519 0 0 1 13.482 13H2.518a1.516 1.516 0 0 1-1.263-2.36l1.703-2.554A.255.255 0 0 0 3 7.947Zm5-3.5A3.5 3.5 0 0 0 4.5 5v2.947c0 .346-.102.683-.294.97l-1.703 2.556a.017.017 0 0 0-.003.01l.001.006c0 .002.002.004.004.006l.006.004.007.001h10.964l.007-.001.006-.004.004-.006.001-.007a.017.017 0 0 0-.003-.01l-1.703-2.554a1.745 1.745 0 0 1-.294-.97V5A3.5 3.5 0 0 0 8 1.5Z"></path>
</svg>Notifications
</a>  </li>

  <li>
          <a icon="repo-forked" id="fork-button" href="/login?return_to=%2Fgoogle-research%2Fgoogle-research" rel="nofollow" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;repo details fork button&quot;,&quot;repository_id&quot;:151619717,&quot;auth_type&quot;:&quot;LOG_IN&quot;,&quot;originating_url&quot;:&quot;https://github.com/google-research/google-research/blob/master/mbpp/mbpp.jsonl&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="f5c0e65eb22d5932633e6b4fe901c92dabb19d985ac0b094240b6bc42acc9d7f" data-view-component="true" class="btn-sm btn">    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-repo-forked mr-2">
    <path d="M5 5.372v.878c0 .414.336.75.75.75h4.5a.75.75 0 0 0 .75-.75v-.878a2.25 2.25 0 1 1 1.5 0v.878a2.25 2.25 0 0 1-2.25 2.25h-1.5v2.128a2.251 2.251 0 1 1-1.5 0V8.5h-1.5A2.25 2.25 0 0 1 3.5 6.25v-.878a2.25 2.25 0 1 1 1.5 0ZM5 3.25a.75.75 0 1 0-1.5 0 .75.75 0 0 0 1.5 0Zm6.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5Zm-3 8.75a.75.75 0 1 0-1.5 0 .75.75 0 0 0 1.5 0Z"></path>
</svg>Fork
    <span id="repo-network-counter" data-pjax-replace="true" data-turbo-replace="true" title="7,283" data-view-component="true" class="Counter">7.3k</span>
</a>
  </li>

  <li>
        <div data-view-component="true" class="BtnGroup d-flex">
        <a href="/login?return_to=%2Fgoogle-research%2Fgoogle-research" rel="nofollow" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;star button&quot;,&quot;repository_id&quot;:151619717,&quot;auth_type&quot;:&quot;LOG_IN&quot;,&quot;originating_url&quot;:&quot;https://github.com/google-research/google-research/blob/master/mbpp/mbpp.jsonl&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="618f83bfaeabfea67d9e0ae3bdb62468125ff813978ba2412142c3afe4f45984" aria-label="You must be signed in to star a repository" data-view-component="true" class="tooltipped tooltipped-s btn-sm btn BtnGroup-item">    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-star v-align-text-bottom d-inline-block mr-2">
    <path d="M8 .25a.75.75 0 0 1 .673.418l1.882 3.815 4.21.612a.75.75 0 0 1 .416 1.279l-3.046 2.97.719 4.192a.751.751 0 0 1-1.088.791L8 12.347l-3.766 1.98a.75.75 0 0 1-1.088-.79l.72-4.194L.818 6.374a.75.75 0 0 1 .416-1.28l4.21-.611L7.327.668A.75.75 0 0 1 8 .25Zm0 2.445L6.615 5.5a.75.75 0 0 1-.564.41l-3.097.45 2.24 2.184a.75.75 0 0 1 .216.664l-.528 3.084 2.769-1.456a.75.75 0 0 1 .698 0l2.77 1.456-.53-3.084a.75.75 0 0 1 .216-.664l2.24-2.183-3.096-.45a.75.75 0 0 1-.564-.41L8 2.694Z"></path>
</svg><span data-view-component="true" class="d-inline">
          Star
</span>          <span id="repo-stars-counter-star" aria-label="29532 users starred this repository" data-singular-suffix="user starred this repository" data-plural-suffix="users starred this repository" data-turbo-replace="true" title="29,532" data-view-component="true" class="Counter js-social-count">29.5k</span>
</a>        <button disabled="disabled" aria-label="You must be signed in to add this repository to a list" type="button" data-view-component="true" class="btn-sm btn BtnGroup-item px-2">    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-triangle-down">
    <path d="m4.427 7.427 3.396 3.396a.25.25 0 0 0 .354 0l3.396-3.396A.25.25 0 0 0 11.396 7H4.604a.25.25 0 0 0-.177.427Z"></path>
</svg>
</button></div>
  </li>


    

</ul>

        </div>
      </div>

        <div id="responsive-meta-container" data-turbo-replace>
</div>


          <nav data-pjax="#js-repo-pjax-container" aria-label="Repository" data-view-component="true" class="js-repo-nav js-sidenav-container-pjax js-responsive-underlinenav overflow-hidden UnderlineNav px-3 px-md-4 px-lg-5">

  <ul data-view-component="true" class="UnderlineNav-body list-style-none">
      <li data-view-component="true" class="d-inline-flex">
  <a id="code-tab" href="/google-research/google-research" data-tab-item="i0code-tab" data-selected-links="repo_source repo_downloads repo_commits repo_releases repo_tags repo_branches repo_packages repo_deployments /google-research/google-research" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" data-hotkey="g c" data-analytics-event="{&quot;category&quot;:&quot;Underline navbar&quot;,&quot;action&quot;:&quot;Click tab&quot;,&quot;label&quot;:&quot;Code&quot;,&quot;target&quot;:&quot;UNDERLINE_NAV.TAB&quot;}" aria-current="page" data-view-component="true" class="UnderlineNav-item no-wrap js-responsive-underlinenav-item js-selected-navigation-item selected">
    
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-code UnderlineNav-octicon d-none d-sm-inline">
    <path d="m11.28 3.22 4.25 4.25a.75.75 0 0 1 0 1.06l-4.25 4.25a.749.749 0 0 1-1.275-.326.749.749 0 0 1 .215-.734L13.94 8l-3.72-3.72a.749.749 0 0 1 .326-1.275.749.749 0 0 1 .734.215Zm-6.56 0a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042L2.06 8l3.72 3.72a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L.47 8.53a.75.75 0 0 1 0-1.06Z"></path>
</svg>
        <span data-content="Code">Code</span>
          <span id="code-repo-tab-count" data-pjax-replace="" data-turbo-replace="" title="Not available" data-view-component="true" class="Counter"></span>


    
</a></li>
      <li data-view-component="true" class="d-inline-flex">
  <a id="issues-tab" href="/google-research/google-research/issues" data-tab-item="i1issues-tab" data-selected-links="repo_issues repo_labels repo_milestones /google-research/google-research/issues" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" data-hotkey="g i" data-analytics-event="{&quot;category&quot;:&quot;Underline navbar&quot;,&quot;action&quot;:&quot;Click tab&quot;,&quot;label&quot;:&quot;Issues&quot;,&quot;target&quot;:&quot;UNDERLINE_NAV.TAB&quot;}" data-view-component="true" class="UnderlineNav-item no-wrap js-responsive-underlinenav-item js-selected-navigation-item">
    
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-issue-opened UnderlineNav-octicon d-none d-sm-inline">
    <path d="M8 9.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Z"></path><path d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM1.5 8a6.5 6.5 0 1 0 13 0 6.5 6.5 0 0 0-13 0Z"></path>
</svg>
        <span data-content="Issues">Issues</span>
          <span id="issues-repo-tab-count" data-pjax-replace="" data-turbo-replace="" title="729" data-view-component="true" class="Counter">729</span>


    
</a></li>
      <li data-view-component="true" class="d-inline-flex">
  <a id="pull-requests-tab" href="/google-research/google-research/pulls" data-tab-item="i2pull-requests-tab" data-selected-links="repo_pulls checks /google-research/google-research/pulls" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" data-hotkey="g p" data-analytics-event="{&quot;category&quot;:&quot;Underline navbar&quot;,&quot;action&quot;:&quot;Click tab&quot;,&quot;label&quot;:&quot;Pull requests&quot;,&quot;target&quot;:&quot;UNDERLINE_NAV.TAB&quot;}" data-view-component="true" class="UnderlineNav-item no-wrap js-responsive-underlinenav-item js-selected-navigation-item">
    
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-git-pull-request UnderlineNav-octicon d-none d-sm-inline">
    <path d="M1.5 3.25a2.25 2.25 0 1 1 3 2.122v5.256a2.251 2.251 0 1 1-1.5 0V5.372A2.25 2.25 0 0 1 1.5 3.25Zm5.677-.177L9.573.677A.25.25 0 0 1 10 .854V2.5h1A2.5 2.5 0 0 1 13.5 5v5.628a2.251 2.251 0 1 1-1.5 0V5a1 1 0 0 0-1-1h-1v1.646a.25.25 0 0 1-.427.177L7.177 3.427a.25.25 0 0 1 0-.354ZM3.75 2.5a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5Zm0 9.5a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5Zm8.25.75a.75.75 0 1 0 1.5 0 .75.75 0 0 0-1.5 0Z"></path>
</svg>
        <span data-content="Pull requests">Pull requests</span>
          <span id="pull-requests-repo-tab-count" data-pjax-replace="" data-turbo-replace="" title="283" data-view-component="true" class="Counter">283</span>


    
</a></li>
      <li data-view-component="true" class="d-inline-flex">
  <a id="actions-tab" href="/google-research/google-research/actions" data-tab-item="i3actions-tab" data-selected-links="repo_actions /google-research/google-research/actions" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" data-hotkey="g a" data-analytics-event="{&quot;category&quot;:&quot;Underline navbar&quot;,&quot;action&quot;:&quot;Click tab&quot;,&quot;label&quot;:&quot;Actions&quot;,&quot;target&quot;:&quot;UNDERLINE_NAV.TAB&quot;}" data-view-component="true" class="UnderlineNav-item no-wrap js-responsive-underlinenav-item js-selected-navigation-item">
    
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-play UnderlineNav-octicon d-none d-sm-inline">
    <path d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM1.5 8a6.5 6.5 0 1 0 13 0 6.5 6.5 0 0 0-13 0Zm4.879-2.773 4.264 2.559a.25.25 0 0 1 0 .428l-4.264 2.559A.25.25 0 0 1 6 10.559V5.442a.25.25 0 0 1 .379-.215Z"></path>
</svg>
        <span data-content="Actions">Actions</span>
          <span id="actions-repo-tab-count" data-pjax-replace="" data-turbo-replace="" title="Not available" data-view-component="true" class="Counter"></span>


    
</a></li>
      <li data-view-component="true" class="d-inline-flex">
  <a id="security-tab" href="/google-research/google-research/security" data-tab-item="i4security-tab" data-selected-links="security overview alerts policy token_scanning code_scanning /google-research/google-research/security" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" data-hotkey="g s" data-analytics-event="{&quot;category&quot;:&quot;Underline navbar&quot;,&quot;action&quot;:&quot;Click tab&quot;,&quot;label&quot;:&quot;Security&quot;,&quot;target&quot;:&quot;UNDERLINE_NAV.TAB&quot;}" data-view-component="true" class="UnderlineNav-item no-wrap js-responsive-underlinenav-item js-selected-navigation-item">
    
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-shield UnderlineNav-octicon d-none d-sm-inline">
    <path d="M7.467.133a1.748 1.748 0 0 1 1.066 0l5.25 1.68A1.75 1.75 0 0 1 15 3.48V7c0 1.566-.32 3.182-1.303 4.682-.983 1.498-2.585 2.813-5.032 3.855a1.697 1.697 0 0 1-1.33 0c-2.447-1.042-4.049-2.357-5.032-3.855C1.32 10.182 1 8.566 1 7V3.48a1.75 1.75 0 0 1 1.217-1.667Zm.61 1.429a.25.25 0 0 0-.153 0l-5.25 1.68a.25.25 0 0 0-.174.238V7c0 1.358.275 2.666 1.057 3.86.784 1.194 2.121 2.34 4.366 3.297a.196.196 0 0 0 .154 0c2.245-.956 3.582-2.104 4.366-3.298C13.225 9.666 13.5 8.36 13.5 7V3.48a.251.251 0 0 0-.174-.237l-5.25-1.68ZM8.75 4.75v3a.75.75 0 0 1-1.5 0v-3a.75.75 0 0 1 1.5 0ZM9 10.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path>
</svg>
        <span data-content="Security">Security</span>
          <include-fragment src="/google-research/google-research/security/overall-count" accept="text/fragment+html"></include-fragment>

    
</a></li>
      <li data-view-component="true" class="d-inline-flex">
  <a id="insights-tab" href="/google-research/google-research/pulse" data-tab-item="i5insights-tab" data-selected-links="repo_graphs repo_contributors dependency_graph dependabot_updates pulse people community /google-research/google-research/pulse" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" data-analytics-event="{&quot;category&quot;:&quot;Underline navbar&quot;,&quot;action&quot;:&quot;Click tab&quot;,&quot;label&quot;:&quot;Insights&quot;,&quot;target&quot;:&quot;UNDERLINE_NAV.TAB&quot;}" data-view-component="true" class="UnderlineNav-item no-wrap js-responsive-underlinenav-item js-selected-navigation-item">
    
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-graph UnderlineNav-octicon d-none d-sm-inline">
    <path d="M1.5 1.75V13.5h13.75a.75.75 0 0 1 0 1.5H.75a.75.75 0 0 1-.75-.75V1.75a.75.75 0 0 1 1.5 0Zm14.28 2.53-5.25 5.25a.75.75 0 0 1-1.06 0L7 7.06 4.28 9.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.25-3.25a.75.75 0 0 1 1.06 0L10 7.94l4.72-4.72a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042Z"></path>
</svg>
        <span data-content="Insights">Insights</span>
          <span id="insights-repo-tab-count" data-pjax-replace="" data-turbo-replace="" title="Not available" data-view-component="true" class="Counter"></span>


    
</a></li>
</ul>
    <div style="visibility:hidden;" data-view-component="true" class="UnderlineNav-actions js-responsive-underlinenav-overflow position-absolute pr-3 pr-md-4 pr-lg-5 right-0">      <details data-view-component="true" class="details-overlay details-reset position-relative">
  <summary role="button" data-view-component="true">          <div class="UnderlineNav-item mr-0 border-0">
            <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-kebab-horizontal">
    <path d="M8 9a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3ZM1.5 9a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Zm13 0a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Z"></path>
</svg>
            <span class="sr-only">More</span>
          </div>
</summary>
  <details-menu role="menu" data-view-component="true" class="dropdown-menu dropdown-menu-sw">          <ul>
              <li data-menu-item="i0code-tab" hidden>
                <a role="menuitem" class="js-selected-navigation-item selected dropdown-item" aria-current="page" data-selected-links="repo_source repo_downloads repo_commits repo_releases repo_tags repo_branches repo_packages repo_deployments /google-research/google-research" href="/google-research/google-research">
                  Code
</a>              </li>
              <li data-menu-item="i1issues-tab" hidden>
                <a role="menuitem" class="js-selected-navigation-item dropdown-item" data-selected-links="repo_issues repo_labels repo_milestones /google-research/google-research/issues" href="/google-research/google-research/issues">
                  Issues
</a>              </li>
              <li data-menu-item="i2pull-requests-tab" hidden>
                <a role="menuitem" class="js-selected-navigation-item dropdown-item" data-selected-links="repo_pulls checks /google-research/google-research/pulls" href="/google-research/google-research/pulls">
                  Pull requests
</a>              </li>
              <li data-menu-item="i3actions-tab" hidden>
                <a role="menuitem" class="js-selected-navigation-item dropdown-item" data-selected-links="repo_actions /google-research/google-research/actions" href="/google-research/google-research/actions">
                  Actions
</a>              </li>
              <li data-menu-item="i4security-tab" hidden>
                <a role="menuitem" class="js-selected-navigation-item dropdown-item" data-selected-links="security overview alerts policy token_scanning code_scanning /google-research/google-research/security" href="/google-research/google-research/security">
                  Security
</a>              </li>
              <li data-menu-item="i5insights-tab" hidden>
                <a role="menuitem" class="js-selected-navigation-item dropdown-item" data-selected-links="repo_graphs repo_contributors dependency_graph dependabot_updates pulse people community /google-research/google-research/pulse" href="/google-research/google-research/pulse">
                  Insights
</a>              </li>
          </ul>
</details-menu>
</details></div>
</nav>

  </div>

  



<turbo-frame id="repo-content-turbo-frame" target="_top" data-turbo-action="advance" class="">
    <div id="repo-content-pjax-container" class="repository-content " >
    


    
      
  <div class="clearfix container-xl px-3 px-md-4 px-lg-5 mt-4">
    
    
<div >
  

  



    
<a class="d-none js-permalink-shortcut" data-hotkey="y" href="/google-research/google-research/blob/23e7e50c883841c2045982433e57e1174dff51b8/mbpp/mbpp.jsonl">Permalink</a>

<div class="d-flex flex-items-start flex-shrink-0 pb-3 flex-wrap flex-md-nowrap flex-justify-between flex-md-justify-start">
  
<div class="position-relative">
  <details
    class="js-branch-select-menu details-reset details-overlay mr-0 mb-0 "
    id="branch-select-menu"
    data-hydro-click-payload="{&quot;event_type&quot;:&quot;repository.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;REFS_SELECTOR_MENU&quot;,&quot;repository_id&quot;:151619717,&quot;originating_url&quot;:&quot;https://github.com/google-research/google-research/blob/master/mbpp/mbpp.jsonl&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="26dea7b4dfe1820eaf58e308a209e62b4e2f5d08abc1017b0ac1040e797e88ae">
    <summary class="btn css-truncate"
            data-hotkey="w"
            title="Switch branches or tags">
      <svg text="gray" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-git-branch">
    <path d="M9.5 3.25a2.25 2.25 0 1 1 3 2.122V6A2.5 2.5 0 0 1 10 8.5H6a1 1 0 0 0-1 1v1.128a2.251 2.251 0 1 1-1.5 0V5.372a2.25 2.25 0 1 1 1.5 0v1.836A2.493 2.493 0 0 1 6 7h4a1 1 0 0 0 1-1v-.628A2.25 2.25 0 0 1 9.5 3.25Zm-6 0a.75.75 0 1 0 1.5 0 .75.75 0 0 0-1.5 0Zm8.25-.75a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5ZM4.25 12a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5Z"></path>
</svg>
      <span class="css-truncate-target" data-menu-button>master</span>
      <span class="dropdown-caret"></span>
    </summary>

    
<div class="SelectMenu">
  <div class="SelectMenu-modal">
    <header class="SelectMenu-header">
      <span class="SelectMenu-title">Switch branches/tags</span>
      <button class="SelectMenu-closeButton" type="button" data-toggle-for="branch-select-menu"><svg aria-label="Close menu" aria-hidden="false" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x">
    <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"></path>
</svg></button>
    </header>

    <input-demux data-action="tab-container-change:input-demux#storeInput tab-container-changed:input-demux#updateInput">
      <tab-container class="d-flex flex-column js-branches-tags-tabs" style="min-height: 0;">
        <div class="SelectMenu-filter">
          <input data-target="input-demux.source"
                 id="context-commitish-filter-field"
                 class="SelectMenu-input form-control"
                 aria-owns="ref-list-branches"
                 data-controls-ref-menu-id="ref-list-branches"
                 autofocus
                 autocomplete="off"
                 aria-label="Filter branches/tags"
                 placeholder="Filter branches/tags"
                 type="text"
          >
        </div>

        <div class="SelectMenu-tabs" role="tablist" data-target="input-demux.control" >
          <button class="SelectMenu-tab" type="button" role="tab" aria-selected="true">Branches</button>
          <button class="SelectMenu-tab" type="button" role="tab">Tags</button>
        </div>

        <div role="tabpanel" id="ref-list-branches" data-filter-placeholder="Filter branches/tags" tabindex="" class="d-flex flex-column flex-auto overflow-auto">
          <ref-selector
            type="branch"
            data-targets="input-demux.sinks"
            data-action="
              input-entered:ref-selector#inputEntered
              tab-selected:ref-selector#tabSelected
              focus-list:ref-selector#focusFirstListMember
            "
            query-endpoint="/google-research/google-research/refs"
            
            cache-key="v0:1685468398.220126"
            current-committish="bWFzdGVy"
            default-branch="bWFzdGVy"
            name-with-owner="Z29vZ2xlLXJlc2VhcmNoL2dvb2dsZS1yZXNlYXJjaA=="
            prefetch-on-mouseover
          >

            <template data-target="ref-selector.fetchFailedTemplate">
              <div class="SelectMenu-message" data-index="{{ index }}">Could not load branches</div>
            </template>

              <template data-target="ref-selector.noMatchTemplate">
    <div class="SelectMenu-message">Nothing to show</div>
</template>


            <div data-target="ref-selector.listContainer" role="menu" class="SelectMenu-list " data-turbo-frame="repo-content-turbo-frame">
              <div class="SelectMenu-loading pt-3 pb-0 overflow-hidden" aria-label="Menu is loading">
                <svg style="box-sizing: content-box; color: var(--color-icon-primary);" width="32" height="32" viewBox="0 0 16 16" fill="none" data-view-component="true" class="anim-rotate">
  <circle cx="8" cy="8" r="7" stroke="currentColor" stroke-opacity="0.25" stroke-width="2" vector-effect="non-scaling-stroke" />
  <path d="M15 8a7.002 7.002 0 00-7-7" stroke="currentColor" stroke-width="2" stroke-linecap="round" vector-effect="non-scaling-stroke" />
</svg>
              </div>
            </div>

              

<template data-target="ref-selector.itemTemplate">
  <a href="https://github.com/google-research/google-research/blob/{{ urlEncodedRefName }}/mbpp/mbpp.jsonl" class="SelectMenu-item" role="menuitemradio" rel="nofollow" aria-checked="{{ isCurrent }}" data-index="{{ index }}" >
    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-check SelectMenu-icon SelectMenu-icon--check">
    <path d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z"></path>
</svg>
    <span class="flex-1 css-truncate css-truncate-overflow {{ isFilteringClass }}">{{ refName }}</span>
    <span hidden="{{ isNotDefault }}" class="Label Label--secondary flex-self-start">default</span>
  </a>
</template>


              <footer class="SelectMenu-footer"><a href="/google-research/google-research/branches">View all branches</a></footer>
          </ref-selector>

        </div>

        <div role="tabpanel" id="tags-menu" data-filter-placeholder="Find a tag" tabindex="" hidden class="d-flex flex-column flex-auto overflow-auto">
          <ref-selector
            type="tag"
            data-action="
              input-entered:ref-selector#inputEntered
              tab-selected:ref-selector#tabSelected
              focus-list:ref-selector#focusFirstListMember
            "
            data-targets="input-demux.sinks"
            query-endpoint="/google-research/google-research/refs"
            cache-key="v0:1685468398.220126"
            current-committish="bWFzdGVy"
            default-branch="bWFzdGVy"
            name-with-owner="Z29vZ2xlLXJlc2VhcmNoL2dvb2dsZS1yZXNlYXJjaA=="
          >

            <template data-target="ref-selector.fetchFailedTemplate">
              <div class="SelectMenu-message" data-index="{{ index }}">Could not load tags</div>
            </template>

            <template data-target="ref-selector.noMatchTemplate">
              <div class="SelectMenu-message" data-index="{{ index }}">Nothing to show</div>
            </template>

              

<template data-target="ref-selector.itemTemplate">
  <a href="https://github.com/google-research/google-research/blob/{{ urlEncodedRefName }}/mbpp/mbpp.jsonl" class="SelectMenu-item" role="menuitemradio" rel="nofollow" aria-checked="{{ isCurrent }}" data-index="{{ index }}" >
    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-check SelectMenu-icon SelectMenu-icon--check">
    <path d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z"></path>
</svg>
    <span class="flex-1 css-truncate css-truncate-overflow {{ isFilteringClass }}">{{ refName }}</span>
    <span hidden="{{ isNotDefault }}" class="Label Label--secondary flex-self-start">default</span>
  </a>
</template>


            <div data-target="ref-selector.listContainer" role="menu" class="SelectMenu-list" data-turbo-frame="repo-content-turbo-frame">
              <div class="SelectMenu-loading pt-3 pb-0 overflow-hidden" aria-label="Menu is loading">
                <svg style="box-sizing: content-box; color: var(--color-icon-primary);" width="32" height="32" viewBox="0 0 16 16" fill="none" data-view-component="true" class="anim-rotate">
  <circle cx="8" cy="8" r="7" stroke="currentColor" stroke-opacity="0.25" stroke-width="2" vector-effect="non-scaling-stroke" />
  <path d="M15 8a7.002 7.002 0 00-7-7" stroke="currentColor" stroke-width="2" stroke-linecap="round" vector-effect="non-scaling-stroke" />
</svg>
              </div>
            </div>
              <footer class="SelectMenu-footer"><a href="/google-research/google-research/tags">View all tags</a></footer>
          </ref-selector>
        </div>
      </tab-container>
    </input-demux>
  </div>
</div>

  </details>

</div>


<div class="Overlay--hidden Overlay-backdrop--center" data-modal-dialog-overlay>
  <modal-dialog role="dialog" id="warn-tag-match-create-branch-dialog" aria-modal="true" aria-labelledby="warn-tag-match-create-branch-dialog-header" data-view-component="true" class="Overlay Overlay--width-large Overlay--height-auto Overlay--motion-scaleFade">
      <header class="Overlay-header Overlay-header--large Overlay-header--divided">
        <div class="Overlay-headerContentWrap">
          <div class="Overlay-titleWrap">
            <h1 id="warn-tag-match-create-branch-dialog-header" class="Overlay-title">Name already in use</h1>
          </div>
          <div class="Overlay-actionWrap">
            <button data-close-dialog-id="warn-tag-match-create-branch-dialog" aria-label="Close" type="button" data-view-component="true" class="close-button Overlay-closeButton"><svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x">
    <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"></path>
</svg></button>
          </div>
        </div>
      </header>
    <div class="Overlay-body ">
      
          <div data-view-component="true">      A tag already exists with the provided branch name. Many Git commands accept both tag and branch names, so creating this branch may cause unexpected behavior. Are you sure you want to create this branch?
</div>

    </div>
      <footer class="Overlay-footer Overlay-footer--alignEnd">
            <button data-close-dialog-id="warn-tag-match-create-branch-dialog" type="button" data-view-component="true" class="btn">    Cancel
</button>
            <button data-submit-dialog-id="warn-tag-match-create-branch-dialog" type="button" data-view-component="true" class="btn-danger btn">    Create
</button>
      </footer>
</modal-dialog></div>


  <h2 id="blob-path" class="breadcrumb flex-auto flex-self-center min-width-0 text-normal mx-2 width-full width-md-auto flex-order-1 flex-md-order-none mt-3 mt-md-0">
    <span class="js-repo-root text-bold"><span class="js-path-segment d-inline-block wb-break-all"><a data-turbo-frame="repo-content-turbo-frame" href="/google-research/google-research"><span>google-research</span></a></span></span><span class="separator">/</span><span class="js-path-segment d-inline-block wb-break-all"><a data-turbo-frame="repo-content-turbo-frame" href="/google-research/google-research/tree/master/mbpp"><span>mbpp</span></a></span><span class="separator">/</span><strong class="final-path">mbpp.jsonl</strong>
  </h2>
    <a href="/google-research/google-research/find/master" data-pjax="" data-hotkey="t" data-view-component="true" class="btn mr-2 d-none d-md-block">    Go to file
</a>
  <details id="blob-more-options-details" data-view-component="true" class="details-overlay details-reset position-relative">
    <summary role="button" data-view-component="true" class="btn">    <svg aria-label="More options" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-kebab-horizontal">
    <path d="M8 9a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3ZM1.5 9a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Zm13 0a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Z"></path>
</svg>
</summary>
  <div data-view-component="true">      <ul class="dropdown-menu dropdown-menu-sw">
        <li class="d-block d-md-none">
          <a class="dropdown-item d-flex flex-items-baseline" data-hydro-click="{&quot;event_type&quot;:&quot;repository.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;FIND_FILE_BUTTON&quot;,&quot;repository_id&quot;:151619717,&quot;originating_url&quot;:&quot;https://github.com/google-research/google-research/blob/master/mbpp/mbpp.jsonl&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="811fdaf12c2c8e80d2104a98ec6130d2a9ce5bd425347fcf3ce3b83298fec15e" data-ga-click="Repository, find file, location:repo overview" data-hotkey="t" href="/google-research/google-research/find/master">
            <span class="flex-auto">Go to file</span>
            <span class="text-small color-fg-muted" aria-hidden="true">T</span>
</a>        </li>
        <li data-toggle-for="blob-more-options-details">
            <button data-toggle-for="jumpto-line-details-dialog" type="button" data-view-component="true" class="dropdown-item btn-link">    <span class="d-flex flex-items-baseline">
              <span class="flex-auto">Go to line</span>
              <span class="text-small color-fg-muted" aria-hidden="true">L</span>
            </span>
</button>        </li>
        <li class="dropdown-divider" role="none"></li>
        <li>
          <clipboard-copy data-toggle-for="blob-more-options-details" aria-label="Copy path" value="mbpp/mbpp.jsonl" data-view-component="true" class="dropdown-item cursor-pointer">
    
            Copy path

</clipboard-copy>        </li>
        <li>
          <clipboard-copy data-toggle-for="blob-more-options-details" aria-label="Copy permalink" value="https://github.com/google-research/google-research/blob/23e7e50c883841c2045982433e57e1174dff51b8/mbpp/mbpp.jsonl" data-view-component="true" class="dropdown-item cursor-pointer">
    
            <span class="d-flex flex-items-baseline">
              <span class="flex-auto">Copy permalink</span>
            </span>

</clipboard-copy>        </li>
      </ul>
</div>
</details></div>





    <div id="spoof-warning" class="mt-0 pb-3" hidden aria-hidden>
  <div data-view-component="true" class="flash flash-warn mt-0 clearfix">
  
    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-alert float-left mt-1">
    <path d="M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path>
</svg>

      <div class="overflow-hidden">This commit does not belong to any branch on this repository, and may belong to a fork outside of the repository.</div>


  
</div></div>

    <include-fragment src="/google-research/google-research/spoofed_commit_check/23e7e50c883841c2045982433e57e1174dff51b8" data-test-selector="spoofed-commit-check"></include-fragment>

    <div class="Box d-flex flex-column flex-shrink-0 mb-3">
  <include-fragment src="/google-research/google-research/contributors/master/mbpp/mbpp.jsonl" class="commit-loader">
    <div class="Box-header d-flex flex-items-center">
      <div class="Skeleton avatar avatar-user flex-shrink-0 ml-n1 mr-n1 mt-n1 mb-n1" style="width:24px;height:24px;"></div>
      <div class="Skeleton Skeleton--text col-5 ml-2">&nbsp;</div>
    </div>

    <div class="Box-body d-flex flex-items-center" >
      <div class="Skeleton Skeleton--text col-1">&nbsp;</div>
      <span class="color-fg-danger h6 loader-error">Cannot retrieve contributors at this time</span>
    </div>
</include-fragment></div>








  
    <div data-target="readme-toc.content" class="Box mt-3 position-relative">
      
  <div
    class="Box-header js-blob-header py-2 pr-2 d-flex flex-shrink-0 flex-md-row flex-items-center"
    
  >


  <div class="text-mono f6 flex-auto pr-3 flex-order-2 flex-md-order-1">

      974 lines (974 sloc)
      <span class="file-info-divider"></span>
    551 KB
  </div>

  <div class="d-flex py-1 py-md-0 flex-auto flex-order-1 flex-md-order-2 flex-sm-grow-0 flex-justify-between hide-sm hide-md">
      

    <div class="BtnGroup">
        <a data-permalink-href="/google-research/google-research/raw/23e7e50c883841c2045982433e57e1174dff51b8/mbpp/mbpp.jsonl" href="/google-research/google-research/raw/master/mbpp/mbpp.jsonl" id="raw-url" group_item="true" data-view-component="true" class="js-permalink-replaceable-link Button--secondary Button--small Button">    <span class="Button-content">
      <span class="Button-label">Raw</span>
    </span>
</a>  
          <a data-permalink-href="/google-research/google-research/blame/23e7e50c883841c2045982433e57e1174dff51b8/mbpp/mbpp.jsonl" href="/google-research/google-research/blame/master/mbpp/mbpp.jsonl" group_item="true" data-hotkey="b" data-view-component="true" class="js-update-url-with-hash js-permalink-replaceable-link Button--secondary Button--small Button">    <span class="Button-content">
      <span class="Button-label">Blame</span>
    </span>
</a>  
    </div>

    <div class="d-flex">
        
<div class="ml-1" >
  <!-- '"` --><!-- </textarea></xmp> --></option></form><form class="BtnGroup-parent js-update-url-with-hash " data-turbo="false" action="/google-research/google-research/edit/master/mbpp/mbpp.jsonl" accept-charset="UTF-8" method="post"><input type="hidden" name="authenticity_token" value="2mGTruxXTJ3_MhmMtu8l4FXAnnKXmUE3w9FybrUIwrpMqBLzl7e0uhrfnvoDNlzlyUUj27Wb0RO2rltwSBkIqA" autocomplete="off" />
      <button disabled="disabled" title="You must be signed in to make or propose changes" data-hotkey="e" data-disable-with="" type="submit" data-view-component="true" class="btn-sm BtnGroup-item btn">    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-pencil">
    <path d="M11.013 1.427a1.75 1.75 0 0 1 2.474 0l1.086 1.086a1.75 1.75 0 0 1 0 2.474l-8.61 8.61c-.21.21-.47.364-.756.445l-3.251.93a.75.75 0 0 1-.927-.928l.929-3.25c.081-.286.235-.547.445-.758l8.61-8.61Zm.176 4.823L9.75 4.81l-6.286 6.287a.253.253 0 0 0-.064.108l-.558 1.953 1.953-.558a.253.253 0 0 0 .108-.064Zm1.238-3.763a.25.25 0 0 0-.354 0L10.811 3.75l1.439 1.44 1.263-1.263a.25.25 0 0 0 0-.354Z"></path>
</svg>
</button></form>
  <details class="details-reset details-overlay select-menu BtnGroup-parent d-inline-block position-relative">
      <summary data-disable-invalid="" data-disable-with="" data-dropdown-tracking="{&quot;type&quot;:&quot;blob_edit_dropdown.more_options_click&quot;,&quot;context&quot;:{&quot;repository_id&quot;:151619717,&quot;actor_id&quot;:null,&quot;github_dev_enabled&quot;:false,&quot;edit_enabled&quot;:false,&quot;small_screen&quot;:false}}" aria-label="Select additional options" data-view-component="true" class="js-blob-dropdown-click select-menu-button btn-sm btn BtnGroup-item float-none px-2">
</summary>    <div class="SelectMenu right-0">
      <div class="SelectMenu-modal width-full">
        <div class="SelectMenu-list SelectMenu-list--borderless py-2">
          <!-- '"` --><!-- </textarea></xmp> --></option></form><form class="SelectMenu-item js-update-url-with-hash " data-turbo="false" action="/google-research/google-research/edit/master/mbpp/mbpp.jsonl" accept-charset="UTF-8" method="post"><input type="hidden" name="authenticity_token" value="NifIdsddMeWp5ROR522fWUQSe4dW_tDc8CvzICCifSug7kkrvL3JwkwIlOdStOZc2JfGLnT8QPiFVNo-3bO3OQ" autocomplete="off" />
              <button disabled="disabled" title="You must be signed in to make or propose changes" type="submit" data-view-component="true" class="btn-invisible btn width-full d-flex flex-justify-between color-fg-muted text-normal p-0">    <div class="mr-5">Edit this file</div>
              <div class="color-fg-muted">E</div>
</button></form>

            <a data-platforms="windows,mac" aria-label="Open this file in GitHub Desktop" href="https://desktop.github.com" data-view-component="true" class="SelectMenu-item no-wrap js-remove-unless-platform width-full text-normal color-fg-default f5">
              Open in GitHub Desktop
</a>        </div>
      </div>
    </div>
  </details>
</div>


        
<div >
  <remote-clipboard-copy class="d-inline-block btn-octicon" style="height: 26px" data-src="/google-research/google-research/raw/23e7e50c883841c2045982433e57e1174dff51b8/mbpp/mbpp.jsonl" data-action="click:remote-clipboard-copy#remoteCopy">
  

  <span data-target="remote-clipboard-copy.idle">      <span class="tooltipped tooltipped-nw cursor-pointer" data-hydro-click="{&quot;event_type&quot;:&quot;repository.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;COPY_RAW_CONTENTS_BUTTON&quot;,&quot;repository_id&quot;:151619717,&quot;originating_url&quot;:&quot;https://github.com/google-research/google-research/blob/master/mbpp/mbpp.jsonl&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="6f919f2dda50efd2e66fbdd4b384132c7a9015441422a7dc5e06fbd67621f695" aria-label="Copy raw contents">
        <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-copy">
    <path d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 0 1 0 1.5h-1.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-1.5a.75.75 0 0 1 1.5 0v1.5A1.75 1.75 0 0 1 9.25 16h-7.5A1.75 1.75 0 0 1 0 14.25Z"></path><path d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0 1 14.25 11h-7.5A1.75 1.75 0 0 1 5 9.25Zm1.75-.25a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Z"></path>
</svg>
</span></span>
  <span data-target="remote-clipboard-copy.fetching" hidden="hidden">      <svg style="box-sizing: content-box; color: var(--color-icon-primary);" width="16" height="16" viewBox="0 0 16 16" fill="none" data-view-component="true" class="anim-rotate">
  <circle cx="8" cy="8" r="7" stroke="currentColor" stroke-opacity="0.25" stroke-width="2" vector-effect="non-scaling-stroke" />
  <path d="M15 8a7.002 7.002 0 00-7-7" stroke="currentColor" stroke-width="2" stroke-linecap="round" vector-effect="non-scaling-stroke" />
</svg>
</span>
  <span data-target="remote-clipboard-copy.success" hidden="hidden">      <span class="tooltipped tooltipped-nw" aria-label="Copied!">
        <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-check color-fg-success">
    <path d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z"></path>
</svg>
      </span>
</span>
  <span data-target="remote-clipboard-copy.error" hidden="hidden">      <span class="tooltipped tooltipped-nw" aria-label="Something went wrong. Try again.">
        <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-alert color-fg-attention">
    <path d="M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path>
</svg>
      </span>
</span>
</remote-clipboard-copy></div>


          <button class="btn-octicon btn-octicon-danger disabled tooltipped tooltipped-nw" disabled
            aria-label="You must be signed in to make or propose changes" type="button">
            <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-trash">
    <path d="M11 1.75V3h2.25a.75.75 0 0 1 0 1.5H2.75a.75.75 0 0 1 0-1.5H5V1.75C5 .784 5.784 0 6.75 0h2.5C10.216 0 11 .784 11 1.75ZM4.496 6.675l.66 6.6a.25.25 0 0 0 .249.225h5.19a.25.25 0 0 0 .249-.225l.66-6.6a.75.75 0 0 1 1.492.149l-.66 6.6A1.748 1.748 0 0 1 10.595 15h-5.19a1.75 1.75 0 0 1-1.741-1.575l-.66-6.6a.75.75 0 1 1 1.492-.15ZM6.5 1.75V3h3V1.75a.25.25 0 0 0-.25-.25h-2.5a.25.25 0 0 0-.25.25Z"></path>
</svg>
          </button>
    </div>
  </div>

    <div class="d-flex hide-lg hide-xl flex-order-2 flex-grow-0">
      <details class="dropdown details-reset details-overlay d-inline-block">
        <summary
          class="js-blob-dropdown-click btn-octicon"
          aria-haspopup="true"
          aria-label="Possible actions"
          
          data-dropdown-tracking="{&quot;type&quot;:&quot;blob_edit_dropdown.more_options_click&quot;,&quot;context&quot;:{&quot;repository_id&quot;:151619717,&quot;actor_id&quot;:null,&quot;github_dev_enabled&quot;:false,&quot;edit_enabled&quot;:false,&quot;small_screen&quot;:true}}"
        >
          <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-kebab-horizontal">
    <path d="M8 9a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3ZM1.5 9a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Zm13 0a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Z"></path>
</svg>
        </summary>

        <ul class="dropdown-menu dropdown-menu-sw" style="width: 175px">
            <li>
                <a class="dropdown-item tooltipped tooltipped-nw js-remove-unless-platform"
                   data-platforms="windows,mac"
                   href="https://desktop.github.com">
                  Open with Desktop
                </a>
            </li>
          <li>
            <a class="dropdown-item" href="/google-research/google-research/raw/master/mbpp/mbpp.jsonl">
              View raw
            </a>
          </li>
            <li>
              <remote-clipboard-copy class="dropdown-item" data-src="/google-research/google-research/raw/master/mbpp/mbpp.jsonl" data-action="click:remote-clipboard-copy#remoteCopy">
  

  <span data-target="remote-clipboard-copy.idle">                  <span class="cursor-pointer" data-hydro-click="{&quot;event_type&quot;:&quot;repository.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;COPY_RAW_CONTENTS_BUTTON&quot;,&quot;repository_id&quot;:151619717,&quot;originating_url&quot;:&quot;https://github.com/google-research/google-research/blob/master/mbpp/mbpp.jsonl&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="6f919f2dda50efd2e66fbdd4b384132c7a9015441422a7dc5e06fbd67621f695">
                    Copy raw contents
</span></span>
  <span data-target="remote-clipboard-copy.fetching" hidden="hidden">                  Copy raw contents
                  <span class="d-inline-block position-relative" style="top: 3px">
                    <svg aria-label="fetching contents…" style="box-sizing: content-box; color: var(--color-icon-primary);" width="16" height="16" viewBox="0 0 16 16" fill="none" data-view-component="true" class="anim-rotate">
  <circle cx="8" cy="8" r="7" stroke="currentColor" stroke-opacity="0.25" stroke-width="2" vector-effect="non-scaling-stroke" />
  <path d="M15 8a7.002 7.002 0 00-7-7" stroke="currentColor" stroke-width="2" stroke-linecap="round" vector-effect="non-scaling-stroke" />
</svg>
                  </span>
</span>
  <span data-target="remote-clipboard-copy.success" hidden="hidden">                  Copy raw contents
                  <svg aria-label="Copied!" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-check color-fg-success">
    <path d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z"></path>
</svg>
</span>
  <span data-target="remote-clipboard-copy.error" hidden="hidden">                  Copy raw contents
                  <svg aria-label="Something went wrong. Try again." role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-alert color-fg-attention">
    <path d="M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path>
</svg>
</span>
</remote-clipboard-copy>            </li>
            <li>
              <a class="dropdown-item" href="/google-research/google-research/blame/master/mbpp/mbpp.jsonl">
                View blame
              </a>
            </li>

        </ul>
      </details>
    </div>
</div>


      
    <div itemprop="text" class="Box-body p-0 blob-wrapper data type-json  gist-border-0">

        
<div class="js-check-bidi js-blob-code-container blob-code-content">

  <template class="js-file-alert-template">
  <div data-view-component="true" class="flash flash-warn flash-full d-flex flex-items-center">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-alert">
    <path d="M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path>
</svg>
    <span>
      This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters.
      <a href="https://github.co/hiddenchars" target="_blank">Learn more about bidirectional Unicode characters</a>
    </span>


  <div data-view-component="true" class="flash-action">        <a href="{{ revealButtonHref }}" data-view-component="true" class="btn-sm btn">    Show hidden characters
</a>
</div>
</div></template>
<template class="js-line-alert-template">
  <span aria-label="This line has hidden Unicode characters" data-view-component="true" class="line-alert tooltipped tooltipped-e">
    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-alert">
    <path d="M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path>
</svg>
</span></template>

  <table data-hpc class="highlight tab-size js-file-line-container js-code-nav-container js-tagsearch-file" data-tab-size="8" data-paste-markdown-skip data-tagsearch-lang="JSON" data-tagsearch-path="mbpp/mbpp.jsonl">
        <tr>
          <td id="L1" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="1"></td>
          <td id="LC1" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>R = 3<span class="pl-cce">\r\n</span>C = 3<span class="pl-cce">\r\n</span>def min_cost(cost, m, n): <span class="pl-cce">\r\n\t</span>tc = [[0 for x in range(C)] for x in range(R)] <span class="pl-cce">\r\n\t</span>tc[0][0] = cost[0][0] <span class="pl-cce">\r\n\t</span>for i in range(1, m+1): <span class="pl-cce">\r\n\t\t</span>tc[i][0] = tc[i-1][0] + cost[i][0] <span class="pl-cce">\r\n\t</span>for j in range(1, n+1): <span class="pl-cce">\r\n\t\t</span>tc[0][j] = tc[0][j-1] + cost[0][j] <span class="pl-cce">\r\n\t</span>for i in range(1, m+1): <span class="pl-cce">\r\n\t\t</span>for j in range(1, n+1): <span class="pl-cce">\r\n\t\t\t</span>tc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] <span class="pl-cce">\r\n\t</span>return tc[m][n]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">1</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L2" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="2"></td>
          <td id="LC2" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the similar elements from the given two tuple lists.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def similar_elements(test_tup1, test_tup2):<span class="pl-cce">\r\n</span>  res = tuple(set(test_tup1) &amp; set(test_tup2))<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">2</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L3" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="3"></td>
          <td id="LC3" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to identify non-prime numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math<span class="pl-cce">\r\n</span>def is_not_prime(n):<span class="pl-cce">\r\n</span>    result = False<span class="pl-cce">\r\n</span>    for i in range(2,int(math.sqrt(n)) + 1):<span class="pl-cce">\r\n</span>        if n % i == 0:<span class="pl-cce">\r\n</span>            result = True<span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">3</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert is_not_prime(2) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_not_prime(10) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_not_prime(35) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L4" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="4"></td>
          <td id="LC4" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the largest integers from a given list of numbers using heap queue algorithm.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import heapq as hq<span class="pl-cce">\r\n</span>def heap_queue_largest(nums,n):<span class="pl-cce">\r\n</span>  largest_nums = hq.nlargest(n, nums)<span class="pl-cce">\r\n</span>  return largest_nums<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">4</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L5" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="5"></td>
          <td id="LC5" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_ways(n): <span class="pl-cce">\r\n\t</span>A = [0] * (n + 1) <span class="pl-cce">\r\n\t</span>B = [0] * (n + 1) <span class="pl-cce">\r\n\t</span>A[0] = 1<span class="pl-cce">\r\n\t</span>A[1] = 0<span class="pl-cce">\r\n\t</span>B[0] = 0<span class="pl-cce">\r\n\t</span>B[1] = 1<span class="pl-cce">\r\n\t</span>for i in range(2, n+1): <span class="pl-cce">\r\n\t\t</span>A[i] = A[i - 2] + 2 * B[i - 1] <span class="pl-cce">\r\n\t\t</span>B[i] = A[i - 1] + B[i - 2] <span class="pl-cce">\r\n\t</span>return A[n] <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">5</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_ways(2) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_ways(8) == 153<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_ways(12) == 2131<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L6" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="6"></td>
          <td id="LC6" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether the two numbers differ at one bit position only or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def is_Power_Of_Two (x): <span class="pl-cce">\r\n</span>    return x and (not(x &amp; (x - 1))) <span class="pl-cce">\r\n</span>def differ_At_One_Bit_Pos(a,b): <span class="pl-cce">\r\n</span>    return is_Power_Of_Two(a ^ b)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">6</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert differ_At_One_Bit_Pos(13,9) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert differ_At_One_Bit_Pos(15,8) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert differ_At_One_Bit_Pos(2,4) == False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L7" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="7"></td>
          <td id="LC7" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find all words which are at least 4 characters long in a string by using regex.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def find_char_long(text):<span class="pl-cce">\r\n</span>  return (re.findall(r<span class="pl-cce">\&quot;\\</span>b<span class="pl-cce">\\</span>w{4,}<span class="pl-cce">\\</span>b<span class="pl-cce">\&quot;</span>, text))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">7</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_char_long(&#39;Please move back to stream&#39;) == [&#39;Please&#39;, &#39;move&#39;, &#39;back&#39;, &#39;stream&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_char_long(&#39;Jing Eco and Tech&#39;) == [&#39;Jing&#39;, &#39;Tech&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_char_long(&#39;Jhingai wulu road Zone 3&#39;) == [&#39;Jhingai&#39;, &#39;wulu&#39;, &#39;road&#39;, &#39;Zone&#39;]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L8" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="8"></td>
          <td id="LC8" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find squares of individual elements in a list using lambda function.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def square_nums(nums):<span class="pl-cce">\r\n</span> square_nums = list(map(lambda x: x ** 2, nums))<span class="pl-cce">\r\n</span> return square_nums<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">8</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert square_nums([10,20,30])==([100,400,900])<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert square_nums([12,15])==([144,225])<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L9" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="9"></td>
          <td id="LC9" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the minimum number of rotations required to get the same string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_Rotations(str): <span class="pl-cce">\r\n</span>    tmp = str + str<span class="pl-cce">\r\n</span>    n = len(str) <span class="pl-cce">\r\n</span>    for i in range(1,n + 1): <span class="pl-cce">\r\n</span>        substring = tmp[i: i+n] <span class="pl-cce">\r\n</span>        if (str == substring): <span class="pl-cce">\r\n</span>            return i <span class="pl-cce">\r\n</span>    return n <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">9</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Rotations(<span class="pl-cce">\&quot;</span>aaaa<span class="pl-cce">\&quot;</span>) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Rotations(<span class="pl-cce">\&quot;</span>ab<span class="pl-cce">\&quot;</span>) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Rotations(<span class="pl-cce">\&quot;</span>abc<span class="pl-cce">\&quot;</span>) == 3<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L10" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="10"></td>
          <td id="LC10" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to get the n smallest items from a dataset.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import heapq<span class="pl-cce">\r\n</span>def small_nnum(list1,n):<span class="pl-cce">\r\n</span>  smallest=heapq.nsmallest(n,list1)<span class="pl-cce">\r\n</span>  return smallest<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">10</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[10,20,20,40,50]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[10,20,20]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L11" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="11"></td>
          <td id="LC11" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to remove first and last occurrence of a given character from the string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def remove_Occ(s,ch): <span class="pl-cce">\r\n</span>    for i in range(len(s)): <span class="pl-cce">\r\n</span>        if (s[i] == ch): <span class="pl-cce">\r\n</span>            s = s[0 : i] + s[i + 1:] <span class="pl-cce">\r\n</span>            break<span class="pl-cce">\r\n</span>    for i in range(len(s) - 1,-1,-1):  <span class="pl-cce">\r\n</span>        if (s[i] == ch): <span class="pl-cce">\r\n</span>            s = s[0 : i] + s[i + 1:] <span class="pl-cce">\r\n</span>            break<span class="pl-cce">\r\n</span>    return s <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">11</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_Occ(<span class="pl-cce">\&quot;</span>hello<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>l<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>heo<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_Occ(<span class="pl-cce">\&quot;</span>abcda<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>a<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>bcd<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_Occ(<span class="pl-cce">\&quot;</span>PHP<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>P<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>H<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_Occ(<span class="pl-cce">\&quot;</span>hellolloll<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>l<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>helollol<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_Occ(<span class="pl-cce">\&quot;\&quot;</span>,<span class="pl-cce">\&quot;</span>l<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;\&quot;</span><span class="pl-pds">&quot;</span></span>]}</td>
        </tr>
        <tr>
          <td id="L12" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="12"></td>
          <td id="LC12" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to sort a given matrix in ascending order according to the sum of its rows.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sort_matrix(M):<span class="pl-cce">\r\n</span>    result = sorted(M, key=sum)<span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">12</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L13" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="13"></td>
          <td id="LC13" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to count the most common words in a dictionary.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from collections import Counter<span class="pl-cce">\r\n</span>def count_common(words):<span class="pl-cce">\r\n</span>  word_counts = Counter(words)<span class="pl-cce">\r\n</span>  top_four = word_counts.most_common(4)<span class="pl-cce">\r\n</span>  return (top_four)<span class="pl-cce">\r\n</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">13</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_common([&#39;red&#39;,&#39;green&#39;,&#39;black&#39;,&#39;pink&#39;,&#39;black&#39;,&#39;white&#39;,&#39;black&#39;,&#39;eyes&#39;,&#39;white&#39;,&#39;black&#39;,&#39;orange&#39;,&#39;pink&#39;,&#39;pink&#39;,&#39;red&#39;,&#39;red&#39;,&#39;white&#39;,&#39;orange&#39;,&#39;white&#39;,<span class="pl-cce">\&quot;</span>black<span class="pl-cce">\&quot;</span>,&#39;pink&#39;,&#39;green&#39;,&#39;green&#39;,&#39;pink&#39;,&#39;green&#39;,&#39;pink&#39;,&#39;white&#39;,&#39;orange&#39;,<span class="pl-cce">\&quot;</span>orange<span class="pl-cce">\&quot;</span>,&#39;red&#39;]) == [(&#39;pink&#39;, 6), (&#39;black&#39;, 5), (&#39;white&#39;, 5), (&#39;red&#39;, 4)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_common([&#39;one&#39;, &#39;two&#39;, &#39;three&#39;, &#39;four&#39;, &#39;five&#39;, &#39;one&#39;, &#39;two&#39;, &#39;one&#39;, &#39;three&#39;, &#39;one&#39;]) == [(&#39;one&#39;, 4), (&#39;two&#39;, 2), (&#39;three&#39;, 2), (&#39;four&#39;, 1)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_common([&#39;Facebook&#39;, &#39;Apple&#39;, &#39;Amazon&#39;, &#39;Netflix&#39;, &#39;Google&#39;, &#39;Apple&#39;, &#39;Netflix&#39;, &#39;Amazon&#39;]) == [(&#39;Apple&#39;, 2), (&#39;Amazon&#39;, 2), (&#39;Netflix&#39;, 2), (&#39;Facebook&#39;, 1)]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L14" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="14"></td>
          <td id="LC14" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the volume of a triangular prism.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_Volume(l,b,h) : <span class="pl-cce">\r\n</span>    return ((l * b * h) / 2) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">14</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Volume(10,8,6) == 240<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Volume(3,2,2) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Volume(1,2,1) == 1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L15" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="15"></td>
          <td id="LC15" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to split a string at lowercase letters.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def split_lowerstring(text):<span class="pl-cce">\r\n</span> return (re.findall(&#39;[a-z][^a-z]*&#39;, text))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">15</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert split_lowerstring(<span class="pl-cce">\&quot;</span>AbCd<span class="pl-cce">\&quot;</span>)==[&#39;bC&#39;,&#39;d&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert split_lowerstring(<span class="pl-cce">\&quot;</span>Python<span class="pl-cce">\&quot;</span>)==[&#39;y&#39;, &#39;t&#39;, &#39;h&#39;, &#39;o&#39;, &#39;n&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert split_lowerstring(<span class="pl-cce">\&quot;</span>Programming<span class="pl-cce">\&quot;</span>)==[&#39;r&#39;, &#39;o&#39;, &#39;g&#39;, &#39;r&#39;, &#39;a&#39;, &#39;m&#39;, &#39;m&#39;, &#39;i&#39;, &#39;n&#39;, &#39;g&#39;]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L16" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="16"></td>
          <td id="LC16" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find sequences of lowercase letters joined with an underscore.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def text_lowercase_underscore(text):<span class="pl-cce">\r\n</span>        patterns = &#39;^[a-z]+_[a-z]+$&#39;<span class="pl-cce">\r\n</span>        if re.search(patterns,  text):<span class="pl-cce">\r\n</span>                return &#39;Found a match!&#39;<span class="pl-cce">\r\n</span>        else:<span class="pl-cce">\r\n</span>                return(&#39;Not matched!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">16</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert text_lowercase_underscore(<span class="pl-cce">\&quot;</span>aab_cbbbc<span class="pl-cce">\&quot;</span>)==(&#39;Found a match!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert text_lowercase_underscore(<span class="pl-cce">\&quot;</span>aab_Abbbc<span class="pl-cce">\&quot;</span>)==(&#39;Not matched!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert text_lowercase_underscore(<span class="pl-cce">\&quot;</span>Aaab_abbbc<span class="pl-cce">\&quot;</span>)==(&#39;Not matched!&#39;)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert text_lowercase_underscore(<span class="pl-cce">\&quot;</span>aab-cbbbc<span class="pl-cce">\&quot;</span>)==(&#39;Not matched!&#39;)<span class="pl-pds">&quot;</span></span>]}</td>
        </tr>
        <tr>
          <td id="L17" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="17"></td>
          <td id="LC17" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the perimeter of a square.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def square_perimeter(a):<span class="pl-cce">\r\n</span>  perimeter=4*a<span class="pl-cce">\r\n</span>  return perimeter<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">17</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert square_perimeter(10)==40<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert square_perimeter(5)==20<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert square_perimeter(4)==16<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L18" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="18"></td>
          <td id="LC18" class="blob-code blob-code-inner js-file-line">{&quot;text&quot;: &quot;Write a function to remove characters from the first string which are present in the second string.&quot;, &quot;code&quot;: &quot;NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn &#39;&#39;.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = &#39;&#39; \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) &quot;, &quot;task_id&quot;: 18, &quot;test_setup_code&quot;: &quot;&quot;, &quot;test_list&quot;: [&quot;assert remove_dirty_chars(\&quot;probasscurve\&quot;, \&quot;pros\&quot;) == &#39;bacuve&#39;&quot;, &quot;assert remove_dirty_chars(\&quot;digitalindia\&quot;, \&quot;talent\&quot;) == &#39;digiidi&#39;&quot;, &quot;assert remove_dirty_chars(\&quot;exoticmiles\&quot;, \&quot;toxic\&quot;) == &#39;emles&#39; &quot;], &quot;challenge_test_list&quot;: []}</td>
        </tr>
        <tr>
          <td id="L19" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="19"></td>
          <td id="LC19" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find whether a given array of integers contains any duplicate element.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def test_duplicate(arraynums):<span class="pl-cce">\r\n</span>    nums_set = set(arraynums)    <span class="pl-cce">\r\n</span>    return len(arraynums) != len(nums_set)     <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">19</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert test_duplicate(([1,2,3,4,5]))==False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert test_duplicate(([1,2,3,4, 4]))==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert test_duplicate([1,1,2,2,3,3,4,4,5])==True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L20" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="20"></td>
          <td id="LC20" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check if the given number is woodball or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def is_woodall(x): <span class="pl-cce">\r\n\t</span>if (x % 2 == 0): <span class="pl-cce">\r\n\t\t</span>return False<span class="pl-cce">\r\n\t</span>if (x == 1): <span class="pl-cce">\r\n\t\t</span>return True<span class="pl-cce">\r\n\t</span>x = x + 1 <span class="pl-cce">\r\n\t</span>p = 0<span class="pl-cce">\r\n\t</span>while (x % 2 == 0): <span class="pl-cce">\r\n\t\t</span>x = x/2<span class="pl-cce">\r\n\t\t</span>p = p + 1<span class="pl-cce">\r\n\t\t</span>if (p == x): <span class="pl-cce">\r\n\t\t\t</span>return True<span class="pl-cce">\r\n\t</span>return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">20</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert is_woodall(383) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_woodall(254) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_woodall(200) == False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert is_woodall(32212254719) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_woodall(32212254718) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_woodall(159) == True<span class="pl-pds">&quot;</span></span>]}</td>
        </tr>
        <tr>
          <td id="L21" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="21"></td>
          <td id="LC21" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find m number of multiples of n.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def multiples_of_num(m,n): <span class="pl-cce">\r\n</span>    multiples_of_num= list(range(n,(m+1)*n, n)) <span class="pl-cce">\r\n</span>    return list(multiples_of_num)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">21</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert multiples_of_num(4,3)== [3,6,9,12]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert multiples_of_num(2,5)== [5,10]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L22" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="22"></td>
          <td id="LC22" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the first duplicate element in a given array of integers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_first_duplicate(nums):<span class="pl-cce">\r\n</span>    num_set = set()<span class="pl-cce">\r\n</span>    no_duplicate = -1<span class="pl-cce">\r\n\r\n</span>    for i in range(len(nums)):<span class="pl-cce">\r\n\r\n</span>        if nums[i] in num_set:<span class="pl-cce">\r\n</span>            return nums[i]<span class="pl-cce">\r\n</span>        else:<span class="pl-cce">\r\n</span>            num_set.add(nums[i])<span class="pl-cce">\r\n\r\n</span>    return no_duplicate<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">22</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_first_duplicate([1, 2, 3, 4])==-1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L23" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="23"></td>
          <td id="LC23" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the maximum sum of elements of list in a list of lists.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def maximum_Sum(list1): <span class="pl-cce">\r\n</span>    maxi = -100000<span class="pl-cce">\r\n</span>    for x in list1: <span class="pl-cce">\r\n</span>        sum = 0 <span class="pl-cce">\r\n</span>        for y in x: <span class="pl-cce">\r\n</span>            sum+= y      <span class="pl-cce">\r\n</span>        maxi = max(sum,maxi)     <span class="pl-cce">\r\n</span>    return maxi <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">23</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert maximum_Sum([[0,-1,-1],[-1,-1,-2],[-3,-2,-1]]) == -2<span class="pl-pds">&quot;</span></span>]}</td>
        </tr>
        <tr>
          <td id="L24" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="24"></td>
          <td id="LC24" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to convert the given binary number to its decimal equivalent.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def binary_to_decimal(binary): <span class="pl-cce">\r\n</span>    binary1 = binary <span class="pl-cce">\r\n</span>    decimal, i, n = 0, 0, 0<span class="pl-cce">\r\n</span>    while(binary != 0): <span class="pl-cce">\r\n</span>        dec = binary % 10<span class="pl-cce">\r\n</span>        decimal = decimal + dec * pow(2, i) <span class="pl-cce">\r\n</span>        binary = binary//10<span class="pl-cce">\r\n</span>        i += 1<span class="pl-cce">\r\n</span>    return (decimal)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">24</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert binary_to_decimal(100) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert binary_to_decimal(1011) == 11<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert binary_to_decimal(1101101) == 109<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L25" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="25"></td>
          <td id="LC25" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the product of non-repeated elements in a given array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_Product(arr,n): <span class="pl-cce">\r\n</span>    arr.sort() <span class="pl-cce">\r\n</span>    prod = 1<span class="pl-cce">\r\n</span>    for i in range(0,n,1): <span class="pl-cce">\r\n</span>        if (arr[i - 1] != arr[i]): <span class="pl-cce">\r\n</span>            prod = prod * arr[i] <span class="pl-cce">\r\n</span>    return prod; <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">25</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Product([1,1,2,3],4) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Product([1,2,3,1,1],5) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Product([1,1,4,5,6],5) == 120<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Product([1,1,4,5,6,5,7,1,1,3,4],11) == 2520<span class="pl-pds">&quot;</span></span>]}</td>
        </tr>
        <tr>
          <td id="L26" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="26"></td>
          <td id="LC26" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check if the given tuple list has all k elements.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_k_elements(test_list, K):<span class="pl-cce">\r\n</span>  res = True<span class="pl-cce">\r\n</span>  for tup in test_list:<span class="pl-cce">\r\n</span>    for ele in tup:<span class="pl-cce">\r\n</span>      if ele != K:<span class="pl-cce">\r\n</span>        res = False<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">26</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 6, 4), (4, )], 4) == False<span class="pl-pds">&quot;</span></span>]}</td>
        </tr>
        <tr>
          <td id="L27" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="27"></td>
          <td id="LC27" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to remove all digits from a list of strings.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re  <span class="pl-cce">\r\n</span>def remove(list): <span class="pl-cce">\r\n</span>    pattern = &#39;[0-9]&#39;<span class="pl-cce">\r\n</span>    list = [re.sub(pattern, &#39;&#39;, i) for i in list] <span class="pl-cce">\r\n</span>    return list<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">27</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove([&#39;4words&#39;, &#39;3letters&#39;, &#39;4digits&#39;]) == [&#39;words&#39;, &#39;letters&#39;, &#39;digits&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove([&#39;28Jan&#39;,&#39;12Jan&#39;,&#39;11Jan&#39;]) == [&#39;Jan&#39;,&#39;Jan&#39;,&#39;Jan&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove([&#39;wonder1&#39;,&#39;wonder2&#39;,&#39;wonder3&#39;]) == [&#39;wonder&#39;,&#39;wonder&#39;,&#39;wonder&#39;]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L28" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="28"></td>
          <td id="LC28" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find binomial co-efficient.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def binomial_Coeff(n,k): <span class="pl-cce">\r\n</span>    if k &gt; n : <span class="pl-cce">\r\n</span>       return 0<span class="pl-cce">\r\n</span>    if k==0 or k ==n : <span class="pl-cce">\r\n</span>        return 1 <span class="pl-cce">\r\n</span>    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">28</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert binomial_Coeff(5,2) == 10<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert binomial_Coeff(4,3) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert binomial_Coeff(3,2) == 3<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert binomial_Coeff(14,6) == 3003<span class="pl-pds">&quot;</span></span>]}</td>
        </tr>
        <tr>
          <td id="L29" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="29"></td>
          <td id="LC29" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the element occurring odd number of times.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def get_Odd_Occurrence(arr,arr_size):   <span class="pl-cce">\r\n</span>    for i in range(0,arr_size): <span class="pl-cce">\r\n</span>        count = 0<span class="pl-cce">\r\n</span>        for j in range(0,arr_size): <span class="pl-cce">\r\n</span>            if arr[i] == arr[j]: <span class="pl-cce">\r\n</span>                count+=1     <span class="pl-cce">\r\n</span>        if (count % 2 != 0): <span class="pl-cce">\r\n</span>            return arr[i]     <span class="pl-cce">\r\n</span>    return -1<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">29</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L30" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="30"></td>
          <td id="LC30" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count all the substrings starting and ending with same characters.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_Equality(s): <span class="pl-cce">\r\n</span>    return (ord(s[0]) == ord(s[len(s) - 1])); <span class="pl-cce">\r\n</span>def count_Substring_With_Equal_Ends(s): <span class="pl-cce">\r\n</span>    result = 0; <span class="pl-cce">\r\n</span>    n = len(s); <span class="pl-cce">\r\n</span>    for i in range(n): <span class="pl-cce">\r\n</span>        for j in range(1,n-i+1):  <span class="pl-cce">\r\n</span>            if (check_Equality(s[i:i+j])): <span class="pl-cce">\r\n</span>                result+=1; <span class="pl-cce">\r\n</span>    return result; <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">30</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Substring_With_Equal_Ends(<span class="pl-cce">\&quot;</span>abc<span class="pl-cce">\&quot;</span>) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Substring_With_Equal_Ends(<span class="pl-cce">\&quot;</span>abcda<span class="pl-cce">\&quot;</span>) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Substring_With_Equal_Ends(<span class="pl-cce">\&quot;</span>ab<span class="pl-cce">\&quot;</span>) == 2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L31" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="31"></td>
          <td id="LC31" class="blob-code blob-code-inner js-file-line">{&quot;text&quot;: &quot;Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.&quot;, &quot;code&quot;: &quot;def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) &lt; k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v &gt; temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result&quot;, &quot;task_id&quot;: 31, &quot;test_setup_code&quot;: &quot;&quot;, &quot;test_list&quot;: [&quot;assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]&quot;, &quot;assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]&quot;, &quot;assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]&quot;], &quot;challenge_test_list&quot;: []}</td>
        </tr>
        <tr>
          <td id="L32" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="32"></td>
          <td id="LC32" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the largest prime factor of a given number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math <span class="pl-cce">\r\n</span>def max_Prime_Factors (n): <span class="pl-cce">\r\n</span>    maxPrime = -1 <span class="pl-cce">\r\n</span>    while n%2 == 0: <span class="pl-cce">\r\n</span>        maxPrime = 2<span class="pl-cce">\r\n</span>        n &gt;&gt;= 1    <span class="pl-cce">\r\n</span>    for i in range(3,int(math.sqrt(n))+1,2): <span class="pl-cce">\r\n</span>        while n % i == 0: <span class="pl-cce">\r\n</span>            maxPrime = i <span class="pl-cce">\r\n</span>            n = n / i <span class="pl-cce">\r\n</span>    if n &gt; 2: <span class="pl-cce">\r\n</span>        maxPrime = n  <span class="pl-cce">\r\n</span>    return int(maxPrime)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">32</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert max_Prime_Factors(15) == 5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_Prime_Factors(6) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_Prime_Factors(2) == 2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L33" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="33"></td>
          <td id="LC33" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to convert a decimal number to binary number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def decimal_To_Binary(N): <span class="pl-cce">\r\n</span>    B_Number = 0<span class="pl-cce">\r\n</span>    cnt = 0<span class="pl-cce">\r\n</span>    while (N != 0): <span class="pl-cce">\r\n</span>        rem = N % 2<span class="pl-cce">\r\n</span>        c = pow(10,cnt)  <span class="pl-cce">\r\n</span>        B_Number += rem*c  <span class="pl-cce">\r\n</span>        N //= 2 <span class="pl-cce">\r\n</span>        cnt += 1<span class="pl-cce">\r\n</span>    return B_Number  <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">33</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert decimal_To_Binary(10) == 1010<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert decimal_To_Binary(1) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert decimal_To_Binary(20) == 10100<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L34" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="34"></td>
          <td id="LC34" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the missing number in a sorted array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_missing(ar,N): <span class="pl-cce">\r\n</span>    l = 0<span class="pl-cce">\r\n</span>    r = N - 1<span class="pl-cce">\r\n</span>    while (l &lt;= r):  <span class="pl-cce">\r\n</span>        mid = (l + r) / 2<span class="pl-cce">\r\n</span>        mid= int (mid) <span class="pl-cce">\r\n</span>        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): <span class="pl-cce">\r\n</span>            return (mid + 1)  <span class="pl-cce">\r\n</span>        elif (ar[mid] != mid + 1): <span class="pl-cce">\r\n</span>            r = mid - 1 <span class="pl-cce">\r\n</span>        else: <span class="pl-cce">\r\n</span>            l = mid + 1<span class="pl-cce">\r\n</span>    return (-1) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">34</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_missing([1,2,3,5],4) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_missing([1,3,4,5],4) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_missing([1,2,3,5,6,7],5) == 4<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L35" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="35"></td>
          <td id="LC35" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the n-th rectangular number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_rect_num(n):<span class="pl-cce">\r\n</span>  return n*(n + 1) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">35</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_rect_num(4) == 20<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_rect_num(5) == 30<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_rect_num(6) == 42<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L36" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="36"></td>
          <td id="LC36" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the nth digit in the proper fraction of two given numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_Nth_Digit(p,q,N) :  <span class="pl-cce">\r\n</span>    while (N &gt; 0) : <span class="pl-cce">\r\n</span>        N -= 1;  <span class="pl-cce">\r\n</span>        p *= 10;  <span class="pl-cce">\r\n</span>        res = p // q;  <span class="pl-cce">\r\n</span>        p %= q;  <span class="pl-cce">\r\n</span>    return res;  <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">36</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Nth_Digit(1,2,1) == 5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Nth_Digit(3,5,1) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Nth_Digit(5,6,5) == 3<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L37" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="37"></td>
          <td id="LC37" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to sort a given mixed list of integers and strings.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sort_mixed_list(mixed_list):<span class="pl-cce">\r\n</span>    int_part = sorted([i for i in mixed_list if type(i) is int])<span class="pl-cce">\r\n</span>    str_part = sorted([i for i in mixed_list if type(i) is str])<span class="pl-cce">\r\n</span>    return int_part + str_part<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">37</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_mixed_list([19,&#39;red&#39;,12,&#39;green&#39;,&#39;blue&#39;, 10,&#39;white&#39;,&#39;green&#39;,1])==[1, 10, 12, 19, &#39;blue&#39;, &#39;green&#39;, &#39;green&#39;, &#39;red&#39;, &#39;white&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_mixed_list([19,&#39;red&#39;,12,&#39;green&#39;,&#39;blue&#39;, 10,&#39;white&#39;,&#39;green&#39;,1])==[1, 10, 12, 19, &#39;blue&#39;, &#39;green&#39;, &#39;green&#39;, &#39;red&#39;, &#39;white&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_mixed_list([19,&#39;red&#39;,12,&#39;green&#39;,&#39;blue&#39;, 10,&#39;white&#39;,&#39;green&#39;,1])==[1, 10, 12, 19, &#39;blue&#39;, &#39;green&#39;, &#39;green&#39;, &#39;red&#39;, &#39;white&#39;]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L38" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="38"></td>
          <td id="LC38" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the division of first even and odd number of a given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def div_even_odd(list1):<span class="pl-cce">\r\n</span>    first_even = next((el for el in list1 if el%2==0),-1)<span class="pl-cce">\r\n</span>    first_odd = next((el for el in list1 if el%2!=0),-1)<span class="pl-cce">\r\n</span>    return (first_even/first_odd)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">38</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert div_even_odd([1,3,5,7,4,1,6,8])==4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert div_even_odd([1,5,7,9,10])==10<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L39" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="39"></td>
          <td id="LC39" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import heapq<span class="pl-cce">\r\n</span>from collections import Counter<span class="pl-cce">\r\n</span>def rearange_string(S):<span class="pl-cce">\r\n</span>    ctr = Counter(S)<span class="pl-cce">\r\n</span>    heap = [(-value, key) for key, value in ctr.items()]<span class="pl-cce">\r\n</span>    heapq.heapify(heap)<span class="pl-cce">\r\n</span>    if (-heap[0][0]) * 2 &gt; len(S) + 1: <span class="pl-cce">\r\n</span>        return <span class="pl-cce">\&quot;\&quot;\r\n</span>    ans = []<span class="pl-cce">\r\n</span>    while len(heap) &gt;= 2:<span class="pl-cce">\r\n</span>        nct1, char1 = heapq.heappop(heap)<span class="pl-cce">\r\n</span>        nct2, char2 = heapq.heappop(heap)<span class="pl-cce">\r\n</span>        ans.extend([char1, char2])<span class="pl-cce">\r\n</span>        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))<span class="pl-cce">\r\n</span>        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))<span class="pl-cce">\r\n</span>    return <span class="pl-cce">\&quot;\&quot;</span>.join(ans) + (heap[0][1] if heap else <span class="pl-cce">\&quot;\&quot;</span>)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">39</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert rearange_string(<span class="pl-cce">\&quot;</span>aab<span class="pl-cce">\&quot;</span>)==(&#39;aba&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert rearange_string(<span class="pl-cce">\&quot;</span>aabb<span class="pl-cce">\&quot;</span>)==(&#39;abab&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert rearange_string(<span class="pl-cce">\&quot;</span>abccdd<span class="pl-cce">\&quot;</span>)==(&#39;cdabcd&#39;)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L40" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="40"></td>
          <td id="LC40" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find frequency of the elements in a given list of lists using collections module.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from collections import Counter<span class="pl-cce">\r\n</span>from itertools import chain<span class="pl-cce">\r\n</span>def freq_element(nums):<span class="pl-cce">\r\n</span>  result = Counter(chain.from_iterable(nums))<span class="pl-cce">\r\n</span>  return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">40</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L41" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="41"></td>
          <td id="LC41" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to filter even numbers using lambda function.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def filter_evennumbers(nums):<span class="pl-cce">\r\n</span> even_nums = list(filter(lambda x: x%2 == 0, nums))<span class="pl-cce">\r\n</span> return even_nums<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">41</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L42" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="42"></td>
          <td id="LC42" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the sum of repeated elements in a given array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_Sum(arr,n): <span class="pl-cce">\r\n</span>    return sum([x for x in arr if arr.count(x) &gt; 1])<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">42</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Sum([1,2,3,1,1,4,5,6],8) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Sum([1,2,3,1,1],5) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Sum([1,1,2],3) == 2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Sum([1,1,2,3,4,5,6,3,5],9) == 18<span class="pl-pds">&quot;</span></span>]}</td>
        </tr>
        <tr>
          <td id="L43" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="43"></td>
          <td id="LC43" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find sequences of lowercase letters joined with an underscore using regex.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def text_match(text):<span class="pl-cce">\r\n</span>  patterns = &#39;^[a-z]+_[a-z]+$&#39;<span class="pl-cce">\r\n</span>  if re.search(patterns,  text):<span class="pl-cce">\r\n</span>    return (&#39;Found a match!&#39;)<span class="pl-cce">\r\n</span>  else:<span class="pl-cce">\r\n</span>    return (&#39;Not matched!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">43</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match(<span class="pl-cce">\&quot;</span>aab_cbbbc<span class="pl-cce">\&quot;</span>) == &#39;Found a match!&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match(<span class="pl-cce">\&quot;</span>aab_Abbbc<span class="pl-cce">\&quot;</span>) == &#39;Not matched!&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match(<span class="pl-cce">\&quot;</span>Aaab_abbbc<span class="pl-cce">\&quot;</span>) == &#39;Not matched!&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match(<span class="pl-cce">\&quot;</span>aab-cbbbc<span class="pl-cce">\&quot;</span>) == &#39;Not matched!&#39;<span class="pl-pds">&quot;</span></span>]}</td>
        </tr>
        <tr>
          <td id="L44" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="44"></td>
          <td id="LC44" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function that matches a word at the beginning of a string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def text_match_string(text):<span class="pl-cce">\r\n</span>        patterns = &#39;^<span class="pl-cce">\\</span>w+&#39;<span class="pl-cce">\r\n</span>        if re.search(patterns,  text):<span class="pl-cce">\r\n</span>                return &#39;Found a match!&#39;<span class="pl-cce">\r\n</span>        else:<span class="pl-cce">\r\n</span>                return &#39;Not matched!&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">44</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match_string(<span class="pl-cce">\&quot;</span> python<span class="pl-cce">\&quot;</span>)==(&#39;Not matched!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match_string(<span class="pl-cce">\&quot;</span>python<span class="pl-cce">\&quot;</span>)==(&#39;Found a match!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match_string(<span class="pl-cce">\&quot;</span>  lang<span class="pl-cce">\&quot;</span>)==(&#39;Not matched!&#39;)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match_string(<span class="pl-cce">\&quot;</span>foo<span class="pl-cce">\&quot;</span>)==(&#39;Found a match!&#39;)<span class="pl-pds">&quot;</span></span>]}</td>
        </tr>
        <tr>
          <td id="L45" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="45"></td>
          <td id="LC45" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the gcd of the given array elements.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_gcd(x, y): <span class="pl-cce">\r\n\t</span>while(y): <span class="pl-cce">\r\n\t\t</span>x, y = y, x % y <span class="pl-cce">\r\n\t</span>return x <span class="pl-cce">\r\n</span>def get_gcd(l):<span class="pl-cce">\r\n</span>  num1 = l[0]<span class="pl-cce">\r\n</span>  num2 = l[1]<span class="pl-cce">\r\n</span>  gcd = find_gcd(num1, num2)<span class="pl-cce">\r\n</span>  for i in range(2, len(l)):<span class="pl-cce">\r\n</span>    gcd = find_gcd(gcd, l[i])<span class="pl-cce">\r\n</span>  return gcd<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">45</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert get_gcd([2, 4, 6, 8, 16]) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_gcd([1, 2, 3]) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_gcd([2, 4, 6, 8]) == 2 <span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L46" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="46"></td>
          <td id="LC46" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to determine whether all the numbers are different from each other are not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def test_distinct(data):<span class="pl-cce">\r\n</span>  if len(data) == len(set(data)):<span class="pl-cce">\r\n</span>    return True<span class="pl-cce">\r\n</span>  else:<span class="pl-cce">\r\n</span>    return False;<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">46</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert test_distinct([1,5,7,9]) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert test_distinct([2,4,5,5,7,9]) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert test_distinct([1,2,3]) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L47" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="47"></td>
          <td id="LC47" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the last digit when factorial of a divides factorial of b.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def compute_Last_Digit(A,B): <span class="pl-cce">\r\n</span>    variable = 1<span class="pl-cce">\r\n</span>    if (A == B): <span class="pl-cce">\r\n</span>        return 1<span class="pl-cce">\r\n</span>    elif ((B - A) &gt;= 5):  <span class="pl-cce">\r\n</span>        return 0<span class="pl-cce">\r\n</span>    else:   <span class="pl-cce">\r\n</span>        for i in range(A + 1,B + 1): <span class="pl-cce">\r\n</span>            variable = (variable * (i % 10)) % 10<span class="pl-cce">\r\n</span>        return variable % 10<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">47</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert compute_Last_Digit(2,4) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert compute_Last_Digit(6,8) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert compute_Last_Digit(1,2) == 2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert compute_Last_Digit(3,7) == 0<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert compute_Last_Digit(20,23) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert compute_Last_Digit(1021,1024) == 4<span class="pl-pds">&quot;</span></span>]}</td>
        </tr>
        <tr>
          <td id="L48" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="48"></td>
          <td id="LC48" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to set all odd bits of a given number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def odd_bit_set_number(n):<span class="pl-cce">\r\n</span>    count = 0;res = 0;temp = n<span class="pl-cce">\r\n</span>    while temp &gt; 0:<span class="pl-cce">\r\n</span>        if count % 2 == 0:<span class="pl-cce">\r\n</span>            res |= (1 &lt;&lt; count)<span class="pl-cce">\r\n</span>        count += 1<span class="pl-cce">\r\n</span>        temp &gt;&gt;= 1<span class="pl-cce">\r\n</span>    return (n | res)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">48</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert odd_bit_set_number(10) == 15<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert odd_bit_set_number(20) == 21<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert odd_bit_set_number(30) == 31<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L49" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="49"></td>
          <td id="LC49" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to extract every first or specified element from a given two-dimensional list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def specified_element(nums, N):<span class="pl-cce">\r\n</span>    result = [i[N] for i in nums]<span class="pl-cce">\r\n</span>    return result<span class="pl-cce">\r\n</span>    <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">49</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L50" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="50"></td>
          <td id="LC50" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the list with minimum length using lambda function.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def min_length_list(input_list):<span class="pl-cce">\r\n</span>    min_length = min(len(x) for x in input_list )  <span class="pl-cce">\r\n</span>    min_list = min(input_list, key = lambda i: len(i))<span class="pl-cce">\r\n</span>    return(min_length, min_list)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">50</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L51" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="51"></td>
          <td id="LC51" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to print check if the triangle is equilateral or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_equilateral(x,y,z):<span class="pl-cce">\r\n</span>  if x == y == z:<span class="pl-cce">\r\n\t</span>   return True<span class="pl-cce">\r\n</span>  else:<span class="pl-cce">\r\n</span>     return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">51</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_equilateral(6,8,12)==False <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_equilateral(6,6,12)==False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_equilateral(6,6,6)==True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L52" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="52"></td>
          <td id="LC52" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to caluclate area of a parallelogram.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def parallelogram_area(b,h):<span class="pl-cce">\r\n</span>  area=b*h<span class="pl-cce">\r\n</span>  return area<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">52</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert parallelogram_area(10,20)==200<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert parallelogram_area(15,20)==300<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert parallelogram_area(8,9)==72<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L53" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="53"></td>
          <td id="LC53" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether the first and last characters of a given string are equal or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_Equality(str):<span class="pl-cce">\r\n</span>  if (str[0] == str[-1]):  <span class="pl-cce">\r\n</span>    return (<span class="pl-cce">\&quot;</span>Equal<span class="pl-cce">\&quot;</span>) <span class="pl-cce">\r\n</span>  else:  <span class="pl-cce">\r\n</span>    return (<span class="pl-cce">\&quot;</span>Not Equal<span class="pl-cce">\&quot;</span>) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">53</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_Equality(<span class="pl-cce">\&quot;</span>abcda<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>Equal<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_Equality(<span class="pl-cce">\&quot;</span>ab<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>Not Equal<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_Equality(<span class="pl-cce">\&quot;</span>mad<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>Not Equal<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L54" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="54"></td>
          <td id="LC54" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to sort the given array by using counting sort.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def counting_sort(my_list):<span class="pl-cce">\r\n</span>    max_value = 0<span class="pl-cce">\r\n</span>    for i in range(len(my_list)):<span class="pl-cce">\r\n</span>        if my_list[i] &gt; max_value:<span class="pl-cce">\r\n</span>            max_value = my_list[i]<span class="pl-cce">\r\n</span>    buckets = [0] * (max_value + 1)<span class="pl-cce">\r\n</span>    for i in my_list:<span class="pl-cce">\r\n</span>        buckets[i] += 1<span class="pl-cce">\r\n</span>    i = 0<span class="pl-cce">\r\n</span>    for j in range(max_value + 1):<span class="pl-cce">\r\n</span>         for a in range(buckets[j]):<span class="pl-cce">\r\n</span>             my_list[i] = j<span class="pl-cce">\r\n</span>             i += 1<span class="pl-cce">\r\n</span>    return my_list<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">54</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L55" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="55"></td>
          <td id="LC55" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find t-nth term of geometric series.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math<span class="pl-cce">\r\n</span>def tn_gp(a,n,r):<span class="pl-cce">\r\n</span>  tn = a * (math.pow(r, n - 1))<span class="pl-cce">\r\n</span>  return tn<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">55</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert tn_gp(1,5,2)==16<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert tn_gp(1,5,4)==256<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert tn_gp(2,6,3)==486<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L56" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="56"></td>
          <td id="LC56" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check if a given number is one less than twice its reverse.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def rev(num):    <span class="pl-cce">\r\n</span>    rev_num = 0<span class="pl-cce">\r\n</span>    while (num &gt; 0):  <span class="pl-cce">\r\n</span>        rev_num = (rev_num * 10 + num % 10) <span class="pl-cce">\r\n</span>        num = num // 10  <span class="pl-cce">\r\n</span>    return rev_num  <span class="pl-cce">\r\n</span>def check(n):    <span class="pl-cce">\r\n</span>    return (2 * rev(n) == n + 1)  <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">56</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check(70) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check(23) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check(73) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L57" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="57"></td>
          <td id="LC57" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the largest number that can be formed with the given digits.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_Max_Num(arr,n) : <span class="pl-cce">\r\n</span>    arr.sort(reverse = True) <span class="pl-cce">\r\n</span>    num = arr[0] <span class="pl-cce">\r\n</span>    for i in range(1,n) : <span class="pl-cce">\r\n</span>        num = num * 10 + arr[i] <span class="pl-cce">\r\n</span>    return num <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">57</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Max_Num([1,2,3],3) == 321<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Max_Num([4,5,6,1],4) == 6541<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Max_Num([1,2,3,9],4) == 9321<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L58" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="58"></td>
          <td id="LC58" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether the given two integers have opposite sign or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def opposite_Signs(x,y): <span class="pl-cce">\r\n</span>    return ((x ^ y) &lt; 0); <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">58</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert opposite_Signs(1,-2) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert opposite_Signs(3,2) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert opposite_Signs(-10,-10) == False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L59" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="59"></td>
          <td id="LC59" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the nth octagonal number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def is_octagonal(n): <span class="pl-cce">\r\n\t</span>return 3 * n * n - 2 * n <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">59</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert is_octagonal(5) == 65<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_octagonal(10) == 280<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_octagonal(15) == 645<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L60" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="60"></td>
          <td id="LC60" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def max_len_sub( arr, n): <span class="pl-cce">\r\n\t</span>mls=[] <span class="pl-cce">\r\n\t</span>max = 0<span class="pl-cce">\r\n\t</span>for i in range(n): <span class="pl-cce">\r\n\t\t</span>mls.append(1) <span class="pl-cce">\r\n\t</span>for i in range(n): <span class="pl-cce">\r\n\t\t</span>for j in range(i): <span class="pl-cce">\r\n\t\t\t</span>if (abs(arr[i] - arr[j]) &lt;= 1 and mls[i] &lt; mls[j] + 1): <span class="pl-cce">\r\n\t\t\t\t</span>mls[i] = mls[j] + 1<span class="pl-cce">\r\n\t</span>for i in range(n): <span class="pl-cce">\r\n\t\t</span>if (max &lt; mls[i]): <span class="pl-cce">\r\n\t\t\t</span>max = mls[i] <span class="pl-cce">\r\n\t</span>return max<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">60</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_len_sub([9, 11, 13, 15, 18], 5) == 1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L61" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="61"></td>
          <td id="LC61" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count number of substrings with the sum of digits equal to their length.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from collections import defaultdict<span class="pl-cce">\r\n</span>def count_Substrings(s,n):<span class="pl-cce">\r\n</span>    count,sum = 0,0<span class="pl-cce">\r\n</span>    mp = defaultdict(lambda : 0)<span class="pl-cce">\r\n</span>    mp[0] += 1<span class="pl-cce">\r\n</span>    for i in range(n):<span class="pl-cce">\r\n</span>        sum += ord(s[i]) - ord(&#39;0&#39;)<span class="pl-cce">\r\n</span>        count += mp[sum - (i + 1)]<span class="pl-cce">\r\n</span>        mp[sum - (i + 1)] += 1<span class="pl-cce">\r\n</span>    return count<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">61</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Substrings(&#39;112112&#39;,6) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Substrings(&#39;111&#39;,3) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Substrings(&#39;1101112&#39;,7) == 12<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L62" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="62"></td>
          <td id="LC62" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find smallest number in a list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def smallest_num(xs):<span class="pl-cce">\n</span>  return min(xs)<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">62</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert smallest_num([10, 20, 1, 45, 99]) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert smallest_num([1, 2, 3]) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert smallest_num([45, 46, 50, 60]) == 45<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L63" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="63"></td>
          <td id="LC63" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the maximum difference between available pairs in the given tuple list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def max_difference(test_list):<span class="pl-cce">\r\n</span>  temp = [abs(b - a) for a, b in test_list]<span class="pl-cce">\r\n</span>  res = max(temp)<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">63</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L64" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="64"></td>
          <td id="LC64" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to sort a list of tuples using lambda.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def subject_marks(subjectmarks):<span class="pl-cce">\r\n</span>#subject_marks = [(&#39;English&#39;, 88), (&#39;Science&#39;, 90), (&#39;Maths&#39;, 97), (&#39;Social sciences&#39;, 82)])<span class="pl-cce">\r\n</span> subjectmarks.sort(key = lambda x: x[1])<span class="pl-cce">\r\n</span> return subjectmarks<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">64</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert subject_marks([(&#39;English&#39;, 88), (&#39;Science&#39;, 90), (&#39;Maths&#39;, 97), (&#39;Social sciences&#39;, 82)])==[(&#39;Social sciences&#39;, 82), (&#39;English&#39;, 88), (&#39;Science&#39;, 90), (&#39;Maths&#39;, 97)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert subject_marks([(&#39;Telugu&#39;,49),(&#39;Hindhi&#39;,54),(&#39;Social&#39;,33)])==([(&#39;Social&#39;,33),(&#39;Telugu&#39;,49),(&#39;Hindhi&#39;,54)])<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert subject_marks([(&#39;Physics&#39;,96),(&#39;Chemistry&#39;,97),(&#39;Biology&#39;,45)])==([(&#39;Biology&#39;,45),(&#39;Physics&#39;,96),(&#39;Chemistry&#39;,97)])<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L65" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="65"></td>
          <td id="LC65" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function of recursion list sum.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def recursive_list_sum(data_list):<span class="pl-cce">\r\n\t</span>total = 0<span class="pl-cce">\r\n\t</span>for element in data_list:<span class="pl-cce">\r\n\t\t</span>if type(element) == type([]):<span class="pl-cce">\r\n\t\t\t</span>total = total + recursive_list_sum(element)<span class="pl-cce">\r\n\t\t</span>else:<span class="pl-cce">\r\n\t\t\t</span>total = total + element<span class="pl-cce">\r\n\t</span>return total<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">65</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L66" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="66"></td>
          <td id="LC66" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count positive numbers in a list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def pos_count(list):<span class="pl-cce">\r\n</span>  pos_count= 0<span class="pl-cce">\r\n</span>  for num in list: <span class="pl-cce">\r\n</span>    if num &gt;= 0: <span class="pl-cce">\r\n</span>      pos_count += 1<span class="pl-cce">\r\n</span>  return pos_count <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">66</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert pos_count([1,-2,3,-4]) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert pos_count([3,4,5,-1]) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert pos_count([1,2,3,4]) == 4<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L67" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="67"></td>
          <td id="LC67" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the number of ways to partition a set of bell numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def bell_number(n):   <span class="pl-cce">\r\n</span>    bell = [[0 for i in range(n+1)] for j in range(n+1)] <span class="pl-cce">\r\n</span>    bell[0][0] = 1<span class="pl-cce">\r\n</span>    for i in range(1, n+1): <span class="pl-cce">\r\n</span>        bell[i][0] = bell[i-1][i-1]  <span class="pl-cce">\r\n</span>        for j in range(1, i+1): <span class="pl-cce">\r\n</span>            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   <span class="pl-cce">\r\n</span>    return bell[n][0] <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">67</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert bell_number(2)==2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert bell_number(10)==115975<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert bell_number(56)==6775685320645824322581483068371419745979053216268760300<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L68" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="68"></td>
          <td id="LC68" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether the given array is monotonic or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def is_Monotonic(A): <span class="pl-cce">\r\n</span>    return (all(A[i] &lt;= A[i + 1] for i in range(len(A) - 1)) or<span class="pl-cce">\r\n</span>            all(A[i] &gt;= A[i + 1] for i in range(len(A) - 1))) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">68</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert is_Monotonic([6, 5, 4, 4]) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_Monotonic([1, 2, 2, 3]) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_Monotonic([1, 3, 2]) == False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L69" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="69"></td>
          <td id="LC69" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check whether a list contains the given sublist or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def is_sublist(l, s):<span class="pl-cce">\r\n\t</span>sub_set = False<span class="pl-cce">\r\n\t</span>if s == []:<span class="pl-cce">\r\n\t\t</span>sub_set = True<span class="pl-cce">\r\n\t</span>elif s == l:<span class="pl-cce">\r\n\t\t</span>sub_set = True<span class="pl-cce">\r\n\t</span>elif len(s) &gt; len(l):<span class="pl-cce">\r\n\t\t</span>sub_set = False<span class="pl-cce">\r\n\t</span>else:<span class="pl-cce">\r\n\t\t</span>for i in range(len(l)):<span class="pl-cce">\r\n\t\t\t</span>if l[i] == s[0]:<span class="pl-cce">\r\n\t\t\t\t</span>n = 1<span class="pl-cce">\r\n\t\t\t\t</span>while (n &lt; len(s)) and (l[i+n] == s[n]):<span class="pl-cce">\r\n\t\t\t\t\t</span>n += 1<span class="pl-cce">\t\t\t\t\r\n\t\t\t\t</span>if n == len(s):<span class="pl-cce">\r\n\t\t\t\t\t</span>sub_set = True<span class="pl-cce">\r\n\t</span>return sub_set<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">69</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert is_sublist([2,4,3,5,7],[3,7])==False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_sublist([2,4,3,5,7],[4,3])==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_sublist([2,4,3,5,7],[1,6])==False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L70" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="70"></td>
          <td id="LC70" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find whether all the given tuples have equal length or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_equal_tuple(Input, k):<span class="pl-cce">\r\n</span>  flag = 1<span class="pl-cce">\r\n</span>  for tuple in Input:<span class="pl-cce">\r\n</span>    if len(tuple) != k:<span class="pl-cce">\r\n</span>      flag = 0<span class="pl-cce">\r\n</span>      break<span class="pl-cce">\r\n</span>  return flag<span class="pl-cce">\r\n</span>def get_equal(Input, k):<span class="pl-cce">\r\n</span>  if find_equal_tuple(Input, k) == 1:<span class="pl-cce">\r\n</span>    return (<span class="pl-cce">\&quot;</span>All tuples have same length<span class="pl-cce">\&quot;</span>)<span class="pl-cce">\r\n</span>  else:<span class="pl-cce">\r\n</span>    return (<span class="pl-cce">\&quot;</span>All tuples do not have same length<span class="pl-cce">\&quot;</span>)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">70</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == &#39;All tuples have same length&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == &#39;All tuples do not have same length&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_equal([(1, 2), (3, 4)], 2) == &#39;All tuples have same length&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L71" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="71"></td>
          <td id="LC71" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to sort a list of elements using comb sort.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def comb_sort(nums):<span class="pl-cce">\r\n</span>    shrink_fact = 1.3<span class="pl-cce">\r\n</span>    gaps = len(nums)<span class="pl-cce">\r\n</span>    swapped = True<span class="pl-cce">\r\n</span>    i = 0<span class="pl-cce">\r\n</span>    while gaps &gt; 1 or swapped:<span class="pl-cce">\r\n</span>        gaps = int(float(gaps) / shrink_fact)<span class="pl-cce">\r\n</span>        swapped = False<span class="pl-cce">\r\n</span>        i = 0<span class="pl-cce">\r\n</span>        while gaps + i &lt; len(nums):<span class="pl-cce">\r\n</span>            if nums[i] &gt; nums[i+gaps]:<span class="pl-cce">\r\n</span>                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]<span class="pl-cce">\r\n</span>                swapped = True<span class="pl-cce">\r\n</span>            i += 1<span class="pl-cce">\r\n</span>    return nums<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">71</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L72" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="72"></td>
          <td id="LC72" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether the given number can be represented as difference of two squares or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def dif_Square(n): <span class="pl-cce">\r\n</span>    if (n % 4 != 2): <span class="pl-cce">\r\n</span>        return True<span class="pl-cce">\r\n</span>    return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">72</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert dif_Square(5) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert dif_Square(10) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert dif_Square(15) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L73" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="73"></td>
          <td id="LC73" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to split the given string with multiple delimiters by using regex.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def multiple_split(text):<span class="pl-cce">\r\n</span>  return (re.split(&#39;; |, |<span class="pl-cce">\\</span>*|<span class="pl-cce">\\</span>n&#39;,text))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">73</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert multiple_split(&#39;Forces of the <span class="pl-cce">\\</span>ndarkness*are coming into the play.&#39;) == [&#39;Forces of the &#39;, &#39;darkness&#39;, &#39;are coming into the play.&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert multiple_split(&#39;Mi Box runs on the <span class="pl-cce">\\</span>n Latest android*which has google assistance and chromecast.&#39;) == [&#39;Mi Box runs on the &#39;, &#39; Latest android&#39;, &#39;which has google assistance and chromecast.&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert multiple_split(&#39;Certain services<span class="pl-cce">\\</span>nare subjected to change*over the seperate subscriptions.&#39;) == [&#39;Certain services&#39;, &#39;are subjected to change&#39;, &#39;over the seperate subscriptions.&#39;]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L74" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="74"></td>
          <td id="LC74" class="blob-code blob-code-inner js-file-line">{&quot;text&quot;: &quot;Write a function to check whether it follows the sequence given in the patterns array.&quot;, &quot;code&quot;: &quot;def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True&quot;, &quot;task_id&quot;: 74, &quot;test_setup_code&quot;: &quot;&quot;, &quot;test_list&quot;: [&quot;assert is_samepatterns([\&quot;red\&quot;,\&quot;green\&quot;,\&quot;green\&quot;], [\&quot;a\&quot;, \&quot;b\&quot;, \&quot;b\&quot;])==True &quot;, &quot;assert is_samepatterns([\&quot;red\&quot;,\&quot;green\&quot;,\&quot;greenn\&quot;], [\&quot;a\&quot;,\&quot;b\&quot;,\&quot;b\&quot;])==False &quot;, &quot;assert is_samepatterns([\&quot;red\&quot;,\&quot;green\&quot;,\&quot;greenn\&quot;], [\&quot;a\&quot;,\&quot;b\&quot;])==False &quot;], &quot;challenge_test_list&quot;: []}</td>
        </tr>
        <tr>
          <td id="L75" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="75"></td>
          <td id="LC75" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find tuples which have all elements divisible by k from the given list of tuples.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_tuples(test_list, K):<span class="pl-cce">\r\n</span>  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]<span class="pl-cce">\r\n</span>  return (str(res)) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">75</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == &#39;[(6, 24, 12)]&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == &#39;[(5, 25, 30)]&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == &#39;[(8, 16, 4)]&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L76" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="76"></td>
          <td id="LC76" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count the number of squares in a rectangle.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_Squares(m,n):<span class="pl-cce">\r\n</span>    if(n &lt; m):<span class="pl-cce">\r\n</span>        temp = m<span class="pl-cce">\r\n</span>        m = n<span class="pl-cce">\r\n</span>        n = temp<span class="pl-cce">\r\n</span>    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">76</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Squares(4,3) == 20<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Squares(2,2) == 5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Squares(1,1) == 1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L77" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="77"></td>
          <td id="LC77" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the difference between sum of even and odd digits.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def is_Diff(n): <span class="pl-cce">\r\n</span>    return (n % 11 == 0) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">77</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert is_Diff (12345) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_Diff(1212112) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_Diff(1212) == False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L78" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="78"></td>
          <td id="LC78" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find number of integers with odd number of set bits.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_With_Odd_SetBits(n): <span class="pl-cce">\r\n</span>    if (n % 2 != 0): <span class="pl-cce">\r\n</span>        return (n + 1) / 2<span class="pl-cce">\r\n</span>    count = bin(n).count(&#39;1&#39;) <span class="pl-cce">\r\n</span>    ans = n / 2<span class="pl-cce">\r\n</span>    if (count % 2 != 0): <span class="pl-cce">\r\n</span>        ans += 1<span class="pl-cce">\r\n</span>    return ans <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">78</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_With_Odd_SetBits(5) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_With_Odd_SetBits(10) == 5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_With_Odd_SetBits(15) == 8<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L79" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="79"></td>
          <td id="LC79" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether the length of the word is odd or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def word_len(s): <span class="pl-cce">\r\n</span>    s = s.split(&#39; &#39;)   <span class="pl-cce">\r\n</span>    for word in s:    <span class="pl-cce">\r\n</span>        if len(word)%2!=0: <span class="pl-cce">\r\n</span>            return True  <span class="pl-cce">\r\n</span>        else:<span class="pl-cce">\r\n</span>          return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">79</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert word_len(<span class="pl-cce">\&quot;</span>Hadoop<span class="pl-cce">\&quot;</span>) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert word_len(<span class="pl-cce">\&quot;</span>great<span class="pl-cce">\&quot;</span>) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert word_len(<span class="pl-cce">\&quot;</span>structure<span class="pl-cce">\&quot;</span>) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L80" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="80"></td>
          <td id="LC80" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the nth tetrahedral number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def tetrahedral_number(n): <span class="pl-cce">\r\n\t</span>return (n * (n + 1) * (n + 2)) / 6<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">80</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert tetrahedral_number(5) == 35.0<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert tetrahedral_number(6) == 56.0<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert tetrahedral_number(7) == 84.0<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L81" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="81"></td>
          <td id="LC81" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to zip the two given tuples.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def zip_tuples(test_tup1, test_tup2):<span class="pl-cce">\r\n</span>  res = []<span class="pl-cce">\r\n</span>  for i, j in enumerate(test_tup1):<span class="pl-cce">\r\n</span>    res.append((j, test_tup2[i % len(test_tup2)])) <span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">81</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L82" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="82"></td>
          <td id="LC82" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the volume of a sphere.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math<span class="pl-cce">\r\n</span>def volume_sphere(r):<span class="pl-cce">\r\n</span>  volume=(4/3)*math.pi*r*r*r<span class="pl-cce">\r\n</span>  return volume<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">82</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert volume_sphere(10)==4188.790204786391<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert volume_sphere(25)==65449.84694978735<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert volume_sphere(20)==33510.32163829113<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L83" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="83"></td>
          <td id="LC83" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the character made by adding all the characters of the given string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def get_Char(strr):  <span class="pl-cce">\r\n</span>    summ = 0<span class="pl-cce">\r\n</span>    for i in range(len(strr)): <span class="pl-cce">\r\n</span>        summ += (ord(strr[i]) - ord(&#39;a&#39;) + 1)  <span class="pl-cce">\r\n</span>    if (summ % 26 == 0): <span class="pl-cce">\r\n</span>        return ord(&#39;z&#39;) <span class="pl-cce">\r\n</span>    else: <span class="pl-cce">\r\n</span>        summ = summ % 26<span class="pl-cce">\r\n</span>        return chr(ord(&#39;a&#39;) + summ - 1)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">83</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert get_Char(<span class="pl-cce">\&quot;</span>abc<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>f<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_Char(<span class="pl-cce">\&quot;</span>gfg<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>t<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_Char(<span class="pl-cce">\&quot;</span>ab<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>c<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L84" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="84"></td>
          <td id="LC84" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the n-th number in newman conway sequence.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sequence(n): <span class="pl-cce">\r\n\t</span>if n == 1 or n == 2: <span class="pl-cce">\r\n\t\t</span>return 1<span class="pl-cce">\r\n\t</span>else: <span class="pl-cce">\r\n\t\t</span>return sequence(sequence(n-1)) + sequence(n-sequence(n-1))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">84</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sequence(10) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sequence(2) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sequence(3) == 2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L85" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="85"></td>
          <td id="LC85" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the surface area of a sphere.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math<span class="pl-cce">\r\n</span>def surfacearea_sphere(r):<span class="pl-cce">\r\n</span>  surfacearea=4*math.pi*r*r<span class="pl-cce">\r\n</span>  return surfacearea<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">85</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert surfacearea_sphere(10)==1256.6370614359173<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert surfacearea_sphere(15)==2827.4333882308138<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert surfacearea_sphere(20)==5026.548245743669<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L86" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="86"></td>
          <td id="LC86" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find nth centered hexagonal number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def centered_hexagonal_number(n):<span class="pl-cce">\r\n</span>  return 3 * n * (n - 1) + 1<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">86</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert centered_hexagonal_number(10) == 271<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert centered_hexagonal_number(2) == 7<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert centered_hexagonal_number(9) == 217<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L87" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="87"></td>
          <td id="LC87" class="blob-code blob-code-inner js-file-line">{&quot;text&quot;: &quot;Write a function to merge three dictionaries into a single expression.&quot;, &quot;code&quot;: &quot;import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict&quot;, &quot;task_id&quot;: 87, &quot;test_setup_code&quot;: &quot;&quot;, &quot;test_list&quot;: [&quot;assert merge_dictionaries_three({ \&quot;R\&quot;: \&quot;Red\&quot;, \&quot;B\&quot;: \&quot;Black\&quot;, \&quot;P\&quot;: \&quot;Pink\&quot; }, { \&quot;G\&quot;: \&quot;Green\&quot;, \&quot;W\&quot;: \&quot;White\&quot; },{ \&quot;O\&quot;: \&quot;Orange\&quot;, \&quot;W\&quot;: \&quot;White\&quot;, \&quot;B\&quot;: \&quot;Black\&quot; })=={&#39;B&#39;: &#39;Black&#39;, &#39;R&#39;: &#39;Red&#39;, &#39;P&#39;: &#39;Pink&#39;, &#39;G&#39;: &#39;Green&#39;, &#39;W&#39;: &#39;White&#39;, &#39;O&#39;: &#39;Orange&#39;}&quot;, &quot;assert merge_dictionaries_three({ \&quot;R\&quot;: \&quot;Red\&quot;, \&quot;B\&quot;: \&quot;Black\&quot;, \&quot;P\&quot;: \&quot;Pink\&quot; }, { \&quot;G\&quot;: \&quot;Green\&quot;, \&quot;W\&quot;: \&quot;White\&quot; },{\&quot;L\&quot;:\&quot;lavender\&quot;,\&quot;B\&quot;:\&quot;Blue\&quot;})=={&#39;W&#39;: &#39;White&#39;, &#39;P&#39;: &#39;Pink&#39;, &#39;B&#39;: &#39;Black&#39;, &#39;R&#39;: &#39;Red&#39;, &#39;G&#39;: &#39;Green&#39;, &#39;L&#39;: &#39;lavender&#39;}&quot;, &quot;assert merge_dictionaries_three({ \&quot;R\&quot;: \&quot;Red\&quot;, \&quot;B\&quot;: \&quot;Black\&quot;, \&quot;P\&quot;: \&quot;Pink\&quot; },{\&quot;L\&quot;:\&quot;lavender\&quot;,\&quot;B\&quot;:\&quot;Blue\&quot;},{ \&quot;G\&quot;: \&quot;Green\&quot;, \&quot;W\&quot;: \&quot;White\&quot; })=={&#39;B&#39;: &#39;Black&#39;, &#39;P&#39;: &#39;Pink&#39;, &#39;R&#39;: &#39;Red&#39;, &#39;G&#39;: &#39;Green&#39;, &#39;L&#39;: &#39;lavender&#39;, &#39;W&#39;: &#39;White&#39;}&quot;], &quot;challenge_test_list&quot;: []}</td>
        </tr>
        <tr>
          <td id="L88" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="88"></td>
          <td id="LC88" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to get the frequency of the elements in a list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import collections<span class="pl-cce">\r\n</span>def freq_count(list1):<span class="pl-cce">\r\n</span>  freq_count= collections.Counter(list1)<span class="pl-cce">\r\n</span>  return freq_count<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">88</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) <span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L89" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="89"></td>
          <td id="LC89" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the closest smaller number than n.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def closest_num(N):<span class="pl-cce">\r\n</span>  return (N - 1)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">89</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert closest_num(11) == 10<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert closest_num(7) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert closest_num(12) == 11<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L90" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="90"></td>
          <td id="LC90" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the length of the longest word.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def len_log(list1):<span class="pl-cce">\r\n</span>    max=len(list1[0])<span class="pl-cce">\r\n</span>    for i in list1:<span class="pl-cce">\r\n</span>        if len(i)&gt;max:<span class="pl-cce">\r\n</span>            max=len(i)<span class="pl-cce">\r\n</span>    return max<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">90</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert len_log([<span class="pl-cce">\&quot;</span>python<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>PHP<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>bigdata<span class="pl-cce">\&quot;</span>]) == 7<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert len_log([<span class="pl-cce">\&quot;</span>a<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>ab<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>abc<span class="pl-cce">\&quot;</span>]) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert len_log([<span class="pl-cce">\&quot;</span>small<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>big<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>tall<span class="pl-cce">\&quot;</span>]) == 5<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L91" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="91"></td>
          <td id="LC91" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check if a substring is present in a given list of string values.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_substring(str1, sub_str):<span class="pl-cce">\r\n</span>   if any(sub_str in s for s in str1):<span class="pl-cce">\r\n</span>       return True<span class="pl-cce">\r\n</span>   return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">91</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_substring([<span class="pl-cce">\&quot;</span>red<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>black<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>white<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>green<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>orange<span class="pl-cce">\&quot;</span>],<span class="pl-cce">\&quot;</span>ack<span class="pl-cce">\&quot;</span>)==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_substring([<span class="pl-cce">\&quot;</span>red<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>black<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>white<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>green<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>orange<span class="pl-cce">\&quot;</span>],<span class="pl-cce">\&quot;</span>abc<span class="pl-cce">\&quot;</span>)==False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_substring([<span class="pl-cce">\&quot;</span>red<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>black<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>white<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>green<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>orange<span class="pl-cce">\&quot;</span>],<span class="pl-cce">\&quot;</span>ange<span class="pl-cce">\&quot;</span>)==True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L92" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="92"></td>
          <td id="LC92" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check whether the given number is undulating or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def is_undulating(n): <span class="pl-cce">\r\n\t</span>if (len(n) &lt;= 2): <span class="pl-cce">\r\n\t\t</span>return False<span class="pl-cce">\r\n\t</span>for i in range(2, len(n)): <span class="pl-cce">\r\n\t\t</span>if (n[i - 2] != n[i]): <span class="pl-cce">\r\n\t\t\t</span>return False<span class="pl-cce">\r\n\t</span>return True<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">92</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert is_undulating(<span class="pl-cce">\&quot;</span>1212121<span class="pl-cce">\&quot;</span>) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_undulating(<span class="pl-cce">\&quot;</span>1991<span class="pl-cce">\&quot;</span>) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_undulating(<span class="pl-cce">\&quot;</span>121<span class="pl-cce">\&quot;</span>) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L93" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="93"></td>
          <td id="LC93" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to calculate the value of &#39;a&#39; to the power &#39;b&#39;.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def power(a,b):<span class="pl-cce">\r\n\t</span>if b==0:<span class="pl-cce">\r\n\t\t</span>return 1<span class="pl-cce">\r\n\t</span>elif a==0:<span class="pl-cce">\r\n\t\t</span>return 0<span class="pl-cce">\r\n\t</span>elif b==1:<span class="pl-cce">\r\n\t\t</span>return a<span class="pl-cce">\r\n\t</span>else:<span class="pl-cce">\r\n\t\t</span>return a*power(a,b-1)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">93</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert power(3,4) == 81<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert power(2,3) == 8<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert power(5,5) == 3125<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L94" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="94"></td>
          <td id="LC94" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to extract the index minimum value record from the given tuples.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from operator import itemgetter <span class="pl-cce">\r\n</span>def index_minimum(test_list):<span class="pl-cce">\r\n</span>  res = min(test_list, key = itemgetter(1))[0]<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">94</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert index_minimum([(&#39;Rash&#39;, 143), (&#39;Manjeet&#39;, 200), (&#39;Varsha&#39;, 100)]) == &#39;Varsha&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert index_minimum([(&#39;Yash&#39;, 185), (&#39;Dawood&#39;, 125), (&#39;Sanya&#39;, 175)]) == &#39;Dawood&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert index_minimum([(&#39;Sai&#39;, 345), (&#39;Salman&#39;, 145), (&#39;Ayesha&#39;, 96)]) == &#39;Ayesha&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L95" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="95"></td>
          <td id="LC95" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the minimum length of sublist.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def Find_Min_Length(lst):  <span class="pl-cce">\r\n</span>    minLength = min(len(x) for x in lst )<span class="pl-cce">\r\n</span>    return minLength <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">95</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert Find_Min_Length([[1],[1,2]]) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L96" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="96"></td>
          <td id="LC96" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the number of divisors of a given integer.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def divisor(n):<span class="pl-cce">\r\n</span>  for i in range(n):<span class="pl-cce">\r\n</span>    x = len([i for i in range(1,n+1) if not n % i])<span class="pl-cce">\r\n</span>  return x<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">96</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert divisor(15) == 4 <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert divisor(12) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert divisor(9) == 3<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L97" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="97"></td>
          <td id="LC97" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find frequency count of list of lists.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def frequency_lists(list1):<span class="pl-cce">\r\n</span>    list1 = [item for sublist in list1 for item in sublist]<span class="pl-cce">\r\n</span>    dic_data = {}<span class="pl-cce">\r\n</span>    for num in list1:<span class="pl-cce">\r\n</span>        if num in dic_data.keys():<span class="pl-cce">\r\n</span>            dic_data[num] += 1<span class="pl-cce">\r\n</span>        else:<span class="pl-cce">\r\n</span>            key = num<span class="pl-cce">\r\n</span>            value = 1<span class="pl-cce">\r\n</span>            dic_data[key] = value<span class="pl-cce">\r\n</span>    return dic_data<span class="pl-cce">\r\n</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">97</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L98" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="98"></td>
          <td id="LC98" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to multiply all the numbers in a list and divide with the length of the list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def multiply_num(numbers):  <span class="pl-cce">\r\n</span>    total = 1<span class="pl-cce">\r\n</span>    for x in numbers:<span class="pl-cce">\r\n</span>        total *= x  <span class="pl-cce">\r\n</span>    return total/len(numbers) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">98</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert multiply_num((8, 2, 3, -1, 7))==-67.2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert multiply_num((-10,-20,-30))==-2000.0<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert multiply_num((19,15,18))==1710.0<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L99" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="99"></td>
          <td id="LC99" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to convert the given decimal number to its binary equivalent.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def decimal_to_binary(n): <span class="pl-cce">\r\n</span>    return bin(n).replace(<span class="pl-cce">\&quot;</span>0b<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;\&quot;</span>) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">99</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert decimal_to_binary(8) == &#39;1000&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert decimal_to_binary(18) == &#39;10010&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert decimal_to_binary(7) == &#39;111&#39; <span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L100" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="100"></td>
          <td id="LC100" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the next smallest palindrome of a specified number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import sys<span class="pl-cce">\r\n</span>def next_smallest_palindrome(num):<span class="pl-cce">\r\n</span>    numstr = str(num)<span class="pl-cce">\r\n</span>    for i in range(num+1,sys.maxsize):<span class="pl-cce">\r\n</span>        if str(i) == str(i)[::-1]:<span class="pl-cce">\r\n</span>            return i<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">100</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert next_smallest_palindrome(99)==101<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert next_smallest_palindrome(1221)==1331<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert next_smallest_palindrome(120)==121<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L101" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="101"></td>
          <td id="LC101" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the kth element in the given array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def kth_element(arr, n, k):<span class="pl-cce">\r\n</span>  for i in range(n):<span class="pl-cce">\r\n</span>    for j in range(0, n-i-1):<span class="pl-cce">\r\n</span>      if arr[j] &gt; arr[j+1]:<span class="pl-cce">\r\n</span>        arr[j], arr[j+1] == arr[j+1], arr[j]<span class="pl-cce">\r\n</span>  return arr[k-1]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">101</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert kth_element([12,3,5,7,19], 5, 2) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert kth_element([17,24,8,23], 4, 3) == 8<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert kth_element([16,21,25,36,4], 5, 4) == 36<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L102" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="102"></td>
          <td id="LC102" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to convert snake case string to camel case string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def snake_to_camel(word):<span class="pl-cce">\r\n</span>        import re<span class="pl-cce">\r\n</span>        return &#39;&#39;.join(x.capitalize() or &#39;_&#39; for x in word.split(&#39;_&#39;))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">102</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert snake_to_camel(&#39;python_program&#39;)==&#39;PythonProgram&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert snake_to_camel(&#39;python_language&#39;)==(&#39;PythonLanguage&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert snake_to_camel(&#39;programming_language&#39;)==(&#39;ProgrammingLanguage&#39;)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L103" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="103"></td>
          <td id="LC103" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find eulerian number a(n, m).<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def eulerian_num(n, m): <span class="pl-cce">\r\n\t</span>if (m &gt;= n or n == 0): <span class="pl-cce">\r\n\t\t</span>return 0 <span class="pl-cce">\r\n\t</span>if (m == 0): <span class="pl-cce">\r\n\t\t</span>return 1 <span class="pl-cce">\r\n\t</span>return ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">103</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert eulerian_num(3, 1) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert eulerian_num(4, 1) == 11<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert eulerian_num(5, 3) == 26<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L104" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="104"></td>
          <td id="LC104" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to sort each sublist of strings in a given list of lists using lambda function.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sort_sublists(input_list):<span class="pl-cce">\r\n</span>    result = [sorted(x, key = lambda x:x[0]) for x in input_list] <span class="pl-cce">\r\n</span>    return result<span class="pl-cce">\r</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">104</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_sublists(([<span class="pl-cce">\&quot;</span>green<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>orange<span class="pl-cce">\&quot;</span>], [<span class="pl-cce">\&quot;</span>black<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>white<span class="pl-cce">\&quot;</span>], [<span class="pl-cce">\&quot;</span>white<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>black<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>orange<span class="pl-cce">\&quot;</span>]))==[[&#39;green&#39;, &#39;orange&#39;], [&#39;black&#39;, &#39;white&#39;], [&#39;black&#39;, &#39;orange&#39;, &#39;white&#39;]]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_sublists(([<span class="pl-cce">\&quot;</span> red <span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>green<span class="pl-cce">\&quot;</span> ],[<span class="pl-cce">\&quot;</span>blue <span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span> black<span class="pl-cce">\&quot;</span>],[<span class="pl-cce">\&quot;</span> orange<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>brown<span class="pl-cce">\&quot;</span>]))==[[&#39; red &#39;, &#39;green&#39;], [&#39; black&#39;, &#39;blue &#39;], [&#39; orange&#39;, &#39;brown&#39;]]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_sublists(([<span class="pl-cce">\&quot;</span>zilver<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>gold<span class="pl-cce">\&quot;</span>], [<span class="pl-cce">\&quot;</span>magnesium<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>aluminium<span class="pl-cce">\&quot;</span>], [<span class="pl-cce">\&quot;</span>steel<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>bronze<span class="pl-cce">\&quot;</span>]))==[[&#39;gold&#39;, &#39;zilver&#39;],[&#39;aluminium&#39;, &#39;magnesium&#39;], [&#39;bronze&#39;, &#39;steel&#39;]]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L105" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="105"></td>
          <td id="LC105" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count true booleans in the given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count(lst):   <span class="pl-cce">\r\n</span>    return sum(lst) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">105</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count([True,False,True]) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count([False,False]) == 0<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count([True,True,True]) == 3<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L106" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="106"></td>
          <td id="LC106" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to add the given list to the given tuples.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def add_lists(test_list, test_tup):<span class="pl-cce">\r\n</span>  res = tuple(list(test_tup) + test_list)<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">106</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L107" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="107"></td>
          <td id="LC107" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count hexadecimal numbers for a given range.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_Hexadecimal(L,R) :  <span class="pl-cce">\r\n</span>    count = 0;  <span class="pl-cce">\r\n</span>    for i in range(L,R + 1) : <span class="pl-cce">\r\n</span>        if (i &gt;= 10 and i &lt;= 15) : <span class="pl-cce">\r\n</span>            count += 1;  <span class="pl-cce">\r\n</span>        elif (i &gt; 15) : <span class="pl-cce">\r\n</span>            k = i;  <span class="pl-cce">\r\n</span>            while (k != 0) :  <span class="pl-cce">\r\n</span>                if (k % 16 &gt;= 10) : <span class="pl-cce">\r\n</span>                    count += 1;  <span class="pl-cce">\r\n</span>                k = k // 16;  <span class="pl-cce">\r\n</span>    return count;  <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">107</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Hexadecimal(10,15) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Hexadecimal(2,4) == 0<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Hexadecimal(15,16) == 1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L108" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="108"></td>
          <td id="LC108" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import heapq<span class="pl-cce">\r\n</span>def merge_sorted_list(num1,num2,num3):<span class="pl-cce">\r\n</span>  num1=sorted(num1)<span class="pl-cce">\r\n</span>  num2=sorted(num2)<span class="pl-cce">\r\n</span>  num3=sorted(num3)<span class="pl-cce">\r\n</span>  result = heapq.merge(num1,num2,num3)<span class="pl-cce">\r\n</span>  return list(result)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">108</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L109" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="109"></td>
          <td id="LC109" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the count of rotations of a binary string with odd value.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def odd_Equivalent(s,n): <span class="pl-cce">\r\n</span>    count=0<span class="pl-cce">\r\n</span>    for i in range(0,n): <span class="pl-cce">\r\n</span>        if (s[i] == &#39;1&#39;): <span class="pl-cce">\r\n</span>            count = count + 1<span class="pl-cce">\r\n</span>    return count <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">109</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert odd_Equivalent(<span class="pl-cce">\&quot;</span>011001<span class="pl-cce">\&quot;</span>,6) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert odd_Equivalent(<span class="pl-cce">\&quot;</span>11011<span class="pl-cce">\&quot;</span>,5) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert odd_Equivalent(<span class="pl-cce">\&quot;</span>1010<span class="pl-cce">\&quot;</span>,4) == 2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L110" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="110"></td>
          <td id="LC110" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to extract the ranges that are missing from the given list with the given start range and end range values.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def extract_missing(test_list, strt_val, stop_val):<span class="pl-cce">\r\n</span>  res = []<span class="pl-cce">\r\n</span>  for sub in test_list:<span class="pl-cce">\r\n</span>    if sub[0] &gt; strt_val:<span class="pl-cce">\r\n</span>      res.append((strt_val, sub[0]))<span class="pl-cce">\r\n</span>      strt_val = sub[1]<span class="pl-cce">\r\n</span>    if strt_val &lt; stop_val:<span class="pl-cce">\r\n</span>      res.append((strt_val, stop_val))<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">110</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L111" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="111"></td>
          <td id="LC111" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find common elements in given nested lists. * list item * list item * list item * list item<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def common_in_nested_lists(nestedlist):<span class="pl-cce">\r\n</span>    result = list(set.intersection(*map(set, nestedlist)))<span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">111</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L112" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="112"></td>
          <td id="LC112" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the perimeter of a cylinder.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def perimeter(diameter,height) : <span class="pl-cce">\r\n</span>    return 2*(diameter+height)  <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">112</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert perimeter(2,4) == 12<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert perimeter(1,2) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert perimeter(3,1) == 8<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L113" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="113"></td>
          <td id="LC113" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check if a string represents an integer or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_integer(text):<span class="pl-cce">\r\n</span> text = text.strip()<span class="pl-cce">\r\n</span> if len(text) &lt; 1:<span class="pl-cce">\r\n</span>    return None<span class="pl-cce">\r\n</span> else:<span class="pl-cce">\r\n</span>     if all(text[i] in <span class="pl-cce">\&quot;</span>0123456789<span class="pl-cce">\&quot;</span> for i in range(len(text))):<span class="pl-cce">\r\n</span>          return True<span class="pl-cce">\r\n</span>     elif (text[0] in <span class="pl-cce">\&quot;</span>+-<span class="pl-cce">\&quot;</span>) and <span class="pl-cce">\\\r\n</span>         all(text[i] in <span class="pl-cce">\&quot;</span>0123456789<span class="pl-cce">\&quot;</span> for i in range(1,len(text))):<span class="pl-cce">\r\n</span>         return True<span class="pl-cce">\r\n</span>     else:<span class="pl-cce">\r\n</span>        return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">113</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_integer(<span class="pl-cce">\&quot;</span>python<span class="pl-cce">\&quot;</span>)==False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_integer(<span class="pl-cce">\&quot;</span>1<span class="pl-cce">\&quot;</span>)==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_integer(<span class="pl-cce">\&quot;</span>12345<span class="pl-cce">\&quot;</span>)==True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L114" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="114"></td>
          <td id="LC114" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to assign frequency to each tuple in the given tuple list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from collections import Counter <span class="pl-cce">\r\n</span>def assign_freq(test_list):<span class="pl-cce">\r\n</span>  res = [(*key, val) for key, val in Counter(test_list).items()]<span class="pl-cce">\r\n</span>  return (str(res)) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">114</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == &#39;[(6, 5, 8, 3), (2, 7, 2), (9, 1)]&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == &#39;[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == &#39;[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L115" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="115"></td>
          <td id="LC115" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check whether all dictionaries in a list are empty or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def empty_dit(list1):<span class="pl-cce">\r\n</span> empty_dit=all(not d for d in list1)<span class="pl-cce">\r\n</span> return empty_dit<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">115</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert empty_dit([{},{},{}])==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert empty_dit([{1,2},{},{}])==False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert empty_dit({})==True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L116" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="116"></td>
          <td id="LC116" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to convert a given tuple of positive integers into an integer.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def tuple_to_int(nums):<span class="pl-cce">\r\n</span>    result = int(&#39;&#39;.join(map(str,nums)))<span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">116</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert tuple_to_int((1,2,3))==123<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert tuple_to_int((4,5,6))==456<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert tuple_to_int((5,6,7))==567<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L117" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="117"></td>
          <td id="LC117" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to convert all possible convertible elements in the list to float.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def list_to_float(test_list):<span class="pl-cce">\r\n</span>  res = []<span class="pl-cce">\r\n</span>  for tup in test_list:<span class="pl-cce">\r\n</span>    temp = []<span class="pl-cce">\r\n</span>    for ele in tup:<span class="pl-cce">\r\n</span>      if ele.isalpha():<span class="pl-cce">\r\n</span>        temp.append(ele)<span class="pl-cce">\r\n</span>      else:<span class="pl-cce">\r\n</span>        temp.append(float(ele))<span class="pl-cce">\r\n</span>    res.append((temp[0],temp[1])) <span class="pl-cce">\r\n</span>  return (str(res)) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">117</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert list_to_float( [(<span class="pl-cce">\&quot;</span>3<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>4<span class="pl-cce">\&quot;</span>), (<span class="pl-cce">\&quot;</span>1<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>26.45<span class="pl-cce">\&quot;</span>), (<span class="pl-cce">\&quot;</span>7.32<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>8<span class="pl-cce">\&quot;</span>), (<span class="pl-cce">\&quot;</span>4<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>8<span class="pl-cce">\&quot;</span>)] ) == &#39;[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert list_to_float( [(<span class="pl-cce">\&quot;</span>4<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>4<span class="pl-cce">\&quot;</span>), (<span class="pl-cce">\&quot;</span>2<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>27<span class="pl-cce">\&quot;</span>), (<span class="pl-cce">\&quot;</span>4.12<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>9<span class="pl-cce">\&quot;</span>), (<span class="pl-cce">\&quot;</span>7<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>11<span class="pl-cce">\&quot;</span>)] ) == &#39;[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert list_to_float( [(<span class="pl-cce">\&quot;</span>6<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>78<span class="pl-cce">\&quot;</span>), (<span class="pl-cce">\&quot;</span>5<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>26.45<span class="pl-cce">\&quot;</span>), (<span class="pl-cce">\&quot;</span>1.33<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>4<span class="pl-cce">\&quot;</span>), (<span class="pl-cce">\&quot;</span>82<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>13<span class="pl-cce">\&quot;</span>)] ) == &#39;[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L118" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="118"></td>
          <td id="LC118" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def string_to_list(string): <span class="pl-cce">\r\n</span>    lst = list(string.split(<span class="pl-cce">\&quot;</span> <span class="pl-cce">\&quot;</span>)) <span class="pl-cce">\r\n</span>    return lst<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">118</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert string_to_list(<span class="pl-cce">\&quot;</span>python programming<span class="pl-cce">\&quot;</span>)==[&#39;python&#39;,&#39;programming&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert string_to_list(<span class="pl-cce">\&quot;</span>lists tuples strings<span class="pl-cce">\&quot;</span>)==[&#39;lists&#39;,&#39;tuples&#39;,&#39;strings&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert string_to_list(<span class="pl-cce">\&quot;</span>write a program<span class="pl-cce">\&quot;</span>)==[&#39;write&#39;,&#39;a&#39;,&#39;program&#39;]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L119" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="119"></td>
          <td id="LC119" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the element that appears only once in a sorted array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def search(arr,n) :<span class="pl-cce">\r\n</span>    XOR = 0<span class="pl-cce">\r\n</span>    for i in range(n) :<span class="pl-cce">\r\n</span>        XOR = XOR ^ arr[i]<span class="pl-cce">\r\n</span>    return (XOR)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">119</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert search([1,1,2,2,3],5) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert search([1,2,2,3,3,4,4],7) == 1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L120" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="120"></td>
          <td id="LC120" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the maximum product from the pairs of tuples within a given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def max_product_tuple(list1):<span class="pl-cce">\r\n</span>    result_max = max([abs(x * y) for x, y in list1] )<span class="pl-cce">\r\n</span>    return result_max<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">120</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_product_tuple([(10,20), (15,2), (5,10)] )==200<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L121" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="121"></td>
          <td id="LC121" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the triplet with sum of the given array<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_triplet(A, n, sum, count):<span class="pl-cce">\r\n</span>    if count == 3 and sum == 0:<span class="pl-cce">\r\n</span>        return True<span class="pl-cce">\r\n</span>    if count == 3 or n == 0 or sum &lt; 0:<span class="pl-cce">\r\n</span>        return False<span class="pl-cce">\r\n</span>    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or<span class="pl-cce">\\\r\n</span>           check_triplet(A, n - 1, sum, count)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">121</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L122" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="122"></td>
          <td id="LC122" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find n<span class="pl-cce">\u2019</span>th smart number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>MAX = 3000 <span class="pl-cce">\r\n</span>def smartNumber(n): <span class="pl-cce">\r\n\t</span>primes = [0] * MAX <span class="pl-cce">\r\n\t</span>result = [] <span class="pl-cce">\r\n\t</span>for i in range(2, MAX): <span class="pl-cce">\r\n\t\t</span>if (primes[i] == 0): <span class="pl-cce">\r\n\t\t\t</span>primes[i] = 1 <span class="pl-cce">\r\n\t\t\t</span>j = i * 2 <span class="pl-cce">\r\n\t\t\t</span>while (j &lt; MAX): <span class="pl-cce">\r\n\t\t\t\t</span>primes[j] -= 1 <span class="pl-cce">\r\n\t\t\t\t</span>if ( (primes[j] + 3) == 0): <span class="pl-cce">\r\n\t\t\t\t\t</span>result.append(j) <span class="pl-cce">\r\n\t\t\t\t</span>j = j + i <span class="pl-cce">\r\n\t</span>result.sort() <span class="pl-cce">\r\n\t</span>return result[n - 1] <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">122</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert smartNumber(1) == 30<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert smartNumber(50) == 273<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert smartNumber(1000) == 2664<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L123" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="123"></td>
          <td id="LC123" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to sum all amicable numbers from 1 to a specified number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def amicable_numbers_sum(limit):<span class="pl-cce">\r\n</span>    if not isinstance(limit, int):<span class="pl-cce">\r\n</span>        return <span class="pl-cce">\&quot;</span>Input is not an integer!<span class="pl-cce">\&quot;\r\n</span>    if limit &lt; 1:<span class="pl-cce">\r\n</span>        return <span class="pl-cce">\&quot;</span>Input must be bigger than 0!<span class="pl-cce">\&quot;\r\n</span>    amicables = set()<span class="pl-cce">\r\n</span>    for num in range(2, limit+1):<span class="pl-cce">\r\n</span>        if num in amicables:<span class="pl-cce">\r\n</span>            continue<span class="pl-cce">\r\n</span>        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])<span class="pl-cce">\r\n</span>        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])<span class="pl-cce">\r\n</span>        if num == sum_fact2 and num != sum_fact:<span class="pl-cce">\r\n</span>            amicables.add(num)<span class="pl-cce">\r\n</span>            amicables.add(sum_fact2)<span class="pl-cce">\r\n</span>    return sum(amicables)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">123</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert amicable_numbers_sum(999)==504<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert amicable_numbers_sum(9999)==31626<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert amicable_numbers_sum(99)==0<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L124" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="124"></td>
          <td id="LC124" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to get the angle of a complex number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import cmath<span class="pl-cce">\r\n</span>def angle_complex(a,b):<span class="pl-cce">\r\n</span>  cn=complex(a,b)<span class="pl-cce">\r\n</span>  angle=cmath.phase(a+b)<span class="pl-cce">\r\n</span>  return angle<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">124</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert angle_complex(0,1j)==1.5707963267948966 <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert angle_complex(2,1j)==0.4636476090008061<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert angle_complex(0,2j)==1.5707963267948966<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L125" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="125"></td>
          <td id="LC125" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_length(string, n): <span class="pl-cce">\r\n\t</span>current_sum = 0<span class="pl-cce">\r\n\t</span>max_sum = 0<span class="pl-cce">\r\n\t</span>for i in range(n): <span class="pl-cce">\r\n\t\t</span>current_sum += (1 if string[i] == &#39;0&#39; else -1) <span class="pl-cce">\r\n\t\t</span>if current_sum &lt; 0: <span class="pl-cce">\r\n\t\t\t</span>current_sum = 0<span class="pl-cce">\r\n\t\t</span>max_sum = max(current_sum, max_sum) <span class="pl-cce">\r\n\t</span>return max_sum if max_sum else 0<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">125</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_length(<span class="pl-cce">\&quot;</span>11000010001<span class="pl-cce">\&quot;</span>, 11) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_length(<span class="pl-cce">\&quot;</span>10111<span class="pl-cce">\&quot;</span>, 5) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_length(<span class="pl-cce">\&quot;</span>11011101100101<span class="pl-cce">\&quot;</span>, 14) == 2 <span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L126" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="126"></td>
          <td id="LC126" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the sum of common divisors of two given numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sum(a,b): <span class="pl-cce">\r\n</span>    sum = 0<span class="pl-cce">\r\n</span>    for i in range (1,min(a,b)): <span class="pl-cce">\r\n</span>        if (a % i == 0 and b % i == 0): <span class="pl-cce">\r\n</span>            sum += i <span class="pl-cce">\r\n</span>    return sum<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">126</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sum(10,15) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum(100,150) == 93<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum(4,6) == 3<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L127" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="127"></td>
          <td id="LC127" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to multiply two integers without using the * operator in python.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def multiply_int(x, y):<span class="pl-cce">\r\n</span>    if y &lt; 0:<span class="pl-cce">\r\n</span>        return -multiply_int(x, -y)<span class="pl-cce">\r\n</span>    elif y == 0:<span class="pl-cce">\r\n</span>        return 0<span class="pl-cce">\r\n</span>    elif y == 1:<span class="pl-cce">\r\n</span>        return x<span class="pl-cce">\r\n</span>    else:<span class="pl-cce">\r\n</span>        return x + multiply_int(x, y - 1)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">127</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert multiply_int(10,20)==200<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert multiply_int(5,10)==50<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert multiply_int(4,8)==32<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L128" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="128"></td>
          <td id="LC128" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to shortlist words that are longer than n from a given list of words.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def long_words(n, str):<span class="pl-cce">\r\n</span>    word_len = []<span class="pl-cce">\r\n</span>    txt = str.split(<span class="pl-cce">\&quot;</span> <span class="pl-cce">\&quot;</span>)<span class="pl-cce">\r\n</span>    for x in txt:<span class="pl-cce">\r\n</span>        if len(x) &gt; n:<span class="pl-cce">\r\n</span>            word_len.append(x)<span class="pl-cce">\r\n</span>    return word_len<span class="pl-cce">\t</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">128</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert long_words(3,<span class="pl-cce">\&quot;</span>python is a programming language<span class="pl-cce">\&quot;</span>)==[&#39;python&#39;,&#39;programming&#39;,&#39;language&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert long_words(2,<span class="pl-cce">\&quot;</span>writing a program<span class="pl-cce">\&quot;</span>)==[&#39;writing&#39;,&#39;program&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert long_words(5,<span class="pl-cce">\&quot;</span>sorting list<span class="pl-cce">\&quot;</span>)==[&#39;sorting&#39;]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L129" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="129"></td>
          <td id="LC129" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to calculate magic square.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def magic_square_test(my_matrix):<span class="pl-cce">\r\n</span>    iSize = len(my_matrix[0])<span class="pl-cce">\r\n</span>    sum_list = []<span class="pl-cce">\r\n</span>    sum_list.extend([sum (lines) for lines in my_matrix])   <span class="pl-cce">\r\n</span>    for col in range(iSize):<span class="pl-cce">\r\n</span>        sum_list.append(sum(row[col] for row in my_matrix))<span class="pl-cce">\r\n</span>    result1 = 0<span class="pl-cce">\r\n</span>    for i in range(0,iSize):<span class="pl-cce">\r\n</span>        result1 +=my_matrix[i][i]<span class="pl-cce">\r\n</span>    sum_list.append(result1)      <span class="pl-cce">\r\n</span>    result2 = 0<span class="pl-cce">\r\n</span>    for i in range(iSize-1,-1,-1):<span class="pl-cce">\r\n</span>        result2 +=my_matrix[i][i]<span class="pl-cce">\r\n</span>    sum_list.append(result2)<span class="pl-cce">\r\n</span>    if len(set(sum_list))&gt;1:<span class="pl-cce">\r\n</span>        return False<span class="pl-cce">\r\n</span>    return True<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">129</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L130" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="130"></td>
          <td id="LC130" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the item with maximum frequency in a given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from collections import defaultdict<span class="pl-cce">\r\n</span>def max_occurrences(nums):<span class="pl-cce">\r\n</span>    dict = defaultdict(int)<span class="pl-cce">\r\n</span>    for i in nums:<span class="pl-cce">\r\n</span>        dict[i] += 1<span class="pl-cce">\r\n</span>    result = max(dict.items(), key=lambda x: x[1]) <span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">130</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L131" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="131"></td>
          <td id="LC131" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to reverse only the vowels of a given string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def reverse_vowels(str1):<span class="pl-cce">\r\n\t</span>vowels = <span class="pl-cce">\&quot;\&quot;\r\n\t</span>for char in str1:<span class="pl-cce">\r\n\t\t</span>if char in <span class="pl-cce">\&quot;</span>aeiouAEIOU<span class="pl-cce">\&quot;</span>:<span class="pl-cce">\r\n\t\t\t</span>vowels += char<span class="pl-cce">\r\n\t</span>result_string = <span class="pl-cce">\&quot;\&quot;\r\n\t</span>for char in str1:<span class="pl-cce">\r\n\t\t</span>if char in <span class="pl-cce">\&quot;</span>aeiouAEIOU<span class="pl-cce">\&quot;</span>:<span class="pl-cce">\r\n\t\t\t</span>result_string += vowels[-1]<span class="pl-cce">\r\n\t\t\t</span>vowels = vowels[:-1]<span class="pl-cce">\r\n\t\t</span>else:<span class="pl-cce">\r\n\t\t\t</span>result_string += char<span class="pl-cce">\r\n\t</span>return result_string<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">131</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert reverse_vowels(<span class="pl-cce">\&quot;</span>Python<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>Python<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert reverse_vowels(<span class="pl-cce">\&quot;</span>USA<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>ASU<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert reverse_vowels(<span class="pl-cce">\&quot;</span>ab<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>ab<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L132" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="132"></td>
          <td id="LC132" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to convert tuple to a string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def tup_string(tup1):<span class="pl-cce">\r\n</span>  str =  &#39;&#39;.join(tup1)<span class="pl-cce">\r\n</span>  return str<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">132</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert tup_string((&#39;e&#39;, &#39;x&#39;, &#39;e&#39;, &#39;r&#39;, &#39;c&#39;, &#39;i&#39;, &#39;s&#39;, &#39;e&#39;, &#39;s&#39;))==(<span class="pl-cce">\&quot;</span>exercises<span class="pl-cce">\&quot;</span>)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert tup_string((&#39;p&#39;,&#39;y&#39;,&#39;t&#39;,&#39;h&#39;,&#39;o&#39;,&#39;n&#39;))==(<span class="pl-cce">\&quot;</span>python<span class="pl-cce">\&quot;</span>)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert tup_string((&#39;p&#39;,&#39;r&#39;,&#39;o&#39;,&#39;g&#39;,&#39;r&#39;,&#39;a&#39;,&#39;m&#39;))==(<span class="pl-cce">\&quot;</span>program<span class="pl-cce">\&quot;</span>)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L133" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="133"></td>
          <td id="LC133" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sum_negativenum(nums):<span class="pl-cce">\r\n</span>  sum_negativenum = list(filter(lambda nums:nums&lt;0,nums))<span class="pl-cce">\r\n</span>  return sum(sum_negativenum)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">133</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L134" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="134"></td>
          <td id="LC134" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether the last element of given array is even or odd after performing an operation p times.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_last (arr,n,p): <span class="pl-cce">\r\n</span>    _sum = 0<span class="pl-cce">\r\n</span>    for i in range(n): <span class="pl-cce">\r\n</span>        _sum = _sum + arr[i] <span class="pl-cce">\r\n</span>    if p == 1: <span class="pl-cce">\r\n</span>        if _sum % 2 == 0: <span class="pl-cce">\r\n</span>            return <span class="pl-cce">\&quot;</span>ODD<span class="pl-cce">\&quot;\r\n</span>        else: <span class="pl-cce">\r\n</span>            return <span class="pl-cce">\&quot;</span>EVEN<span class="pl-cce">\&quot;\r\n</span>    return <span class="pl-cce">\&quot;</span>EVEN<span class="pl-cce">\&quot;\r\n</span>      <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">134</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_last([5,7,10],3,1) == <span class="pl-cce">\&quot;</span>ODD<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_last([2,3],2,3) == <span class="pl-cce">\&quot;</span>EVEN<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_last([1,2,3],3,1) == <span class="pl-cce">\&quot;</span>ODD<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L135" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="135"></td>
          <td id="LC135" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the nth hexagonal number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def hexagonal_num(n): <span class="pl-cce">\r\n\t</span>return n*(2*n - 1) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">135</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert hexagonal_num(10) == 190<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert hexagonal_num(5) == 45<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert hexagonal_num(7) == 91<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L136" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="136"></td>
          <td id="LC136" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to calculate electricity bill.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def cal_electbill(units):<span class="pl-cce">\r\n</span> if(units &lt; 50):<span class="pl-cce">\r\n</span>    amount = units * 2.60<span class="pl-cce">\r\n</span>    surcharge = 25<span class="pl-cce">\r\n</span> elif(units &lt;= 100):<span class="pl-cce">\r\n</span>    amount = 130 + ((units - 50) * 3.25)<span class="pl-cce">\r\n</span>    surcharge = 35<span class="pl-cce">\r\n</span> elif(units &lt;= 200):<span class="pl-cce">\r\n</span>    amount = 130 + 162.50 + ((units - 100) * 5.26)<span class="pl-cce">\r\n</span>    surcharge = 45<span class="pl-cce">\r\n</span> else:<span class="pl-cce">\r\n</span>    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)<span class="pl-cce">\r\n</span>    surcharge = 75<span class="pl-cce">\r\n</span> total = amount + surcharge<span class="pl-cce">\r\n</span> return total<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">136</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert cal_electbill(75)==246.25<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert cal_electbill(265)==1442.75<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert cal_electbill(100)==327.5<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L137" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="137"></td>
          <td id="LC137" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the ration of zeroes in an array of integers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from array import array<span class="pl-cce">\r\n</span>def zero_count(nums):<span class="pl-cce">\r\n</span>    n = len(nums)<span class="pl-cce">\r\n</span>    n1 = 0<span class="pl-cce">\r\n</span>    for x in nums:<span class="pl-cce">\r\n</span>        if x == 0:<span class="pl-cce">\r\n</span>            n1 += 1<span class="pl-cce">\r\n</span>        else:<span class="pl-cce">\r\n</span>          None<span class="pl-cce">\r\n</span>    return round(n1/n,2)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">137</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L138" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="138"></td>
          <td id="LC138" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def is_Sum_Of_Powers_Of_Two(n): <span class="pl-cce">\r\n</span>    if (n % 2 == 1): <span class="pl-cce">\r\n</span>        return False<span class="pl-cce">\r\n</span>    else: <span class="pl-cce">\r\n</span>        return True<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">138</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert is_Sum_Of_Powers_Of_Two(10) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_Sum_Of_Powers_Of_Two(7) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_Sum_Of_Powers_Of_Two(14) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L139" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="139"></td>
          <td id="LC139" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the circumference of a circle.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def circle_circumference(r):<span class="pl-cce">\r\n</span>  perimeter=2*3.1415*r<span class="pl-cce">\r\n</span>  return perimeter<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">139</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert circle_circumference(10)==62.830000000000005<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert circle_circumference(5)==31.415000000000003<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert circle_circumference(4)==25.132<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L140" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="140"></td>
          <td id="LC140" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to extract elements that occur singly in the given tuple list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def extract_singly(test_list):<span class="pl-cce">\r\n</span>  res = []<span class="pl-cce">\r\n</span>  temp = set()<span class="pl-cce">\r\n</span>  for inner in test_list:<span class="pl-cce">\r\n</span>    for ele in inner:<span class="pl-cce">\r\n</span>      if not ele in temp:<span class="pl-cce">\r\n</span>        temp.add(ele)<span class="pl-cce">\r\n</span>        res.append(ele)<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">140</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L141" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="141"></td>
          <td id="LC141" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to sort a list of elements using pancake sort.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def pancake_sort(nums):<span class="pl-cce">\r\n</span>    arr_len = len(nums)<span class="pl-cce">\r\n</span>    while arr_len &gt; 1:<span class="pl-cce">\r\n</span>        mi = nums.index(max(nums[0:arr_len]))<span class="pl-cce">\r\n</span>        nums = nums[mi::-1] + nums[mi+1:len(nums)]<span class="pl-cce">\r\n</span>        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]<span class="pl-cce">\r\n</span>        arr_len -= 1<span class="pl-cce">\r\n</span>    return nums<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">141</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L142" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="142"></td>
          <td id="LC142" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to count the same pair in three given lists.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_samepair(list1,list2,list3):<span class="pl-cce">\r\n</span>    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))<span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">142</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L143" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="143"></td>
          <td id="LC143" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find number of lists present in the given tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_lists(Input): <span class="pl-cce">\r\n\t</span>if isinstance(Input, list): <span class="pl-cce">\r\n\t\t</span>return 1<span class="pl-cce">\r\n\t</span>else: <span class="pl-cce">\r\n\t\t</span>return len(Input) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">143</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L144" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="144"></td>
          <td id="LC144" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the sum of absolute differences in all pairs of the given array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sum_Pairs(arr,n): <span class="pl-cce">\r\n</span>    sum = 0<span class="pl-cce">\r\n</span>    for i in range(n - 1,-1,-1): <span class="pl-cce">\r\n</span>        sum += i*arr[i] - (n-1-i) * arr[i] <span class="pl-cce">\r\n</span>    return sum<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">144</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_Pairs([1,8,9,15,16],5) == 74<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_Pairs([1,2,3,4],4) == 10<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L145" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="145"></td>
          <td id="LC145" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the maximum difference between any two elements in a given array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def max_Abs_Diff(arr,n): <span class="pl-cce">\r\n</span>    minEle = arr[0] <span class="pl-cce">\r\n</span>    maxEle = arr[0] <span class="pl-cce">\r\n</span>    for i in range(1, n): <span class="pl-cce">\r\n</span>        minEle = min(minEle,arr[i]) <span class="pl-cce">\r\n</span>        maxEle = max(maxEle,arr[i]) <span class="pl-cce">\r\n</span>    return (maxEle - minEle) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">145</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert max_Abs_Diff((2,1,5,3),4) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_Abs_Diff((9,3,2,5,1),5) == 8<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_Abs_Diff((3,2,1),3) == 2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L146" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="146"></td>
          <td id="LC146" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the ascii value of total characters in a string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def ascii_value_string(str1):<span class="pl-cce">\r\n</span>  for i in range(len(str1)):<span class="pl-cce">\r\n</span>   return ord(str1[i])<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">146</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert ascii_value_string(<span class="pl-cce">\&quot;</span>python<span class="pl-cce">\&quot;</span>)==112<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert ascii_value_string(<span class="pl-cce">\&quot;</span>Program<span class="pl-cce">\&quot;</span>)==80<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert ascii_value_string(<span class="pl-cce">\&quot;</span>Language<span class="pl-cce">\&quot;</span>)==76<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L147" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="147"></td>
          <td id="LC147" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the maximum total path sum in the given triangle.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def max_path_sum(tri, m, n): <span class="pl-cce">\r\n\t</span>for i in range(m-1, -1, -1): <span class="pl-cce">\r\n\t\t</span>for j in range(i+1): <span class="pl-cce">\r\n\t\t\t</span>if (tri[i+1][j] &gt; tri[i+1][j+1]): <span class="pl-cce">\r\n\t\t\t\t</span>tri[i][j] += tri[i+1][j] <span class="pl-cce">\r\n\t\t\t</span>else: <span class="pl-cce">\r\n\t\t\t\t</span>tri[i][j] += tri[i+1][j+1] <span class="pl-cce">\r\n\t</span>return tri[0][0]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">147</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L148" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="148"></td>
          <td id="LC148" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to divide a number into two parts such that the sum of digits is maximum.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sum_digits_single(x) : <span class="pl-cce">\r\n</span>    ans = 0<span class="pl-cce">\r\n</span>    while x : <span class="pl-cce">\r\n</span>        ans += x % 10<span class="pl-cce">\r\n</span>        x //= 10  <span class="pl-cce">\r\n</span>    return ans <span class="pl-cce">\r\n</span>def closest(x) : <span class="pl-cce">\r\n</span>    ans = 0<span class="pl-cce">\r\n</span>    while (ans * 10 + 9 &lt;= x) : <span class="pl-cce">\r\n</span>        ans = ans * 10 + 9  <span class="pl-cce">\r\n</span>    return ans   <span class="pl-cce">\r\n</span>def sum_digits_twoparts(N) : <span class="pl-cce">\r\n</span>    A = closest(N)  <span class="pl-cce">\r\n</span>    return sum_digits_single(A) + sum_digits_single(N - A) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">148</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_digits_twoparts(35)==17<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_digits_twoparts(7)==7<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_digits_twoparts(100)==19<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L149" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="149"></td>
          <td id="LC149" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def longest_subseq_with_diff_one(arr, n): <span class="pl-cce">\r\n\t</span>dp = [1 for i in range(n)] <span class="pl-cce">\r\n\t</span>for i in range(n): <span class="pl-cce">\r\n\t\t</span>for j in range(i): <span class="pl-cce">\r\n\t\t\t</span>if ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): <span class="pl-cce">\r\n\t\t\t\t</span>dp[i] = max(dp[i], dp[j]+1) <span class="pl-cce">\r\n\t</span>result = 1<span class="pl-cce">\r\n\t</span>for i in range(n): <span class="pl-cce">\r\n\t\t</span>if (result &lt; dp[i]): <span class="pl-cce">\r\n\t\t\t</span>result = dp[i] <span class="pl-cce">\r\n\t</span>return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">149</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L150" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="150"></td>
          <td id="LC150" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find whether the given number is present in the infinite sequence or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def does_Contain_B(a,b,c): <span class="pl-cce">\r\n</span>    if (a == b): <span class="pl-cce">\r\n</span>        return True<span class="pl-cce">\r\n</span>    if ((b - a) * c &gt; 0 and (b - a) % c == 0): <span class="pl-cce">\r\n</span>        return True<span class="pl-cce">\r\n</span>    return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">150</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert does_Contain_B(1,7,3) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert does_Contain_B(1,-3,5) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert does_Contain_B(3,2,5) == False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L151" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="151"></td>
          <td id="LC151" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether the given number is co-prime or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def gcd(p,q):<span class="pl-cce">\r\n</span>    while q != 0:<span class="pl-cce">\r\n</span>        p, q = q,p%q<span class="pl-cce">\r\n</span>    return p<span class="pl-cce">\r\n</span>def is_coprime(x,y):<span class="pl-cce">\r\n</span>    return gcd(x,y) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">151</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert is_coprime(17,13) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_coprime(15,21) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_coprime(25,45) == False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L152" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="152"></td>
          <td id="LC152" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to sort the given array by using merge sort.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def merge(a,b):<span class="pl-cce">\r\n</span>    c = []<span class="pl-cce">\r\n</span>    while len(a) != 0 and len(b) != 0:<span class="pl-cce">\r\n</span>        if a[0] &lt; b[0]:<span class="pl-cce">\r\n</span>            c.append(a[0])<span class="pl-cce">\r\n</span>            a.remove(a[0])<span class="pl-cce">\r\n</span>        else:<span class="pl-cce">\r\n</span>            c.append(b[0])<span class="pl-cce">\r\n</span>            b.remove(b[0])<span class="pl-cce">\r\n</span>    if len(a) == 0:<span class="pl-cce">\r\n</span>        c += b<span class="pl-cce">\r\n</span>    else:<span class="pl-cce">\r\n</span>        c += a<span class="pl-cce">\r\n</span>    return c<span class="pl-cce">\r\n</span>def merge_sort(x):<span class="pl-cce">\r\n</span>    if len(x) == 0 or len(x) == 1:<span class="pl-cce">\r\n</span>        return x<span class="pl-cce">\r\n</span>    else:<span class="pl-cce">\r\n</span>        middle = len(x)//2<span class="pl-cce">\r\n</span>        a = merge_sort(x[:middle])<span class="pl-cce">\r\n</span>        b = merge_sort(x[middle:])<span class="pl-cce">\r\n</span>        return merge(a,b)<span class="pl-cce">\r\n</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">152</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L153" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="153"></td>
          <td id="LC153" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the vertex of a parabola.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def parabola_vertex(a, b, c): <span class="pl-cce">\r\n</span>  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))<span class="pl-cce">\r\n</span>  return vertex<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">153</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert parabola_vertex(5,3,2)==(-0.3, 1.55)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert parabola_vertex(2,4,6)==(-1.0, 4.0)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L154" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="154"></td>
          <td id="LC154" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to extract every specified element from a given two dimensional list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def specified_element(nums, N):<span class="pl-cce">\r\n</span>    result = [i[N] for i in nums]<span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">154</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L155" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="155"></td>
          <td id="LC155" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to toggle all even bits of a given number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def even_bit_toggle_number(n) : <span class="pl-cce">\r\n</span>    res = 0; count = 0; temp = n <span class="pl-cce">\r\n</span>    while (temp &gt; 0) :     <span class="pl-cce">\r\n</span>        if (count % 2 == 1) : <span class="pl-cce">\r\n</span>            res = res | (1 &lt;&lt; count)      <span class="pl-cce">\r\n</span>        count = count + 1<span class="pl-cce">\r\n</span>        temp &gt;&gt;= 1 <span class="pl-cce">\r\n</span>    return n ^ res <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">155</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert even_bit_toggle_number(10) == 0<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert even_bit_toggle_number(20) == 30<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert even_bit_toggle_number(30) == 20<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L156" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="156"></td>
          <td id="LC156" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to convert a tuple of string values to a tuple of integer values.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def tuple_int_str(tuple_str):<span class="pl-cce">\r\n</span>    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)<span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">156</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert tuple_int_str(((&#39;333&#39;, &#39;33&#39;), (&#39;1416&#39;, &#39;55&#39;)))==((333, 33), (1416, 55))<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert tuple_int_str(((&#39;999&#39;, &#39;99&#39;), (&#39;1000&#39;, &#39;500&#39;)))==((999, 99), (1000, 500))<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert tuple_int_str(((&#39;666&#39;, &#39;66&#39;), (&#39;1500&#39;, &#39;555&#39;)))==((666, 66), (1500, 555))<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L157" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="157"></td>
          <td id="LC157" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to reflect the run-length encoding from a list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from itertools import groupby<span class="pl-cce">\r\n</span>def encode_list(list1):<span class="pl-cce">\r\n</span>    return [[len(list(group)), key] for key, group in groupby(list1)]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">157</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert encode_list(&#39;automatically&#39;)==[[1, &#39;a&#39;], [1, &#39;u&#39;], [1, &#39;t&#39;], [1, &#39;o&#39;], [1, &#39;m&#39;], [1, &#39;a&#39;], [1, &#39;t&#39;], [1, &#39;i&#39;], [1, &#39;c&#39;], [1, &#39;a&#39;], [2, &#39;l&#39;], [1, &#39;y&#39;]]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert encode_list(&#39;python&#39;)==[[1, &#39;p&#39;], [1, &#39;y&#39;], [1, &#39;t&#39;], [1, &#39;h&#39;], [1, &#39;o&#39;], [1, &#39;n&#39;]]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L158" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="158"></td>
          <td id="LC158" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find k number of operations required to make all elements equal.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def min_Ops(arr,n,k): <span class="pl-cce">\r\n</span>    max1 = max(arr) <span class="pl-cce">\r\n</span>    res = 0<span class="pl-cce">\r\n</span>    for i in range(0,n):  <span class="pl-cce">\r\n</span>        if ((max1 - arr[i]) % k != 0): <span class="pl-cce">\r\n</span>            return -1 <span class="pl-cce">\r\n</span>        else: <span class="pl-cce">\r\n</span>            res += (max1 - arr[i]) / k <span class="pl-cce">\r\n</span>    return int(res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">158</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert min_Ops([2,2,2,2],4,3) == 0<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_Ops([4,2,6,8],4,3) == -1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_Ops([21,33,9,45,63],5,6) == 24<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L159" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="159"></td>
          <td id="LC159" class="blob-code blob-code-inner js-file-line">{&quot;text&quot;: &quot;Write a function to print the season for the given month and day.&quot;, &quot;code&quot;: &quot;def month_season(month,days):\r\n if month in (&#39;January&#39;, &#39;February&#39;, &#39;March&#39;):\r\n\t season = &#39;winter&#39;\r\n elif month in (&#39;April&#39;, &#39;May&#39;, &#39;June&#39;):\r\n\t season = &#39;spring&#39;\r\n elif month in (&#39;July&#39;, &#39;August&#39;, &#39;September&#39;):\r\n\t season = &#39;summer&#39;\r\n else:\r\n\t season = &#39;autumn&#39;\r\n if (month == &#39;March&#39;) and (days &gt; 19):\r\n\t season = &#39;spring&#39;\r\n elif (month == &#39;June&#39;) and (days &gt; 20):\r\n\t season = &#39;summer&#39;\r\n elif (month == &#39;September&#39;) and (days &gt; 21):\r\n\t season = &#39;autumn&#39;\r\n elif (month == &#39;October&#39;) and (days &gt; 21):\r\n\t season = &#39;autumn&#39;\r\n elif (month == &#39;November&#39;) and (days &gt; 21):\r\n\t season = &#39;autumn&#39;\r\n elif (month == &#39;December&#39;) and (days &gt; 20):\r\n\t season = &#39;winter&#39;\r\n return season&quot;, &quot;task_id&quot;: 159, &quot;test_setup_code&quot;: &quot;&quot;, &quot;test_list&quot;: [&quot;assert month_season(&#39;January&#39;,4)==(&#39;winter&#39;)&quot;, &quot;assert month_season(&#39;October&#39;,28)==(&#39;autumn&#39;)&quot;, &quot;assert month_season(&#39;June&#39;,6)==(&#39;spring&#39;)&quot;], &quot;challenge_test_list&quot;: []}</td>
        </tr>
        <tr>
          <td id="L160" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="160"></td>
          <td id="LC160" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find x and y that satisfies ax + by = n.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def solution (a, b, n): <span class="pl-cce">\r\n\t</span>i = 0<span class="pl-cce">\r\n\t</span>while i * a &lt;= n: <span class="pl-cce">\r\n\t\t</span>if (n - (i * a)) % b == 0: <span class="pl-cce">\r\n\t\t\t</span>return (<span class="pl-cce">\&quot;</span>x = <span class="pl-cce">\&quot;</span>,i ,<span class="pl-cce">\&quot;</span>, y = <span class="pl-cce">\&quot;</span>, <span class="pl-cce">\r\n\t\t\t</span>int((n - (i * a)) / b)) <span class="pl-cce">\r\n\t\t\t</span>return 0<span class="pl-cce">\r\n\t\t</span>i = i + 1<span class="pl-cce">\r\n\t</span>return (<span class="pl-cce">\&quot;</span>No solution<span class="pl-cce">\&quot;</span>) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">160</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert solution(2, 3, 7) == (&#39;x = &#39;, 2, &#39;, y = &#39;, 1)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert solution(4, 2, 7) == &#39;No solution&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert solution(1, 13, 17) == (&#39;x = &#39;, 4, &#39;, y = &#39;, 1)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L161" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="161"></td>
          <td id="LC161" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to remove all elements from a given list present in another list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def remove_elements(list1, list2):<span class="pl-cce">\r\n</span>    result = [x for x in list1 if x not in list2]<span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">161</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L162" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="162"></td>
          <td id="LC162" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =&lt; 0).<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sum_series(n):<span class="pl-cce">\r\n</span>  if n &lt; 1:<span class="pl-cce">\r\n</span>    return 0<span class="pl-cce">\r\n</span>  else:<span class="pl-cce">\r\n</span>    return n + sum_series(n - 2)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">162</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_series(6)==12<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_series(10)==30<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_series(9)==25<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L163" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="163"></td>
          <td id="LC163" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to calculate the area of a regular polygon.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from math import tan, pi<span class="pl-cce">\r\n</span>def area_polygon(s,l):<span class="pl-cce">\r\n</span>  area = s * (l ** 2) / (4 * tan(pi / s))<span class="pl-cce">\r\n</span>  return area<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">163</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert area_polygon(4,20)==400.00000000000006<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert area_polygon(10,15)==1731.1969896610804<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert area_polygon(9,7)==302.90938549487214<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L164" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="164"></td>
          <td id="LC164" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether the sum of divisors are same or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math <span class="pl-cce">\r\n</span>def divSum(n): <span class="pl-cce">\r\n</span>    sum = 1; <span class="pl-cce">\r\n</span>    i = 2; <span class="pl-cce">\r\n</span>    while(i * i &lt;= n): <span class="pl-cce">\r\n</span>        if (n % i == 0): <span class="pl-cce">\r\n</span>            sum = (sum + i +math.floor(n / i)); <span class="pl-cce">\r\n</span>        i += 1; <span class="pl-cce">\r\n</span>    return sum; <span class="pl-cce">\r\n</span>def areEquivalent(num1,num2): <span class="pl-cce">\r\n</span>    return divSum(num1) == divSum(num2); <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">164</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert areEquivalent(36,57) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert areEquivalent(2,4) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert areEquivalent(23,47) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L165" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="165"></td>
          <td id="LC165" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_char_position(str1): <span class="pl-cce">\r\n</span>    count_chars = 0<span class="pl-cce">\r\n</span>    for i in range(len(str1)):<span class="pl-cce">\r\n</span>        if ((i == ord(str1[i]) - ord(&#39;A&#39;)) or <span class="pl-cce">\r\n</span>            (i == ord(str1[i]) - ord(&#39;a&#39;))): <span class="pl-cce">\r\n</span>            count_chars += 1<span class="pl-cce">\r\n</span>    return count_chars <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">165</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_char_position(<span class="pl-cce">\&quot;</span>xbcefg<span class="pl-cce">\&quot;</span>) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_char_position(<span class="pl-cce">\&quot;</span>ABcED<span class="pl-cce">\&quot;</span>) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_char_position(<span class="pl-cce">\&quot;</span>AbgdeF<span class="pl-cce">\&quot;</span>) == 5<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L166" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="166"></td>
          <td id="LC166" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count the pairs with xor as an even number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_even_Pair(A,N): <span class="pl-cce">\r\n</span>    evenPair = 0<span class="pl-cce">\r\n</span>    for i in range(0,N): <span class="pl-cce">\r\n</span>        for j in range(i+1,N): <span class="pl-cce">\r\n</span>            if ((A[i] ^ A[j]) % 2 == 0): <span class="pl-cce">\r\n</span>                evenPair+=1<span class="pl-cce">\r\n</span>    return evenPair; <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">166</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_even_Pair([5,4,7,2,1],5) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_even_Pair([7,2,8,1,0,5,11],7) == 9<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_even_Pair([1,2,3],3) == 1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L167" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="167"></td>
          <td id="LC167" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find smallest power of 2 greater than or equal to n.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def next_Power_Of_2(n): <span class="pl-cce">\r\n</span>    count = 0; <span class="pl-cce">\r\n</span>    if (n and not(n &amp; (n - 1))): <span class="pl-cce">\r\n</span>        return n   <span class="pl-cce">\r\n</span>    while( n != 0): <span class="pl-cce">\r\n</span>        n &gt;&gt;= 1<span class="pl-cce">\r\n</span>        count += 1<span class="pl-cce">\r\n</span>    return 1 &lt;&lt; count; <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">167</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert next_Power_Of_2(0) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert next_Power_Of_2(5) == 8<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert next_Power_Of_2(17) == 32<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L168" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="168"></td>
          <td id="LC168" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the frequency of a number in a given array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def frequency(a,x): <span class="pl-cce">\r\n</span>    count = 0  <span class="pl-cce">\r\n</span>    for i in a: <span class="pl-cce">\r\n</span>        if i == x: count += 1<span class="pl-cce">\r\n</span>    return count <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">168</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert frequency([1,2,3],4) == 0<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert frequency([1,2,2,3,3,3,4],3) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert frequency([0,1,2,3,1,2],1) == 2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L169" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="169"></td>
          <td id="LC169" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to calculate the nth pell number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def get_pell(n): <span class="pl-cce">\r\n\t</span>if (n &lt;= 2): <span class="pl-cce">\r\n\t\t</span>return n <span class="pl-cce">\r\n\t</span>a = 1<span class="pl-cce">\r\n\t</span>b = 2<span class="pl-cce">\r\n\t</span>for i in range(3, n+1): <span class="pl-cce">\r\n\t\t</span>c = 2 * b + a <span class="pl-cce">\r\n\t\t</span>a = b <span class="pl-cce">\r\n\t\t</span>b = c <span class="pl-cce">\r\n\t</span>return b <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">169</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert get_pell(4) == 12<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_pell(7) == 169<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_pell(8) == 408<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L170" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="170"></td>
          <td id="LC170" class="blob-code blob-code-inner js-file-line">{&quot;text&quot;: &quot;Write a function to find sum of the numbers in a list between the indices of a specified range.&quot;, &quot;code&quot;: &quot;def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   &quot;, &quot;task_id&quot;: 170, &quot;test_setup_code&quot;: &quot;&quot;, &quot;test_list&quot;: [&quot;assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29&quot;, &quot;assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16&quot;, &quot;assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38&quot;], &quot;challenge_test_list&quot;: []}</td>
        </tr>
        <tr>
          <td id="L171" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="171"></td>
          <td id="LC171" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the perimeter of a pentagon.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math<span class="pl-cce">\r\n</span>def perimeter_pentagon(a):<span class="pl-cce">\r\n</span>  perimeter=(5*a)<span class="pl-cce">\r\n</span>  return perimeter<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">171</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert perimeter_pentagon(5)==25<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert perimeter_pentagon(10)==50<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert perimeter_pentagon(15)==75<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L172" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="172"></td>
          <td id="LC172" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the occurence of characters &#39;std&#39; in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_occurance(s):<span class="pl-cce">\r\n</span>  count=0<span class="pl-cce">\r\n</span>  for i in range(len(s)):<span class="pl-cce">\r\n</span>    if (s[i]== &#39;s&#39; and s[i+1]==&#39;t&#39; and s[i+2]== &#39;d&#39;):<span class="pl-cce">\r\n</span>      count = count + 1<span class="pl-cce">\r\n</span>  return count<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">172</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_occurance(<span class="pl-cce">\&quot;</span>letstdlenstdporstd<span class="pl-cce">\&quot;</span>) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_occurance(<span class="pl-cce">\&quot;</span>truststdsolensporsd<span class="pl-cce">\&quot;</span>) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_occurance(<span class="pl-cce">\&quot;</span>makestdsostdworthit<span class="pl-cce">\&quot;</span>) == 2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L173" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="173"></td>
          <td id="LC173" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to remove everything except alphanumeric characters from a string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def remove_splchar(text): <span class="pl-cce">\r\n</span> pattern = re.compile(&#39;[<span class="pl-cce">\\</span>W_]+&#39;)<span class="pl-cce">\r\n</span> return (pattern.sub(&#39;&#39;, text))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">173</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_splchar(&#39;python  @#&amp;^%$*program123&#39;)==(&#39;pythonprogram123&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_splchar(&#39;python %^$@!^&amp;*()  programming24%$^^()    language&#39;)==(&#39;pythonprogramming24language&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_splchar(&#39;python   ^%&amp;^()(+_)(_^&amp;67)                  program&#39;)==(&#39;python67program&#39;)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L174" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="174"></td>
          <td id="LC174" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to group a sequence of key-value pairs into a dictionary of lists.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def group_keyvalue(l):<span class="pl-cce">\r\n</span>    result = {}<span class="pl-cce">\r\n</span>    for k, v in l:<span class="pl-cce">\r\n</span>         result.setdefault(k, []).append(v)<span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">174</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert group_keyvalue([(&#39;yellow&#39;, 1), (&#39;blue&#39;, 2), (&#39;yellow&#39;, 3), (&#39;blue&#39;, 4), (&#39;red&#39;, 1)])=={&#39;yellow&#39;: [1, 3], &#39;blue&#39;: [2, 4], &#39;red&#39;: [1]}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert group_keyvalue([(&#39;python&#39;, 1), (&#39;python&#39;, 2), (&#39;python&#39;, 3), (&#39;python&#39;, 4), (&#39;python&#39;, 5)])=={&#39;python&#39;: [1,2,3,4,5]}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert group_keyvalue([(&#39;yellow&#39;,100), (&#39;blue&#39;, 200), (&#39;yellow&#39;, 300), (&#39;blue&#39;, 400), (&#39;red&#39;, 100)])=={&#39;yellow&#39;: [100, 300], &#39;blue&#39;: [200, 400], &#39;red&#39;: [100]}<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L175" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="175"></td>
          <td id="LC175" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to verify validity of a string of parentheses.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def is_valid_parenthese( str1):<span class="pl-cce">\r\n</span>        stack, pchar = [], {<span class="pl-cce">\&quot;</span>(<span class="pl-cce">\&quot;</span>: <span class="pl-cce">\&quot;</span>)<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>{<span class="pl-cce">\&quot;</span>: <span class="pl-cce">\&quot;</span>}<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>[<span class="pl-cce">\&quot;</span>: <span class="pl-cce">\&quot;</span>]<span class="pl-cce">\&quot;</span>}<span class="pl-cce">\r\n</span>        for parenthese in str1:<span class="pl-cce">\r\n</span>            if parenthese in pchar:<span class="pl-cce">\r\n</span>                stack.append(parenthese)<span class="pl-cce">\r\n</span>            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:<span class="pl-cce">\r\n</span>                return False<span class="pl-cce">\r\n</span>        return len(stack) == 0<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">175</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert is_valid_parenthese(<span class="pl-cce">\&quot;</span>(){}[]<span class="pl-cce">\&quot;</span>)==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_valid_parenthese(<span class="pl-cce">\&quot;</span>()[{)}<span class="pl-cce">\&quot;</span>)==False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_valid_parenthese(<span class="pl-cce">\&quot;</span>()<span class="pl-cce">\&quot;</span>)==True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L176" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="176"></td>
          <td id="LC176" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the perimeter of a triangle.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def perimeter_triangle(a,b,c):<span class="pl-cce">\r\n</span>  perimeter=a+b+c<span class="pl-cce">\r\n</span>  return perimeter<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">176</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert perimeter_triangle(10,20,30)==60<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert perimeter_triangle(3,4,5)==12<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert perimeter_triangle(25,35,45)==105<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L177" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="177"></td>
          <td id="LC177" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find two distinct numbers such that their lcm lies within the given range.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def answer(L,R): <span class="pl-cce">\r\n</span>    if (2 * L &lt;= R): <span class="pl-cce">\r\n</span>        return (L ,2*L)<span class="pl-cce">\r\n</span>    else: <span class="pl-cce">\r\n</span>        return (-1) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">177</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert answer(3,8) == (3,6)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert answer(2,6) == (2,4)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert answer(1,3) == (1,2)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L178" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="178"></td>
          <td id="LC178" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to search some literals strings in a string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def string_literals(patterns,text):<span class="pl-cce">\r\n</span>  for pattern in patterns:<span class="pl-cce">\r\n</span>     if re.search(pattern,  text):<span class="pl-cce">\r\n</span>       return (&#39;Matched!&#39;)<span class="pl-cce">\r\n</span>     else:<span class="pl-cce">\r\n</span>       return (&#39;Not Matched!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">178</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert string_literals([&#39;language&#39;],&#39;python language&#39;)==(&#39;Matched!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert string_literals([&#39;program&#39;],&#39;python language&#39;)==(&#39;Not Matched!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert string_literals([&#39;python&#39;],&#39;programming language&#39;)==(&#39;Not Matched!&#39;)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L179" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="179"></td>
          <td id="LC179" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find if the given number is a keith number or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def is_num_keith(x): <span class="pl-cce">\r\n\t</span>terms = [] <span class="pl-cce">\r\n\t</span>temp = x <span class="pl-cce">\r\n\t</span>n = 0 <span class="pl-cce">\r\n\t</span>while (temp &gt; 0): <span class="pl-cce">\r\n\t\t</span>terms.append(temp % 10) <span class="pl-cce">\r\n\t\t</span>temp = int(temp / 10) <span class="pl-cce">\r\n\t\t</span>n+=1 <span class="pl-cce">\r\n\t</span>terms.reverse() <span class="pl-cce">\r\n\t</span>next_term = 0 <span class="pl-cce">\r\n\t</span>i = n <span class="pl-cce">\r\n\t</span>while (next_term &lt; x): <span class="pl-cce">\r\n\t\t</span>next_term = 0 <span class="pl-cce">\r\n\t\t</span>for j in range(1,n+1): <span class="pl-cce">\r\n\t\t\t</span>next_term += terms[i - j] <span class="pl-cce">\r\n\t\t</span>terms.append(next_term) <span class="pl-cce">\r\n\t\t</span>i+=1 <span class="pl-cce">\r\n\t</span>return (next_term == x) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">179</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert is_num_keith(14) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_num_keith(12) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_num_keith(197) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L180" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="180"></td>
          <td id="LC180" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to calculate distance between two points using latitude and longitude.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from math import radians, sin, cos, acos<span class="pl-cce">\r\n</span>def distance_lat_long(slat,slon,elat,elon):<span class="pl-cce">\r\n</span> dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))<span class="pl-cce">\r\n</span> return dist<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">180</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert distance_lat_long(10,20,30,40)==6783.751974994595<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L181" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="181"></td>
          <td id="LC181" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the longest common prefix in the given set of strings.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def common_prefix_util(str1, str2): <span class="pl-cce">\r\n\t</span>result = <span class="pl-cce">\&quot;\&quot;</span>; <span class="pl-cce">\r\n\t</span>n1 = len(str1) <span class="pl-cce">\r\n\t</span>n2 = len(str2) <span class="pl-cce">\r\n\t</span>i = 0<span class="pl-cce">\r\n\t</span>j = 0<span class="pl-cce">\r\n\t</span>while i &lt;= n1 - 1 and j &lt;= n2 - 1: <span class="pl-cce">\r\n\t\t</span>if (str1[i] != str2[j]): <span class="pl-cce">\r\n\t\t\t</span>break<span class="pl-cce">\r\n\t\t</span>result += str1[i] <span class="pl-cce">\r\n\t\t</span>i += 1<span class="pl-cce">\r\n\t\t</span>j += 1<span class="pl-cce">\r\n\t</span>return (result) <span class="pl-cce">\r\n</span>def common_prefix (arr, n): <span class="pl-cce">\r\n\t</span>prefix = arr[0] <span class="pl-cce">\r\n\t</span>for i in range (1, n): <span class="pl-cce">\r\n\t\t</span>prefix = common_prefix_util(prefix, arr[i]) <span class="pl-cce">\r\n\t</span>return (prefix) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">181</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert common_prefix([<span class="pl-cce">\&quot;</span>tablets<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>tables<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>taxi<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>tamarind<span class="pl-cce">\&quot;</span>], 4) == &#39;ta&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert common_prefix([<span class="pl-cce">\&quot;</span>apples<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>ape<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>april<span class="pl-cce">\&quot;</span>], 3) == &#39;ap&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert common_prefix([<span class="pl-cce">\&quot;</span>teens<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>teenager<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>teenmar<span class="pl-cce">\&quot;</span>], 3) == &#39;teen&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L182" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="182"></td>
          <td id="LC182" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find uppercase, lowercase, special character and numeric values using regex.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def find_character(string):<span class="pl-cce">\r\n</span>  uppercase_characters = re.findall(r<span class="pl-cce">\&quot;</span>[A-Z]<span class="pl-cce">\&quot;</span>, string) <span class="pl-cce">\r\n</span>  lowercase_characters = re.findall(r<span class="pl-cce">\&quot;</span>[a-z]<span class="pl-cce">\&quot;</span>, string) <span class="pl-cce">\r\n</span>  numerical_characters = re.findall(r<span class="pl-cce">\&quot;</span>[0-9]<span class="pl-cce">\&quot;</span>, string) <span class="pl-cce">\r\n</span>  special_characters = re.findall(r<span class="pl-cce">\&quot;</span>[, .!?]<span class="pl-cce">\&quot;</span>, string) <span class="pl-cce">\r\n</span>  return uppercase_characters, lowercase_characters, numerical_characters, special_characters<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">182</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_character(<span class="pl-cce">\&quot;</span>ThisIsGeeksforGeeks<span class="pl-cce">\&quot;</span>) == ([&#39;T&#39;, &#39;I&#39;, &#39;G&#39;, &#39;G&#39;], [&#39;h&#39;, &#39;i&#39;, &#39;s&#39;, &#39;s&#39;, &#39;e&#39;, &#39;e&#39;, &#39;k&#39;, &#39;s&#39;, &#39;f&#39;, &#39;o&#39;, &#39;r&#39;, &#39;e&#39;, &#39;e&#39;, &#39;k&#39;, &#39;s&#39;], [], [])<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_character(<span class="pl-cce">\&quot;</span>Hithere2<span class="pl-cce">\&quot;</span>) == ([&#39;H&#39;], [&#39;i&#39;, &#39;t&#39;, &#39;h&#39;, &#39;e&#39;, &#39;r&#39;, &#39;e&#39;], [&#39;2&#39;], [])<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_character(<span class="pl-cce">\&quot;</span>HeyFolks32<span class="pl-cce">\&quot;</span>) == ([&#39;H&#39;, &#39;F&#39;], [&#39;e&#39;, &#39;y&#39;, &#39;o&#39;, &#39;l&#39;, &#39;k&#39;, &#39;s&#39;], [&#39;3&#39;, &#39;2&#39;], [])<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L183" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="183"></td>
          <td id="LC183" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to count all the distinct pairs having a difference of k in any array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_pairs(arr, n, k):<span class="pl-cce">\r\n</span>  count=0;<span class="pl-cce">\r\n</span>  for i in range(0,n):<span class="pl-cce">\r\n</span>    for j in range(i+1, n):<span class="pl-cce">\r\n</span>      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:<span class="pl-cce">\r\n</span>        count += 1<span class="pl-cce">\r\n</span>  return count<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">183</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L184" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="184"></td>
          <td id="LC184" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find all the values in a list that are greater than a specified number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def greater_specificnum(list,num):<span class="pl-cce">\r\n</span> greater_specificnum=all(x &gt;= num for x in list)<span class="pl-cce">\r\n</span> return greater_specificnum<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">184</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert greater_specificnum([220, 330, 500],200)==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert greater_specificnum([12, 17, 21],20)==False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert greater_specificnum([1,2,3,4],10)==False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L185" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="185"></td>
          <td id="LC185" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the focus of a parabola.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def parabola_focus(a, b, c): <span class="pl-cce">\r\n</span>  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))<span class="pl-cce">\r\n</span>  return focus<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">185</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert parabola_focus(5,3,2)==(-0.3, 1.6)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert parabola_focus(2,4,6)==(-1.0, 4.125)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L186" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="186"></td>
          <td id="LC186" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to search some literals strings in a string by using regex.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def check_literals(text, patterns):<span class="pl-cce">\r\n</span>  for pattern in patterns:<span class="pl-cce">\r\n</span>    if re.search(pattern,  text):<span class="pl-cce">\r\n</span>        return (&#39;Matched!&#39;)<span class="pl-cce">\r\n</span>    else:<span class="pl-cce">\r\n</span>        return (&#39;Not Matched!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">186</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_literals(&#39;The quick brown fox jumps over the lazy dog.&#39;,[&#39;fox&#39;]) == &#39;Matched!&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_literals(&#39;The quick brown fox jumps over the lazy dog.&#39;,[&#39;horse&#39;]) == &#39;Not Matched!&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_literals(&#39;The quick brown fox jumps over the lazy dog.&#39;,[&#39;lazy&#39;]) == &#39;Matched!&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L187" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="187"></td>
          <td id="LC187" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the longest common subsequence for the given two sequences.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def longest_common_subsequence(X, Y, m, n): <span class="pl-cce">\r\n</span>    if m == 0 or n == 0: <span class="pl-cce">\r\n</span>       return 0 <span class="pl-cce">\r\n</span>    elif X[m-1] == Y[n-1]: <span class="pl-cce">\r\n</span>       return 1 + longest_common_subsequence(X, Y, m-1, n-1) <span class="pl-cce">\r\n</span>    else: <span class="pl-cce">\r\n</span>       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">187</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert longest_common_subsequence(<span class="pl-cce">\&quot;</span>AGGTAB<span class="pl-cce">\&quot;</span> , <span class="pl-cce">\&quot;</span>GXTXAYB<span class="pl-cce">\&quot;</span>, 6, 7) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert longest_common_subsequence(<span class="pl-cce">\&quot;</span>ABCDGH<span class="pl-cce">\&quot;</span> , <span class="pl-cce">\&quot;</span>AEDFHR<span class="pl-cce">\&quot;</span>, 6, 6) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert longest_common_subsequence(<span class="pl-cce">\&quot;</span>AXYT<span class="pl-cce">\&quot;</span> , <span class="pl-cce">\&quot;</span>AYZX<span class="pl-cce">\&quot;</span>, 4, 4) == 2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L188" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="188"></td>
          <td id="LC188" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether the given number can be represented by product of two squares or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def prod_Square(n):<span class="pl-cce">\r\n</span>    for i in range(2,(n) + 1):<span class="pl-cce">\r\n</span>        if (i*i &lt; (n+1)):<span class="pl-cce">\r\n</span>            for j in range(2,n + 1):<span class="pl-cce">\r\n</span>                if ((i*i*j*j) == n):<span class="pl-cce">\r\n</span>                    return True;<span class="pl-cce">\r\n</span>    return False;<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">188</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert prod_Square(25) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert prod_Square(30) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert prod_Square(16) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L189" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="189"></td>
          <td id="LC189" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the first missing positive number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def first_Missing_Positive(arr,n): <span class="pl-cce">\r\n</span>    ptr = 0<span class="pl-cce">\r\n</span>    for i in range(n):<span class="pl-cce">\r\n</span>        if arr[i] == 1:<span class="pl-cce">\r\n</span>            ptr = 1<span class="pl-cce">\r\n</span>            break<span class="pl-cce">\r\n</span>    if ptr == 0:<span class="pl-cce">\r\n</span>        return(1)<span class="pl-cce">\r\n</span>    for i in range(n):<span class="pl-cce">\r\n</span>        if arr[i] &lt;= 0 or arr[i] &gt; n:<span class="pl-cce">\r\n</span>            arr[i] = 1<span class="pl-cce">\r\n</span>    for i in range(n):<span class="pl-cce">\r\n</span>        arr[(arr[i] - 1) % n] += n<span class="pl-cce">\r\n</span>    for i in range(n):<span class="pl-cce">\r\n</span>        if arr[i] &lt;= n:<span class="pl-cce">\r\n</span>            return(i + 1)<span class="pl-cce">\r\n</span>    return(n + 1)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">189</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert first_Missing_Positive([1,2,3,-1,5],5) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert first_Missing_Positive([0,1,2,5,-8],5) == 3<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L190" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="190"></td>
          <td id="LC190" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count the number of integral co-ordinates that lie inside a square.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_Intgral_Points(x1,y1,x2,y2): <span class="pl-cce">\r\n</span>    return ((y2 - y1 - 1) * (x2 - x1 - 1)) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">190</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Intgral_Points(1,1,4,4) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Intgral_Points(1,2,1,2) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Intgral_Points(4,2,6,4) == 1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L191" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="191"></td>
          <td id="LC191" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check whether the given month name contains 30 days or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_monthnumber(monthname3):<span class="pl-cce">\r\n</span>  if monthname3 ==<span class="pl-cce">\&quot;</span>April<span class="pl-cce">\&quot;</span> or monthname3== <span class="pl-cce">\&quot;</span>June<span class="pl-cce">\&quot;</span> or monthname3== <span class="pl-cce">\&quot;</span>September<span class="pl-cce">\&quot;</span> or monthname3== <span class="pl-cce">\&quot;</span>November<span class="pl-cce">\&quot;</span>:<span class="pl-cce">\r\n</span>    return True<span class="pl-cce">\r\n</span>  else:<span class="pl-cce">\r\n</span>    return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">191</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_monthnumber(<span class="pl-cce">\&quot;</span>February<span class="pl-cce">\&quot;</span>)==False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_monthnumber(<span class="pl-cce">\&quot;</span>June<span class="pl-cce">\&quot;</span>)==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_monthnumber(<span class="pl-cce">\&quot;</span>April<span class="pl-cce">\&quot;</span>)==True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L192" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="192"></td>
          <td id="LC192" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether a string has atleast one letter and one number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_String(str): <span class="pl-cce">\r\n</span>    flag_l = False<span class="pl-cce">\r\n</span>    flag_n = False<span class="pl-cce">\r\n</span>    for i in str: <span class="pl-cce">\r\n</span>        if i.isalpha(): <span class="pl-cce">\r\n</span>            flag_l = True  <span class="pl-cce">\r\n</span>        if i.isdigit(): <span class="pl-cce">\r\n</span>            flag_n = True<span class="pl-cce">\r\n</span>    return flag_l and flag_n <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">192</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_String(&#39;thishasboth29&#39;) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_String(&#39;python&#39;) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_String (&#39;string&#39;) == False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L193" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="193"></td>
          <td id="LC193" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to remove the duplicates from the given tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def remove_tuple(test_tup):<span class="pl-cce">\r\n</span>  res = tuple(set(test_tup))<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">193</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L194" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="194"></td>
          <td id="LC194" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to convert octal number to decimal number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def octal_To_Decimal(n):  <span class="pl-cce">\r\n</span>    num = n; <span class="pl-cce">\r\n</span>    dec_value = 0; <span class="pl-cce">\r\n</span>    base = 1; <span class="pl-cce">\r\n</span>    temp = num; <span class="pl-cce">\r\n</span>    while (temp): <span class="pl-cce">\r\n</span>        last_digit = temp % 10; <span class="pl-cce">\r\n</span>        temp = int(temp / 10); <span class="pl-cce">\r\n</span>        dec_value += last_digit*base; <span class="pl-cce">\r\n</span>        base = base * 8; <span class="pl-cce">\r\n</span>    return dec_value; <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">194</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert octal_To_Decimal(25) == 21<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert octal_To_Decimal(30) == 24<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert octal_To_Decimal(40) == 32<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L195" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="195"></td>
          <td id="LC195" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the first position of an element in a sorted array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def first(arr,x,n): <span class="pl-cce">\r\n</span>    low = 0<span class="pl-cce">\r\n</span>    high = n - 1<span class="pl-cce">\r\n</span>    res = -1  <span class="pl-cce">\r\n</span>    while (low &lt;= high):<span class="pl-cce">\r\n</span>        mid = (low + high) // 2 <span class="pl-cce">\r\n</span>        if arr[mid] &gt; x:<span class="pl-cce">\r\n</span>            high = mid - 1<span class="pl-cce">\r\n</span>        elif arr[mid] &lt; x:<span class="pl-cce">\r\n</span>            low = mid + 1<span class="pl-cce">\r\n</span>        else:<span class="pl-cce">\r\n</span>            res = mid<span class="pl-cce">\r\n</span>            high = mid - 1<span class="pl-cce">\r\n</span>    return res<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">195</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert first([1,2,3,4,5,6,6],6,6) == 5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert first([1,2,2,2,3,2,2,4,2],2,9) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert first([1,2,3],1,3) == 0<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L196" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="196"></td>
          <td id="LC196" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to remove all the tuples with length k.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def remove_tuples(test_list, K):<span class="pl-cce">\r\n</span>  res = [ele for ele in test_list if len(ele) != K]<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">196</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L197" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="197"></td>
          <td id="LC197" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to perform the exponentiation of the given two tuples.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_exponentio(test_tup1, test_tup2):<span class="pl-cce">\r\n</span>  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))<span class="pl-cce">\r\n</span>  return (res)<span class="pl-cce">\r\n</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">197</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L198" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="198"></td>
          <td id="LC198" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the largest triangle that can be inscribed in an ellipse.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math<span class="pl-cce">\r\n</span>def largest_triangle(a,b): <span class="pl-cce">\r\n</span>    if (a &lt; 0 or b &lt; 0): <span class="pl-cce">\r\n</span>        return -1 <span class="pl-cce">\r\n</span>    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  <span class="pl-cce">\r\n</span>    return area <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">198</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert largest_triangle(4,2)==10.392304845413264<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert largest_triangle(5,7)==4.639421805988064<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert largest_triangle(9,1)==105.2220865598093<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L199" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="199"></td>
          <td id="LC199" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find highest power of 2 less than or equal to given number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def highest_Power_of_2(n): <span class="pl-cce">\r\n</span>    res = 0; <span class="pl-cce">\r\n</span>    for i in range(n, 0, -1):  <span class="pl-cce">\r\n</span>        if ((i &amp; (i - 1)) == 0): <span class="pl-cce">\r\n</span>            res = i; <span class="pl-cce">\r\n</span>            break;      <span class="pl-cce">\r\n</span>    return res; <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">199</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert highest_Power_of_2(10) == 8<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert highest_Power_of_2(19) == 16<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert highest_Power_of_2(32) == 32<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L200" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="200"></td>
          <td id="LC200" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find all index positions of the maximum values in a given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def position_max(list1):<span class="pl-cce">\r\n</span>    max_val = max(list1)<span class="pl-cce">\r\n</span>    max_result = [i for i, j in enumerate(list1) if j == max_val]<span class="pl-cce">\r\n</span>    return max_result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">200</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L201" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="201"></td>
          <td id="LC201" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether the elements in a list are same or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def chkList(lst): <span class="pl-cce">\r\n</span>    return len(set(lst)) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">201</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert chkList([&#39;one&#39;,&#39;one&#39;,&#39;one&#39;]) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert chkList([&#39;one&#39;,&#39;Two&#39;,&#39;Three&#39;]) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert chkList([&#39;bigdata&#39;,&#39;python&#39;,&#39;Django&#39;]) == False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L202" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="202"></td>
          <td id="LC202" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to remove even characters in a string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def remove_even(str1):<span class="pl-cce">\r\n</span> str2 = &#39;&#39;<span class="pl-cce">\r\n</span> for i in range(1, len(str1) + 1):<span class="pl-cce">\r\n</span>    if(i % 2 != 0):<span class="pl-cce">\r\n</span>        str2 = str2 + str1[i - 1]<span class="pl-cce">\r\n</span> return str2<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">202</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_even(<span class="pl-cce">\&quot;</span>python<span class="pl-cce">\&quot;</span>)==(<span class="pl-cce">\&quot;</span>pto<span class="pl-cce">\&quot;</span>)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_even(<span class="pl-cce">\&quot;</span>program<span class="pl-cce">\&quot;</span>)==(<span class="pl-cce">\&quot;</span>porm<span class="pl-cce">\&quot;</span>)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_even(<span class="pl-cce">\&quot;</span>language<span class="pl-cce">\&quot;</span>)==(<span class="pl-cce">\&quot;</span>lnug<span class="pl-cce">\&quot;</span>)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L203" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="203"></td>
          <td id="LC203" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the hamming distance between given two integers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def hamming_Distance(n1,n2) : <span class="pl-cce">\r\n</span>    x = n1 ^ n2  <span class="pl-cce">\r\n</span>    setBits = 0<span class="pl-cce">\r\n</span>    while (x &gt; 0) : <span class="pl-cce">\r\n</span>        setBits += x &amp; 1<span class="pl-cce">\r\n</span>        x &gt;&gt;= 1<span class="pl-cce">\r\n</span>    return setBits  <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">203</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert hamming_Distance(4,8) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert hamming_Distance(2,4) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert hamming_Distance(1,2) == 2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L204" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="204"></td>
          <td id="LC204" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count the occurrence of a given character in a string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count(s,c) : <span class="pl-cce">\r\n</span>    res = 0 <span class="pl-cce">\r\n</span>    for i in range(len(s)) : <span class="pl-cce">\r\n</span>        if (s[i] == c): <span class="pl-cce">\r\n</span>            res = res + 1<span class="pl-cce">\r\n</span>    return res <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">204</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count(<span class="pl-cce">\&quot;</span>abcc<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>c<span class="pl-cce">\&quot;</span>) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count(<span class="pl-cce">\&quot;</span>ababca<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>a<span class="pl-cce">\&quot;</span>) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count(<span class="pl-cce">\&quot;</span>mnmm0pm<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>m<span class="pl-cce">\&quot;</span>) == 4<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L205" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="205"></td>
          <td id="LC205" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the inversions of tuple elements in the given tuple list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def inversion_elements(test_tup):<span class="pl-cce">\r\n</span>  res = tuple(list(map(lambda x: ~x, list(test_tup))))<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">205</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L206" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="206"></td>
          <td id="LC206" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to perform the adjacent element concatenation in the given tuples.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def concatenate_elements(test_tup):<span class="pl-cce">\r\n</span>  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">206</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert concatenate_elements((<span class="pl-cce">\&quot;</span>DSP <span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>IS <span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>BEST <span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>FOR <span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>ALL <span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>UTS<span class="pl-cce">\&quot;</span>)) == (&#39;DSP IS &#39;, &#39;IS BEST &#39;, &#39;BEST FOR &#39;, &#39;FOR ALL &#39;, &#39;ALL UTS&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert concatenate_elements((<span class="pl-cce">\&quot;</span>RES <span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>IS <span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>BEST <span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>FOR <span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>ALL <span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>QESR<span class="pl-cce">\&quot;</span>)) == (&#39;RES IS &#39;, &#39;IS BEST &#39;, &#39;BEST FOR &#39;, &#39;FOR ALL &#39;, &#39;ALL QESR&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert concatenate_elements((<span class="pl-cce">\&quot;</span>MSAM<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>IS <span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>BEST <span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>FOR <span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>ALL <span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>SKD<span class="pl-cce">\&quot;</span>)) == (&#39;MSAMIS &#39;, &#39;IS BEST &#39;, &#39;BEST FOR &#39;, &#39;FOR ALL &#39;, &#39;ALL SKD&#39;)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L207" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="207"></td>
          <td id="LC207" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to count the longest repeating subsequences such that the two subsequences don<span class="pl-cce">\u2019</span>t have same string characters at same positions.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_longest_repeating_subseq(str): <span class="pl-cce">\r\n\t</span>n = len(str) <span class="pl-cce">\r\n\t</span>dp = [[0 for k in range(n+1)] for l in range(n+1)] <span class="pl-cce">\r\n\t</span>for i in range(1, n+1): <span class="pl-cce">\r\n\t\t</span>for j in range(1, n+1): <span class="pl-cce">\r\n\t\t\t</span>if (str[i-1] == str[j-1] and i != j): <span class="pl-cce">\r\n\t\t\t\t</span>dp[i][j] = 1 + dp[i-1][j-1] <span class="pl-cce">\r\n\t\t\t</span>else: <span class="pl-cce">\r\n\t\t\t\t</span>dp[i][j] = max(dp[i][j-1], dp[i-1][j]) <span class="pl-cce">\r\n\t</span>return dp[n][n]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">207</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_longest_repeating_subseq(<span class="pl-cce">\&quot;</span>AABEBCDD<span class="pl-cce">\&quot;</span>) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_longest_repeating_subseq(<span class="pl-cce">\&quot;</span>aabb<span class="pl-cce">\&quot;</span>) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_longest_repeating_subseq(<span class="pl-cce">\&quot;</span>aab<span class="pl-cce">\&quot;</span>) == 1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L208" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="208"></td>
          <td id="LC208" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check the given decimal with a precision of 2 by using regex.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def is_decimal(num):<span class="pl-cce">\r\n</span>  num_fetch = re.compile(r<span class="pl-cce">\&quot;\&quot;\&quot;</span>^[0-9]+(<span class="pl-cce">\\</span>.[0-9]{1,2})?$<span class="pl-cce">\&quot;\&quot;\&quot;</span>)<span class="pl-cce">\r\n</span>  result = num_fetch.search(num)<span class="pl-cce">\r\n</span>  return bool(result)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">208</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert is_decimal(&#39;123.11&#39;) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_decimal(&#39;0.21&#39;) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_decimal(&#39;123.1214&#39;) == False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L209" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="209"></td>
          <td id="LC209" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to delete the smallest element from the given heap and then insert a new item.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import heapq as hq<span class="pl-cce">\r\n</span>def heap_replace(heap,a):<span class="pl-cce">\r\n</span>  hq.heapify(heap)<span class="pl-cce">\r\n</span>  hq.heapreplace(heap, a)<span class="pl-cce">\r\n</span>  return heap<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">209</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L210" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="210"></td>
          <td id="LC210" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def is_allowed_specific_char(string):<span class="pl-cce">\r\n</span>    get_char = re.compile(r&#39;[^a-zA-Z0-9.]&#39;)<span class="pl-cce">\r\n</span>    string = get_char.search(string)<span class="pl-cce">\r\n</span>    return not bool(string)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">210</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert is_allowed_specific_char(<span class="pl-cce">\&quot;</span>ABCDEFabcdef123450<span class="pl-cce">\&quot;</span>) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_allowed_specific_char(<span class="pl-cce">\&quot;</span>*&amp;%@#!}{<span class="pl-cce">\&quot;</span>) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_allowed_specific_char(<span class="pl-cce">\&quot;</span>HELLOhowareyou98765<span class="pl-cce">\&quot;</span>) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L211" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="211"></td>
          <td id="LC211" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count numbers whose oth and nth bits are set.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_Num(n): <span class="pl-cce">\r\n</span>    if (n == 1): <span class="pl-cce">\r\n</span>        return 1<span class="pl-cce">\r\n</span>    count = pow(2,n - 2) <span class="pl-cce">\r\n</span>    return count <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">211</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Num(2) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Num(3) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Num(1) == 1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L212" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="212"></td>
          <td id="LC212" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the sum of fourth power of n natural numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math  <span class="pl-cce">\r\n</span>def fourth_Power_Sum(n): <span class="pl-cce">\r\n</span>    sum = 0<span class="pl-cce">\r\n</span>    for i in range(1,n+1) : <span class="pl-cce">\r\n</span>        sum = sum + (i*i*i*i) <span class="pl-cce">\r\n</span>    return sum<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">212</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert fourth_Power_Sum(2) == 17<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert fourth_Power_Sum(4) == 354<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert fourth_Power_Sum(6) == 2275<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L213" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="213"></td>
          <td id="LC213" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to perform the concatenation of two string tuples.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def concatenate_strings(test_tup1, test_tup2):<span class="pl-cce">\r\n</span>  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">213</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert concatenate_strings((<span class="pl-cce">\&quot;</span>Manjeet<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>Nikhil<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>Akshat<span class="pl-cce">\&quot;</span>), (<span class="pl-cce">\&quot;</span> Singh<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span> Meherwal<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span> Garg<span class="pl-cce">\&quot;</span>)) == (&#39;Manjeet Singh&#39;, &#39;Nikhil Meherwal&#39;, &#39;Akshat Garg&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert concatenate_strings((<span class="pl-cce">\&quot;</span>Shaik<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>Ayesha<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>Sanya<span class="pl-cce">\&quot;</span>), (<span class="pl-cce">\&quot;</span> Dawood<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span> Begum<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span> Singh<span class="pl-cce">\&quot;</span>)) == (&#39;Shaik Dawood&#39;, &#39;Ayesha Begum&#39;, &#39;Sanya Singh&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert concatenate_strings((<span class="pl-cce">\&quot;</span>Harpreet<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>Priyanka<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>Muskan<span class="pl-cce">\&quot;</span>), (<span class="pl-cce">\&quot;</span>Kour<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span> Agarwal<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>Sethi<span class="pl-cce">\&quot;</span>)) == (&#39;HarpreetKour&#39;, &#39;Priyanka Agarwal&#39;, &#39;MuskanSethi&#39;)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L214" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="214"></td>
          <td id="LC214" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to convert radians to degrees.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math<span class="pl-cce">\r\n</span>def degree_radian(radian):<span class="pl-cce">\r\n</span> degree = radian*(180/math.pi)<span class="pl-cce">\r\n</span> return degree<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">214</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert degree_radian(90)==5156.620156177409<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert degree_radian(60)==3437.746770784939<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert degree_radian(120)==6875.493541569878<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L215" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="215"></td>
          <td id="LC215" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to decode a run-length encoded given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def decode_list(alist):<span class="pl-cce">\r\n</span>    def aux(g):<span class="pl-cce">\r\n</span>        if isinstance(g, list):<span class="pl-cce">\r\n</span>            return [(g[1], range(g[0]))]<span class="pl-cce">\r\n</span>        else:<span class="pl-cce">\r\n</span>            return [(g, [0])]<span class="pl-cce">\r\n</span>    return [x for g in alist for x, R in aux(g) for i in R]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">215</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert decode_list([&#39;a&#39;, &#39;u&#39;, &#39;t&#39;, &#39;o&#39;, &#39;m&#39;, &#39;a&#39;, &#39;t&#39;, &#39;i&#39;, &#39;c&#39;, &#39;a&#39;, [2, &#39;l&#39;], &#39;y&#39;])==[&#39;a&#39;, &#39;u&#39;, &#39;t&#39;, &#39;o&#39;, &#39;m&#39;, &#39;a&#39;, &#39;t&#39;, &#39;i&#39;, &#39;c&#39;, &#39;a&#39;, &#39;l&#39;, &#39;l&#39;, &#39;y&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert decode_list([&#39;p&#39;, &#39;y&#39;, &#39;t&#39;, &#39;h&#39;, &#39;o&#39;, &#39;n&#39;])==[&#39;p&#39;, &#39;y&#39;, &#39;t&#39;, &#39;h&#39;, &#39;o&#39;, &#39;n&#39;]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L216" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="216"></td>
          <td id="LC216" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check if a nested list is a subset of another nested list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_subset_list(list1, list2): <span class="pl-cce">\r\n</span>    l1, l2 = list1[0], list2[0] <span class="pl-cce">\r\n</span>    exist = True<span class="pl-cce">\r\n</span>    for i in list2: <span class="pl-cce">\r\n</span>        if i not in list1: <span class="pl-cce">\r\n</span>            exist = False<span class="pl-cce">\r\n</span>    return exist <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">216</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_subset_list([[&#39;a&#39;, &#39;b&#39;], [&#39;e&#39;], [&#39;c&#39;, &#39;d&#39;]],[[&#39;g&#39;]])==False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L217" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="217"></td>
          <td id="LC217" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the first repeated character in a given string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def first_Repeated_Char(str): <span class="pl-cce">\r\n</span>    h = {}<span class="pl-cce">\r\n</span>    for ch in str:<span class="pl-cce">\r\n</span>        if ch in h: <span class="pl-cce">\r\n</span>            return ch;<span class="pl-cce">\r\n</span>        else: <span class="pl-cce">\r\n</span>            h[ch] = 0<span class="pl-cce">\r\n</span>    return &#39;<span class="pl-cce">\\</span>0&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">217</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert first_Repeated_Char(<span class="pl-cce">\&quot;</span>Google<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>o<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert first_Repeated_Char(<span class="pl-cce">\&quot;</span>data<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>a<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert first_Repeated_Char(<span class="pl-cce">\&quot;</span>python<span class="pl-cce">\&quot;</span>) == &#39;<span class="pl-cce">\\</span>0&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L218" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="218"></td>
          <td id="LC218" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the minimum operations required to make two numbers equal.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math   <span class="pl-cce">\r\n</span>def min_Operations(A,B):  <span class="pl-cce">\r\n</span>    if (A &gt; B): <span class="pl-cce">\r\n</span>        swap(A,B)  <span class="pl-cce">\r\n</span>    B = B // math.gcd(A,B);  <span class="pl-cce">\r\n</span>    return B - 1<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">218</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert min_Operations(2,4) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_Operations(4,10) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_Operations(1,4) == 3<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L219" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="219"></td>
          <td id="LC219" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to extract maximum and minimum k elements in the given tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\r\n</span>def extract_min_max(test_tup, K):<span class="pl-cce">\r\n</span>  res = []<span class="pl-cce">\r\n</span>  test_tup = list(test_tup)<span class="pl-cce">\r\n</span>  temp = sorted(test_tup)<span class="pl-cce">\r\n</span>  for idx, val in enumerate(temp):<span class="pl-cce">\r\n</span>    if idx &lt; K or idx &gt;= len(temp) - K:<span class="pl-cce">\r\n</span>      res.append(val)<span class="pl-cce">\r\n</span>  res = tuple(res)<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">219</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L220" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="220"></td>
          <td id="LC220" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def replace_max_specialchar(text,n):<span class="pl-cce">\r\n</span> return (re.sub(<span class="pl-cce">\&quot;</span>[ ,.]<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>:<span class="pl-cce">\&quot;</span>, text, n))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">220</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert replace_max_specialchar(&#39;Python language, Programming language.&#39;,2)==(&#39;Python:language: Programming language.&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert replace_max_specialchar(&#39;a b c,d e f&#39;,3)==(&#39;a:b:c:d e f&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert replace_max_specialchar(&#39;ram reshma,ram rahim&#39;,1)==(&#39;ram:reshma,ram rahim&#39;)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L221" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="221"></td>
          <td id="LC221" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the first even number in a given list of numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def first_even(nums):<span class="pl-cce">\r\n</span>    first_even = next((el for el in nums if el%2==0),-1)<span class="pl-cce">\r\n</span>    return first_even<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">221</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert first_even([2, 3, 4]) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert first_even([5, 6, 7]) == 6<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L222" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="222"></td>
          <td id="LC222" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check if all the elements in tuple have same data type or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_type(test_tuple):<span class="pl-cce">\r\n</span>  res = True<span class="pl-cce">\r\n</span>  for ele in test_tuple:<span class="pl-cce">\r\n</span>    if not isinstance(ele, type(test_tuple[0])):<span class="pl-cce">\r\n</span>      res = False<span class="pl-cce">\r\n</span>      break<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">222</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_type((5, 6, 7, 3, 5, 6) ) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_type((1, 2, <span class="pl-cce">\&quot;</span>4<span class="pl-cce">\&quot;</span>) ) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_type((3, 2, 1, 4, 5) ) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L223" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="223"></td>
          <td id="LC223" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check for majority element in the given sorted array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def is_majority(arr, n, x):<span class="pl-cce">\r\n\t</span>i = binary_search(arr, 0, n-1, x)<span class="pl-cce">\r\n\t</span>if i == -1:<span class="pl-cce">\r\n\t\t</span>return False<span class="pl-cce">\r\n\t</span>if ((i + n//2) &lt;= (n -1)) and arr[i + n//2] == x:<span class="pl-cce">\r\n\t\t</span>return True<span class="pl-cce">\r\n\t</span>else:<span class="pl-cce">\r\n\t\t</span>return False<span class="pl-cce">\r\n</span>def binary_search(arr, low, high, x):<span class="pl-cce">\r\n\t</span>if high &gt;= low:<span class="pl-cce">\r\n\t\t</span>mid = (low + high)//2 <span class="pl-cce">\r\n\t\t</span>if (mid == 0 or x &gt; arr[mid-1]) and (arr[mid] == x):<span class="pl-cce">\r\n\t\t\t</span>return mid<span class="pl-cce">\r\n\t\t</span>elif x &gt; arr[mid]:<span class="pl-cce">\r\n\t\t\t</span>return binary_search(arr, (mid + 1), high, x)<span class="pl-cce">\r\n\t\t</span>else:<span class="pl-cce">\r\n\t\t\t</span>return binary_search(arr, low, (mid -1), x)<span class="pl-cce">\r\n\t</span>return -1<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">223</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_majority([1, 1, 1, 2, 2], 5, 1) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L224" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="224"></td>
          <td id="LC224" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count set bits of a given number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_Set_Bits(n): <span class="pl-cce">\r\n</span>    count = 0<span class="pl-cce">\r\n</span>    while (n): <span class="pl-cce">\r\n</span>        count += n &amp; 1<span class="pl-cce">\r\n</span>        n &gt;&gt;= 1<span class="pl-cce">\r\n</span>    return count <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">224</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Set_Bits(2) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Set_Bits(4) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Set_Bits(6) == 2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L225" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="225"></td>
          <td id="LC225" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the minimum element in a sorted and rotated array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_Min(arr,low,high): <span class="pl-cce">\r\n</span>    while (low &lt; high): <span class="pl-cce">\r\n</span>        mid = low + (high - low) // 2;   <span class="pl-cce">\r\n</span>        if (arr[mid] == arr[high]): <span class="pl-cce">\r\n</span>            high -= 1; <span class="pl-cce">\r\n</span>        elif (arr[mid] &gt; arr[high]): <span class="pl-cce">\r\n</span>            low = mid + 1; <span class="pl-cce">\r\n</span>        else: <span class="pl-cce">\r\n</span>            high = mid; <span class="pl-cce">\r\n</span>    return arr[high]; <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">225</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Min([1,2,3,4,5],0,4) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Min([4,6,8],0,2) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Min([2,3,5,7,9],0,4) == 2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L226" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="226"></td>
          <td id="LC226" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to remove the characters which have odd index values of a given string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def odd_values_string(str):<span class="pl-cce">\r\n</span>  result = <span class="pl-cce">\&quot;\&quot;</span> <span class="pl-cce">\r\n</span>  for i in range(len(str)):<span class="pl-cce">\r\n</span>    if i % 2 == 0:<span class="pl-cce">\r\n</span>      result = result + str[i]<span class="pl-cce">\r\n</span>  return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">226</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert odd_values_string(&#39;abcdef&#39;) == &#39;ace&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert odd_values_string(&#39;python&#39;) == &#39;pto&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert odd_values_string(&#39;data&#39;) == &#39;dt&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L227" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="227"></td>
          <td id="LC227" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find minimum of three numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def min_of_three(a,b,c): <span class="pl-cce">\r\n</span>      if (a &lt;= b) and (a &lt;= c): <span class="pl-cce">\r\n</span>        smallest = a <span class="pl-cce">\r\n</span>      elif (b &lt;= a) and (b &lt;= c): <span class="pl-cce">\r\n</span>        smallest = b <span class="pl-cce">\r\n</span>      else: <span class="pl-cce">\r\n</span>        smallest = c <span class="pl-cce">\r\n</span>      return smallest <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">227</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert min_of_three(10,20,0)==0<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_of_three(19,15,18)==15<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_of_three(-10,-20,-30)==-30<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L228" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="228"></td>
          <td id="LC228" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether all the bits are unset in the given range or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def all_Bits_Set_In_The_Given_Range(n,l,r):  <span class="pl-cce">\r\n</span>    num = (((1 &lt;&lt; r) - 1) ^ ((1 &lt;&lt; (l - 1)) - 1)) <span class="pl-cce">\r\n</span>    new_num = n &amp; num<span class="pl-cce">\r\n</span>    if (new_num == 0): <span class="pl-cce">\r\n</span>        return True<span class="pl-cce">\r\n</span>    return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">228</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert all_Bits_Set_In_The_Given_Range(4,1,2) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert all_Bits_Set_In_The_Given_Range(17,2,4) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert all_Bits_Set_In_The_Given_Range(39,4,6) == False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L229" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="229"></td>
          <td id="LC229" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def re_arrange_array(arr, n):<span class="pl-cce">\r\n</span>  j=0<span class="pl-cce">\r\n</span>  for i in range(0, n):<span class="pl-cce">\r\n</span>    if (arr[i] &lt; 0):<span class="pl-cce">\r\n</span>      temp = arr[i]<span class="pl-cce">\r\n</span>      arr[i] = arr[j]<span class="pl-cce">\r\n</span>      arr[j] = temp<span class="pl-cce">\r\n</span>      j = j + 1<span class="pl-cce">\r\n</span>  return arr<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">229</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L230" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="230"></td>
          <td id="LC230" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to replace blank spaces with any character in a string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def replace_blank(str1,char):<span class="pl-cce">\r\n</span> str2 = str1.replace(&#39; &#39;, char)<span class="pl-cce">\r\n</span> return str2<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">230</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert replace_blank(<span class="pl-cce">\&quot;</span>hello people<span class="pl-cce">\&quot;</span>,&#39;@&#39;)==(<span class="pl-cce">\&quot;</span>hello@people<span class="pl-cce">\&quot;</span>)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert replace_blank(<span class="pl-cce">\&quot;</span>python program language<span class="pl-cce">\&quot;</span>,&#39;$&#39;)==(<span class="pl-cce">\&quot;</span>python$program$language<span class="pl-cce">\&quot;</span>)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert replace_blank(<span class="pl-cce">\&quot;</span>blank space<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>-<span class="pl-cce">\&quot;</span>)==(<span class="pl-cce">\&quot;</span>blank-space<span class="pl-cce">\&quot;</span>)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L231" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="231"></td>
          <td id="LC231" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the maximum sum in the given right triangle of numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def max_sum(tri, n): <span class="pl-cce">\r\n\t</span>if n &gt; 1: <span class="pl-cce">\r\n\t\t</span>tri[1][1] = tri[1][1]+tri[0][0] <span class="pl-cce">\r\n\t\t</span>tri[1][0] = tri[1][0]+tri[0][0] <span class="pl-cce">\r\n\t</span>for i in range(2, n): <span class="pl-cce">\r\n\t\t</span>tri[i][0] = tri[i][0] + tri[i-1][0] <span class="pl-cce">\r\n\t\t</span>tri[i][i] = tri[i][i] + tri[i-1][i-1] <span class="pl-cce">\r\n\t\t</span>for j in range(1, i): <span class="pl-cce">\r\n\t\t\t</span>if tri[i][j]+tri[i-1][j-1] &gt;= tri[i][j]+tri[i-1][j]: <span class="pl-cce">\r\n\t\t\t\t</span>tri[i][j] = tri[i][j] + tri[i-1][j-1] <span class="pl-cce">\r\n\t\t\t</span>else: <span class="pl-cce">\r\n\t\t\t\t</span>tri[i][j] = tri[i][j]+tri[i-1][j] <span class="pl-cce">\r\n\t</span>return (max(tri[n-1]))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">231</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert max_sum([[1], [2,1], [3,3,2]], 3) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_sum([[2], [3,2], [13,23,12]], 3) == 28<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L232" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="232"></td>
          <td id="LC232" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to get the n largest items from a dataset.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import heapq<span class="pl-cce">\r\n</span>def larg_nnum(list1,n):<span class="pl-cce">\r\n</span> largest=heapq.nlargest(n,list1)<span class="pl-cce">\r\n</span> return largest<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">232</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L233" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="233"></td>
          <td id="LC233" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the lateral surface area of a cylinder.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def lateralsuface_cylinder(r,h):<span class="pl-cce">\r\n</span>  lateralsurface= 2*3.1415*r*h<span class="pl-cce">\r\n</span>  return lateralsurface<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">233</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert lateralsuface_cylinder(10,5)==314.15000000000003<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert lateralsuface_cylinder(4,5)==125.66000000000001<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert lateralsuface_cylinder(4,10)==251.32000000000002<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L234" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="234"></td>
          <td id="LC234" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the volume of a cube.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def volume_cube(l):<span class="pl-cce">\r\n</span>  volume = l * l * l<span class="pl-cce">\r\n</span>  return volume<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">234</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert volume_cube(3)==27<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert volume_cube(2)==8<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert volume_cube(5)==125<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L235" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="235"></td>
          <td id="LC235" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to set all even bits of a given number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def even_bit_set_number(n): <span class="pl-cce">\r\n</span>    count = 0;res = 0;temp = n <span class="pl-cce">\r\n</span>    while(temp &gt; 0): <span class="pl-cce">\r\n</span>        if (count % 2 == 1): <span class="pl-cce">\r\n</span>            res |= (1 &lt;&lt; count)<span class="pl-cce">\r\n</span>        count+=1<span class="pl-cce">\r\n</span>        temp &gt;&gt;= 1<span class="pl-cce">\r\n</span>    return (n | res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">235</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert even_bit_set_number(10) == 10<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert even_bit_set_number(20) == 30<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert even_bit_set_number(30) == 30<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L236" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="236"></td>
          <td id="LC236" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def No_of_Triangle(N,K):<span class="pl-cce">\r\n</span>    if (N &lt; K):<span class="pl-cce">\r\n</span>        return -1;<span class="pl-cce">\r\n</span>    else:<span class="pl-cce">\r\n</span>        Tri_up = 0;<span class="pl-cce">\r\n</span>        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;<span class="pl-cce">\r\n</span>        Tri_down = 0;<span class="pl-cce">\r\n</span>        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;<span class="pl-cce">\r\n</span>        return Tri_up + Tri_down;<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">236</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert No_of_Triangle(4,2) == 7<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert No_of_Triangle(4,3) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert No_of_Triangle(1,3) == -1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L237" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="237"></td>
          <td id="LC237" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check the occurrences of records which occur similar times in the given tuples.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from collections import Counter <span class="pl-cce">\r\n</span>def check_occurences(test_list):<span class="pl-cce">\r\n</span>  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))<span class="pl-cce">\r\n</span>  return  (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">237</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L238" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="238"></td>
          <td id="LC238" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count number of non-empty substrings of a given string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def number_of_substrings(str): <span class="pl-cce">\r\n\t</span>str_len = len(str); <span class="pl-cce">\r\n\t</span>return int(str_len * (str_len + 1) / 2); <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">238</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert number_of_substrings(<span class="pl-cce">\&quot;</span>abc<span class="pl-cce">\&quot;</span>) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert number_of_substrings(<span class="pl-cce">\&quot;</span>abcd<span class="pl-cce">\&quot;</span>) == 10<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert number_of_substrings(<span class="pl-cce">\&quot;</span>abcde<span class="pl-cce">\&quot;</span>) == 15<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L239" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="239"></td>
          <td id="LC239" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def get_total_number_of_sequences(m,n): <span class="pl-cce">\r\n\t</span>T=[[0 for i in range(n+1)] for i in range(m+1)] <span class="pl-cce">\r\n\t</span>for i in range(m+1): <span class="pl-cce">\r\n\t\t</span>for j in range(n+1): <span class="pl-cce">\r\n\t\t\t</span>if i==0 or j==0: <span class="pl-cce">\r\n\t\t\t\t</span>T[i][j]=0<span class="pl-cce">\r\n\t\t\t</span>elif i&lt;j: <span class="pl-cce">\r\n\t\t\t\t</span>T[i][j]=0<span class="pl-cce">\r\n\t\t\t</span>elif j==1: <span class="pl-cce">\r\n\t\t\t\t</span>T[i][j]=i <span class="pl-cce">\r\n\t\t\t</span>else: <span class="pl-cce">\r\n\t\t\t\t</span>T[i][j]=T[i-1][j]+T[i//2][j-1] <span class="pl-cce">\r\n\t</span>return T[m][n]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">239</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert get_total_number_of_sequences(10, 4) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_total_number_of_sequences(5, 2) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_total_number_of_sequences(16, 3) == 84<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L240" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="240"></td>
          <td id="LC240" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to replace the last element of the list with another list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def replace_list(list1,list2):<span class="pl-cce">\r\n</span> list1[-1:] = list2<span class="pl-cce">\r\n</span> replace_list=list1<span class="pl-cce">\r\n</span> return replace_list<span class="pl-cce">\r\n</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">240</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert replace_list([<span class="pl-cce">\&quot;</span>red<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>blue<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>green<span class="pl-cce">\&quot;</span>],[<span class="pl-cce">\&quot;</span>yellow<span class="pl-cce">\&quot;</span>])==[<span class="pl-cce">\&quot;</span>red<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>blue<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>yellow<span class="pl-cce">\&quot;</span>]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L241" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="241"></td>
          <td id="LC241" class="blob-code blob-code-inner js-file-line">{&quot;text&quot;: &quot;Write a function to generate a 3d array having each element as &#39;*&#39;.&quot;, &quot;code&quot;: &quot;def array_3d(m,n,o):\r\n array_3d = [[ [&#39;*&#39; for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d&quot;, &quot;task_id&quot;: 241, &quot;test_setup_code&quot;: &quot;&quot;, &quot;test_list&quot;: [&quot;assert array_3d(6,4,3)==[[[&#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;], [&#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;], [&#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;], [&#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;]], [[&#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;], [&#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;], [&#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;], [&#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;]], [[&#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;], [&#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;], [&#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;], [&#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;]]]&quot;, &quot;assert array_3d(5,3,4)==[[[&#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;], [&#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;,&#39;*&#39;], [&#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;]], [[&#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;],[&#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;], [&#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;]], [[&#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;], [&#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;], [&#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;]], [[&#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;], [&#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;], [&#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;, &#39;*&#39;]]]&quot;, &quot;assert array_3d(1,2,3)==[[[&#39;*&#39;],[&#39;*&#39;]],[[&#39;*&#39;],[&#39;*&#39;]],[[&#39;*&#39;],[&#39;*&#39;]]]&quot;], &quot;challenge_test_list&quot;: []}</td>
        </tr>
        <tr>
          <td id="L242" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="242"></td>
          <td id="LC242" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to count total characters in a string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_charac(str1):<span class="pl-cce">\r\n</span> total = 0<span class="pl-cce">\r\n</span> for i in str1:<span class="pl-cce">\r\n</span>    total = total + 1<span class="pl-cce">\r\n</span> return total<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">242</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_charac(<span class="pl-cce">\&quot;</span>python programming<span class="pl-cce">\&quot;</span>)==18<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_charac(<span class="pl-cce">\&quot;</span>language<span class="pl-cce">\&quot;</span>)==8<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_charac(<span class="pl-cce">\&quot;</span>words<span class="pl-cce">\&quot;</span>)==5<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L243" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="243"></td>
          <td id="LC243" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to sort the given list based on the occurrence of first element of tuples.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sort_on_occurence(lst): <span class="pl-cce">\r\n\t</span>dct = {} <span class="pl-cce">\r\n\t</span>for i, j in lst: <span class="pl-cce">\r\n\t\t</span>dct.setdefault(i, []).append(j) <span class="pl-cce">\r\n\t</span>return ([(i, *dict.fromkeys(j), len(j)) <span class="pl-cce">\r\n\t\t\t\t</span>for i, j in dct.items()]) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">243</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_on_occurence([(1, &#39;Jake&#39;), (2, &#39;Bob&#39;), (1, &#39;Cara&#39;)]) == [(1, &#39;Jake&#39;, &#39;Cara&#39;, 2), (2, &#39;Bob&#39;, 1)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_on_occurence([(&#39;b&#39;, &#39;ball&#39;), (&#39;a&#39;, &#39;arm&#39;), (&#39;b&#39;, &#39;b&#39;), (&#39;a&#39;, &#39;ant&#39;)]) == [(&#39;b&#39;, &#39;ball&#39;, &#39;b&#39;, 2), (&#39;a&#39;, &#39;arm&#39;, &#39;ant&#39;, 2)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_on_occurence([(2, &#39;Mark&#39;), (3, &#39;Maze&#39;), (2, &#39;Sara&#39;)]) == [(2, &#39;Mark&#39;, &#39;Sara&#39;, 2), (3, &#39;Maze&#39;, 1)]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L244" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="244"></td>
          <td id="LC244" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the next perfect square greater than a given number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math  <span class="pl-cce">\r\n</span>def next_Perfect_Square(N): <span class="pl-cce">\r\n</span>    nextN = math.floor(math.sqrt(N)) + 1<span class="pl-cce">\r\n</span>    return nextN * nextN <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">244</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert next_Perfect_Square(35) == 36<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert next_Perfect_Square(6) == 9<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert next_Perfect_Square(9) == 16<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L245" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="245"></td>
          <td id="LC245" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def max_sum(arr, n): <span class="pl-cce">\r\n\t</span>MSIBS = arr[:] <span class="pl-cce">\r\n\t</span>for i in range(n): <span class="pl-cce">\r\n\t\t</span>for j in range(0, i): <span class="pl-cce">\r\n\t\t\t</span>if arr[i] &gt; arr[j] and MSIBS[i] &lt; MSIBS[j] + arr[i]: <span class="pl-cce">\r\n\t\t\t\t</span>MSIBS[i] = MSIBS[j] + arr[i] <span class="pl-cce">\r\n\t</span>MSDBS = arr[:] <span class="pl-cce">\r\n\t</span>for i in range(1, n + 1): <span class="pl-cce">\r\n\t\t</span>for j in range(1, i): <span class="pl-cce">\r\n\t\t\t</span>if arr[-i] &gt; arr[-j] and MSDBS[-i] &lt; MSDBS[-j] + arr[-i]: <span class="pl-cce">\r\n\t\t\t\t</span>MSDBS[-i] = MSDBS[-j] + arr[-i] <span class="pl-cce">\r\n\t</span>max_sum = float(<span class="pl-cce">\&quot;</span>-Inf<span class="pl-cce">\&quot;</span>) <span class="pl-cce">\r\n\t</span>for i, j, k in zip(MSIBS, MSDBS, arr): <span class="pl-cce">\r\n\t\t</span>max_sum = max(max_sum, i + j - k) <span class="pl-cce">\r\n\t</span>return max_sum<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">245</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_sum([80, 60, 30, 40, 20, 10], 6) == 210<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L246" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="246"></td>
          <td id="LC246" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function for computing square roots using the babylonian method.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def babylonian_squareroot(number):<span class="pl-cce">\r\n</span>    if(number == 0):<span class="pl-cce">\r\n</span>        return 0;<span class="pl-cce">\r\n</span>    g = number/2.0;<span class="pl-cce">\r\n</span>    g2 = g + 1;<span class="pl-cce">\r\n</span>    while(g != g2):<span class="pl-cce">\r\n</span>        n = number/ g;<span class="pl-cce">\r\n</span>        g2 = g;<span class="pl-cce">\r\n</span>        g = (g + n)/2;<span class="pl-cce">\r\n</span>    return g;<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">246</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert babylonian_squareroot(10)==3.162277660168379<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert babylonian_squareroot(2)==1.414213562373095<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert babylonian_squareroot(9)==3.0<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L247" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="247"></td>
          <td id="LC247" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the longest palindromic subsequence in the given string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def lps(str): <span class="pl-cce">\r\n\t</span>n = len(str) <span class="pl-cce">\r\n\t</span>L = [[0 for x in range(n)] for x in range(n)] <span class="pl-cce">\r\n\t</span>for i in range(n): <span class="pl-cce">\r\n\t\t</span>L[i][i] = 1<span class="pl-cce">\r\n\t</span>for cl in range(2, n+1): <span class="pl-cce">\r\n\t\t</span>for i in range(n-cl+1): <span class="pl-cce">\r\n\t\t\t</span>j = i+cl-1<span class="pl-cce">\r\n\t\t\t</span>if str[i] == str[j] and cl == 2: <span class="pl-cce">\r\n\t\t\t\t</span>L[i][j] = 2<span class="pl-cce">\r\n\t\t\t</span>elif str[i] == str[j]: <span class="pl-cce">\r\n\t\t\t\t</span>L[i][j] = L[i+1][j-1] + 2<span class="pl-cce">\r\n\t\t\t</span>else: <span class="pl-cce">\r\n\t\t\t\t</span>L[i][j] = max(L[i][j-1], L[i+1][j]); <span class="pl-cce">\r\n\t</span>return L[0][n-1]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">247</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert lps(<span class="pl-cce">\&quot;</span>TENS FOR TENS<span class="pl-cce">\&quot;</span>) == 5 <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert lps(<span class="pl-cce">\&quot;</span>CARDIO FOR CARDS<span class="pl-cce">\&quot;</span>) == 7<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert lps(<span class="pl-cce">\&quot;</span>PART OF THE JOURNEY IS PART<span class="pl-cce">\&quot;</span>) == 9 <span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L248" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="248"></td>
          <td id="LC248" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to calculate the harmonic sum of n-1.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def harmonic_sum(n):<span class="pl-cce">\r\n</span>  if n &lt; 2:<span class="pl-cce">\r\n</span>    return 1<span class="pl-cce">\r\n</span>  else:<span class="pl-cce">\r\n</span>    return 1 / n + (harmonic_sum(n - 1)) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">248</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert harmonic_sum(7) == 2.5928571428571425<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert harmonic_sum(4) == 2.083333333333333<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert harmonic_sum(19) == 3.547739657143682<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L249" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="249"></td>
          <td id="LC249" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the intersection of two arrays using lambda function.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def intersection_array(array_nums1,array_nums2):<span class="pl-cce">\r\n</span> result = list(filter(lambda x: x in array_nums1, array_nums2)) <span class="pl-cce">\r\n</span> return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">249</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L250" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="250"></td>
          <td id="LC250" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count the occcurences of an element in a tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_X(tup, x): <span class="pl-cce">\r\n</span>    count = 0<span class="pl-cce">\r\n</span>    for ele in tup: <span class="pl-cce">\r\n</span>        if (ele == x): <span class="pl-cce">\r\n</span>            count = count + 1<span class="pl-cce">\r\n</span>    return count <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">250</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L251" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="251"></td>
          <td id="LC251" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to insert an element before each element of a list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def insert_element(list,element):<span class="pl-cce">\r\n</span> list = [v for elt in list for v in (element, elt)]<span class="pl-cce">\r\n</span> return list<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">251</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert insert_element([&#39;Red&#39;, &#39;Green&#39;, &#39;Black&#39;] ,&#39;c&#39;)==[&#39;c&#39;, &#39;Red&#39;, &#39;c&#39;, &#39;Green&#39;, &#39;c&#39;, &#39;Black&#39;] <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert insert_element([&#39;python&#39;, &#39;java&#39;] ,&#39;program&#39;)==[&#39;program&#39;, &#39;python&#39;, &#39;program&#39;, &#39;java&#39;] <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert insert_element([&#39;happy&#39;, &#39;sad&#39;] ,&#39;laugh&#39;)==[&#39;laugh&#39;, &#39;happy&#39;, &#39;laugh&#39;, &#39;sad&#39;] <span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L252" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="252"></td>
          <td id="LC252" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to convert complex numbers to polar coordinates.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import cmath  <span class="pl-cce">\r\n</span>def convert(numbers):    <span class="pl-cce">\r\n</span>  num = cmath.polar(numbers)  <span class="pl-cce">\r\n</span>  return (num) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">252</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert convert(1) == (1.0, 0.0)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert convert(4) == (4.0,0.0)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert convert(5) == (5.0,0.0)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L253" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="253"></td>
          <td id="LC253" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count integers from a given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_integer(list1):<span class="pl-cce">\r\n</span>    ctr = 0<span class="pl-cce">\r\n</span>    for i in list1:<span class="pl-cce">\r\n</span>        if isinstance(i, int):<span class="pl-cce">\r\n</span>            ctr = ctr + 1<span class="pl-cce">\r\n</span>    return ctr<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">253</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_integer([1,2,&#39;abc&#39;,1.2]) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_integer([1,2,3]) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_integer([1,1.2,4,5.1]) == 2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L254" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="254"></td>
          <td id="LC254" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find all words starting with &#39;a&#39; or &#39;e&#39; in a given string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def words_ae(text):<span class="pl-cce">\r\n</span> list = re.findall(<span class="pl-cce">\&quot;</span>[ae]<span class="pl-cce">\\</span>w+<span class="pl-cce">\&quot;</span>, text)<span class="pl-cce">\r\n</span> return list<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">254</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert words_ae(<span class="pl-cce">\&quot;</span>python programe<span class="pl-cce">\&quot;</span>)==[&#39;ame&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert words_ae(<span class="pl-cce">\&quot;</span>python programe language<span class="pl-cce">\&quot;</span>)==[&#39;ame&#39;,&#39;anguage&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert words_ae(<span class="pl-cce">\&quot;</span>assert statement<span class="pl-cce">\&quot;</span>)==[&#39;assert&#39;, &#39;atement&#39;]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L255" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="255"></td>
          <td id="LC255" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from itertools import combinations_with_replacement <span class="pl-cce">\r\n</span>def combinations_colors(l, n):<span class="pl-cce">\r\n</span>    return list(combinations_with_replacement(l,n))<span class="pl-cce">\r</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">255</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert combinations_colors( [<span class="pl-cce">\&quot;</span>Red<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>Green<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>Blue<span class="pl-cce">\&quot;</span>],1)==[(&#39;Red&#39;,), (&#39;Green&#39;,), (&#39;Blue&#39;,)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert combinations_colors( [<span class="pl-cce">\&quot;</span>Red<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>Green<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>Blue<span class="pl-cce">\&quot;</span>],2)==[(&#39;Red&#39;, &#39;Red&#39;), (&#39;Red&#39;, &#39;Green&#39;), (&#39;Red&#39;, &#39;Blue&#39;), (&#39;Green&#39;, &#39;Green&#39;), (&#39;Green&#39;, &#39;Blue&#39;), (&#39;Blue&#39;, &#39;Blue&#39;)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert combinations_colors( [<span class="pl-cce">\&quot;</span>Red<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>Green<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>Blue<span class="pl-cce">\&quot;</span>],3)==[(&#39;Red&#39;, &#39;Red&#39;, &#39;Red&#39;), (&#39;Red&#39;, &#39;Red&#39;, &#39;Green&#39;), (&#39;Red&#39;, &#39;Red&#39;, &#39;Blue&#39;), (&#39;Red&#39;, &#39;Green&#39;, &#39;Green&#39;), (&#39;Red&#39;, &#39;Green&#39;, &#39;Blue&#39;), (&#39;Red&#39;, &#39;Blue&#39;, &#39;Blue&#39;), (&#39;Green&#39;, &#39;Green&#39;, &#39;Green&#39;), (&#39;Green&#39;, &#39;Green&#39;, &#39;Blue&#39;), (&#39;Green&#39;, &#39;Blue&#39;, &#39;Blue&#39;), (&#39;Blue&#39;, &#39;Blue&#39;, &#39;Blue&#39;)]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L256" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="256"></td>
          <td id="LC256" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count the number of prime numbers less than a given non-negative number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_Primes_nums(n):<span class="pl-cce">\r\n</span>    ctr = 0<span class="pl-cce">\r\n</span>    for num in range(n):<span class="pl-cce">\r\n</span>        if num &lt;= 1:<span class="pl-cce">\r\n</span>            continue<span class="pl-cce">\r\n</span>        for i in range(2,num):<span class="pl-cce">\r\n</span>            if (num % i) == 0:<span class="pl-cce">\r\n</span>                break<span class="pl-cce">\r\n</span>        else:<span class="pl-cce">\r\n</span>            ctr += 1<span class="pl-cce">\r\n</span>    return ctr<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">256</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Primes_nums(5) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Primes_nums(10) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Primes_nums(100) == 25<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L257" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="257"></td>
          <td id="LC257" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to swap two numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def swap_numbers(a,b):<span class="pl-cce">\r\n</span> temp = a<span class="pl-cce">\r\n</span> a = b<span class="pl-cce">\r\n</span> b = temp<span class="pl-cce">\r\n</span> return (a,b)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">257</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert swap_numbers(10,20)==(20,10)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert swap_numbers(15,17)==(17,15)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert swap_numbers(100,200)==(200,100)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L258" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="258"></td>
          <td id="LC258" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find number of odd elements in the given list using lambda function.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_odd(array_nums):<span class="pl-cce">\r\n</span>   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))<span class="pl-cce">\r\n</span>   return count_odd<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">258</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_odd([1, 2, 3, 5, 7, 8, 10])==4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_odd([10,15,14,13,-18,12,-20])==2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_odd([1, 2, 4, 8, 9])==2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L259" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="259"></td>
          <td id="LC259" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to maximize the given two tuples.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def maximize_elements(test_tup1, test_tup2):<span class="pl-cce">\r\n</span>  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))<span class="pl-cce">\r\n</span>   for tup1, tup2 in zip(test_tup1, test_tup2))<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">259</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L260" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="260"></td>
          <td id="LC260" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the nth newman<span class="pl-cce">\u2013</span>shanks<span class="pl-cce">\u2013</span>williams prime number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def newman_prime(n): <span class="pl-cce">\r\n\t</span>if n == 0 or n == 1: <span class="pl-cce">\r\n\t\t</span>return 1<span class="pl-cce">\r\n\t</span>return 2 * newman_prime(n - 1) + newman_prime(n - 2)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">260</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert newman_prime(3) == 7 <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert newman_prime(4) == 17<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert newman_prime(5) == 41<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L261" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="261"></td>
          <td id="LC261" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to perform mathematical division operation across the given tuples.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def division_elements(test_tup1, test_tup2):<span class="pl-cce">\r\n</span>  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">261</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L262" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="262"></td>
          <td id="LC262" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to split a given list into two parts where the length of the first part of the list is given.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def split_two_parts(list1, L):<span class="pl-cce">\r\n</span>    return list1[:L], list1[L:]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">262</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert split_two_parts([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;],2)==([&#39;a&#39;, &#39;b&#39;], [&#39;c&#39;, &#39;d&#39;])<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert split_two_parts([&#39;p&#39;, &#39;y&#39;, &#39;t&#39;, &#39;h&#39;, &#39;o&#39;, &#39;n&#39;],4)==([&#39;p&#39;, &#39;y&#39;, &#39;t&#39;, &#39;h&#39;], [&#39;o&#39;, &#39;n&#39;])<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L263" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="263"></td>
          <td id="LC263" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to merge two dictionaries.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def merge_dict(d1,d2):<span class="pl-cce">\r\n</span> d = d1.copy()<span class="pl-cce">\r\n</span> d.update(d2)<span class="pl-cce">\r\n</span> return d<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">263</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert merge_dict({&#39;a&#39;: 100, &#39;b&#39;: 200},{&#39;x&#39;: 300, &#39;y&#39;: 200})=={&#39;x&#39;: 300, &#39;y&#39;: 200, &#39;a&#39;: 100, &#39;b&#39;: 200}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert merge_dict({&#39;a&#39;:900,&#39;b&#39;:900,&#39;d&#39;:900},{&#39;a&#39;:900,&#39;b&#39;:900,&#39;d&#39;:900})=={&#39;a&#39;:900,&#39;b&#39;:900,&#39;d&#39;:900,&#39;a&#39;:900,&#39;b&#39;:900,&#39;d&#39;:900}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert merge_dict({&#39;a&#39;:10,&#39;b&#39;:20},{&#39;x&#39;:30,&#39;y&#39;:40})=={&#39;x&#39;:30,&#39;y&#39;:40,&#39;a&#39;:10,&#39;b&#39;:20}<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L264" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="264"></td>
          <td id="LC264" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to calculate a dog&#39;s age in dog&#39;s years.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def dog_age(h_age):<span class="pl-cce">\r\n</span> if h_age &lt; 0:<span class="pl-cce">\r\n</span> <span class="pl-cce">\t</span>exit()<span class="pl-cce">\r\n</span> elif h_age &lt;= 2:<span class="pl-cce">\r\n\t</span> d_age = h_age * 10.5<span class="pl-cce">\r\n</span> else:<span class="pl-cce">\r\n\t</span> d_age = 21 + (h_age - 2)*4<span class="pl-cce">\r\n</span> return d_age<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">264</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert dog_age(12)==61<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert dog_age(15)==73<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert dog_age(24)==109<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L265" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="265"></td>
          <td id="LC265" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to split a list for every nth element.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def list_split(S, step):<span class="pl-cce">\r\n</span>    return [S[i::step] for i in range(step)]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">265</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert list_split([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;],3)==[[&#39;a&#39;, &#39;d&#39;, &#39;g&#39;, &#39;j&#39;, &#39;m&#39;], [&#39;b&#39;, &#39;e&#39;, &#39;h&#39;, &#39;k&#39;, &#39;n&#39;], [&#39;c&#39;, &#39;f&#39;, &#39;i&#39;, &#39;l&#39;]] <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert list_split([&#39;python&#39;,&#39;java&#39;,&#39;C&#39;,&#39;C++&#39;,&#39;DBMS&#39;,&#39;SQL&#39;],2)==[[&#39;python&#39;, &#39;C&#39;, &#39;DBMS&#39;], [&#39;java&#39;, &#39;C++&#39;, &#39;SQL&#39;]] <span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L266" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="266"></td>
          <td id="LC266" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the lateral surface area of a cube.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def lateralsurface_cube(l):<span class="pl-cce">\r\n</span>  LSA = 4 * (l * l)<span class="pl-cce">\r\n</span>  return LSA<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">266</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert lateralsurface_cube(5)==100<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert lateralsurface_cube(9)==324<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert lateralsurface_cube(10)==400<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L267" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="267"></td>
          <td id="LC267" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the sum of squares of first n odd natural numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def square_Sum(n):  <span class="pl-cce">\r\n</span>    return int(n*(4*n*n-1)/3) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">267</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert square_Sum(2) == 10<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert square_Sum(3) == 35<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert square_Sum(4) == 84<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L268" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="268"></td>
          <td id="LC268" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the n&#39;th star number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_star_num(n): <span class="pl-cce">\r\n\t</span>return (6 * n * (n - 1) + 1) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">268</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_star_num(3) == 37<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_star_num(4) == 73<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_star_num(5) == 121<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L269" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="269"></td>
          <td id="LC269" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the ascii value of a character.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def ascii_value(k):<span class="pl-cce">\r\n</span>  ch=k<span class="pl-cce">\r\n</span>  return ord(ch)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">269</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert ascii_value(&#39;A&#39;)==65<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert ascii_value(&#39;R&#39;)==82<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert ascii_value(&#39;S&#39;)==83<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L270" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="270"></td>
          <td id="LC270" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the sum of even numbers at even positions.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sum_even_and_even_index(arr,n):  <span class="pl-cce">\r\n</span>    i = 0<span class="pl-cce">\r\n</span>    sum = 0<span class="pl-cce">\r\n</span>    for i in range(0,n,2): <span class="pl-cce">\r\n</span>        if (arr[i] % 2 == 0) : <span class="pl-cce">\r\n</span>            sum += arr[i]  <span class="pl-cce">\r\n</span>    return sum<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">270</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_even_and_even_index([5, 6, 12, 1],4) == 12<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L271" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="271"></td>
          <td id="LC271" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the sum of fifth power of first n even natural numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def even_Power_Sum(n): <span class="pl-cce">\r\n</span>    sum = 0; <span class="pl-cce">\r\n</span>    for i in range(1,n+1): <span class="pl-cce">\r\n</span>        j = 2*i; <span class="pl-cce">\r\n</span>        sum = sum + (j*j*j*j*j); <span class="pl-cce">\r\n</span>    return sum; <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">271</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert even_Power_Sum(2) == 1056<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert even_Power_Sum(3) == 8832<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert even_Power_Sum(1) == 32<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L272" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="272"></td>
          <td id="LC272" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to perfom the rear element extraction from list of tuples records.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def rear_extract(test_list):<span class="pl-cce">\r\n</span>  res = [lis[-1] for lis in test_list]<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">272</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert rear_extract([(1, &#39;Rash&#39;, 21), (2, &#39;Varsha&#39;, 20), (3, &#39;Kil&#39;, 19)]) == [21, 20, 19]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert rear_extract([(1, &#39;Sai&#39;, 36), (2, &#39;Ayesha&#39;, 25), (3, &#39;Salman&#39;, 45)]) == [36, 25, 45]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert rear_extract([(1, &#39;Sudeep&#39;, 14), (2, &#39;Vandana&#39;, 36), (3, &#39;Dawood&#39;, 56)]) == [14, 36, 56]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L273" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="273"></td>
          <td id="LC273" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to substract the contents of one tuple with corresponding index of other tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def substract_elements(test_tup1, test_tup2):<span class="pl-cce">\r\n</span>  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">273</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L274" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="274"></td>
          <td id="LC274" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find sum of even index binomial coefficients.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math  <span class="pl-cce">\r\n</span>def even_binomial_Coeff_Sum( n): <span class="pl-cce">\r\n</span>    return (1 &lt;&lt; (n - 1)) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">274</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert even_binomial_Coeff_Sum(4) == 8<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert even_binomial_Coeff_Sum(6) == 32<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert even_binomial_Coeff_Sum(2) == 2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L275" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="275"></td>
          <td id="LC275" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the position of the last removed element from the given array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math as mt <span class="pl-cce">\r\n</span>def get_Position(a,n,m): <span class="pl-cce">\r\n</span>    for i in range(n): <span class="pl-cce">\r\n</span>        a[i] = (a[i] // m + (a[i] % m != 0))  <span class="pl-cce">\r\n</span>    result,maxx = -1,-1<span class="pl-cce">\r\n</span>    for i in range(n - 1,-1,-1): <span class="pl-cce">\r\n</span>        if (maxx &lt; a[i]): <span class="pl-cce">\r\n</span>            maxx = a[i] <span class="pl-cce">\r\n</span>            result = i <span class="pl-cce">\r\n</span>    return result + 1<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">275</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert get_Position([2,5,4],3,2) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_Position([4,3],2,2) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_Position([1,2,3,4],4,1) == 4<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L276" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="276"></td>
          <td id="LC276" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the volume of a cylinder.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def volume_cylinder(r,h):<span class="pl-cce">\r\n</span>  volume=3.1415*r*r*h<span class="pl-cce">\r\n</span>  return volume<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">276</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert volume_cylinder(10,5)==1570.7500000000002<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert volume_cylinder(4,5)==251.32000000000002<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert volume_cylinder(4,10)==502.64000000000004<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L277" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="277"></td>
          <td id="LC277" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to filter a dictionary based on values.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def dict_filter(dict,n):<span class="pl-cce">\r\n</span> result = {key:value for (key, value) in dict.items() if value &gt;=n}<span class="pl-cce">\r\n</span> return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">277</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert dict_filter({&#39;Cierra Vega&#39;: 175, &#39;Alden Cantrell&#39;: 180, &#39;Kierra Gentry&#39;: 165, &#39;Pierre Cox&#39;: 190},170)=={&#39;Cierra Vega&#39;: 175, &#39;Alden Cantrell&#39;: 180, &#39;Pierre Cox&#39;: 190}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert dict_filter({&#39;Cierra Vega&#39;: 175, &#39;Alden Cantrell&#39;: 180, &#39;Kierra Gentry&#39;: 165, &#39;Pierre Cox&#39;: 190},180)=={ &#39;Alden Cantrell&#39;: 180, &#39;Pierre Cox&#39;: 190}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert dict_filter({&#39;Cierra Vega&#39;: 175, &#39;Alden Cantrell&#39;: 180, &#39;Kierra Gentry&#39;: 165, &#39;Pierre Cox&#39;: 190},190)=={ &#39;Pierre Cox&#39;: 190}<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L278" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="278"></td>
          <td id="LC278" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the element count that occurs before the record in the given tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_first_elements(test_tup):<span class="pl-cce">\r\n</span>  for count, ele in enumerate(test_tup):<span class="pl-cce">\r\n</span>    if isinstance(ele, tuple):<span class="pl-cce">\r\n</span>      break<span class="pl-cce">\r\n</span>  return (count) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">278</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_first_elements((2, 9, (5, 7), 11) ) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L279" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="279"></td>
          <td id="LC279" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the nth decagonal number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def is_num_decagonal(n): <span class="pl-cce">\r\n\t</span>return 4 * n * n - 3 * n <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">279</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert is_num_decagonal(3) == 27<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_num_decagonal(7) == 175<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_num_decagonal(10) == 370<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L280" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="280"></td>
          <td id="LC280" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to search an element in the given array by using sequential search.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sequential_search(dlist, item):<span class="pl-cce">\r\n</span>    pos = 0<span class="pl-cce">\r\n</span>    found = False<span class="pl-cce">\r\n</span>    while pos &lt; len(dlist) and not found:<span class="pl-cce">\r\n</span>        if dlist[pos] == item:<span class="pl-cce">\r\n</span>            found = True<span class="pl-cce">\r\n</span>        else:<span class="pl-cce">\r\n</span>            pos = pos + 1<span class="pl-cce">\r\n</span>    return found, pos<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">280</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L281" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="281"></td>
          <td id="LC281" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check if the elements of a given list are unique or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def all_unique(test_list):<span class="pl-cce">\r\n</span>    if len(test_list) &gt; len(set(test_list)):<span class="pl-cce">\r\n</span>        return False<span class="pl-cce">\r\n</span>    return True<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">281</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert all_unique([1,2,3]) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert all_unique([1,2,1,2]) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert all_unique([1,2,3,4,5]) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L282" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="282"></td>
          <td id="LC282" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to substaract two lists using map and lambda function.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sub_list(nums1,nums2):<span class="pl-cce">\r\n</span>  result = map(lambda x, y: x - y, nums1, nums2)<span class="pl-cce">\r\n</span>  return list(result)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">282</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sub_list([1,2],[3,4])==[-2,-2]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sub_list([90,120],[50,70])==[40,50]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L283" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="283"></td>
          <td id="LC283" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def validate(n): <span class="pl-cce">\r\n</span>    for i in range(10): <span class="pl-cce">\r\n</span>        temp = n;  <span class="pl-cce">\r\n</span>        count = 0; <span class="pl-cce">\r\n</span>        while (temp): <span class="pl-cce">\r\n</span>            if (temp % 10 == i): <span class="pl-cce">\r\n</span>                count+=1;  <span class="pl-cce">\r\n</span>            if (count &gt; i): <span class="pl-cce">\r\n</span>                return False<span class="pl-cce">\r\n</span>            temp //= 10; <span class="pl-cce">\r\n</span>    return True<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">283</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert validate(1234) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert validate(51241) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert validate(321) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L284" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="284"></td>
          <td id="LC284" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check whether all items of a list are equal to a given string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_element(list,element):<span class="pl-cce">\r\n</span>  check_element=all(v== element for v in list)<span class="pl-cce">\r\n</span>  return check_element<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">284</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_element([<span class="pl-cce">\&quot;</span>green<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>orange<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>black<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>white<span class="pl-cce">\&quot;</span>],&#39;blue&#39;)==False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_element([1,2,3,4],7)==False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_element([<span class="pl-cce">\&quot;</span>green<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>green<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>green<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>green<span class="pl-cce">\&quot;</span>],&#39;green&#39;)==True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L285" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="285"></td>
          <td id="LC285" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function that matches a string that has an a followed by two to three &#39;b&#39;.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def text_match_two_three(text):<span class="pl-cce">\r\n</span>        patterns = &#39;ab{2,3}&#39;<span class="pl-cce">\r\n</span>        if re.search(patterns,  text):<span class="pl-cce">\r\n</span>                return &#39;Found a match!&#39;<span class="pl-cce">\r\n</span>        else:<span class="pl-cce">\r\n</span>                return(&#39;Not matched!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">285</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match_two_three(<span class="pl-cce">\&quot;</span>ac<span class="pl-cce">\&quot;</span>)==(&#39;Not matched!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match_two_three(<span class="pl-cce">\&quot;</span>dc<span class="pl-cce">\&quot;</span>)==(&#39;Not matched!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match_two_three(<span class="pl-cce">\&quot;</span>abbbba<span class="pl-cce">\&quot;</span>)==(&#39;Found a match!&#39;)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L286" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="286"></td>
          <td id="LC286" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def max_sub_array_sum_repeated(a, n, k): <span class="pl-cce">\r\n\t</span>max_so_far = -2147483648<span class="pl-cce">\r\n\t</span>max_ending_here = 0<span class="pl-cce">\r\n\t</span>for i in range(n*k): <span class="pl-cce">\r\n\t\t</span>max_ending_here = max_ending_here + a[i%n] <span class="pl-cce">\r\n\t\t</span>if (max_so_far &lt; max_ending_here): <span class="pl-cce">\r\n\t\t\t</span>max_so_far = max_ending_here <span class="pl-cce">\r\n\t\t</span>if (max_ending_here &lt; 0): <span class="pl-cce">\r\n\t\t\t</span>max_ending_here = 0<span class="pl-cce">\r\n\t</span>return max_so_far<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">286</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L287" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="287"></td>
          <td id="LC287" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the sum of squares of first n even natural numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def square_Sum(n):  <span class="pl-cce">\r\n</span>    return int(2*n*(n+1)*(2*n+1)/3)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">287</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert square_Sum(2) == 20<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert square_Sum(3) == 56<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert square_Sum(4) == 120<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L288" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="288"></td>
          <td id="LC288" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to count array elements having modular inverse under given prime number p equal to itself.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def modular_inverse(arr, N, P):<span class="pl-cce">\r\n\t</span>current_element = 0<span class="pl-cce">\r\n\t</span>for i in range(0, N):<span class="pl-cce">\r\n\t\t</span>if ((arr[i] * arr[i]) % P == 1):<span class="pl-cce">\r\n\t\t\t</span>current_element = current_element + 1<span class="pl-cce">\r\n\t</span>return current_element<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">288</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert modular_inverse([2, 3, 4, 5], 4, 6) == 1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L289" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="289"></td>
          <td id="LC289" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to calculate the number of odd days in a given year.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def odd_Days(N): <span class="pl-cce">\r\n</span>    hund1 = N // 100<span class="pl-cce">\r\n</span>    hund4 = N // 400<span class="pl-cce">\r\n</span>    leap = N &gt;&gt; 2<span class="pl-cce">\r\n</span>    ordd = N - leap <span class="pl-cce">\r\n</span>    if (hund1): <span class="pl-cce">\r\n</span>        ordd += hund1 <span class="pl-cce">\r\n</span>        leap -= hund1 <span class="pl-cce">\r\n</span>    if (hund4): <span class="pl-cce">\r\n</span>        ordd -= hund4 <span class="pl-cce">\r\n</span>        leap += hund4 <span class="pl-cce">\r\n</span>    days = ordd + leap * 2<span class="pl-cce">\r\n</span>    odd = days % 7<span class="pl-cce">\r\n</span>    return odd <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">289</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert odd_Days(100) == 5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert odd_Days(50) ==6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert odd_Days(75) == 2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L290" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="290"></td>
          <td id="LC290" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the list of lists with maximum length.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def max_length(list1):<span class="pl-cce">\r\n</span>    max_length = max(len(x) for x in  list1 )  <span class="pl-cce">\r\n</span>    max_list = max((x) for x in   list1)<span class="pl-cce">\r\n</span>    return(max_length, max_list)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">290</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_length([[5], [15,20,25]])==(3, [15,20,25])<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L291" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="291"></td>
          <td id="LC291" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_no_of_ways(n, k): <span class="pl-cce">\r\n\t</span>dp = [0] * (n + 1) <span class="pl-cce">\r\n\t</span>total = k <span class="pl-cce">\r\n\t</span>mod = 1000000007<span class="pl-cce">\r\n\t</span>dp[1] = k <span class="pl-cce">\r\n\t</span>dp[2] = k * k<span class="pl-cce">\t</span> <span class="pl-cce">\r\n\t</span>for i in range(3,n+1): <span class="pl-cce">\r\n\t\t</span>dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod <span class="pl-cce">\r\n\t</span>return dp[n]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">291</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_no_of_ways(2, 4) == 16<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_no_of_ways(3, 2) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_no_of_ways(4, 4) == 228<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L292" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="292"></td>
          <td id="LC292" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find quotient of two numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find(n,m):  <span class="pl-cce">\r\n</span>    q = n//m <span class="pl-cce">\r\n</span>    return (q)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">292</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find(10,3) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find(4,2) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find(20,5) == 4<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L293" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="293"></td>
          <td id="LC293" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the third side of a right angled triangle.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math<span class="pl-cce">\r\n</span>def otherside_rightangle(w,h):<span class="pl-cce">\r\n</span>  s=math.sqrt((w*w)+(h*h))<span class="pl-cce">\r\n</span>  return s<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">293</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert otherside_rightangle(7,8)==10.63014581273465<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert otherside_rightangle(3,4)==5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert otherside_rightangle(7,15)==16.55294535724685<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L294" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="294"></td>
          <td id="LC294" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the maximum value in a given heterogeneous list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def max_val(listval):<span class="pl-cce">\r\n</span>     max_val = max(i for i in listval if isinstance(i, int)) <span class="pl-cce">\r\n</span>     return(max_val)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">294</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert max_val([&#39;Python&#39;, 3, 2, 4, 5, &#39;version&#39;])==5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_val([&#39;Python&#39;, 15, 20, 25])==25<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_val([&#39;Python&#39;, 30, 20, 40, 50, &#39;version&#39;])==50<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L295" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="295"></td>
          <td id="LC295" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to return the sum of all divisors of a number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sum_div(number):<span class="pl-cce">\r\n</span>    divisors = [1]<span class="pl-cce">\r\n</span>    for i in range(2, number):<span class="pl-cce">\r\n</span>        if (number % i)==0:<span class="pl-cce">\r\n</span>            divisors.append(i)<span class="pl-cce">\r\n</span>    return sum(divisors)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">295</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_div(8)==7<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_div(12)==16<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_div(7)==1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L296" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="296"></td>
          <td id="LC296" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count inversions in an array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def get_Inv_Count(arr,n): <span class="pl-cce">\r\n</span>    inv_count = 0<span class="pl-cce">\r\n</span>    for i in range(n): <span class="pl-cce">\r\n</span>        for j in range(i + 1,n): <span class="pl-cce">\r\n</span>            if (arr[i] &gt; arr[j]): <span class="pl-cce">\r\n</span>                inv_count += 1<span class="pl-cce">\r\n</span>    return inv_count <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">296</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert get_Inv_Count([1,20,6,4,5],5) == 5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_Inv_Count([1,2,1],3) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_Inv_Count([1,2,5,6,1],5) == 3<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L297" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="297"></td>
          <td id="LC297" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to flatten a given nested list structure.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def flatten_list(list1):<span class="pl-cce">\r\n</span>    result_list = []<span class="pl-cce">\r\n</span>    if not list1: return result_list<span class="pl-cce">\r\n</span>    stack = [list(list1)]<span class="pl-cce">\r\n</span>    while stack:<span class="pl-cce">\r\n</span>        c_num = stack.pop()<span class="pl-cce">\r\n</span>        next = c_num.pop()<span class="pl-cce">\r\n</span>        if c_num: stack.append(c_num)<span class="pl-cce">\r\n</span>        if isinstance(next, list):<span class="pl-cce">\r\n</span>            if next: stack.append(list(next))<span class="pl-cce">\r\n</span>        else: result_list.append(next)<span class="pl-cce">\r\n</span>    result_list.reverse()<span class="pl-cce">\r\n</span>    return result_list <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">297</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L298" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="298"></td>
          <td id="LC298" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the nested list elements which are present in another list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def intersection_nested_lists(l1, l2):<span class="pl-cce">\r\n</span>    result = [[n for n in lst if n in l1] for lst in l2]<span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">298</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert intersection_nested_lists([&#39;john&#39;,&#39;amal&#39;,&#39;joel&#39;,&#39;george&#39;],[[&#39;john&#39;],[&#39;jack&#39;,&#39;john&#39;,&#39;mary&#39;],[&#39;howard&#39;,&#39;john&#39;],[&#39;jude&#39;]])==[[&#39;john&#39;], [&#39;john&#39;], [&#39;john&#39;], []]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L299" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="299"></td>
          <td id="LC299" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to calculate the maximum aggregate from the list of tuples.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from collections import defaultdict<span class="pl-cce">\r\n</span>def max_aggregate(stdata):<span class="pl-cce">\r\n</span>    temp = defaultdict(int)<span class="pl-cce">\r\n</span>    for name, marks in stdata:<span class="pl-cce">\r\n</span>        temp[name] += marks<span class="pl-cce">\r\n</span>    return max(temp.items(), key=lambda x: x[1])<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">299</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert max_aggregate([(&#39;Juan Whelan&#39;,90),(&#39;Sabah Colley&#39;,88),(&#39;Peter Nichols&#39;,7),(&#39;Juan Whelan&#39;,122),(&#39;Sabah Colley&#39;,84)])==(&#39;Juan Whelan&#39;, 212)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_aggregate([(&#39;Juan Whelan&#39;,50),(&#39;Sabah Colley&#39;,48),(&#39;Peter Nichols&#39;,37),(&#39;Juan Whelan&#39;,22),(&#39;Sabah Colley&#39;,14)])==(&#39;Juan Whelan&#39;, 72)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_aggregate([(&#39;Juan Whelan&#39;,10),(&#39;Sabah Colley&#39;,20),(&#39;Peter Nichols&#39;,30),(&#39;Juan Whelan&#39;,40),(&#39;Sabah Colley&#39;,50)])==(&#39;Sabah Colley&#39;, 70)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L300" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="300"></td>
          <td id="LC300" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_binary_seq(n): <span class="pl-cce">\r\n\t</span>nCr = 1<span class="pl-cce">\r\n\t</span>res = 1<span class="pl-cce">\r\n\t</span>for r in range(1, n + 1): <span class="pl-cce">\r\n\t\t</span>nCr = (nCr * (n + 1 - r)) / r <span class="pl-cce">\r\n\t\t</span>res += nCr * nCr <span class="pl-cce">\r\n\t</span>return res <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">300</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_binary_seq(1) == 2.0<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_binary_seq(2) == 6.0<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_binary_seq(3) == 20.0<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L301" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="301"></td>
          <td id="LC301" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the depth of a dictionary.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def dict_depth(d):<span class="pl-cce">\r\n</span>    if isinstance(d, dict):<span class="pl-cce">\r\n</span>        return 1 + (max(map(dict_depth, d.values())) if d else 0)<span class="pl-cce">\r\n</span>    return 0<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">301</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert dict_depth({&#39;a&#39;:1, &#39;b&#39;: {&#39;c&#39;: {&#39;d&#39;: {}}}})==4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert dict_depth({&#39;a&#39;:1, &#39;b&#39;: {&#39;c&#39;:&#39;python&#39;}})==2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert dict_depth({1: &#39;Sun&#39;, 2: {3: {4:&#39;Mon&#39;}}})==3<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L302" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="302"></td>
          <td id="LC302" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the most significant bit number which is also a set bit.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def set_Bit_Number(n): <span class="pl-cce">\r\n</span>    if (n == 0): <span class="pl-cce">\r\n</span>        return 0; <span class="pl-cce">\r\n</span>    msb = 0; <span class="pl-cce">\r\n</span>    n = int(n / 2); <span class="pl-cce">\r\n</span>    while (n &gt; 0): <span class="pl-cce">\r\n</span>        n = int(n / 2); <span class="pl-cce">\r\n</span>        msb += 1; <span class="pl-cce">\r\n</span>    return (1 &lt;&lt; msb)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">302</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert set_Bit_Number(6) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert set_Bit_Number(10) == 8<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert set_Bit_Number(18) == 16<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L303" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="303"></td>
          <td id="LC303" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether the count of inversion of two types are same or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import sys <span class="pl-cce">\r\n</span>def solve(a,n):   <span class="pl-cce">\r\n</span>    mx = -sys.maxsize - 1<span class="pl-cce">\r\n</span>    for j in range(1,n):  <span class="pl-cce">\r\n</span>        if (mx &gt; a[j]):  <span class="pl-cce">\r\n</span>            return False  <span class="pl-cce">\r\n</span>        mx = max(mx,a[j - 1])    <span class="pl-cce">\r\n</span>    return True<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">303</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert solve([1,0,2],3) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert solve([1,2,0],3) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert solve([1,2,1],3) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L304" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="304"></td>
          <td id="LC304" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find element at a given index after number of rotations.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_Element(arr,ranges,rotations,index) :  <span class="pl-cce">\r\n</span>    for i in range(rotations - 1,-1,-1 ) : <span class="pl-cce">\r\n</span>        left = ranges[i][0] <span class="pl-cce">\r\n</span>        right = ranges[i][1] <span class="pl-cce">\r\n</span>        if (left &lt;= index and right &gt;= index) : <span class="pl-cce">\r\n</span>            if (index == left) : <span class="pl-cce">\r\n</span>                index = right <span class="pl-cce">\r\n</span>            else : <span class="pl-cce">\r\n</span>                index = index - 1 <span class="pl-cce">\r\n</span>    return arr[index] <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">304</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L305" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="305"></td>
          <td id="LC305" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to match two words from a list of words starting with letter &#39;p&#39;.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def start_withp(words):<span class="pl-cce">\r\n</span> for w in words:<span class="pl-cce">\r\n</span>        m = re.match(<span class="pl-cce">\&quot;</span>(P<span class="pl-cce">\\</span>w+)<span class="pl-cce">\\</span>W(P<span class="pl-cce">\\</span>w+)<span class="pl-cce">\&quot;</span>, w)<span class="pl-cce">\r\n</span>        if m:<span class="pl-cce">\r\n</span>            return m.groups()<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">305</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert start_withp([<span class="pl-cce">\&quot;</span>Python PHP<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>Java JavaScript<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>c c++<span class="pl-cce">\&quot;</span>])==(&#39;Python&#39;, &#39;PHP&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert start_withp([<span class="pl-cce">\&quot;</span>Python Programming<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>Java Programming<span class="pl-cce">\&quot;</span>])==(&#39;Python&#39;,&#39;Programming&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert start_withp([<span class="pl-cce">\&quot;</span>Pqrst Pqr<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>qrstuv<span class="pl-cce">\&quot;</span>])==(&#39;Pqrst&#39;,&#39;Pqr&#39;)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L306" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="306"></td>
          <td id="LC306" class="blob-code blob-code-inner js-file-line">{&quot;text&quot;: &quot;Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k &gt; i .&quot;, &quot;code&quot;: &quot;def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] &gt; a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] &gt; a[i] and j &gt; i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] &gt; dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]&quot;, &quot;task_id&quot;: 306, &quot;test_setup_code&quot;: &quot;&quot;, &quot;test_list&quot;: [&quot;assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11&quot;, &quot;assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7&quot;, &quot;assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71&quot;], &quot;challenge_test_list&quot;: []}</td>
        </tr>
        <tr>
          <td id="L307" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="307"></td>
          <td id="LC307" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to get a colon of a tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from copy import deepcopy<span class="pl-cce">\r\n</span>def colon_tuplex(tuplex,m,n):<span class="pl-cce">\r\n</span>  tuplex_colon = deepcopy(tuplex)<span class="pl-cce">\r\n</span>  tuplex_colon[m].append(n)<span class="pl-cce">\r\n</span>  return tuplex_colon<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">307</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert colon_tuplex((<span class="pl-cce">\&quot;</span>HELLO<span class="pl-cce">\&quot;</span>, 5, [], True) ,2,50)==(<span class="pl-cce">\&quot;</span>HELLO<span class="pl-cce">\&quot;</span>, 5, [50], True) <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert colon_tuplex((<span class="pl-cce">\&quot;</span>HELLO<span class="pl-cce">\&quot;</span>, 5, [], True) ,2,100)==((<span class="pl-cce">\&quot;</span>HELLO<span class="pl-cce">\&quot;</span>, 5, [100],True))<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert colon_tuplex((<span class="pl-cce">\&quot;</span>HELLO<span class="pl-cce">\&quot;</span>, 5, [], True) ,2,500)==(<span class="pl-cce">\&quot;</span>HELLO<span class="pl-cce">\&quot;</span>, 5, [500], True)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L308" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="308"></td>
          <td id="LC308" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the specified number of largest products from two given lists.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def large_product(nums1, nums2, N):<span class="pl-cce">\r\n</span>    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]<span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">308</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L309" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="309"></td>
          <td id="LC309" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the maximum of two numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def maximum(a,b):   <span class="pl-cce">\r\n</span>    if a &gt;= b: <span class="pl-cce">\r\n</span>        return a <span class="pl-cce">\r\n</span>    else: <span class="pl-cce">\r\n</span>        return b <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">309</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert maximum(5,10) == 10<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert maximum(-1,-2) == -1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert maximum(9,7) == 9<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L310" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="310"></td>
          <td id="LC310" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to convert a given string to a tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def string_to_tuple(str1):<span class="pl-cce">\r\n</span>    result = tuple(x for x in str1 if not x.isspace()) <span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">310</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert string_to_tuple(<span class="pl-cce">\&quot;</span>python 3.0<span class="pl-cce">\&quot;</span>)==(&#39;p&#39;, &#39;y&#39;, &#39;t&#39;, &#39;h&#39;, &#39;o&#39;, &#39;n&#39;, &#39;3&#39;, &#39;.&#39;, &#39;0&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert string_to_tuple(<span class="pl-cce">\&quot;</span>item1<span class="pl-cce">\&quot;</span>)==(&#39;i&#39;, &#39;t&#39;, &#39;e&#39;, &#39;m&#39;, &#39;1&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert string_to_tuple(<span class="pl-cce">\&quot;</span>15.10<span class="pl-cce">\&quot;</span>)==(&#39;1&#39;, &#39;5&#39;, &#39;.&#39;, &#39;1&#39;, &#39;0&#39;)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L311" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="311"></td>
          <td id="LC311" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to set the left most unset bit.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def set_left_most_unset_bit(n): <span class="pl-cce">\r\n</span>    if not (n &amp; (n + 1)): <span class="pl-cce">\r\n</span>        return n <span class="pl-cce">\r\n</span>    pos, temp, count = 0, n, 0 <span class="pl-cce">\r\n</span>    while temp: <span class="pl-cce">\r\n</span>        if not (temp &amp; 1): <span class="pl-cce">\r\n</span>            pos = count      <span class="pl-cce">\r\n</span>        count += 1; temp&gt;&gt;=1<span class="pl-cce">\r\n</span>    return (n | (1 &lt;&lt; (pos))) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">311</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert set_left_most_unset_bit(10) == 14<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert set_left_most_unset_bit(12) == 14<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert set_left_most_unset_bit(15) == 15<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L312" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="312"></td>
          <td id="LC312" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the volume of a cone.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math<span class="pl-cce">\r\n</span>def volume_cone(r,h):<span class="pl-cce">\r\n</span>  volume = (1.0/3) * math.pi * r * r * h<span class="pl-cce">\r\n</span>  return volume<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">312</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert volume_cone(5,12)==314.15926535897927<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert volume_cone(10,15)==1570.7963267948965<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert volume_cone(19,17)==6426.651371693521<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L313" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="313"></td>
          <td id="LC313" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to print positive numbers in a list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def pos_nos(list1):<span class="pl-cce">\r\n</span>  for num in list1: <span class="pl-cce">\r\n</span>    if num &gt;= 0: <span class="pl-cce">\r\n</span>       return num <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">313</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert pos_nos([-1,-2,1,2]) == 1,2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert pos_nos([3,4,-5]) == 3,4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert pos_nos([-2,-3,1]) == 1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L314" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="314"></td>
          <td id="LC314" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def max_sum_rectangular_grid(grid, n) : <span class="pl-cce">\r\n\t</span>incl = max(grid[0][0], grid[1][0]) <span class="pl-cce">\r\n\t</span>excl = 0<span class="pl-cce">\r\n\t</span>for i in range(1, n) : <span class="pl-cce">\r\n\t\t</span>excl_new = max(excl, incl) <span class="pl-cce">\r\n\t\t</span>incl = excl + max(grid[0][i], grid[1][i]) <span class="pl-cce">\r\n\t\t</span>excl = excl_new <span class="pl-cce">\r\n\t</span>return max(excl, incl)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">314</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L315" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="315"></td>
          <td id="LC315" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the first maximum length of even word.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_Max_Len_Even(str): <span class="pl-cce">\r\n</span>    n = len(str) <span class="pl-cce">\r\n</span>    i = 0<span class="pl-cce">\r\n</span>    currlen = 0<span class="pl-cce">\r\n</span>    maxlen = 0<span class="pl-cce">\r\n</span>    st = -1<span class="pl-cce">\r\n</span>    while (i &lt; n): <span class="pl-cce">\r\n</span>        if (str[i] == &#39; &#39;): <span class="pl-cce">\r\n</span>            if (currlen % 2 == 0): <span class="pl-cce">\r\n</span>                if (maxlen &lt; currlen): <span class="pl-cce">\r\n</span>                    maxlen = currlen <span class="pl-cce">\r\n</span>                    st = i - currlen <span class="pl-cce">\r\n</span>            currlen = 0 <span class="pl-cce">\r\n</span>        else : <span class="pl-cce">\r\n</span>            currlen += 1<span class="pl-cce">\r\n</span>        i += 1<span class="pl-cce">\r\n</span>    if (currlen % 2 == 0): <span class="pl-cce">\r\n</span>        if (maxlen &lt; currlen): <span class="pl-cce">\r\n</span>            maxlen = currlen <span class="pl-cce">\r\n</span>            st = i - currlen <span class="pl-cce">\r\n</span>    if (st == -1): <span class="pl-cce">\r\n</span>        return <span class="pl-cce">\&quot;</span>-1<span class="pl-cce">\&quot;</span> <span class="pl-cce">\r\n</span>    return str[st: st + maxlen] <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">315</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Max_Len_Even(<span class="pl-cce">\&quot;</span>python language<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>language<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Max_Len_Even(<span class="pl-cce">\&quot;</span>maximum even length<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>length<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Max_Len_Even(<span class="pl-cce">\&quot;</span>eve<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>-1<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L316" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="316"></td>
          <td id="LC316" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the index of the last occurrence of a given number in a sorted array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_last_occurrence(A, x):<span class="pl-cce">\r\n</span>    (left, right) = (0, len(A) - 1)<span class="pl-cce">\r\n</span>    result = -1<span class="pl-cce">\r\n</span>    while left &lt;= right:<span class="pl-cce">\r\n</span>        mid = (left + right) // 2<span class="pl-cce">\r\n</span>        if x == A[mid]:<span class="pl-cce">\r\n</span>            result = mid<span class="pl-cce">\r\n</span>            left = mid + 1<span class="pl-cce">\r\n</span>        elif x &lt; A[mid]:<span class="pl-cce">\r\n</span>            right = mid - 1<span class="pl-cce">\r\n</span>        else:<span class="pl-cce">\r\n</span>            left = mid + 1<span class="pl-cce">\r\n</span>    return result <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">316</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L317" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="317"></td>
          <td id="LC317" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to reflect the modified run-length encoding from a list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from itertools import groupby<span class="pl-cce">\r\n</span>def modified_encode(alist):<span class="pl-cce">\r\n</span>        def ctr_ele(el):<span class="pl-cce">\r\n</span>            if len(el)&gt;1: return [len(el), el[0]]<span class="pl-cce">\r\n</span>            else: return el[0]<span class="pl-cce">\r\n</span>        return [ctr_ele(list(group)) for key, group in groupby(alist)]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">317</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert modified_encode(&#39;automatically&#39;)==[&#39;a&#39;, &#39;u&#39;, &#39;t&#39;, &#39;o&#39;, &#39;m&#39;, &#39;a&#39;, &#39;t&#39;, &#39;i&#39;, &#39;c&#39;, &#39;a&#39;, [2, &#39;l&#39;], &#39;y&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert modified_encode(&#39;python&#39;)==[&#39;p&#39;, &#39;y&#39;, &#39;t&#39;, &#39;h&#39;, &#39;o&#39;, &#39;n&#39;]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L318" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="318"></td>
          <td id="LC318" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the maximum volume of a cuboid with given sum of sides.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def max_volume (s): <span class="pl-cce">\r\n</span>    maxvalue = 0<span class="pl-cce">\r\n</span>    i = 1<span class="pl-cce">\r\n</span>    for i in range(s - 1): <span class="pl-cce">\r\n</span>        j = 1<span class="pl-cce">\r\n</span>        for j in range(s): <span class="pl-cce">\r\n</span>            k = s - i - j <span class="pl-cce">\r\n</span>            maxvalue = max(maxvalue, i * j * k)         <span class="pl-cce">\r\n</span>    return maxvalue <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">318</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert max_volume(8) == 18<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_volume(4) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_volume(1) == 0<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L319" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="319"></td>
          <td id="LC319" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find all five characters long word in the given string by using regex.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def find_long_word(text):<span class="pl-cce">\r\n</span>  return (re.findall(r<span class="pl-cce">\&quot;\\</span>b<span class="pl-cce">\\</span>w{5}<span class="pl-cce">\\</span>b<span class="pl-cce">\&quot;</span>, text))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">319</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_long_word(&#39;Please move back to strem&#39;) == [&#39;strem&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_long_word(&#39;4K Ultra HD streaming player&#39;) == [&#39;Ultra&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_long_word(&#39;Streaming Media Player&#39;) == [&#39;Media&#39;]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L320" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="320"></td>
          <td id="LC320" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sum_difference(n):<span class="pl-cce">\r\n</span>    sumofsquares = 0<span class="pl-cce">\r\n</span>    squareofsum = 0<span class="pl-cce">\r\n</span>    for num in range(1, n+1):<span class="pl-cce">\r\n</span>        sumofsquares += num * num<span class="pl-cce">\r\n</span>        squareofsum += num<span class="pl-cce">\r\n</span>    squareofsum = squareofsum ** 2<span class="pl-cce">\r\n</span>    return squareofsum - sumofsquares<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">320</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_difference(12)==5434<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_difference(20)==41230<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_difference(54)==2151270<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L321" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="321"></td>
          <td id="LC321" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the demlo number for the given number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_demlo(s): <span class="pl-cce">\r\n\t</span>l = len(s) <span class="pl-cce">\r\n\t</span>res = <span class="pl-cce">\&quot;\&quot;</span> <span class="pl-cce">\r\n\t</span>for i in range(1,l+1): <span class="pl-cce">\r\n\t\t</span>res = res + str(i) <span class="pl-cce">\r\n\t</span>for i in range(l-1,0,-1): <span class="pl-cce">\r\n\t\t</span>res = res + str(i) <span class="pl-cce">\r\n\t</span>return res <span class="pl-cce">\t</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">321</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_demlo(<span class="pl-cce">\&quot;</span>111111<span class="pl-cce">\&quot;</span>) == &#39;12345654321&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_demlo(<span class="pl-cce">\&quot;</span>1111<span class="pl-cce">\&quot;</span>) == &#39;1234321&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_demlo(<span class="pl-cce">\&quot;</span>13333122222<span class="pl-cce">\&quot;</span>) == &#39;123456789101110987654321&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L322" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="322"></td>
          <td id="LC322" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find all index positions of the minimum values in a given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def position_min(list1):<span class="pl-cce">\r\n</span>    min_val = min(list1)<span class="pl-cce">\r\n</span>    min_result = [i for i, j in enumerate(list1) if j == min_val]<span class="pl-cce">\r\n</span>    return min_result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">322</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L323" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="323"></td>
          <td id="LC323" class="blob-code blob-code-inner js-file-line">{&quot;text&quot;: &quot;Write a function to re-arrange the given array in alternating positive and negative items.&quot;, &quot;code&quot;: &quot;def right_rotate(arr, n, out_of_place, cur):\r\n\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place &gt;= 0):\r\n\t\t\tif ((arr[index] &gt;= 0 and arr[out_of_place] &lt; 0) or\r\n\t\t\t(arr[index] &lt; 0 and arr[out_of_place] &gt;= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place &gt; 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] &gt;= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] &lt; 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr&quot;, &quot;task_id&quot;: 323, &quot;test_setup_code&quot;: &quot;&quot;, &quot;test_list&quot;: [&quot;assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]&quot;, &quot;assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]&quot;, &quot;assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]&quot;], &quot;challenge_test_list&quot;: []}</td>
        </tr>
        <tr>
          <td id="L324" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="324"></td>
          <td id="LC324" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to extract the sum of alternate chains of tuples.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sum_of_alternates(test_tuple):<span class="pl-cce">\r\n</span>  sum1 = 0<span class="pl-cce">\r\n</span>  sum2 = 0<span class="pl-cce">\r\n</span>  for idx, ele in enumerate(test_tuple):<span class="pl-cce">\r\n</span>    if idx % 2:<span class="pl-cce">\r\n</span>      sum1 += ele<span class="pl-cce">\r\n</span>    else:<span class="pl-cce">\r\n</span>      sum2 += ele<span class="pl-cce">\r\n</span>  return ((sum1),(sum2)) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">324</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L325" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="325"></td>
          <td id="LC325" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the minimum number of squares whose sum is equal to a given number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def get_Min_Squares(n):<span class="pl-cce">\r\n</span>    if n &lt;= 3:<span class="pl-cce">\r\n</span>        return n;<span class="pl-cce">\r\n</span>    res = n <span class="pl-cce">\r\n</span>    for x in range(1,n + 1):<span class="pl-cce">\r\n</span>        temp = x * x;<span class="pl-cce">\r\n</span>        if temp &gt; n:<span class="pl-cce">\r\n</span>            break<span class="pl-cce">\r\n</span>        else:<span class="pl-cce">\r\n</span>            res = min(res,1 + get_Min_Squares(n  - temp)) <span class="pl-cce">\r\n</span>    return res;<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">325</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert get_Min_Squares(6) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_Min_Squares(2) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_Min_Squares(4) == 1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L326" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="326"></td>
          <td id="LC326" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to get the word with most number of occurrences in the given strings list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from collections import defaultdict <span class="pl-cce">\r\n\r\n</span>def most_occurrences(test_list):<span class="pl-cce">\r\n</span>  temp = defaultdict(int)<span class="pl-cce">\r\n</span>  for sub in test_list:<span class="pl-cce">\r\n</span>    for wrd in sub.split():<span class="pl-cce">\r\n</span>      temp[wrd] += 1<span class="pl-cce">\r\n</span>  res = max(temp, key=temp.get)<span class="pl-cce">\r\n</span>  return (str(res)) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">326</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert most_occurrences([<span class="pl-cce">\&quot;</span>UTS is best for RTF<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>RTF love UTS<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>UTS is best<span class="pl-cce">\&quot;</span>] ) == &#39;UTS&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert most_occurrences([<span class="pl-cce">\&quot;</span>Its been a great year<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>this year is so worse<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>this year is okay<span class="pl-cce">\&quot;</span>] ) == &#39;year&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert most_occurrences([<span class="pl-cce">\&quot;</span>Families can be reunited<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>people can be reunited<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>Tasks can be achieved <span class="pl-cce">\&quot;</span>] ) == &#39;can&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L327" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="327"></td>
          <td id="LC327" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to print check if the triangle is isosceles or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_isosceles(x,y,z):<span class="pl-cce">\r\n</span>  if x==y or y==z or z==x:<span class="pl-cce">\r\n\t</span>   return True<span class="pl-cce">\r\n</span>  else:<span class="pl-cce">\r\n</span>     return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">327</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_isosceles(6,8,12)==False <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_isosceles(6,6,12)==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_isosceles(6,16,20)==False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L328" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="328"></td>
          <td id="LC328" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to rotate a given list by specified number of items to the left direction.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def rotate_left(list1,m,n):<span class="pl-cce">\r\n</span>  result =  list1[m:]+list1[:n]<span class="pl-cce">\r\n</span>  return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">328</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L329" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="329"></td>
          <td id="LC329" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count negative numbers in a list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def neg_count(list):<span class="pl-cce">\r\n</span>  neg_count= 0<span class="pl-cce">\r\n</span>  for num in list: <span class="pl-cce">\r\n</span>    if num &lt;= 0: <span class="pl-cce">\r\n</span>      neg_count += 1<span class="pl-cce">\r\n</span>  return neg_count <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">329</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert neg_count([-1,-2,3,-4,-5]) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert neg_count([1,2,3]) == 0<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert neg_count([1,2,-3,-10,20]) == 2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L330" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="330"></td>
          <td id="LC330" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find all three, four, five characters long words in the given string by using regex.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def find_char(text):<span class="pl-cce">\r\n</span>  return (re.findall(r<span class="pl-cce">\&quot;\\</span>b<span class="pl-cce">\\</span>w{3,5}<span class="pl-cce">\\</span>b<span class="pl-cce">\&quot;</span>, text))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">330</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_char(&#39;For the four consumer complaints contact manager AKR reddy&#39;) == [&#39;For&#39;, &#39;the&#39;, &#39;four&#39;, &#39;AKR&#39;, &#39;reddy&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_char(&#39;Certain service are subject to change MSR&#39;) == [&#39;are&#39;, &#39;MSR&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_char(&#39;Third party legal desclaimers&#39;) == [&#39;Third&#39;, &#39;party&#39;, &#39;legal&#39;]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L331" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="331"></td>
          <td id="LC331" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count unset bits of a given number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_unset_bits(n): <span class="pl-cce">\r\n</span>    count = 0<span class="pl-cce">\r\n</span>    x = 1<span class="pl-cce">\r\n</span>    while(x &lt; n + 1): <span class="pl-cce">\r\n</span>        if ((x &amp; n) == 0): <span class="pl-cce">\r\n</span>            count += 1<span class="pl-cce">\r\n</span>        x = x &lt;&lt; 1<span class="pl-cce">\r\n</span>    return count  <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">331</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_unset_bits(2) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_unset_bits(4) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_unset_bits(6) == 1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L332" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="332"></td>
          <td id="LC332" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to count character frequency of a given string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def char_frequency(str1):<span class="pl-cce">\r\n</span>    dict = {}<span class="pl-cce">\r\n</span>    for n in str1:<span class="pl-cce">\r\n</span>        keys = dict.keys()<span class="pl-cce">\r\n</span>        if n in keys:<span class="pl-cce">\r\n</span>            dict[n] += 1<span class="pl-cce">\r\n</span>        else:<span class="pl-cce">\r\n</span>            dict[n] = 1<span class="pl-cce">\r\n</span>    return dict<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">332</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert char_frequency(&#39;python&#39;)=={&#39;p&#39;: 1, &#39;y&#39;: 1, &#39;t&#39;: 1, &#39;h&#39;: 1, &#39;o&#39;: 1, &#39;n&#39;: 1}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert char_frequency(&#39;program&#39;)=={&#39;p&#39;: 1, &#39;r&#39;: 2, &#39;o&#39;: 1, &#39;g&#39;: 1, &#39;a&#39;: 1, &#39;m&#39;: 1}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert char_frequency(&#39;language&#39;)=={&#39;l&#39;: 1, &#39;a&#39;: 2, &#39;n&#39;: 1, &#39;g&#39;: 2, &#39;u&#39;: 1, &#39;e&#39;: 1}<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L333" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="333"></td>
          <td id="LC333" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to sort a list according to the second element in sublist.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def Sort(sub_li): <span class="pl-cce">\r\n</span>    sub_li.sort(key = lambda x: x[1]) <span class="pl-cce">\r\n</span>    return sub_li <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">333</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert Sort([[&#39;a&#39;, 10], [&#39;b&#39;, 5], [&#39;c&#39;, 20], [&#39;d&#39;, 15]]) == [[&#39;b&#39;, 5], [&#39;a&#39;, 10], [&#39;d&#39;, 15], [&#39;c&#39;, 20]]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Sort([[&#39;452&#39;, 10], [&#39;256&#39;, 5], [&#39;100&#39;, 20], [&#39;135&#39;, 15]]) == [[&#39;256&#39;, 5], [&#39;452&#39;, 10], [&#39;135&#39;, 15], [&#39;100&#39;, 20]]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Sort([[&#39;rishi&#39;, 10], [&#39;akhil&#39;, 5], [&#39;ramya&#39;, 20], [&#39;gaur&#39;, 15]]) == [[&#39;akhil&#39;, 5], [&#39;rishi&#39;, 10], [&#39;gaur&#39;, 15], [&#39;ramya&#39;, 20]]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L334" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="334"></td>
          <td id="LC334" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether the triangle is valid or not if sides are given.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_Validity(a,b,c):  <span class="pl-cce">\r\n</span>    if (a + b &lt;= c) or (a + c &lt;= b) or (b + c &lt;= a) : <span class="pl-cce">\r\n</span>        return False<span class="pl-cce">\r\n</span>    else: <span class="pl-cce">\r\n</span>        return True        <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">334</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_Validity(1,2,3) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_Validity(2,3,5) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_Validity(7,10,5) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L335" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="335"></td>
          <td id="LC335" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the sum of arithmetic progression.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def ap_sum(a,n,d):<span class="pl-cce">\r\n</span>  total = (n * (2 * a + (n - 1) * d)) / 2<span class="pl-cce">\r\n</span>  return total<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">335</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert ap_sum(1,5,2)==25<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert ap_sum(2,6,4)==72<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert ap_sum(1,4,5)==34<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L336" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="336"></td>
          <td id="LC336" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check whether the given month name contains 28 days or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_monthnum(monthname1):<span class="pl-cce">\r\n</span>  if monthname1 == <span class="pl-cce">\&quot;</span>February<span class="pl-cce">\&quot;</span>:<span class="pl-cce">\r\n</span>    return True<span class="pl-cce">\r\n</span>  else:<span class="pl-cce">\r\n</span>    return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">336</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_monthnum(<span class="pl-cce">\&quot;</span>February<span class="pl-cce">\&quot;</span>)==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_monthnum(<span class="pl-cce">\&quot;</span>January<span class="pl-cce">\&quot;</span>)==False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_monthnum(<span class="pl-cce">\&quot;</span>March<span class="pl-cce">\&quot;</span>)==False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L337" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="337"></td>
          <td id="LC337" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function that matches a word at the end of a string, with optional punctuation.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def text_match_word(text):<span class="pl-cce">\r\n</span>        patterns = &#39;<span class="pl-cce">\\</span>w+<span class="pl-cce">\\</span>S*$&#39;<span class="pl-cce">\r\n</span>        if re.search(patterns,  text):<span class="pl-cce">\r\n</span>                return &#39;Found a match!&#39;<span class="pl-cce">\r\n</span>        else:<span class="pl-cce">\r\n</span>                return &#39;Not matched!&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">337</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match_word(<span class="pl-cce">\&quot;</span>python.<span class="pl-cce">\&quot;</span>)==(&#39;Found a match!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match_word(<span class="pl-cce">\&quot;</span>python.<span class="pl-cce">\&quot;</span>)==(&#39;Found a match!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match_word(<span class="pl-cce">\&quot;</span>  lang  .<span class="pl-cce">\&quot;</span>)==(&#39;Not matched!&#39;)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L338" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="338"></td>
          <td id="LC338" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count the number of substrings with same first and last characters.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_Equality(s): <span class="pl-cce">\r\n</span>    return (ord(s[0]) == ord(s[len(s) - 1])); <span class="pl-cce">\r\n</span>def count_Substring_With_Equal_Ends(s): <span class="pl-cce">\r\n</span>    result = 0; <span class="pl-cce">\r\n</span>    n = len(s); <span class="pl-cce">\r\n</span>    for i in range(n):<span class="pl-cce">\r\n</span>        for j in range(1,n-i+1): <span class="pl-cce">\r\n</span>            if (check_Equality(s[i:i+j])): <span class="pl-cce">\r\n</span>                result+=1; <span class="pl-cce">\r\n</span>    return result; <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">338</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Substring_With_Equal_Ends(&#39;aba&#39;) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Substring_With_Equal_Ends(&#39;abcab&#39;) == 7<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Substring_With_Equal_Ends(&#39;abc&#39;) == 3<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L339" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="339"></td>
          <td id="LC339" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the maximum occuring divisor in an interval.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_Divisor(x,y):  <span class="pl-cce">\r\n</span>    if (x==y): <span class="pl-cce">\r\n</span>        return y <span class="pl-cce">\r\n</span>    return 2<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">339</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Divisor(2,2) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Divisor(2,5) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Divisor(5,10) == 2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L340" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="340"></td>
          <td id="LC340" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sum_three_smallest_nums(lst):<span class="pl-cce">\r\n\t</span>return sum(sorted([x for x in lst if x &gt; 0])[:3])<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">340</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_three_smallest_nums([1,2,3,4,5]) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_three_smallest_nums([0,1,2,3,4,5]) == 6<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L341" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="341"></td>
          <td id="LC341" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to convert the given set into ordered tuples.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def set_to_tuple(s):<span class="pl-cce">\r\n</span>  t = tuple(sorted(s))<span class="pl-cce">\r\n</span>  return (t)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">341</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L342" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="342"></td>
          <td id="LC342" class="blob-code blob-code-inner js-file-line">{&quot;text&quot;: &quot;Write a function to find the smallest range that includes at-least one element from each of the given arrays.&quot;, &quot;code&quot;: &quot;from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value &lt; other.value\r\ndef find_minimum_range(list):\r\n    high = float(&#39;-inf&#39;)\r\n    p = (0, float(&#39;inf&#39;))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low &lt; p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])&quot;, &quot;task_id&quot;: 342, &quot;test_setup_code&quot;: &quot;&quot;, &quot;test_list&quot;: [&quot;assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)&quot;, &quot;assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)&quot;, &quot;assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)&quot;], &quot;challenge_test_list&quot;: []}</td>
        </tr>
        <tr>
          <td id="L343" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="343"></td>
          <td id="LC343" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to calculate the number of digits and letters in a string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def dig_let(s):<span class="pl-cce">\r\n</span> d=l=0<span class="pl-cce">\r\n</span> for c in s:<span class="pl-cce">\r\n</span>    if c.isdigit():<span class="pl-cce">\r\n</span>        d=d+1<span class="pl-cce">\r\n</span>    elif c.isalpha():<span class="pl-cce">\r\n</span>        l=l+1<span class="pl-cce">\r\n</span>    else:<span class="pl-cce">\r\n</span>        pass<span class="pl-cce">\r\n</span> return (l,d)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">343</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert dig_let(<span class="pl-cce">\&quot;</span>python<span class="pl-cce">\&quot;</span>)==(6,0)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert dig_let(<span class="pl-cce">\&quot;</span>program<span class="pl-cce">\&quot;</span>)==(7,0)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert dig_let(<span class="pl-cce">\&quot;</span>python3.0<span class="pl-cce">\&quot;</span>)==(6,2)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L344" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="344"></td>
          <td id="LC344" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find number of elements with odd factors in a given range.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_Odd_Squares(n,m): <span class="pl-cce">\r\n</span>    return int(m**0.5) - int((n-1)**0.5) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">344</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Odd_Squares(5,100) == 8<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Odd_Squares(8,65) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Odd_Squares(2,5) == 1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L345" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="345"></td>
          <td id="LC345" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the difference between two consecutive numbers in a given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def diff_consecutivenums(nums):<span class="pl-cce">\r\n</span>    result = [b-a for a, b in zip(nums[:-1], nums[1:])]<span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">345</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L346" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="346"></td>
          <td id="LC346" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find entringer number e(n, k).<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def zigzag(n, k): <span class="pl-cce">\r\n\t</span>if (n == 0 and k == 0): <span class="pl-cce">\r\n\t\t</span>return 1<span class="pl-cce">\r\n\t</span>if (k == 0): <span class="pl-cce">\r\n\t\t</span>return 0<span class="pl-cce">\r\n\t</span>return zigzag(n, k - 1) + zigzag(n - 1, n - k)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">346</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert zigzag(4, 3) == 5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert zigzag(4, 2) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert zigzag(3, 1) == 1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L347" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="347"></td>
          <td id="LC347" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count the number of squares in a rectangle.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_Squares(m,n): <span class="pl-cce">\r\n</span>    if (n &lt; m): <span class="pl-cce">\r\n</span>        temp = m <span class="pl-cce">\r\n</span>        m = n <span class="pl-cce">\r\n</span>        n = temp <span class="pl-cce">\r\n</span>    return n * (n + 1) * (3 * m - n + 1) // 6<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">347</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Squares(4,3) == 20<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Squares(1,2) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Squares(2,2) == 5<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L348" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="348"></td>
          <td id="LC348" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def bin_coff(n, r): <span class="pl-cce">\r\n\t</span>val = 1<span class="pl-cce">\r\n\t</span>if (r &gt; (n - r)): <span class="pl-cce">\r\n\t\t</span>r = (n - r) <span class="pl-cce">\r\n\t</span>for i in range(0, r): <span class="pl-cce">\r\n\t\t</span>val *= (n - i) <span class="pl-cce">\r\n\t\t</span>val //= (i + 1) <span class="pl-cce">\r\n\t</span>return val <span class="pl-cce">\r\n</span>def find_ways(M): <span class="pl-cce">\r\n\t</span>n = M // 2<span class="pl-cce">\r\n\t</span>a = bin_coff(2 * n, n) <span class="pl-cce">\r\n\t</span>b = a // (n + 1) <span class="pl-cce">\r\n\t</span>return (b) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">348</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_ways(4) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_ways(6) == 5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_ways(8) == 14<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L349" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="349"></td>
          <td id="LC349" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether the given string is a binary string or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check(string) :<span class="pl-cce">\r\n</span>    p = set(string) <span class="pl-cce">\r\n</span>    s = {&#39;0&#39;, &#39;1&#39;} <span class="pl-cce">\r\n</span>    if s == p or p == {&#39;0&#39;} or p == {&#39;1&#39;}: <span class="pl-cce">\r\n</span>        return (<span class="pl-cce">\&quot;</span>Yes<span class="pl-cce">\&quot;</span>) <span class="pl-cce">\r\n</span>    else : <span class="pl-cce">\r\n</span>        return (<span class="pl-cce">\&quot;</span>No<span class="pl-cce">\&quot;</span>) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">349</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check(<span class="pl-cce">\&quot;</span>01010101010<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>Yes<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check(<span class="pl-cce">\&quot;</span>name0<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>No<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check(<span class="pl-cce">\&quot;</span>101<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>Yes<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L350" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="350"></td>
          <td id="LC350" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to minimize the length of the string by removing occurrence of only one character.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def minimum_Length(s) : <span class="pl-cce">\r\n</span>    maxOcc = 0<span class="pl-cce">\r\n</span>    n = len(s) <span class="pl-cce">\r\n</span>    arr = [0]*26<span class="pl-cce">\r\n</span>    for i in range(n) : <span class="pl-cce">\r\n</span>        arr[ord(s[i]) -ord(&#39;a&#39;)] += 1<span class="pl-cce">\r\n</span>    for i in range(26) : <span class="pl-cce">\r\n</span>        if arr[i] &gt; maxOcc : <span class="pl-cce">\r\n</span>            maxOcc = arr[i] <span class="pl-cce">\r\n</span>    return n - maxOcc <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">350</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert minimum_Length(<span class="pl-cce">\&quot;</span>mnm<span class="pl-cce">\&quot;</span>) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert minimum_Length(<span class="pl-cce">\&quot;</span>abcda<span class="pl-cce">\&quot;</span>) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert minimum_Length(<span class="pl-cce">\&quot;</span>abcb<span class="pl-cce">\&quot;</span>) == 2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L351" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="351"></td>
          <td id="LC351" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the first element occurring k times in a given array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def first_Element(arr,n,k): <span class="pl-cce">\r\n</span>    count_map = {}; <span class="pl-cce">\r\n</span>    for i in range(0, n): <span class="pl-cce">\r\n</span>        if(arr[i] in count_map.keys()): <span class="pl-cce">\r\n</span>            count_map[arr[i]] += 1<span class="pl-cce">\r\n</span>        else: <span class="pl-cce">\r\n</span>            count_map[arr[i]] = 1<span class="pl-cce">\r\n</span>        i += 1<span class="pl-cce">\r\n</span>    for i in range(0, n):  <span class="pl-cce">\r\n</span>        if (count_map[arr[i]] == k): <span class="pl-cce">\r\n</span>            return arr[i] <span class="pl-cce">\r\n</span>        i += 1 <span class="pl-cce">\r\n</span>    return -1<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">351</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert first_Element([0,1,2,3,4,5],6,1) == 0<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert first_Element([1,2,1,3,4],5,2) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L352" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="352"></td>
          <td id="LC352" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether all the characters in a given string are unique.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def unique_Characters(str):<span class="pl-cce">\r\n</span>    for i in range(len(str)):<span class="pl-cce">\r\n</span>        for j in range(i + 1,len(str)): <span class="pl-cce">\r\n</span>            if (str[i] == str[j]):<span class="pl-cce">\r\n</span>                return False;<span class="pl-cce">\r\n</span>    return True;<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">352</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert unique_Characters(&#39;aba&#39;) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert unique_Characters(&#39;abc&#39;) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert unique_Characters(&#39;abab&#39;) == False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L353" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="353"></td>
          <td id="LC353" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to remove a specified column from a given nested list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def remove_column(list1, n):<span class="pl-cce">\r\n</span>   for i in list1: <span class="pl-cce">\r\n</span>    del i[n] <span class="pl-cce">\r\n</span>   return list1<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">353</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L354" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="354"></td>
          <td id="LC354" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find t-nth term of arithemetic progression.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def tn_ap(a,n,d):<span class="pl-cce">\r\n</span>  tn = a + (n - 1) * d<span class="pl-cce">\r\n</span>  return tn<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">354</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert tn_ap(1,5,2)==9<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert tn_ap(2,6,4)==22<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert tn_ap(1,4,5)==16<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L355" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="355"></td>
          <td id="LC355" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count the number of rectangles in a circle of radius r.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_Rectangles(radius):  <span class="pl-cce">\r\n</span>    rectangles = 0 <span class="pl-cce">\r\n</span>    diameter = 2 * radius <span class="pl-cce">\r\n</span>    diameterSquare = diameter * diameter <span class="pl-cce">\r\n</span>    for a in range(1, 2 * radius):  <span class="pl-cce">\r\n</span>        for b in range(1, 2 * radius): <span class="pl-cce">\r\n</span>            diagnalLengthSquare = (a * a +  b * b)  <span class="pl-cce">\r\n</span>            if (diagnalLengthSquare &lt;= diameterSquare) : <span class="pl-cce">\r\n</span>                rectangles += 1<span class="pl-cce">\r\n</span>    return rectangles <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">355</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Rectangles(2) == 8<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Rectangles(1) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Rectangles(0) == 0<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L356" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="356"></td>
          <td id="LC356" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the third angle of a triangle using two angles.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_angle(a,b):<span class="pl-cce">\r\n</span> c = 180 - (a + b)<span class="pl-cce">\r\n</span> return c<span class="pl-cce">\r\n</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">356</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_angle(47,89)==44<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_angle(45,95)==40<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_angle(50,40)==90<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L357" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="357"></td>
          <td id="LC357" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the maximum element of all the given tuple records.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_max(test_list):<span class="pl-cce">\r\n</span>  res = max(int(j) for i in test_list for j in i)<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">357</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L358" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="358"></td>
          <td id="LC358" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find modulo division of two lists using map and lambda function.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def moddiv_list(nums1,nums2):<span class="pl-cce">\r\n</span>  result = map(lambda x, y: x % y, nums1, nums2)<span class="pl-cce">\r\n</span>  return list(result)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">358</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert moddiv_list([3,2],[1,4])==[0, 2]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert moddiv_list([90,120],[50,70])==[40, 50]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L359" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="359"></td>
          <td id="LC359" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether one root of the quadratic equation is twice of the other or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def Check_Solution(a,b,c): <span class="pl-cce">\r\n</span>    if (2*b*b == 9*a*c): <span class="pl-cce">\r\n</span>        return (<span class="pl-cce">\&quot;</span>Yes<span class="pl-cce">\&quot;</span>); <span class="pl-cce">\r\n</span>    else: <span class="pl-cce">\r\n</span>        return (<span class="pl-cce">\&quot;</span>No<span class="pl-cce">\&quot;</span>); <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">359</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert Check_Solution(1,3,2) == <span class="pl-cce">\&quot;</span>Yes<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Check_Solution(1,2,3) == <span class="pl-cce">\&quot;</span>No<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Check_Solution(1,-5,6) == <span class="pl-cce">\&quot;</span>No<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L360" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="360"></td>
          <td id="LC360" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the n<span class="pl-cce">\u2019</span>th carol number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def get_carol(n): <span class="pl-cce">\r\n\t</span>result = (2**n) - 1<span class="pl-cce">\r\n\t</span>return result * result - 2<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">360</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert get_carol(2) == 7<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_carol(4) == 223<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_carol(5) == 959<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L361" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="361"></td>
          <td id="LC361" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to remove empty lists from a given list of lists.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def remove_empty(list1):<span class="pl-cce">\r\n</span>  remove_empty = [x for x in list1 if x]<span class="pl-cce">\r\n</span>  return remove_empty<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">361</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_empty([[], [], [], &#39;Red&#39;, &#39;Green&#39;, [1,2], &#39;Blue&#39;, [], []])==[&#39;Red&#39;, &#39;Green&#39;, [1, 2], &#39;Blue&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_empty([[], [], [],[],[], &#39;Green&#39;, [1,2], &#39;Blue&#39;, [], []])==[ &#39;Green&#39;, [1, 2], &#39;Blue&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_empty([[], [], [], &#39;Python&#39;,[],[], &#39;programming&#39;, &#39;language&#39;,[],[],[], [], []])==[&#39;Python&#39;, &#39;programming&#39;, &#39;language&#39;]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L362" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="362"></td>
          <td id="LC362" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the item with maximum occurrences in a given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def max_occurrences(nums):<span class="pl-cce">\r\n</span>    max_val = 0<span class="pl-cce">\r\n</span>    result = nums[0] <span class="pl-cce">\r\n</span>    for i in nums:<span class="pl-cce">\r\n</span>        occu = nums.count(i)<span class="pl-cce">\r\n</span>        if occu &gt; max_val:<span class="pl-cce">\r\n</span>            max_val = occu<span class="pl-cce">\r\n</span>            result = i <span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">362</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_occurrences([1,2,3,1,2,4,1]) == 1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L363" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="363"></td>
          <td id="LC363" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to add the k elements to each element in the tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def add_K_element(test_list, K):<span class="pl-cce">\r\n</span>  res = [tuple(j + K for j in sub ) for sub in test_list]<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">363</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L364" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="364"></td>
          <td id="LC364" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def make_flip(ch): <span class="pl-cce">\r\n\t</span>return &#39;1&#39; if (ch == &#39;0&#39;) else &#39;0&#39;<span class="pl-cce">\r\n</span>def get_flip_with_starting_charcter(str, expected): <span class="pl-cce">\r\n\t</span>flip_count = 0<span class="pl-cce">\r\n\t</span>for i in range(len( str)): <span class="pl-cce">\r\n\t\t</span>if (str[i] != expected): <span class="pl-cce">\r\n\t\t\t</span>flip_count += 1<span class="pl-cce">\r\n\t\t</span>expected = make_flip(expected) <span class="pl-cce">\r\n\t</span>return flip_count <span class="pl-cce">\r\n</span>def min_flip_to_make_string_alternate(str): <span class="pl-cce">\r\n\t</span>return min(get_flip_with_starting_charcter(str, &#39;0&#39;),get_flip_with_starting_charcter(str, &#39;1&#39;)) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">364</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert min_flip_to_make_string_alternate(<span class="pl-cce">\&quot;</span>0001010111<span class="pl-cce">\&quot;</span>) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_flip_to_make_string_alternate(<span class="pl-cce">\&quot;</span>001<span class="pl-cce">\&quot;</span>) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_flip_to_make_string_alternate(<span class="pl-cce">\&quot;</span>010111011<span class="pl-cce">\&quot;</span>) == 2 <span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L365" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="365"></td>
          <td id="LC365" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count the number of digits of a given number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_Digit(n):<span class="pl-cce">\r\n</span>    count = 0<span class="pl-cce">\r\n</span>    while n != 0:<span class="pl-cce">\r\n</span>        n //= 10<span class="pl-cce">\r\n</span>        count += 1<span class="pl-cce">\r\n</span>    return count<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">365</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Digit(12345) == 5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Digit(11223305) == 8<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Digit(4123459) == 7<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L366" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="366"></td>
          <td id="LC366" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def adjacent_num_product(list_nums):<span class="pl-cce">\r\n</span>    return max(a*b for a, b in zip(list_nums, list_nums[1:]))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">366</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert adjacent_num_product([1,2,3,4,5,6]) == 30<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert adjacent_num_product([1,2,3,4,5]) == 20<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert adjacent_num_product([2,3]) == 6<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L367" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="367"></td>
          <td id="LC367" class="blob-code blob-code-inner js-file-line">{&quot;text&quot;: &quot;Write a function to check if a binary tree is balanced or not.&quot;, &quot;code&quot;: &quot;class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) &lt;= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False&quot;, &quot;task_id&quot;: 367, &quot;test_setup_code&quot;: &quot;root = Node(1) \r\nroot.left = Node(2) \r\nroot.right = Node(3) \r\nroot.left.left = Node(4) \r\nroot.left.right = Node(5) \r\nroot.left.left.left = Node(8) \r\nroot1 = Node(1) \r\nroot1.left = Node(2) \r\nroot1.right = Node(3) \r\nroot1.left.left = Node(4) \r\nroot1.left.right = Node(5) \r\nroot1.right.left = Node(6) \r\nroot1.left.left.left = Node(7)\r\nroot2 = Node(1) \r\nroot2.left = Node(2) \r\nroot2.right = Node(3) \r\nroot2.left.left = Node(4) \r\nroot2.left.right = Node(5)\r\nroot2.left.left.left = Node(7)&quot;, &quot;test_list&quot;: [&quot;assert is_tree_balanced(root) == False&quot;, &quot;assert is_tree_balanced(root1) == True&quot;, &quot;assert is_tree_balanced(root2) == False &quot;], &quot;challenge_test_list&quot;: []}</td>
        </tr>
        <tr>
          <td id="L368" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="368"></td>
          <td id="LC368" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to repeat the given tuple n times.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def repeat_tuples(test_tup, N):<span class="pl-cce">\r\n</span>  res = ((test_tup, ) * N)<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">368</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L369" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="369"></td>
          <td id="LC369" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the lateral surface area of cuboid<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def lateralsurface_cuboid(l,w,h):<span class="pl-cce">\r\n</span>  LSA = 2*h*(l+w)<span class="pl-cce">\r\n</span>  return LSA<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">369</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert lateralsurface_cuboid(8,5,6)==156<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert lateralsurface_cuboid(7,9,10)==320<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert lateralsurface_cuboid(10,20,30)==1800<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L370" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="370"></td>
          <td id="LC370" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to sort a tuple by its float element.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def float_sort(price):<span class="pl-cce">\r\n</span>  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)<span class="pl-cce">\r\n</span>  return float_sort<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">370</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert float_sort([(&#39;item1&#39;, &#39;12.20&#39;), (&#39;item2&#39;, &#39;15.10&#39;), (&#39;item3&#39;, &#39;24.5&#39;)])==[(&#39;item3&#39;, &#39;24.5&#39;), (&#39;item2&#39;, &#39;15.10&#39;), (&#39;item1&#39;, &#39;12.20&#39;)] <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert float_sort([(&#39;item1&#39;, &#39;15&#39;), (&#39;item2&#39;, &#39;10&#39;), (&#39;item3&#39;, &#39;20&#39;)])==[(&#39;item3&#39;, &#39;20&#39;), (&#39;item1&#39;, &#39;15&#39;), (&#39;item2&#39;, &#39;10&#39;)] <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert float_sort([(&#39;item1&#39;, &#39;5&#39;), (&#39;item2&#39;, &#39;10&#39;), (&#39;item3&#39;, &#39;14&#39;)])==[(&#39;item3&#39;, &#39;14&#39;), (&#39;item2&#39;, &#39;10&#39;), (&#39;item1&#39;, &#39;5&#39;)] <span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L371" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="371"></td>
          <td id="LC371" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the smallest missing element in a sorted array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def smallest_missing(A, left_element, right_element):<span class="pl-cce">\r\n</span>    if left_element &gt; right_element:<span class="pl-cce">\r\n</span>        return left_element<span class="pl-cce">\r\n</span>    mid = left_element + (right_element - left_element) // 2<span class="pl-cce">\r\n</span>    if A[mid] == mid:<span class="pl-cce">\r\n</span>        return smallest_missing(A, mid + 1, right_element)<span class="pl-cce">\r\n</span>    else:<span class="pl-cce">\r\n</span>        return smallest_missing(A, left_element, mid - 1)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">371</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L372" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="372"></td>
          <td id="LC372" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to sort a given list of elements in ascending order using heap queue algorithm.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import heapq as hq<span class="pl-cce">\r\n</span>def heap_assending(nums):<span class="pl-cce">\r\n</span>  hq.heapify(nums)<span class="pl-cce">\r\n</span>  s_result = [hq.heappop(nums) for i in range(len(nums))]<span class="pl-cce">\r\n</span>  return s_result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">372</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L373" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="373"></td>
          <td id="LC373" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the volume of a cuboid.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def volume_cuboid(l,w,h):<span class="pl-cce">\r\n</span>  volume=l*w*h<span class="pl-cce">\r\n</span>  return volume<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">373</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert volume_cuboid(1,2,3)==6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert volume_cuboid(5,7,9)==315<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert volume_cuboid(10,15,21)==3150<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L374" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="374"></td>
          <td id="LC374" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to print all permutations of a given string including duplicates.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def permute_string(str):<span class="pl-cce">\r\n</span>    if len(str) == 0:<span class="pl-cce">\r\n</span>        return [&#39;&#39;]<span class="pl-cce">\r\n</span>    prev_list = permute_string(str[1:len(str)])<span class="pl-cce">\r\n</span>    next_list = []<span class="pl-cce">\r\n</span>    for i in range(0,len(prev_list)):<span class="pl-cce">\r\n</span>        for j in range(0,len(str)):<span class="pl-cce">\r\n</span>            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]<span class="pl-cce">\r\n</span>            if new_str not in next_list:<span class="pl-cce">\r\n</span>                next_list.append(new_str)<span class="pl-cce">\r\n</span>    return next_list<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">374</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert permute_string(&#39;ab&#39;)==[&#39;ab&#39;, &#39;ba&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert permute_string(&#39;abc&#39;)==[&#39;abc&#39;, &#39;bac&#39;, &#39;bca&#39;, &#39;acb&#39;, &#39;cab&#39;, &#39;cba&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert permute_string(&#39;abcd&#39;)==[&#39;abcd&#39;, &#39;bacd&#39;, &#39;bcad&#39;, &#39;bcda&#39;, &#39;acbd&#39;, &#39;cabd&#39;, &#39;cbad&#39;, &#39;cbda&#39;, &#39;acdb&#39;, &#39;cadb&#39;, &#39;cdab&#39;, &#39;cdba&#39;, &#39;abdc&#39;, &#39;badc&#39;, &#39;bdac&#39;, &#39;bdca&#39;, &#39;adbc&#39;, &#39;dabc&#39;, &#39;dbac&#39;, &#39;dbca&#39;, &#39;adcb&#39;, &#39;dacb&#39;, &#39;dcab&#39;, &#39;dcba&#39;]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L375" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="375"></td>
          <td id="LC375" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to round the given number to the nearest multiple of a specific number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def round_num(n,m):<span class="pl-cce">\r\n</span>    a = (n //m) * m<span class="pl-cce">\r\n</span>    b = a + m<span class="pl-cce">\r\n</span>    return (b if n - a &gt; b - n else a)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">375</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert round_num(4722,10)==4720<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert round_num(1111,5)==1110<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert round_num(219,2)==218<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L376" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="376"></td>
          <td id="LC376" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def remove_replica(test_tup):<span class="pl-cce">\r\n</span>  temp = set()<span class="pl-cce">\r\n</span>  res = tuple(ele if ele not in temp and not temp.add(ele) <span class="pl-cce">\r\n\t\t\t\t</span>else &#39;MSP&#39; for ele in test_tup)<span class="pl-cce">\r\n</span>  return (res)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">376</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, &#39;MSP&#39;, 4, &#39;MSP&#39;, &#39;MSP&#39;, 5, &#39;MSP&#39;, 6, 7, &#39;MSP&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, &#39;MSP&#39;, 5, 6, &#39;MSP&#39;, 7, 8, 9, &#39;MSP&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, &#39;MSP&#39;, 5, 4, &#39;MSP&#39;, 7, &#39;MSP&#39;, 6, &#39;MSP&#39;, &#39;MSP&#39;)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L377" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="377"></td>
          <td id="LC377" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to remove all occurrences of a character in a given string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def remove_Char(s,c) :  <span class="pl-cce">\r\n</span>    counts = s.count(c) <span class="pl-cce">\r\n</span>    s = list(s) <span class="pl-cce">\r\n</span>    while counts :  <span class="pl-cce">\r\n</span>        s.remove(c) <span class="pl-cce">\r\n</span>        counts -= 1 <span class="pl-cce">\r\n</span>    s = &#39;&#39; . join(s)   <span class="pl-cce">\r\n</span>    return (s) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">377</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_Char(<span class="pl-cce">\&quot;</span>aba<span class="pl-cce">\&quot;</span>,&#39;a&#39;) == <span class="pl-cce">\&quot;</span>b<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_Char(<span class="pl-cce">\&quot;</span>toggle<span class="pl-cce">\&quot;</span>,&#39;g&#39;) == <span class="pl-cce">\&quot;</span>tole<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_Char(<span class="pl-cce">\&quot;</span>aabbc<span class="pl-cce">\&quot;</span>,&#39;b&#39;) == <span class="pl-cce">\&quot;</span>aac<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L378" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="378"></td>
          <td id="LC378" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to shift last element to first position in the given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def move_first(test_list):<span class="pl-cce">\r\n</span>  test_list = test_list[-1:] + test_list[:-1]  <span class="pl-cce">\r\n</span>  return test_list<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">378</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert move_first([1,2,3,4]) == [4,1,2,3]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert move_first([0,1,2,3]) == [3,0,1,2]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert move_first([9,8,7,1]) == [1,9,8,7]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L379" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="379"></td>
          <td id="LC379" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the surface area of a cuboid.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def surfacearea_cuboid(l,w,h):<span class="pl-cce">\r\n</span>  SA = 2*(l*w + l * h + w * h)<span class="pl-cce">\r\n</span>  return SA<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">379</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert surfacearea_cuboid(1,2,3)==22<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert surfacearea_cuboid(5,7,9)==286<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert surfacearea_cuboid(10,15,21)==1350<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L380" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="380"></td>
          <td id="LC380" class="blob-code blob-code-inner js-file-line">{&quot;text&quot;: &quot;Write a function to generate a two-dimensional array.&quot;, &quot;code&quot;: &quot;def multi_list(rownum,colnum):\r\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n&quot;, &quot;task_id&quot;: 380, &quot;test_setup_code&quot;: &quot;&quot;, &quot;test_list&quot;: [&quot;assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] &quot;, &quot;assert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]&quot;, &quot;assert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]&quot;], &quot;challenge_test_list&quot;: []}</td>
        </tr>
        <tr>
          <td id="L381" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="381"></td>
          <td id="LC381" class="blob-code blob-code-inner js-file-line">{&quot;text&quot;: &quot;Write a function to sort a list of lists by a given index of the inner list.&quot;, &quot;code&quot;: &quot;from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result&quot;, &quot;task_id&quot;: 381, &quot;test_setup_code&quot;: &quot;&quot;, &quot;test_list&quot;: [&quot;assert index_on_inner_list([(&#39;Greyson Fulton&#39;, 98, 99), (&#39;Brady Kent&#39;, 97, 96), (&#39;Wyatt Knott&#39;, 91, 94), (&#39;Beau Turnbull&#39;, 94, 98)] ,0)==[(&#39;Beau Turnbull&#39;, 94, 98), (&#39;Brady Kent&#39;, 97, 96), (&#39;Greyson Fulton&#39;, 98, 99), (&#39;Wyatt Knott&#39;, 91, 94)]&quot;, &quot;assert index_on_inner_list([(&#39;Greyson Fulton&#39;, 98, 99), (&#39;Brady Kent&#39;, 97, 96), (&#39;Wyatt Knott&#39;, 91, 94), (&#39;Beau Turnbull&#39;, 94, 98)] ,1)==[(&#39;Wyatt Knott&#39;, 91, 94), (&#39;Beau Turnbull&#39;, 94, 98), (&#39;Brady Kent&#39;, 97, 96), (&#39;Greyson Fulton&#39;, 98, 99)]&quot;, &quot;assert index_on_inner_list([(&#39;Greyson Fulton&#39;, 98, 99), (&#39;Brady Kent&#39;, 97, 96), (&#39;Wyatt Knott&#39;, 91, 94), (&#39;Beau Turnbull&#39;, 94, 98)] ,2)==[(&#39;Wyatt Knott&#39;, 91, 94), (&#39;Brady Kent&#39;, 97, 96), (&#39;Beau Turnbull&#39;, 94, 98), (&#39;Greyson Fulton&#39;, 98, 99)]&quot;], &quot;challenge_test_list&quot;: []}</td>
        </tr>
        <tr>
          <td id="L382" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="382"></td>
          <td id="LC382" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the number of rotations in a circularly sorted array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_rotation_count(A):<span class="pl-cce">\r\n</span>    (left, right) = (0, len(A) - 1)<span class="pl-cce">\r\n</span>    while left &lt;= right:<span class="pl-cce">\r\n</span>        if A[left] &lt;= A[right]:<span class="pl-cce">\r\n</span>            return left<span class="pl-cce">\r\n</span>        mid = (left + right) // 2<span class="pl-cce">\r\n</span>        next = (mid + 1) % len(A)<span class="pl-cce">\r\n</span>        prev = (mid - 1 + len(A)) % len(A)<span class="pl-cce">\r\n</span>        if A[mid] &lt;= A[next] and A[mid] &lt;= A[prev]:<span class="pl-cce">\r\n</span>            return mid<span class="pl-cce">\r\n</span>        elif A[mid] &lt;= A[right]:<span class="pl-cce">\r\n</span>            right = mid - 1<span class="pl-cce">\r\n</span>        elif A[mid] &gt;= A[left]:<span class="pl-cce">\r\n</span>            left = mid + 1<span class="pl-cce">\r\n</span>    return -1<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">382</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L383" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="383"></td>
          <td id="LC383" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to toggle all odd bits of a given number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def even_bit_toggle_number(n) : <span class="pl-cce">\r\n</span>    res = 0; count = 0; temp = n    <span class="pl-cce">\r\n</span>    while(temp &gt; 0 ) : <span class="pl-cce">\r\n</span>        if (count % 2 == 0) : <span class="pl-cce">\r\n</span>            res = res | (1 &lt;&lt; count)      <span class="pl-cce">\r\n</span>        count = count + 1<span class="pl-cce">\r\n</span>        temp &gt;&gt;= 1 <span class="pl-cce">\r\n</span>    return n ^ res <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">383</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert even_bit_toggle_number(10) == 15<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert even_bit_toggle_number(20) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert even_bit_toggle_number(30) == 11<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L384" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="384"></td>
          <td id="LC384" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the frequency of the smallest value in a given array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def frequency_Of_Smallest(n,arr): <span class="pl-cce">\r\n</span>    mn = arr[0] <span class="pl-cce">\r\n</span>    freq = 1<span class="pl-cce">\r\n</span>    for i in range(1,n): <span class="pl-cce">\r\n</span>        if (arr[i] &lt; mn): <span class="pl-cce">\r\n</span>            mn = arr[i] <span class="pl-cce">\r\n</span>            freq = 1<span class="pl-cce">\r\n</span>        elif (arr[i] == mn): <span class="pl-cce">\r\n</span>            freq += 1<span class="pl-cce">\r\n</span>    return freq <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">384</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L385" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="385"></td>
          <td id="LC385" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the n&#39;th perrin number using recursion.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def get_perrin(n):<span class="pl-cce">\r\n</span>  if (n == 0):<span class="pl-cce">\r\n</span>    return 3<span class="pl-cce">\r\n</span>  if (n == 1):<span class="pl-cce">\r\n</span>    return 0<span class="pl-cce">\r\n</span>  if (n == 2):<span class="pl-cce">\r\n</span>    return 2 <span class="pl-cce">\r\n</span>  return get_perrin(n - 2) + get_perrin(n - 3)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">385</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert get_perrin(9) == 12<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_perrin(4) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_perrin(6) == 5<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L386" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="386"></td>
          <td id="LC386" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find out the minimum no of swaps required for bracket balancing in the given string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def swap_count(s):<span class="pl-cce">\r\n\t</span>chars = s<span class="pl-cce">\r\n\t</span>count_left = 0<span class="pl-cce">\r\n\t</span>count_right = 0<span class="pl-cce">\r\n\t</span>swap = 0<span class="pl-cce">\r\n\t</span>imbalance = 0; <span class="pl-cce">\r\n\t</span>for i in range(len(chars)):<span class="pl-cce">\r\n\t\t</span>if chars[i] == &#39;[&#39;:<span class="pl-cce">\r\n\t\t\t</span>count_left += 1<span class="pl-cce">\r\n\t\t\t</span>if imbalance &gt; 0:<span class="pl-cce">\r\n\t\t\t\t</span>swap += imbalance<span class="pl-cce">\r\n\t\t\t\t</span>imbalance -= 1<span class="pl-cce">\r\n\t\t</span>elif chars[i] == &#39;]&#39;:<span class="pl-cce">\r\n\t\t\t</span>count_right += 1<span class="pl-cce">\r\n\t\t\t</span>imbalance = (count_right - count_left) <span class="pl-cce">\r\n\t</span>return swap<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">386</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert swap_count(<span class="pl-cce">\&quot;</span>[]][][<span class="pl-cce">\&quot;</span>) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert swap_count(<span class="pl-cce">\&quot;</span>[[][]]<span class="pl-cce">\&quot;</span>) == 0<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert swap_count(<span class="pl-cce">\&quot;</span>[[][]]][<span class="pl-cce">\&quot;</span>) == 1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L387" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="387"></td>
          <td id="LC387" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether the hexadecimal number is even or odd.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def even_or_odd(N): <span class="pl-cce">\r\n</span>    l = len(N) <span class="pl-cce">\r\n</span>    if (N[l-1] ==&#39;0&#39;or N[l-1] ==&#39;2&#39;or <span class="pl-cce">\r\n</span>        N[l-1] ==&#39;4&#39;or N[l-1] ==&#39;6&#39;or <span class="pl-cce">\r\n</span>        N[l-1] ==&#39;8&#39;or N[l-1] ==&#39;A&#39;or <span class="pl-cce">\r\n</span>        N[l-1] ==&#39;C&#39;or N[l-1] ==&#39;E&#39;): <span class="pl-cce">\r\n</span>        return (<span class="pl-cce">\&quot;</span>Even<span class="pl-cce">\&quot;</span>) <span class="pl-cce">\r\n</span>    else: <span class="pl-cce">\r\n</span>        return (<span class="pl-cce">\&quot;</span>Odd<span class="pl-cce">\&quot;</span>) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">387</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert even_or_odd(<span class="pl-cce">\&quot;</span>AB3454D<span class="pl-cce">\&quot;</span>) ==<span class="pl-cce">\&quot;</span>Odd<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert even_or_odd(<span class="pl-cce">\&quot;</span>ABC<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>Even<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert even_or_odd(<span class="pl-cce">\&quot;</span>AAD<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>Odd<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L388" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="388"></td>
          <td id="LC388" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the highest power of 2 that is less than or equal to n.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def highest_Power_of_2(n): <span class="pl-cce">\r\n</span>    res = 0; <span class="pl-cce">\r\n</span>    for i in range(n, 0, -1): <span class="pl-cce">\r\n</span>        if ((i &amp; (i - 1)) == 0): <span class="pl-cce">\r\n</span>            res = i; <span class="pl-cce">\r\n</span>            break; <span class="pl-cce">\r\n</span>    return res; <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">388</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert highest_Power_of_2(10) == 8<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert highest_Power_of_2(19) == 16<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert highest_Power_of_2(32) == 32<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L389" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="389"></td>
          <td id="LC389" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the n&#39;th lucas number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_lucas(n): <span class="pl-cce">\r\n\t</span>if (n == 0): <span class="pl-cce">\r\n\t\t</span>return 2<span class="pl-cce">\r\n\t</span>if (n == 1): <span class="pl-cce">\r\n\t\t</span>return 1<span class="pl-cce">\r\n\t</span>return find_lucas(n - 1) + find_lucas(n - 2) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">389</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_lucas(9) == 76<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_lucas(4) == 7<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_lucas(3) == 4<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L390" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="390"></td>
          <td id="LC390" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to insert a given string at the beginning of all items in a list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def add_string(list,string):<span class="pl-cce">\r\n</span> add_string=[string.format(i) for i in  list]<span class="pl-cce">\r\n</span> return add_string<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">390</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert add_string([1,2,3,4],&#39;temp{0}&#39;)==[&#39;temp1&#39;, &#39;temp2&#39;, &#39;temp3&#39;, &#39;temp4&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert add_string([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;], &#39;python{0}&#39;)==[ &#39;pythona&#39;, &#39;pythonb&#39;, &#39;pythonc&#39;, &#39;pythond&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert add_string([5,6,7,8],&#39;string{0}&#39;)==[&#39;string5&#39;, &#39;string6&#39;, &#39;string7&#39;, &#39;string8&#39;]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L391" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="391"></td>
          <td id="LC391" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to convert more than one list to nested dictionary.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def convert_list_dictionary(l1, l2, l3):<span class="pl-cce">\r\n</span>     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]<span class="pl-cce">\r\n</span>     return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">391</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert convert_list_dictionary([<span class="pl-cce">\&quot;</span>S001<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>S002<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>S003<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>S004<span class="pl-cce">\&quot;</span>],[<span class="pl-cce">\&quot;</span>Adina Park<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>Leyton Marsh<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>Duncan Boyle<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>Saim Richards<span class="pl-cce">\&quot;</span>] ,[85, 98, 89, 92])==[{&#39;S001&#39;: {&#39;Adina Park&#39;: 85}}, {&#39;S002&#39;: {&#39;Leyton Marsh&#39;: 98}}, {&#39;S003&#39;: {&#39;Duncan Boyle&#39;: 89}}, {&#39;S004&#39;: {&#39;Saim Richards&#39;: 92}}]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert convert_list_dictionary([<span class="pl-cce">\&quot;</span>abc<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>def<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>ghi<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>jkl<span class="pl-cce">\&quot;</span>],[<span class="pl-cce">\&quot;</span>python<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>program<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>language<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>programs<span class="pl-cce">\&quot;</span>],[100,200,300,400])==[{&#39;abc&#39;:{&#39;python&#39;:100}},{&#39;def&#39;:{&#39;program&#39;:200}},{&#39;ghi&#39;:{&#39;language&#39;:300}},{&#39;jkl&#39;:{&#39;programs&#39;:400}}]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert convert_list_dictionary([<span class="pl-cce">\&quot;</span>A1<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>A2<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>A3<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>A4<span class="pl-cce">\&quot;</span>],[<span class="pl-cce">\&quot;</span>java<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>C<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>C++<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>DBMS<span class="pl-cce">\&quot;</span>],[10,20,30,40])==[{&#39;A1&#39;:{&#39;java&#39;:10}},{&#39;A2&#39;:{&#39;C&#39;:20}},{&#39;A3&#39;:{&#39;C++&#39;:30}},{&#39;A4&#39;:{&#39;DBMS&#39;:40}}]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L392" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="392"></td>
          <td id="LC392" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def get_max_sum (n):<span class="pl-cce">\r\n\t</span>res = list()<span class="pl-cce">\r\n\t</span>res.append(0)<span class="pl-cce">\r\n\t</span>res.append(1)<span class="pl-cce">\r\n\t</span>i = 2<span class="pl-cce">\r\n\t</span>while i&lt;n + 1:<span class="pl-cce">\r\n\t\t</span>res.append(max(i, (res[int(i / 2)] <span class="pl-cce">\r\n\t\t\t\t\t\t</span>+ res[int(i / 3)] +<span class="pl-cce">\r\n\t\t\t\t\t\t\t</span>res[int(i / 4)]<span class="pl-cce">\r\n\t\t\t\t\t\t</span>+ res[int(i / 5)])))<span class="pl-cce">\r\n\t\t</span>i = i + 1<span class="pl-cce">\r\n\t</span>return res[n]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">392</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert get_max_sum(60) == 106<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_max_sum(10) == 12<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_max_sum(2) == 2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L393" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="393"></td>
          <td id="LC393" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the list with maximum length using lambda function.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def max_length_list(input_list):<span class="pl-cce">\r\n</span>    max_length = max(len(x) for x in input_list )   <span class="pl-cce">\r\n</span>    max_list = max(input_list, key = lambda i: len(i))    <span class="pl-cce">\r\n</span>    return(max_length, max_list)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">393</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L394" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="394"></td>
          <td id="LC394" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check if given tuple is distinct or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_distinct(test_tup):<span class="pl-cce">\r\n</span>  res = True<span class="pl-cce">\r\n</span>  temp = set()<span class="pl-cce">\r\n</span>  for ele in test_tup:<span class="pl-cce">\r\n</span>    if ele in temp:<span class="pl-cce">\r\n</span>      res = False<span class="pl-cce">\r\n</span>      break<span class="pl-cce">\r\n</span>    temp.add(ele)<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">394</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_distinct((1, 4, 5, 6, 1, 4)) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_distinct((1, 4, 5, 6)) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_distinct((2, 3, 4, 5, 6)) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L395" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="395"></td>
          <td id="LC395" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the first non-repeated character in a given string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def first_non_repeating_character(str1):<span class="pl-cce">\r\n</span>  char_order = []<span class="pl-cce">\r\n</span>  ctr = {}<span class="pl-cce">\r\n</span>  for c in str1:<span class="pl-cce">\r\n</span>    if c in ctr:<span class="pl-cce">\r\n</span>      ctr[c] += 1<span class="pl-cce">\r\n</span>    else:<span class="pl-cce">\r\n</span>      ctr[c] = 1 <span class="pl-cce">\r\n</span>      char_order.append(c)<span class="pl-cce">\r\n</span>  for c in char_order:<span class="pl-cce">\r\n</span>    if ctr[c] == 1:<span class="pl-cce">\r\n</span>      return c<span class="pl-cce">\r\n</span>  return None<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">395</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert first_non_repeating_character(<span class="pl-cce">\&quot;</span>abcabc<span class="pl-cce">\&quot;</span>) == None<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert first_non_repeating_character(<span class="pl-cce">\&quot;</span>abc<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>a<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert first_non_repeating_character(<span class="pl-cce">\&quot;</span>ababc<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>c<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L396" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="396"></td>
          <td id="LC396" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check whether the given string starts and ends with the same character or not using regex.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re  <span class="pl-cce">\r\n</span>regex = r&#39;^[a-z]$|^([a-z]).*<span class="pl-cce">\\</span>1$&#39;<span class="pl-cce">\r\n</span>def check_char(string): <span class="pl-cce">\r\n\t</span>if(re.search(regex, string)): <span class="pl-cce">\r\n\t\t</span>return <span class="pl-cce">\&quot;</span>Valid<span class="pl-cce">\&quot;</span> <span class="pl-cce">\r\n\t</span>else: <span class="pl-cce">\r\n\t\t</span>return <span class="pl-cce">\&quot;</span>Invalid<span class="pl-cce">\&quot;</span> <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">396</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_char(<span class="pl-cce">\&quot;</span>abba<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>Valid<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_char(<span class="pl-cce">\&quot;</span>a<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>Valid<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_char(<span class="pl-cce">\&quot;</span>abcd<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>Invalid<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L397" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="397"></td>
          <td id="LC397" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the median of three specific numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def median_numbers(a,b,c):<span class="pl-cce">\r\n</span> if a &gt; b:<span class="pl-cce">\r\n</span>    if a &lt; c:<span class="pl-cce">\r\n</span>        median = a<span class="pl-cce">\r\n</span>    elif b &gt; c:<span class="pl-cce">\r\n</span>        median = b<span class="pl-cce">\r\n</span>    else:<span class="pl-cce">\r\n</span>        median = c<span class="pl-cce">\r\n</span> else:<span class="pl-cce">\r\n</span>    if a &gt; c:<span class="pl-cce">\r\n</span>        median = a<span class="pl-cce">\r\n</span>    elif b &lt; c:<span class="pl-cce">\r\n</span>        median = b<span class="pl-cce">\r\n</span>    else:<span class="pl-cce">\r\n</span>        median = c<span class="pl-cce">\r\n</span> return median<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">397</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert median_numbers(25,55,65)==55.0<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert median_numbers(20,10,30)==20.0<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert median_numbers(15,45,75)==45.0<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L398" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="398"></td>
          <td id="LC398" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to compute the sum of digits of each number of a given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sum_of_digits(nums):<span class="pl-cce">\r\n</span>    return sum(int(el) for n in nums for el in str(n) if el.isdigit())<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">398</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_of_digits([10,2,56])==14<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_of_digits([[10,20,4,5,&#39;b&#39;,70,&#39;a&#39;]])==19<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_of_digits([10,20,-4,5,-70])==19<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L399" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="399"></td>
          <td id="LC399" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to perform the mathematical bitwise xor operation across the given tuples.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def bitwise_xor(test_tup1, test_tup2):<span class="pl-cce">\r\n</span>  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">399</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L400" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="400"></td>
          <td id="LC400" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to extract the frequency of unique tuples in the given list order irrespective.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def extract_freq(test_list):<span class="pl-cce">\r\n</span>  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))<span class="pl-cce">\r\n</span>  return (res)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">400</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L401" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="401"></td>
          <td id="LC401" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to perform index wise addition of tuple elements in the given two nested tuples.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def add_nested_tuples(test_tup1, test_tup2):<span class="pl-cce">\r\n</span>  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))<span class="pl-cce">\r\n</span>   for tup1, tup2 in zip(test_tup1, test_tup2))<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">401</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L402" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="402"></td>
          <td id="LC402" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to compute the value of ncr%p.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def ncr_modp(n, r, p): <span class="pl-cce">\r\n</span>    C = [0 for i in range(r+1)]   <span class="pl-cce">\r\n</span>    C[0] = 1<span class="pl-cce">\r\n</span>    for i in range(1, n+1): <span class="pl-cce">\r\n</span>        for j in range(min(i, r), 0, -1): <span class="pl-cce">\r\n</span>            C[j] = (C[j] + C[j-1]) % p   <span class="pl-cce">\r\n</span>    return C[r] <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">402</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert ncr_modp(10,2,13)==6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert ncr_modp(15,12,43)==25<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert ncr_modp(17,9,18)==10<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L403" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="403"></td>
          <td id="LC403" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check if a url is valid or not using regex.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def is_valid_URL(str):<span class="pl-cce">\r\n\t</span>regex = (<span class="pl-cce">\&quot;</span>((http|https)://)(www.)?<span class="pl-cce">\&quot;</span> +<span class="pl-cce">\r\n\t\t\t\&quot;</span>[a-zA-Z0-9@:%._<span class="pl-cce">\\\\</span>+~#?&amp;//=]<span class="pl-cce">\&quot;</span> +<span class="pl-cce">\r\n\t\t\t\&quot;</span>{2,256}<span class="pl-cce">\\\\</span>.[a-z]<span class="pl-cce">\&quot;</span> +<span class="pl-cce">\r\n\t\t\t\&quot;</span>{2,6}<span class="pl-cce">\\\\</span>b([-a-zA-Z0-9@:%<span class="pl-cce">\&quot;</span> +<span class="pl-cce">\r\n\t\t\t\&quot;</span>._<span class="pl-cce">\\\\</span>+~#?&amp;//=]*)<span class="pl-cce">\&quot;</span>)<span class="pl-cce">\r\n\t</span>p = re.compile(regex)<span class="pl-cce">\r\n\t</span>if (str == None):<span class="pl-cce">\r\n\t\t</span>return False<span class="pl-cce">\r\n\t</span>if(re.search(p, str)):<span class="pl-cce">\r\n\t\t</span>return True<span class="pl-cce">\r\n\t</span>else:<span class="pl-cce">\r\n\t\t</span>return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">403</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert is_valid_URL(<span class="pl-cce">\&quot;</span>https://www.google.com<span class="pl-cce">\&quot;</span>) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_valid_URL(<span class="pl-cce">\&quot;</span>https:/www.gmail.com<span class="pl-cce">\&quot;</span>) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_valid_URL(<span class="pl-cce">\&quot;</span>https:// www.redit.com<span class="pl-cce">\&quot;</span>) == False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L404" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="404"></td>
          <td id="LC404" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the minimum of two numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def minimum(a,b):   <span class="pl-cce">\r\n</span>    if a &lt;= b: <span class="pl-cce">\r\n</span>        return a <span class="pl-cce">\r\n</span>    else: <span class="pl-cce">\r\n</span>        return b <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">404</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert minimum(1,2) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert minimum(-5,-4) == -5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert minimum(0,0) == 0<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L405" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="405"></td>
          <td id="LC405" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check whether an element exists within a tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_tuplex(tuplex,tuple1): <span class="pl-cce">\r\n</span>  if tuple1 in tuplex:<span class="pl-cce">\r\n</span>    return True<span class="pl-cce">\r\n</span>  else:<span class="pl-cce">\r\n</span>     return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">405</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_tuplex((<span class="pl-cce">\&quot;</span>w<span class="pl-cce">\&quot;</span>, 3, <span class="pl-cce">\&quot;</span>r<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>e<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>s<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>o<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>u<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>r<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>c<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>e<span class="pl-cce">\&quot;</span>),&#39;r&#39;)==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_tuplex((<span class="pl-cce">\&quot;</span>w<span class="pl-cce">\&quot;</span>, 3, <span class="pl-cce">\&quot;</span>r<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>e<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>s<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>o<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>u<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>r<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>c<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>e<span class="pl-cce">\&quot;</span>),&#39;5&#39;)==False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_tuplex((<span class="pl-cce">\&quot;</span>w<span class="pl-cce">\&quot;</span>, 3, <span class="pl-cce">\&quot;</span>r<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>e<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>s<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>o<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>u<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>r<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>c<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>e<span class="pl-cce">\&quot;</span>),3)==True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L406" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="406"></td>
          <td id="LC406" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the parity of a given number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_Parity(x): <span class="pl-cce">\r\n</span>    y = x ^ (x &gt;&gt; 1); <span class="pl-cce">\r\n</span>    y = y ^ (y &gt;&gt; 2); <span class="pl-cce">\r\n</span>    y = y ^ (y &gt;&gt; 4); <span class="pl-cce">\r\n</span>    y = y ^ (y &gt;&gt; 8); <span class="pl-cce">\r\n</span>    y = y ^ (y &gt;&gt; 16); <span class="pl-cce">\r\n</span>    if (y &amp; 1): <span class="pl-cce">\r\n</span>        return (<span class="pl-cce">\&quot;</span>Odd Parity<span class="pl-cce">\&quot;</span>); <span class="pl-cce">\r\n</span>    return (<span class="pl-cce">\&quot;</span>Even Parity<span class="pl-cce">\&quot;</span>); <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">406</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Parity(12) == <span class="pl-cce">\&quot;</span>Even Parity<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Parity(7) == <span class="pl-cce">\&quot;</span>Odd Parity<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Parity(10) == <span class="pl-cce">\&quot;</span>Even Parity<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L407" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="407"></td>
          <td id="LC407" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to create the next bigger number by rearranging the digits of a given number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def rearrange_bigger(n):<span class="pl-cce">\r\n</span>    nums = list(str(n))<span class="pl-cce">\r\n</span>    for i in range(len(nums)-2,-1,-1):<span class="pl-cce">\r\n</span>        if nums[i] &lt; nums[i+1]:<span class="pl-cce">\r\n</span>            z = nums[i:]<span class="pl-cce">\r\n</span>            y = min(filter(lambda x: x &gt; z[0], z))<span class="pl-cce">\r\n</span>            z.remove(y)<span class="pl-cce">\r\n</span>            z.sort()<span class="pl-cce">\r\n</span>            nums[i:] = [y] + z<span class="pl-cce">\r\n</span>            return int(<span class="pl-cce">\&quot;\&quot;</span>.join(nums))<span class="pl-cce">\r\n</span>    return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">407</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert rearrange_bigger(12)==21<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert rearrange_bigger(10)==False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert rearrange_bigger(102)==120<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L408" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="408"></td>
          <td id="LC408" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import heapq<span class="pl-cce">\r\n</span>def k_smallest_pairs(nums1, nums2, k):<span class="pl-cce">\r\n</span>   queue = []<span class="pl-cce">\r\n</span>   def push(i, j):<span class="pl-cce">\r\n</span>       if i &lt; len(nums1) and j &lt; len(nums2):<span class="pl-cce">\r\n</span>           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])<span class="pl-cce">\r\n</span>   push(0, 0)<span class="pl-cce">\r\n</span>   pairs = []<span class="pl-cce">\r\n</span>   while queue and len(pairs) &lt; k:<span class="pl-cce">\r\n</span>       _, i, j = heapq.heappop(queue)<span class="pl-cce">\r\n</span>       pairs.append([nums1[i], nums2[j]])<span class="pl-cce">\r\n</span>       push(i, j + 1)<span class="pl-cce">\r\n</span>       if j == 0:<span class="pl-cce">\r\n</span>           push(i + 1, 0)<span class="pl-cce">\r\n</span>   return pairs<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">408</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L409" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="409"></td>
          <td id="LC409" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the minimum product from the pairs of tuples within a given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def min_product_tuple(list1):<span class="pl-cce">\r\n</span>    result_min = min([abs(x * y) for x, y in list1] )<span class="pl-cce">\r\n</span>    return result_min<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">409</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_product_tuple([(10,20), (15,2), (5,10)] )==30<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L410" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="410"></td>
          <td id="LC410" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the minimum value in a given heterogeneous list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def min_val(listval):<span class="pl-cce">\r\n</span>     min_val = min(i for i in listval if isinstance(i, int))<span class="pl-cce">\r\n</span>     return min_val<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">410</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert min_val([&#39;Python&#39;, 3, 2, 4, 5, &#39;version&#39;])==2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_val([&#39;Python&#39;, 15, 20, 25])==15<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_val([&#39;Python&#39;, 30, 20, 40, 50, &#39;version&#39;])==20<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L411" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="411"></td>
          <td id="LC411" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to convert the given snake case string to camel case string by using regex.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def snake_to_camel(word):<span class="pl-cce">\r\n</span>  return &#39;&#39;.join(x.capitalize() or &#39;_&#39; for x in word.split(&#39;_&#39;))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">411</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert snake_to_camel(&#39;android_tv&#39;) == &#39;AndroidTv&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert snake_to_camel(&#39;google_pixel&#39;) == &#39;GooglePixel&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert snake_to_camel(&#39;apple_watch&#39;) == &#39;AppleWatch&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L412" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="412"></td>
          <td id="LC412" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to remove odd numbers from a given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def remove_odd(l):<span class="pl-cce">\r\n</span>    for i in l:<span class="pl-cce">\r\n</span>        if i % 2 != 0:<span class="pl-cce">\r\n</span>            l.remove(i)<span class="pl-cce">\r\n</span>    return l<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">412</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_odd([1,2,3]) == [2]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_odd([2,4,6]) == [2,4,6]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_odd([10,20,3]) == [10,20]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L413" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="413"></td>
          <td id="LC413" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to extract the nth element from a given list of tuples.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def extract_nth_element(list1, n):<span class="pl-cce">\r\n</span>    result = [x[n] for x in list1]<span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">413</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_nth_element([(&#39;Greyson Fulton&#39;, 98, 99), (&#39;Brady Kent&#39;, 97, 96), (&#39;Wyatt Knott&#39;, 91, 94), (&#39;Beau Turnbull&#39;, 94, 98)] ,0)==[&#39;Greyson Fulton&#39;, &#39;Brady Kent&#39;, &#39;Wyatt Knott&#39;, &#39;Beau Turnbull&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_nth_element([(&#39;Greyson Fulton&#39;, 98, 99), (&#39;Brady Kent&#39;, 97, 96), (&#39;Wyatt Knott&#39;, 91, 94), (&#39;Beau Turnbull&#39;, 94, 98)] ,2)==[99, 96, 94, 98]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_nth_element([(&#39;Greyson Fulton&#39;, 98, 99), (&#39;Brady Kent&#39;, 97, 96), (&#39;Wyatt Knott&#39;, 91, 94), (&#39;Beau Turnbull&#39;, 94, 98)],1)==[98, 97, 91, 94]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L414" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="414"></td>
          <td id="LC414" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether the value exists in a sequence or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def overlapping(list1,list2):  <span class="pl-cce">\r\n</span>    c=0<span class="pl-cce">\r\n</span>    d=0<span class="pl-cce">\r\n</span>    for i in list1: <span class="pl-cce">\r\n</span>        c+=1<span class="pl-cce">\r\n</span>    for i in list2: <span class="pl-cce">\r\n</span>        d+=1<span class="pl-cce">\r\n</span>    for i in range(0,c): <span class="pl-cce">\r\n</span>        for j in range(0,d): <span class="pl-cce">\r\n</span>            if(list1[i]==list2[j]): <span class="pl-cce">\r\n</span>                return 1<span class="pl-cce">\r\n</span>    return 0<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">414</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert overlapping([1,2,3,4,5],[6,7,8,9]) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert overlapping([1,2,3],[4,5,6]) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert overlapping([1,4,5],[1,4,5]) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L415" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="415"></td>
          <td id="LC415" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find a pair with highest product from a given array of integers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def max_Product(arr): <span class="pl-cce">\r\n</span>    arr_len = len(arr) <span class="pl-cce">\r\n</span>    if (arr_len &lt; 2): <span class="pl-cce">\r\n</span>        return (<span class="pl-cce">\&quot;</span>No pairs exists<span class="pl-cce">\&quot;</span>)           <span class="pl-cce">\r\n</span>    x = arr[0]; y = arr[1]      <span class="pl-cce">\r\n</span>    for i in range(0,arr_len): <span class="pl-cce">\r\n</span>        for j in range(i + 1,arr_len): <span class="pl-cce">\r\n</span>            if (arr[i] * arr[j] &gt; x * y): <span class="pl-cce">\r\n</span>                x = arr[i]; y = arr[j] <span class="pl-cce">\r\n</span>    return x,y    <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">415</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_Product([1,2,3]) == (2,3)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L416" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="416"></td>
          <td id="LC416" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>MAX = 1000000<span class="pl-cce">\r\n</span>def breakSum(n): <span class="pl-cce">\r\n\t</span>dp = [0]*(n+1) <span class="pl-cce">\r\n\t</span>dp[0] = 0<span class="pl-cce">\r\n\t</span>dp[1] = 1<span class="pl-cce">\r\n\t</span>for i in range(2, n+1): <span class="pl-cce">\r\n\t\t</span>dp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); <span class="pl-cce">\r\n\t</span>return dp[n]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">416</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert breakSum(12) == 13<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert breakSum(24) == 27<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert breakSum(23) == 23<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L417" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="417"></td>
          <td id="LC417" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find common first element in given list of tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def group_tuples(Input): <span class="pl-cce">\r\n\t</span>out = {} <span class="pl-cce">\r\n\t</span>for elem in Input: <span class="pl-cce">\r\n\t\t</span>try: <span class="pl-cce">\r\n\t\t\t</span>out[elem[0]].extend(elem[1:]) <span class="pl-cce">\r\n\t\t</span>except KeyError: <span class="pl-cce">\r\n\t\t\t</span>out[elem[0]] = list(elem) <span class="pl-cce">\r\n\t</span>return [tuple(values) for values in out.values()] <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">417</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert group_tuples([(&#39;x&#39;, &#39;y&#39;), (&#39;x&#39;, &#39;z&#39;), (&#39;w&#39;, &#39;t&#39;)]) == [(&#39;x&#39;, &#39;y&#39;, &#39;z&#39;), (&#39;w&#39;, &#39;t&#39;)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert group_tuples([(&#39;a&#39;, &#39;b&#39;), (&#39;a&#39;, &#39;c&#39;), (&#39;d&#39;, &#39;e&#39;)]) == [(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;), (&#39;d&#39;, &#39;e&#39;)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert group_tuples([(&#39;f&#39;, &#39;g&#39;), (&#39;f&#39;, &#39;g&#39;), (&#39;h&#39;, &#39;i&#39;)]) == [(&#39;f&#39;, &#39;g&#39;, &#39;g&#39;), (&#39;h&#39;, &#39;i&#39;)]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L418" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="418"></td>
          <td id="LC418" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the sublist having maximum length.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def Find_Max(lst): <span class="pl-cce">\r\n</span>    maxList = max((x) for x in lst) <span class="pl-cce">\r\n</span>    return maxList<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">418</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert Find_Max([[&#39;A&#39;],[&#39;A&#39;,&#39;B&#39;],[&#39;A&#39;,&#39;B&#39;,&#39;C&#39;]]) == [&#39;A&#39;,&#39;B&#39;,&#39;C&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L419" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="419"></td>
          <td id="LC419" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def round_and_sum(list1):<span class="pl-cce">\r\n</span>  lenght=len(list1)<span class="pl-cce">\r\n</span>  round_and_sum=sum(list(map(round,list1))* lenght)<span class="pl-cce">\r\n</span>  return round_and_sum<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">419</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert round_and_sum([5,2,9,24.3,29])==345<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert round_and_sum([25.0,56.7,89.2])==513<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L420" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="420"></td>
          <td id="LC420" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the cube sum of first n even natural numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def cube_Sum(n): <span class="pl-cce">\r\n</span>    sum = 0<span class="pl-cce">\r\n</span>    for i in range(1,n + 1): <span class="pl-cce">\r\n</span>        sum += (2*i)*(2*i)*(2*i) <span class="pl-cce">\r\n</span>    return sum<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">420</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert cube_Sum(2) == 72<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert cube_Sum(3) == 288<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert cube_Sum(4) == 800<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L421" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="421"></td>
          <td id="LC421" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to concatenate each element of tuple by the delimiter.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def concatenate_tuple(test_tup):<span class="pl-cce">\r\n</span>    delim = <span class="pl-cce">\&quot;</span>-<span class="pl-cce">\&quot;\r\n</span>    res = &#39;&#39;.join([str(ele) + delim for ele in test_tup])<span class="pl-cce">\r\n</span>    res = res[ : len(res) - len(delim)]<span class="pl-cce">\r\n</span>    return (str(res)) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">421</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert concatenate_tuple((<span class="pl-cce">\&quot;</span>ID<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>is<span class="pl-cce">\&quot;</span>, 4, <span class="pl-cce">\&quot;</span>UTS<span class="pl-cce">\&quot;</span>) ) == &#39;ID-is-4-UTS&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert concatenate_tuple((<span class="pl-cce">\&quot;</span>QWE<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>is<span class="pl-cce">\&quot;</span>, 4, <span class="pl-cce">\&quot;</span>RTY<span class="pl-cce">\&quot;</span>) ) == &#39;QWE-is-4-RTY&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert concatenate_tuple((<span class="pl-cce">\&quot;</span>ZEN<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>is<span class="pl-cce">\&quot;</span>, 4, <span class="pl-cce">\&quot;</span>OP<span class="pl-cce">\&quot;</span>) ) == &#39;ZEN-is-4-OP&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L422" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="422"></td>
          <td id="LC422" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the average of cubes of first n natural numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_Average_Of_Cube(n):  <span class="pl-cce">\r\n</span>    sum = 0<span class="pl-cce">\r\n</span>    for i in range(1, n + 1): <span class="pl-cce">\r\n</span>        sum += i * i * i  <span class="pl-cce">\r\n</span>    return round(sum / n, 6) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">422</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Average_Of_Cube(2) == 4.5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Average_Of_Cube(3) == 12<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Average_Of_Cube(1) == 1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L423" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="423"></td>
          <td id="LC423" class="blob-code blob-code-inner js-file-line">{&quot;text&quot;: &quot;Write a function to solve gold mine problem.&quot;, &quot;code&quot;: &quot;def get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res &quot;, &quot;task_id&quot;: 423, &quot;test_setup_code&quot;: &quot;&quot;, &quot;test_list&quot;: [&quot;assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16&quot;, &quot;assert get_maxgold([[10,20],[30,40]],2,2)==70&quot;, &quot;assert get_maxgold([[4,9],[3,7]],2,2)==13&quot;], &quot;challenge_test_list&quot;: []}</td>
        </tr>
        <tr>
          <td id="L424" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="424"></td>
          <td id="LC424" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to extract only the rear index element of each string in the given tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def extract_rear(test_tuple):<span class="pl-cce">\r\n</span>  res = list(sub[len(sub) - 1] for sub in test_tuple)<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">424</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_rear((&#39;Mers&#39;, &#39;for&#39;, &#39;Vers&#39;) ) == [&#39;s&#39;, &#39;r&#39;, &#39;s&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_rear((&#39;Avenge&#39;, &#39;for&#39;, &#39;People&#39;) ) == [&#39;e&#39;, &#39;r&#39;, &#39;e&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_rear((&#39;Gotta&#39;, &#39;get&#39;, &#39;go&#39;) ) == [&#39;a&#39;, &#39;t&#39;, &#39;o&#39;]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L425" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="425"></td>
          <td id="LC425" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to count the number of sublists containing a particular element.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_element_in_list(list1, x): <span class="pl-cce">\r\n</span>    ctr = 0<span class="pl-cce">\r\n</span>    for i in range(len(list1)): <span class="pl-cce">\r\n</span>        if x in list1[i]: <span class="pl-cce">\r\n</span>            ctr+= 1          <span class="pl-cce">\r\n</span>    return ctr<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">425</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_element_in_list([[&#39;A&#39;, &#39;B&#39;], [&#39;A&#39;, &#39;C&#39;], [&#39;A&#39;, &#39;D&#39;, &#39;E&#39;], [&#39;B&#39;, &#39;C&#39;, &#39;D&#39;]],&#39;A&#39;)==3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_element_in_list([[&#39;A&#39;, &#39;B&#39;], [&#39;A&#39;, &#39;C&#39;], [&#39;A&#39;, &#39;D&#39;, &#39;E&#39;], [&#39;B&#39;, &#39;C&#39;, &#39;D&#39;]],&#39;E&#39;)==1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L426" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="426"></td>
          <td id="LC426" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to filter odd numbers using lambda function.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def filter_oddnumbers(nums):<span class="pl-cce">\r\n</span> odd_nums = list(filter(lambda x: x%2 != 0, nums))<span class="pl-cce">\r\n</span> return odd_nums<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">426</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L427" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="427"></td>
          <td id="LC427" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def change_date_format(dt):<span class="pl-cce">\r\n</span>        return re.sub(r&#39;(<span class="pl-cce">\\</span>d{4})-(<span class="pl-cce">\\</span>d{1,2})-(<span class="pl-cce">\\</span>d{1,2})&#39;, &#39;<span class="pl-cce">\\\\</span>3-<span class="pl-cce">\\\\</span>2-<span class="pl-cce">\\\\</span>1&#39;, dt)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">427</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert change_date_format(<span class="pl-cce">\&quot;</span>2026-01-02<span class="pl-cce">\&quot;</span>) == &#39;02-01-2026&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert change_date_format(<span class="pl-cce">\&quot;</span>2020-11-13<span class="pl-cce">\&quot;</span>) == &#39;13-11-2020&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert change_date_format(<span class="pl-cce">\&quot;</span>2021-04-26<span class="pl-cce">\&quot;</span>) == &#39;26-04-2021&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L428" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="428"></td>
          <td id="LC428" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to sort the given array by using shell sort.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def shell_sort(my_list):<span class="pl-cce">\r\n</span>    gap = len(my_list) // 2<span class="pl-cce">\r\n</span>    while gap &gt; 0:<span class="pl-cce">\r\n</span>        for i in range(gap, len(my_list)):<span class="pl-cce">\r\n</span>            current_item = my_list[i]<span class="pl-cce">\r\n</span>            j = i<span class="pl-cce">\r\n</span>            while j &gt;= gap and my_list[j - gap] &gt; current_item:<span class="pl-cce">\r\n</span>                my_list[j] = my_list[j - gap]<span class="pl-cce">\r\n</span>                j -= gap<span class="pl-cce">\r\n</span>            my_list[j] = current_item<span class="pl-cce">\r\n</span>        gap //= 2<span class="pl-cce">\r\n\r\n</span>    return my_list<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">428</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L429" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="429"></td>
          <td id="LC429" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to extract the elementwise and tuples from the given two tuples.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def and_tuples(test_tup1, test_tup2):<span class="pl-cce">\r\n</span>  res = tuple(ele1 &amp; ele2 for ele1, ele2 in zip(test_tup1, test_tup2))<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">429</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L430" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="430"></td>
          <td id="LC430" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the directrix of a parabola.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def parabola_directrix(a, b, c): <span class="pl-cce">\r\n</span>  directrix=((int)(c - ((b * b) + 1) * 4 * a ))<span class="pl-cce">\r\n</span>  return directrix<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">430</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert parabola_directrix(5,3,2)==-198<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert parabola_directrix(9,8,4)==-2336<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert parabola_directrix(2,4,6)==-130<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L431" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="431"></td>
          <td id="LC431" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function that takes two lists and returns true if they have at least one common element.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def common_element(list1, list2):<span class="pl-cce">\r\n</span>     result = False<span class="pl-cce">\r\n</span>     for x in list1:<span class="pl-cce">\r\n</span>         for y in list2:<span class="pl-cce">\r\n</span>             if x == y:<span class="pl-cce">\r\n</span>                 result = True<span class="pl-cce">\r\n</span>                 return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">431</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert common_element([1,2,3,4,5], [5,6,7,8,9])==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert common_element([1,2,3,4,5], [6,7,8,9])==None<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert common_element([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;], [&#39;d&#39;,&#39;b&#39;,&#39;e&#39;])==True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L432" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="432"></td>
          <td id="LC432" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the median of a trapezium.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def median_trapezium(base1,base2,height):<span class="pl-cce">\r\n</span> median = 0.5 * (base1+ base2)<span class="pl-cce">\r\n</span> return median<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">432</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert median_trapezium(15,25,35)==20<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert median_trapezium(10,20,30)==15<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert median_trapezium(6,9,4)==7.5<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L433" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="433"></td>
          <td id="LC433" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check whether the entered number is greater than the elements of the given array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_greater(arr, number):<span class="pl-cce">\r\n</span>  arr.sort()<span class="pl-cce">\r\n</span>  if number &gt; arr[-1]:<span class="pl-cce">\r\n</span>    return (&#39;Yes, the entered number is greater than those in the array&#39;)<span class="pl-cce">\r\n</span>  else:<span class="pl-cce">\r\n</span>    return (&#39;No, entered number is less than those in the array&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">433</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_greater([1, 2, 3, 4, 5], 4) == &#39;No, entered number is less than those in the array&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_greater([2, 3, 4, 5, 6], 8) == &#39;Yes, the entered number is greater than those in the array&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_greater([9, 7, 4, 8, 6, 1], 11) == &#39;Yes, the entered number is greater than those in the array&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L434" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="434"></td>
          <td id="LC434" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function that matches a string that has an a followed by one or more b&#39;s.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def text_match_one(text):<span class="pl-cce">\r\n</span>        patterns = &#39;ab+?&#39;<span class="pl-cce">\r\n</span>        if re.search(patterns,  text):<span class="pl-cce">\r\n</span>                return &#39;Found a match!&#39;<span class="pl-cce">\r\n</span>        else:<span class="pl-cce">\r\n</span>                return(&#39;Not matched!&#39;)<span class="pl-cce">\r\n</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">434</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match_one(<span class="pl-cce">\&quot;</span>ac<span class="pl-cce">\&quot;</span>)==(&#39;Not matched!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match_one(<span class="pl-cce">\&quot;</span>dc<span class="pl-cce">\&quot;</span>)==(&#39;Not matched!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match_one(<span class="pl-cce">\&quot;</span>abba<span class="pl-cce">\&quot;</span>)==(&#39;Found a match!&#39;)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L435" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="435"></td>
          <td id="LC435" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the last digit of a given number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def last_Digit(n) :<span class="pl-cce">\r\n</span>    return (n % 10) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">435</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert last_Digit(123) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert last_Digit(25) == 5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert last_Digit(30) == 0<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L436" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="436"></td>
          <td id="LC436" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to print negative numbers in a list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def neg_nos(list1):<span class="pl-cce">\r\n</span>  for num in list1: <span class="pl-cce">\r\n</span>    if num &lt; 0: <span class="pl-cce">\r\n</span>       return num <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">436</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert neg_nos([-1,4,5,-6]) == -1,-6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert neg_nos([-1,-2,3,4]) == -1,-2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert neg_nos([-7,-6,8,9]) == -7,-6<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L437" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="437"></td>
          <td id="LC437" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to remove odd characters in a string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def remove_odd(str1):<span class="pl-cce">\r\n</span> str2 = &#39;&#39;<span class="pl-cce">\r\n</span> for i in range(1, len(str1) + 1):<span class="pl-cce">\r\n</span>    if(i % 2 == 0):<span class="pl-cce">\r\n</span>        str2 = str2 + str1[i - 1]<span class="pl-cce">\r\n</span> return str2<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">437</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_odd(<span class="pl-cce">\&quot;</span>python<span class="pl-cce">\&quot;</span>)==(<span class="pl-cce">\&quot;</span>yhn<span class="pl-cce">\&quot;</span>)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_odd(<span class="pl-cce">\&quot;</span>program<span class="pl-cce">\&quot;</span>)==(<span class="pl-cce">\&quot;</span>rga<span class="pl-cce">\&quot;</span>)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_odd(<span class="pl-cce">\&quot;</span>language<span class="pl-cce">\&quot;</span>)==(<span class="pl-cce">\&quot;</span>agae<span class="pl-cce">\&quot;</span>)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L438" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="438"></td>
          <td id="LC438" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to count bidirectional tuple pairs.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_bidirectional(test_list):<span class="pl-cce">\r\n</span>  res = 0<span class="pl-cce">\r\n</span>  for idx in range(0, len(test_list)):<span class="pl-cce">\r\n</span>    for iidx in range(idx + 1, len(test_list)):<span class="pl-cce">\r\n</span>      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:<span class="pl-cce">\r\n</span>        res += 1<span class="pl-cce">\r\n</span>  return (str(res)) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">438</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == &#39;3&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == &#39;2&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == &#39;4&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L439" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="439"></td>
          <td id="LC439" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to convert a list of multiple integers into a single integer.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def multiple_to_single(L):<span class="pl-cce">\r\n</span>  x = int(<span class="pl-cce">\&quot;\&quot;</span>.join(map(str, L)))<span class="pl-cce">\r\n</span>  return x<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">439</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert multiple_to_single([11, 33, 50])==113350<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert multiple_to_single([-1,2,3,4,5,6])==-123456<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert multiple_to_single([10,15,20,25])==10152025<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L440" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="440"></td>
          <td id="LC440" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find all adverbs and their positions in a given sentence.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def find_adverb_position(text):<span class="pl-cce">\r\n</span> for m in re.finditer(r<span class="pl-cce">\&quot;\\</span>w+ly<span class="pl-cce">\&quot;</span>, text):<span class="pl-cce">\r\n</span>    return (m.start(), m.end(), m.group(0))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">440</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_adverb_position(<span class="pl-cce">\&quot;</span>clearly!! we can see the sky<span class="pl-cce">\&quot;</span>)==(0, 7, &#39;clearly&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_adverb_position(<span class="pl-cce">\&quot;</span>seriously!! there are many roses<span class="pl-cce">\&quot;</span>)==(0, 9, &#39;seriously&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_adverb_position(<span class="pl-cce">\&quot;</span>unfortunately!! sita is going to home<span class="pl-cce">\&quot;</span>)==(0, 13, &#39;unfortunately&#39;)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L441" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="441"></td>
          <td id="LC441" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the surface area of a cube.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def surfacearea_cube(l):<span class="pl-cce">\r\n</span>  surfacearea= 6*l*l<span class="pl-cce">\r\n</span>  return surfacearea<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">441</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert surfacearea_cube(5)==150<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert surfacearea_cube(3)==54<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert surfacearea_cube(10)==600<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L442" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="442"></td>
          <td id="LC442" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the ration of positive numbers in an array of integers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from array import array<span class="pl-cce">\r\n</span>def positive_count(nums):<span class="pl-cce">\r\n</span>    n = len(nums)<span class="pl-cce">\r\n</span>    n1 = 0<span class="pl-cce">\r\n</span>    for x in nums:<span class="pl-cce">\r\n</span>        if x &gt; 0:<span class="pl-cce">\r\n</span>            n1 += 1<span class="pl-cce">\r\n</span>        else:<span class="pl-cce">\r\n</span>          None<span class="pl-cce">\r\n</span>    return round(n1/n,2)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">442</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L443" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="443"></td>
          <td id="LC443" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the largest negative number from the given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def largest_neg(list1): <span class="pl-cce">\r\n</span>    max = list1[0] <span class="pl-cce">\r\n</span>    for x in list1: <span class="pl-cce">\r\n</span>        if x &lt; max : <span class="pl-cce">\r\n</span>             max = x  <span class="pl-cce">\r\n</span>    return max<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">443</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert largest_neg([1,2,3,-4,-6]) == -6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert largest_neg([1,2,3,-8,-9]) == -9<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert largest_neg([1,2,3,4,-1]) == -1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L444" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="444"></td>
          <td id="LC444" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to trim each tuple by k in the given tuple list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def trim_tuple(test_list, K):<span class="pl-cce">\r\n</span>  res = []<span class="pl-cce">\r\n</span>  for ele in test_list:<span class="pl-cce">\r\n</span>    N = len(ele)<span class="pl-cce">\r\n</span>    res.append(tuple(list(ele)[K: N - K]))<span class="pl-cce">\r\n</span>  return (str(res)) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">444</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == &#39;[(2,), (9,), (2,), (2,)]&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == &#39;[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == &#39;[(8, 4), (8, 12), (1, 7), (6, 9)]&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L445" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="445"></td>
          <td id="LC445" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to perform index wise multiplication of tuple elements in the given two tuples.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def index_multiplication(test_tup1, test_tup2):<span class="pl-cce">\r\n</span>  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))<span class="pl-cce">\r\n</span>   for tup1, tup2 in zip(test_tup1, test_tup2))<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">445</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L446" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="446"></td>
          <td id="LC446" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count the occurence of all elements of list in a tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from collections import Counter <span class="pl-cce">\r\n</span>def count_Occurrence(tup, lst): <span class="pl-cce">\r\n</span>    count = 0<span class="pl-cce">\r\n</span>    for item in tup: <span class="pl-cce">\r\n</span>        if item in lst: <span class="pl-cce">\r\n</span>            count+= 1 <span class="pl-cce">\r\n</span>    return count  <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">446</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Occurrence((&#39;a&#39;, &#39;a&#39;, &#39;c&#39;, &#39;b&#39;, &#39;d&#39;),[&#39;a&#39;, &#39;b&#39;] ) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L447" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="447"></td>
          <td id="LC447" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find cubes of individual elements in a list using lambda function.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def cube_nums(nums):<span class="pl-cce">\r\n</span> cube_nums = list(map(lambda x: x ** 3, nums))<span class="pl-cce">\r\n</span> return cube_nums<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">447</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert cube_nums([10,20,30])==([1000, 8000, 27000])<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert cube_nums([12,15])==([1728, 3375])<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L448" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="448"></td>
          <td id="LC448" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to calculate the sum of perrin numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def cal_sum(n): <span class="pl-cce">\r\n\t</span>a = 3<span class="pl-cce">\r\n\t</span>b = 0<span class="pl-cce">\r\n\t</span>c = 2<span class="pl-cce">\r\n\t</span>if (n == 0): <span class="pl-cce">\r\n\t\t</span>return 3<span class="pl-cce">\r\n\t</span>if (n == 1): <span class="pl-cce">\r\n\t\t</span>return 3<span class="pl-cce">\r\n\t</span>if (n == 2): <span class="pl-cce">\r\n\t\t</span>return 5<span class="pl-cce">\r\n\t</span>sum = 5<span class="pl-cce">\r\n\t</span>while (n &gt; 2): <span class="pl-cce">\r\n\t\t</span>d = a + b <span class="pl-cce">\r\n\t\t</span>sum = sum + d <span class="pl-cce">\r\n\t\t</span>a = b <span class="pl-cce">\r\n\t\t</span>b = c <span class="pl-cce">\r\n\t\t</span>c = d <span class="pl-cce">\r\n\t\t</span>n = n-1<span class="pl-cce">\r\n\t</span>return sum<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">448</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert cal_sum(9) == 49<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert cal_sum(10) == 66<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert cal_sum(11) == 88<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L449" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="449"></td>
          <td id="LC449" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether the triangle is valid or not if 3 points are given.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_Triangle(x1,y1,x2,y2,x3,y3): <span class="pl-cce">\r\n</span>    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   <span class="pl-cce">\r\n</span>    if a == 0: <span class="pl-cce">\r\n</span>        return (&#39;No&#39;) <span class="pl-cce">\r\n</span>    else: <span class="pl-cce">\r\n</span>        return (&#39;Yes&#39;) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">449</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_Triangle(1,5,2,5,4,6) == &#39;Yes&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_Triangle(1,1,1,4,1,5) == &#39;No&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_Triangle(1,1,1,1,1,1) == &#39;No&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L450" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="450"></td>
          <td id="LC450" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to extract specified size of strings from a give list of string values.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def extract_string(str, l):<span class="pl-cce">\r\n</span>    result = [e for e in str if len(e) == l] <span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">450</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_string([&#39;Python&#39;, &#39;list&#39;, &#39;exercises&#39;, &#39;practice&#39;, &#39;solution&#39;] ,8)==[&#39;practice&#39;, &#39;solution&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_string([&#39;Python&#39;, &#39;list&#39;, &#39;exercises&#39;, &#39;practice&#39;, &#39;solution&#39;] ,6)==[&#39;Python&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_string([&#39;Python&#39;, &#39;list&#39;, &#39;exercises&#39;, &#39;practice&#39;, &#39;solution&#39;] ,9)==[&#39;exercises&#39;]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L451" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="451"></td>
          <td id="LC451" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to remove all whitespaces from the given string using regex.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def remove_whitespaces(text1):<span class="pl-cce">\r\n</span>  return (re.sub(r&#39;<span class="pl-cce">\\</span>s+&#39;, &#39;&#39;,text1))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">451</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_whitespaces(&#39; Google    Flutter &#39;) == &#39;GoogleFlutter&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_whitespaces(&#39; Google    Dart &#39;) == &#39;GoogleDart&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_whitespaces(&#39; iOS    Swift &#39;) == &#39;iOSSwift&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L452" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="452"></td>
          <td id="LC452" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function that gives loss amount if the given amount has loss else return none.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def loss_amount(actual_cost,sale_amount): <span class="pl-cce">\r\n</span>  if(sale_amount &gt; actual_cost):<span class="pl-cce">\r\n</span>    amount = sale_amount - actual_cost<span class="pl-cce">\r\n</span>    return amount<span class="pl-cce">\r\n</span>  else:<span class="pl-cce">\r\n</span>    return None<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">452</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert loss_amount(1500,1200)==None<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert loss_amount(100,200)==100<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert loss_amount(2000,5000)==3000<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L453" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="453"></td>
          <td id="LC453" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the sum of even factors of a number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math <span class="pl-cce">\r\n</span>def sumofFactors(n) : <span class="pl-cce">\r\n</span>    if (n % 2 != 0) : <span class="pl-cce">\r\n</span>        return 0<span class="pl-cce">\r\n</span>    res = 1<span class="pl-cce">\r\n</span>    for i in range(2, (int)(math.sqrt(n)) + 1) :    <span class="pl-cce">\r\n</span>        count = 0<span class="pl-cce">\r\n</span>        curr_sum = 1<span class="pl-cce">\r\n</span>        curr_term = 1<span class="pl-cce">\r\n</span>        while (n % i == 0) : <span class="pl-cce">\r\n</span>            count= count + 1<span class="pl-cce">\r\n</span>            n = n // i <span class="pl-cce">\r\n</span>            if (i == 2 and count == 1) : <span class="pl-cce">\r\n</span>                curr_sum = 0<span class="pl-cce">\r\n</span>            curr_term = curr_term * i <span class="pl-cce">\r\n</span>            curr_sum = curr_sum + curr_term <span class="pl-cce">\r\n</span>        res = res * curr_sum  <span class="pl-cce">\r\n</span>    if (n &gt;= 2) : <span class="pl-cce">\r\n</span>        res = res * (1 + n) <span class="pl-cce">\r\n</span>    return res <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">453</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sumofFactors(18) == 26<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sumofFactors(30) == 48<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sumofFactors(6) == 8<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L454" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="454"></td>
          <td id="LC454" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function that matches a word containing &#39;z&#39;.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def text_match_wordz(text):<span class="pl-cce">\r\n</span>        patterns = &#39;<span class="pl-cce">\\</span>w*z.<span class="pl-cce">\\</span>w*&#39;<span class="pl-cce">\r\n</span>        if re.search(patterns,  text):<span class="pl-cce">\r\n</span>                return &#39;Found a match!&#39;<span class="pl-cce">\r\n</span>        else:<span class="pl-cce">\r\n</span>                return(&#39;Not matched!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">454</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match_wordz(<span class="pl-cce">\&quot;</span>pythonz.<span class="pl-cce">\&quot;</span>)==(&#39;Found a match!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match_wordz(<span class="pl-cce">\&quot;</span>xyz.<span class="pl-cce">\&quot;</span>)==(&#39;Found a match!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match_wordz(<span class="pl-cce">\&quot;</span>  lang  .<span class="pl-cce">\&quot;</span>)==(&#39;Not matched!&#39;)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L455" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="455"></td>
          <td id="LC455" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check whether the given month number contains 31 days or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_monthnumb_number(monthnum2):<span class="pl-cce">\r\n</span>  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):<span class="pl-cce">\r\n</span>    return True<span class="pl-cce">\r\n</span>  else:<span class="pl-cce">\r\n</span>    return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">455</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_monthnumb_number(5)==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_monthnumb_number(2)==False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_monthnumb_number(6)==False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L456" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="456"></td>
          <td id="LC456" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to reverse strings in a given list of string values.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def reverse_string_list(stringlist):<span class="pl-cce">\r\n</span>    result = [x[::-1] for x in stringlist]<span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">456</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert reverse_string_list([&#39;Red&#39;, &#39;Green&#39;, &#39;Blue&#39;, &#39;White&#39;, &#39;Black&#39;])==[&#39;deR&#39;, &#39;neerG&#39;, &#39;eulB&#39;, &#39;etihW&#39;, &#39;kcalB&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert reverse_string_list([&#39;john&#39;,&#39;amal&#39;,&#39;joel&#39;,&#39;george&#39;])==[&#39;nhoj&#39;,&#39;lama&#39;,&#39;leoj&#39;,&#39;egroeg&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert reverse_string_list([&#39;jack&#39;,&#39;john&#39;,&#39;mary&#39;])==[&#39;kcaj&#39;,&#39;nhoj&#39;,&#39;yram&#39;]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L457" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="457"></td>
          <td id="LC457" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the sublist having minimum length.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def Find_Min(lst): <span class="pl-cce">\r\n</span>    minList = min((x) for x in lst) <span class="pl-cce">\r\n</span>    return minList<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">457</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert Find_Min([[1],[1,2],[1,2,3]]) == [1]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Find_Min([[&#39;x&#39;],[&#39;x&#39;,&#39;y&#39;],[&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]]) == [&#39;x&#39;]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L458" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="458"></td>
          <td id="LC458" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the area of a rectangle.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def rectangle_area(l,b):<span class="pl-cce">\r\n</span>  area=l*b<span class="pl-cce">\r\n</span>  return area<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">458</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert rectangle_area(10,20)==200<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert rectangle_area(10,5)==50<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert rectangle_area(4,2)==8<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L459" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="459"></td>
          <td id="LC459" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to remove uppercase substrings from a given string by using regex.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def remove_uppercase(str1):<span class="pl-cce">\r\n</span>  remove_upper = lambda text: re.sub(&#39;[A-Z]&#39;, &#39;&#39;, text)<span class="pl-cce">\r\n</span>  result =  remove_upper(str1)<span class="pl-cce">\r\n</span>  return (result)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">459</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_uppercase(&#39;cAstyoUrFavoRitETVshoWs&#39;) == &#39;cstyoravoitshos&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_uppercase(&#39;wAtchTheinTernEtrAdIo&#39;) == &#39;wtchheinerntrdo&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_uppercase(&#39;VoicESeaRchAndreComMendaTionS&#39;) == &#39;oiceachndreomendaion&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L460" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="460"></td>
          <td id="LC460" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to get the first element of each sublist.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def Extract(lst): <span class="pl-cce">\r\n</span>    return [item[0] for item in lst] <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">460</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Extract([[1,2,3],[4, 5]]) == [1,4]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Extract([[9,8,1],[1,2]]) == [9,1]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L461" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="461"></td>
          <td id="LC461" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count the upper case characters in a given string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def upper_ctr(str):<span class="pl-cce">\r\n</span>    upper_ctr = 0<span class="pl-cce">\r\n</span>    for i in range(len(str)):<span class="pl-cce">\r\n</span>          if str[i] &gt;= &#39;A&#39; and str[i] &lt;= &#39;Z&#39;: upper_ctr += 1<span class="pl-cce">\r\n</span>          return upper_ctr<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">461</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert upper_ctr(&#39;PYthon&#39;) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert upper_ctr(&#39;BigData&#39;) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert upper_ctr(&#39;program&#39;) == 0<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L462" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="462"></td>
          <td id="LC462" class="blob-code blob-code-inner js-file-line">{&quot;text&quot;: &quot;Write a function to find all possible combinations of the elements of a given list.&quot;, &quot;code&quot;: &quot;def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result&quot;, &quot;task_id&quot;: 462, &quot;test_setup_code&quot;: &quot;&quot;, &quot;test_list&quot;: [&quot;assert combinations_list([&#39;orange&#39;, &#39;red&#39;, &#39;green&#39;, &#39;blue&#39;])==[[], [&#39;orange&#39;], [&#39;red&#39;], [&#39;red&#39;, &#39;orange&#39;], [&#39;green&#39;], [&#39;green&#39;, &#39;orange&#39;], [&#39;green&#39;, &#39;red&#39;], [&#39;green&#39;, &#39;red&#39;, &#39;orange&#39;], [&#39;blue&#39;], [&#39;blue&#39;, &#39;orange&#39;], [&#39;blue&#39;, &#39;red&#39;], [&#39;blue&#39;, &#39;red&#39;, &#39;orange&#39;], [&#39;blue&#39;, &#39;green&#39;], [&#39;blue&#39;, &#39;green&#39;, &#39;orange&#39;], [&#39;blue&#39;, &#39;green&#39;, &#39;red&#39;], [&#39;blue&#39;, &#39;green&#39;, &#39;red&#39;, &#39;orange&#39;]]&quot;, &quot;assert combinations_list([&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;, &#39;white&#39;, &#39;black&#39;, &#39;orange&#39;])==[[], [&#39;red&#39;], [&#39;green&#39;], [&#39;green&#39;, &#39;red&#39;], [&#39;blue&#39;], [&#39;blue&#39;, &#39;red&#39;], [&#39;blue&#39;, &#39;green&#39;], [&#39;blue&#39;, &#39;green&#39;, &#39;red&#39;], [&#39;white&#39;], [&#39;white&#39;, &#39;red&#39;], [&#39;white&#39;, &#39;green&#39;], [&#39;white&#39;, &#39;green&#39;, &#39;red&#39;], [&#39;white&#39;, &#39;blue&#39;], [&#39;white&#39;, &#39;blue&#39;, &#39;red&#39;], [&#39;white&#39;, &#39;blue&#39;, &#39;green&#39;], [&#39;white&#39;, &#39;blue&#39;, &#39;green&#39;, &#39;red&#39;], [&#39;black&#39;], [&#39;black&#39;, &#39;red&#39;], [&#39;black&#39;, &#39;green&#39;], [&#39;black&#39;, &#39;green&#39;, &#39;red&#39;], [&#39;black&#39;, &#39;blue&#39;], [&#39;black&#39;, &#39;blue&#39;, &#39;red&#39;], [&#39;black&#39;, &#39;blue&#39;, &#39;green&#39;], [&#39;black&#39;, &#39;blue&#39;, &#39;green&#39;, &#39;red&#39;], [&#39;black&#39;, &#39;white&#39;], [&#39;black&#39;, &#39;white&#39;, &#39;red&#39;], [&#39;black&#39;, &#39;white&#39;, &#39;green&#39;], [&#39;black&#39;, &#39;white&#39;, &#39;green&#39;, &#39;red&#39;], [&#39;black&#39;, &#39;white&#39;, &#39;blue&#39;], [&#39;black&#39;, &#39;white&#39;, &#39;blue&#39;, &#39;red&#39;], [&#39;black&#39;, &#39;white&#39;, &#39;blue&#39;, &#39;green&#39;], [&#39;black&#39;, &#39;white&#39;, &#39;blue&#39;, &#39;green&#39;, &#39;red&#39;], [&#39;orange&#39;], [&#39;orange&#39;, &#39;red&#39;], [&#39;orange&#39;, &#39;green&#39;], [&#39;orange&#39;, &#39;green&#39;, &#39;red&#39;], [&#39;orange&#39;, &#39;blue&#39;], [&#39;orange&#39;, &#39;blue&#39;, &#39;red&#39;], [&#39;orange&#39;, &#39;blue&#39;, &#39;green&#39;], [&#39;orange&#39;, &#39;blue&#39;, &#39;green&#39;, &#39;red&#39;], [&#39;orange&#39;, &#39;white&#39;], [&#39;orange&#39;, &#39;white&#39;, &#39;red&#39;], [&#39;orange&#39;, &#39;white&#39;, &#39;green&#39;], [&#39;orange&#39;, &#39;white&#39;, &#39;green&#39;, &#39;red&#39;], [&#39;orange&#39;, &#39;white&#39;, &#39;blue&#39;], [&#39;orange&#39;, &#39;white&#39;, &#39;blue&#39;, &#39;red&#39;], [&#39;orange&#39;, &#39;white&#39;, &#39;blue&#39;, &#39;green&#39;], [&#39;orange&#39;, &#39;white&#39;, &#39;blue&#39;, &#39;green&#39;, &#39;red&#39;], [&#39;orange&#39;, &#39;black&#39;], [&#39;orange&#39;, &#39;black&#39;, &#39;red&#39;], [&#39;orange&#39;, &#39;black&#39;, &#39;green&#39;], [&#39;orange&#39;, &#39;black&#39;, &#39;green&#39;, &#39;red&#39;], [&#39;orange&#39;, &#39;black&#39;, &#39;blue&#39;], [&#39;orange&#39;, &#39;black&#39;, &#39;blue&#39;, &#39;red&#39;], [&#39;orange&#39;, &#39;black&#39;, &#39;blue&#39;, &#39;green&#39;], [&#39;orange&#39;, &#39;black&#39;, &#39;blue&#39;, &#39;green&#39;, &#39;red&#39;], [&#39;orange&#39;, &#39;black&#39;, &#39;white&#39;], [&#39;orange&#39;, &#39;black&#39;, &#39;white&#39;, &#39;red&#39;], [&#39;orange&#39;, &#39;black&#39;, &#39;white&#39;, &#39;green&#39;], [&#39;orange&#39;, &#39;black&#39;, &#39;white&#39;, &#39;green&#39;, &#39;red&#39;], [&#39;orange&#39;, &#39;black&#39;, &#39;white&#39;, &#39;blue&#39;], [&#39;orange&#39;, &#39;black&#39;, &#39;white&#39;, &#39;blue&#39;, &#39;red&#39;], [&#39;orange&#39;, &#39;black&#39;, &#39;white&#39;, &#39;blue&#39;, &#39;green&#39;], [&#39;orange&#39;, &#39;black&#39;, &#39;white&#39;, &#39;blue&#39;, &#39;green&#39;, &#39;red&#39;]]&quot;, &quot;assert combinations_list([&#39;red&#39;, &#39;green&#39;, &#39;black&#39;, &#39;orange&#39;])==[[], [&#39;red&#39;], [&#39;green&#39;], [&#39;green&#39;, &#39;red&#39;], [&#39;black&#39;], [&#39;black&#39;, &#39;red&#39;], [&#39;black&#39;, &#39;green&#39;], [&#39;black&#39;, &#39;green&#39;, &#39;red&#39;], [&#39;orange&#39;], [&#39;orange&#39;, &#39;red&#39;], [&#39;orange&#39;, &#39;green&#39;], [&#39;orange&#39;, &#39;green&#39;, &#39;red&#39;], [&#39;orange&#39;, &#39;black&#39;], [&#39;orange&#39;, &#39;black&#39;, &#39;red&#39;], [&#39;orange&#39;, &#39;black&#39;, &#39;green&#39;], [&#39;orange&#39;, &#39;black&#39;, &#39;green&#39;, &#39;red&#39;]]&quot;], &quot;challenge_test_list&quot;: []}</td>
        </tr>
        <tr>
          <td id="L463" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="463"></td>
          <td id="LC463" class="blob-code blob-code-inner js-file-line">{&quot;text&quot;: &quot;Write a function to find the maximum product subarray of the given array.&quot;, &quot;code&quot;: &quot;def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] &gt; 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far &lt; max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far&quot;, &quot;task_id&quot;: 463, &quot;test_setup_code&quot;: &quot;&quot;, &quot;test_list&quot;: [&quot;assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112&quot;, &quot;assert max_subarray_product([6, -3, -10, 0, 2]) == 180 &quot;, &quot;assert max_subarray_product([-2, -40, 0, -2, -3]) == 80&quot;], &quot;challenge_test_list&quot;: []}</td>
        </tr>
        <tr>
          <td id="L464" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="464"></td>
          <td id="LC464" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check if all values are same in a dictionary.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_value(dict, n):<span class="pl-cce">\r\n</span>    result = all(x == n for x in dict.values()) <span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">464</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_value({&#39;Cierra Vega&#39;: 12, &#39;Alden Cantrell&#39;: 12, &#39;Kierra Gentry&#39;: 12, &#39;Pierre Cox&#39;: 12},10)==False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_value({&#39;Cierra Vega&#39;: 12, &#39;Alden Cantrell&#39;: 12, &#39;Kierra Gentry&#39;: 12, &#39;Pierre Cox&#39;: 12},12)==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_value({&#39;Cierra Vega&#39;: 12, &#39;Alden Cantrell&#39;: 12, &#39;Kierra Gentry&#39;: 12, &#39;Pierre Cox&#39;: 12},5)==False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L465" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="465"></td>
          <td id="LC465" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to drop empty items from a given dictionary.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def drop_empty(dict1):<span class="pl-cce">\r\n</span>  dict1 = {key:value for (key, value) in dict1.items() if value is not None}<span class="pl-cce">\r\n</span>  return dict1<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">465</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert drop_empty({&#39;c1&#39;: &#39;Red&#39;, &#39;c2&#39;: &#39;Green&#39;, &#39;c3&#39;:None})=={&#39;c1&#39;: &#39;Red&#39;, &#39;c2&#39;: &#39;Green&#39;}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert drop_empty({&#39;c1&#39;: &#39;Red&#39;, &#39;c2&#39;: None, &#39;c3&#39;:None})=={&#39;c1&#39;: &#39;Red&#39;}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert drop_empty({&#39;c1&#39;: None, &#39;c2&#39;: &#39;Green&#39;, &#39;c3&#39;:None})=={ &#39;c2&#39;: &#39;Green&#39;}<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L466" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="466"></td>
          <td id="LC466" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the peak element in the given array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_peak_util(arr, low, high, n): <span class="pl-cce">\r\n\t</span>mid = low + (high - low)/2<span class="pl-cce">\r\n\t</span>mid = int(mid) <span class="pl-cce">\r\n\t</span>if ((mid == 0 or arr[mid - 1] &lt;= arr[mid]) and<span class="pl-cce">\r\n\t\t</span>(mid == n - 1 or arr[mid + 1] &lt;= arr[mid])): <span class="pl-cce">\r\n\t\t</span>return mid <span class="pl-cce">\r\n\t</span>elif (mid &gt; 0 and arr[mid - 1] &gt; arr[mid]): <span class="pl-cce">\r\n\t\t</span>return find_peak_util(arr, low, (mid - 1), n) <span class="pl-cce">\r\n\t</span>else: <span class="pl-cce">\r\n\t\t</span>return find_peak_util(arr, (mid + 1), high, n) <span class="pl-cce">\r\n</span>def find_peak(arr, n): <span class="pl-cce">\r\n\t</span>return find_peak_util(arr, 0, n - 1, n) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">466</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_peak([2, 3, 4, 5, 6], 5) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 <span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L467" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="467"></td>
          <td id="LC467" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to convert decimal number to octal number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def decimal_to_Octal(deciNum):<span class="pl-cce">\r\n</span>    octalNum = 0<span class="pl-cce">\r\n</span>    countval = 1;<span class="pl-cce">\r\n</span>    dNo = deciNum;<span class="pl-cce">\r\n</span>    while (deciNum!= 0):<span class="pl-cce">\r\n</span>        remainder= deciNum % 8;<span class="pl-cce">\r\n</span>        octalNum+= remainder*countval;<span class="pl-cce">\r\n</span>        countval= countval*10;<span class="pl-cce">\r\n</span>        deciNum //= 8; <span class="pl-cce">\r\n</span>    return (octalNum)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">467</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert decimal_to_Octal(10) == 12<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert decimal_to_Octal(2) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert decimal_to_Octal(33) == 41<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L468" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="468"></td>
          <td id="LC468" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def max_product(arr, n ): <span class="pl-cce">\r\n\t</span>mpis =[0] * (n) <span class="pl-cce">\r\n\t</span>for i in range(n): <span class="pl-cce">\r\n\t\t</span>mpis[i] = arr[i] <span class="pl-cce">\r\n\t</span>for i in range(1, n): <span class="pl-cce">\r\n\t\t</span>for j in range(i): <span class="pl-cce">\r\n\t\t\t</span>if (arr[i] &gt; arr[j] and<span class="pl-cce">\r\n\t\t\t\t\t</span>mpis[i] &lt; (mpis[j] * arr[i])): <span class="pl-cce">\r\n\t\t\t\t\t\t</span>mpis[i] = mpis[j] * arr[i] <span class="pl-cce">\r\n\t</span>return max(mpis)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">468</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_product([4, 42, 55, 68, 80], 5) == 50265600<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 <span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L469" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="469"></td>
          <td id="LC469" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the maximum profit earned from a maximum of k stock transactions<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def max_profit(price, k):<span class="pl-cce">\r\n</span>    n = len(price)<span class="pl-cce">\r\n</span>    final_profit = [[None for x in range(n)] for y in range(k + 1)]<span class="pl-cce">\r\n</span>    for i in range(k + 1):<span class="pl-cce">\r\n</span>        for j in range(n):<span class="pl-cce">\r\n</span>            if i == 0 or j == 0:<span class="pl-cce">\r\n</span>                final_profit[i][j] = 0<span class="pl-cce">\r\n</span>            else:<span class="pl-cce">\r\n</span>                max_so_far = 0<span class="pl-cce">\r\n</span>                for x in range(j):<span class="pl-cce">\r\n</span>                    curr_price = price[j] - price[x] + final_profit[i-1][x]<span class="pl-cce">\r\n</span>                    if max_so_far &lt; curr_price:<span class="pl-cce">\r\n</span>                        max_so_far = curr_price<span class="pl-cce">\r\n</span>                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)<span class="pl-cce">\r\n</span>    return final_profit[k][n-1]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">469</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_profit([10, 6, 8, 4, 2], 2) == 2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L470" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="470"></td>
          <td id="LC470" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the pairwise addition of the elements of the given tuples.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def add_pairwise(test_tup):<span class="pl-cce">\r\n</span>  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">470</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L471" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="471"></td>
          <td id="LC471" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find remainder of array multiplication divided by n.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_remainder(arr, lens, n): <span class="pl-cce">\r\n</span>    mul = 1<span class="pl-cce">\r\n</span>    for i in range(lens):  <span class="pl-cce">\r\n</span>        mul = (mul * (arr[i] % n)) % n <span class="pl-cce">\r\n</span>    return mul % n <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">471</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_remainder([1,1,1],3,1) == 0<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_remainder([1,2,1],3,2) == 0<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L472" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="472"></td>
          <td id="LC472" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether the given list contains consecutive numbers or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_Consecutive(l): <span class="pl-cce">\r\n</span>    return sorted(l) == list(range(min(l),max(l)+1)) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">472</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_Consecutive([1,2,3,4,5]) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_Consecutive([1,2,3,5,6]) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_Consecutive([1,2,1]) == False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L473" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="473"></td>
          <td id="LC473" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def tuple_intersection(test_list1, test_list2):<span class="pl-cce">\r\n</span>  res = set([tuple(sorted(ele)) for ele in test_list1]) &amp; set([tuple(sorted(ele)) for ele in test_list2])<span class="pl-cce">\r\n</span>  return (res)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">473</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L474" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="474"></td>
          <td id="LC474" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to replace characters in a string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def replace_char(str1,ch,newch):<span class="pl-cce">\r\n</span> str2 = str1.replace(ch, newch)<span class="pl-cce">\r\n</span> return str2<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">474</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert replace_char(<span class="pl-cce">\&quot;</span>polygon<span class="pl-cce">\&quot;</span>,&#39;y&#39;,&#39;l&#39;)==(<span class="pl-cce">\&quot;</span>pollgon<span class="pl-cce">\&quot;</span>)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert replace_char(<span class="pl-cce">\&quot;</span>character<span class="pl-cce">\&quot;</span>,&#39;c&#39;,&#39;a&#39;)==(<span class="pl-cce">\&quot;</span>aharaater<span class="pl-cce">\&quot;</span>)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert replace_char(<span class="pl-cce">\&quot;</span>python<span class="pl-cce">\&quot;</span>,&#39;l&#39;,&#39;a&#39;)==(<span class="pl-cce">\&quot;</span>python<span class="pl-cce">\&quot;</span>)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L475" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="475"></td>
          <td id="LC475" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to sort counter by value.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from collections import Counter<span class="pl-cce">\r\n</span>def sort_counter(dict1):<span class="pl-cce">\r\n</span> x = Counter(dict1)<span class="pl-cce">\r\n</span> sort_counter=x.most_common()<span class="pl-cce">\r\n</span> return sort_counter<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">475</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_counter({&#39;Math&#39;:81, &#39;Physics&#39;:83, &#39;Chemistry&#39;:87})==[(&#39;Chemistry&#39;, 87), (&#39;Physics&#39;, 83), (&#39;Math&#39;, 81)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_counter({&#39;Math&#39;:400, &#39;Physics&#39;:300, &#39;Chemistry&#39;:250})==[(&#39;Math&#39;, 400), (&#39;Physics&#39;, 300), (&#39;Chemistry&#39;, 250)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_counter({&#39;Math&#39;:900, &#39;Physics&#39;:1000, &#39;Chemistry&#39;:1250})==[(&#39;Chemistry&#39;, 1250), (&#39;Physics&#39;, 1000), (&#39;Math&#39;, 900)]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L476" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="476"></td>
          <td id="LC476" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the sum of the largest and smallest value in a given array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def big_sum(nums):<span class="pl-cce">\r\n</span>      sum= max(nums)+min(nums)<span class="pl-cce">\r\n</span>      return sum<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">476</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert big_sum([1,2,3]) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert big_sum([-1,2,3,4]) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert big_sum([2,3,6]) == 8<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L477" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="477"></td>
          <td id="LC477" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to convert the given string to lower case.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def is_lower(string):<span class="pl-cce">\r\n</span>  return (string.lower())<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">477</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert is_lower(<span class="pl-cce">\&quot;</span>InValid<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>invalid<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_lower(<span class="pl-cce">\&quot;</span>TruE<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>true<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_lower(<span class="pl-cce">\&quot;</span>SenTenCE<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>sentence<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L478" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="478"></td>
          <td id="LC478" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to remove lowercase substrings from a given string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def remove_lowercase(str1):<span class="pl-cce">\r\n</span> remove_lower = lambda text: re.sub(&#39;[a-z]&#39;, &#39;&#39;, text)<span class="pl-cce">\r\n</span> result =  remove_lower(str1)<span class="pl-cce">\r\n</span> return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">478</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_lowercase(<span class="pl-cce">\&quot;</span>PYTHon<span class="pl-cce">\&quot;</span>)==(&#39;PYTH&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_lowercase(<span class="pl-cce">\&quot;</span>FInD<span class="pl-cce">\&quot;</span>)==(&#39;FID&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_lowercase(<span class="pl-cce">\&quot;</span>STRinG<span class="pl-cce">\&quot;</span>)==(&#39;STRG&#39;)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L479" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="479"></td>
          <td id="LC479" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the first digit of a given number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def first_Digit(n) :  <span class="pl-cce">\r\n</span>    while n &gt;= 10:  <span class="pl-cce">\r\n</span>        n = n / 10; <span class="pl-cce">\r\n</span>    return int(n) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">479</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert first_Digit(123) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert first_Digit(456) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert first_Digit(12) == 1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L480" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="480"></td>
          <td id="LC480" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the maximum occurring character in a given string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def get_max_occuring_char(str1):<span class="pl-cce">\r\n</span>  ASCII_SIZE = 256<span class="pl-cce">\r\n</span>  ctr = [0] * ASCII_SIZE<span class="pl-cce">\r\n</span>  max = -1<span class="pl-cce">\r\n</span>  ch = &#39;&#39;<span class="pl-cce">\r\n</span>  for i in str1:<span class="pl-cce">\r\n</span>    ctr[ord(i)]+=1;<span class="pl-cce">\r\n</span>  for i in str1:<span class="pl-cce">\r\n</span>    if max &lt; ctr[ord(i)]:<span class="pl-cce">\r\n</span>      max = ctr[ord(i)]<span class="pl-cce">\r\n</span>      ch = i<span class="pl-cce">\r\n</span>  return ch<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">480</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert get_max_occuring_char(<span class="pl-cce">\&quot;</span>data<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>a<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_max_occuring_char(<span class="pl-cce">\&quot;</span>create<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>e<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_max_occuring_char(<span class="pl-cce">\&quot;</span>brilliant girl<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>i<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L481" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="481"></td>
          <td id="LC481" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to determine if there is a subset of the given set with sum equal to the given sum.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def is_subset_sum(set, n, sum):<span class="pl-cce">\r\n\t</span>if (sum == 0):<span class="pl-cce">\r\n\t\t</span>return True<span class="pl-cce">\r\n\t</span>if (n == 0):<span class="pl-cce">\r\n\t\t</span>return False<span class="pl-cce">\r\n\t</span>if (set[n - 1] &gt; sum):<span class="pl-cce">\r\n\t\t</span>return is_subset_sum(set, n - 1, sum)<span class="pl-cce">\r\n\t</span>return is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">481</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L482" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="482"></td>
          <td id="LC482" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re <span class="pl-cce">\r\n</span>def match(text): <span class="pl-cce">\r\n\t\t</span>pattern = &#39;[A-Z]+[a-z]+$&#39;<span class="pl-cce">\r\n\t\t</span>if re.search(pattern, text): <span class="pl-cce">\r\n\t\t\t\t</span>return(&#39;Yes&#39;) <span class="pl-cce">\r\n\t\t</span>else: <span class="pl-cce">\r\n\t\t\t\t</span>return(&#39;No&#39;) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">482</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert match(<span class="pl-cce">\&quot;</span>Geeks<span class="pl-cce">\&quot;</span>) == &#39;Yes&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert match(<span class="pl-cce">\&quot;</span>geeksforGeeks<span class="pl-cce">\&quot;</span>) == &#39;Yes&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert match(<span class="pl-cce">\&quot;</span>geeks<span class="pl-cce">\&quot;</span>) == &#39;No&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L483" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="483"></td>
          <td id="LC483" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the first natural number whose factorial is divisible by x.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def first_Factorial_Divisible_Number(x): <span class="pl-cce">\r\n</span>    i = 1;<span class="pl-cce">\r\n</span>    fact = 1; <span class="pl-cce">\r\n</span>    for i in range(1,x): <span class="pl-cce">\r\n</span>        fact = fact * i <span class="pl-cce">\r\n</span>        if (fact % x == 0): <span class="pl-cce">\r\n</span>            break<span class="pl-cce">\r\n</span>    return i <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">483</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert first_Factorial_Divisible_Number(10) == 5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert first_Factorial_Divisible_Number(15) == 5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert first_Factorial_Divisible_Number(5) == 4<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L484" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="484"></td>
          <td id="LC484" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to remove the matching tuples from the given two tuples.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def remove_matching_tuple(test_list1, test_list2):<span class="pl-cce">\r\n</span>  res = [sub for sub in test_list1 if sub not in test_list2]<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">484</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_matching_tuple([(&#39;Hello&#39;, &#39;dude&#39;), (&#39;How&#39;, &#39;are&#39;), (&#39;you&#39;, &#39;?&#39;)], [(&#39;Hello&#39;, &#39;dude&#39;), (&#39;How&#39;, &#39;are&#39;)]) == [(&#39;you&#39;, &#39;?&#39;)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_matching_tuple([(&#39;Part&#39;, &#39;of&#39;), (&#39;the&#39;, &#39;journey&#39;), (&#39;is &#39;, &#39;end&#39;)], [(&#39;Journey&#39;, &#39;the&#39;), (&#39;is&#39;, &#39;end&#39;)]) == [(&#39;Part&#39;, &#39;of&#39;), (&#39;the&#39;, &#39;journey&#39;), (&#39;is &#39;, &#39;end&#39;)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_matching_tuple([(&#39;Its&#39;, &#39;been&#39;), (&#39;a&#39;, &#39;long&#39;), (&#39;day&#39;, &#39;without&#39;)], [(&#39;a&#39;, &#39;long&#39;), (&#39;my&#39;, &#39;friend&#39;)]) == [(&#39;Its&#39;, &#39;been&#39;), (&#39;day&#39;, &#39;without&#39;)]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L485" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="485"></td>
          <td id="LC485" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the largest palindromic number in the given array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def is_palindrome(n) : <span class="pl-cce">\r\n\t</span>divisor = 1<span class="pl-cce">\r\n\t</span>while (n / divisor &gt;= 10) : <span class="pl-cce">\r\n\t\t</span>divisor *= 10<span class="pl-cce">\r\n\t</span>while (n != 0) : <span class="pl-cce">\r\n\t\t</span>leading = n // divisor <span class="pl-cce">\r\n\t\t</span>trailing = n % 10<span class="pl-cce">\r\n\t\t</span>if (leading != trailing) : <span class="pl-cce">\r\n\t\t\t</span>return False<span class="pl-cce">\r\n\t\t</span>n = (n % divisor) // 10<span class="pl-cce">\r\n\t\t</span>divisor = divisor // 100<span class="pl-cce">\r\n\t</span>return True<span class="pl-cce">\r\n</span>def largest_palindrome(A, n) : <span class="pl-cce">\r\n\t</span>A.sort() <span class="pl-cce">\r\n\t</span>for i in range(n - 1, -1, -1) : <span class="pl-cce">\r\n\t\t</span>if (is_palindrome(A[i])) : <span class="pl-cce">\r\n\t\t\t</span>return A[i] <span class="pl-cce">\r\n\t</span>return -1<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">485</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L486" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="486"></td>
          <td id="LC486" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to compute binomial probability for the given number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def nCr(n, r): <span class="pl-cce">\r\n\t</span>if (r &gt; n / 2): <span class="pl-cce">\r\n\t\t</span>r = n - r <span class="pl-cce">\r\n\t</span>answer = 1 <span class="pl-cce">\r\n\t</span>for i in range(1, r + 1): <span class="pl-cce">\r\n\t\t</span>answer *= (n - r + i) <span class="pl-cce">\r\n\t\t</span>answer /= i <span class="pl-cce">\r\n\t</span>return answer <span class="pl-cce">\r\n</span>def binomial_probability(n, k, p): <span class="pl-cce">\r\n\t</span>return (nCr(n, k) * pow(p, k) *<span class="pl-cce">\t</span>pow(1 - p, n - k)) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">486</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert binomial_probability(11, 6, 2.0/4) == 0.2255859375<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert binomial_probability(12, 7, 3.0/5) == 0.227030335488<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L487" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="487"></td>
          <td id="LC487" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to sort a list of tuples in increasing order by the last element in each tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sort_tuple(tup): <span class="pl-cce">\r\n\t</span>lst = len(tup) <span class="pl-cce">\r\n\t</span>for i in range(0, lst): <span class="pl-cce">\r\n\t\t</span>for j in range(0, lst-i-1): <span class="pl-cce">\r\n\t\t\t</span>if (tup[j][-1] &gt; tup[j + 1][-1]): <span class="pl-cce">\r\n\t\t\t\t</span>temp = tup[j] <span class="pl-cce">\r\n\t\t\t\t</span>tup[j]= tup[j + 1] <span class="pl-cce">\r\n\t\t\t\t</span>tup[j + 1]= temp <span class="pl-cce">\r\n\t</span>return tup<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">487</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L488" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="488"></td>
          <td id="LC488" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the area of a pentagon.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math<span class="pl-cce">\r\n</span>def area_pentagon(a):<span class="pl-cce">\r\n</span>  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0<span class="pl-cce">\r\n</span>  return area<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">488</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert area_pentagon(5)==43.01193501472417<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert area_pentagon(10)==172.0477400588967<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert area_pentagon(15)==387.10741513251753<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L489" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="489"></td>
          <td id="LC489" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the frequency of the largest value in a given array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def frequency_Of_Largest(n,arr): <span class="pl-cce">\r\n</span>    mn = arr[0] <span class="pl-cce">\r\n</span>    freq = 1<span class="pl-cce">\r\n</span>    for i in range(1,n): <span class="pl-cce">\r\n</span>        if (arr[i] &gt;mn): <span class="pl-cce">\r\n</span>            mn = arr[i] <span class="pl-cce">\r\n</span>            freq = 1<span class="pl-cce">\r\n</span>        elif (arr[i] == mn): <span class="pl-cce">\r\n</span>            freq += 1<span class="pl-cce">\r\n</span>    return freq <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">489</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert frequency_Of_Largest(3,[5,6,5]) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert frequency_Of_Largest(4,[2,7,7,7]) == 3<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L490" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="490"></td>
          <td id="LC490" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to extract all the pairs which are symmetric in the given tuple list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def extract_symmetric(test_list):<span class="pl-cce">\r\n</span>  temp = set(test_list) &amp; {(b, a) for a, b in test_list}<span class="pl-cce">\r\n</span>  res = {(a, b) for a, b in temp if a &lt; b}<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">490</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L491" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="491"></td>
          <td id="LC491" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the sum of geometric progression series.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math<span class="pl-cce">\r\n</span>def sum_gp(a,n,r):<span class="pl-cce">\r\n</span> total = (a * (1 - math.pow(r, n ))) / (1- r)<span class="pl-cce">\r\n</span> return total<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">491</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_gp(1,5,2)==31<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_gp(1,5,4)==341<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_gp(2,6,3)==728<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L492" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="492"></td>
          <td id="LC492" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to search an element in the given array by using binary search.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def binary_search(item_list,item):<span class="pl-cce">\r\n\t</span>first = 0<span class="pl-cce">\r\n\t</span>last = len(item_list)-1<span class="pl-cce">\r\n\t</span>found = False<span class="pl-cce">\r\n\t</span>while( first&lt;=last and not found):<span class="pl-cce">\r\n\t\t</span>mid = (first + last)//2<span class="pl-cce">\r\n\t\t</span>if item_list[mid] == item :<span class="pl-cce">\r\n\t\t\t</span>found = True<span class="pl-cce">\r\n\t\t</span>else:<span class="pl-cce">\r\n\t\t\t</span>if item &lt; item_list[mid]:<span class="pl-cce">\r\n\t\t\t\t</span>last = mid - 1<span class="pl-cce">\r\n\t\t\t</span>else:<span class="pl-cce">\r\n\t\t\t\t</span>first = mid + 1<span class="pl-cce">\t\r\n\t</span>return found<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">492</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert binary_search([1,2,3,5,8], 6) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert binary_search([7, 8, 9, 10, 13], 10) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert binary_search([11, 13, 14, 19, 22, 36], 23) == False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L493" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="493"></td>
          <td id="LC493" class="blob-code blob-code-inner js-file-line">{&quot;text&quot;: &quot;Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.&quot;, &quot;code&quot;: &quot;import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty &lt; endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx &lt; endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons&quot;, &quot;task_id&quot;: 493, &quot;test_setup_code&quot;: &quot;&quot;, &quot;test_list&quot;: [&quot;assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]&quot;, &quot;assert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]&quot;, &quot;assert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]&quot;], &quot;challenge_test_list&quot;: []}</td>
        </tr>
        <tr>
          <td id="L494" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="494"></td>
          <td id="LC494" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to convert the given binary tuple to integer.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def binary_to_integer(test_tup):<span class="pl-cce">\r\n</span>  res = int(<span class="pl-cce">\&quot;\&quot;</span>.join(str(ele) for ele in test_tup), 2)<span class="pl-cce">\r\n</span>  return (str(res)) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">494</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == &#39;105&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == &#39;101&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert binary_to_integer((1, 1, 0, 1, 0, 1)) == &#39;53&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L495" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="495"></td>
          <td id="LC495" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to remove lowercase substrings from a given string by using regex.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def remove_lowercase(str1):<span class="pl-cce">\r\n</span>  remove_lower = lambda text: re.sub(&#39;[a-z]&#39;, &#39;&#39;, text)<span class="pl-cce">\r\n</span>  result =  remove_lower(str1)<span class="pl-cce">\r\n</span>  return (result)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">495</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_lowercase(&#39;KDeoALOklOOHserfLoAJSIskdsf&#39;) == &#39;KDALOOOHLAJSI&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_lowercase(&#39;ProducTnamEstreAmIngMediAplAYer&#39;) == &#39;PTEAIMAAY&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_lowercase(&#39;maNufacTuredbYSheZenTechNolOGIes&#39;) == &#39;NTYSZTNOGI&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L496" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="496"></td>
          <td id="LC496" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import heapq as hq<span class="pl-cce">\r\n</span>def heap_queue_smallest(nums,n):<span class="pl-cce">\r\n</span>  smallest_nums = hq.nsmallest(n, nums)<span class="pl-cce">\r\n</span>  return smallest_nums<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">496</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L497" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="497"></td>
          <td id="LC497" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the surface area of a cone.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math<span class="pl-cce">\r\n</span>def surfacearea_cone(r,h):<span class="pl-cce">\r\n</span>  l = math.sqrt(r * r + h * h)<span class="pl-cce">\r\n</span>  SA = math.pi * r * (r + l)<span class="pl-cce">\r\n</span>  return SA<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">497</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert surfacearea_cone(5,12)==282.7433388230814<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert surfacearea_cone(10,15)==880.5179353159282<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert surfacearea_cone(19,17)==2655.923961165254<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L498" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="498"></td>
          <td id="LC498" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find gcd of two positive integers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def gcd(x, y):<span class="pl-cce">\r\n</span>    gcd = 1<span class="pl-cce">\r\n</span>    if x % y == 0:<span class="pl-cce">\r\n</span>        return y<span class="pl-cce">\r\n</span>    for k in range(int(y / 2), 0, -1):<span class="pl-cce">\r\n</span>        if x % k == 0 and y % k == 0:<span class="pl-cce">\r\n</span>            gcd = k<span class="pl-cce">\r\n</span>            break  <span class="pl-cce">\r\n</span>    return gcd<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">498</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert gcd(12, 17) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert gcd(4,6) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert gcd(2,9) == 1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L499" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="499"></td>
          <td id="LC499" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the diameter of a circle.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def diameter_circle(r):<span class="pl-cce">\r\n</span>  diameter=2*r<span class="pl-cce">\r\n</span>  return diameter<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">499</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert diameter_circle(10)==20<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert diameter_circle(40)==80<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert diameter_circle(15)==30<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L500" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="500"></td>
          <td id="LC500" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to concatenate all elements of the given list into a string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def concatenate_elements(list):<span class="pl-cce">\r\n</span>  ans = &#39; &#39;<span class="pl-cce">\r\n</span>  for i in list:<span class="pl-cce">\r\n</span>    ans = ans+ &#39; &#39;+i<span class="pl-cce">\r\n</span>  return (ans) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">500</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert concatenate_elements([&#39;hello&#39;,&#39;there&#39;,&#39;have&#39;,&#39;a&#39;,&#39;rocky&#39;,&#39;day&#39;] ) == &#39;  hello there have a rocky day&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert concatenate_elements([ &#39;Hi&#39;, &#39;there&#39;, &#39;How&#39;,&#39;are&#39;, &#39;you&#39;] ) == &#39;  Hi there How are you&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert concatenate_elements([ &#39;Part&#39;, &#39;of&#39;, &#39;the&#39;,&#39;journey&#39;, &#39;is&#39;, &#39;end&#39;] ) == &#39;  Part of the journey is end&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L501" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="501"></td>
          <td id="LC501" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find common divisor between two numbers in a given pair.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def ngcd(x,y):<span class="pl-cce">\r\n</span>    i=1<span class="pl-cce">\r\n</span>    while(i&lt;=x and i&lt;=y):<span class="pl-cce">\r\n</span>        if(x%i==0 and y%i == 0):<span class="pl-cce">\r\n</span>            gcd=i;<span class="pl-cce">\r\n</span>        i+=1<span class="pl-cce">\r\n</span>    return gcd;<span class="pl-cce">\r\n</span>def num_comm_div(x,y):<span class="pl-cce">\r\n</span>  n = ngcd(x,y)<span class="pl-cce">\r\n</span>  result = 0<span class="pl-cce">\r\n</span>  z = int(n**0.5)<span class="pl-cce">\r\n</span>  i = 1<span class="pl-cce">\r\n</span>  while(i &lt;= z):<span class="pl-cce">\r\n</span>    if(n % i == 0):<span class="pl-cce">\r\n</span>      result += 2 <span class="pl-cce">\r\n</span>      if(i == n/i):<span class="pl-cce">\r\n</span>        result-=1<span class="pl-cce">\r\n</span>    i+=1<span class="pl-cce">\r\n</span>  return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">501</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert num_comm_div(2,4) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert num_comm_div(2,8) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert num_comm_div(12,24) == 6<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L502" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="502"></td>
          <td id="LC502" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find remainder of two numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find(n,m):<span class="pl-cce">\r\n</span>  r = n%m<span class="pl-cce">\r\n</span>  return (r)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">502</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find(3,3) == 0<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find(10,3) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find(16,5) == 1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L503" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="503"></td>
          <td id="LC503" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to add consecutive numbers of a given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def add_consecutive_nums(nums):<span class="pl-cce">\r\n</span>    result = [b+a for a, b in zip(nums[:-1], nums[1:])]<span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">503</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L504" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="504"></td>
          <td id="LC504" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the cube sum of first n natural numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sum_Of_Series(n): <span class="pl-cce">\r\n</span>    sum = 0<span class="pl-cce">\r\n</span>    for i in range(1,n + 1): <span class="pl-cce">\r\n</span>        sum += i * i*i       <span class="pl-cce">\r\n</span>    return sum<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">504</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_Of_Series(5) == 225<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_Of_Series(2) == 9<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_Of_Series(3) == 36<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L505" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="505"></td>
          <td id="LC505" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to move all zeroes to the end of the given array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def re_order(A):<span class="pl-cce">\r\n</span>    k = 0<span class="pl-cce">\r\n</span>    for i in A:<span class="pl-cce">\r\n</span>        if i:<span class="pl-cce">\r\n</span>            A[k] = i<span class="pl-cce">\r\n</span>            k = k + 1<span class="pl-cce">\r\n</span>    for i in range(k, len(A)):<span class="pl-cce">\r\n</span>        A[i] = 0<span class="pl-cce">\r\n</span>    return A<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">505</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L506" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="506"></td>
          <td id="LC506" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to calculate the permutation coefficient of given p(n, k).<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def permutation_coefficient(n, k): <span class="pl-cce">\r\n\t</span>P = [[0 for i in range(k + 1)] <span class="pl-cce">\r\n\t\t\t</span>for j in range(n + 1)] <span class="pl-cce">\r\n\t</span>for i in range(n + 1): <span class="pl-cce">\r\n\t\t</span>for j in range(min(i, k) + 1): <span class="pl-cce">\r\n\t\t\t</span>if (j == 0): <span class="pl-cce">\r\n\t\t\t\t</span>P[i][j] = 1<span class="pl-cce">\r\n\t\t\t</span>else: <span class="pl-cce">\r\n\t\t\t\t</span>P[i][j] = P[i - 1][j] + ( <span class="pl-cce">\r\n\t\t\t\t\t\t</span>j * P[i - 1][j - 1]) <span class="pl-cce">\r\n\t\t\t</span>if (j &lt; k): <span class="pl-cce">\r\n\t\t\t\t</span>P[i][j + 1] = 0<span class="pl-cce">\r\n\t</span>return P[n][k] <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">506</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert permutation_coefficient(10, 2) == 90<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert permutation_coefficient(10, 3) == 720<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert permutation_coefficient(10, 1) == 10<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L507" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="507"></td>
          <td id="LC507" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to remove specific words from a given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def remove_words(list1, removewords):<span class="pl-cce">\r\n</span>    for word in list(list1):<span class="pl-cce">\r\n</span>        if word in removewords:<span class="pl-cce">\r\n</span>            list1.remove(word)<span class="pl-cce">\r\n</span>    return list1  <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">507</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_words([&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;, &#39;white&#39;, &#39;black&#39;, &#39;orange&#39;],[&#39;white&#39;, &#39;orange&#39;])==[&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;, &#39;black&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_words([&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;, &#39;white&#39;, &#39;black&#39;, &#39;orange&#39;],[&#39;black&#39;, &#39;orange&#39;])==[&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;, &#39;white&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_words([&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;, &#39;white&#39;, &#39;black&#39;, &#39;orange&#39;],[&#39;blue&#39;, &#39;white&#39;])==[&#39;red&#39;, &#39;green&#39;, &#39;black&#39;, &#39;orange&#39;]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L508" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="508"></td>
          <td id="LC508" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check if the common elements between two given lists are in the same order or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def same_order(l1, l2):<span class="pl-cce">\r\n</span>    common_elements = set(l1) &amp; set(l2)<span class="pl-cce">\r\n</span>    l1 = [e for e in l1 if e in common_elements]<span class="pl-cce">\r\n</span>    l2 = [e for e in l2 if e in common_elements]<span class="pl-cce">\r\n</span>    return l1 == l2<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">508</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert same_order([<span class="pl-cce">\&quot;</span>red<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>green<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>black<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>orange<span class="pl-cce">\&quot;</span>],[<span class="pl-cce">\&quot;</span>red<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>pink<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>green<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>white<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>black<span class="pl-cce">\&quot;</span>])==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert same_order([<span class="pl-cce">\&quot;</span>red<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>pink<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>green<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>white<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>black<span class="pl-cce">\&quot;</span>],[<span class="pl-cce">\&quot;</span>white<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>orange<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>pink<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>black<span class="pl-cce">\&quot;</span>])==False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert same_order([<span class="pl-cce">\&quot;</span>red<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>green<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>black<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>orange<span class="pl-cce">\&quot;</span>],[<span class="pl-cce">\&quot;</span>red<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>pink<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>green<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>white<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>black<span class="pl-cce">\&quot;</span>])==True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L509" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="509"></td>
          <td id="LC509" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the average of odd numbers till a given odd number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def average_Odd(n) : <span class="pl-cce">\r\n</span>    if (n%2==0) : <span class="pl-cce">\r\n</span>        return (<span class="pl-cce">\&quot;</span>Invalid Input<span class="pl-cce">\&quot;</span>) <span class="pl-cce">\r\n</span>        return -1 <span class="pl-cce">\r\n</span>    sm =0<span class="pl-cce">\r\n</span>    count =0<span class="pl-cce">\r\n</span>    while (n&gt;=1) : <span class="pl-cce">\r\n</span>        count=count+1<span class="pl-cce">\r\n</span>        sm = sm + n <span class="pl-cce">\r\n</span>        n = n-2<span class="pl-cce">\r\n</span>    return sm//count <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">509</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert average_Odd(9) == 5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert average_Odd(5) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert average_Odd(11) == 6<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L510" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="510"></td>
          <td id="LC510" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the number of subsequences having product smaller than k for the given non negative array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def no_of_subsequences(arr, k): <span class="pl-cce">\r\n\t</span>n = len(arr) <span class="pl-cce">\r\n\t</span>dp = [[0 for i in range(n + 1)] <span class="pl-cce">\r\n\t\t\t</span>for j in range(k + 1)] <span class="pl-cce">\r\n\t</span>for i in range(1, k + 1): <span class="pl-cce">\r\n\t\t</span>for j in range(1, n + 1): <span class="pl-cce">\r\n\t\t\t</span>dp[i][j] = dp[i][j - 1] <span class="pl-cce">\r\n\t\t\t</span>if arr[j - 1] &lt;= i and arr[j - 1] &gt; 0: <span class="pl-cce">\r\n\t\t\t\t</span>dp[i][j] += dp[i // arr[j - 1]][j - 1] + 1<span class="pl-cce">\r\n\t</span>return dp[k][n]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">510</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert no_of_subsequences([1,2,3,4], 10) == 11<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert no_of_subsequences([4,8,7,2], 50) == 9<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert no_of_subsequences([5,6,7,8], 15) == 4<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L511" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="511"></td>
          <td id="LC511" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find minimum sum of factors of a given number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_Min_Sum(num): <span class="pl-cce">\r\n</span>    sum = 0<span class="pl-cce">\r\n</span>    i = 2<span class="pl-cce">\r\n</span>    while(i * i &lt;= num): <span class="pl-cce">\r\n</span>        while(num % i == 0): <span class="pl-cce">\r\n</span>            sum += i <span class="pl-cce">\r\n</span>            num /= i <span class="pl-cce">\r\n</span>        i += 1<span class="pl-cce">\r\n</span>    sum += num <span class="pl-cce">\r\n</span>    return sum<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">511</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Min_Sum(12) == 7<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Min_Sum(105) == 15<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Min_Sum(2) == 2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L512" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="512"></td>
          <td id="LC512" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to count the element frequency in the mixed nested tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def flatten(test_tuple): <span class="pl-cce">\r\n\t</span>for tup in test_tuple: <span class="pl-cce">\r\n\t\t</span>if isinstance(tup, tuple): <span class="pl-cce">\r\n\t\t\t</span>yield from flatten(tup) <span class="pl-cce">\r\n\t\t</span>else: <span class="pl-cce">\r\n\t\t\t</span>yield tup <span class="pl-cce">\r\n</span>def count_element_freq(test_tuple):<span class="pl-cce">\r\n</span>  res = {}<span class="pl-cce">\r\n</span>  for ele in flatten(test_tuple):<span class="pl-cce">\r\n</span>    if ele not in res:<span class="pl-cce">\r\n</span>      res[ele] = 0<span class="pl-cce">\r\n</span>    res[ele] += 1<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">512</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L513" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="513"></td>
          <td id="LC513" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to convert tuple into list by adding the given string after every element.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def add_str(test_tup, K):<span class="pl-cce">\r\n</span>  res = [ele for sub in test_tup for ele in (sub, K)]<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">513</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert add_str((5, 6, 7, 4, 9) , <span class="pl-cce">\&quot;</span>FDF<span class="pl-cce">\&quot;</span>) == [5, &#39;FDF&#39;, 6, &#39;FDF&#39;, 7, &#39;FDF&#39;, 4, &#39;FDF&#39;, 9, &#39;FDF&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert add_str((7, 8, 9, 10) , <span class="pl-cce">\&quot;</span>PF<span class="pl-cce">\&quot;</span>) == [7, &#39;PF&#39;, 8, &#39;PF&#39;, 9, &#39;PF&#39;, 10, &#39;PF&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert add_str((11, 14, 12, 1, 4) , <span class="pl-cce">\&quot;</span>JH<span class="pl-cce">\&quot;</span>) == [11, &#39;JH&#39;, 14, &#39;JH&#39;, 12, &#39;JH&#39;, 1, &#39;JH&#39;, 4, &#39;JH&#39;]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L514" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="514"></td>
          <td id="LC514" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the summation of tuple elements in the given tuple list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sum_elements(test_tup):<span class="pl-cce">\r\n</span>  res = sum(list(test_tup))<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">514</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_elements((7, 8, 9, 1, 10, 7)) == 42<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_elements((1, 2, 3, 4, 5, 6)) == 21<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_elements((11, 12 ,13 ,45, 14)) == 95<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L515" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="515"></td>
          <td id="LC515" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check if there is a subset with sum divisible by m.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def modular_sum(arr, n, m): <span class="pl-cce">\r\n\t</span>if (n &gt; m): <span class="pl-cce">\r\n\t\t</span>return True<span class="pl-cce">\r\n\t</span>DP = [False for i in range(m)] <span class="pl-cce">\r\n\t</span>for i in range(n): <span class="pl-cce">\r\n\t\t</span>if (DP[0]): <span class="pl-cce">\r\n\t\t\t</span>return True<span class="pl-cce">\r\n\t\t</span>temp = [False for i in range(m)] <span class="pl-cce">\r\n\t\t</span>for j in range(m): <span class="pl-cce">\r\n\t\t\t</span>if (DP[j] == True): <span class="pl-cce">\r\n\t\t\t\t</span>if (DP[(j + arr[i]) % m] == False): <span class="pl-cce">\r\n\t\t\t\t\t</span>temp[(j + arr[i]) % m] = True<span class="pl-cce">\r\n\t\t</span>for j in range(m): <span class="pl-cce">\r\n\t\t\t</span>if (temp[j]): <span class="pl-cce">\r\n\t\t\t\t</span>DP[j] = True<span class="pl-cce">\r\n\t\t</span>DP[arr[i] % m] = True<span class="pl-cce">\r\n\t</span>return DP[0]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">515</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert modular_sum([3, 1, 7, 5], 4, 6) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert modular_sum([1, 7], 2, 5) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert modular_sum([1, 6], 2, 5) == False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L516" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="516"></td>
          <td id="LC516" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to sort a list of elements using radix sort.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def radix_sort(nums):<span class="pl-cce">\r\n</span>    RADIX = 10<span class="pl-cce">\r\n</span>    placement = 1<span class="pl-cce">\r\n</span>    max_digit = max(nums)<span class="pl-cce">\r\n\r\n</span>    while placement &lt; max_digit:<span class="pl-cce">\r\n</span>      buckets = [list() for _ in range( RADIX )]<span class="pl-cce">\r\n</span>      for i in nums:<span class="pl-cce">\r\n</span>        tmp = int((i / placement) % RADIX)<span class="pl-cce">\r\n</span>        buckets[tmp].append(i)<span class="pl-cce">\r\n</span>      a = 0<span class="pl-cce">\r\n</span>      for b in range( RADIX ):<span class="pl-cce">\r\n</span>        buck = buckets[b]<span class="pl-cce">\r\n</span>        for i in buck:<span class="pl-cce">\r\n</span>          nums[a] = i<span class="pl-cce">\r\n</span>          a += 1<span class="pl-cce">\r\n</span>      placement *= RADIX<span class="pl-cce">\r\n</span>    return nums<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">516</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L517" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="517"></td>
          <td id="LC517" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the largest postive number from the given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def largest_pos(list1): <span class="pl-cce">\r\n</span>    max = list1[0] <span class="pl-cce">\r\n</span>    for x in list1: <span class="pl-cce">\r\n</span>        if x &gt; max : <span class="pl-cce">\r\n</span>             max = x  <span class="pl-cce">\r\n</span>    return max<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">517</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert largest_pos([1,2,3,4,-1]) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert largest_pos([0,1,2,-5,-1,6]) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert largest_pos([0,0,1,0]) == 1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L518" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="518"></td>
          <td id="LC518" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the square root of a perfect number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math<span class="pl-cce">\r\n</span>def sqrt_root(num):<span class="pl-cce">\r\n</span> sqrt_root = math.pow(num, 0.5)<span class="pl-cce">\r\n</span> return sqrt_root <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">518</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sqrt_root(4)==2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sqrt_root(16)==4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sqrt_root(400)==20<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L519" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="519"></td>
          <td id="LC519" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to calculate volume of a tetrahedron.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math<span class="pl-cce">\r\n</span>def volume_tetrahedron(num):<span class="pl-cce">\r\n\t</span>volume = (num ** 3 / (6 * math.sqrt(2)))<span class="pl-cce">\t\r\n\t</span>return round(volume, 2)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">519</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert volume_tetrahedron(10)==117.85<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert volume_tetrahedron(15)==397.75<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert volume_tetrahedron(20)==942.81<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L520" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="520"></td>
          <td id="LC520" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the lcm of the given array elements.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_lcm(num1, num2): <span class="pl-cce">\r\n\t</span>if(num1&gt;num2): <span class="pl-cce">\r\n\t\t</span>num = num1 <span class="pl-cce">\r\n\t\t</span>den = num2 <span class="pl-cce">\r\n\t</span>else: <span class="pl-cce">\r\n\t\t</span>num = num2 <span class="pl-cce">\r\n\t\t</span>den = num1 <span class="pl-cce">\r\n\t</span>rem = num % den <span class="pl-cce">\r\n\t</span>while (rem != 0): <span class="pl-cce">\r\n\t\t</span>num = den <span class="pl-cce">\r\n\t\t</span>den = rem <span class="pl-cce">\r\n\t\t</span>rem = num % den <span class="pl-cce">\r\n\t</span>gcd = den <span class="pl-cce">\r\n\t</span>lcm = int(int(num1 * num2)/int(gcd)) <span class="pl-cce">\r\n\t</span>return lcm <span class="pl-cce">\r\n</span>def get_lcm(l):<span class="pl-cce">\r\n</span>  num1 = l[0]<span class="pl-cce">\r\n</span>  num2 = l[1]<span class="pl-cce">\r\n</span>  lcm = find_lcm(num1, num2)<span class="pl-cce">\r\n</span>  for i in range(2, len(l)):<span class="pl-cce">\r\n</span>    lcm = find_lcm(lcm, l[i])<span class="pl-cce">\r\n</span>  return lcm <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">520</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert get_lcm([2, 7, 3, 9, 4]) == 252<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_lcm([1, 2, 8, 3]) == 24<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_lcm([3, 8, 4, 10, 5]) == 120<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L521" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="521"></td>
          <td id="LC521" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to print check if the triangle is scalene or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_isosceles(x,y,z):<span class="pl-cce">\r\n</span>  if x!=y &amp; y!=z &amp; z!=x:<span class="pl-cce">\r\n\t</span>   return True<span class="pl-cce">\r\n</span>  else:<span class="pl-cce">\r\n</span>     return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">521</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_isosceles(6,8,12)==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_isosceles(6,6,12)==False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_isosceles(6,15,20)==True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L522" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="522"></td>
          <td id="LC522" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the longest bitonic subsequence for the given array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def lbs(arr): <span class="pl-cce">\r\n\t</span>n = len(arr) <span class="pl-cce">\r\n\t</span>lis = [1 for i in range(n+1)] <span class="pl-cce">\r\n\t</span>for i in range(1 , n): <span class="pl-cce">\r\n\t\t</span>for j in range(0 , i): <span class="pl-cce">\r\n\t\t\t</span>if ((arr[i] &gt; arr[j]) and (lis[i] &lt; lis[j] +1)): <span class="pl-cce">\r\n\t\t\t\t</span>lis[i] = lis[j] + 1<span class="pl-cce">\r\n\t</span>lds = [1 for i in range(n+1)] <span class="pl-cce">\r\n\t</span>for i in reversed(range(n-1)): <span class="pl-cce">\r\n\t\t</span>for j in reversed(range(i-1 ,n)): <span class="pl-cce">\r\n\t\t\t</span>if(arr[i] &gt; arr[j] and lds[i] &lt; lds[j] + 1): <span class="pl-cce">\r\n\t\t\t\t</span>lds[i] = lds[j] + 1<span class="pl-cce">\r\n\t</span>maximum = lis[0] + lds[0] - 1<span class="pl-cce">\r\n\t</span>for i in range(1 , n): <span class="pl-cce">\r\n\t\t</span>maximum = max((lis[i] + lds[i]-1), maximum) <span class="pl-cce">\r\n\t</span>return maximum<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">522</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert lbs([80, 60, 30, 40, 20, 10]) == 5<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L523" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="523"></td>
          <td id="LC523" class="blob-code blob-code-inner js-file-line">{&quot;text&quot;: &quot;Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.&quot;, &quot;code&quot;: &quot;def check_string(str1):\r\n    messg = [\r\n    lambda str1: any(x.isupper() for x in str1) or &#39;String must have 1 upper case character.&#39;,\r\n    lambda str1: any(x.islower() for x in str1) or &#39;String must have 1 lower case character.&#39;,\r\n    lambda str1: any(x.isdigit() for x in str1) or &#39;String must have 1 number.&#39;,\r\n    lambda str1: len(str1) &gt;= 7                 or &#39;String length should be atleast 8.&#39;,]\r\n    result = [x for x in [i(str1) for i in messg] if x != True]\r\n    if not result:\r\n        result.append(&#39;Valid string.&#39;)\r\n    return result  &quot;, &quot;task_id&quot;: 523, &quot;test_setup_code&quot;: &quot;&quot;, &quot;test_list&quot;: [&quot;assert check_string(&#39;python&#39;)==[&#39;String must have 1 upper case character.&#39;, &#39;String must have 1 number.&#39;, &#39;String length should be atleast 8.&#39;]&quot;, &quot;assert check_string(&#39;123python&#39;)==[&#39;String must have 1 upper case character.&#39;]&quot;, &quot;assert check_string(&#39;123Python&#39;)==[&#39;Valid string.&#39;]&quot;], &quot;challenge_test_list&quot;: []}</td>
        </tr>
        <tr>
          <td id="L524" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="524"></td>
          <td id="LC524" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the sum of maximum increasing subsequence of the given array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def max_sum_increasing_subsequence(arr, n): <span class="pl-cce">\r\n\t</span>max = 0<span class="pl-cce">\r\n\t</span>msis = [0 for x in range(n)] <span class="pl-cce">\r\n\t</span>for i in range(n): <span class="pl-cce">\r\n\t\t</span>msis[i] = arr[i] <span class="pl-cce">\r\n\t</span>for i in range(1, n): <span class="pl-cce">\r\n\t\t</span>for j in range(i): <span class="pl-cce">\r\n\t\t\t</span>if (arr[i] &gt; arr[j] and<span class="pl-cce">\r\n\t\t\t\t</span>msis[i] &lt; msis[j] + arr[i]): <span class="pl-cce">\r\n\t\t\t\t</span>msis[i] = msis[j] + arr[i] <span class="pl-cce">\r\n\t</span>for i in range(n): <span class="pl-cce">\r\n\t\t</span>if max &lt; msis[i]: <span class="pl-cce">\r\n\t\t\t</span>max = msis[i] <span class="pl-cce">\r\n\t</span>return max<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">524</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L525" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="525"></td>
          <td id="LC525" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether two given lines are parallel or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def parallel_lines(line1, line2):<span class="pl-cce">\r\n</span>  return line1[0]/line1[1] == line2[0]/line2[1]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">525</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert parallel_lines([2,3,4], [2,3,8]) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert parallel_lines([2,3,4], [4,-3,8]) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert parallel_lines([3,3],[5,5]) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L526" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="526"></td>
          <td id="LC526" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to capitalize first and last letters of each word of a given string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def capitalize_first_last_letters(str1):<span class="pl-cce">\r\n</span>     str1 = result = str1.title()<span class="pl-cce">\r\n</span>     result =  <span class="pl-cce">\&quot;\&quot;\r\n</span>     for word in str1.split():<span class="pl-cce">\r\n</span>        result += word[:-1] + word[-1].upper() + <span class="pl-cce">\&quot;</span> <span class="pl-cce">\&quot;\r\n</span>     return result[:-1]  <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">526</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert capitalize_first_last_letters(<span class="pl-cce">\&quot;</span>python<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>PythoN<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert capitalize_first_last_letters(<span class="pl-cce">\&quot;</span>bigdata<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>BigdatA<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert capitalize_first_last_letters(<span class="pl-cce">\&quot;</span>Hadoop<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>HadooP<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L527" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="527"></td>
          <td id="LC527" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find all pairs in an integer array whose sum is equal to a given number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def get_pairs_count(arr, n, sum):<span class="pl-cce">\r\n</span>    count = 0 <span class="pl-cce">\r\n</span>    for i in range(0, n):<span class="pl-cce">\r\n</span>        for j in range(i + 1, n):<span class="pl-cce">\r\n</span>            if arr[i] + arr[j] == sum:<span class="pl-cce">\r\n</span>                count += 1<span class="pl-cce">\r\n</span>    return count<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">527</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_pairs_count([1, 5, 7, -1], 4, 6) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_pairs_count([1, 1, 1, 1], 4, 2) == 6<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L528" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="528"></td>
          <td id="LC528" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the list of lists with minimum length.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def min_length(list1):<span class="pl-cce">\r\n</span>   min_length = min(len(x) for x in  list1 )  <span class="pl-cce">\r\n</span>   min_list = min((x) for x in   list1)<span class="pl-cce">\r\n</span>   return(min_length, min_list)     <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">528</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_length([[5], [15,20,25]])==(1, [5])<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L529" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="529"></td>
          <td id="LC529" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the nth jacobsthal-lucas number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def jacobsthal_lucas(n): <span class="pl-cce">\r\n\t</span>dp=[0] * (n + 1) <span class="pl-cce">\r\n\t</span>dp[0] = 2<span class="pl-cce">\r\n\t</span>dp[1] = 1<span class="pl-cce">\r\n\t</span>for i in range(2, n+1): <span class="pl-cce">\r\n\t\t</span>dp[i] = dp[i - 1] + 2 * dp[i - 2]; <span class="pl-cce">\r\n\t</span>return dp[n]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">529</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert jacobsthal_lucas(5) == 31<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert jacobsthal_lucas(2) == 5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert jacobsthal_lucas(4) == 17<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L530" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="530"></td>
          <td id="LC530" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the ration of negative numbers in an array of integers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from array import array<span class="pl-cce">\r\n</span>def negative_count(nums):<span class="pl-cce">\r\n</span>    n = len(nums)<span class="pl-cce">\r\n</span>    n1 = 0<span class="pl-cce">\r\n</span>    for x in nums:<span class="pl-cce">\r\n</span>        if x &lt; 0:<span class="pl-cce">\r\n</span>            n1 += 1<span class="pl-cce">\r\n</span>        else:<span class="pl-cce">\r\n</span>          None<span class="pl-cce">\r\n</span>    return round(n1/n,2)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">530</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L531" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="531"></td>
          <td id="LC531" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find minimum number of coins that make a given value.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import sys <span class="pl-cce">\r\n</span>def min_coins(coins, m, V): <span class="pl-cce">\r\n</span>    if (V == 0): <span class="pl-cce">\r\n</span>        return 0<span class="pl-cce">\r\n</span>    res = sys.maxsize <span class="pl-cce">\r\n</span>    for i in range(0, m): <span class="pl-cce">\r\n</span>        if (coins[i] &lt;= V): <span class="pl-cce">\r\n</span>            sub_res = min_coins(coins, m, V-coins[i]) <span class="pl-cce">\r\n</span>            if (sub_res != sys.maxsize and sub_res + 1 &lt; res): <span class="pl-cce">\r\n</span>                res = sub_res + 1  <span class="pl-cce">\r\n</span>    return res <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">531</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert min_coins([9, 6, 5, 1] ,4,11)==2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_coins([4,5,6,7,8,9],6,9)==1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_coins([1, 2, 3],3,4)==2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L532" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="532"></td>
          <td id="LC532" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check if the two given strings are permutations of each other.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_permutation(str1, str2):<span class="pl-cce">\r\n</span>  n1=len(str1)<span class="pl-cce">\r\n</span>  n2=len(str2)<span class="pl-cce">\r\n</span>  if(n1!=n2):<span class="pl-cce">\r\n</span>    return False<span class="pl-cce">\r\n</span>  a=sorted(str1)<span class="pl-cce">\r\n</span>  str1=<span class="pl-cce">\&quot;</span> <span class="pl-cce">\&quot;</span>.join(a)<span class="pl-cce">\r\n</span>  b=sorted(str2)<span class="pl-cce">\r\n</span>  str2=<span class="pl-cce">\&quot;</span> <span class="pl-cce">\&quot;</span>.join(b)<span class="pl-cce">\r\n</span>  for i in range(0, n1, 1):<span class="pl-cce">\r\n</span>    if(str1[i] != str2[i]):<span class="pl-cce">\r\n</span>      return False<span class="pl-cce">\r\n</span>  return True<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">532</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_permutation(<span class="pl-cce">\&quot;</span>abc<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>cba<span class="pl-cce">\&quot;</span>) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_permutation(<span class="pl-cce">\&quot;</span>test<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>ttew<span class="pl-cce">\&quot;</span>) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_permutation(<span class="pl-cce">\&quot;</span>xxyz<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>yxzx<span class="pl-cce">\&quot;</span>) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L533" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="533"></td>
          <td id="LC533" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to remove particular data type elements from the given tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def remove_datatype(test_tuple, data_type):<span class="pl-cce">\r\n</span>  res = []<span class="pl-cce">\r\n</span>  for ele in test_tuple:<span class="pl-cce">\r\n</span>    if not isinstance(ele, data_type):<span class="pl-cce">\r\n</span>      res.append(ele)<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">533</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_datatype((7, 8, 9, <span class="pl-cce">\&quot;</span>SR<span class="pl-cce">\&quot;</span>), str) == [7, 8, 9]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L534" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="534"></td>
          <td id="LC534" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def search_literal(pattern,text):<span class="pl-cce">\r\n</span> match = re.search(pattern, text)<span class="pl-cce">\r\n</span> s = match.start()<span class="pl-cce">\r\n</span> e = match.end()<span class="pl-cce">\r\n</span> return (s, e)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">534</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert search_literal(&#39;python&#39;,&#39;python programming language&#39;)==(0,6)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert search_literal(&#39;programming&#39;,&#39;python programming language&#39;)==(7,18)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert search_literal(&#39;language&#39;,&#39;python programming language&#39;)==(19,27)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L535" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="535"></td>
          <td id="LC535" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the top or bottom surface area of a cylinder.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def topbottom_surfacearea(r):<span class="pl-cce">\r\n</span>  toporbottomarea=3.1415*r*r<span class="pl-cce">\r\n</span>  return toporbottomarea<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">535</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert topbottom_surfacearea(10)==314.15000000000003<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert topbottom_surfacearea(5)==78.53750000000001<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert topbottom_surfacearea(4)==50.264<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L536" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="536"></td>
          <td id="LC536" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to select the nth items of a list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def nth_items(list,n):<span class="pl-cce">\r\n</span> return list[::n]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">536</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert nth_items([10,15,19,17,16,18],3)==[10,17] <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert nth_items([14,16,19,15,17],4)==[14,17]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L537" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="537"></td>
          <td id="LC537" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the first repeated word in a given string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def first_repeated_word(str1):<span class="pl-cce">\r\n</span>  temp = set()<span class="pl-cce">\r\n</span>  for word in str1.split():<span class="pl-cce">\r\n</span>    if word in temp:<span class="pl-cce">\r\n</span>      return word;<span class="pl-cce">\r\n</span>    else:<span class="pl-cce">\r\n</span>      temp.add(word)<span class="pl-cce">\r\n</span>  return &#39;None&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">537</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert first_repeated_word(<span class="pl-cce">\&quot;</span>ab ca bc ab<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>ab<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert first_repeated_word(<span class="pl-cce">\&quot;</span>ab ca bc<span class="pl-cce">\&quot;</span>) == &#39;None&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert first_repeated_word(<span class="pl-cce">\&quot;</span>ab ca bc ca ab bc<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>ca<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L538" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="538"></td>
          <td id="LC538" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to convert a given string list to a tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def string_list_to_tuple(str1):<span class="pl-cce">\r\n</span>    result = tuple(x for x in str1 if not x.isspace()) <span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">538</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert string_list_to_tuple((<span class="pl-cce">\&quot;</span>python 3.0<span class="pl-cce">\&quot;</span>)) == (&#39;p&#39;, &#39;y&#39;, &#39;t&#39;, &#39;h&#39;, &#39;o&#39;, &#39;n&#39;, &#39;3&#39;, &#39;.&#39;, &#39;0&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert string_list_to_tuple((<span class="pl-cce">\&quot;</span>bigdata<span class="pl-cce">\&quot;</span>)) == (&#39;b&#39;, &#39;i&#39;, &#39;g&#39;, &#39;d&#39;, &#39;a&#39;, &#39;t&#39;, &#39;a&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert string_list_to_tuple((<span class="pl-cce">\&quot;</span>language<span class="pl-cce">\&quot;</span>)) == (&#39;l&#39;, &#39;a&#39;, &#39;n&#39;, &#39;g&#39;, &#39;u&#39;, &#39;a&#39;, &#39;g&#39;,&#39;e&#39;)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L539" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="539"></td>
          <td id="LC539" class="blob-code blob-code-inner js-file-line">{&quot;text&quot;: &quot;Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.&quot;, &quot;code&quot;: &quot;def basesnum_coresspondingnum(bases_num,index):\r\n  result = list(map(pow, bases_num, index))\r\n  return result&quot;, &quot;task_id&quot;: 539, &quot;test_setup_code&quot;: &quot;&quot;, &quot;test_list&quot;: [&quot;assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]&quot;, &quot;assert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]&quot;, &quot;assert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]&quot;], &quot;challenge_test_list&quot;: []}</td>
        </tr>
        <tr>
          <td id="L540" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="540"></td>
          <td id="LC540" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the difference between highest and least frequencies in a given array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_Diff(arr,n): <span class="pl-cce">\r\n</span>    arr.sort()  <span class="pl-cce">\r\n</span>    count = 0; max_count = 0; min_count = n <span class="pl-cce">\r\n</span>    for i in range(0,(n-1)): <span class="pl-cce">\r\n</span>        if arr[i] == arr[i + 1]: <span class="pl-cce">\r\n</span>            count += 1<span class="pl-cce">\r\n</span>            continue<span class="pl-cce">\r\n</span>        else: <span class="pl-cce">\r\n</span>            max_count = max(max_count,count) <span class="pl-cce">\r\n</span>            min_count = min(min_count,count) <span class="pl-cce">\r\n</span>            count = 0<span class="pl-cce">\r\n</span>    return max_count - min_count <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">540</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Diff([1,2,1,2],4) == 0<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L541" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="541"></td>
          <td id="LC541" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find if the given number is abundant or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math <span class="pl-cce">\r\n</span>def get_sum(n): <span class="pl-cce">\r\n\t</span>sum = 0<span class="pl-cce">\r\n\t</span>i = 1<span class="pl-cce">\r\n\t</span>while i &lt;= (math.sqrt(n)): <span class="pl-cce">\r\n\t\t</span>if n%i == 0: <span class="pl-cce">\r\n\t\t\t</span>if n/i == i : <span class="pl-cce">\r\n\t\t\t\t</span>sum = sum + i <span class="pl-cce">\r\n\t\t\t</span>else: <span class="pl-cce">\r\n\t\t\t\t</span>sum = sum + i <span class="pl-cce">\r\n\t\t\t\t</span>sum = sum + (n / i ) <span class="pl-cce">\r\n\t\t</span>i = i + 1<span class="pl-cce">\r\n\t</span>sum = sum - n <span class="pl-cce">\r\n\t</span>return sum<span class="pl-cce">\r\n</span>def check_abundant(n): <span class="pl-cce">\r\n\t</span>if (get_sum(n) &gt; n): <span class="pl-cce">\r\n\t\t</span>return True<span class="pl-cce">\r\n\t</span>else: <span class="pl-cce">\r\n\t\t</span>return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">541</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_abundant(12) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_abundant(15) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_abundant(18) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L542" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="542"></td>
          <td id="LC542" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def fill_spaces(text):<span class="pl-cce">\r\n</span>  return (re.sub(<span class="pl-cce">\&quot;</span>[ ,.]<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>:<span class="pl-cce">\&quot;</span>, text))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">542</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert fill_spaces(&#39;Boult Curve Wireless Neckband&#39;) == &#39;Boult:Curve:Wireless:Neckband&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert fill_spaces(&#39;Stereo Sound Sweatproof&#39;) == &#39;Stereo:Sound:Sweatproof&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert fill_spaces(&#39;Probass Curve Audio&#39;) == &#39;Probass:Curve:Audio&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L543" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="543"></td>
          <td id="LC543" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to add two numbers and print number of digits of sum.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_digits(num1,num2):<span class="pl-cce">\r\n</span>    number=num1+num2<span class="pl-cce">\r\n</span>    count = 0<span class="pl-cce">\r\n</span>    while(number &gt; 0):<span class="pl-cce">\r\n</span>        number = number // 10<span class="pl-cce">\r\n</span>        count = count + 1<span class="pl-cce">\r\n</span>    return count<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">543</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_digits(9875,10)==(4)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_digits(98759853034,100)==(11)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_digits(1234567,500)==(7)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L544" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="544"></td>
          <td id="LC544" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to flatten the tuple list to a string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def flatten_tuple(test_list):<span class="pl-cce">\r\n</span>  res = &#39; &#39;.join([idx for tup in test_list for idx in tup])<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">544</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert flatten_tuple([(&#39;1&#39;, &#39;4&#39;, &#39;6&#39;), (&#39;5&#39;, &#39;8&#39;), (&#39;2&#39;, &#39;9&#39;), (&#39;1&#39;, &#39;10&#39;)]) == &#39;1 4 6 5 8 2 9 1 10&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert flatten_tuple([(&#39;2&#39;, &#39;3&#39;, &#39;4&#39;), (&#39;6&#39;, &#39;9&#39;), (&#39;3&#39;, &#39;2&#39;), (&#39;2&#39;, &#39;11&#39;)]) == &#39;2 3 4 6 9 3 2 2 11&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert flatten_tuple([(&#39;14&#39;, &#39;21&#39;, &#39;9&#39;), (&#39;24&#39;, &#39;19&#39;), (&#39;12&#39;, &#39;29&#39;), (&#39;23&#39;, &#39;17&#39;)]) == &#39;14 21 9 24 19 12 29 23 17&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L545" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="545"></td>
          <td id="LC545" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to toggle only first and last bits of a given number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def take_L_and_F_set_bits(n) : <span class="pl-cce">\r\n</span>    n = n | n &gt;&gt; 1<span class="pl-cce">\r\n</span>    n = n | n &gt;&gt; 2<span class="pl-cce">\r\n</span>    n = n | n &gt;&gt; 4<span class="pl-cce">\r\n</span>    n = n | n &gt;&gt; 8<span class="pl-cce">\r\n</span>    n = n | n &gt;&gt; 16 <span class="pl-cce">\r\n</span>    return ((n + 1) &gt;&gt; 1) + 1      <span class="pl-cce">\r\n</span>def toggle_F_and_L_bits(n) :  <span class="pl-cce">\r\n</span>    if (n == 1) : <span class="pl-cce">\r\n</span>        return 0 <span class="pl-cce">\r\n</span>    return n ^ take_L_and_F_set_bits(n) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">545</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert toggle_F_and_L_bits(10) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert toggle_F_and_L_bits(15) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert toggle_F_and_L_bits(20) == 5<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L546" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="546"></td>
          <td id="LC546" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the last occurrence of a character in a string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def last_occurence_char(string,char):<span class="pl-cce">\r\n</span> flag = -1<span class="pl-cce">\r\n</span> for i in range(len(string)):<span class="pl-cce">\r\n</span>     if(string[i] == char):<span class="pl-cce">\r\n</span>         flag = i<span class="pl-cce">\r\n</span> if(flag == -1):<span class="pl-cce">\r\n</span>    return None<span class="pl-cce">\r\n</span> else:<span class="pl-cce">\r\n</span>    return flag + 1<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">546</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert last_occurence_char(<span class="pl-cce">\&quot;</span>hello world<span class="pl-cce">\&quot;</span>,&#39;l&#39;)==10<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert last_occurence_char(<span class="pl-cce">\&quot;</span>language<span class="pl-cce">\&quot;</span>,&#39;g&#39;)==7<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert last_occurence_char(<span class="pl-cce">\&quot;</span>little<span class="pl-cce">\&quot;</span>,&#39;y&#39;)==None<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L547" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="547"></td>
          <td id="LC547" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def Total_Hamming_Distance(n):   <span class="pl-cce">\r\n</span>    i = 1<span class="pl-cce">\r\n</span>    sum = 0<span class="pl-cce">\r\n</span>    while (n // i &gt; 0):  <span class="pl-cce">\r\n</span>        sum = sum + n // i  <span class="pl-cce">\r\n</span>        i = i * 2     <span class="pl-cce">\r\n</span>    return sum<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">547</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert Total_Hamming_Distance(4) == 7<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Total_Hamming_Distance(2) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Total_Hamming_Distance(5) == 8<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L548" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="548"></td>
          <td id="LC548" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the length of the longest increasing subsequence of the given sequence.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def longest_increasing_subsequence(arr): <span class="pl-cce">\r\n\t</span>n = len(arr) <span class="pl-cce">\r\n\t</span>longest_increasing_subsequence = [1]*n <span class="pl-cce">\r\n\t</span>for i in range (1 , n): <span class="pl-cce">\r\n\t\t</span>for j in range(0 , i): <span class="pl-cce">\r\n\t\t\t</span>if arr[i] &gt; arr[j] and longest_increasing_subsequence[i]&lt; longest_increasing_subsequence[j] + 1 : <span class="pl-cce">\r\n\t\t\t\t</span>longest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1<span class="pl-cce">\r\n\t</span>maximum = 0<span class="pl-cce">\r\n\t</span>for i in range(n): <span class="pl-cce">\r\n\t\t</span>maximum = max(maximum , longest_increasing_subsequence[i]) <span class="pl-cce">\r\n\t</span>return maximum<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">548</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 <span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L549" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="549"></td>
          <td id="LC549" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the sum of fifth power of first n odd natural numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def odd_Num_Sum(n) : <span class="pl-cce">\r\n</span>    j = 0<span class="pl-cce">\r\n</span>    sm = 0<span class="pl-cce">\r\n</span>    for i in range(1,n+1) : <span class="pl-cce">\r\n</span>        j = (2*i-1) <span class="pl-cce">\r\n</span>        sm = sm + (j*j*j*j*j)     <span class="pl-cce">\r\n</span>    return sm <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">549</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert odd_Num_Sum(1) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert odd_Num_Sum(2) == 244<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert odd_Num_Sum(3) == 3369<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L550" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="550"></td>
          <td id="LC550" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the maximum element in a sorted and rotated array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_Max(arr,low,high): <span class="pl-cce">\r\n</span>    if (high &lt; low): <span class="pl-cce">\r\n</span>        return arr[0] <span class="pl-cce">\r\n</span>    if (high == low): <span class="pl-cce">\r\n</span>        return arr[low] <span class="pl-cce">\r\n</span>    mid = low + (high - low) // 2 <span class="pl-cce">\r\n</span>    if (mid &lt; high and arr[mid + 1] &lt; arr[mid]): <span class="pl-cce">\r\n</span>        return arr[mid] <span class="pl-cce">\r\n</span>    if (mid &gt; low and arr[mid] &lt; arr[mid - 1]): <span class="pl-cce">\r\n</span>        return arr[mid - 1]  <span class="pl-cce">\r\n</span>    if (arr[low] &gt; arr[mid]): <span class="pl-cce">\r\n</span>        return find_Max(arr,low,mid - 1) <span class="pl-cce">\r\n</span>    else: <span class="pl-cce">\r\n</span>        return find_Max(arr,mid + 1,high) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">550</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Max([2,3,5,6,9],0,4) == 9<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Max([3,4,5,2,1],0,4) == 5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Max([1,2,3],0,2) == 3<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L551" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="551"></td>
          <td id="LC551" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to extract a specified column from a given nested list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def extract_column(list1, n):<span class="pl-cce">\r\n</span>   result = [i.pop(n) for i in list1]<span class="pl-cce">\r\n</span>   return result <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">551</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L552" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="552"></td>
          <td id="LC552" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether a given sequence is linear or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def Seq_Linear(seq_nums):<span class="pl-cce">\r\n</span>  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]<span class="pl-cce">\r\n</span>  if len(set(seq_nums)) == 1: <span class="pl-cce">\r\n</span>    return <span class="pl-cce">\&quot;</span>Linear Sequence<span class="pl-cce">\&quot;\r\n</span>  else:<span class="pl-cce">\r\n</span>    return <span class="pl-cce">\&quot;</span>Non Linear Sequence<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">552</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert Seq_Linear([0,2,4,6,8,10]) == <span class="pl-cce">\&quot;</span>Linear Sequence<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Seq_Linear([1,2,3]) == <span class="pl-cce">\&quot;</span>Linear Sequence<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Seq_Linear([1,5,2]) == <span class="pl-cce">\&quot;</span>Non Linear Sequence<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L553" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="553"></td>
          <td id="LC553" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to convert the given tuple to a floating-point number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def tuple_to_float(test_tup):<span class="pl-cce">\r\n</span>  res = float(&#39;.&#39;.join(str(ele) for ele in test_tup))<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">553</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert tuple_to_float((4, 56)) == 4.56<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert tuple_to_float((7, 256)) == 7.256<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert tuple_to_float((8, 123)) == 8.123<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L554" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="554"></td>
          <td id="LC554" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find odd numbers from a mixed list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def Split(list): <span class="pl-cce">\r\n</span>    od_li = [] <span class="pl-cce">\r\n</span>    for i in list: <span class="pl-cce">\r\n</span>        if (i % 2 != 0): <span class="pl-cce">\r\n</span>            od_li.append(i)  <span class="pl-cce">\r\n</span>    return od_li<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">554</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert Split([1,2,3,4,5,6]) == [1,3,5]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Split([10,11,12,13]) == [11,13]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Split([7,8,9,1]) == [7,9,1]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L555" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="555"></td>
          <td id="LC555" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def difference(n) :  <span class="pl-cce">\r\n</span>    S = (n*(n + 1))//2;  <span class="pl-cce">\r\n</span>    res = S*(S-1);  <span class="pl-cce">\r\n</span>    return res;  <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">555</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert difference(3) == 30<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert difference(5) == 210<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert difference(2) == 6<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L556" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="556"></td>
          <td id="LC556" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count the pairs with xor as an odd number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_Odd_Pair(A,N) : <span class="pl-cce">\r\n</span>    oddPair = 0<span class="pl-cce">\r\n</span>    for i in range(0,N) :  <span class="pl-cce">\r\n</span>        for j in range(i+1,N) :  <span class="pl-cce">\r\n</span>            if ((A[i] ^ A[j]) % 2 != 0):  <span class="pl-cce">\r\n</span>                oddPair+=1  <span class="pl-cce">\r\n</span>    return oddPair  <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">556</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Odd_Pair([5,4,7,2,1],5) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Odd_Pair([1,2,3],3) == 2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L557" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="557"></td>
          <td id="LC557" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to toggle characters case in a string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def toggle_string(string):<span class="pl-cce">\r\n</span> string1 = string.swapcase()<span class="pl-cce">\r\n</span> return string1<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">557</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert toggle_string(<span class="pl-cce">\&quot;</span>Python<span class="pl-cce">\&quot;</span>)==(<span class="pl-cce">\&quot;</span>pYTHON<span class="pl-cce">\&quot;</span>)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert toggle_string(<span class="pl-cce">\&quot;</span>Pangram<span class="pl-cce">\&quot;</span>)==(<span class="pl-cce">\&quot;</span>pANGRAM<span class="pl-cce">\&quot;</span>)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert toggle_string(<span class="pl-cce">\&quot;</span>LIttLE<span class="pl-cce">\&quot;</span>)==(<span class="pl-cce">\&quot;</span>liTTle<span class="pl-cce">\&quot;</span>)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L558" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="558"></td>
          <td id="LC558" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the digit distance between two integers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def digit_distance_nums(n1, n2):<span class="pl-cce">\r\n</span>         return sum(map(int,str(abs(n1-n2))))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">558</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert digit_distance_nums(1,2) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert digit_distance_nums(23,56) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert digit_distance_nums(123,256) == 7<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L559" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="559"></td>
          <td id="LC559" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the largest sum of contiguous subarray in the given array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def max_sub_array_sum(a, size):<span class="pl-cce">\r\n</span>  max_so_far = 0<span class="pl-cce">\r\n</span>  max_ending_here = 0<span class="pl-cce">\r\n</span>  for i in range(0, size):<span class="pl-cce">\r\n</span>    max_ending_here = max_ending_here + a[i]<span class="pl-cce">\r\n</span>    if max_ending_here &lt; 0:<span class="pl-cce">\r\n</span>      max_ending_here = 0<span class="pl-cce">\r\n</span>    elif (max_so_far &lt; max_ending_here):<span class="pl-cce">\r\n</span>      max_so_far = max_ending_here<span class="pl-cce">\r\n</span>  return max_so_far<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">559</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L560" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="560"></td>
          <td id="LC560" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the union of elements of the given tuples.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def union_elements(test_tup1, test_tup2):<span class="pl-cce">\r\n</span>  res = tuple(set(test_tup1 + test_tup2))<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">560</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L561" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="561"></td>
          <td id="LC561" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def assign_elements(test_list):<span class="pl-cce">\r\n</span>  res = dict()<span class="pl-cce">\r\n</span>  for key, val in test_list:<span class="pl-cce">\r\n</span>    res.setdefault(val, [])<span class="pl-cce">\r\n</span>    res.setdefault(key, []).append(val)<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">561</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L562" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="562"></td>
          <td id="LC562" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the maximum length of sublist.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def Find_Max_Length(lst):  <span class="pl-cce">\r\n</span>    maxLength = max(len(x) for x in lst )<span class="pl-cce">\r\n</span>    return maxLength <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">562</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L563" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="563"></td>
          <td id="LC563" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to extract values between quotation marks of a string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def extract_values(text):<span class="pl-cce">\r\n</span> return (re.findall(r&#39;<span class="pl-cce">\&quot;</span>(.*?)<span class="pl-cce">\&quot;</span>&#39;, text))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">563</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_values(&#39;<span class="pl-cce">\&quot;</span>Python<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>PHP<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>Java<span class="pl-cce">\&quot;</span>&#39;)==[&#39;Python&#39;, &#39;PHP&#39;, &#39;Java&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_values(&#39;<span class="pl-cce">\&quot;</span>python<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>program<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>language<span class="pl-cce">\&quot;</span>&#39;)==[&#39;python&#39;,&#39;program&#39;,&#39;language&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_values(&#39;<span class="pl-cce">\&quot;</span>red<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>blue<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>green<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>yellow<span class="pl-cce">\&quot;</span>&#39;)==[&#39;red&#39;,&#39;blue&#39;,&#39;green&#39;,&#39;yellow&#39;]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L564" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="564"></td>
          <td id="LC564" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count unequal element pairs from the given array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_Pairs(arr,n): <span class="pl-cce">\r\n</span>    cnt = 0; <span class="pl-cce">\r\n</span>    for i in range(n): <span class="pl-cce">\r\n</span>        for j in range(i + 1,n): <span class="pl-cce">\r\n</span>            if (arr[i] != arr[j]): <span class="pl-cce">\r\n</span>                cnt += 1; <span class="pl-cce">\r\n</span>    return cnt; <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">564</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Pairs([1,2,1],3) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Pairs([1,1,1,1],4) == 0<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Pairs([1,2,3,4,5],5) == 10<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L565" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="565"></td>
          <td id="LC565" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to split a string into characters.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def split(word): <span class="pl-cce">\r\n</span>    return [char for char in word] <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">565</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert split(&#39;python&#39;) == [&#39;p&#39;,&#39;y&#39;,&#39;t&#39;,&#39;h&#39;,&#39;o&#39;,&#39;n&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert split(&#39;Name&#39;) == [&#39;N&#39;,&#39;a&#39;,&#39;m&#39;,&#39;e&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert split(&#39;program&#39;) == [&#39;p&#39;,&#39;r&#39;,&#39;o&#39;,&#39;g&#39;,&#39;r&#39;,&#39;a&#39;,&#39;m&#39;]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L566" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="566"></td>
          <td id="LC566" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to get the sum of a non-negative integer.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sum_digits(n):<span class="pl-cce">\r\n</span>  if n == 0:<span class="pl-cce">\r\n</span>    return 0<span class="pl-cce">\r\n</span>  else:<span class="pl-cce">\r\n</span>    return n % 10 + sum_digits(int(n / 10))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">566</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_digits(345)==12<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_digits(12)==3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_digits(97)==16<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L567" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="567"></td>
          <td id="LC567" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check whether a specified list is sorted or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def issort_list(list1):<span class="pl-cce">\r\n</span>    result = all(list1[i] &lt;= list1[i+1] for i in range(len(list1)-1))<span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">567</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert issort_list([1,2,4,6,8,10,12,14,16,17])==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L568" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="568"></td>
          <td id="LC568" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to create a list of empty dictionaries.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def empty_list(length):<span class="pl-cce">\r\n</span> empty_list = [{} for _ in range(length)]<span class="pl-cce">\r\n</span> return empty_list<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">568</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert empty_list(5)==[{},{},{},{},{}]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert empty_list(6)==[{},{},{},{},{},{}]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert empty_list(7)==[{},{},{},{},{},{},{}]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L569" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="569"></td>
          <td id="LC569" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to sort each sublist of strings in a given list of lists.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sort_sublists(list1):<span class="pl-cce">\r\n</span>    result = list(map(sorted,list1)) <span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">569</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_sublists([[&#39;green&#39;, &#39;orange&#39;], [&#39;black&#39;, &#39;white&#39;], [&#39;white&#39;, &#39;black&#39;, &#39;orange&#39;]])==[[&#39;green&#39;, &#39;orange&#39;], [&#39;black&#39;, &#39;white&#39;], [&#39;black&#39;, &#39;orange&#39;, &#39;white&#39;]]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_sublists([[&#39;green&#39;, &#39;orange&#39;], [&#39;black&#39;], [&#39;green&#39;, &#39;orange&#39;], [&#39;white&#39;]])==[[&#39;green&#39;, &#39;orange&#39;], [&#39;black&#39;], [&#39;green&#39;, &#39;orange&#39;], [&#39;white&#39;]]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_sublists([[&#39;a&#39;,&#39;b&#39;],[&#39;d&#39;,&#39;c&#39;],[&#39;g&#39;,&#39;h&#39;] , [&#39;f&#39;,&#39;e&#39;]])==[[&#39;a&#39;, &#39;b&#39;], [&#39;c&#39;, &#39;d&#39;], [&#39;g&#39;, &#39;h&#39;], [&#39;e&#39;, &#39;f&#39;]]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L570" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="570"></td>
          <td id="LC570" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to remove words from a given list of strings containing a character or string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def remove_words(list1, charlist):<span class="pl-cce">\r\n</span>    new_list = []<span class="pl-cce">\r\n</span>    for line in list1:<span class="pl-cce">\r\n</span>        new_words = &#39; &#39;.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])<span class="pl-cce">\r\n</span>        new_list.append(new_words)<span class="pl-cce">\r\n</span>    return new_list<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">570</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_words([&#39;Red color&#39;, &#39;Orange#&#39;, &#39;Green&#39;, &#39;Orange @&#39;, <span class="pl-cce">\&quot;</span>White<span class="pl-cce">\&quot;</span>],[&#39;#&#39;, &#39;color&#39;, &#39;@&#39;])==[&#39;Red&#39;, &#39;&#39;, &#39;Green&#39;, &#39;Orange&#39;, &#39;White&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_words([&#39;Red &amp;&#39;, &#39;Orange+&#39;, &#39;Green&#39;, &#39;Orange @&#39;, &#39;White&#39;],[&#39;&amp;&#39;, &#39;+&#39;, &#39;@&#39;])==[&#39;Red&#39;, &#39;&#39;, &#39;Green&#39;, &#39;Orange&#39;, &#39;White&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_words([&#39;Red &amp;&#39;, &#39;Orange+&#39;, &#39;Green&#39;, &#39;Orange @&#39;, &#39;White&#39;],[&#39;@&#39;])==[&#39;Red &amp;&#39;, &#39;Orange+&#39;, &#39;Green&#39;, &#39;Orange&#39;, &#39;White&#39;]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L571" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="571"></td>
          <td id="LC571" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def max_sum_pair_diff_lessthan_K(arr, N, K): <span class="pl-cce">\r\n\t</span>arr.sort() <span class="pl-cce">\r\n\t</span>dp = [0] * N <span class="pl-cce">\r\n\t</span>dp[0] = 0<span class="pl-cce">\r\n\t</span>for i in range(1, N): <span class="pl-cce">\r\n\t\t</span>dp[i] = dp[i-1] <span class="pl-cce">\r\n\t\t</span>if (arr[i] - arr[i-1] &lt; K): <span class="pl-cce">\r\n\t\t\t</span>if (i &gt;= 2): <span class="pl-cce">\r\n\t\t\t\t</span>dp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); <span class="pl-cce">\r\n\t\t\t</span>else: <span class="pl-cce">\r\n\t\t\t\t</span>dp[i] = max(dp[i], arr[i] + arr[i-1]); <span class="pl-cce">\r\n\t</span>return dp[N - 1]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">571</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L572" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="572"></td>
          <td id="LC572" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to remove two duplicate numbers from a given number of lists.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def two_unique_nums(nums):<span class="pl-cce">\r\n</span>  return [i for i in nums if nums.count(i)==1]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">572</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L573" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="573"></td>
          <td id="LC573" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to calculate the product of the unique numbers of a given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def unique_product(list_data):<span class="pl-cce">\r\n</span>    temp = list(set(list_data))<span class="pl-cce">\r\n</span>    p = 1<span class="pl-cce">\r\n</span>    for i in temp:<span class="pl-cce">\r\n</span>        p *= i<span class="pl-cce">\r\n</span>    return p<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">573</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert unique_product([1, 2, 3, 1,]) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert unique_product([7, 8, 9, 0, 1, 1]) == 0<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L574" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="574"></td>
          <td id="LC574" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the surface area of a cylinder.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def surfacearea_cylinder(r,h):<span class="pl-cce">\r\n</span>  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))<span class="pl-cce">\r\n</span>  return surfacearea<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">574</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert surfacearea_cylinder(10,5)==942.45<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert surfacearea_cylinder(4,5)==226.18800000000002<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert surfacearea_cylinder(4,10)==351.848<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L575" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="575"></td>
          <td id="LC575" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find nth number in a sequence which is not a multiple of a given number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_no (A,N,L,R): <span class="pl-cce">\r\n</span>    count = 0<span class="pl-cce">\r\n</span>    for i in range (L,R + 1): <span class="pl-cce">\r\n</span>        if (i % A != 0): <span class="pl-cce">\r\n</span>            count += 1<span class="pl-cce">\r\n</span>        if (count == N): <span class="pl-cce">\r\n</span>            break<span class="pl-cce">\r\n</span>    return (i) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">575</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_no(2,3,1,10) == 5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_no(3,6,4,20) == 11<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_no(5,10,4,20) == 16<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L576" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="576"></td>
          <td id="LC576" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether an array is subarray of another or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def is_Sub_Array(A,B,n,m): <span class="pl-cce">\r\n</span>    i = 0; j = 0; <span class="pl-cce">\r\n</span>    while (i &lt; n and j &lt; m):  <span class="pl-cce">\r\n</span>        if (A[i] == B[j]): <span class="pl-cce">\r\n</span>            i += 1; <span class="pl-cce">\r\n</span>            j += 1; <span class="pl-cce">\r\n</span>            if (j == m): <span class="pl-cce">\r\n</span>                return True;  <span class="pl-cce">\r\n</span>        else: <span class="pl-cce">\r\n</span>            i = i - j + 1; <span class="pl-cce">\r\n</span>            j = 0;       <span class="pl-cce">\r\n</span>    return False; <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">576</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_Sub_Array([1,2,1],[1,2,1],3,3) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L577" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="577"></td>
          <td id="LC577" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the last digit in factorial of a given number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def last_Digit_Factorial(n): <span class="pl-cce">\r\n</span>    if (n == 0): return 1<span class="pl-cce">\r\n</span>    elif (n &lt;= 2): return n  <span class="pl-cce">\r\n</span>    elif (n == 3): return 6<span class="pl-cce">\r\n</span>    elif (n == 4): return 4 <span class="pl-cce">\r\n</span>    else: <span class="pl-cce">\r\n</span>      return 0<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">577</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert last_Digit_Factorial(4) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert last_Digit_Factorial(21) == 0<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert last_Digit_Factorial(30) == 0<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L578" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="578"></td>
          <td id="LC578" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to interleave lists of the same length.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def interleave_lists(list1,list2,list3):<span class="pl-cce">\r\n</span>    result = [el for pair in zip(list1, list2, list3) for el in pair]<span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">578</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L579" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="579"></td>
          <td id="LC579" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the dissimilar elements in the given two tuples.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_dissimilar(test_tup1, test_tup2):<span class="pl-cce">\r\n</span>  res = tuple(set(test_tup1) ^ set(test_tup2))<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">579</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L580" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="580"></td>
          <td id="LC580" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to extract the even elements in the nested mixed tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def even_ele(test_tuple, even_fnc): <span class="pl-cce">\r\n\t</span>res = tuple() <span class="pl-cce">\r\n\t</span>for ele in test_tuple: <span class="pl-cce">\r\n\t\t</span>if isinstance(ele, tuple): <span class="pl-cce">\r\n\t\t\t</span>res += (even_ele(ele, even_fnc), ) <span class="pl-cce">\r\n\t\t</span>elif even_fnc(ele): <span class="pl-cce">\r\n\t\t\t</span>res += (ele, ) <span class="pl-cce">\r\n\t</span>return res <span class="pl-cce">\r\n</span>def extract_even(test_tuple):<span class="pl-cce">\r\n</span>  res = even_ele(test_tuple, lambda x: x % 2 == 0)<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">580</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L581" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="581"></td>
          <td id="LC581" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the surface area of the square pyramid.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def surface_Area(b,s): <span class="pl-cce">\r\n</span>    return 2 * b * s + pow(b,2) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">581</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert surface_Area(3,4) == 33<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert surface_Area(4,5) == 56<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert surface_Area(1,2) == 5<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L582" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="582"></td>
          <td id="LC582" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check if a dictionary is empty or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def my_dict(dict1):<span class="pl-cce">\r\n</span>  if bool(dict1):<span class="pl-cce">\r\n</span>     return False<span class="pl-cce">\r\n</span>  else:<span class="pl-cce">\r\n</span>     return True<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">582</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert my_dict({10})==False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert my_dict({11})==False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert my_dict({})==True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L583" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="583"></td>
          <td id="LC583" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function for nth catalan number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def catalan_number(num):<span class="pl-cce">\r\n</span>    if num &lt;=1:<span class="pl-cce">\r\n</span>         return 1   <span class="pl-cce">\r\n</span>    res_num = 0<span class="pl-cce">\r\n</span>    for i in range(num):<span class="pl-cce">\r\n</span>        res_num += catalan_number(i) * catalan_number(num-i-1)<span class="pl-cce">\r\n</span>    return res_num<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">583</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert catalan_number(10)==16796<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert catalan_number(9)==4862<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert catalan_number(7)==429<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L584" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="584"></td>
          <td id="LC584" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find all adverbs and their positions in a given sentence by using regex.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def find_adverbs(text):<span class="pl-cce">\r\n</span>  for m in re.finditer(r<span class="pl-cce">\&quot;\\</span>w+ly<span class="pl-cce">\&quot;</span>, text):<span class="pl-cce">\r\n</span>    return (&#39;%d-%d: %s&#39; % (m.start(), m.end(), m.group(0)))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">584</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_adverbs(<span class="pl-cce">\&quot;</span>Clearly, he has no excuse for such behavior.<span class="pl-cce">\&quot;</span>) == &#39;0-7: Clearly&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_adverbs(<span class="pl-cce">\&quot;</span>Please handle the situation carefuly<span class="pl-cce">\&quot;</span>) == &#39;28-36: carefuly&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_adverbs(<span class="pl-cce">\&quot;</span>Complete the task quickly<span class="pl-cce">\&quot;</span>) == &#39;18-25: quickly&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L585" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="585"></td>
          <td id="LC585" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import heapq<span class="pl-cce">\r\n</span>def expensive_items(items,n):<span class="pl-cce">\r\n</span>  expensive_items = heapq.nlargest(n, items, key=lambda s: s[&#39;price&#39;])<span class="pl-cce">\r\n</span>  return expensive_items<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">585</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert expensive_items([{&#39;name&#39;: &#39;Item-1&#39;, &#39;price&#39;: 101.1},{&#39;name&#39;: &#39;Item-2&#39;, &#39;price&#39;: 555.22}],1)==[{&#39;name&#39;: &#39;Item-2&#39;, &#39;price&#39;: 555.22}]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert expensive_items([{&#39;name&#39;: &#39;Item-1&#39;, &#39;price&#39;: 101.1},{&#39;name&#39;: &#39;Item-2&#39;, &#39;price&#39;: 555.22}, {&#39;name&#39;: &#39;Item-3&#39;, &#39;price&#39;: 45.09}],2)==[{&#39;name&#39;: &#39;Item-2&#39;, &#39;price&#39;: 555.22},{&#39;name&#39;: &#39;Item-1&#39;, &#39;price&#39;: 101.1}]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert expensive_items([{&#39;name&#39;: &#39;Item-1&#39;, &#39;price&#39;: 101.1},{&#39;name&#39;: &#39;Item-2&#39;, &#39;price&#39;: 555.22}, {&#39;name&#39;: &#39;Item-3&#39;, &#39;price&#39;: 45.09},{&#39;name&#39;: &#39;Item-4&#39;, &#39;price&#39;: 22.75}],1)==[{&#39;name&#39;: &#39;Item-2&#39;, &#39;price&#39;: 555.22}]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L586" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="586"></td>
          <td id="LC586" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to split the array and add the first part to the end.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def split_Arr(a,n,k):  <span class="pl-cce">\r\n</span>   b = a[:k] <span class="pl-cce">\r\n</span>   return (a[k::]+b[::]) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">586</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert split_Arr([1,2,3,4],4,1) == [2,3,4,1]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L587" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="587"></td>
          <td id="LC587" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to convert a list to a tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def list_tuple(listx):<span class="pl-cce">\r\n</span>  tuplex = tuple(listx)<span class="pl-cce">\r\n</span>  return tuplex<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">587</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert list_tuple([58,44,56])==(58,44,56)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L588" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="588"></td>
          <td id="LC588" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the difference between largest and smallest value in a given array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def big_diff(nums):<span class="pl-cce">\r\n</span>     diff= max(nums)-min(nums)<span class="pl-cce">\r\n</span>     return diff<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">588</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert big_diff([1,2,3,4]) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert big_diff([4,5,12]) == 8<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert big_diff([9,2,3]) == 7<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L589" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="589"></td>
          <td id="LC589" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find perfect squares between two given numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def perfect_squares(a, b):<span class="pl-cce">\r\n</span>    lists=[]<span class="pl-cce">\r\n</span>    for i in range (a,b+1):<span class="pl-cce">\r\n</span>        j = 1;<span class="pl-cce">\r\n</span>        while j*j &lt;= i:<span class="pl-cce">\r\n</span>            if j*j == i:<span class="pl-cce">\r\n</span>                 lists.append(i)  <span class="pl-cce">\r\n</span>            j = j+1<span class="pl-cce">\r\n</span>        i = i+1<span class="pl-cce">\r\n</span>    return lists<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">589</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert perfect_squares(1,30)==[1, 4, 9, 16, 25]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert perfect_squares(50,100)==[64, 81, 100]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert perfect_squares(100,200)==[100, 121, 144, 169, 196]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L590" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="590"></td>
          <td id="LC590" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to convert polar coordinates to rectangular coordinates.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import cmath<span class="pl-cce">\r\n</span>def polar_rect(x,y):<span class="pl-cce">\r\n</span> cn = complex(x,y)<span class="pl-cce">\r\n</span> cn=cmath.polar(cn)<span class="pl-cce">\r\n</span> cn1 = cmath.rect(2, cmath.pi)<span class="pl-cce">\r\n</span> return (cn,cn1)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">590</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L591" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="591"></td>
          <td id="LC591" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to interchange the first and last elements in a list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def swap_List(newList): <span class="pl-cce">\r\n</span>    size = len(newList) <span class="pl-cce">\r\n</span>    temp = newList[0] <span class="pl-cce">\r\n</span>    newList[0] = newList[size - 1] <span class="pl-cce">\r\n</span>    newList[size - 1] = temp  <span class="pl-cce">\r\n</span>    return newList <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">591</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert swap_List([1, 2, 3]) == [3, 2, 1]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert swap_List([4, 5, 6]) == [6, 5, 4]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L592" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="592"></td>
          <td id="LC592" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find sum of product of binomial co-efficients.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def binomial_Coeff(n,k): <span class="pl-cce">\r\n</span>    C = [0] * (k + 1); <span class="pl-cce">\r\n</span>    C[0] = 1; # nC0 is 1 <span class="pl-cce">\r\n</span>    for i in range(1,n + 1):  <span class="pl-cce">\r\n</span>        for j in range(min(i, k),0,-1): <span class="pl-cce">\r\n</span>            C[j] = C[j] + C[j - 1]; <span class="pl-cce">\r\n</span>    return C[k]; <span class="pl-cce">\r\n</span>def sum_Of_product(n): <span class="pl-cce">\r\n</span>    return binomial_Coeff(2 * n,n - 1); <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">592</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_Of_product(3) == 15<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_Of_product(4) == 56<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_Of_product(1) == 1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L593" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="593"></td>
          <td id="LC593" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to remove leading zeroes from an ip address.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def removezero_ip(ip):<span class="pl-cce">\r\n</span> string = re.sub(&#39;<span class="pl-cce">\\</span>.[0]*&#39;, &#39;.&#39;, ip)<span class="pl-cce">\r\n</span> return string<span class="pl-cce">\r</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">593</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert removezero_ip(<span class="pl-cce">\&quot;</span>216.08.094.196<span class="pl-cce">\&quot;</span>)==(&#39;216.8.94.196&#39;) <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert removezero_ip(<span class="pl-cce">\&quot;</span>12.01.024<span class="pl-cce">\&quot;</span>)==(&#39;12.1.24&#39;) <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert removezero_ip(<span class="pl-cce">\&quot;</span>216.08.094.0196<span class="pl-cce">\&quot;</span>)==(&#39;216.8.94.196&#39;) <span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L594" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="594"></td>
          <td id="LC594" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the difference of first even and odd number of a given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def diff_even_odd(list1):<span class="pl-cce">\r\n</span>    first_even = next((el for el in list1 if el%2==0),-1)<span class="pl-cce">\r\n</span>    first_odd = next((el for el in list1 if el%2!=0),-1)<span class="pl-cce">\r\n</span>    return (first_even-first_odd)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">594</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert diff_even_odd([1,3,5,7,4,1,6,8])==3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert diff_even_odd([1,5,7,9,10])==9<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L595" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="595"></td>
          <td id="LC595" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count minimum number of swaps required to convert one binary string to another.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def min_Swaps(str1,str2) : <span class="pl-cce">\r\n</span>    count = 0<span class="pl-cce">\r\n</span>    for i in range(len(str1)) :  <span class="pl-cce">\r\n</span>        if str1[i] != str2[i] : <span class="pl-cce">\r\n</span>            count += 1<span class="pl-cce">\r\n</span>    if count % 2 == 0 : <span class="pl-cce">\r\n</span>        return (count // 2) <span class="pl-cce">\r\n</span>    else : <span class="pl-cce">\r\n</span>        return (<span class="pl-cce">\&quot;</span>Not Possible<span class="pl-cce">\&quot;</span>) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">595</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert min_Swaps(<span class="pl-cce">\&quot;</span>1101<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>1110<span class="pl-cce">\&quot;</span>) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_Swaps(<span class="pl-cce">\&quot;</span>111<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>000<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>Not Possible<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_Swaps(<span class="pl-cce">\&quot;</span>111<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>110<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>Not Possible<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L596" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="596"></td>
          <td id="LC596" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the size of the given tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import sys <span class="pl-cce">\r\n</span>def tuple_size(tuple_list):<span class="pl-cce">\r\n</span>  return (sys.getsizeof(tuple_list)) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">596</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert tuple_size((<span class="pl-cce">\&quot;</span>A<span class="pl-cce">\&quot;</span>, 1, <span class="pl-cce">\&quot;</span>B<span class="pl-cce">\&quot;</span>, 2, <span class="pl-cce">\&quot;</span>C<span class="pl-cce">\&quot;</span>, 3) ) == sys.getsizeof((<span class="pl-cce">\&quot;</span>A<span class="pl-cce">\&quot;</span>, 1, <span class="pl-cce">\&quot;</span>B<span class="pl-cce">\&quot;</span>, 2, <span class="pl-cce">\&quot;</span>C<span class="pl-cce">\&quot;</span>, 3))<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert tuple_size((1, <span class="pl-cce">\&quot;</span>Raju<span class="pl-cce">\&quot;</span>, 2, <span class="pl-cce">\&quot;</span>Nikhil<span class="pl-cce">\&quot;</span>, 3, <span class="pl-cce">\&quot;</span>Deepanshu<span class="pl-cce">\&quot;</span>) ) == sys.getsizeof((1, <span class="pl-cce">\&quot;</span>Raju<span class="pl-cce">\&quot;</span>, 2, <span class="pl-cce">\&quot;</span>Nikhil<span class="pl-cce">\&quot;</span>, 3, <span class="pl-cce">\&quot;</span>Deepanshu<span class="pl-cce">\&quot;</span>))<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert tuple_size(((1, <span class="pl-cce">\&quot;</span>Lion<span class="pl-cce">\&quot;</span>), ( 2, <span class="pl-cce">\&quot;</span>Tiger<span class="pl-cce">\&quot;</span>), (3, <span class="pl-cce">\&quot;</span>Fox<span class="pl-cce">\&quot;</span>), (4, <span class="pl-cce">\&quot;</span>Wolf<span class="pl-cce">\&quot;</span>))  ) == sys.getsizeof(((1, <span class="pl-cce">\&quot;</span>Lion<span class="pl-cce">\&quot;</span>), ( 2, <span class="pl-cce">\&quot;</span>Tiger<span class="pl-cce">\&quot;</span>), (3, <span class="pl-cce">\&quot;</span>Fox<span class="pl-cce">\&quot;</span>), (4, <span class="pl-cce">\&quot;</span>Wolf<span class="pl-cce">\&quot;</span>)))<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L597" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="597"></td>
          <td id="LC597" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find kth element from the given two sorted arrays.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_kth(arr1, arr2, m, n, k):<span class="pl-cce">\r\n\t</span>sorted1 = [0] * (m + n)<span class="pl-cce">\r\n\t</span>i = 0<span class="pl-cce">\r\n\t</span>j = 0<span class="pl-cce">\r\n\t</span>d = 0<span class="pl-cce">\r\n\t</span>while (i &lt; m and j &lt; n):<span class="pl-cce">\r\n\t\t</span>if (arr1[i] &lt; arr2[j]):<span class="pl-cce">\r\n\t\t\t</span>sorted1[d] = arr1[i]<span class="pl-cce">\r\n\t\t\t</span>i += 1<span class="pl-cce">\r\n\t\t</span>else:<span class="pl-cce">\r\n\t\t\t</span>sorted1[d] = arr2[j]<span class="pl-cce">\r\n\t\t\t</span>j += 1<span class="pl-cce">\r\n\t\t</span>d += 1<span class="pl-cce">\r\n\t</span>while (i &lt; m):<span class="pl-cce">\r\n\t\t</span>sorted1[d] = arr1[i]<span class="pl-cce">\r\n\t\t</span>d += 1<span class="pl-cce">\r\n\t\t</span>i += 1<span class="pl-cce">\r\n\t</span>while (j &lt; n):<span class="pl-cce">\r\n\t\t</span>sorted1[d] = arr2[j]<span class="pl-cce">\r\n\t\t</span>d += 1<span class="pl-cce">\r\n\t\t</span>j += 1<span class="pl-cce">\r\n\t</span>return sorted1[k - 1]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">597</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L598" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="598"></td>
          <td id="LC598" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check whether the given number is armstrong or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def armstrong_number(number):<span class="pl-cce">\r\n</span> sum = 0<span class="pl-cce">\r\n</span> times = 0<span class="pl-cce">\r\n</span> temp = number<span class="pl-cce">\r\n</span> while temp &gt; 0:<span class="pl-cce">\r\n</span>           times = times + 1<span class="pl-cce">\r\n</span>           temp = temp // 10<span class="pl-cce">\r\n</span> temp = number<span class="pl-cce">\r\n</span> while temp &gt; 0:<span class="pl-cce">\r\n</span>           reminder = temp % 10<span class="pl-cce">\r\n</span>           sum = sum + (reminder ** times)<span class="pl-cce">\r\n</span>           temp //= 10<span class="pl-cce">\r\n</span> if number == sum:<span class="pl-cce">\r\n</span>           return True<span class="pl-cce">\r\n</span> else:<span class="pl-cce">\r\n</span>           return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">598</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert armstrong_number(153)==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert armstrong_number(259)==False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert armstrong_number(4458)==False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L599" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="599"></td>
          <td id="LC599" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find sum and average of first n natural numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sum_average(number):<span class="pl-cce">\r\n</span> total = 0<span class="pl-cce">\r\n</span> for value in range(1, number + 1):<span class="pl-cce">\r\n</span>    total = total + value<span class="pl-cce">\r\n</span> average = total / number<span class="pl-cce">\r\n</span> return (total,average)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">599</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_average(10)==(55, 5.5)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_average(15)==(120, 8.0)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_average(20)==(210, 10.5)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L600" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="600"></td>
          <td id="LC600" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether the given number is even or not using bitwise operator.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def is_Even(n) : <span class="pl-cce">\r\n</span>    if (n^1 == n+1) :<span class="pl-cce">\r\n</span>        return True; <span class="pl-cce">\r\n</span>    else :<span class="pl-cce">\r\n</span>        return False; <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">600</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert is_Even(1) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_Even(2) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_Even(3) == False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L601" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="601"></td>
          <td id="LC601" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the longest chain which can be formed from the given set of pairs.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>class Pair(object): <span class="pl-cce">\r\n\t</span>def __init__(self, a, b): <span class="pl-cce">\r\n\t\t</span>self.a = a <span class="pl-cce">\r\n\t\t</span>self.b = b <span class="pl-cce">\r\n</span>def max_chain_length(arr, n): <span class="pl-cce">\r\n\t</span>max = 0<span class="pl-cce">\r\n\t</span>mcl = [1 for i in range(n)] <span class="pl-cce">\r\n\t</span>for i in range(1, n): <span class="pl-cce">\r\n\t\t</span>for j in range(0, i): <span class="pl-cce">\r\n\t\t\t</span>if (arr[i].a &gt; arr[j].b and<span class="pl-cce">\r\n\t\t\t\t</span>mcl[i] &lt; mcl[j] + 1): <span class="pl-cce">\r\n\t\t\t\t</span>mcl[i] = mcl[j] + 1<span class="pl-cce">\r\n\t</span>for i in range(n): <span class="pl-cce">\r\n\t\t</span>if (max &lt; mcl[i]): <span class="pl-cce">\r\n\t\t\t</span>max = mcl[i] <span class="pl-cce">\r\n\t</span>return max<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">601</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L602" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="602"></td>
          <td id="LC602" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the first repeated character in a given string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def first_repeated_char(str1):<span class="pl-cce">\r\n</span>  for index,c in enumerate(str1):<span class="pl-cce">\r\n</span>    if str1[:index+1].count(c) &gt; 1:<span class="pl-cce">\r\n</span>      return c <span class="pl-cce">\r\n</span>  return <span class="pl-cce">\&quot;</span>None<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">602</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert first_repeated_char(<span class="pl-cce">\&quot;</span>abcabc<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>a<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert first_repeated_char(<span class="pl-cce">\&quot;</span>abc<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>None<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert first_repeated_char(<span class="pl-cce">\&quot;</span>123123<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>1<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L603" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="603"></td>
          <td id="LC603" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to get a lucid number smaller than or equal to n.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def get_ludic(n):<span class="pl-cce">\r\n\t</span>ludics = []<span class="pl-cce">\r\n\t</span>for i in range(1, n + 1):<span class="pl-cce">\r\n\t\t</span>ludics.append(i)<span class="pl-cce">\r\n\t</span>index = 1<span class="pl-cce">\r\n\t</span>while(index != len(ludics)):<span class="pl-cce">\r\n\t\t</span>first_ludic = ludics[index]<span class="pl-cce">\r\n\t\t</span>remove_index = index + first_ludic<span class="pl-cce">\r\n\t\t</span>while(remove_index &lt; len(ludics)):<span class="pl-cce">\r\n\t\t\t</span>ludics.remove(ludics[remove_index])<span class="pl-cce">\r\n\t\t\t</span>remove_index = remove_index + first_ludic - 1<span class="pl-cce">\r\n\t\t</span>index += 1<span class="pl-cce">\r\n\t</span>return ludics<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">603</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert get_ludic(10) == [1, 2, 3, 5, 7]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L604" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="604"></td>
          <td id="LC604" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to reverse words in a given string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def reverse_words(s):<span class="pl-cce">\r\n</span>        return &#39; &#39;.join(reversed(s.split()))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">604</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert reverse_words(<span class="pl-cce">\&quot;</span>python program<span class="pl-cce">\&quot;</span>)==(<span class="pl-cce">\&quot;</span>program python<span class="pl-cce">\&quot;</span>)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert reverse_words(<span class="pl-cce">\&quot;</span>java language<span class="pl-cce">\&quot;</span>)==(<span class="pl-cce">\&quot;</span>language java<span class="pl-cce">\&quot;</span>)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert reverse_words(<span class="pl-cce">\&quot;</span>indian man<span class="pl-cce">\&quot;</span>)==(<span class="pl-cce">\&quot;</span>man indian<span class="pl-cce">\&quot;</span>)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L605" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="605"></td>
          <td id="LC605" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check if the given integer is a prime number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def prime_num(num):<span class="pl-cce">\r\n</span>  if num &gt;=1:<span class="pl-cce">\r\n</span>   for i in range(2, num//2):<span class="pl-cce">\r\n</span>     if (num % i) == 0:<span class="pl-cce">\r\n</span>                return False<span class="pl-cce">\r\n</span>     else:<span class="pl-cce">\r\n</span>                return True<span class="pl-cce">\r\n</span>  else:<span class="pl-cce">\r\n</span>          return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">605</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert prime_num(13)==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert prime_num(7)==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert prime_num(-1010)==False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L606" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="606"></td>
          <td id="LC606" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to convert degrees to radians.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math<span class="pl-cce">\r\n</span>def radian_degree(degree):<span class="pl-cce">\r\n</span> radian = degree*(math.pi/180)<span class="pl-cce">\r\n</span> return radian<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">606</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert radian_degree(90)==1.5707963267948966<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert radian_degree(60)==1.0471975511965976<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert radian_degree(120)==2.0943951023931953<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L607" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="607"></td>
          <td id="LC607" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>pattern = &#39;fox&#39;<span class="pl-cce">\r\n</span>text = &#39;The quick brown fox jumps over the lazy dog.&#39;<span class="pl-cce">\r\n</span>def find_literals(text, pattern):<span class="pl-cce">\r\n</span>  match = re.search(pattern, text)<span class="pl-cce">\r\n</span>  s = match.start()<span class="pl-cce">\r\n</span>  e = match.end()<span class="pl-cce">\r\n</span>  return (match.re.pattern, s, e)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">607</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_literals(&#39;The quick brown fox jumps over the lazy dog.&#39;, &#39;fox&#39;) == (&#39;fox&#39;, 16, 19)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_literals(&#39;Its been a very crazy procedure right&#39;, &#39;crazy&#39;) == (&#39;crazy&#39;, 16, 21)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_literals(&#39;Hardest choices required strongest will&#39;, &#39;will&#39;) == (&#39;will&#39;, 35, 39)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L608" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="608"></td>
          <td id="LC608" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find nth bell number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def bell_Number(n): <span class="pl-cce">\r\n</span>    bell = [[0 for i in range(n+1)] for j in range(n+1)] <span class="pl-cce">\r\n</span>    bell[0][0] = 1<span class="pl-cce">\r\n</span>    for i in range(1, n+1):<span class="pl-cce">\r\n</span>        bell[i][0] = bell[i-1][i-1]<span class="pl-cce">\r\n</span>        for j in range(1, i+1): <span class="pl-cce">\r\n</span>            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] <span class="pl-cce">\r\n</span>    return bell[n][0] <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">608</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert bell_Number(2) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert bell_Number(3) == 5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert bell_Number(4) == 15<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L609" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="609"></td>
          <td id="LC609" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find minimum possible value for the given periodic function.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def floor_Min(A,B,N):<span class="pl-cce">\r\n</span>    x = max(B - 1,N)<span class="pl-cce">\r\n</span>    return (A*x) // B<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">609</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert floor_Min(10,20,30) == 15<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert floor_Min(1,2,1) == 0<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert floor_Min(11,10,9) == 9<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L610" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="610"></td>
          <td id="LC610" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to remove the k&#39;th element from a given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def remove_kth_element(list1, L):<span class="pl-cce">\r\n</span>    return  list1[:L-1] + list1[L:]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">610</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L611" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="611"></td>
          <td id="LC611" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the maximum of nth column from the given tuple list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def max_of_nth(test_list, N):<span class="pl-cce">\r\n</span>  res = max([sub[N] for sub in test_list])<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">611</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L612" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="612"></td>
          <td id="LC612" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to merge the first and last elements separately in a list of lists.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def merge(lst):  <span class="pl-cce">\r\n</span>    return [list(ele) for ele in list(zip(*lst))] <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">612</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert merge([[&#39;x&#39;, &#39;y&#39;], [&#39;a&#39;, &#39;b&#39;], [&#39;m&#39;, &#39;n&#39;]]) == [[&#39;x&#39;, &#39;a&#39;, &#39;m&#39;], [&#39;y&#39;, &#39;b&#39;, &#39;n&#39;]]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert merge([[&#39;x&#39;, &#39;y&#39;,&#39;z&#39; ], [&#39;a&#39;, &#39;b&#39;,&#39;c&#39;], [&#39;m&#39;, &#39;n&#39;,&#39;o&#39;]]) == [[&#39;x&#39;, &#39;a&#39;, &#39;m&#39;], [&#39;y&#39;, &#39;b&#39;, &#39;n&#39;],[&#39;z&#39;, &#39;c&#39;,&#39;o&#39;]]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L613" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="613"></td>
          <td id="LC613" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the maximum value in record list as tuple attribute in the given tuple list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def maximum_value(test_list):<span class="pl-cce">\r\n</span>  res = [(key, max(lst)) for key, lst in test_list]<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">613</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert maximum_value([(&#39;key1&#39;, [3, 4, 5]), (&#39;key2&#39;, [1, 4, 2]), (&#39;key3&#39;, [9, 3])]) == [(&#39;key1&#39;, 5), (&#39;key2&#39;, 4), (&#39;key3&#39;, 9)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert maximum_value([(&#39;key1&#39;, [4, 5, 6]), (&#39;key2&#39;, [2, 5, 3]), (&#39;key3&#39;, [10, 4])]) == [(&#39;key1&#39;, 6), (&#39;key2&#39;, 5), (&#39;key3&#39;, 10)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert maximum_value([(&#39;key1&#39;, [5, 6, 7]), (&#39;key2&#39;, [3, 6, 4]), (&#39;key3&#39;, [11, 5])]) == [(&#39;key1&#39;, 7), (&#39;key2&#39;, 6), (&#39;key3&#39;, 11)]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L614" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="614"></td>
          <td id="LC614" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the cumulative sum of all the values that are present in the given tuple list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def cummulative_sum(test_list):<span class="pl-cce">\r\n</span>  res = sum(map(sum, test_list))<span class="pl-cce">\r\n</span>  return (res)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">614</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L615" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="615"></td>
          <td id="LC615" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find average value of the numbers in a given tuple of tuples.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def average_tuple(nums):<span class="pl-cce">\r\n</span>    result = [sum(x) / len(x) for x in zip(*nums)]<span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">615</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L616" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="616"></td>
          <td id="LC616" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to perfom the modulo of tuple elements in the given two tuples.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def tuple_modulo(test_tup1, test_tup2):<span class="pl-cce">\r\n</span>  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) <span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">616</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L617" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="617"></td>
          <td id="LC617" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def min_Jumps(a, b, d): <span class="pl-cce">\r\n</span>    temp = a <span class="pl-cce">\r\n</span>    a = min(a, b) <span class="pl-cce">\r\n</span>    b = max(temp, b) <span class="pl-cce">\r\n</span>    if (d &gt;= b): <span class="pl-cce">\r\n</span>        return (d + b - 1) / b <span class="pl-cce">\r\n</span>    if (d == 0): <span class="pl-cce">\r\n</span>        return 0<span class="pl-cce">\r\n</span>    if (d == a): <span class="pl-cce">\r\n</span>        return 1<span class="pl-cce">\r\n</span>    else:<span class="pl-cce">\r\n</span>        return 2<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">617</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert min_Jumps(3,4,11)==3.5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_Jumps(3,4,0)==0<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_Jumps(11,14,11)==1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L618" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="618"></td>
          <td id="LC618" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to divide two lists using map and lambda function.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def div_list(nums1,nums2):<span class="pl-cce">\r\n</span>  result = map(lambda x, y: x / y, nums1, nums2)<span class="pl-cce">\r\n</span>  return list(result)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">618</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert div_list([3,2],[1,4])==[3.0, 0.5]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L619" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="619"></td>
          <td id="LC619" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to move all the numbers in it to the given string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def move_num(test_str):<span class="pl-cce">\r\n</span>  res = &#39;&#39;<span class="pl-cce">\r\n</span>  dig = &#39;&#39;<span class="pl-cce">\r\n</span>  for ele in test_str:<span class="pl-cce">\r\n</span>    if ele.isdigit():<span class="pl-cce">\r\n</span>      dig += ele<span class="pl-cce">\r\n</span>    else:<span class="pl-cce">\r\n</span>      res += ele<span class="pl-cce">\r\n</span>  res += dig<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">619</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert move_num(&#39;I1love143you55three3000thousand&#39;) == &#39;Iloveyouthreethousand1143553000&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert move_num(&#39;Avengers124Assemble&#39;) == &#39;AvengersAssemble124&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert move_num(&#39;Its11our12path13to14see15things16do17things&#39;) == &#39;Itsourpathtoseethingsdothings11121314151617&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L620" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="620"></td>
          <td id="LC620" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the largest subset where each pair is divisible.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def largest_subset(a, n):<span class="pl-cce">\r\n\t</span>dp = [0 for i in range(n)]<span class="pl-cce">\r\n\t</span>dp[n - 1] = 1; <span class="pl-cce">\r\n\t</span>for i in range(n - 2, -1, -1):<span class="pl-cce">\r\n\t\t</span>mxm = 0;<span class="pl-cce">\r\n\t\t</span>for j in range(i + 1, n):<span class="pl-cce">\r\n\t\t\t</span>if a[j] % a[i] == 0 or a[i] % a[j] == 0:<span class="pl-cce">\r\n\t\t\t\t</span>mxm = max(mxm, dp[j])<span class="pl-cce">\r\n\t\t</span>dp[i] = 1 + mxm<span class="pl-cce">\r\n\t</span>return max(dp)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">620</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert largest_subset([10, 5, 3, 15, 20], 5) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L621" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="621"></td>
          <td id="LC621" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to increment the numeric values in the given strings by k.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def increment_numerics(test_list, K):<span class="pl-cce">\r\n</span>  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]<span class="pl-cce">\r\n</span>  return res <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">621</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert increment_numerics([<span class="pl-cce">\&quot;</span>MSM<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>234<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>is<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>98<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>123<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>best<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>4<span class="pl-cce">\&quot;</span>] , 6) == [&#39;MSM&#39;, &#39;240&#39;, &#39;is&#39;, &#39;104&#39;, &#39;129&#39;, &#39;best&#39;, &#39;10&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert increment_numerics([<span class="pl-cce">\&quot;</span>Dart<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>356<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>is<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>88<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>169<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>Super<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>6<span class="pl-cce">\&quot;</span>] , 12) == [&#39;Dart&#39;, &#39;368&#39;, &#39;is&#39;, &#39;100&#39;, &#39;181&#39;, &#39;Super&#39;, &#39;18&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert increment_numerics([<span class="pl-cce">\&quot;</span>Flutter<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>451<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>is<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>44<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>96<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>Magnificent<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>12<span class="pl-cce">\&quot;</span>] , 33) == [&#39;Flutter&#39;, &#39;484&#39;, &#39;is&#39;, &#39;77&#39;, &#39;129&#39;, &#39;Magnificent&#39;, &#39;45&#39;]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L622" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="622"></td>
          <td id="LC622" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the median of two sorted arrays of same size.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def get_median(arr1, arr2, n):<span class="pl-cce">\r\n</span>  i = 0<span class="pl-cce">\r\n</span>  j = 0<span class="pl-cce">\r\n</span>  m1 = -1<span class="pl-cce">\r\n</span>  m2 = -1<span class="pl-cce">\r\n</span>  count = 0<span class="pl-cce">\r\n</span>  while count &lt; n + 1:<span class="pl-cce">\r\n</span>    count += 1<span class="pl-cce">\r\n</span>    if i == n:<span class="pl-cce">\r\n</span>      m1 = m2<span class="pl-cce">\r\n</span>      m2 = arr2[0]<span class="pl-cce">\r\n</span>      break<span class="pl-cce">\r\n</span>    elif j == n:<span class="pl-cce">\r\n</span>      m1 = m2<span class="pl-cce">\r\n</span>      m2 = arr1[0]<span class="pl-cce">\r\n</span>      break<span class="pl-cce">\r\n</span>    if arr1[i] &lt;= arr2[j]:<span class="pl-cce">\r\n</span>      m1 = m2<span class="pl-cce">\r\n</span>      m2 = arr1[i]<span class="pl-cce">\r\n</span>      i += 1<span class="pl-cce">\r\n</span>    else:<span class="pl-cce">\r\n</span>      m1 = m2<span class="pl-cce">\r\n</span>      m2 = arr2[j]<span class="pl-cce">\r\n</span>      j += 1<span class="pl-cce">\r\n</span>  return (m1 + m2)/2<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">622</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L623" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="623"></td>
          <td id="LC623" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the n-th power of individual elements in a list using lambda function.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def nth_nums(nums,n):<span class="pl-cce">\r\n</span> nth_nums = list(map(lambda x: x ** n, nums))<span class="pl-cce">\r\n</span> return nth_nums<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">623</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert nth_nums([10,20,30],3)==([1000, 8000, 27000])<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert nth_nums([12,15],5)==([248832, 759375])<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L624" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="624"></td>
          <td id="LC624" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to convert the given string to upper case.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def is_upper(string):<span class="pl-cce">\r\n</span>  return (string.upper())<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">624</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert is_upper(<span class="pl-cce">\&quot;</span>person<span class="pl-cce">\&quot;</span>) ==<span class="pl-cce">\&quot;</span>PERSON<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_upper(<span class="pl-cce">\&quot;</span>final<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>FINAL<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_upper(<span class="pl-cce">\&quot;</span>Valid<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>VALID<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L625" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="625"></td>
          <td id="LC625" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to interchange first and last elements in a given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def swap_List(newList): <span class="pl-cce">\r\n</span>    size = len(newList) <span class="pl-cce">\r\n</span>    temp = newList[0] <span class="pl-cce">\r\n</span>    newList[0] = newList[size - 1] <span class="pl-cce">\r\n</span>    newList[size - 1] = temp   <span class="pl-cce">\r\n</span>    return newList <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">625</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert swap_List([1,2,3]) == [3,2,1]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert swap_List([1,2,3,4,4]) == [4,2,3,4,1]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert swap_List([4,5,6]) == [6,5,4]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L626" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="626"></td>
          <td id="LC626" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the largest triangle that can be inscribed in the semicircle.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def triangle_area(r) :  <span class="pl-cce">\r\n</span>    if r &lt; 0 : <span class="pl-cce">\r\n</span>        return -1<span class="pl-cce">\r\n</span>    return r * r <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">626</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert triangle_area(0) == 0<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert triangle_area(-1) == -1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert triangle_area(2) == 4<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L627" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="627"></td>
          <td id="LC627" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the smallest missing number from the given array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_First_Missing(array,start,end): <span class="pl-cce">\r\n</span>    if (start &gt; end): <span class="pl-cce">\r\n</span>        return end + 1<span class="pl-cce">\r\n</span>    if (start != array[start]): <span class="pl-cce">\r\n</span>        return start; <span class="pl-cce">\r\n</span>    mid = int((start + end) / 2) <span class="pl-cce">\r\n</span>    if (array[mid] == mid): <span class="pl-cce">\r\n</span>        return find_First_Missing(array,mid+1,end) <span class="pl-cce">\r\n</span>    return find_First_Missing(array,start,mid) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">627</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_First_Missing([0,1,2,3],0,3) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_First_Missing([0,1,2,6,9],0,4) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_First_Missing([2,3,5,8,9],0,4) == 0<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L628" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="628"></td>
          <td id="LC628" class="blob-code blob-code-inner js-file-line">{&quot;text&quot;: &quot;Write a function to replace all spaces in the given string with character * list item * list item * list item * list item &#39;%20&#39;.&quot;, &quot;code&quot;: &quot;MAX=1000;\r\ndef replace_spaces(string):\r\n  string=string.strip()\r\n  i=len(string)\r\n  space_count=string.count(&#39; &#39;)\r\n  new_length = i + space_count*2\r\n  if new_length &gt; MAX:\r\n    return -1\r\n  index = new_length-1\r\n  string=list(string)\r\n  for f in range(i-2, new_length-2):\r\n    string.append(&#39;0&#39;)\r\n  for j in range(i-1, 0, -1):\r\n    if string[j] == &#39; &#39;:\r\n      string[index] = &#39;0&#39;\r\n      string[index-1] = &#39;2&#39;\r\n      string[index-2] = &#39;%&#39;\r\n      index=index-3\r\n    else:\r\n      string[index] = string[j]\r\n      index -= 1\r\n  return &#39;&#39;.join(string)&quot;, &quot;task_id&quot;: 628, &quot;test_setup_code&quot;: &quot;&quot;, &quot;test_list&quot;: [&quot;assert replace_spaces(\&quot;My Name is Dawood\&quot;) == &#39;My%20Name%20is%20Dawood&#39;&quot;, &quot;assert replace_spaces(\&quot;I am a Programmer\&quot;) == &#39;I%20am%20a%20Programmer&#39;&quot;, &quot;assert replace_spaces(\&quot;I love Coding\&quot;) == &#39;I%20love%20Coding&#39;&quot;], &quot;challenge_test_list&quot;: []}</td>
        </tr>
        <tr>
          <td id="L629" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="629"></td>
          <td id="LC629" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find even numbers from a mixed list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def Split(list): <span class="pl-cce">\r\n</span>    ev_li = [] <span class="pl-cce">\r\n</span>    for i in list: <span class="pl-cce">\r\n</span>        if (i % 2 == 0): <span class="pl-cce">\r\n</span>            ev_li.append(i)  <span class="pl-cce">\r\n</span>    return ev_li<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">629</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert Split([1,2,3,4,5]) == [2,4]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Split([4,5,6,7,8,0,1]) == [4,6,8,0]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Split ([8,12,15,19]) == [8,12]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L630" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="630"></td>
          <td id="LC630" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to extract all the adjacent coordinates of the given coordinate tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def adjac(ele, sub = []): <span class="pl-cce">\r\n</span>  if not ele: <span class="pl-cce">\r\n</span>     yield sub <span class="pl-cce">\r\n</span>  else: <span class="pl-cce">\r\n</span>     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) <span class="pl-cce">\r\n</span>                for idx in adjac(ele[1:], sub + [j])] <span class="pl-cce">\r\n</span>def get_coordinates(test_tup):<span class="pl-cce">\r\n</span>  res = list(adjac(test_tup))<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">630</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L631" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="631"></td>
          <td id="LC631" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>text = &#39;Python Exercises&#39;<span class="pl-cce">\r\n</span>def replace_spaces(text):<span class="pl-cce">\r\n</span>  text =text.replace (<span class="pl-cce">\&quot;</span> <span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>_<span class="pl-cce">\&quot;</span>)<span class="pl-cce">\r\n</span>  return (text)<span class="pl-cce">\r\n</span>  text =text.replace (<span class="pl-cce">\&quot;</span>_<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span> <span class="pl-cce">\&quot;</span>)<span class="pl-cce">\r\n</span>  return (text)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">631</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert replace_spaces(&#39;Jumanji The Jungle&#39;) == &#39;Jumanji_The_Jungle&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert replace_spaces(&#39;The Avengers&#39;) == &#39;The_Avengers&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert replace_spaces(&#39;Fast and Furious&#39;) == &#39;Fast_and_Furious&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L632" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="632"></td>
          <td id="LC632" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to move all zeroes to the end of the given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def move_zero(num_list):<span class="pl-cce">\r\n</span>    a = [0 for i in range(num_list.count(0))]<span class="pl-cce">\r\n</span>    x = [ i for i in num_list if i != 0]<span class="pl-cce">\r\n</span>    x.extend(a)<span class="pl-cce">\r\n</span>    return (x)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">632</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert move_zero([0,1,0,1,1]) == [1,1,1,0,0]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L633" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="633"></td>
          <td id="LC633" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the sum of xor of all pairs of numbers in the given array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def pair_OR_Sum(arr,n) : <span class="pl-cce">\r\n</span>    ans = 0 <span class="pl-cce">\r\n</span>    for i in range(0,n) :    <span class="pl-cce">\r\n</span>        for j in range(i + 1,n) :   <span class="pl-cce">\r\n</span>            ans = ans + (arr[i] ^ arr[j])          <span class="pl-cce">\r\n</span>    return ans <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">633</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert pair_OR_Sum([5,9,7,6],4) == 47<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert pair_OR_Sum([7,3,5],3) == 12<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert pair_OR_Sum([7,3],2) == 4<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L634" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="634"></td>
          <td id="LC634" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the sum of fourth power of first n even natural numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def even_Power_Sum(n): <span class="pl-cce">\r\n</span>    sum = 0; <span class="pl-cce">\r\n</span>    for i in range(1,n + 1): <span class="pl-cce">\r\n</span>        j = 2*i; <span class="pl-cce">\r\n</span>        sum = sum + (j*j*j*j); <span class="pl-cce">\r\n</span>    return sum; <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">634</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert even_Power_Sum(2) == 272<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert even_Power_Sum(3) == 1568<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert even_Power_Sum(4) == 5664<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L635" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="635"></td>
          <td id="LC635" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to push all values into a heap and then pop off the smallest values one at a time.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import heapq as hq<span class="pl-cce">\r\n</span>def heap_sort(iterable):<span class="pl-cce">\r\n</span>    h = []<span class="pl-cce">\r\n</span>    for value in iterable:<span class="pl-cce">\r\n</span>        hq.heappush(h, value)<span class="pl-cce">\r\n</span>    return [hq.heappop(h) for i in range(len(h))]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">635</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert heap_sort( [7, 1, 9, 5])==[1,5,7,9]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L636" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="636"></td>
          <td id="LC636" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def Check_Solution(a,b,c): <span class="pl-cce">\r\n</span>    if (a == c): <span class="pl-cce">\r\n</span>        return (<span class="pl-cce">\&quot;</span>Yes<span class="pl-cce">\&quot;</span>); <span class="pl-cce">\r\n</span>    else: <span class="pl-cce">\r\n</span>        return (<span class="pl-cce">\&quot;</span>No<span class="pl-cce">\&quot;</span>); <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">636</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert Check_Solution(2,0,2) == <span class="pl-cce">\&quot;</span>Yes<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Check_Solution(2,-5,2) == <span class="pl-cce">\&quot;</span>Yes<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Check_Solution(1,2,3) == <span class="pl-cce">\&quot;</span>No<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L637" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="637"></td>
          <td id="LC637" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check whether the given amount has no profit and no loss<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def noprofit_noloss(actual_cost,sale_amount): <span class="pl-cce">\r\n</span>  if(sale_amount == actual_cost):<span class="pl-cce">\r\n</span>    return True<span class="pl-cce">\r\n</span>  else:<span class="pl-cce">\r\n</span>    return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">637</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert noprofit_noloss(1500,1200)==False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert noprofit_noloss(100,100)==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert noprofit_noloss(2000,5000)==False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L638" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="638"></td>
          <td id="LC638" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to calculate wind chill index.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math<span class="pl-cce">\r\n</span>def wind_chill(v,t):<span class="pl-cce">\r\n</span> windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)<span class="pl-cce">\r\n</span> return int(round(windchill, 0))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">638</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert wind_chill(120,35)==40<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert wind_chill(40,70)==86<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert wind_chill(10,100)==116<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L639" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="639"></td>
          <td id="LC639" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sample_nam(sample_names):<span class="pl-cce">\r\n</span>  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))<span class="pl-cce">\r\n</span>  return len(&#39;&#39;.join(sample_names))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">639</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sample_nam([&#39;sally&#39;, &#39;Dylan&#39;, &#39;rebecca&#39;, &#39;Diana&#39;, &#39;Joanne&#39;, &#39;keith&#39;])==16<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sample_nam([<span class="pl-cce">\&quot;</span>php<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>res<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>Python<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>abcd<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>Java<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>aaa<span class="pl-cce">\&quot;</span>])==10<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sample_nam([<span class="pl-cce">\&quot;</span>abcd<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>Python<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>abba<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>aba<span class="pl-cce">\&quot;</span>])==6<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L640" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="640"></td>
          <td id="LC640" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to remove the parenthesis area in a string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def remove_parenthesis(items):<span class="pl-cce">\r\n</span> for item in items:<span class="pl-cce">\r\n</span>    return (re.sub(r<span class="pl-cce">\&quot;</span> ?<span class="pl-cce">\\</span>([^)]+<span class="pl-cce">\\</span>)<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;\&quot;</span>, item))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">640</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_parenthesis([<span class="pl-cce">\&quot;</span>python (chrome)<span class="pl-cce">\&quot;</span>])==(<span class="pl-cce">\&quot;</span>python<span class="pl-cce">\&quot;</span>)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_parenthesis([<span class="pl-cce">\&quot;</span>string(.abc)<span class="pl-cce">\&quot;</span>])==(<span class="pl-cce">\&quot;</span>string<span class="pl-cce">\&quot;</span>)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_parenthesis([<span class="pl-cce">\&quot;</span>alpha(num)<span class="pl-cce">\&quot;</span>])==(<span class="pl-cce">\&quot;</span>alpha<span class="pl-cce">\&quot;</span>)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L641" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="641"></td>
          <td id="LC641" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the nth nonagonal number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def is_nonagonal(n): <span class="pl-cce">\r\n\t</span>return int(n * (7 * n - 5) / 2) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">641</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert is_nonagonal(10) == 325<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_nonagonal(15) == 750<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_nonagonal(18) == 1089<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L642" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="642"></td>
          <td id="LC642" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to remove similar rows from the given tuple matrix.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def remove_similar_row(test_list):<span class="pl-cce">\r\n</span>  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">642</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((4, 4), (6, 8)), ((5, 4), (6, 7))}<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L643" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="643"></td>
          <td id="LC643" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function that matches a word containing &#39;z&#39;, not at the start or end of the word.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def text_match_wordz_middle(text):<span class="pl-cce">\r\n</span>        patterns = &#39;<span class="pl-cce">\\</span>Bz<span class="pl-cce">\\</span>B&#39;<span class="pl-cce">\r\n</span>        if re.search(patterns,  text):<span class="pl-cce">\r\n</span>                return &#39;Found a match!&#39;<span class="pl-cce">\r\n</span>        else:<span class="pl-cce">\r\n</span>                return(&#39;Not matched!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">643</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match_wordz_middle(<span class="pl-cce">\&quot;</span>pythonzabc.<span class="pl-cce">\&quot;</span>)==(&#39;Found a match!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match_wordz_middle(<span class="pl-cce">\&quot;</span>xyzabc.<span class="pl-cce">\&quot;</span>)==(&#39;Found a match!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match_wordz_middle(<span class="pl-cce">\&quot;</span>  lang  .<span class="pl-cce">\&quot;</span>)==(&#39;Not matched!&#39;)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L644" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="644"></td>
          <td id="LC644" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to reverse an array upto a given position.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def reverse_Array_Upto_K(input, k): <span class="pl-cce">\r\n</span>  return (input[k-1::-1] + input[k:]) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">644</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L645" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="645"></td>
          <td id="LC645" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the product of it<span class="pl-cce">\u2019</span>s kth index in the given tuples.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def get_product(val) : <span class="pl-cce">\r\n\t</span>res = 1<span class="pl-cce">\r\n\t</span>for ele in val: <span class="pl-cce">\r\n\t\t</span>res *= ele <span class="pl-cce">\r\n\t</span>return res <span class="pl-cce">\r\n</span>def find_k_product(test_list, K):<span class="pl-cce">\r\n</span>  res = get_product([sub[K] for sub in test_list])<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">645</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L646" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="646"></td>
          <td id="LC646" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count number of cubes of size k in a cube of size n.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def No_of_cubes(N,K):<span class="pl-cce">\r\n</span>    No = 0<span class="pl-cce">\r\n</span>    No = (N - K + 1)<span class="pl-cce">\r\n</span>    No = pow(No, 3)<span class="pl-cce">\r\n</span>    return No<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">646</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert No_of_cubes(2,1) == 8<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert No_of_cubes(5,2) == 64<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert No_of_cubes(1,1) == 1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L647" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="647"></td>
          <td id="LC647" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to split a string at uppercase letters.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def split_upperstring(text):<span class="pl-cce">\r\n</span> return (re.findall(&#39;[A-Z][^A-Z]*&#39;, text))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">647</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert split_upperstring(<span class="pl-cce">\&quot;</span>PythonProgramLanguage<span class="pl-cce">\&quot;</span>)==[&#39;Python&#39;,&#39;Program&#39;,&#39;Language&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert split_upperstring(<span class="pl-cce">\&quot;</span>PythonProgram<span class="pl-cce">\&quot;</span>)==[&#39;Python&#39;,&#39;Program&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert split_upperstring(<span class="pl-cce">\&quot;</span>ProgrammingLanguage<span class="pl-cce">\&quot;</span>)==[&#39;Programming&#39;,&#39;Language&#39;]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L648" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="648"></td>
          <td id="LC648" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from itertools import zip_longest, chain, tee<span class="pl-cce">\r\n</span>def exchange_elements(lst):<span class="pl-cce">\r\n</span>    lst1, lst2 = tee(iter(lst), 2)<span class="pl-cce">\r\n</span>    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">648</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert exchange_elements([5,6,7,8,9,10])==[6,5,8,7,10,9] <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert exchange_elements([25,35,45,55,75,95])==[35,25,55,45,95,75] <span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L649" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="649"></td>
          <td id="LC649" class="blob-code blob-code-inner js-file-line">{&quot;text&quot;: &quot;Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.&quot;, &quot;code&quot;: &quot;def sum_Range_list(nums, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += nums[i]                                                                                                                                                                                                  \r\n    return sum_range   &quot;, &quot;task_id&quot;: 649, &quot;test_setup_code&quot;: &quot;&quot;, &quot;test_list&quot;: [&quot;assert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29&quot;, &quot;assert sum_Range_list([1,2,3,4,5],1,2) == 5&quot;, &quot;assert sum_Range_list([1,0,1,2,5,6],4,5) == 11&quot;], &quot;challenge_test_list&quot;: []}</td>
        </tr>
        <tr>
          <td id="L650" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="650"></td>
          <td id="LC650" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether the given two arrays are equal or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def are_Equal(arr1,arr2,n,m):<span class="pl-cce">\r\n</span>    if (n != m):<span class="pl-cce">\r\n</span>        return False<span class="pl-cce">\r\n</span>    arr1.sort()<span class="pl-cce">\r\n</span>    arr2.sort()<span class="pl-cce">\r\n</span>    for i in range(0,n - 1):<span class="pl-cce">\r\n</span>        if (arr1[i] != arr2[i]):<span class="pl-cce">\r\n</span>            return False<span class="pl-cce">\r\n</span>    return True<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">650</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert are_Equal([1,2,3],[3,2,1],3,3) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert are_Equal([1,1,1],[2,2,2],3,3) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert are_Equal([8,9],[4,5,6],2,3) == False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L651" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="651"></td>
          <td id="LC651" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check if one tuple is a subset of another tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_subset(test_tup1, test_tup2):<span class="pl-cce">\r\n</span>  res = set(test_tup2).issubset(test_tup1)<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">651</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_subset((10, 4, 5, 6), (5, 10)) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_subset((1, 2, 3, 4), (5, 6)) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_subset((7, 8, 9, 10), (10, 8)) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L652" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="652"></td>
          <td id="LC652" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def matrix_to_list(test_list):<span class="pl-cce">\r\n</span>  temp = [ele for sub in test_list for ele in sub]<span class="pl-cce">\r\n</span>  res = list(zip(*temp))<span class="pl-cce">\r\n</span>  return (str(res))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">652</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == &#39;[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == &#39;[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == &#39;[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L653" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="653"></td>
          <td id="LC653" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from collections import defaultdict<span class="pl-cce">\r\n</span>def grouping_dictionary(l):<span class="pl-cce">\r\n</span>    d = defaultdict(list)<span class="pl-cce">\r\n</span>    for k, v in l:<span class="pl-cce">\r\n</span>        d[k].append(v)<span class="pl-cce">\r\n</span>    return d<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">653</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert grouping_dictionary([(&#39;yellow&#39;, 1), (&#39;blue&#39;, 2), (&#39;yellow&#39;, 3), (&#39;blue&#39;, 4), (&#39;red&#39;, 1)])== ({&#39;yellow&#39;: [1, 3], &#39;blue&#39;: [2, 4], &#39;red&#39;: [1]})<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert grouping_dictionary([(&#39;yellow&#39;, 10), (&#39;blue&#39;, 20), (&#39;yellow&#39;, 30), (&#39;blue&#39;, 40), (&#39;red&#39;, 10)])== ({&#39;yellow&#39;: [10, 30], &#39;blue&#39;: [20, 40], &#39;red&#39;: [10]})<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert grouping_dictionary([(&#39;yellow&#39;, 15), (&#39;blue&#39;, 25), (&#39;yellow&#39;, 35), (&#39;blue&#39;, 45), (&#39;red&#39;, 15)])== ({&#39;yellow&#39;: [15, 35], &#39;blue&#39;: [25, 45], &#39;red&#39;: [15]})<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L654" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="654"></td>
          <td id="LC654" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the perimeter of a rectangle.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def rectangle_perimeter(l,b):<span class="pl-cce">\r\n</span>  perimeter=2*(l+b)<span class="pl-cce">\r\n</span>  return perimeter<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">654</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert rectangle_perimeter(10,20)==60<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert rectangle_perimeter(10,5)==30<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert rectangle_perimeter(4,2)==12<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L655" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="655"></td>
          <td id="LC655" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the sum of fifth power of n natural numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def fifth_Power_Sum(n) : <span class="pl-cce">\r\n</span>    sm = 0 <span class="pl-cce">\r\n</span>    for i in range(1,n+1) : <span class="pl-cce">\r\n</span>        sm = sm + (i*i*i*i*i) <span class="pl-cce">\r\n</span>    return sm <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">655</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert fifth_Power_Sum(2) == 33<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert fifth_Power_Sum(4) == 1300<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert fifth_Power_Sum(3) == 276<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L656" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="656"></td>
          <td id="LC656" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the minimum sum of absolute differences of two arrays.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_Min_Sum(a,b,n): <span class="pl-cce">\r\n</span>    a.sort() <span class="pl-cce">\r\n</span>    b.sort() <span class="pl-cce">\r\n</span>    sum = 0  <span class="pl-cce">\r\n</span>    for i in range(n): <span class="pl-cce">\r\n</span>        sum = sum + abs(a[i] - b[i]) <span class="pl-cce">\r\n</span>    return sum<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">656</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Min_Sum([3,2,1],[2,1,3],3) == 0<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Min_Sum([1,2,3],[4,5,6],3) == 9<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Min_Sum([4,1,8,7],[2,3,6,5],4) == 6<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L657" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="657"></td>
          <td id="LC657" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the first digit in factorial of a given number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math <span class="pl-cce">\r\n</span>def first_Digit(n) : <span class="pl-cce">\r\n</span>    fact = 1<span class="pl-cce">\r\n</span>    for i in range(2,n + 1) : <span class="pl-cce">\r\n</span>        fact = fact * i <span class="pl-cce">\r\n</span>        while (fact % 10 == 0) :  <span class="pl-cce">\r\n</span>            fact = int(fact / 10) <span class="pl-cce">\r\n</span>    while (fact &gt;= 10) : <span class="pl-cce">\r\n</span>        fact = int(fact / 10) <span class="pl-cce">\r\n</span>    return math.floor(fact) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">657</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert first_Digit(5) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert first_Digit(10) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert first_Digit(7) == 5<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L658" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="658"></td>
          <td id="LC658" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the item with maximum occurrences in a given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def max_occurrences(list1):<span class="pl-cce">\r\n</span>    max_val = 0<span class="pl-cce">\r\n</span>    result = list1[0] <span class="pl-cce">\r\n</span>    for i in list1:<span class="pl-cce">\r\n</span>        occu = list1.count(i)<span class="pl-cce">\r\n</span>        if occu &gt; max_val:<span class="pl-cce">\r\n</span>            max_val = occu<span class="pl-cce">\r\n</span>            result = i <span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">658</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L659" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="659"></td>
          <td id="LC659" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to print duplicants from a list of integers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def Repeat(x): <span class="pl-cce">\r\n</span>    _size = len(x) <span class="pl-cce">\r\n</span>    repeated = [] <span class="pl-cce">\r\n</span>    for i in range(_size): <span class="pl-cce">\r\n</span>        k = i + 1<span class="pl-cce">\r\n</span>        for j in range(k, _size): <span class="pl-cce">\r\n</span>            if x[i] == x[j] and x[i] not in repeated: <span class="pl-cce">\r\n</span>                repeated.append(x[i]) <span class="pl-cce">\r\n</span>    return repeated <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">659</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Repeat([-1, 1, -1, 8]) == [-1]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Repeat([1, 2, 3, 1, 2,]) == [1, 2]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L660" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="660"></td>
          <td id="LC660" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to choose points from two ranges such that no point lies in both the ranges.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_Points(l1,r1,l2,r2): <span class="pl-cce">\r\n</span>    x = min(l1,l2) if (l1 != l2) else -1<span class="pl-cce">\r\n</span>    y = max(r1,r2) if (r1 != r2) else -1<span class="pl-cce">\r\n</span>    return (x,y)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">660</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Points(5,10,1,5) == (1,10)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Points(3,5,7,9) == (3,9)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Points(1,5,2,8) == (1,8)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L661" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="661"></td>
          <td id="LC661" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the maximum sum that can be formed which has no three consecutive elements present.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def max_sum_of_three_consecutive(arr, n): <span class="pl-cce">\r\n\t</span>sum = [0 for k in range(n)] <span class="pl-cce">\r\n\t</span>if n &gt;= 1: <span class="pl-cce">\r\n\t\t</span>sum[0] = arr[0] <span class="pl-cce">\r\n\t</span>if n &gt;= 2: <span class="pl-cce">\r\n\t\t</span>sum[1] = arr[0] + arr[1] <span class="pl-cce">\r\n\t</span>if n &gt; 2: <span class="pl-cce">\r\n\t\t</span>sum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) <span class="pl-cce">\r\n\t</span>for i in range(3, n): <span class="pl-cce">\r\n\t\t</span>sum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) <span class="pl-cce">\r\n\t</span>return sum[n-1]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">661</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) == 5013<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L662" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="662"></td>
          <td id="LC662" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to sort a list in a dictionary.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sorted_dict(dict1):<span class="pl-cce">\r\n</span>  sorted_dict = {x: sorted(y) for x, y in dict1.items()}<span class="pl-cce">\r\n</span>  return sorted_dict<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">662</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sorted_dict({&#39;n1&#39;: [2, 3, 1], &#39;n2&#39;: [5, 1, 2], &#39;n3&#39;: [3, 2, 4]})=={&#39;n1&#39;: [1, 2, 3], &#39;n2&#39;: [1, 2, 5], &#39;n3&#39;: [2, 3, 4]}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sorted_dict({&#39;n1&#39;: [25,37,41], &#39;n2&#39;: [41,54,63], &#39;n3&#39;: [29,38,93]})=={&#39;n1&#39;: [25, 37, 41], &#39;n2&#39;: [41, 54, 63], &#39;n3&#39;: [29, 38, 93]}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sorted_dict({&#39;n1&#39;: [58,44,56], &#39;n2&#39;: [91,34,58], &#39;n3&#39;: [100,200,300]})=={&#39;n1&#39;: [44, 56, 58], &#39;n2&#39;: [34, 58, 91], &#39;n3&#39;: [100, 200, 300]}<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L663" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="663"></td>
          <td id="LC663" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the largest possible value of k such that k modulo x is y.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import sys <span class="pl-cce">\r\n</span>def find_max_val(n, x, y): <span class="pl-cce">\r\n\t</span>ans = -sys.maxsize <span class="pl-cce">\r\n\t</span>for k in range(n + 1): <span class="pl-cce">\r\n\t\t</span>if (k % x == y): <span class="pl-cce">\r\n\t\t\t</span>ans = max(ans, k) <span class="pl-cce">\r\n\t</span>return (ans if (ans &gt;= 0 and<span class="pl-cce">\r\n\t\t\t\t\t</span>ans &lt;= n) else -1) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">663</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_max_val(15, 10, 5) == 15<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_max_val(187, 10, 5) == 185<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_max_val(16, 11, 1) == 12<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L664" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="664"></td>
          <td id="LC664" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the average of even numbers till a given even number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def average_Even(n) : <span class="pl-cce">\r\n</span>    if (n% 2!= 0) : <span class="pl-cce">\r\n</span>        return (<span class="pl-cce">\&quot;</span>Invalid Input<span class="pl-cce">\&quot;</span>) <span class="pl-cce">\r\n</span>        return -1  <span class="pl-cce">\r\n</span>    sm = 0<span class="pl-cce">\r\n</span>    count = 0<span class="pl-cce">\r\n</span>    while (n&gt;= 2) : <span class="pl-cce">\r\n</span>        count = count+1<span class="pl-cce">\r\n</span>        sm = sm+n <span class="pl-cce">\r\n</span>        n = n-2<span class="pl-cce">\r\n</span>    return sm // count <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">664</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert average_Even(2) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert average_Even(4) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert average_Even(100) == 51<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L665" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="665"></td>
          <td id="LC665" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to shift first element to the end of given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def move_last(num_list):<span class="pl-cce">\r\n</span>    a = [num_list[0] for i in range(num_list.count(num_list[0]))]<span class="pl-cce">\r\n</span>    x = [ i for i in num_list if i != num_list[0]]<span class="pl-cce">\r\n</span>    x.extend(a)<span class="pl-cce">\r\n</span>    return (x)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">665</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert move_last([1,2,3,4]) == [2,3,4,1]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert move_last([5,4,3,2,1]) == [4,3,2,1,5]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L666" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="666"></td>
          <td id="LC666" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to count occurrence of a character in a string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_char(string,char):<span class="pl-cce">\r\n</span> count = 0<span class="pl-cce">\r\n</span> for i in range(len(string)):<span class="pl-cce">\r\n</span>    if(string[i] == char):<span class="pl-cce">\r\n</span>        count = count + 1<span class="pl-cce">\r\n</span> return count<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">666</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_char(<span class="pl-cce">\&quot;</span>Python<span class="pl-cce">\&quot;</span>,&#39;o&#39;)==1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_char(<span class="pl-cce">\&quot;</span>little<span class="pl-cce">\&quot;</span>,&#39;t&#39;)==2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_char(<span class="pl-cce">\&quot;</span>assert<span class="pl-cce">\&quot;</span>,&#39;s&#39;)==2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L667" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="667"></td>
          <td id="LC667" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count number of vowels in the string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def Check_Vow(string, vowels): <span class="pl-cce">\r\n</span>    final = [each for each in string if each in vowels] <span class="pl-cce">\r\n</span>    return(len(final)) <span class="pl-cce">\r\n</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">667</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert Check_Vow(&#39;corner&#39;,&#39;AaEeIiOoUu&#39;) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Check_Vow(&#39;valid&#39;,&#39;AaEeIiOoUu&#39;) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Check_Vow(&#39;true&#39;,&#39;AaEeIiOoUu&#39;) ==2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L668" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="668"></td>
          <td id="LC668" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to replace multiple occurence of character by single.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re <span class="pl-cce">\r\n</span>def replace(string, char): <span class="pl-cce">\r\n</span>    pattern = char + &#39;{2,}&#39;<span class="pl-cce">\r\n</span>    string = re.sub(pattern, char, string) <span class="pl-cce">\r\n</span>    return string <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">668</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert replace(&#39;peep&#39;,&#39;e&#39;) == &#39;pep&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert replace(&#39;Greek&#39;,&#39;e&#39;) == &#39;Grek&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert replace(&#39;Moon&#39;,&#39;o&#39;) == &#39;Mon&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L669" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="669"></td>
          <td id="LC669" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check whether the given ip address is valid or not using regex.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re <span class="pl-cce">\r\n</span>regex = &#39;&#39;&#39;^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)<span class="pl-cce">\\</span>.( <span class="pl-cce">\r\n\t\t\t</span>25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)<span class="pl-cce">\\</span>.( <span class="pl-cce">\r\n\t\t\t</span>25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)<span class="pl-cce">\\</span>.( <span class="pl-cce">\r\n\t\t\t</span>25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$&#39;&#39;&#39;<span class="pl-cce">\r\n</span>def check_IP(Ip): <span class="pl-cce">\r\n\t</span>if(re.search(regex, Ip)): <span class="pl-cce">\r\n\t\t</span>return (<span class="pl-cce">\&quot;</span>Valid IP address<span class="pl-cce">\&quot;</span>) <span class="pl-cce">\r\n\t</span>else: <span class="pl-cce">\r\n\t\t</span>return (<span class="pl-cce">\&quot;</span>Invalid IP address<span class="pl-cce">\&quot;</span>) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">669</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_IP(<span class="pl-cce">\&quot;</span>192.168.0.1<span class="pl-cce">\&quot;</span>) == &#39;Valid IP address&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_IP(<span class="pl-cce">\&quot;</span>110.234.52.124<span class="pl-cce">\&quot;</span>) == &#39;Valid IP address&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_IP(<span class="pl-cce">\&quot;</span>366.1.2.2<span class="pl-cce">\&quot;</span>) == &#39;Invalid IP address&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L670" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="670"></td>
          <td id="LC670" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether a sequence of numbers has a decreasing trend or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def decreasing_trend(nums):<span class="pl-cce">\r\n</span>    if (sorted(nums)== nums):<span class="pl-cce">\r\n</span>        return True<span class="pl-cce">\r\n</span>    else:<span class="pl-cce">\r\n</span>        return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">670</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert decreasing_trend([-4,-3,-2,-1]) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert decreasing_trend([1,2,3]) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert decreasing_trend([3,2,1]) == False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L671" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="671"></td>
          <td id="LC671" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to set the right most unset bit.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math <span class="pl-cce">\r\n</span>def get_Pos_Of_Right_most_Set_Bit(n): <span class="pl-cce">\r\n</span>    return int(math.log2(n&amp;-n)+1)   <span class="pl-cce">\r\n</span>def set_Right_most_Unset_Bit(n): <span class="pl-cce">\r\n</span>    if (n == 0): <span class="pl-cce">\r\n</span>        return 1<span class="pl-cce">\r\n</span>    if ((n &amp; (n + 1)) == 0):     <span class="pl-cce">\r\n</span>        return n <span class="pl-cce">\r\n</span>    pos = get_Pos_Of_Right_most_Set_Bit(~n)      <span class="pl-cce">\r\n</span>    return ((1 &lt;&lt; (pos - 1)) | n) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">671</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert set_Right_most_Unset_Bit(21) == 23<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert set_Right_most_Unset_Bit(11) == 15<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert set_Right_most_Unset_Bit(15) == 15<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L672" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="672"></td>
          <td id="LC672" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find maximum of three numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def max_of_three(num1,num2,num3): <span class="pl-cce">\r\n</span>    if (num1 &gt;= num2) and (num1 &gt;= num3):<span class="pl-cce">\r\n</span>       lnum = num1<span class="pl-cce">\r\n</span>    elif (num2 &gt;= num1) and (num2 &gt;= num3):<span class="pl-cce">\r\n</span>       lnum = num2<span class="pl-cce">\r\n</span>    else:<span class="pl-cce">\r\n</span>       lnum = num3<span class="pl-cce">\r\n</span>    return lnum<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">672</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert max_of_three(10,20,30)==30<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_of_three(55,47,39)==55<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_of_three(10,49,30)==49<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L673" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="673"></td>
          <td id="LC673" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to convert a list of multiple integers into a single integer.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def convert(list): <span class="pl-cce">\r\n</span>    s = [str(i) for i in list] <span class="pl-cce">\r\n</span>    res = int(<span class="pl-cce">\&quot;\&quot;</span>.join(s))  <span class="pl-cce">\r\n</span>    return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">673</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert convert([1,2,3]) == 123<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert convert([4,5,6]) == 456<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert convert([7,8,9]) == 789<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L674" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="674"></td>
          <td id="LC674" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to remove duplicate words from a given string using collections module.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from collections import OrderedDict<span class="pl-cce">\r\n</span>def remove_duplicate(string):<span class="pl-cce">\r\n</span>  result = &#39; &#39;.join(OrderedDict((w,w) for w in string.split()).keys())<span class="pl-cce">\r\n</span>  return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">674</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_duplicate(<span class="pl-cce">\&quot;</span>Python Exercises Practice Solution Exercises<span class="pl-cce">\&quot;</span>)==(<span class="pl-cce">\&quot;</span>Python Exercises Practice Solution<span class="pl-cce">\&quot;</span>)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_duplicate(<span class="pl-cce">\&quot;</span>Python Exercises Practice Solution Python<span class="pl-cce">\&quot;</span>)==(<span class="pl-cce">\&quot;</span>Python Exercises Practice Solution<span class="pl-cce">\&quot;</span>)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_duplicate(<span class="pl-cce">\&quot;</span>Python Exercises Practice Solution Practice<span class="pl-cce">\&quot;</span>)==(<span class="pl-cce">\&quot;</span>Python Exercises Practice Solution<span class="pl-cce">\&quot;</span>)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L675" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="675"></td>
          <td id="LC675" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to add two integers. however, if the sum is between the given range it will return 20.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sum_nums(x, y,m,n):<span class="pl-cce">\r\n</span>    sum_nums= x + y<span class="pl-cce">\r\n</span>    if sum_nums in range(m, n):<span class="pl-cce">\r\n</span>        return 20<span class="pl-cce">\r\n</span>    else:<span class="pl-cce">\r\n</span>        return sum_nums<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">675</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_nums(2,10,11,20)==20<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_nums(15,17,1,10)==32<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_nums(10,15,5,30)==20<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L676" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="676"></td>
          <td id="LC676" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to remove everything except alphanumeric characters from the given string by using regex.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def remove_extra_char(text1):<span class="pl-cce">\r\n</span>  pattern = re.compile(&#39;[<span class="pl-cce">\\</span>W_]+&#39;)<span class="pl-cce">\r\n</span>  return (pattern.sub(&#39;&#39;, text1))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">676</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_extra_char(&#39;**//Google Android// - 12. &#39;) == &#39;GoogleAndroid12&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_extra_char(&#39;****//Google Flutter//*** - 36. &#39;) == &#39;GoogleFlutter36&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_extra_char(&#39;**//Google Firebase// - 478. &#39;) == &#39;GoogleFirebase478&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L677" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="677"></td>
          <td id="LC677" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check if the triangle is valid or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def validity_triangle(a,b,c):<span class="pl-cce">\r\n</span> total = a + b + c<span class="pl-cce">\r\n</span> if total == 180:<span class="pl-cce">\r\n</span>    return True<span class="pl-cce">\r\n</span> else:<span class="pl-cce">\r\n</span>    return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">677</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert validity_triangle(60,50,90)==False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert validity_triangle(45,75,60)==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert validity_triangle(30,50,100)==True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L678" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="678"></td>
          <td id="LC678" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to remove spaces from a given string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def remove_spaces(str1):<span class="pl-cce">\r\n</span>  str1 = str1.replace(&#39; &#39;,&#39;&#39;)<span class="pl-cce">\r\n</span>  return str1<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">678</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_spaces(<span class="pl-cce">\&quot;</span>a b c<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>abc<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_spaces(<span class="pl-cce">\&quot;</span>1 2 3<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>123<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_spaces(<span class="pl-cce">\&quot;</span> b c<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>bc<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L679" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="679"></td>
          <td id="LC679" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to access dictionary key<span class="pl-cce">\u2019</span>s element by index.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def access_key(ditionary,key):<span class="pl-cce">\r\n</span>  return list(ditionary)[key]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">679</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert access_key({&#39;physics&#39;: 80, &#39;math&#39;: 90, &#39;chemistry&#39;: 86},0)== &#39;physics&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert access_key({&#39;python&#39;:10, &#39;java&#39;: 20, &#39;C++&#39;:30},2)== &#39;C++&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert access_key({&#39;program&#39;:15,&#39;computer&#39;:45},1)== &#39;computer&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L680" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="680"></td>
          <td id="LC680" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether a sequence of numbers has an increasing trend or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def increasing_trend(nums):<span class="pl-cce">\r\n</span>    if (sorted(nums)== nums):<span class="pl-cce">\r\n</span>        return True<span class="pl-cce">\r\n</span>    else:<span class="pl-cce">\r\n</span>        return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">680</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert increasing_trend([1,2,3,4]) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert increasing_trend([4,3,2,1]) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert increasing_trend([0,1,4,9]) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L681" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="681"></td>
          <td id="LC681" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the smallest prime divisor of a number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def smallest_Divisor(n): <span class="pl-cce">\r\n</span>    if (n % 2 == 0): <span class="pl-cce">\r\n</span>        return 2; <span class="pl-cce">\r\n</span>    i = 3;  <span class="pl-cce">\r\n</span>    while (i*i &lt;= n): <span class="pl-cce">\r\n</span>        if (n % i == 0): <span class="pl-cce">\r\n</span>            return i; <span class="pl-cce">\r\n</span>        i += 2; <span class="pl-cce">\r\n</span>    return n; <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">681</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert smallest_Divisor(10) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert smallest_Divisor(25) == 5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert smallest_Divisor(31) == 31<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L682" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="682"></td>
          <td id="LC682" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to multiply two lists using map and lambda function.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def mul_list(nums1,nums2):<span class="pl-cce">\r\n</span>  result = map(lambda x, y: x * y, nums1, nums2)<span class="pl-cce">\r\n</span>  return list(result)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">682</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert mul_list([1, 2, 3],[4,5,6])==[4,10,18]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert mul_list([1,2],[3,4])==[3,8]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert mul_list([90,120],[50,70])==[4500,8400]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L683" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="683"></td>
          <td id="LC683" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether the given number can be represented by sum of two squares or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sum_Square(n) : <span class="pl-cce">\r\n</span>    i = 1 <span class="pl-cce">\r\n</span>    while i*i &lt;= n : <span class="pl-cce">\r\n</span>        j = 1<span class="pl-cce">\r\n</span>        while (j*j &lt;= n) : <span class="pl-cce">\r\n</span>            if (i*i+j*j == n) : <span class="pl-cce">\r\n</span>                return True<span class="pl-cce">\r\n</span>            j = j+1<span class="pl-cce">\r\n</span>        i = i+1     <span class="pl-cce">\r\n</span>    return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">683</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_Square(25) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_Square(24) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_Square(17) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L684" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="684"></td>
          <td id="LC684" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count occurences of a character in a repeated string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_Char(str,x): <span class="pl-cce">\r\n</span>    count = 0<span class="pl-cce">\r\n</span>    for i in range(len(str)):  <span class="pl-cce">\r\n</span>        if (str[i] == x) : <span class="pl-cce">\r\n</span>            count += 1<span class="pl-cce">\r\n</span>    n = 10<span class="pl-cce">\r\n</span>    repititions = n // len(str)  <span class="pl-cce">\r\n</span>    count = count * repititions  <span class="pl-cce">\r\n</span>    l = n % len(str)  <span class="pl-cce">\r\n</span>    for i in range(l): <span class="pl-cce">\r\n</span>        if (str[i] == x):  <span class="pl-cce">\r\n</span>            count += 1<span class="pl-cce">\r\n</span>    return count  <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">684</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Char(<span class="pl-cce">\&quot;</span>abcac<span class="pl-cce">\&quot;</span>,&#39;a&#39;) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Char(<span class="pl-cce">\&quot;</span>abca<span class="pl-cce">\&quot;</span>,&#39;c&#39;) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Char(<span class="pl-cce">\&quot;</span>aba<span class="pl-cce">\&quot;</span>,&#39;a&#39;) == 7<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L685" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="685"></td>
          <td id="LC685" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find sum of prime numbers between 1 to n.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sum_Of_Primes(n): <span class="pl-cce">\r\n</span>    prime = [True] * (n + 1)  <span class="pl-cce">\r\n</span>    p = 2<span class="pl-cce">\r\n</span>    while p * p &lt;= n: <span class="pl-cce">\r\n</span>        if prime[p] == True:  <span class="pl-cce">\r\n</span>            i = p * 2<span class="pl-cce">\r\n</span>            while i &lt;= n: <span class="pl-cce">\r\n</span>                prime[i] = False<span class="pl-cce">\r\n</span>                i += p <span class="pl-cce">\r\n</span>        p += 1    <span class="pl-cce">\r\n</span>    sum = 0<span class="pl-cce">\r\n</span>    for i in range (2,n + 1): <span class="pl-cce">\r\n</span>        if(prime[i]): <span class="pl-cce">\r\n</span>            sum += i <span class="pl-cce">\r\n</span>    return sum<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">685</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_Of_Primes(10) == 17<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_Of_Primes(20) == 77<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_Of_Primes(5) == 10<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L686" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="686"></td>
          <td id="LC686" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the frequency of each element in the given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from collections import defaultdict <span class="pl-cce">\r\n</span>def freq_element(test_tup):<span class="pl-cce">\r\n</span>  res = defaultdict(int)<span class="pl-cce">\r\n</span>  for ele in test_tup:<span class="pl-cce">\r\n</span>    res[ele] += 1<span class="pl-cce">\r\n</span>  return (str(dict(res))) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">686</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == &#39;{4: 3, 5: 4, 6: 2}&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == &#39;{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == &#39;{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L687" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="687"></td>
          <td id="LC687" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the greatest common divisor (gcd) of two integers by using recursion.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def recur_gcd(a, b):<span class="pl-cce">\r\n\t</span>low = min(a, b)<span class="pl-cce">\r\n\t</span>high = max(a, b)<span class="pl-cce">\r\n\t</span>if low == 0:<span class="pl-cce">\r\n\t\t</span>return high<span class="pl-cce">\r\n\t</span>elif low == 1:<span class="pl-cce">\r\n\t\t</span>return 1<span class="pl-cce">\r\n\t</span>else:<span class="pl-cce">\r\n\t\t</span>return recur_gcd(low, high%low)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">687</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert recur_gcd(12,14) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert recur_gcd(13,17) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert recur_gcd(9, 3) == 3<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L688" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="688"></td>
          <td id="LC688" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to get the length of a complex number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import cmath<span class="pl-cce">\r\n</span>def len_complex(a,b):<span class="pl-cce">\r\n</span>  cn=complex(a,b)<span class="pl-cce">\r\n</span>  length=abs(cn)<span class="pl-cce">\r\n</span>  return length<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">688</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert len_complex(3,4)==5.0<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert len_complex(9,10)==13.45362404707371<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert len_complex(7,9)==11.40175425099138<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L689" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="689"></td>
          <td id="LC689" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. &gt; indented block &gt; indented block<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def min_jumps(arr, n):<span class="pl-cce">\r\n\t</span>jumps = [0 for i in range(n)]<span class="pl-cce">\r\n\t</span>if (n == 0) or (arr[0] == 0):<span class="pl-cce">\r\n\t\t</span>return float(&#39;inf&#39;)<span class="pl-cce">\r\n\t</span>jumps[0] = 0<span class="pl-cce">\r\n\t</span>for i in range(1, n):<span class="pl-cce">\r\n\t\t</span>jumps[i] = float(&#39;inf&#39;)<span class="pl-cce">\r\n\t\t</span>for j in range(i):<span class="pl-cce">\r\n\t\t\t</span>if (i &lt;= j + arr[j]) and (jumps[j] != float(&#39;inf&#39;)):<span class="pl-cce">\r\n\t\t\t\t</span>jumps[i] = min(jumps[i], jumps[j] + 1)<span class="pl-cce">\r\n\t\t\t\t</span>break<span class="pl-cce">\r\n\t</span>return jumps[n-1]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">689</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L690" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="690"></td>
          <td id="LC690" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to multiply consecutive numbers of a given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def mul_consecutive_nums(nums):<span class="pl-cce">\r\n</span>    result = [b*a for a, b in zip(nums[:-1], nums[1:])]<span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">690</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L691" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="691"></td>
          <td id="LC691" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from itertools import groupby <span class="pl-cce">\r\n</span>def group_element(test_list):<span class="pl-cce">\r\n</span>  res = dict()<span class="pl-cce">\r\n</span>  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):<span class="pl-cce">\r\n</span>    res[key] = [ele[0] for ele in val] <span class="pl-cce">\r\n</span>  return (res)<span class="pl-cce">\r\n</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">691</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L692" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="692"></td>
          <td id="LC692" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the last two digits in factorial of a given number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def last_Two_Digits(N): <span class="pl-cce">\r\n</span>    if (N &gt;= 10): <span class="pl-cce">\r\n</span>        return<span class="pl-cce">\r\n</span>    fac = 1<span class="pl-cce">\r\n</span>    for i in range(1,N + 1): <span class="pl-cce">\r\n</span>        fac = (fac * i) % 100<span class="pl-cce">\r\n</span>    return (fac) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">692</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert last_Two_Digits(7) == 40<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert last_Two_Digits(5) == 20<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert last_Two_Digits(2) == 2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L693" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="693"></td>
          <td id="LC693" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to remove multiple spaces in a string by using regex.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def remove_multiple_spaces(text1):<span class="pl-cce">\r\n</span>  return (re.sub(&#39; +&#39;,&#39; &#39;,text1))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">693</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_multiple_spaces(&#39;Google      Assistant&#39;) == &#39;Google Assistant&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_multiple_spaces(&#39;Quad      Core&#39;) == &#39;Quad Core&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_multiple_spaces(&#39;ChromeCast      Built-in&#39;) == &#39;ChromeCast Built-in&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L694" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="694"></td>
          <td id="LC694" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to extract unique values from the given dictionary values.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def extract_unique(test_dict):<span class="pl-cce">\r\n</span>  res = list(sorted({ele for val in test_dict.values() for ele in val}))<span class="pl-cce">\r\n</span>  return res<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">694</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_unique({&#39;msm&#39; : [5, 6, 7, 8],&#39;is&#39; : [10, 11, 7, 5],&#39;best&#39; : [6, 12, 10, 8],&#39;for&#39; : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_unique({&#39;Built&#39; : [7, 1, 9, 4],&#39;for&#39; : [11, 21, 36, 14, 9],&#39;ISP&#39; : [4, 1, 21, 39, 47],&#39;TV&#39; : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_unique({&#39;F&#39; : [11, 13, 14, 17],&#39;A&#39; : [12, 11, 15, 18],&#39;N&#39; : [19, 21, 15, 36],&#39;G&#39; : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L695" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="695"></td>
          <td id="LC695" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_greater(test_tup1, test_tup2):<span class="pl-cce">\r\n</span>  res = all(x &lt; y for x, y in zip(test_tup1, test_tup2))<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">695</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_greater((10, 4, 5), (13, 5, 18)) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_greater((1, 2, 3), (2, 1, 4)) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_greater((4, 5, 6), (5, 6, 7)) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L696" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="696"></td>
          <td id="LC696" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to zip two given lists of lists.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def zip_list(list1,list2):  <span class="pl-cce">\r\n</span> result = list(map(list.__add__, list1, list2)) <span class="pl-cce">\r\n</span> return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">696</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert zip_list([[&#39;a&#39;,&#39;b&#39;],[&#39;c&#39;,&#39;d&#39;]] , [[&#39;e&#39;,&#39;f&#39;],[&#39;g&#39;,&#39;h&#39;]] )==[[&#39;a&#39;,&#39;b&#39;,&#39;e&#39;,&#39;f&#39;],[&#39;c&#39;,&#39;d&#39;,&#39;g&#39;,&#39;h&#39;]]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L697" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="697"></td>
          <td id="LC697" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find number of even elements in the given list using lambda function.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_even(array_nums):<span class="pl-cce">\r\n</span>   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))<span class="pl-cce">\r\n</span>   return count_even<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">697</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_even([10,15,14,13,-18,12,-20])==5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_even([1, 2, 4, 8, 9])==3<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L698" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="698"></td>
          <td id="LC698" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sort_dict_item(test_dict):<span class="pl-cce">\r\n</span>  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}<span class="pl-cce">\r\n</span>  return  (res) <span class="pl-cce">\r\n</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">698</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L699" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="699"></td>
          <td id="LC699" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the minimum number of swaps required to convert one binary string to another.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def min_Swaps(str1,str2) : <span class="pl-cce">\r\n</span>    count = 0<span class="pl-cce">\r\n</span>    for i in range(len(str1)) : <span class="pl-cce">\r\n</span>        if str1[i] != str2[i] : <span class="pl-cce">\r\n</span>            count += 1<span class="pl-cce">\r\n</span>    if count % 2 == 0 : <span class="pl-cce">\r\n</span>        return (count // 2) <span class="pl-cce">\r\n</span>    else : <span class="pl-cce">\r\n</span>        return (<span class="pl-cce">\&quot;</span>Not Possible<span class="pl-cce">\&quot;</span>) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">699</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert min_Swaps(<span class="pl-cce">\&quot;</span>1101<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>1110<span class="pl-cce">\&quot;</span>) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_Swaps(<span class="pl-cce">\&quot;</span>1111<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>0100<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>Not Possible<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_Swaps(<span class="pl-cce">\&quot;</span>1110000<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>0001101<span class="pl-cce">\&quot;</span>) == 3<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L700" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="700"></td>
          <td id="LC700" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to count the number of elements in a list which are within a specific range.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_range_in_list(li, min, max):<span class="pl-cce">\r\n\t</span>ctr = 0<span class="pl-cce">\r\n\t</span>for x in li:<span class="pl-cce">\r\n\t\t</span>if min &lt;= x &lt;= max:<span class="pl-cce">\r\n\t\t\t</span>ctr += 1<span class="pl-cce">\r\n\t</span>return ctr<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">700</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_range_in_list([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;],&#39;a&#39;,&#39;e&#39;)==5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_range_in_list([7,8,9,15,17,19,45],15,20)==3<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L701" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="701"></td>
          <td id="LC701" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the equilibrium index of the given array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def equilibrium_index(arr):<span class="pl-cce">\r\n</span>  total_sum = sum(arr)<span class="pl-cce">\r\n</span>  left_sum=0<span class="pl-cce">\r\n</span>  for i, num in enumerate(arr):<span class="pl-cce">\r\n</span>    total_sum -= num<span class="pl-cce">\r\n</span>    if left_sum == total_sum:<span class="pl-cce">\r\n</span>      return i<span class="pl-cce">\r\n</span>    left_sum += num<span class="pl-cce">\r\n</span>  return -1<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">701</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert equilibrium_index([1, 2, 3]) == -1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L702" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="702"></td>
          <td id="LC702" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the minimum number of elements that should be removed such that amax-amin&lt;=k.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_ind(key, i, n, <span class="pl-cce">\r\n\t\t\t</span>k, arr):<span class="pl-cce">\r\n\t</span>ind = -1<span class="pl-cce">\r\n\t</span>start = i + 1<span class="pl-cce">\r\n\t</span>end = n - 1;<span class="pl-cce">\r\n\t</span>while (start &lt; end):<span class="pl-cce">\r\n\t\t</span>mid = int(start +<span class="pl-cce">\r\n\t\t\t\t</span>(end - start) / 2)<span class="pl-cce">\r\n\t\t</span>if (arr[mid] - key &lt;= k):<span class="pl-cce">\r\n\t\t\t</span>ind = mid<span class="pl-cce">\r\n\t\t\t</span>start = mid + 1<span class="pl-cce">\r\n\t\t</span>else:<span class="pl-cce">\r\n\t\t\t</span>end = mid<span class="pl-cce">\r\n\t</span>return ind<span class="pl-cce">\r\n</span>def removals(arr, n, k):<span class="pl-cce">\r\n\t</span>ans = n - 1<span class="pl-cce">\r\n\t</span>arr.sort()<span class="pl-cce">\r\n\t</span>for i in range(0, n):<span class="pl-cce">\r\n\t\t</span>j = find_ind(arr[i], i, <span class="pl-cce">\r\n\t\t\t\t\t</span>n, k, arr)<span class="pl-cce">\r\n\t\t</span>if (j != -1):<span class="pl-cce">\r\n\t\t\t</span>ans = min(ans, n -<span class="pl-cce">\r\n\t\t\t\t\t\t</span>(j - i + 1))<span class="pl-cce">\r\n\t</span>return ans<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">702</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert removals([1, 5, 6, 2, 8], 5, 2) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert removals([1, 2, 3 ,4, 5, 6], 6, 3) == 2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L703" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="703"></td>
          <td id="LC703" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check whether the given key is present in the dictionary or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def is_key_present(d,x):<span class="pl-cce">\r\n</span>  if x in d:<span class="pl-cce">\r\n</span>    return True<span class="pl-cce">\r\n</span>  else:<span class="pl-cce">\r\n</span>     return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">703</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L704" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="704"></td>
          <td id="LC704" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to calculate the harmonic sum of n-1.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def harmonic_sum(n):<span class="pl-cce">\r\n</span>  if n &lt; 2:<span class="pl-cce">\r\n</span>    return 1<span class="pl-cce">\r\n</span>  else:<span class="pl-cce">\r\n</span>    return 1 / n + (harmonic_sum(n - 1))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">704</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert harmonic_sum(10)==2.9289682539682538<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert harmonic_sum(4)==2.083333333333333<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert harmonic_sum(7)==2.5928571428571425 <span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L705" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="705"></td>
          <td id="LC705" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to sort a list of lists by length and value.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sort_sublists(list1):<span class="pl-cce">\r\n</span>      list1.sort()  <span class="pl-cce">\r\n</span>      list1.sort(key=len)<span class="pl-cce">\r\n</span>      return  list1<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">705</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_sublists([[<span class="pl-cce">\&quot;</span>python<span class="pl-cce">\&quot;</span>],[<span class="pl-cce">\&quot;</span>java<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>C<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>C++<span class="pl-cce">\&quot;</span>],[<span class="pl-cce">\&quot;</span>DBMS<span class="pl-cce">\&quot;</span>],[<span class="pl-cce">\&quot;</span>SQL<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>HTML<span class="pl-cce">\&quot;</span>]])==[[&#39;DBMS&#39;], [&#39;python&#39;], [&#39;SQL&#39;, &#39;HTML&#39;], [&#39;java&#39;, &#39;C&#39;, &#39;C++&#39;]]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L706" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="706"></td>
          <td id="LC706" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find whether an array is subset of another array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def is_subset(arr1, m, arr2, n): <span class="pl-cce">\r\n\t</span>hashset = set() <span class="pl-cce">\r\n\t</span>for i in range(0, m): <span class="pl-cce">\r\n\t\t</span>hashset.add(arr1[i]) <span class="pl-cce">\r\n\t</span>for i in range(0, n): <span class="pl-cce">\r\n\t\t</span>if arr2[i] in hashset: <span class="pl-cce">\r\n\t\t\t</span>continue<span class="pl-cce">\r\n\t\t</span>else: <span class="pl-cce">\r\n\t\t\t</span>return False<span class="pl-cce">\r\n\t</span>return True<span class="pl-cce">\t\t</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">706</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L707" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="707"></td>
          <td id="LC707" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count the total set bits from 1 to n.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_Set_Bits(n) :  <span class="pl-cce">\r\n</span>    n += 1; <span class="pl-cce">\r\n</span>    powerOf2 = 2;   <span class="pl-cce">\r\n</span>    cnt = n // 2;  <span class="pl-cce">\r\n</span>    while (powerOf2 &lt;= n) : <span class="pl-cce">\r\n</span>        totalPairs = n // powerOf2;  <span class="pl-cce">\r\n</span>        cnt += (totalPairs // 2) * powerOf2;  <span class="pl-cce">\r\n</span>        if (totalPairs &amp; 1) : <span class="pl-cce">\r\n</span>            cnt += (n % powerOf2) <span class="pl-cce">\r\n</span>        else : <span class="pl-cce">\r\n</span>            cnt += 0<span class="pl-cce">\r\n</span>        powerOf2 &lt;&lt;= 1;    <span class="pl-cce">\r\n</span>    return cnt;  <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">707</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Set_Bits(16) == 33<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Set_Bits(2) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Set_Bits(14) == 28<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L708" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="708"></td>
          <td id="LC708" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to convert a string to a list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def Convert(string): <span class="pl-cce">\r\n</span>    li = list(string.split(<span class="pl-cce">\&quot;</span> <span class="pl-cce">\&quot;</span>)) <span class="pl-cce">\r\n</span>    return li <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">708</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert Convert(&#39;python program&#39;) == [&#39;python&#39;,&#39;program&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Convert(&#39;Data Analysis&#39;) ==[&#39;Data&#39;,&#39;Analysis&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Convert(&#39;Hadoop Training&#39;) == [&#39;Hadoop&#39;,&#39;Training&#39;]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L709" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="709"></td>
          <td id="LC709" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to count unique keys for each value present in the tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from collections import defaultdict <span class="pl-cce">\r\n</span>def get_unique(test_list):<span class="pl-cce">\r\n</span>  res = defaultdict(list)<span class="pl-cce">\r\n</span>  for sub in test_list:<span class="pl-cce">\r\n</span>    res[sub[1]].append(sub[0])<span class="pl-cce">\r\n</span>  res = dict(res)<span class="pl-cce">\r\n</span>  res_dict = dict()<span class="pl-cce">\r\n</span>  for key in res:<span class="pl-cce">\r\n</span>    res_dict[key] = len(list(set(res[key])))<span class="pl-cce">\r\n</span>  return (str(res_dict)) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">709</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == &#39;{4: 4, 2: 3, 1: 2}&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == &#39;{5: 4, 3: 3, 2: 2}&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == &#39;{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L710" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="710"></td>
          <td id="LC710" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to access the initial and last data of the given tuple record.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def front_and_rear(test_tup):<span class="pl-cce">\r\n</span>  res = (test_tup[0], test_tup[-1])<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">710</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert front_and_rear((1, 2, 3, 4, 5)) == (1, 5)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert front_and_rear((6, 7, 8, 9, 10)) == (6, 10)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L711" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="711"></td>
          <td id="LC711" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether the product of digits of a number at even and odd places is equal or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def product_Equal(n): <span class="pl-cce">\r\n</span>    if n &lt; 10: <span class="pl-cce">\r\n</span>        return False<span class="pl-cce">\r\n</span>    prodOdd = 1; prodEven = 1<span class="pl-cce">\r\n</span>    while n &gt; 0: <span class="pl-cce">\r\n</span>        digit = n % 10<span class="pl-cce">\r\n</span>        prodOdd *= digit <span class="pl-cce">\r\n</span>        n = n//10<span class="pl-cce">\r\n</span>        if n == 0: <span class="pl-cce">\r\n</span>            break; <span class="pl-cce">\r\n</span>        digit = n % 10<span class="pl-cce">\r\n</span>        prodEven *= digit <span class="pl-cce">\r\n</span>        n = n//10<span class="pl-cce">\r\n</span>    if prodOdd == prodEven: <span class="pl-cce">\r\n</span>        return True<span class="pl-cce">\r\n</span>    return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">711</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert product_Equal(2841) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert product_Equal(1234) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert product_Equal(1212) == False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L712" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="712"></td>
          <td id="LC712" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to remove duplicates from a list of lists.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import itertools<span class="pl-cce">\r\n</span>def remove_duplicate(list1):<span class="pl-cce">\r\n</span> list.sort(list1)<span class="pl-cce">\r\n</span> remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))<span class="pl-cce">\r\n</span> return remove_duplicate<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">712</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_duplicate([<span class="pl-cce">\&quot;</span>a<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>b<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>a<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>c<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>c<span class="pl-cce">\&quot;</span>] )==[<span class="pl-cce">\&quot;</span>a<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>b<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>c<span class="pl-cce">\&quot;</span>]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L713" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="713"></td>
          <td id="LC713" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check if the given tuple contains all valid values or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_valid(test_tup):<span class="pl-cce">\r\n</span>  res = not any(map(lambda ele: not ele, test_tup))<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">713</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_valid((True, True, True, True) ) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_valid((True, False, True, True) ) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_valid((True, True, True, True) ) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L714" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="714"></td>
          <td id="LC714" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count the number of distinct power of prime factor of given number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_Fac(n):  <span class="pl-cce">\r\n</span>    m = n <span class="pl-cce">\r\n</span>    count = 0<span class="pl-cce">\r\n</span>    i = 2<span class="pl-cce">\r\n</span>    while((i * i) &lt;= m): <span class="pl-cce">\r\n</span>        total = 0<span class="pl-cce">\r\n</span>        while (n % i == 0): <span class="pl-cce">\r\n</span>            n /= i <span class="pl-cce">\r\n</span>            total += 1 <span class="pl-cce">\r\n</span>        temp = 0<span class="pl-cce">\r\n</span>        j = 1<span class="pl-cce">\r\n</span>        while((temp + j) &lt;= total): <span class="pl-cce">\r\n</span>            temp += j <span class="pl-cce">\r\n</span>            count += 1<span class="pl-cce">\r\n</span>            j += 1 <span class="pl-cce">\r\n</span>        i += 1<span class="pl-cce">\r\n</span>    if (n != 1): <span class="pl-cce">\r\n</span>        count += 1 <span class="pl-cce">\r\n</span>    return count <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">714</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Fac(24) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Fac(12) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Fac(4) == 1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L715" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="715"></td>
          <td id="LC715" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to convert the given string of integers into a tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def str_to_tuple(test_str):<span class="pl-cce">\r\n</span>  res = tuple(map(int, test_str.split(&#39;, &#39;)))<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">715</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert str_to_tuple(<span class="pl-cce">\&quot;</span>1, -5, 4, 6, 7<span class="pl-cce">\&quot;</span>) == (1, -5, 4, 6, 7)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert str_to_tuple(<span class="pl-cce">\&quot;</span>1, 2, 3, 4, 5<span class="pl-cce">\&quot;</span>) == (1, 2, 3, 4, 5)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert str_to_tuple(<span class="pl-cce">\&quot;</span>4, 6, 9, 11, 13, 14<span class="pl-cce">\&quot;</span>) == (4, 6, 9, 11, 13, 14)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L716" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="716"></td>
          <td id="LC716" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the perimeter of a rombus.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def rombus_perimeter(a):<span class="pl-cce">\r\n</span>  perimeter=4*a<span class="pl-cce">\r\n</span>  return perimeter<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">716</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert rombus_perimeter(10)==40<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert rombus_perimeter(5)==20<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert rombus_perimeter(4)==16<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L717" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="717"></td>
          <td id="LC717" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to calculate the standard deviation.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math<span class="pl-cce">\r\n</span>import sys<span class="pl-cce">\r\n</span>def sd_calc(data):<span class="pl-cce">\r\n</span>    n = len(data)<span class="pl-cce">\r\n</span>    if n &lt;= 1:<span class="pl-cce">\r\n</span>        return 0.0<span class="pl-cce">\r\n</span>    mean, sd = avg_calc(data), 0.0<span class="pl-cce">\r\n</span>    for el in data:<span class="pl-cce">\r\n</span>        sd += (float(el) - mean)**2<span class="pl-cce">\r\n</span>    sd = math.sqrt(sd / float(n-1))<span class="pl-cce">\r\n</span>    return sd<span class="pl-cce">\r\n</span>def avg_calc(ls):<span class="pl-cce">\r\n</span>    n, mean = len(ls), 0.0<span class="pl-cce">\r\n</span>    if n &lt;= 1:<span class="pl-cce">\r\n</span>        return ls[0]<span class="pl-cce">\r\n</span>    for el in ls:<span class="pl-cce">\r\n</span>        mean = mean + float(el)<span class="pl-cce">\r\n</span>    mean = mean / float(n)<span class="pl-cce">\r\n</span>    return mean<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">717</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sd_calc([1,2,3,4,5,6,7])==2.160246899469287<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sd_calc([5,9,10,15,6,4])==4.070217029430577<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L718" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="718"></td>
          <td id="LC718" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to create a list taking alternate elements from another given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def alternate_elements(list1):<span class="pl-cce">\r\n</span>    result=[]<span class="pl-cce">\r\n</span>    for item in list1[::2]:<span class="pl-cce">\r\n</span>        result.append(item)<span class="pl-cce">\r\n</span>    return result <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">718</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert alternate_elements([<span class="pl-cce">\&quot;</span>red<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>black<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>white<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>green<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>orange<span class="pl-cce">\&quot;</span>])==[&#39;red&#39;, &#39;white&#39;, &#39;orange&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L719" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="719"></td>
          <td id="LC719" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function that matches a string that has an a followed by zero or more b&#39;s.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def text_match(text):<span class="pl-cce">\r\n</span>        patterns = &#39;ab*?&#39;<span class="pl-cce">\r\n</span>        if re.search(patterns,  text):<span class="pl-cce">\r\n</span>                return &#39;Found a match!&#39;<span class="pl-cce">\r\n</span>        else:<span class="pl-cce">\r\n</span>                return(&#39;Not matched!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">719</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match(<span class="pl-cce">\&quot;</span>ac<span class="pl-cce">\&quot;</span>)==(&#39;Found a match!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match(<span class="pl-cce">\&quot;</span>dc<span class="pl-cce">\&quot;</span>)==(&#39;Not matched!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match(<span class="pl-cce">\&quot;</span>abba<span class="pl-cce">\&quot;</span>)==(&#39;Found a match!&#39;)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L720" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="720"></td>
          <td id="LC720" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to add a dictionary to the tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def add_dict_to_tuple(test_tup, test_dict):<span class="pl-cce">\r\n</span>  test_tup = list(test_tup)<span class="pl-cce">\r\n</span>  test_tup.append(test_dict)<span class="pl-cce">\r\n</span>  test_tup = tuple(test_tup)<span class="pl-cce">\r\n</span>  return (test_tup) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">720</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert add_dict_to_tuple((4, 5, 6), {<span class="pl-cce">\&quot;</span>MSAM<span class="pl-cce">\&quot;</span> : 1, <span class="pl-cce">\&quot;</span>is<span class="pl-cce">\&quot;</span> : 2, <span class="pl-cce">\&quot;</span>best<span class="pl-cce">\&quot;</span> : 3} ) == (4, 5, 6, {&#39;MSAM&#39;: 1, &#39;is&#39;: 2, &#39;best&#39;: 3})<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert add_dict_to_tuple((1, 2, 3), {<span class="pl-cce">\&quot;</span>UTS<span class="pl-cce">\&quot;</span> : 2, <span class="pl-cce">\&quot;</span>is<span class="pl-cce">\&quot;</span> : 3, <span class="pl-cce">\&quot;</span>Worst<span class="pl-cce">\&quot;</span> : 4} ) == (1, 2, 3, {&#39;UTS&#39;: 2, &#39;is&#39;: 3, &#39;Worst&#39;: 4})<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert add_dict_to_tuple((8, 9, 10), {<span class="pl-cce">\&quot;</span>POS<span class="pl-cce">\&quot;</span> : 3, <span class="pl-cce">\&quot;</span>is<span class="pl-cce">\&quot;</span> : 4, <span class="pl-cce">\&quot;</span>Okay<span class="pl-cce">\&quot;</span> : 5} ) == (8, 9, 10, {&#39;POS&#39;: 3, &#39;is&#39;: 4, &#39;Okay&#39;: 5})<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L721" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="721"></td>
          <td id="LC721" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>M = 100<span class="pl-cce">\r\n</span>def maxAverageOfPath(cost, N): <span class="pl-cce">\r\n\t</span>dp = [[0 for i in range(N + 1)] for j in range(N + 1)] <span class="pl-cce">\r\n\t</span>dp[0][0] = cost[0][0] <span class="pl-cce">\r\n\t</span>for i in range(1, N): <span class="pl-cce">\r\n\t\t</span>dp[i][0] = dp[i - 1][0] + cost[i][0] <span class="pl-cce">\r\n\t</span>for j in range(1, N): <span class="pl-cce">\r\n\t\t</span>dp[0][j] = dp[0][j - 1] + cost[0][j] <span class="pl-cce">\r\n\t</span>for i in range(1, N): <span class="pl-cce">\r\n\t\t</span>for j in range(1, N): <span class="pl-cce">\r\n\t\t\t</span>dp[i][j] = max(dp[i - 1][j], <span class="pl-cce">\r\n\t\t\t\t\t\t</span>dp[i][j - 1]) + cost[i][j] <span class="pl-cce">\r\n\t</span>return dp[N - 1][N - 1] / (2 * N - 1)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">721</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 <span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L722" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="722"></td>
          <td id="LC722" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to filter the height and width of students which are stored in a dictionary.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def filter_data(students,h,w):<span class="pl-cce">\r\n</span>    result = {k: s for k, s in students.items() if s[0] &gt;=h and s[1] &gt;=w}<span class="pl-cce">\r\n</span>    return result    <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">722</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert filter_data({&#39;Cierra Vega&#39;: (6.2, 70), &#39;Alden Cantrell&#39;: (5.9, 65), &#39;Kierra Gentry&#39;: (6.0, 68), &#39;Pierre Cox&#39;: (5.8, 66)},6.0,70)=={&#39;Cierra Vega&#39;: (6.2, 70)}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert filter_data({&#39;Cierra Vega&#39;: (6.2, 70), &#39;Alden Cantrell&#39;: (5.9, 65), &#39;Kierra Gentry&#39;: (6.0, 68), &#39;Pierre Cox&#39;: (5.8, 66)},5.9,67)=={&#39;Cierra Vega&#39;: (6.2, 70),&#39;Kierra Gentry&#39;: (6.0, 68)}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert filter_data({&#39;Cierra Vega&#39;: (6.2, 70), &#39;Alden Cantrell&#39;: (5.9, 65), &#39;Kierra Gentry&#39;: (6.0, 68), &#39;Pierre Cox&#39;: (5.8, 66)},5.7,64)=={&#39;Cierra Vega&#39;: (6.2, 70),&#39;Alden Cantrell&#39;: (5.9, 65),&#39;Kierra Gentry&#39;: (6.0, 68),&#39;Pierre Cox&#39;: (5.8, 66)}<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L723" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="723"></td>
          <td id="LC723" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to count the same pair in two given lists using map function.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from operator import eq<span class="pl-cce">\r\n</span>def count_same_pair(nums1, nums2):<span class="pl-cce">\r\n</span>    result = sum(map(eq, nums1, nums2))<span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">723</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L724" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="724"></td>
          <td id="LC724" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to calculate the sum of all digits of the base to the specified power.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def power_base_sum(base, power):<span class="pl-cce">\r\n</span>    return sum([int(i) for i in str(pow(base, power))])<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">724</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert power_base_sum(2,100)==115<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert power_base_sum(8,10)==37<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert power_base_sum(8,15)==62<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L725" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="725"></td>
          <td id="LC725" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to extract values between quotation marks of the given string by using regex.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def extract_quotation(text1):<span class="pl-cce">\r\n</span>  return (re.findall(r&#39;<span class="pl-cce">\&quot;</span>(.*?)<span class="pl-cce">\&quot;</span>&#39;, text1))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">725</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_quotation(&#39;Cortex <span class="pl-cce">\&quot;</span>A53<span class="pl-cce">\&quot;</span> Based <span class="pl-cce">\&quot;</span>multi<span class="pl-cce">\&quot;</span> tasking <span class="pl-cce">\&quot;</span>Processor<span class="pl-cce">\&quot;</span>&#39;) == [&#39;A53&#39;, &#39;multi&#39;, &#39;Processor&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_quotation(&#39;Cast your <span class="pl-cce">\&quot;</span>favorite<span class="pl-cce">\&quot;</span> entertainment <span class="pl-cce">\&quot;</span>apps<span class="pl-cce">\&quot;</span>&#39;) == [&#39;favorite&#39;, &#39;apps&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_quotation(&#39;Watch content <span class="pl-cce">\&quot;</span>4k Ultra HD<span class="pl-cce">\&quot;</span> resolution with <span class="pl-cce">\&quot;</span>HDR 10<span class="pl-cce">\&quot;</span> Support&#39;) == [&#39;4k Ultra HD&#39;, &#39;HDR 10&#39;]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L726" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="726"></td>
          <td id="LC726" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to multiply the adjacent elements of the given tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def multiply_elements(test_tup):<span class="pl-cce">\r\n</span>  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">726</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L727" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="727"></td>
          <td id="LC727" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to remove all characters except letters and numbers using regex<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re <span class="pl-cce">\r\n</span>def remove_char(S):<span class="pl-cce">\r\n</span>  result = re.sub(&#39;[<span class="pl-cce">\\</span>W_]+&#39;, &#39;&#39;, S) <span class="pl-cce">\r\n</span>  return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">727</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_char(<span class="pl-cce">\&quot;</span>123abcjw:, .@! eiw<span class="pl-cce">\&quot;</span>) == &#39;123abcjweiw&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_char(<span class="pl-cce">\&quot;</span>Hello1234:, ! Howare33u<span class="pl-cce">\&quot;</span>) == &#39;Hello1234Howare33u&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_char(<span class="pl-cce">\&quot;</span>Cool543Triks@:, Make@987Trips<span class="pl-cce">\&quot;</span>) == &#39;Cool543TriksMake987Trips&#39; <span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L728" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="728"></td>
          <td id="LC728" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to sum elements in two lists.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sum_list(lst1,lst2):<span class="pl-cce">\r\n</span>  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] <span class="pl-cce">\r\n</span>  return res_list<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">728</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_list([10,20,30],[15,25,35])==[25,45,65]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_list([1,2,3],[5,6,7])==[6,8,10]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_list([15,20,30],[15,45,75])==[30,65,105]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L729" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="729"></td>
          <td id="LC729" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to add two lists using map and lambda function.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def add_list(nums1,nums2):<span class="pl-cce">\r\n</span>  result = map(lambda x, y: x + y, nums1, nums2)<span class="pl-cce">\r\n</span>  return list(result)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">729</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert add_list([1,2],[3,4])==[4,6]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert add_list([10,20],[50,70])==[60,90]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L730" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="730"></td>
          <td id="LC730" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to remove consecutive duplicates of a given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from itertools import groupby<span class="pl-cce">\r\n</span>def consecutive_duplicates(nums):<span class="pl-cce">\r\n</span>    return [key for key, group in groupby(nums)] <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">730</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert consecutive_duplicates([&#39;a&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;d&#39;])==[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L731" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="731"></td>
          <td id="LC731" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the lateral surface area of a cone.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math<span class="pl-cce">\r\n</span>def lateralsurface_cone(r,h):<span class="pl-cce">\r\n</span>  l = math.sqrt(r * r + h * h)<span class="pl-cce">\r\n</span>  LSA = math.pi * r  * l<span class="pl-cce">\r\n</span>  return LSA<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">731</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert lateralsurface_cone(5,12)==204.20352248333654<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert lateralsurface_cone(10,15)==566.3586699569488<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert lateralsurface_cone(19,17)==1521.8090132193388<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L732" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="732"></td>
          <td id="LC732" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to replace all occurrences of spaces, commas, or dots with a colon.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def replace_specialchar(text):<span class="pl-cce">\r\n</span> return (re.sub(<span class="pl-cce">\&quot;</span>[ ,.]<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>:<span class="pl-cce">\&quot;</span>, text))<span class="pl-cce">\r</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">732</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert replace_specialchar(&#39;Python language, Programming language.&#39;)==(&#39;Python:language::Programming:language:&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert replace_specialchar(&#39;a b c,d e f&#39;)==(&#39;a:b:c:d:e:f&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert replace_specialchar(&#39;ram reshma,ram rahim&#39;)==(&#39;ram:reshma:ram:rahim&#39;)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L733" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="733"></td>
          <td id="LC733" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the index of the first occurrence of a given number in a sorted array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_first_occurrence(A, x):<span class="pl-cce">\r\n</span>    (left, right) = (0, len(A) - 1)<span class="pl-cce">\r\n</span>    result = -1<span class="pl-cce">\r\n</span>    while left &lt;= right:<span class="pl-cce">\r\n</span>        mid = (left + right) // 2<span class="pl-cce">\r\n</span>        if x == A[mid]:<span class="pl-cce">\r\n</span>            result = mid<span class="pl-cce">\r\n</span>            right = mid - 1<span class="pl-cce">\r\n</span>        elif x &lt; A[mid]:<span class="pl-cce">\r\n</span>            right = mid - 1<span class="pl-cce">\r\n</span>        else:<span class="pl-cce">\r\n</span>            left = mid + 1<span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">733</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L734" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="734"></td>
          <td id="LC734" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find sum of products of all possible subarrays.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sum_Of_Subarray_Prod(arr,n):<span class="pl-cce">\r\n</span>    ans = 0<span class="pl-cce">\r\n</span>    res = 0<span class="pl-cce">\r\n</span>    i = n - 1<span class="pl-cce">\r\n</span>    while (i &gt;= 0):<span class="pl-cce">\r\n</span>        incr = arr[i]*(1 + res)<span class="pl-cce">\r\n</span>        ans += incr<span class="pl-cce">\r\n</span>        res = incr<span class="pl-cce">\r\n</span>        i -= 1<span class="pl-cce">\r\n</span>    return (ans)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">734</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_Of_Subarray_Prod([1,2,3],3) == 20<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_Of_Subarray_Prod([1,2],2) == 5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_Of_Subarray_Prod([1,2,3,4],4) == 84<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L735" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="735"></td>
          <td id="LC735" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to toggle bits of the number except the first and the last bit.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def set_middle_bits(n):  <span class="pl-cce">\r\n</span>    n |= n &gt;&gt; 1; <span class="pl-cce">\r\n</span>    n |= n &gt;&gt; 2; <span class="pl-cce">\r\n</span>    n |= n &gt;&gt; 4; <span class="pl-cce">\r\n</span>    n |= n &gt;&gt; 8; <span class="pl-cce">\r\n</span>    n |= n &gt;&gt; 16;  <span class="pl-cce">\r\n</span>    return (n &gt;&gt; 1) ^ 1<span class="pl-cce">\r\n</span>def toggle_middle_bits(n): <span class="pl-cce">\r\n</span>    if (n == 1): <span class="pl-cce">\r\n</span>        return 1<span class="pl-cce">\r\n</span>    return n ^ set_middle_bits(n) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">735</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert toggle_middle_bits(9) == 15<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert toggle_middle_bits(10) == 12<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert toggle_middle_bits(11) == 13<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L736" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="736"></td>
          <td id="LC736" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to locate the left insertion point for a specified value in sorted order.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import bisect<span class="pl-cce">\r\n</span>def left_insertion(a, x):<span class="pl-cce">\r\n</span>    i = bisect.bisect_left(a, x)<span class="pl-cce">\r\n</span>    return i<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">736</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert left_insertion([1,2,4,5],6)==4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert left_insertion([1,2,4,5],3)==2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert left_insertion([1,2,4,5],7)==4<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L737" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="737"></td>
          <td id="LC737" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check whether the given string is starting with a vowel or not using regex.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re <span class="pl-cce">\r\n</span>regex = &#39;^[aeiouAEIOU][A-Za-z0-9_]*&#39;<span class="pl-cce">\r\n</span>def check_str(string): <span class="pl-cce">\r\n\t</span>if(re.search(regex, string)): <span class="pl-cce">\r\n\t\t</span>return (<span class="pl-cce">\&quot;</span>Valid<span class="pl-cce">\&quot;</span>) <span class="pl-cce">\r\n\t</span>else: <span class="pl-cce">\r\n\t\t</span>return (<span class="pl-cce">\&quot;</span>Invalid<span class="pl-cce">\&quot;</span>) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">737</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_str(<span class="pl-cce">\&quot;</span>annie<span class="pl-cce">\&quot;</span>) == &#39;Valid&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_str(<span class="pl-cce">\&quot;</span>dawood<span class="pl-cce">\&quot;</span>) == &#39;Invalid&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_str(<span class="pl-cce">\&quot;</span>Else<span class="pl-cce">\&quot;</span>) == &#39;Valid&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L738" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="738"></td>
          <td id="LC738" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to calculate the geometric sum of n-1.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def geometric_sum(n):<span class="pl-cce">\r\n</span>  if n &lt; 0:<span class="pl-cce">\r\n</span>    return 0<span class="pl-cce">\r\n</span>  else:<span class="pl-cce">\r\n</span>    return 1 / (pow(2, n)) + geometric_sum(n - 1)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">738</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert geometric_sum(7) == 1.9921875<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert geometric_sum(4) == 1.9375<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert geometric_sum(8) == 1.99609375<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L739" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="739"></td>
          <td id="LC739" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the index of smallest triangular number with n digits.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math <span class="pl-cce">\r\n</span>def find_Index(n): <span class="pl-cce">\r\n</span>    x = math.sqrt(2 * math.pow(10,(n - 1))); <span class="pl-cce">\r\n</span>    return round(x); <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">739</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Index(2) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Index(3) == 14<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Index(4) == 45<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L740" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="740"></td>
          <td id="LC740" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to convert the given tuple to a key-value dictionary using adjacent elements.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def tuple_to_dict(test_tup):<span class="pl-cce">\r\n</span>  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">740</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L741" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="741"></td>
          <td id="LC741" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether all the characters are same or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def all_Characters_Same(s) :<span class="pl-cce">\r\n</span>    n = len(s)<span class="pl-cce">\r\n</span>    for i in range(1,n) :<span class="pl-cce">\r\n</span>        if s[i] != s[0] :<span class="pl-cce">\r\n</span>            return False<span class="pl-cce">\r\n</span>    return True<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">741</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert all_Characters_Same(<span class="pl-cce">\&quot;</span>python<span class="pl-cce">\&quot;</span>) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert all_Characters_Same(<span class="pl-cce">\&quot;</span>aaa<span class="pl-cce">\&quot;</span>) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert all_Characters_Same(<span class="pl-cce">\&quot;</span>data<span class="pl-cce">\&quot;</span>) == False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L742" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="742"></td>
          <td id="LC742" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to caluclate the area of a tetrahedron.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math<span class="pl-cce">\r\n</span>def area_tetrahedron(side):<span class="pl-cce">\r\n</span>  area = math.sqrt(3)*(side*side)<span class="pl-cce">\r\n</span>  return area<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">742</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert area_tetrahedron(3)==15.588457268119894<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert area_tetrahedron(20)==692.8203230275509<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert area_tetrahedron(10)==173.20508075688772<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L743" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="743"></td>
          <td id="LC743" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to rotate a given list by specified number of items to the right direction.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def rotate_right(list1,m,n):<span class="pl-cce">\r\n</span>  result =  list1[-(m):]+list1[:-(n)]<span class="pl-cce">\r\n</span>  return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">743</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L744" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="744"></td>
          <td id="LC744" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check if the given tuple has any none value or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_none(test_tup):<span class="pl-cce">\r\n</span>  res = any(map(lambda ele: ele is None, test_tup))<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">744</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_none((10, 4, 5, 6, None)) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_none((7, 8, 9, 11, 14)) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_none((1, 2, 3, 4, None)) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L745" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="745"></td>
          <td id="LC745" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find numbers within a given range where every number is divisible by every digit it contains.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def divisible_by_digits(startnum, endnum):<span class="pl-cce">\r\n</span>    return [n for n in range(startnum, endnum+1) <span class="pl-cce">\\\r\n</span>                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">745</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert divisible_by_digits(20,25)==[22, 24]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L746" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="746"></td>
          <td id="LC746" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find area of a sector.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sector_area(r,a):<span class="pl-cce">\r\n</span>    pi=22/7<span class="pl-cce">\r\n</span>    if a &gt;= 360:<span class="pl-cce">\r\n</span>        return None<span class="pl-cce">\r\n</span>    sectorarea = (pi*r**2) * (a/360)<span class="pl-cce">\r\n</span>    return sectorarea<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">746</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sector_area(4,45)==6.285714285714286<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sector_area(9,45)==31.82142857142857<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sector_area(9,360)==None<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L747" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="747"></td>
          <td id="LC747" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the longest common subsequence for the given three string sequence.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def lcs_of_three(X, Y, Z, m, n, o): <span class="pl-cce">\r\n\t</span>L = [[[0 for i in range(o+1)] for j in range(n+1)] <span class="pl-cce">\r\n\t\t</span>for k in range(m+1)] <span class="pl-cce">\r\n\t</span>for i in range(m+1): <span class="pl-cce">\r\n\t\t</span>for j in range(n+1): <span class="pl-cce">\r\n\t\t\t</span>for k in range(o+1): <span class="pl-cce">\r\n\t\t\t\t</span>if (i == 0 or j == 0 or k == 0): <span class="pl-cce">\r\n\t\t\t\t\t</span>L[i][j][k] = 0<span class="pl-cce">\r\n\t\t\t\t</span>elif (X[i-1] == Y[j-1] and<span class="pl-cce">\r\n\t\t\t\t\t</span>X[i-1] == Z[k-1]): <span class="pl-cce">\r\n\t\t\t\t\t</span>L[i][j][k] = L[i-1][j-1][k-1] + 1<span class="pl-cce">\r\n\t\t\t\t</span>else: <span class="pl-cce">\r\n\t\t\t\t\t</span>L[i][j][k] = max(max(L[i-1][j][k], <span class="pl-cce">\r\n\t\t\t\t\t</span>L[i][j-1][k]), <span class="pl-cce">\r\n\t\t\t\t\t\t\t\t\t</span>L[i][j][k-1]) <span class="pl-cce">\r\n\t</span>return L[m][n][o]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">747</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert lcs_of_three(&#39;AGGT12&#39;, &#39;12TXAYB&#39;, &#39;12XBA&#39;, 6, 7, 5) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert lcs_of_three(&#39;Reels&#39;, &#39;Reelsfor&#39;, &#39;ReelsforReels&#39;, 5, 8, 13) == 5 <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert lcs_of_three(&#39;abcd1e2&#39;, &#39;bc12ea&#39;, &#39;bd1ea&#39;, 7, 6, 5) == 3<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L748" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="748"></td>
          <td id="LC748" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to put spaces between words starting with capital letters in a given string by using regex.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def capital_words_spaces(str1):<span class="pl-cce">\r\n</span>  return re.sub(r<span class="pl-cce">\&quot;</span>(<span class="pl-cce">\\</span>w)([A-Z])<span class="pl-cce">\&quot;</span>, r<span class="pl-cce">\&quot;\\</span>1 <span class="pl-cce">\\</span>2<span class="pl-cce">\&quot;</span>, str1)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">748</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert capital_words_spaces(<span class="pl-cce">\&quot;</span>Python<span class="pl-cce">\&quot;</span>) == &#39;Python&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert capital_words_spaces(<span class="pl-cce">\&quot;</span>PythonProgrammingExamples<span class="pl-cce">\&quot;</span>) == &#39;Python Programming Examples&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert capital_words_spaces(<span class="pl-cce">\&quot;</span>GetReadyToBeCodingFreak<span class="pl-cce">\&quot;</span>) == &#39;Get Ready To Be Coding Freak&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L749" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="749"></td>
          <td id="LC749" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to sort a given list of strings of numbers numerically.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sort_numeric_strings(nums_str):<span class="pl-cce">\r\n</span>    result = [int(x) for x in nums_str]<span class="pl-cce">\r\n</span>    result.sort()<span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">749</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_numeric_strings( [&#39;4&#39;,&#39;12&#39;,&#39;45&#39;,&#39;7&#39;,&#39;0&#39;,&#39;100&#39;,&#39;200&#39;,&#39;-12&#39;,&#39;-500&#39;])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_numeric_strings([&#39;2&#39;,&#39;3&#39;,&#39;8&#39;,&#39;4&#39;,&#39;7&#39;,&#39;9&#39;,&#39;8&#39;,&#39;2&#39;,&#39;6&#39;,&#39;5&#39;,&#39;1&#39;,&#39;6&#39;,&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;6&#39;,&#39;9&#39;,&#39;1&#39;,&#39;2&#39;])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_numeric_strings([&#39;1&#39;,&#39;3&#39;,&#39;5&#39;,&#39;7&#39;,&#39;1&#39;, &#39;3&#39;,&#39;13&#39;, &#39;15&#39;, &#39;17&#39;,&#39;5&#39;, &#39;7 &#39;,&#39;9&#39;,&#39;1&#39;, &#39;11&#39;])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L750" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="750"></td>
          <td id="LC750" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to add the given tuple to the given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def add_tuple(test_list, test_tup):<span class="pl-cce">\r\n</span>  test_list += test_tup<span class="pl-cce">\r\n</span>  return (test_list) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">750</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L751" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="751"></td>
          <td id="LC751" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check if the given array represents min heap or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_min_heap(arr, i):<span class="pl-cce">\r\n</span>    if 2 * i + 2 &gt; len(arr):<span class="pl-cce">\r\n</span>        return True<span class="pl-cce">\r\n</span>    left_child = (arr[i] &lt;= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)<span class="pl-cce">\r\n</span>    right_child = (2 * i + 2 == len(arr)) or (arr[i] &lt;= arr[2 * i + 2] <span class="pl-cce">\r\n</span>                                      and check_min_heap(arr, 2 * i + 2))<span class="pl-cce">\r\n</span>    return left_child and right_child<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">751</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L752" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="752"></td>
          <td id="LC752" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the nth jacobsthal number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def jacobsthal_num(n): <span class="pl-cce">\r\n\t</span>dp = [0] * (n + 1) <span class="pl-cce">\r\n\t</span>dp[0] = 0<span class="pl-cce">\r\n\t</span>dp[1] = 1<span class="pl-cce">\r\n\t</span>for i in range(2, n+1): <span class="pl-cce">\r\n\t\t</span>dp[i] = dp[i - 1] + 2 * dp[i - 2] <span class="pl-cce">\r\n\t</span>return dp[n]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">752</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert jacobsthal_num(5) == 11<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert jacobsthal_num(2) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert jacobsthal_num(4) == 5<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L753" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="753"></td>
          <td id="LC753" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find minimum k records from tuple list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def min_k(test_list, K):<span class="pl-cce">\r\n</span>  res = sorted(test_list, key = lambda x: x[1])[:K]<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">753</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert min_k([(&#39;Manjeet&#39;, 10), (&#39;Akshat&#39;, 4), (&#39;Akash&#39;, 2), (&#39;Nikhil&#39;, 8)], 2) == [(&#39;Akash&#39;, 2), (&#39;Akshat&#39;, 4)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_k([(&#39;Sanjeev&#39;, 11), (&#39;Angat&#39;, 5), (&#39;Akash&#39;, 3), (&#39;Nepin&#39;, 9)], 3) == [(&#39;Akash&#39;, 3), (&#39;Angat&#39;, 5), (&#39;Nepin&#39;, 9)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_k([(&#39;tanmay&#39;, 14), (&#39;Amer&#39;, 11), (&#39;Ayesha&#39;, 9), (&#39;SKD&#39;, 16)], 1) == [(&#39;Ayesha&#39;, 9)]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L754" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="754"></td>
          <td id="LC754" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find common index elements from three lists.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def extract_index_list(l1, l2, l3):<span class="pl-cce">\r\n</span>    result = []<span class="pl-cce">\r\n</span>    for m, n, o in zip(l1, l2, l3):<span class="pl-cce">\r\n</span>        if (m == n == o):<span class="pl-cce">\r\n</span>            result.append(m)<span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">754</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L755" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="755"></td>
          <td id="LC755" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the second smallest number in a list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def second_smallest(numbers):<span class="pl-cce">\r\n</span>  if (len(numbers)&lt;2):<span class="pl-cce">\r\n</span>    return<span class="pl-cce">\r\n</span>  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):<span class="pl-cce">\r\n</span>    return<span class="pl-cce">\r\n</span>  dup_items = set()<span class="pl-cce">\r\n</span>  uniq_items = []<span class="pl-cce">\r\n</span>  for x in numbers:<span class="pl-cce">\r\n</span>    if x not in dup_items:<span class="pl-cce">\r\n</span>      uniq_items.append(x)<span class="pl-cce">\r\n</span>      dup_items.add(x)<span class="pl-cce">\r\n</span>  uniq_items.sort()    <span class="pl-cce">\r\n</span>  return  uniq_items[1] <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">755</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert second_smallest([1, 2, -8, -2, 0, -2])==-2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert second_smallest([2,2])==None<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L756" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="756"></td>
          <td id="LC756" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function that matches a string that has an a followed by zero or one &#39;b&#39;.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def text_match_zero_one(text):<span class="pl-cce">\r\n</span>        patterns = &#39;ab?&#39;<span class="pl-cce">\r\n</span>        if re.search(patterns,  text):<span class="pl-cce">\r\n</span>                return &#39;Found a match!&#39;<span class="pl-cce">\r\n</span>        else:<span class="pl-cce">\r\n</span>                return(&#39;Not matched!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">756</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match_zero_one(<span class="pl-cce">\&quot;</span>ac<span class="pl-cce">\&quot;</span>)==(&#39;Found a match!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match_zero_one(<span class="pl-cce">\&quot;</span>dc<span class="pl-cce">\&quot;</span>)==(&#39;Not matched!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match_zero_one(<span class="pl-cce">\&quot;</span>abbbba<span class="pl-cce">\&quot;</span>)==(&#39;Found a match!&#39;)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L757" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="757"></td>
          <td id="LC757" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to count the pairs of reverse strings in the given string list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_reverse_pairs(test_list):<span class="pl-cce">\r\n</span>  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( <span class="pl-cce">\r\n\t</span>test_list)) if test_list[idxn] == str(&#39;&#39;.join(list(reversed(test_list[idx]))))]) <span class="pl-cce">\r\n</span>  return str(res)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">757</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_reverse_pairs([<span class="pl-cce">\&quot;</span>julia<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>best<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>tseb<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>for<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>ailuj<span class="pl-cce">\&quot;</span>])== &#39;2&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_reverse_pairs([<span class="pl-cce">\&quot;</span>geeks<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>best<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>for<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>skeeg<span class="pl-cce">\&quot;</span>]) == &#39;1&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_reverse_pairs([<span class="pl-cce">\&quot;</span>makes<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>best<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>sekam<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>for<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>rof<span class="pl-cce">\&quot;</span>]) == &#39;2&#39; <span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L758" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="758"></td>
          <td id="LC758" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to count number of unique lists within a list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def unique_sublists(list1):<span class="pl-cce">\r\n</span>    result ={}<span class="pl-cce">\r\n</span>    for l in  list1: <span class="pl-cce">\r\n</span>        result.setdefault(tuple(l), list()).append(1) <span class="pl-cce">\r\n</span>    for a, b in result.items(): <span class="pl-cce">\r\n</span>        result[a] = sum(b)<span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">758</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert unique_sublists([[&#39;green&#39;, &#39;orange&#39;], [&#39;black&#39;], [&#39;green&#39;, &#39;orange&#39;], [&#39;white&#39;]])=={(&#39;green&#39;, &#39;orange&#39;): 2, (&#39;black&#39;,): 1, (&#39;white&#39;,): 1}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L759" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="759"></td>
          <td id="LC759" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check a decimal with a precision of 2.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def is_decimal(num):<span class="pl-cce">\r\n</span>    import re<span class="pl-cce">\r\n</span>    dnumre = re.compile(r<span class="pl-cce">\&quot;\&quot;\&quot;</span>^[0-9]+(<span class="pl-cce">\\</span>.[0-9]{1,2})?$<span class="pl-cce">\&quot;\&quot;\&quot;</span>)<span class="pl-cce">\r\n</span>    result = dnumre.search(num)<span class="pl-cce">\r\n</span>    return bool(result)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">759</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert is_decimal(&#39;123.11&#39;)==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_decimal(&#39;e666.86&#39;)==False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_decimal(&#39;3.124587&#39;)==False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L760" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="760"></td>
          <td id="LC760" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether an array contains only one distinct element or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def unique_Element(arr,n):<span class="pl-cce">\r\n</span>    s = set(arr)<span class="pl-cce">\r\n</span>    if (len(s) == 1):<span class="pl-cce">\r\n</span>        return (&#39;YES&#39;)<span class="pl-cce">\r\n</span>    else:<span class="pl-cce">\r\n</span>        return (&#39;NO&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">760</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert unique_Element([1,1,1],3) == &#39;YES&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert unique_Element([1,2,1,2],4) == &#39;NO&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert unique_Element([1,2,3,4,5],5) == &#39;NO&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L761" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="761"></td>
          <td id="LC761" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to caluclate arc length of an angle.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def arc_length(d,a):<span class="pl-cce">\r\n</span>    pi=22/7<span class="pl-cce">\r\n</span>    if a &gt;= 360:<span class="pl-cce">\r\n</span>        return None<span class="pl-cce">\r\n</span>    arclength = (pi*d) * (a/360)<span class="pl-cce">\r\n</span>    return arclength<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">761</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert arc_length(9,45)==3.5357142857142856<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert arc_length(9,480)==None<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert arc_length(5,270)==11.785714285714285<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L762" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="762"></td>
          <td id="LC762" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check whether the given month number contains 30 days or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_monthnumber_number(monthnum3):<span class="pl-cce">\r\n</span>  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):<span class="pl-cce">\r\n</span>    return True<span class="pl-cce">\r\n</span>  else:<span class="pl-cce">\r\n</span>    return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">762</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_monthnumber_number(6)==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_monthnumber_number(2)==False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_monthnumber_number(12)==False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L763" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="763"></td>
          <td id="LC763" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the minimum difference between any two elements in a given array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_Min_Diff(arr,n): <span class="pl-cce">\r\n</span>    arr = sorted(arr) <span class="pl-cce">\r\n</span>    diff = 10**20 <span class="pl-cce">\r\n</span>    for i in range(n-1): <span class="pl-cce">\r\n</span>        if arr[i+1] - arr[i] &lt; diff: <span class="pl-cce">\r\n</span>            diff = arr[i+1] - arr[i]  <span class="pl-cce">\r\n</span>    return diff <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">763</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Min_Diff((1,5,3,19,18,25),6) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Min_Diff((4,3,2,6),4) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Min_Diff((30,5,20,9),4) == 4<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L764" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="764"></td>
          <td id="LC764" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count numeric values in a given string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def number_ctr(str):<span class="pl-cce">\r\n</span>      number_ctr= 0<span class="pl-cce">\r\n</span>      for i in range(len(str)):<span class="pl-cce">\r\n</span>          if str[i] &gt;= &#39;0&#39; and str[i] &lt;= &#39;9&#39;: number_ctr += 1     <span class="pl-cce">\r\n</span>      return  number_ctr<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">764</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert number_ctr(&#39;program2bedone&#39;) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert number_ctr(&#39;3wonders&#39;) ==1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert number_ctr(&#39;123&#39;) == 3<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L765" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="765"></td>
          <td id="LC765" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find nth polite number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math <span class="pl-cce">\r\n</span>def is_polite(n): <span class="pl-cce">\r\n\t</span>n = n + 1<span class="pl-cce">\r\n\t</span>return (int)(n+(math.log((n + math.log(n, 2)), 2))) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">765</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert is_polite(7) == 11<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_polite(4) == 7<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_polite(9) == 13<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L766" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="766"></td>
          <td id="LC766" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to iterate over all pairs of consecutive items in a given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def pair_wise(l1):<span class="pl-cce">\r\n</span>    temp = []<span class="pl-cce">\r\n</span>    for i in range(len(l1) - 1):<span class="pl-cce">\r\n</span>        current_element, next_element = l1[i], l1[i + 1]<span class="pl-cce">\r\n</span>        x = (current_element, next_element)<span class="pl-cce">\r\n</span>        temp.append(x)<span class="pl-cce">\r\n</span>    return temp<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">766</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L767" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="767"></td>
          <td id="LC767" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count the number of pairs whose sum is equal to <span class="pl-cce">\u2018</span>sum<span class="pl-cce">\u2019</span>.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def get_Pairs_Count(arr,n,sum):<span class="pl-cce">\r\n</span>    count = 0  <span class="pl-cce">\r\n</span>    for i in range(0,n):<span class="pl-cce">\r\n</span>        for j in range(i + 1,n):<span class="pl-cce">\r\n</span>            if arr[i] + arr[j] == sum:<span class="pl-cce">\r\n</span>                count += 1<span class="pl-cce">\r\n</span>    return count<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">767</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert get_Pairs_Count([1,1,1,1],4,2) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_Pairs_Count([1,5,7,-1,5],5,6) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_Pairs_Count([1,-2,3],3,1) == 1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L768" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="768"></td>
          <td id="LC768" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check for odd parity of a given number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_Odd_Parity(x): <span class="pl-cce">\r\n</span>    parity = 0<span class="pl-cce">\r\n</span>    while (x != 0): <span class="pl-cce">\r\n</span>        x = x &amp; (x - 1) <span class="pl-cce">\r\n</span>        parity += 1<span class="pl-cce">\r\n</span>    if (parity % 2 == 1): <span class="pl-cce">\r\n</span>        return True<span class="pl-cce">\r\n</span>    else: <span class="pl-cce">\r\n</span>        return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">768</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_Odd_Parity(13) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_Odd_Parity(21) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_Odd_Parity(18) == False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L769" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="769"></td>
          <td id="LC769" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to get the difference between two lists.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def Diff(li1,li2):<span class="pl-cce">\r\n</span>    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))<span class="pl-cce">\r\n</span> <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">769</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L770" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="770"></td>
          <td id="LC770" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the sum of fourth power of first n odd natural numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def odd_Num_Sum(n) : <span class="pl-cce">\r\n</span>    j = 0<span class="pl-cce">\r\n</span>    sm = 0<span class="pl-cce">\r\n</span>    for i in range(1,n + 1) : <span class="pl-cce">\r\n</span>        j = (2*i-1) <span class="pl-cce">\r\n</span>        sm = sm + (j*j*j*j)   <span class="pl-cce">\r\n</span>    return sm <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">770</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert odd_Num_Sum(2) == 82<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert odd_Num_Sum(3) == 707<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert odd_Num_Sum(4) == 3108<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L771" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="771"></td>
          <td id="LC771" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check if the given expression is balanced or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from collections import deque<span class="pl-cce">\r\n</span>def check_expression(exp):<span class="pl-cce">\r\n</span>    if len(exp) &amp; 1:<span class="pl-cce">\r\n</span>        return False<span class="pl-cce">\r\n</span>    stack = deque()<span class="pl-cce">\r\n</span>    for ch in exp:<span class="pl-cce">\r\n</span>        if ch == &#39;(&#39; or ch == &#39;{&#39; or ch == &#39;[&#39;:<span class="pl-cce">\r\n</span>            stack.append(ch)<span class="pl-cce">\r\n</span>        if ch == &#39;)&#39; or ch == &#39;}&#39; or ch == &#39;]&#39;:<span class="pl-cce">\r\n</span>            if not stack:<span class="pl-cce">\r\n</span>                return False<span class="pl-cce">\r\n</span>            top = stack.pop()<span class="pl-cce">\r\n</span>            if (top == &#39;(&#39; and ch != &#39;)&#39;) or (top == &#39;{&#39; and ch != &#39;}&#39; or (top == &#39;[&#39; and ch != &#39;]&#39;)):<span class="pl-cce">\r\n</span>                return False<span class="pl-cce">\r\n</span>    return not stack<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">771</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_expression(<span class="pl-cce">\&quot;</span>{()}[{}]<span class="pl-cce">\&quot;</span>) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_expression(<span class="pl-cce">\&quot;</span>{()}[{]<span class="pl-cce">\&quot;</span>) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_expression(<span class="pl-cce">\&quot;</span>{()}[{}][]({})<span class="pl-cce">\&quot;</span>) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L772" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="772"></td>
          <td id="LC772" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to remove all the words with k length in the given string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def remove_length(test_str, K):<span class="pl-cce">\r\n</span>  temp = test_str.split()<span class="pl-cce">\r\n</span>  res = [ele for ele in temp if len(ele) != K]<span class="pl-cce">\r\n</span>  res = &#39; &#39;.join(res)<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">772</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_length(&#39;The person is most value tet&#39;, 3) == &#39;person is most value&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_length(&#39;If you told me about this ok&#39;, 4) == &#39;If you me about ok&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_length(&#39;Forces of darkeness is come into the play&#39;, 4) == &#39;Forces of darkeness is the&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L773" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="773"></td>
          <td id="LC773" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the occurrence and position of the substrings within a string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def occurance_substring(text,pattern):<span class="pl-cce">\r\n</span> for match in re.finditer(pattern, text):<span class="pl-cce">\r\n</span>    s = match.start()<span class="pl-cce">\r\n</span>    e = match.end()<span class="pl-cce">\r\n</span>    return (text[s:e], s, e)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">773</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert occurance_substring(&#39;python programming, python language&#39;,&#39;python&#39;)==(&#39;python&#39;, 0, 6)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert occurance_substring(&#39;python programming,programming language&#39;,&#39;programming&#39;)==(&#39;programming&#39;, 7, 18)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert occurance_substring(&#39;python programming,programming language&#39;,&#39;language&#39;)==(&#39;language&#39;, 31, 39)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L774" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="774"></td>
          <td id="LC774" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check if the string is a valid email address or not using regex.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re <span class="pl-cce">\r\n</span>regex = &#39;^[a-z0-9]+[<span class="pl-cce">\\</span>._]?[a-z0-9]+[@]<span class="pl-cce">\\</span>w+[.]<span class="pl-cce">\\</span>w{2,3}$&#39;<span class="pl-cce">\r\n</span>def check_email(email): <span class="pl-cce">\r\n\t</span>if(re.search(regex,email)): <span class="pl-cce">\r\n\t\t</span>return (<span class="pl-cce">\&quot;</span>Valid Email<span class="pl-cce">\&quot;</span>) <span class="pl-cce">\r\n\t</span>else: <span class="pl-cce">\r\n\t\t</span>return (<span class="pl-cce">\&quot;</span>Invalid Email<span class="pl-cce">\&quot;</span>) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">774</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_email(<span class="pl-cce">\&quot;</span>ankitrai326@gmail.com<span class="pl-cce">\&quot;</span>) == &#39;Valid Email&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_email(<span class="pl-cce">\&quot;</span>my.ownsite@ourearth.org<span class="pl-cce">\&quot;</span>) == &#39;Valid Email&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_email(<span class="pl-cce">\&quot;</span>ankitaoie326.com<span class="pl-cce">\&quot;</span>) == &#39;Invalid Email&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L775" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="775"></td>
          <td id="LC775" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether every odd index contains odd numbers of a given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def odd_position(nums):<span class="pl-cce">\r\n\t</span>return all(nums[i]%2==i%2 for i in range(len(nums)))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">775</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert odd_position([2,1,4,3,6,7,6,3]) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert odd_position([4,1,2]) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert odd_position([1,2,3]) == False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L776" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="776"></td>
          <td id="LC776" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to count those characters which have vowels as their neighbors in the given string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_vowels(test_str):<span class="pl-cce">\r\n</span>  res = 0<span class="pl-cce">\r\n</span>  vow_list = [&#39;a&#39;, &#39;e&#39;, &#39;i&#39;, &#39;o&#39;, &#39;u&#39;]<span class="pl-cce">\r\n</span>  for idx in range(1, len(test_str) - 1):<span class="pl-cce">\r\n</span>    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):<span class="pl-cce">\r\n</span>      res += 1<span class="pl-cce">\r\n</span>  if test_str[0] not in vow_list and test_str[1] in vow_list:<span class="pl-cce">\r\n</span>    res += 1<span class="pl-cce">\r\n</span>  if test_str[-1] not in vow_list and test_str[-2] in vow_list:<span class="pl-cce">\r\n</span>    res += 1<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">776</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_vowels(&#39;bestinstareels&#39;) == 7<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_vowels(&#39;partofthejourneyistheend&#39;) == 12<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_vowels(&#39;amazonprime&#39;) == 5<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L777" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="777"></td>
          <td id="LC777" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the sum of non-repeated elements in a given array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_Sum(arr,n): <span class="pl-cce">\r\n</span>    arr.sort() <span class="pl-cce">\r\n</span>    sum = arr[0] <span class="pl-cce">\r\n</span>    for i in range(0,n-1): <span class="pl-cce">\r\n</span>        if (arr[i] != arr[i+1]): <span class="pl-cce">\r\n</span>            sum = sum + arr[i+1]   <span class="pl-cce">\r\n</span>    return sum<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">777</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Sum([1,2,3,1,1,4,5,6],8) == 21<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Sum([1,10,9,4,2,10,10,45,4],9) == 71<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Sum([12,10,9,45,2,10,10,45,10],9) == 78<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L778" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="778"></td>
          <td id="LC778" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to pack consecutive duplicates of a given list elements into sublists.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from itertools import groupby<span class="pl-cce">\r\n</span>def pack_consecutive_duplicates(list1):<span class="pl-cce">\r\n</span>    return [list(group) for key, group in groupby(list1)]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">778</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert pack_consecutive_duplicates([&#39;a&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;d&#39;])==[[&#39;a&#39;, &#39;a&#39;], [&#39;b&#39;], [&#39;c&#39;], [&#39;d&#39;, &#39;d&#39;]]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L779" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="779"></td>
          <td id="LC779" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to count the number of unique lists within a list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def unique_sublists(list1):<span class="pl-cce">\r\n</span>    result ={}<span class="pl-cce">\r\n</span>    for l in list1: <span class="pl-cce">\r\n</span>        result.setdefault(tuple(l), list()).append(1) <span class="pl-cce">\r\n</span>    for a, b in result.items(): <span class="pl-cce">\r\n</span>        result[a] = sum(b)<span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">779</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert unique_sublists([[&#39;green&#39;, &#39;orange&#39;], [&#39;black&#39;], [&#39;green&#39;, &#39;orange&#39;], [&#39;white&#39;]])=={(&#39;green&#39;, &#39;orange&#39;): 2, (&#39;black&#39;,): 1, (&#39;white&#39;,): 1}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L780" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="780"></td>
          <td id="LC780" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the combinations of sums with tuples in the given tuple list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from itertools import combinations <span class="pl-cce">\r\n</span>def find_combinations(test_list):<span class="pl-cce">\r\n</span>  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">780</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L781" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="781"></td>
          <td id="LC781" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether the count of divisors is even or odd.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math <span class="pl-cce">\r\n</span>def count_Divisors(n) : <span class="pl-cce">\r\n</span>    count = 0<span class="pl-cce">\r\n</span>    for i in range(1, (int)(math.sqrt(n)) + 2) : <span class="pl-cce">\r\n</span>        if (n % i == 0) : <span class="pl-cce">\r\n</span>            if( n // i == i) : <span class="pl-cce">\r\n</span>                count = count + 1<span class="pl-cce">\r\n</span>            else : <span class="pl-cce">\r\n</span>                count = count + 2<span class="pl-cce">\r\n</span>    if (count % 2 == 0) : <span class="pl-cce">\r\n</span>        return (<span class="pl-cce">\&quot;</span>Even<span class="pl-cce">\&quot;</span>) <span class="pl-cce">\r\n</span>    else : <span class="pl-cce">\r\n</span>        return (<span class="pl-cce">\&quot;</span>Odd<span class="pl-cce">\&quot;</span>) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">781</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Divisors(10) == <span class="pl-cce">\&quot;</span>Even<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Divisors(100) == <span class="pl-cce">\&quot;</span>Odd<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Divisors(125) == <span class="pl-cce">\&quot;</span>Even<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L782" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="782"></td>
          <td id="LC782" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the sum of all odd length subarrays.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def Odd_Length_Sum(arr):<span class="pl-cce">\r\n</span>    Sum = 0<span class="pl-cce">\r\n</span>    l = len(arr)<span class="pl-cce">\r\n</span>    for i in range(l):<span class="pl-cce">\r\n</span>        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])<span class="pl-cce">\r\n</span>    return Sum<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">782</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert Odd_Length_Sum([1,2,4]) == 14<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Odd_Length_Sum([1,2,1,2]) == 15<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Odd_Length_Sum([1,7]) == 8<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L783" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="783"></td>
          <td id="LC783" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to convert rgb color to hsv color.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def rgb_to_hsv(r, g, b):<span class="pl-cce">\r\n</span>    r, g, b = r/255.0, g/255.0, b/255.0<span class="pl-cce">\r\n</span>    mx = max(r, g, b)<span class="pl-cce">\r\n</span>    mn = min(r, g, b)<span class="pl-cce">\r\n</span>    df = mx-mn<span class="pl-cce">\r\n</span>    if mx == mn:<span class="pl-cce">\r\n</span>        h = 0<span class="pl-cce">\r\n</span>    elif mx == r:<span class="pl-cce">\r\n</span>        h = (60 * ((g-b)/df) + 360) % 360<span class="pl-cce">\r\n</span>    elif mx == g:<span class="pl-cce">\r\n</span>        h = (60 * ((b-r)/df) + 120) % 360<span class="pl-cce">\r\n</span>    elif mx == b:<span class="pl-cce">\r\n</span>        h = (60 * ((r-g)/df) + 240) % 360<span class="pl-cce">\r\n</span>    if mx == 0:<span class="pl-cce">\r\n</span>        s = 0<span class="pl-cce">\r\n</span>    else:<span class="pl-cce">\r\n</span>        s = (df/mx)*100<span class="pl-cce">\r\n</span>    v = mx*100<span class="pl-cce">\r\n</span>    return h, s, v<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">783</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L784" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="784"></td>
          <td id="LC784" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the product of first even and odd number of a given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def mul_even_odd(list1):<span class="pl-cce">\r\n</span>    first_even = next((el for el in list1 if el%2==0),-1)<span class="pl-cce">\r\n</span>    first_odd = next((el for el in list1 if el%2!=0),-1)<span class="pl-cce">\r\n</span>    return (first_even*first_odd)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">784</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert mul_even_odd([1,3,5,7,4,1,6,8])==4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert mul_even_odd([1,5,7,9,10])==10<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L785" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="785"></td>
          <td id="LC785" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to convert tuple string to integer tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def tuple_str_int(test_str):<span class="pl-cce">\r\n</span>  res = tuple(int(num) for num in test_str.replace(&#39;(&#39;, &#39;&#39;).replace(&#39;)&#39;, &#39;&#39;).replace(&#39;...&#39;, &#39;&#39;).split(&#39;, &#39;))<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">785</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert tuple_str_int(<span class="pl-cce">\&quot;</span>(7, 8, 9)<span class="pl-cce">\&quot;</span>) == (7, 8, 9)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert tuple_str_int(<span class="pl-cce">\&quot;</span>(1, 2, 3)<span class="pl-cce">\&quot;</span>) == (1, 2, 3)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert tuple_str_int(<span class="pl-cce">\&quot;</span>(4, 5, 6)<span class="pl-cce">\&quot;</span>) == (4, 5, 6)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L786" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="786"></td>
          <td id="LC786" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to locate the right insertion point for a specified value in sorted order.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import bisect<span class="pl-cce">\r\n</span>def right_insertion(a, x):<span class="pl-cce">\r\n</span>    i = bisect.bisect_right(a, x)<span class="pl-cce">\r\n</span>    return i<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">786</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert right_insertion([1,2,4,5],6)==4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert right_insertion([1,2,4,5],3)==2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert right_insertion([1,2,4,5],7)==4<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L787" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="787"></td>
          <td id="LC787" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function that matches a string that has an a followed by three &#39;b&#39;.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def text_match_three(text):<span class="pl-cce">\r\n</span>        patterns = &#39;ab{3}?&#39;<span class="pl-cce">\r\n</span>        if re.search(patterns,  text):<span class="pl-cce">\r\n</span>                return &#39;Found a match!&#39;<span class="pl-cce">\r\n</span>        else:<span class="pl-cce">\r\n</span>                return(&#39;Not matched!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">787</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match_three(<span class="pl-cce">\&quot;</span>ac<span class="pl-cce">\&quot;</span>)==(&#39;Not matched!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match_three(<span class="pl-cce">\&quot;</span>dc<span class="pl-cce">\&quot;</span>)==(&#39;Not matched!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match_three(<span class="pl-cce">\&quot;</span>abbbba<span class="pl-cce">\&quot;</span>)==(&#39;Found a match!&#39;)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L788" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="788"></td>
          <td id="LC788" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to create a new tuple from the given string and list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def new_tuple(test_list, test_str):<span class="pl-cce">\r\n</span>  res = tuple(test_list + [test_str])<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">788</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert new_tuple([<span class="pl-cce">\&quot;</span>WEB<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>is<span class="pl-cce">\&quot;</span>], <span class="pl-cce">\&quot;</span>best<span class="pl-cce">\&quot;</span>) == (&#39;WEB&#39;, &#39;is&#39;, &#39;best&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert new_tuple([<span class="pl-cce">\&quot;</span>We<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>are<span class="pl-cce">\&quot;</span>], <span class="pl-cce">\&quot;</span>Developers<span class="pl-cce">\&quot;</span>) == (&#39;We&#39;, &#39;are&#39;, &#39;Developers&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert new_tuple([<span class="pl-cce">\&quot;</span>Part<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>is<span class="pl-cce">\&quot;</span>], <span class="pl-cce">\&quot;</span>Wrong<span class="pl-cce">\&quot;</span>) == (&#39;Part&#39;, &#39;is&#39;, &#39;Wrong&#39;)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L789" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="789"></td>
          <td id="LC789" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to calculate the perimeter of a regular polygon.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from math import tan, pi<span class="pl-cce">\r\n</span>def perimeter_polygon(s,l):<span class="pl-cce">\r\n</span>  perimeter = s*l<span class="pl-cce">\r\n</span>  return perimeter<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">789</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert perimeter_polygon(4,20)==80<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert perimeter_polygon(10,15)==150<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert perimeter_polygon(9,7)==63<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L790" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="790"></td>
          <td id="LC790" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether every even index contains even numbers of a given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def even_position(nums):<span class="pl-cce">\r\n\t</span>return all(nums[i]%2==i%2 for i in range(len(nums)))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">790</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert even_position([3,2,1]) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert even_position([1,2,3]) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert even_position([2,1,4]) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L791" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="791"></td>
          <td id="LC791" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to remove the nested record from the given tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def remove_nested(test_tup):<span class="pl-cce">\r\n</span>  res = tuple()<span class="pl-cce">\r\n</span>  for count, ele in enumerate(test_tup):<span class="pl-cce">\r\n</span>    if not isinstance(ele, tuple):<span class="pl-cce">\r\n</span>      res = res + (ele, )<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">791</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L792" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="792"></td>
          <td id="LC792" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count the number of lists in a given number of lists.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_list(input_list): <span class="pl-cce">\r\n</span>    return len(input_list)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">792</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_list([[1,2],[2,3],[4,5]]) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_list([[1,0],[2,0]]) == 2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L793" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="793"></td>
          <td id="LC793" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the last position of an element in a sorted array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def last(arr,x,n):<span class="pl-cce">\r\n</span>    low = 0<span class="pl-cce">\r\n</span>    high = n - 1<span class="pl-cce">\r\n</span>    res = -1  <span class="pl-cce">\r\n</span>    while (low &lt;= high):<span class="pl-cce">\r\n</span>        mid = (low + high) // 2 <span class="pl-cce">\r\n</span>        if arr[mid] &gt; x:<span class="pl-cce">\r\n</span>            high = mid - 1<span class="pl-cce">\r\n</span>        elif arr[mid] &lt; x:<span class="pl-cce">\r\n</span>            low = mid + 1<span class="pl-cce">\r\n</span>        else:<span class="pl-cce">\r\n</span>            res = mid<span class="pl-cce">\r\n</span>            low = mid + 1<span class="pl-cce">\r\n</span>    return res<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">793</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert last([1,2,3],1,3) == 0<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert last([1,1,1,2,3,4],1,6) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert last([2,3,2,3,6,8,9],3,8) == 3<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L794" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="794"></td>
          <td id="LC794" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function that matches a string that has an &#39;a&#39; followed by anything, ending in &#39;b&#39;.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def text_starta_endb(text):<span class="pl-cce">\r\n</span>        patterns = &#39;a.*?b$&#39;<span class="pl-cce">\r\n</span>        if re.search(patterns,  text):<span class="pl-cce">\r\n</span>                return &#39;Found a match!&#39;<span class="pl-cce">\r\n</span>        else:<span class="pl-cce">\r\n</span>                return(&#39;Not matched!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">794</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert text_starta_endb(<span class="pl-cce">\&quot;</span>aabbbb<span class="pl-cce">\&quot;</span>)==(&#39;Found a match!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert text_starta_endb(<span class="pl-cce">\&quot;</span>aabAbbbc<span class="pl-cce">\&quot;</span>)==(&#39;Not matched!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert text_starta_endb(<span class="pl-cce">\&quot;</span>accddbbjjj<span class="pl-cce">\&quot;</span>)==(&#39;Not matched!&#39;)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L795" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="795"></td>
          <td id="LC795" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import heapq<span class="pl-cce">\r\n</span>def cheap_items(items,n):<span class="pl-cce">\r\n</span>  cheap_items = heapq.nsmallest(n, items, key=lambda s: s[&#39;price&#39;])<span class="pl-cce">\r\n</span>  return cheap_items<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">795</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert cheap_items([{&#39;name&#39;: &#39;Item-1&#39;, &#39;price&#39;: 101.1},{&#39;name&#39;: &#39;Item-2&#39;, &#39;price&#39;: 555.22}],1)==[{&#39;name&#39;: &#39;Item-1&#39;, &#39;price&#39;: 101.1}]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert cheap_items([{&#39;name&#39;: &#39;Item-1&#39;, &#39;price&#39;: 101.1},{&#39;name&#39;: &#39;Item-2&#39;, &#39;price&#39;: 555.22}],2)==[{&#39;name&#39;: &#39;Item-1&#39;, &#39;price&#39;: 101.1},{&#39;name&#39;: &#39;Item-2&#39;, &#39;price&#39;: 555.22}]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert cheap_items([{&#39;name&#39;: &#39;Item-1&#39;, &#39;price&#39;: 101.1},{&#39;name&#39;: &#39;Item-2&#39;, &#39;price&#39;: 555.22}, {&#39;name&#39;: &#39;Item-3&#39;, &#39;price&#39;: 45.09},{&#39;name&#39;: &#39;Item-4&#39;, &#39;price&#39;: 22.75}],1)==[{&#39;name&#39;: &#39;Item-4&#39;, &#39;price&#39;: 22.75}]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L796" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="796"></td>
          <td id="LC796" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write function to find the sum of all items in the given dictionary.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def return_sum(dict):<span class="pl-cce">\r\n</span>  sum = 0<span class="pl-cce">\r\n</span>  for i in dict.values():<span class="pl-cce">\r\n</span>    sum = sum + i<span class="pl-cce">\r\n</span>  return sum<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">796</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert return_sum({&#39;a&#39;: 100, &#39;b&#39;:200, &#39;c&#39;:300}) == 600<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert return_sum({&#39;a&#39;: 25, &#39;b&#39;:18, &#39;c&#39;:45}) == 88<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert return_sum({&#39;a&#39;: 36, &#39;b&#39;:39, &#39;c&#39;:49}) == 124<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L797" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="797"></td>
          <td id="LC797" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the sum of all odd natural numbers within the range l and r.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sum_Odd(n): <span class="pl-cce">\r\n</span>    terms = (n + 1)//2<span class="pl-cce">\r\n</span>    sum1 = terms * terms <span class="pl-cce">\r\n</span>    return sum1  <span class="pl-cce">\r\n</span>def sum_in_Range(l,r): <span class="pl-cce">\r\n</span>    return sum_Odd(r) - sum_Odd(l - 1)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">797</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_in_Range(2,5) == 8<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_in_Range(5,7) == 12<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_in_Range(7,13) == 40<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L798" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="798"></td>
          <td id="LC798" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the sum of an array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def _sum(arr):  <span class="pl-cce">\r\n</span>    sum=0<span class="pl-cce">\r\n</span>    for i in arr: <span class="pl-cce">\r\n</span>        sum = sum + i      <span class="pl-cce">\r\n</span>    return(sum)  <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">798</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert _sum([1, 2, 3]) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert _sum([15, 12, 13, 10]) == 50<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert _sum([0, 1, 2]) == 3<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L799" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="799"></td>
          <td id="LC799" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to left rotate the bits of a given number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>INT_BITS = 32<span class="pl-cce">\r\n</span>def left_Rotate(n,d):   <span class="pl-cce">\r\n</span>    return (n &lt;&lt; d)|(n &gt;&gt; (INT_BITS - d))  <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">799</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert left_Rotate(16,2) == 64<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert left_Rotate(10,2) == 40<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert left_Rotate(99,3) == 792<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L800" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="800"></td>
          <td id="LC800" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to remove all whitespaces from a string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def remove_all_spaces(text):<span class="pl-cce">\r\n</span> return (re.sub(r&#39;<span class="pl-cce">\\</span>s+&#39;, &#39;&#39;,text))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">800</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_all_spaces(&#39;python  program&#39;)==(&#39;pythonprogram&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_all_spaces(&#39;python   programming    language&#39;)==(&#39;pythonprogramminglanguage&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_all_spaces(&#39;python                     program&#39;)==(&#39;pythonprogram&#39;)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L801" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="801"></td>
          <td id="LC801" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count the number of equal numbers from three given integers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def test_three_equal(x,y,z):<span class="pl-cce">\r\n</span>  result= set([x,y,z])<span class="pl-cce">\r\n</span>  if len(result)==3:<span class="pl-cce">\r\n</span>    return 0<span class="pl-cce">\r\n</span>  else:<span class="pl-cce">\r\n</span>    return (4-len(result))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">801</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert test_three_equal(1,1,1) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert test_three_equal(-1,-2,-3) == 0<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert test_three_equal(1,2,2) == 2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L802" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="802"></td>
          <td id="LC802" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count the number of rotations required to generate a sorted array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_Rotation(arr,n):   <span class="pl-cce">\r\n</span>    for i in range (1,n): <span class="pl-cce">\r\n</span>        if (arr[i] &lt; arr[i - 1]): <span class="pl-cce">\r\n</span>            return i  <span class="pl-cce">\r\n</span>    return 0<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">802</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Rotation([3,2,1],3) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Rotation([4,5,1,2,3],5) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Rotation([7,8,9,1,2,3],6) == 3<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L803" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="803"></td>
          <td id="LC803" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether the given number is a perfect square or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def is_Perfect_Square(n) :<span class="pl-cce">\r\n</span>    i = 1<span class="pl-cce">\r\n</span>    while (i * i&lt;= n):<span class="pl-cce">\r\n</span>        if ((n % i == 0) and (n / i == i)):<span class="pl-cce">\r\n</span>            return True     <span class="pl-cce">\r\n</span>        i = i + 1<span class="pl-cce">\r\n</span>    return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">803</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert is_Perfect_Square(10) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_Perfect_Square(36) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_Perfect_Square(14) == False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L804" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="804"></td>
          <td id="LC804" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether the product of numbers is even or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def is_Product_Even(arr,n): <span class="pl-cce">\r\n</span>    for i in range(0,n): <span class="pl-cce">\r\n</span>        if ((arr[i] &amp; 1) == 0): <span class="pl-cce">\r\n</span>            return True<span class="pl-cce">\r\n</span>    return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">804</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert is_Product_Even([1,2,3],3) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_Product_Even([1,2,1,4],4) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_Product_Even([1,1],2) == False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L805" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="805"></td>
          <td id="LC805" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the list in a list of lists whose sum of elements is the highest.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def max_sum_list(lists):<span class="pl-cce">\r\n</span> return max(lists, key=sum)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">805</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_sum_list([[2,3,1]])==[2,3,1] <span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L806" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="806"></td>
          <td id="LC806" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find maximum run of uppercase characters in the given string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def max_run_uppercase(test_str):<span class="pl-cce">\r\n</span>  cnt = 0<span class="pl-cce">\r\n</span>  res = 0<span class="pl-cce">\r\n</span>  for idx in range(0, len(test_str)):<span class="pl-cce">\r\n</span>    if test_str[idx].isupper():<span class="pl-cce">\r\n</span>      cnt += 1<span class="pl-cce">\r\n</span>    else:<span class="pl-cce">\r\n</span>      res = cnt<span class="pl-cce">\r\n</span>      cnt = 0<span class="pl-cce">\r\n</span>  if test_str[len(test_str) - 1].isupper():<span class="pl-cce">\r\n</span>    res = cnt<span class="pl-cce">\r\n</span>  return (res)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">806</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert max_run_uppercase(&#39;GeMKSForGERksISBESt&#39;) == 5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_run_uppercase(&#39;PrECIOusMOVemENTSYT&#39;) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_run_uppercase(&#39;GooGLEFluTTER&#39;) == 4<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L807" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="807"></td>
          <td id="LC807" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the first odd number in a given list of numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def first_odd(nums):<span class="pl-cce">\r\n</span>  first_odd = next((el for el in nums if el%2!=0),-1)<span class="pl-cce">\r\n</span>  return first_odd<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">807</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert first_odd([1,3,5]) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert first_odd([2,4,1,3]) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert first_odd ([8,9,1]) == 9<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L808" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="808"></td>
          <td id="LC808" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check if the given tuples contain the k or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_K(test_tup, K):<span class="pl-cce">\r\n</span>  res = False<span class="pl-cce">\r\n</span>  for ele in test_tup:<span class="pl-cce">\r\n</span>    if ele == K:<span class="pl-cce">\r\n</span>      res = True<span class="pl-cce">\r\n</span>      break<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">808</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_K((10, 4, 5, 6, 8), 6) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_K((1, 2, 3, 4, 5, 6), 7) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_K((7, 8, 9, 44, 11, 12), 11) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L809" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="809"></td>
          <td id="LC809" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_smaller(test_tup1, test_tup2):<span class="pl-cce">\r\n</span>  res = all(x &gt; y for x, y in zip(test_tup1, test_tup2))<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">809</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_smaller((1, 2, 3), (2, 3, 4)) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_smaller((4, 5, 6), (3, 4, 5)) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_smaller((11, 12, 13), (10, 11, 12)) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L810" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="810"></td>
          <td id="LC810" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to iterate over elements repeating each as many times as its count.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from collections import Counter<span class="pl-cce">\r\n</span>def count_variable(a,b,c,d):<span class="pl-cce">\r\n</span>  c = Counter(p=a, q=b, r=c, s=d)<span class="pl-cce">\r\n</span>  return list(c.elements())<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">810</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_variable(4,2,0,-2)==[&#39;p&#39;, &#39;p&#39;, &#39;p&#39;, &#39;p&#39;, &#39;q&#39;, &#39;q&#39;] <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_variable(0,1,2,3)==[&#39;q&#39;, &#39;r&#39;, &#39;r&#39;, &#39;s&#39;, &#39;s&#39;, &#39;s&#39;] <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_variable(11,15,12,23)==[&#39;p&#39;, &#39;p&#39;, &#39;p&#39;, &#39;p&#39;, &#39;p&#39;, &#39;p&#39;, &#39;p&#39;, &#39;p&#39;, &#39;p&#39;, &#39;p&#39;, &#39;p&#39;, &#39;q&#39;, &#39;q&#39;, &#39;q&#39;, &#39;q&#39;, &#39;q&#39;, &#39;q&#39;, &#39;q&#39;, &#39;q&#39;, &#39;q&#39;, &#39;q&#39;, &#39;q&#39;, &#39;q&#39;, &#39;q&#39;, &#39;q&#39;, &#39;q&#39;, &#39;r&#39;, &#39;r&#39;, &#39;r&#39;, &#39;r&#39;, &#39;r&#39;, &#39;r&#39;, &#39;r&#39;, &#39;r&#39;, &#39;r&#39;, &#39;r&#39;, &#39;r&#39;, &#39;r&#39;, &#39;s&#39;, &#39;s&#39;, &#39;s&#39;, &#39;s&#39;, &#39;s&#39;, &#39;s&#39;, &#39;s&#39;, &#39;s&#39;, &#39;s&#39;, &#39;s&#39;, &#39;s&#39;, &#39;s&#39;, &#39;s&#39;, &#39;s&#39;, &#39;s&#39;, &#39;s&#39;, &#39;s&#39;, &#39;s&#39;, &#39;s&#39;, &#39;s&#39;, &#39;s&#39;, &#39;s&#39;, &#39;s&#39;]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L811" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="811"></td>
          <td id="LC811" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check if two lists of tuples are identical or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_identical(test_list1, test_list2):<span class="pl-cce">\r\n</span>  res = test_list1 == test_list2<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">811</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L812" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="812"></td>
          <td id="LC812" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to abbreviate &#39;road&#39; as &#39;rd.&#39; in a given string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def road_rd(street):<span class="pl-cce">\r\n</span>  return (re.sub(&#39;Road$&#39;, &#39;Rd.&#39;, street))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">812</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert road_rd(<span class="pl-cce">\&quot;</span>ravipadu Road<span class="pl-cce">\&quot;</span>)==(&#39;ravipadu Rd.&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert road_rd(<span class="pl-cce">\&quot;</span>palnadu Road<span class="pl-cce">\&quot;</span>)==(&#39;palnadu Rd.&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert road_rd(<span class="pl-cce">\&quot;</span>eshwar enclave Road<span class="pl-cce">\&quot;</span>)==(&#39;eshwar enclave Rd.&#39;)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L813" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="813"></td>
          <td id="LC813" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find length of the string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def string_length(str1):<span class="pl-cce">\r\n</span>    count = 0<span class="pl-cce">\r\n</span>    for char in str1:<span class="pl-cce">\r\n</span>        count += 1<span class="pl-cce">\r\n</span>    return count<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">813</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert string_length(&#39;python&#39;)==6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert string_length(&#39;program&#39;)==7<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert string_length(&#39;language&#39;)==8<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L814" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="814"></td>
          <td id="LC814" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the area of a rombus.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def rombus_area(p,q):<span class="pl-cce">\r\n</span>  area=(p*q)/2<span class="pl-cce">\r\n</span>  return area<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">814</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert rombus_area(10,20)==100<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert rombus_area(10,5)==25<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert rombus_area(4,2)==4<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L815" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="815"></td>
          <td id="LC815" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sort_by_dnf(arr, n):<span class="pl-cce">\r\n</span>  low=0<span class="pl-cce">\r\n</span>  mid=0<span class="pl-cce">\r\n</span>  high=n-1<span class="pl-cce">\r\n</span>  while mid &lt;= high:<span class="pl-cce">\r\n</span>    if arr[mid] == 0:<span class="pl-cce">\r\n</span>      arr[low], arr[mid] = arr[mid], arr[low]<span class="pl-cce">\r\n</span>      low = low + 1<span class="pl-cce">\r\n</span>      mid = mid + 1<span class="pl-cce">\r\n</span>    elif arr[mid] == 1:<span class="pl-cce">\r\n</span>      mid = mid + 1<span class="pl-cce">\r\n</span>    else:<span class="pl-cce">\r\n</span>      arr[mid], arr[high] = arr[high], arr[mid]<span class="pl-cce">\r\n</span>      high = high - 1<span class="pl-cce">\r\n</span>  return arr<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">815</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L816" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="816"></td>
          <td id="LC816" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to clear the values of the given tuples.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def clear_tuple(test_tup):<span class="pl-cce">\r\n</span>  temp = list(test_tup)<span class="pl-cce">\r\n</span>  temp.clear()<span class="pl-cce">\r\n</span>  test_tup = tuple(temp)<span class="pl-cce">\r\n</span>  return (test_tup) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">816</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert clear_tuple((1, 5, 3, 6, 8)) == ()<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert clear_tuple((2, 1, 4 ,5 ,6)) == ()<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert clear_tuple((3, 2, 5, 6, 8)) == ()<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L817" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="817"></td>
          <td id="LC817" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find numbers divisible by m or n from a list of numbers using lambda function.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def div_of_nums(nums,m,n):<span class="pl-cce">\r\n</span> result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) <span class="pl-cce">\r\n</span> return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">817</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert div_of_nums([10,15,14,13,18,12,20],10,5)==[10, 15, 20]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L818" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="818"></td>
          <td id="LC818" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count lower case letters in a given string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def lower_ctr(str):<span class="pl-cce">\r\n</span>      lower_ctr= 0<span class="pl-cce">\r\n</span>      for i in range(len(str)):<span class="pl-cce">\r\n</span>          if str[i] &gt;= &#39;a&#39; and str[i] &lt;= &#39;z&#39;: lower_ctr += 1     <span class="pl-cce">\r\n</span>      return  lower_ctr<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">818</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert lower_ctr(&#39;abc&#39;) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert lower_ctr(&#39;string&#39;) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert lower_ctr(&#39;Python&#39;) == 5<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L819" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="819"></td>
          <td id="LC819" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_duplic(lists):<span class="pl-cce">\r\n</span>    element = []<span class="pl-cce">\r\n</span>    frequency = []<span class="pl-cce">\r\n</span>    if not lists:<span class="pl-cce">\r\n</span>        return element<span class="pl-cce">\r\n</span>    running_count = 1<span class="pl-cce">\r\n</span>    for i in range(len(lists)-1):<span class="pl-cce">\r\n</span>        if lists[i] == lists[i+1]:<span class="pl-cce">\r\n</span>            running_count += 1<span class="pl-cce">\r\n</span>        else:<span class="pl-cce">\r\n</span>            frequency.append(running_count)<span class="pl-cce">\r\n</span>            element.append(lists[i])<span class="pl-cce">\r\n</span>            running_count = 1<span class="pl-cce">\r\n</span>    frequency.append(running_count)<span class="pl-cce">\r\n</span>    element.append(lists[i+1])<span class="pl-cce">\r\n</span>    return element,frequency<span class="pl-cce">\r\n</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">819</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_duplic([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_duplic([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L820" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="820"></td>
          <td id="LC820" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check whether the given month number contains 28 days or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_monthnum_number(monthnum1):<span class="pl-cce">\r\n</span>  if monthnum1 == 2:<span class="pl-cce">\r\n</span>    return True<span class="pl-cce">\r\n</span>  else:<span class="pl-cce">\r\n</span>    return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">820</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_monthnum_number(2)==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_monthnum_number(1)==False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_monthnum_number(3)==False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L821" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="821"></td>
          <td id="LC821" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to merge two dictionaries into a single expression.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import collections as ct<span class="pl-cce">\r\n</span>def merge_dictionaries(dict1,dict2):<span class="pl-cce">\r\n</span>    merged_dict = dict(ct.ChainMap({}, dict1, dict2))<span class="pl-cce">\r\n</span>    return merged_dict<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">821</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert merge_dictionaries({ <span class="pl-cce">\&quot;</span>R<span class="pl-cce">\&quot;</span>: <span class="pl-cce">\&quot;</span>Red<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>B<span class="pl-cce">\&quot;</span>: <span class="pl-cce">\&quot;</span>Black<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>P<span class="pl-cce">\&quot;</span>: <span class="pl-cce">\&quot;</span>Pink<span class="pl-cce">\&quot;</span> }, { <span class="pl-cce">\&quot;</span>G<span class="pl-cce">\&quot;</span>: <span class="pl-cce">\&quot;</span>Green<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>W<span class="pl-cce">\&quot;</span>: <span class="pl-cce">\&quot;</span>White<span class="pl-cce">\&quot;</span> })=={&#39;B&#39;: &#39;Black&#39;, &#39;R&#39;: &#39;Red&#39;, &#39;P&#39;: &#39;Pink&#39;, &#39;G&#39;: &#39;Green&#39;, &#39;W&#39;: &#39;White&#39;}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert merge_dictionaries({ <span class="pl-cce">\&quot;</span>R<span class="pl-cce">\&quot;</span>: <span class="pl-cce">\&quot;</span>Red<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>B<span class="pl-cce">\&quot;</span>: <span class="pl-cce">\&quot;</span>Black<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>P<span class="pl-cce">\&quot;</span>: <span class="pl-cce">\&quot;</span>Pink<span class="pl-cce">\&quot;</span> },{ <span class="pl-cce">\&quot;</span>O<span class="pl-cce">\&quot;</span>: <span class="pl-cce">\&quot;</span>Orange<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>W<span class="pl-cce">\&quot;</span>: <span class="pl-cce">\&quot;</span>White<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>B<span class="pl-cce">\&quot;</span>: <span class="pl-cce">\&quot;</span>Black<span class="pl-cce">\&quot;</span> })=={&#39;O&#39;: &#39;Orange&#39;, &#39;P&#39;: &#39;Pink&#39;, &#39;B&#39;: &#39;Black&#39;, &#39;W&#39;: &#39;White&#39;, &#39;R&#39;: &#39;Red&#39;}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert merge_dictionaries({ <span class="pl-cce">\&quot;</span>G<span class="pl-cce">\&quot;</span>: <span class="pl-cce">\&quot;</span>Green<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>W<span class="pl-cce">\&quot;</span>: <span class="pl-cce">\&quot;</span>White<span class="pl-cce">\&quot;</span> },{ <span class="pl-cce">\&quot;</span>O<span class="pl-cce">\&quot;</span>: <span class="pl-cce">\&quot;</span>Orange<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>W<span class="pl-cce">\&quot;</span>: <span class="pl-cce">\&quot;</span>White<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>B<span class="pl-cce">\&quot;</span>: <span class="pl-cce">\&quot;</span>Black<span class="pl-cce">\&quot;</span> })=={&#39;W&#39;: &#39;White&#39;, &#39;O&#39;: &#39;Orange&#39;, &#39;G&#39;: &#39;Green&#39;, &#39;B&#39;: &#39;Black&#39;}<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L822" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="822"></td>
          <td id="LC822" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to return true if the password is valid.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def pass_validity(p):<span class="pl-cce">\r\n</span> x = True<span class="pl-cce">\r\n</span> while x:  <span class="pl-cce">\r\n</span>    if (len(p)&lt;6 or len(p)&gt;12):<span class="pl-cce">\r\n</span>        break<span class="pl-cce">\r\n</span>    elif not re.search(<span class="pl-cce">\&quot;</span>[a-z]<span class="pl-cce">\&quot;</span>,p):<span class="pl-cce">\r\n</span>        break<span class="pl-cce">\r\n</span>    elif not re.search(<span class="pl-cce">\&quot;</span>[0-9]<span class="pl-cce">\&quot;</span>,p):<span class="pl-cce">\r\n</span>        break<span class="pl-cce">\r\n</span>    elif not re.search(<span class="pl-cce">\&quot;</span>[A-Z]<span class="pl-cce">\&quot;</span>,p):<span class="pl-cce">\r\n</span>        break<span class="pl-cce">\r\n</span>    elif not re.search(<span class="pl-cce">\&quot;</span>[$#@]<span class="pl-cce">\&quot;</span>,p):<span class="pl-cce">\r\n</span>        break<span class="pl-cce">\r\n</span>    elif re.search(<span class="pl-cce">\&quot;\\</span>s<span class="pl-cce">\&quot;</span>,p):<span class="pl-cce">\r\n</span>        break<span class="pl-cce">\r\n</span>    else:<span class="pl-cce">\r\n</span>        return True<span class="pl-cce">\r\n</span>        x=False<span class="pl-cce">\r\n</span>        break<span class="pl-cce">\r\n\r\n</span> if x:<span class="pl-cce">\r\n</span>    return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">822</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert pass_validity(<span class="pl-cce">\&quot;</span>password<span class="pl-cce">\&quot;</span>)==False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert pass_validity(<span class="pl-cce">\&quot;</span>Password@10<span class="pl-cce">\&quot;</span>)==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert pass_validity(<span class="pl-cce">\&quot;</span>password@10<span class="pl-cce">\&quot;</span>)==False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L823" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="823"></td>
          <td id="LC823" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check if the given string starts with a substring using regex.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re <span class="pl-cce">\r\n</span>def check_substring(string, sample) : <span class="pl-cce">\r\n</span>  if (sample in string): <span class="pl-cce">\r\n</span>      y = <span class="pl-cce">\&quot;\\</span>A<span class="pl-cce">\&quot;</span> + sample <span class="pl-cce">\r\n</span>      x = re.search(y, string) <span class="pl-cce">\r\n</span>      if x : <span class="pl-cce">\r\n</span>          return (<span class="pl-cce">\&quot;</span>string starts with the given substring<span class="pl-cce">\&quot;</span>) <span class="pl-cce">\r\n</span>      else : <span class="pl-cce">\r\n</span>          return (<span class="pl-cce">\&quot;</span>string doesnt start with the given substring<span class="pl-cce">\&quot;</span>) <span class="pl-cce">\r\n</span>  else : <span class="pl-cce">\r\n</span>      return (<span class="pl-cce">\&quot;</span>entered string isnt a substring<span class="pl-cce">\&quot;</span>)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">823</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_substring(<span class="pl-cce">\&quot;</span>dreams for dreams makes life fun<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>makes<span class="pl-cce">\&quot;</span>) == &#39;string doesnt start with the given substring&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_substring(<span class="pl-cce">\&quot;</span>Hi there how are you Hi alex<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>Hi<span class="pl-cce">\&quot;</span>) == &#39;string starts with the given substring&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_substring(<span class="pl-cce">\&quot;</span>Its been a long day<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>been<span class="pl-cce">\&quot;</span>) == &#39;string doesnt start with the given substring&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L824" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="824"></td>
          <td id="LC824" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to remove even numbers from a given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def remove_even(l):<span class="pl-cce">\r\n</span>    for i in l:<span class="pl-cce">\r\n</span>        if i % 2 == 0:<span class="pl-cce">\r\n</span>            l.remove(i)<span class="pl-cce">\r\n</span>    return l<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">824</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_even([1,3,5,2]) == [1,3,5]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_even([5,6,7]) == [5,7]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_even([1,2,3,4]) == [1,3]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L825" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="825"></td>
          <td id="LC825" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to access multiple elements of specified index from a given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def access_elements(nums, list_index):<span class="pl-cce">\r\n</span>    result = [nums[i] for i in list_index]<span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">825</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert access_elements([1, 2, 3, 4, 5],[1,2]) == [2,3]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert access_elements([1,0,2,3],[0,1]) == [1,0]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L826" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="826"></td>
          <td id="LC826" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the type of triangle from the given sides.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_Type_Of_Triangle(a,b,c): <span class="pl-cce">\r\n</span>    sqa = pow(a,2) <span class="pl-cce">\r\n</span>    sqb = pow(b,2) <span class="pl-cce">\r\n</span>    sqc = pow(c,2) <span class="pl-cce">\r\n</span>    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): <span class="pl-cce">\r\n</span>        return (<span class="pl-cce">\&quot;</span>Right-angled Triangle<span class="pl-cce">\&quot;</span>) <span class="pl-cce">\r\n</span>    elif (sqa &gt; sqc + sqb or sqb &gt; sqa + sqc or sqc &gt; sqa + sqb): <span class="pl-cce">\r\n</span>        return (<span class="pl-cce">\&quot;</span>Obtuse-angled Triangle<span class="pl-cce">\&quot;</span>) <span class="pl-cce">\r\n</span>    else: <span class="pl-cce">\r\n</span>        return (<span class="pl-cce">\&quot;</span>Acute-angled Triangle<span class="pl-cce">\&quot;</span>) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">826</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_Type_Of_Triangle(1,2,3) == <span class="pl-cce">\&quot;</span>Obtuse-angled Triangle<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_Type_Of_Triangle(2,2,2) == <span class="pl-cce">\&quot;</span>Acute-angled Triangle<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_Type_Of_Triangle(1,0,1) == <span class="pl-cce">\&quot;</span>Right-angled Triangle<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L827" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="827"></td>
          <td id="LC827" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to sum a specific column of a list in a given list of lists.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sum_column(list1, C):<span class="pl-cce">\r\n</span>    result = sum(row[C] for row in list1)<span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">827</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L828" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="828"></td>
          <td id="LC828" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to count alphabets,digits and special charactes in a given string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_alpha_dig_spl(string):<span class="pl-cce">\r\n</span>  alphabets=digits = special = 0<span class="pl-cce">\r\n</span>  for i in range(len(string)):<span class="pl-cce">\r\n</span>    if(string[i].isalpha()):<span class="pl-cce">\r\n</span>        alphabets = alphabets + 1<span class="pl-cce">\r\n</span>    elif(string[i].isdigit()):<span class="pl-cce">\r\n</span>        digits = digits + 1<span class="pl-cce">\r\n</span>    else:<span class="pl-cce">\r\n</span>        special = special + 1<span class="pl-cce">\r\n</span>  return (alphabets,digits,special)   <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">828</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_alpha_dig_spl(<span class="pl-cce">\&quot;</span>abc!@#123<span class="pl-cce">\&quot;</span>)==(3,3,3)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_alpha_dig_spl(<span class="pl-cce">\&quot;</span>dgsuy@#$%&amp;1255<span class="pl-cce">\&quot;</span>)==(5,4,5)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_alpha_dig_spl(<span class="pl-cce">\&quot;</span>fjdsif627348#%$^&amp;<span class="pl-cce">\&quot;</span>)==(6,6,5)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L829" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="829"></td>
          <td id="LC829" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find out the second most repeated (or frequent) string in the given sequence.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from collections import Counter <span class="pl-cce">\r\n\t\r\n</span>def second_frequent(input): <span class="pl-cce">\r\n\t</span>dict = Counter(input) <span class="pl-cce">\r\n\t</span>value = sorted(dict.values(), reverse=True)  <span class="pl-cce">\r\n\t</span>second_large = value[1] <span class="pl-cce">\r\n\t</span>for (key, val) in dict.items(): <span class="pl-cce">\r\n\t\t</span>if val == second_large: <span class="pl-cce">\r\n\t\t\t</span>return (key) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">829</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert second_frequent([&#39;aaa&#39;,&#39;bbb&#39;,&#39;ccc&#39;,&#39;bbb&#39;,&#39;aaa&#39;,&#39;aaa&#39;]) == &#39;bbb&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert second_frequent([&#39;abc&#39;,&#39;bcd&#39;,&#39;abc&#39;,&#39;bcd&#39;,&#39;bcd&#39;,&#39;bcd&#39;]) == &#39;abc&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert second_frequent([&#39;cdma&#39;,&#39;gsm&#39;,&#39;hspa&#39;,&#39;gsm&#39;,&#39;cdma&#39;,&#39;cdma&#39;]) == &#39;gsm&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L830" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="830"></td>
          <td id="LC830" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to round up a number to specific digits.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math<span class="pl-cce">\r\n</span>def round_up(a, digits):<span class="pl-cce">\r\n</span>    n = 10**-digits<span class="pl-cce">\r\n</span>    return round(math.ceil(a / n) * n, digits)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">830</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert round_up(123.01247,0)==124<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert round_up(123.01247,1)==123.1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert round_up(123.01247,2)==123.02<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L831" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="831"></td>
          <td id="LC831" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count equal element pairs from the given array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_Pairs(arr,n): <span class="pl-cce">\r\n</span>    cnt = 0; <span class="pl-cce">\r\n</span>    for i in range(n): <span class="pl-cce">\r\n</span>        for j in range(i + 1,n): <span class="pl-cce">\r\n</span>            if (arr[i] == arr[j]): <span class="pl-cce">\r\n</span>                cnt += 1; <span class="pl-cce">\r\n</span>    return cnt; <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">831</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Pairs([1,1,1,1],4) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Pairs([1,5,1],3) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Pairs([3,2,1,7,8,9],6) == 0<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L832" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="832"></td>
          <td id="LC832" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to extract the maximum numeric value from a string by using regex.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re <span class="pl-cce">\r\n</span>def extract_max(input): <span class="pl-cce">\r\n\t</span>numbers = re.findall(&#39;<span class="pl-cce">\\</span>d+&#39;,input) <span class="pl-cce">\r\n\t</span>numbers = map(int,numbers) <span class="pl-cce">\r\n\t</span>return max(numbers)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">832</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_max(&#39;100klh564abc365bg&#39;) == 564<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_max(&#39;hello300how546mer231&#39;) == 546<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_max(&#39;its233beenalong343journey234&#39;) == 343<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L833" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="833"></td>
          <td id="LC833" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to get dictionary keys as a list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def get_key(dict): <span class="pl-cce">\r\n</span>    list = [] <span class="pl-cce">\r\n</span>    for key in dict.keys(): <span class="pl-cce">\r\n</span>        list.append(key)           <span class="pl-cce">\r\n</span>    return list<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">833</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert get_key({1:&#39;python&#39;,2:&#39;java&#39;})==[1,2]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_key({10:&#39;red&#39;,20:&#39;blue&#39;,30:&#39;black&#39;})==[10,20,30]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_key({27:&#39;language&#39;,39:&#39;java&#39;,44:&#39;little&#39;})==[27,39,44]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L834" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="834"></td>
          <td id="LC834" class="blob-code blob-code-inner js-file-line">{&quot;text&quot;: &quot;Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.&quot;, &quot;code&quot;: &quot;def generate_matrix(n):\r\n        if n&lt;=0:\r\n            return [] \r\n        matrix=[row[:] for row in [[0]*n]*n]        \r\n        row_st=0\r\n        row_ed=n-1        \r\n        col_st=0\r\n        col_ed=n-1\r\n        current=1        \r\n        while (True):\r\n            if current&gt;n*n:\r\n                break\r\n            for c in range (col_st, col_ed+1):\r\n                matrix[row_st][c]=current\r\n                current+=1\r\n            row_st+=1\r\n            for r in range (row_st, row_ed+1):\r\n                matrix[r][col_ed]=current\r\n                current+=1\r\n            col_ed-=1\r\n            for c in range (col_ed, col_st-1, -1):\r\n                matrix[row_ed][c]=current\r\n                current+=1\r\n            row_ed-=1\r\n            for r in range (row_ed, row_st-1, -1):\r\n                matrix[r][col_st]=current\r\n                current+=1\r\n            col_st+=1\r\n        return matrix&quot;, &quot;task_id&quot;: 834, &quot;test_setup_code&quot;: &quot;&quot;, &quot;test_list&quot;: [&quot;assert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] &quot;, &quot;assert generate_matrix(2)==[[1,2],[4,3]]&quot;, &quot;assert generate_matrix(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]&quot;], &quot;challenge_test_list&quot;: []}</td>
        </tr>
        <tr>
          <td id="L835" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="835"></td>
          <td id="LC835" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the slope of a line.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def slope(x1,y1,x2,y2): <span class="pl-cce">\r\n</span>    return (float)(y2-y1)/(x2-x1)  <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">835</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert slope(4,2,2,5) == -1.5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert slope(2,4,4,6) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert slope(1,2,4,2) == 0<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L836" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="836"></td>
          <td id="LC836" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find length of the subarray having maximum sum.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from sys import maxsize <span class="pl-cce">\r\n</span>def max_sub_array_sum(a,size): <span class="pl-cce">\r\n\t</span>max_so_far = -maxsize - 1<span class="pl-cce">\r\n\t</span>max_ending_here = 0<span class="pl-cce">\r\n\t</span>start = 0<span class="pl-cce">\r\n\t</span>end = 0<span class="pl-cce">\r\n\t</span>s = 0<span class="pl-cce">\r\n\t</span>for i in range(0,size): <span class="pl-cce">\r\n\t\t</span>max_ending_here += a[i] <span class="pl-cce">\r\n\t\t</span>if max_so_far &lt; max_ending_here: <span class="pl-cce">\r\n\t\t\t</span>max_so_far = max_ending_here <span class="pl-cce">\r\n\t\t\t</span>start = s <span class="pl-cce">\r\n\t\t\t</span>end = i <span class="pl-cce">\r\n\t\t</span>if max_ending_here &lt; 0: <span class="pl-cce">\r\n\t\t\t</span>max_ending_here = 0<span class="pl-cce">\r\n\t\t\t</span>s = i+1<span class="pl-cce">\r\n\t</span>return (end - start + 1)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">836</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_sub_array_sum([1, -2, 1, 1, -2, 1],6) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_sub_array_sum([-1, -2, 3, 4, 5],5) == 3<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L837" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="837"></td>
          <td id="LC837" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the cube sum of first n odd natural numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def cube_Sum(n): <span class="pl-cce">\r\n</span>    sum = 0   <span class="pl-cce">\r\n</span>    for i in range(0,n) : <span class="pl-cce">\r\n</span>        sum += (2*i+1)*(2*i+1)*(2*i+1) <span class="pl-cce">\r\n</span>    return sum<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">837</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert cube_Sum(2) == 28<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert cube_Sum(3) == 153<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert cube_Sum(4) == 496<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L838" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="838"></td>
          <td id="LC838" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find minimum number swaps required to make two binary strings equal.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def min_Swaps(s1,s2) :  <span class="pl-cce">\r\n</span>    c0 = 0; c1 = 0;  <span class="pl-cce">\r\n</span>    for i in range(len(s1)) :  <span class="pl-cce">\r\n</span>        if (s1[i] == &#39;0&#39; and s2[i] == &#39;1&#39;) : <span class="pl-cce">\r\n</span>            c0 += 1;    <span class="pl-cce">\r\n</span>        elif (s1[i] == &#39;1&#39; and s2[i] == &#39;0&#39;) : <span class="pl-cce">\r\n</span>            c1 += 1;  <span class="pl-cce">\r\n</span>    result = c0 // 2 + c1 // 2;  <span class="pl-cce">\r\n</span>    if (c0 % 2 == 0 and c1 % 2 == 0) : <span class="pl-cce">\r\n</span>        return result;  <span class="pl-cce">\r\n</span>    elif ((c0 + c1) % 2 == 0) : <span class="pl-cce">\r\n</span>        return result + 2;  <span class="pl-cce">\r\n</span>    else : <span class="pl-cce">\r\n</span>        return -1;  <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">838</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert min_Swaps(<span class="pl-cce">\&quot;</span>0011<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>1111<span class="pl-cce">\&quot;</span>) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_Swaps(<span class="pl-cce">\&quot;</span>00011<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>01001<span class="pl-cce">\&quot;</span>) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_Swaps(<span class="pl-cce">\&quot;</span>111<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>111<span class="pl-cce">\&quot;</span>) == 0<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L839" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="839"></td>
          <td id="LC839" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to sort the tuples alphabetically by the first item of each tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sort_tuple(tup): <span class="pl-cce">\r\n\t</span>n = len(tup) <span class="pl-cce">\r\n\t</span>for i in range(n): <span class="pl-cce">\r\n\t\t</span>for j in range(n-i-1): <span class="pl-cce">\r\n\t\t\t</span>if tup[j][0] &gt; tup[j + 1][0]: <span class="pl-cce">\r\n\t\t\t\t</span>tup[j], tup[j + 1] = tup[j + 1], tup[j] <span class="pl-cce">\r\n\t</span>return tup<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">839</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_tuple([(<span class="pl-cce">\&quot;</span>Amana<span class="pl-cce">\&quot;</span>, 28), (<span class="pl-cce">\&quot;</span>Zenat<span class="pl-cce">\&quot;</span>, 30), (<span class="pl-cce">\&quot;</span>Abhishek<span class="pl-cce">\&quot;</span>, 29),(<span class="pl-cce">\&quot;</span>Nikhil<span class="pl-cce">\&quot;</span>, 21), (<span class="pl-cce">\&quot;</span>B<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>C<span class="pl-cce">\&quot;</span>)]) == [(&#39;Abhishek&#39;, 29), (&#39;Amana&#39;, 28), (&#39;B&#39;, &#39;C&#39;), (&#39;Nikhil&#39;, 21), (&#39;Zenat&#39;, 30)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_tuple([(<span class="pl-cce">\&quot;</span>aaaa<span class="pl-cce">\&quot;</span>, 28), (<span class="pl-cce">\&quot;</span>aa<span class="pl-cce">\&quot;</span>, 30), (<span class="pl-cce">\&quot;</span>bab<span class="pl-cce">\&quot;</span>, 29), (<span class="pl-cce">\&quot;</span>bb<span class="pl-cce">\&quot;</span>, 21), (<span class="pl-cce">\&quot;</span>csa<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>C<span class="pl-cce">\&quot;</span>)]) == [(&#39;aa&#39;, 30), (&#39;aaaa&#39;, 28), (&#39;bab&#39;, 29), (&#39;bb&#39;, 21), (&#39;csa&#39;, &#39;C&#39;)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_tuple([(<span class="pl-cce">\&quot;</span>Sarala<span class="pl-cce">\&quot;</span>, 28), (<span class="pl-cce">\&quot;</span>Ayesha<span class="pl-cce">\&quot;</span>, 30), (<span class="pl-cce">\&quot;</span>Suman<span class="pl-cce">\&quot;</span>, 29),(<span class="pl-cce">\&quot;</span>Sai<span class="pl-cce">\&quot;</span>, 21), (<span class="pl-cce">\&quot;</span>G<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>H<span class="pl-cce">\&quot;</span>)]) == [(&#39;Ayesha&#39;, 30), (&#39;G&#39;, &#39;H&#39;), (&#39;Sai&#39;, 21), (&#39;Sarala&#39;, 28), (&#39;Suman&#39;, 29)]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L840" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="840"></td>
          <td id="LC840" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def Check_Solution(a,b,c):  <span class="pl-cce">\r\n</span>    if b == 0:  <span class="pl-cce">\r\n</span>        return (<span class="pl-cce">\&quot;</span>Yes<span class="pl-cce">\&quot;</span>)  <span class="pl-cce">\r\n</span>    else: <span class="pl-cce">\r\n</span>        return (<span class="pl-cce">\&quot;</span>No<span class="pl-cce">\&quot;</span>)  <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">840</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert Check_Solution(2,0,-1) == <span class="pl-cce">\&quot;</span>Yes<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Check_Solution(1,-5,6) == <span class="pl-cce">\&quot;</span>No<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Check_Solution(2,0,2) == <span class="pl-cce">\&quot;</span>Yes<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L841" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="841"></td>
          <td id="LC841" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to count the number of inversions in the given array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def get_inv_count(arr, n): <span class="pl-cce">\r\n\t</span>inv_count = 0<span class="pl-cce">\r\n\t</span>for i in range(n): <span class="pl-cce">\r\n\t\t</span>for j in range(i + 1, n): <span class="pl-cce">\r\n\t\t\t</span>if (arr[i] &gt; arr[j]): <span class="pl-cce">\r\n\t\t\t\t</span>inv_count += 1<span class="pl-cce">\r\n\t</span>return inv_count <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">841</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert get_inv_count([1, 20, 6, 4, 5], 5) == 5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_inv_count([8, 4, 2, 1], 4) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_inv_count([3, 1, 2], 3) == 2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L842" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="842"></td>
          <td id="LC842" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the number which occurs for odd number of times in the given array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def get_odd_occurence(arr, arr_size):<span class="pl-cce">\r\n</span>  for i in range(0, arr_size):<span class="pl-cce">\r\n</span>    count = 0<span class="pl-cce">\r\n</span>    for j in range(0, arr_size):<span class="pl-cce">\r\n</span>      if arr[i] == arr[j]:<span class="pl-cce">\r\n</span>        count += 1<span class="pl-cce">\r\n</span>    if (count % 2 != 0):<span class="pl-cce">\r\n</span>      return arr[i]<span class="pl-cce">\r\n</span>  return -1<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">842</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7) == 5<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L843" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="843"></td>
          <td id="LC843" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import heapq<span class="pl-cce">\r\n</span>def nth_super_ugly_number(n, primes):<span class="pl-cce">\r\n</span>    uglies = [1]<span class="pl-cce">\r\n</span>    def gen(prime):<span class="pl-cce">\r\n</span>        for ugly in uglies:<span class="pl-cce">\r\n</span>            yield ugly * prime<span class="pl-cce">\r\n</span>    merged = heapq.merge(*map(gen, primes))<span class="pl-cce">\r\n</span>    while len(uglies) &lt; n:<span class="pl-cce">\r\n</span>        ugly = next(merged)<span class="pl-cce">\r\n</span>        if ugly != uglies[-1]:<span class="pl-cce">\r\n</span>            uglies.append(ugly)<span class="pl-cce">\r\n</span>    return uglies[-1]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">843</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert nth_super_ugly_number(12,[2,7,13,19])==32<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert nth_super_ugly_number(10,[2,7,13,19])==26<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert nth_super_ugly_number(100,[2,7,13,19])==5408<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L844" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="844"></td>
          <td id="LC844" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the kth element in an array containing odd elements first and then even elements.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def get_Number(n, k): <span class="pl-cce">\r\n</span>    arr = [0] * n; <span class="pl-cce">\r\n</span>    i = 0; <span class="pl-cce">\r\n</span>    odd = 1; <span class="pl-cce">\r\n</span>    while (odd &lt;= n):   <span class="pl-cce">\r\n</span>        arr[i] = odd; <span class="pl-cce">\r\n</span>        i += 1; <span class="pl-cce">\r\n</span>        odd += 2;<span class="pl-cce">\r\n</span>    even = 2; <span class="pl-cce">\r\n</span>    while (even &lt;= n): <span class="pl-cce">\r\n</span>        arr[i] = even; <span class="pl-cce">\r\n</span>        i += 1;<span class="pl-cce">\r\n</span>        even += 2; <span class="pl-cce">\r\n</span>    return arr[k - 1]; <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">844</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert get_Number(8,5) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_Number(7,2) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_Number(5,2) == 3<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L845" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="845"></td>
          <td id="LC845" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count the number of digits in factorial of a given number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math <span class="pl-cce">\r\n</span>def find_Digits(n): <span class="pl-cce">\r\n</span>    if (n &lt; 0): <span class="pl-cce">\r\n</span>        return 0;<span class="pl-cce">\r\n</span>    if (n &lt;= 1): <span class="pl-cce">\r\n</span>        return 1; <span class="pl-cce">\r\n</span>    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); <span class="pl-cce">\r\n</span>    return math.floor(x) + 1; <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">845</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Digits(7) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Digits(5) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Digits(4) == 2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L846" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="846"></td>
          <td id="LC846" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the minimum number of platforms required for a railway/bus station.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_platform(arr, dep, n): <span class="pl-cce">\r\n</span>    arr.sort() <span class="pl-cce">\r\n</span>    dep.sort() <span class="pl-cce">\r\n</span>    plat_needed = 1<span class="pl-cce">\r\n</span>    result = 1<span class="pl-cce">\r\n</span>    i = 1<span class="pl-cce">\r\n</span>    j = 0<span class="pl-cce">\r\n</span>    while (i &lt; n and j &lt; n): <span class="pl-cce">\r\n</span>        if (arr[i] &lt;= dep[j]):           <span class="pl-cce">\r\n</span>            plat_needed+= 1<span class="pl-cce">\r\n</span>            i+= 1<span class="pl-cce">\r\n</span>        elif (arr[i] &gt; dep[j]):           <span class="pl-cce">\r\n</span>            plat_needed-= 1<span class="pl-cce">\r\n</span>            j+= 1<span class="pl-cce">\r\n</span>        if (plat_needed &gt; result):  <span class="pl-cce">\r\n</span>            result = plat_needed           <span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">846</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_platform([100,200,300,400],[700,800,900,1000],4)==4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_platform([5,6,7,8],[4,3,2,1],4)==1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L847" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="847"></td>
          <td id="LC847" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to copy a list from a singleton tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def lcopy(xs):<span class="pl-cce">\n</span>  return xs[:]<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">847</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert lcopy([1, 2, 3]) == [1, 2, 3]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert lcopy([4, 5, 6]) == [4, 5, 6]<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L848" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="848"></td>
          <td id="LC848" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the area of a trapezium.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def area_trapezium(base1,base2,height):<span class="pl-cce">\r\n</span> area = 0.5 * (base1 + base2) * height<span class="pl-cce">\r\n</span> return area<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">848</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert area_trapezium(6,9,4)==30<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert area_trapezium(10,20,30)==450<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert area_trapezium(15,25,35)==700<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L849" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="849"></td>
          <td id="LC849" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find sum of all prime divisors of a given number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def Sum(N): <span class="pl-cce">\r\n</span>    SumOfPrimeDivisors = [0]*(N + 1)   <span class="pl-cce">\r\n</span>    for i in range(2,N + 1) : <span class="pl-cce">\r\n</span>        if (SumOfPrimeDivisors[i] == 0) : <span class="pl-cce">\r\n</span>            for j in range(i,N + 1,i) : <span class="pl-cce">\r\n</span>                SumOfPrimeDivisors[j] += i           <span class="pl-cce">\r\n</span>    return SumOfPrimeDivisors[N] <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">849</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert Sum(60) == 10<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Sum(39) == 16<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Sum(40) == 7<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L850" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="850"></td>
          <td id="LC850" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check if a triangle of positive area is possible with the given angles.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def is_triangleexists(a,b,c): <span class="pl-cce">\r\n</span>    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): <span class="pl-cce">\r\n</span>        if((a + b)&gt;= c or (b + c)&gt;= a or (a + c)&gt;= b): <span class="pl-cce">\r\n</span>            return True <span class="pl-cce">\r\n</span>        else:<span class="pl-cce">\r\n</span>            return False<span class="pl-cce">\r\n</span>    else:<span class="pl-cce">\r\n</span>        return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">850</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert is_triangleexists(50,60,70)==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_triangleexists(90,45,45)==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_triangleexists(150,30,70)==False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L851" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="851"></td>
          <td id="LC851" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find sum of inverse of divisors.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def Sum_of_Inverse_Divisors(N,Sum): <span class="pl-cce">\r\n</span>    ans = float(Sum)*1.0 /float(N);  <span class="pl-cce">\r\n</span>    return round(ans,2); <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">851</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert Sum_of_Inverse_Divisors(6,12) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Sum_of_Inverse_Divisors(9,13) == 1.44<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Sum_of_Inverse_Divisors(1,4) == 4<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L852" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="852"></td>
          <td id="LC852" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to remove negative numbers from a list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def remove_negs(num_list): <span class="pl-cce">\r\n</span>    for item in num_list: <span class="pl-cce">\r\n</span>        if item &lt; 0: <span class="pl-cce">\r\n</span>           num_list.remove(item) <span class="pl-cce">\r\n</span>    return num_list<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">852</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_negs([1,-2,3,-4]) == [1,3]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_negs([1,2,3,-4]) == [1,2,3]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_negs([4,5,-6,7,-8]) == [4,5,7]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L853" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="853"></td>
          <td id="LC853" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find sum of odd factors of a number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math<span class="pl-cce">\r\n</span>def sum_of_odd_Factors(n): <span class="pl-cce">\r\n</span>    res = 1<span class="pl-cce">\r\n</span>    while n % 2 == 0: <span class="pl-cce">\r\n</span>        n = n // 2 <span class="pl-cce">\r\n</span>    for i in range(3,int(math.sqrt(n) + 1)): <span class="pl-cce">\r\n</span>        count = 0<span class="pl-cce">\r\n</span>        curr_sum = 1<span class="pl-cce">\r\n</span>        curr_term = 1<span class="pl-cce">\r\n</span>        while n % i == 0: <span class="pl-cce">\r\n</span>            count+=1 <span class="pl-cce">\r\n</span>            n = n // i <span class="pl-cce">\r\n</span>            curr_term *= i <span class="pl-cce">\r\n</span>            curr_sum += curr_term    <span class="pl-cce">\r\n</span>        res *= curr_sum  <span class="pl-cce">\r\n</span>    if n &gt;= 2: <span class="pl-cce">\r\n</span>        res *= (1 + n) <span class="pl-cce">\r\n</span>    return res <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">853</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_of_odd_Factors(30) == 24<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_of_odd_Factors(18) == 13<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_of_odd_Factors(2) == 1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L854" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="854"></td>
          <td id="LC854" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import heapq as hq<span class="pl-cce">\r\n</span>def raw_heap(rawheap):<span class="pl-cce">\r\n</span>  hq.heapify(rawheap)<span class="pl-cce">\r\n</span>  return rawheap<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">854</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L855" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="855"></td>
          <td id="LC855" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check for even parity of a given number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_Even_Parity(x): <span class="pl-cce">\r\n</span>    parity = 0<span class="pl-cce">\r\n</span>    while (x != 0): <span class="pl-cce">\r\n</span>        x = x &amp; (x - 1) <span class="pl-cce">\r\n</span>        parity += 1<span class="pl-cce">\r\n</span>    if (parity % 2 == 0): <span class="pl-cce">\r\n</span>        return True<span class="pl-cce">\r\n</span>    else: <span class="pl-cce">\r\n</span>        return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">855</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_Even_Parity(10) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_Even_Parity(11) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_Even_Parity(18) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L856" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="856"></td>
          <td id="LC856" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find minimum adjacent swaps required to sort binary array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_Min_Swaps(arr,n) : <span class="pl-cce">\r\n</span>    noOfZeroes = [0] * n <span class="pl-cce">\r\n</span>    count = 0 <span class="pl-cce">\r\n</span>    noOfZeroes[n - 1] = 1 - arr[n - 1] <span class="pl-cce">\r\n</span>    for i in range(n-2,-1,-1) : <span class="pl-cce">\r\n</span>        noOfZeroes[i] = noOfZeroes[i + 1] <span class="pl-cce">\r\n</span>        if (arr[i] == 0) : <span class="pl-cce">\r\n</span>            noOfZeroes[i] = noOfZeroes[i] + 1<span class="pl-cce">\r\n</span>    for i in range(0,n) : <span class="pl-cce">\r\n</span>        if (arr[i] == 1) : <span class="pl-cce">\r\n</span>            count = count + noOfZeroes[i] <span class="pl-cce">\r\n</span>    return count <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">856</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Min_Swaps([1,0,1,0],4) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Min_Swaps([0,1,0],3) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Min_Swaps([0,0,1,1,0],5) == 2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L857" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="857"></td>
          <td id="LC857" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to list out the list of given strings individually using map function.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def listify_list(list1):<span class="pl-cce">\r\n</span>  result = list(map(list,list1)) <span class="pl-cce">\r\n</span>  return result <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">857</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert listify_list([&#39;Red&#39;, &#39;Blue&#39;, &#39;Black&#39;, &#39;White&#39;, &#39;Pink&#39;])==[[&#39;R&#39;, &#39;e&#39;, &#39;d&#39;], [&#39;B&#39;, &#39;l&#39;, &#39;u&#39;, &#39;e&#39;], [&#39;B&#39;, &#39;l&#39;, &#39;a&#39;, &#39;c&#39;, &#39;k&#39;], [&#39;W&#39;, &#39;h&#39;, &#39;i&#39;, &#39;t&#39;, &#39;e&#39;], [&#39;P&#39;, &#39;i&#39;, &#39;n&#39;, &#39;k&#39;]]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert listify_list([&#39;python&#39;])==[[&#39;p&#39;, &#39;y&#39;, &#39;t&#39;, &#39;h&#39;, &#39;o&#39;, &#39;n&#39;]]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert listify_list([&#39; red &#39;, &#39;green&#39;,&#39; black&#39;, &#39;blue &#39;,&#39; orange&#39;, &#39;brown&#39;])==[[&#39; &#39;, &#39;r&#39;, &#39;e&#39;, &#39;d&#39;, &#39; &#39;], [&#39;g&#39;, &#39;r&#39;, &#39;e&#39;, &#39;e&#39;, &#39;n&#39;], [&#39; &#39;, &#39;b&#39;, &#39;l&#39;, &#39;a&#39;, &#39;c&#39;, &#39;k&#39;], [&#39;b&#39;, &#39;l&#39;, &#39;u&#39;, &#39;e&#39;, &#39; &#39;], [&#39; &#39;, &#39;o&#39;, &#39;r&#39;, &#39;a&#39;, &#39;n&#39;, &#39;g&#39;, &#39;e&#39;], [&#39;b&#39;, &#39;r&#39;, &#39;o&#39;, &#39;w&#39;, &#39;n&#39;]]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L858" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="858"></td>
          <td id="LC858" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to count number of lists in a given list of lists and square the count.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_list(input_list): <span class="pl-cce">\r\n</span>    return (len(input_list))**2<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">858</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L859" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="859"></td>
          <td id="LC859" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to generate all sublists of a given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from itertools import combinations<span class="pl-cce">\r\n</span>def sub_lists(my_list):<span class="pl-cce">\r\n\t</span>subs = []<span class="pl-cce">\r\n\t</span>for i in range(0, len(my_list)+1):<span class="pl-cce">\r\n\t</span>  temp = [list(x) for x in combinations(my_list, i)]<span class="pl-cce">\r\n\t</span>  if len(temp)&gt;0:<span class="pl-cce">\r\n\t</span>    subs.extend(temp)<span class="pl-cce">\r\n\t</span>return subs<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">859</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sub_lists([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sub_lists([&#39;X&#39;, &#39;Y&#39;, &#39;Z&#39;])==[[], [&#39;X&#39;], [&#39;Y&#39;], [&#39;Z&#39;], [&#39;X&#39;, &#39;Y&#39;], [&#39;X&#39;, &#39;Z&#39;], [&#39;Y&#39;, &#39;Z&#39;], [&#39;X&#39;, &#39;Y&#39;, &#39;Z&#39;]]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sub_lists([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L860" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="860"></td>
          <td id="LC860" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re <span class="pl-cce">\r\n</span>regex = &#39;[a-zA-z0-9]$&#39;<span class="pl-cce">\r\n</span>def check_alphanumeric(string): <span class="pl-cce">\r\n\t</span>if(re.search(regex, string)): <span class="pl-cce">\r\n\t\t</span>return (<span class="pl-cce">\&quot;</span>Accept<span class="pl-cce">\&quot;</span>) <span class="pl-cce">\r\n\t</span>else: <span class="pl-cce">\r\n\t\t</span>return (<span class="pl-cce">\&quot;</span>Discard<span class="pl-cce">\&quot;</span>) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">860</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_alphanumeric(<span class="pl-cce">\&quot;</span>dawood@<span class="pl-cce">\&quot;</span>) == &#39;Discard&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_alphanumeric(<span class="pl-cce">\&quot;</span>skdmsam326<span class="pl-cce">\&quot;</span>) == &#39;Accept&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_alphanumeric(<span class="pl-cce">\&quot;</span>cooltricks@<span class="pl-cce">\&quot;</span>) == &#39;Discard&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L861" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="861"></td>
          <td id="LC861" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find all anagrams of a string in a given list of strings using lambda function.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from collections import Counter <span class="pl-cce">\r\n</span>def anagram_lambda(texts,str):<span class="pl-cce">\r\n</span>  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) <span class="pl-cce">\r\n</span>  return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">861</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert anagram_lambda([<span class="pl-cce">\&quot;</span>bcda<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>abce<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>cbda<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>cbea<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>adcb<span class="pl-cce">\&quot;</span>],<span class="pl-cce">\&quot;</span>abcd<span class="pl-cce">\&quot;</span>)==[&#39;bcda&#39;, &#39;cbda&#39;, &#39;adcb&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert anagram_lambda([<span class="pl-cce">\&quot;</span>recitals<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span> python<span class="pl-cce">\&quot;</span>], <span class="pl-cce">\&quot;</span>articles<span class="pl-cce">\&quot;</span> )==[<span class="pl-cce">\&quot;</span>recitals<span class="pl-cce">\&quot;</span>]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert anagram_lambda([<span class="pl-cce">\&quot;</span> keep<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span> abcdef<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span> xyz<span class="pl-cce">\&quot;</span>],<span class="pl-cce">\&quot;</span> peek<span class="pl-cce">\&quot;</span>)==[<span class="pl-cce">\&quot;</span> keep<span class="pl-cce">\&quot;</span>]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L862" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="862"></td>
          <td id="LC862" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the occurrences of n most common words in a given text.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from collections import Counter<span class="pl-cce">\r\n</span>import re<span class="pl-cce">\r\n</span>def n_common_words(text,n):<span class="pl-cce">\r\n</span>  words = re.findall(&#39;<span class="pl-cce">\\</span>w+&#39;,text)<span class="pl-cce">\r\n</span>  n_common_words= Counter(words).most_common(n)<span class="pl-cce">\r\n</span>  return list(n_common_words)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">862</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert n_common_words(<span class="pl-cce">\&quot;</span>python is a programming language<span class="pl-cce">\&quot;</span>,1)==[(&#39;python&#39;, 1)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert n_common_words(<span class="pl-cce">\&quot;</span>python is a programming language<span class="pl-cce">\&quot;</span>,1)==[(&#39;python&#39;, 1)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert n_common_words(<span class="pl-cce">\&quot;</span>python is a programming language<span class="pl-cce">\&quot;</span>,5)==[(&#39;python&#39;, 1),(&#39;is&#39;, 1), (&#39;a&#39;, 1), (&#39;programming&#39;, 1), (&#39;language&#39;, 1)]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L863" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="863"></td>
          <td id="LC863" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_longest_conseq_subseq(arr, n): <span class="pl-cce">\r\n\t</span>ans = 0<span class="pl-cce">\r\n\t</span>count = 0<span class="pl-cce">\r\n\t</span>arr.sort() <span class="pl-cce">\r\n\t</span>v = [] <span class="pl-cce">\r\n\t</span>v.append(arr[0]) <span class="pl-cce">\r\n\t</span>for i in range(1, n): <span class="pl-cce">\r\n\t\t</span>if (arr[i] != arr[i - 1]): <span class="pl-cce">\r\n\t\t\t</span>v.append(arr[i]) <span class="pl-cce">\r\n\t</span>for i in range(len(v)): <span class="pl-cce">\r\n\t\t</span>if (i &gt; 0 and v[i] == v[i - 1] + 1): <span class="pl-cce">\r\n\t\t\t</span>count += 1<span class="pl-cce">\r\n\t\t</span>else: <span class="pl-cce">\r\n\t\t\t</span>count = 1<span class="pl-cce">\r\n\t\t</span>ans = max(ans, count) <span class="pl-cce">\r\n\t</span>return ans <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">863</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L864" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="864"></td>
          <td id="LC864" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find palindromes in a given list of strings using lambda function.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def palindrome_lambda(texts):<span class="pl-cce">\r\n</span>  result = list(filter(lambda x: (x == <span class="pl-cce">\&quot;\&quot;</span>.join(reversed(x))), texts))<span class="pl-cce">\r\n</span>  return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">864</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert palindrome_lambda([<span class="pl-cce">\&quot;</span>php<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>res<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>Python<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>abcd<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>Java<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>aaa<span class="pl-cce">\&quot;</span>])==[&#39;php&#39;, &#39;aaa&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert palindrome_lambda([<span class="pl-cce">\&quot;</span>abcd<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>Python<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>abba<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>aba<span class="pl-cce">\&quot;</span>])==[&#39;abba&#39;, &#39;aba&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert palindrome_lambda([<span class="pl-cce">\&quot;</span>abcd<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>abbccbba<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>abba<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>aba<span class="pl-cce">\&quot;</span>])==[&#39;abbccbba&#39;, &#39;abba&#39;, &#39;aba&#39;]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L865" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="865"></td>
          <td id="LC865" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to print n-times a list using map function.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def ntimes_list(nums,n):<span class="pl-cce">\r\n</span>    result = map(lambda x:n*x, nums) <span class="pl-cce">\r\n</span>    return list(result)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">865</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L866" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="866"></td>
          <td id="LC866" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check whether the given month name contains 31 days or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_monthnumb(monthname2):<span class="pl-cce">\r\n</span>  if(monthname2==<span class="pl-cce">\&quot;</span>January<span class="pl-cce">\&quot;</span> or monthname2==<span class="pl-cce">\&quot;</span>March<span class="pl-cce">\&quot;</span>or monthname2==<span class="pl-cce">\&quot;</span>May<span class="pl-cce">\&quot;</span> or monthname2==<span class="pl-cce">\&quot;</span>July<span class="pl-cce">\&quot;</span> or monthname2==<span class="pl-cce">\&quot;</span>Augest<span class="pl-cce">\&quot;</span> or monthname2==<span class="pl-cce">\&quot;</span>October<span class="pl-cce">\&quot;</span> or monthname2==<span class="pl-cce">\&quot;</span>December<span class="pl-cce">\&quot;</span>):<span class="pl-cce">\r\n</span>    return True<span class="pl-cce">\r\n</span>  else:<span class="pl-cce">\r\n</span>    return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">866</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_monthnumb(<span class="pl-cce">\&quot;</span>February<span class="pl-cce">\&quot;</span>)==False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_monthnumb(<span class="pl-cce">\&quot;</span>January<span class="pl-cce">\&quot;</span>)==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_monthnumb(<span class="pl-cce">\&quot;</span>March<span class="pl-cce">\&quot;</span>)==True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L867" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="867"></td>
          <td id="LC867" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to add a minimum number such that the sum of array becomes even.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def min_Num(arr,n):  <span class="pl-cce">\r\n</span>    odd = 0<span class="pl-cce">\r\n</span>    for i in range(n): <span class="pl-cce">\r\n</span>        if (arr[i] % 2): <span class="pl-cce">\r\n</span>            odd += 1 <span class="pl-cce">\r\n</span>    if (odd % 2): <span class="pl-cce">\r\n</span>        return 1<span class="pl-cce">\r\n</span>    return 2<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">867</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert min_Num([1,2,3,4,5,6,7,8,9],9) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_Num([1,2,3,4,5,6,7,8],8) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_Num([1,2,3],3) == 2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L868" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="868"></td>
          <td id="LC868" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the length of the last word in a given string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def length_Of_Last_Word(a): <span class="pl-cce">\r\n</span>    l = 0<span class="pl-cce">\r\n</span>    x = a.strip() <span class="pl-cce">\r\n</span>    for i in range(len(x)): <span class="pl-cce">\r\n</span>        if x[i] == <span class="pl-cce">\&quot;</span> <span class="pl-cce">\&quot;</span>: <span class="pl-cce">\r\n</span>            l = 0<span class="pl-cce">\r\n</span>        else: <span class="pl-cce">\r\n</span>            l += 1<span class="pl-cce">\r\n</span>    return l <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">868</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert length_Of_Last_Word(<span class="pl-cce">\&quot;</span>python language<span class="pl-cce">\&quot;</span>) == 8<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert length_Of_Last_Word(<span class="pl-cce">\&quot;</span>PHP<span class="pl-cce">\&quot;</span>) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert length_Of_Last_Word(<span class="pl-cce">\&quot;\&quot;</span>) == 0<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L869" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="869"></td>
          <td id="LC869" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to remove sublists from a given list of lists, which are outside a given range.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def remove_list_range(list1, leftrange, rigthrange):<span class="pl-cce">\r\n</span>   result = [i for i in list1 if (min(i)&gt;=leftrange and max(i)&lt;=rigthrange)]<span class="pl-cce">\r\n</span>   return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">869</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L870" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="870"></td>
          <td id="LC870" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sum_positivenum(nums):<span class="pl-cce">\r\n</span>  sum_positivenum = list(filter(lambda nums:nums&gt;0,nums))<span class="pl-cce">\r\n</span>  return sum(sum_positivenum)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">870</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_positivenum([10,15,-14,13,-18,12,-20])==50<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L871" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="871"></td>
          <td id="LC871" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether the given strings are rotations of each other or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def are_Rotations(string1,string2): <span class="pl-cce">\r\n</span>    size1 = len(string1) <span class="pl-cce">\r\n</span>    size2 = len(string2) <span class="pl-cce">\r\n</span>    temp = &#39;&#39; <span class="pl-cce">\r\n</span>    if size1 != size2: <span class="pl-cce">\r\n</span>        return False<span class="pl-cce">\r\n</span>    temp = string1 + string1 <span class="pl-cce">\r\n</span>    if (temp.count(string2)&gt; 0): <span class="pl-cce">\r\n</span>        return True<span class="pl-cce">\r\n</span>    else: <span class="pl-cce">\r\n</span>        return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">871</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert are_Rotations(<span class="pl-cce">\&quot;</span>abc<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>cba<span class="pl-cce">\&quot;</span>) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert are_Rotations(<span class="pl-cce">\&quot;</span>abcd<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>cdba<span class="pl-cce">\&quot;</span>) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert are_Rotations(<span class="pl-cce">\&quot;</span>abacd<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>cdaba<span class="pl-cce">\&quot;</span>) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L872" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="872"></td>
          <td id="LC872" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check if a nested list is a subset of another nested list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_subset(list1,list2): <span class="pl-cce">\r\n</span>    return all(map(list1.__contains__,list2)) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">872</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L873" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="873"></td>
          <td id="LC873" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to solve the fibonacci sequence using recursion.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def fibonacci(n):<span class="pl-cce">\r\n</span>  if n == 1 or n == 2:<span class="pl-cce">\r\n</span>    return 1<span class="pl-cce">\r\n</span>  else:<span class="pl-cce">\r\n</span>    return (fibonacci(n - 1) + (fibonacci(n - 2)))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">873</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert fibonacci(7) == 13<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert fibonacci(8) == 21<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert fibonacci(9) == 34<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L874" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="874"></td>
          <td id="LC874" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check if the string is a concatenation of another string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_Concat(str1,str2):<span class="pl-cce">\r\n</span>    N = len(str1)<span class="pl-cce">\r\n</span>    M = len(str2)<span class="pl-cce">\r\n</span>    if (N % M != 0):<span class="pl-cce">\r\n</span>        return False<span class="pl-cce">\r\n</span>    for i in range(N):<span class="pl-cce">\r\n</span>        if (str1[i] != str2[i % M]):<span class="pl-cce">\r\n</span>            return False         <span class="pl-cce">\r\n</span>    return True<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">874</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_Concat(<span class="pl-cce">\&quot;</span>abcabcabc<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>abc<span class="pl-cce">\&quot;</span>) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_Concat(<span class="pl-cce">\&quot;</span>abcab<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>abc<span class="pl-cce">\&quot;</span>) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_Concat(<span class="pl-cce">\&quot;</span>aba<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>ab<span class="pl-cce">\&quot;</span>) == False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L875" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="875"></td>
          <td id="LC875" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the minimum difference in the tuple pairs of given tuples.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def min_difference(test_list):<span class="pl-cce">\r\n</span>  temp = [abs(b - a) for a, b in test_list]<span class="pl-cce">\r\n</span>  res = min(temp)<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">875</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L876" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="876"></td>
          <td id="LC876" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find lcm of two positive integers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def lcm(x, y):<span class="pl-cce">\r\n</span>   if x &gt; y:<span class="pl-cce">\r\n</span>       z = x<span class="pl-cce">\r\n</span>   else:<span class="pl-cce">\r\n</span>       z = y<span class="pl-cce">\r\n</span>   while(True):<span class="pl-cce">\r\n</span>       if((z % x == 0) and (z % y == 0)):<span class="pl-cce">\r\n</span>           lcm = z<span class="pl-cce">\r\n</span>           break<span class="pl-cce">\r\n</span>       z += 1<span class="pl-cce">\r\n</span>   return lcm<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">876</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert lcm(4,6) == 12<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert lcm(15,17) == 255<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert lcm(2,6) == 6<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L877" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="877"></td>
          <td id="LC877" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to sort the given string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sort_String(str) : <span class="pl-cce">\r\n</span>    str = &#39;&#39;.join(sorted(str)) <span class="pl-cce">\r\n</span>    return (str) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">877</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_String(<span class="pl-cce">\&quot;</span>cba<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>abc<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_String(<span class="pl-cce">\&quot;</span>data<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>aadt<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_String(<span class="pl-cce">\&quot;</span>zxy<span class="pl-cce">\&quot;</span>) == <span class="pl-cce">\&quot;</span>xyz<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L878" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="878"></td>
          <td id="LC878" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check if the given tuple contains only k elements.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_tuples(test_tuple, K):<span class="pl-cce">\r\n</span>  res = all(ele in K for ele in test_tuple)<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">878</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L879" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="879"></td>
          <td id="LC879" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function that matches a string that has an &#39;a&#39; followed by anything, ending in &#39;b&#39; by using regex.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def text_match(text):<span class="pl-cce">\r\n</span>  patterns = &#39;a.*?b$&#39;<span class="pl-cce">\r\n</span>  if re.search(patterns,  text):<span class="pl-cce">\r\n</span>    return (&#39;Found a match!&#39;)<span class="pl-cce">\r\n</span>  else:<span class="pl-cce">\r\n</span>    return (&#39;Not matched!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">879</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match(<span class="pl-cce">\&quot;</span>aabbbbd<span class="pl-cce">\&quot;</span>) == &#39;Not matched!&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match(<span class="pl-cce">\&quot;</span>aabAbbbc<span class="pl-cce">\&quot;</span>) == &#39;Not matched!&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match(<span class="pl-cce">\&quot;</span>accddbbjjjb<span class="pl-cce">\&quot;</span>) == &#39;Found a match!&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L880" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="880"></td>
          <td id="LC880" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find number of solutions in quadratic equation.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def Check_Solution(a,b,c) : <span class="pl-cce">\r\n</span>    if ((b*b) - (4*a*c)) &gt; 0 : <span class="pl-cce">\r\n</span>        return (<span class="pl-cce">\&quot;</span>2 solutions<span class="pl-cce">\&quot;</span>) <span class="pl-cce">\r\n</span>    elif ((b*b) - (4*a*c)) == 0 : <span class="pl-cce">\r\n</span>        return (<span class="pl-cce">\&quot;</span>1 solution<span class="pl-cce">\&quot;</span>) <span class="pl-cce">\r\n</span>    else : <span class="pl-cce">\r\n</span>        return (<span class="pl-cce">\&quot;</span>No solutions<span class="pl-cce">\&quot;</span>) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">880</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert Check_Solution(2,5,2) == <span class="pl-cce">\&quot;</span>2 solutions<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Check_Solution(1,1,1) == <span class="pl-cce">\&quot;</span>No solutions<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Check_Solution(1,2,1) == <span class="pl-cce">\&quot;</span>1 solution<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L881" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="881"></td>
          <td id="LC881" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the sum of first even and odd number of a given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sum_even_odd(list1):<span class="pl-cce">\r\n</span>    first_even = next((el for el in list1 if el%2==0),-1)<span class="pl-cce">\r\n</span>    first_odd = next((el for el in list1 if el%2!=0),-1)<span class="pl-cce">\r\n</span>    return (first_even+first_odd)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">881</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_even_odd([1,3,5,7,4,1,6,8])==5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_even_odd([1,2,3,4,5,6,7,8,9,10])==3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_even_odd([1,5,7,9,10])==11<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L882" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="882"></td>
          <td id="LC882" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to caluclate perimeter of a parallelogram.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def parallelogram_perimeter(b,h):<span class="pl-cce">\r\n</span>  perimeter=2*(b*h)<span class="pl-cce">\r\n</span>  return perimeter<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">882</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert parallelogram_perimeter(10,20)==400<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert parallelogram_perimeter(15,20)==600<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert parallelogram_perimeter(8,9)==144<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L883" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="883"></td>
          <td id="LC883" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find numbers divisible by m and n from a list of numbers using lambda function.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def div_of_nums(nums,m,n):<span class="pl-cce">\r\n</span> result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) <span class="pl-cce">\r\n</span> return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">883</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[10]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert div_of_nums([10,15,14,13,18,12,20],10,5)==[10,20]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L884" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="884"></td>
          <td id="LC884" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether all the bits are within a given range or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def all_Bits_Set_In_The_Given_Range(n,l,r): <span class="pl-cce">\r\n</span>    num = ((1 &lt;&lt; r) - 1) ^ ((1 &lt;&lt; (l - 1)) - 1) <span class="pl-cce">\r\n</span>    new_num = n &amp; num <span class="pl-cce">\r\n</span>    if (num == new_num): <span class="pl-cce">\r\n</span>        return True<span class="pl-cce">\r\n</span>    return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">884</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert all_Bits_Set_In_The_Given_Range(10,2,1) == True <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert all_Bits_Set_In_The_Given_Range(5,2,4) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert all_Bits_Set_In_The_Given_Range(22,2,3) == True <span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L885" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="885"></td>
          <td id="LC885" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether the two given strings are isomorphic to each other or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def is_Isomorphic(str1,str2):          <span class="pl-cce">\r\n</span>    dict_str1 = {}<span class="pl-cce">\r\n</span>    dict_str2 = {}<span class="pl-cce">\r\n</span>    for i, value in enumerate(str1):<span class="pl-cce">\r\n</span>        dict_str1[value] = dict_str1.get(value,[]) + [i]        <span class="pl-cce">\r\n</span>    for j, value in enumerate(str2):<span class="pl-cce">\r\n</span>        dict_str2[value] = dict_str2.get(value,[]) + [j]<span class="pl-cce">\r\n</span>    if sorted(dict_str1.values()) == sorted(dict_str2.values()):<span class="pl-cce">\r\n</span>        return True<span class="pl-cce">\r\n</span>    else:<span class="pl-cce">\r\n</span>        return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">885</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert is_Isomorphic(<span class="pl-cce">\&quot;</span>paper<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>title<span class="pl-cce">\&quot;</span>) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_Isomorphic(<span class="pl-cce">\&quot;</span>ab<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>ba<span class="pl-cce">\&quot;</span>) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_Isomorphic(<span class="pl-cce">\&quot;</span>ab<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>aa<span class="pl-cce">\&quot;</span>) == False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L886" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="886"></td>
          <td id="LC886" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to add all the numbers in a list and divide it with the length of the list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sum_num(numbers):<span class="pl-cce">\r\n</span>    total = 0<span class="pl-cce">\r\n</span>    for x in numbers:<span class="pl-cce">\r\n</span>        total += x<span class="pl-cce">\r\n</span>    return total/len(numbers) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">886</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_num((8, 2, 3, 0, 7))==4.0<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_num((-10,-20,-30))==-20.0<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_num((19,15,18))==17.333333333333332<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L887" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="887"></td>
          <td id="LC887" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether the given number is odd or not using bitwise operator.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def is_odd(n) : <span class="pl-cce">\r\n</span>    if (n^1 == n-1) :<span class="pl-cce">\r\n</span>        return True; <span class="pl-cce">\r\n</span>    else :<span class="pl-cce">\r\n</span>        return False; <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">887</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert is_odd(5) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_odd(6) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_odd(7) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L888" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="888"></td>
          <td id="LC888" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to substract the elements of the given nested tuples.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def substract_elements(test_tup1, test_tup2):<span class="pl-cce">\r\n</span>  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))<span class="pl-cce">\r\n</span>   for tup1, tup2 in zip(test_tup1, test_tup2))<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">888</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L889" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="889"></td>
          <td id="LC889" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to reverse each list in a given list of lists.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def reverse_list_lists(lists):<span class="pl-cce">\r\n</span>    for l in lists:<span class="pl-cce">\r\n</span>        l.sort(reverse = True)<span class="pl-cce">\r\n</span>    return lists <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">889</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert reverse_list_lists([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert reverse_list_lists([[10,20],[30,40]])==[[20,10],[40,30]]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L890" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="890"></td>
          <td id="LC890" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the index of an extra element present in one sorted array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_Extra(arr1,arr2,n) : <span class="pl-cce">\r\n</span>    for i in range(0, n) : <span class="pl-cce">\r\n</span>        if (arr1[i] != arr2[i]) : <span class="pl-cce">\r\n</span>            return i <span class="pl-cce">\r\n</span>    return n <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">890</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Extra([1,2,3,4],[1,2,3],3) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Extra([2,4,6,8,10],[2,4,6,8],4) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5) == 5<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L891" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="891"></td>
          <td id="LC891" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether the given two numbers have same number of digits or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def same_Length(A,B): <span class="pl-cce">\r\n</span>    while (A &gt; 0 and B &gt; 0): <span class="pl-cce">\r\n</span>        A = A / 10; <span class="pl-cce">\r\n</span>        B = B / 10; <span class="pl-cce">\r\n</span>    if (A == 0 and B == 0): <span class="pl-cce">\r\n</span>        return True; <span class="pl-cce">\r\n</span>    return False; <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">891</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert same_Length(12,1) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert same_Length(2,2) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert same_Length(10,20) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L892" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="892"></td>
          <td id="LC892" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to remove multiple spaces in a string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def remove_spaces(text):<span class="pl-cce">\r\n</span> return (re.sub(&#39; +&#39;,&#39; &#39;,text))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">892</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_spaces(&#39;python  program&#39;)==(&#39;python program&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_spaces(&#39;python   programming    language&#39;)==(&#39;python programming language&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_spaces(&#39;python                     program&#39;)==(&#39;python program&#39;)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L893" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="893"></td>
          <td id="LC893" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to get the last element of each sublist.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def Extract(lst): <span class="pl-cce">\r\n</span>    return [item[-1] for item in lst] <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">893</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Extract([[&#39;x&#39;, &#39;y&#39;, &#39;z&#39;], [&#39;m&#39;], [&#39;a&#39;, &#39;b&#39;], [&#39;u&#39;, &#39;v&#39;]]) == [&#39;z&#39;, &#39;m&#39;, &#39;b&#39;, &#39;v&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Extract([[1, 2, 3], [4, 5]]) == [3, 5]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L894" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="894"></td>
          <td id="LC894" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to convert the given string of float type into tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def float_to_tuple(test_str):<span class="pl-cce">\r\n</span>  res = tuple(map(float, test_str.split(&#39;, &#39;)))<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">894</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert float_to_tuple(<span class="pl-cce">\&quot;</span>1.2, 1.3, 2.3, 2.4, 6.5<span class="pl-cce">\&quot;</span>) == (1.2, 1.3, 2.3, 2.4, 6.5)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert float_to_tuple(<span class="pl-cce">\&quot;</span>2.3, 2.4, 5.6, 5.4, 8.9<span class="pl-cce">\&quot;</span>) == (2.3, 2.4, 5.6, 5.4, 8.9)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert float_to_tuple(<span class="pl-cce">\&quot;</span>0.3, 0.5, 7.8, 9.4<span class="pl-cce">\&quot;</span>) == (0.3, 0.5, 7.8, 9.4)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L895" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="895"></td>
          <td id="LC895" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the maximum sum of subsequences of given array with no adjacent elements.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def max_sum_subseq(A):<span class="pl-cce">\r\n</span>    n = len(A)<span class="pl-cce">\r\n</span>    if n == 1:<span class="pl-cce">\r\n</span>        return A[0]<span class="pl-cce">\r\n</span>    look_up = [None] * n<span class="pl-cce">\r\n</span>    look_up[0] = A[0]<span class="pl-cce">\r\n</span>    look_up[1] = max(A[0], A[1])<span class="pl-cce">\r\n</span>    for i in range(2, n):<span class="pl-cce">\r\n</span>        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])<span class="pl-cce">\r\n</span>        look_up[i] = max(look_up[i], A[i])<span class="pl-cce">\r\n</span>    return look_up[n - 1]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">895</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L896" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="896"></td>
          <td id="LC896" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def last(n):<span class="pl-cce">\r\n</span>   return n[-1]<span class="pl-cce">\r\n</span>def sort_list_last(tuples):<span class="pl-cce">\r\n</span>  return sorted(tuples, key=last)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">896</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_list_last([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] <span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L897" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="897"></td>
          <td id="LC897" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether the word is present in a given sentence or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def is_Word_Present(sentence,word): <span class="pl-cce">\r\n</span>    s = sentence.split(<span class="pl-cce">\&quot;</span> <span class="pl-cce">\&quot;</span>) <span class="pl-cce">\r\n</span>    for i in s:  <span class="pl-cce">\r\n</span>        if (i == word): <span class="pl-cce">\r\n</span>            return True<span class="pl-cce">\r\n</span>    return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">897</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert is_Word_Present(<span class="pl-cce">\&quot;</span>machine learning<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>machine<span class="pl-cce">\&quot;</span>) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_Word_Present(<span class="pl-cce">\&quot;</span>easy<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>fun<span class="pl-cce">\&quot;</span>) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_Word_Present(<span class="pl-cce">\&quot;</span>python language<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>code<span class="pl-cce">\&quot;</span>) == False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L898" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="898"></td>
          <td id="LC898" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to extract specified number of elements from a given list, which follow each other continuously.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from itertools import groupby <span class="pl-cce">\r\n</span>def extract_elements(numbers, n):<span class="pl-cce">\r\n</span>    result = [i for i, j in groupby(numbers) if len(list(j)) == n] <span class="pl-cce">\r\n</span>    return result<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">898</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_elements([0,0,0,0,0],5)==[0]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L899" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="899"></td>
          <td id="LC899" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether an array can be sorted or not by picking only the corner elements.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check(arr,n): <span class="pl-cce">\r\n</span>    g = 0 <span class="pl-cce">\r\n</span>    for i in range(1,n): <span class="pl-cce">\r\n</span>        if (arr[i] - arr[i - 1] &gt; 0 and g == 1): <span class="pl-cce">\r\n</span>            return False<span class="pl-cce">\r\n</span>        if (arr[i] - arr[i] &lt; 0): <span class="pl-cce">\r\n</span>            g = 1<span class="pl-cce">\r\n</span>    return True<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">899</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check([3,2,1,2,3,4],6) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check([2,1,4,5,1],5) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check([1,2,2,1,2,3],6) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L900" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="900"></td>
          <td id="LC900" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function where a string will start with a specific number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def match_num(string):<span class="pl-cce">\r\n</span>    text = re.compile(r<span class="pl-cce">\&quot;</span>^5<span class="pl-cce">\&quot;</span>)<span class="pl-cce">\r\n</span>    if text.match(string):<span class="pl-cce">\r\n</span>        return True<span class="pl-cce">\r\n</span>    else:<span class="pl-cce">\r\n</span>        return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">900</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert match_num(&#39;5-2345861&#39;)==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert match_num(&#39;6-2345861&#39;)==False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert match_num(&#39;78910&#39;)==False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L901" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="901"></td>
          <td id="LC901" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the smallest multiple of the first n numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def smallest_multiple(n):<span class="pl-cce">\r\n</span>    if (n&lt;=2):<span class="pl-cce">\r\n</span>      return n<span class="pl-cce">\r\n</span>    i = n * 2<span class="pl-cce">\r\n</span>    factors = [number  for number in range(n, 1, -1) if number * 2 &gt; n]<span class="pl-cce">\r\n</span>    while True:<span class="pl-cce">\r\n</span>        for a in factors:<span class="pl-cce">\r\n</span>            if i % a != 0:<span class="pl-cce">\r\n</span>                i += n<span class="pl-cce">\r\n</span>                break<span class="pl-cce">\r\n</span>            if (a == factors[-1] and i % a == 0):<span class="pl-cce">\r\n</span>                return i<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">901</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert smallest_multiple(13)==360360<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert smallest_multiple(2)==2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert smallest_multiple(1)==1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L902" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="902"></td>
          <td id="LC902" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to combine two dictionaries by adding values for common keys.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from collections import Counter<span class="pl-cce">\r\n</span>def add_dict(d1,d2):<span class="pl-cce">\r\n</span>   add_dict = Counter(d1) + Counter(d2)<span class="pl-cce">\r\n</span>   return add_dict<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">902</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert add_dict({&#39;a&#39;: 100, &#39;b&#39;: 200, &#39;c&#39;:300},{&#39;a&#39;: 300, &#39;b&#39;: 200, &#39;d&#39;:400})==({&#39;b&#39;: 400, &#39;d&#39;: 400, &#39;a&#39;: 400, &#39;c&#39;: 300}) <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert add_dict({&#39;a&#39;: 500, &#39;b&#39;: 700, &#39;c&#39;:900},{&#39;a&#39;: 500, &#39;b&#39;: 600, &#39;d&#39;:900})==({&#39;b&#39;: 1300, &#39;d&#39;: 900, &#39;a&#39;: 1000, &#39;c&#39;: 900}) <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert add_dict({&#39;a&#39;:900,&#39;b&#39;:900,&#39;d&#39;:900},{&#39;a&#39;:900,&#39;b&#39;:900,&#39;d&#39;:900})==({&#39;b&#39;: 1800, &#39;d&#39;: 1800, &#39;a&#39;: 1800})<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L903" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="903"></td>
          <td id="LC903" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to count the total unset bits from 1 to n.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_Unset_Bits(n) :  <span class="pl-cce">\r\n</span>    cnt = 0;  <span class="pl-cce">\r\n</span>    for i in range(1,n + 1) : <span class="pl-cce">\r\n</span>        temp = i;  <span class="pl-cce">\r\n</span>        while (temp) :  <span class="pl-cce">\r\n</span>            if (temp % 2 == 0) : <span class="pl-cce">\r\n</span>                cnt += 1;  <span class="pl-cce">\r\n</span>            temp = temp // 2;  <span class="pl-cce">\r\n</span>    return cnt;  <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">903</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Unset_Bits(2) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Unset_Bits(5) == 4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_Unset_Bits(14) == 17<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L904" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="904"></td>
          <td id="LC904" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to return true if the given number is even else return false.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def even_num(x):<span class="pl-cce">\r\n</span>  if x%2==0:<span class="pl-cce">\r\n</span>     return True<span class="pl-cce">\r\n</span>  else:<span class="pl-cce">\r\n</span>    return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">904</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert even_num(13.5)==False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert even_num(0)==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert even_num(-9)==False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L905" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="905"></td>
          <td id="LC905" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the sum of squares of binomial co-efficients.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def factorial(start,end): <span class="pl-cce">\r\n</span>    res = 1 <span class="pl-cce">\r\n</span>    for i in range(start,end + 1): <span class="pl-cce">\r\n</span>        res *= i      <span class="pl-cce">\r\n</span>    return res <span class="pl-cce">\r\n</span>def sum_of_square(n): <span class="pl-cce">\r\n</span>   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">905</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_of_square(4) == 70<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_of_square(5) == 252<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_of_square(2) == 6<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L906" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="906"></td>
          <td id="LC906" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to extract year, month and date from a url by using regex.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def extract_date(url):<span class="pl-cce">\r\n</span>        return re.findall(r&#39;/(<span class="pl-cce">\\</span>d{4})/(<span class="pl-cce">\\</span>d{1,2})/(<span class="pl-cce">\\</span>d{1,2})/&#39;, url)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">906</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_date(<span class="pl-cce">\&quot;</span>https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/<span class="pl-cce">\&quot;</span>) == [(&#39;2016&#39;, &#39;09&#39;, &#39;02&#39;)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_date(<span class="pl-cce">\&quot;</span>https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/<span class="pl-cce">\&quot;</span>) == [(&#39;2020&#39;, &#39;11&#39;, &#39;03&#39;)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert extract_date(<span class="pl-cce">\&quot;</span>https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms<span class="pl-cce">\&quot;</span>) == [(&#39;2020&#39;, &#39;12&#39;, &#39;29&#39;)]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L907" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="907"></td>
          <td id="LC907" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to print the first n lucky numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def lucky_num(n):<span class="pl-cce">\r\n</span> List=range(-1,n*n+9,2)<span class="pl-cce">\r\n</span> i=2<span class="pl-cce">\r\n</span> while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1<span class="pl-cce">\r\n</span> return List[1:n+1]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">907</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert lucky_num(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert lucky_num(5)==[1, 3, 7, 9, 13]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert lucky_num(8)==[1, 3, 7, 9, 13, 15, 21, 25]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L908" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="908"></td>
          <td id="LC908" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the fixed point in the given array.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_fixed_point(arr, n): <span class="pl-cce">\r\n\t</span>for i in range(n): <span class="pl-cce">\r\n\t\t</span>if arr[i] is i: <span class="pl-cce">\r\n\t\t\t</span>return i <span class="pl-cce">\r\n\t</span>return -1<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">908</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8) == -1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_fixed_point([0, 2, 5, 8, 17],5) == 0<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L909" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="909"></td>
          <td id="LC909" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the previous palindrome of a specified number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def previous_palindrome(num):<span class="pl-cce">\r\n</span>    for x in range(num-1,0,-1):<span class="pl-cce">\r\n</span>        if str(x) == str(x)[::-1]:<span class="pl-cce">\r\n</span>            return x<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">909</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert previous_palindrome(99)==88<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert previous_palindrome(1221)==1111<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert previous_palindrome(120)==111<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L910" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="910"></td>
          <td id="LC910" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to validate a gregorian date.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import datetime<span class="pl-cce">\r\n</span>def check_date(m, d, y):<span class="pl-cce">\r\n</span>    try:<span class="pl-cce">\r\n</span>        m, d, y = map(int, (m, d, y))<span class="pl-cce">\r\n</span>        datetime.date(y, m, d)<span class="pl-cce">\r\n</span>        return True<span class="pl-cce">\r\n</span>    except ValueError:<span class="pl-cce">\r\n</span>        return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">910</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_date(11,11,2002)==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_date(13,11,2002)==False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_date(&#39;11&#39;,&#39;11&#39;,&#39;2002&#39;)==True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L911" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="911"></td>
          <td id="LC911" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def maximum_product(nums):<span class="pl-cce">\r\n</span>    import heapq<span class="pl-cce">\r\n</span>    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)<span class="pl-cce">\r\n</span>    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">911</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert maximum_product( [12, 74, 9, 50, 61, 41])==225700<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L912" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="912"></td>
          <td id="LC912" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find ln, m lobb number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def binomial_coeff(n, k): <span class="pl-cce">\r\n\t</span>C = [[0 for j in range(k + 1)] <span class="pl-cce">\r\n\t\t\t</span>for i in range(n + 1)] <span class="pl-cce">\r\n\t</span>for i in range(0, n + 1): <span class="pl-cce">\r\n\t\t</span>for j in range(0, min(i, k) + 1): <span class="pl-cce">\r\n\t\t\t</span>if (j == 0 or j == i): <span class="pl-cce">\r\n\t\t\t\t</span>C[i][j] = 1<span class="pl-cce">\r\n\t\t\t</span>else: <span class="pl-cce">\r\n\t\t\t\t</span>C[i][j] = (C[i - 1][j - 1] <span class="pl-cce">\r\n\t\t\t\t\t\t\t</span>+ C[i - 1][j]) <span class="pl-cce">\r\n\t</span>return C[n][k] <span class="pl-cce">\r\n</span>def lobb_num(n, m): <span class="pl-cce">\r\n\t</span>return (((2 * m + 1) *<span class="pl-cce">\r\n\t\t</span>binomial_coeff(2 * n, m + n)) <span class="pl-cce">\r\n\t\t\t\t\t</span>/ (m + n + 1))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">912</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert int(lobb_num(5, 3)) == 35<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert int(lobb_num(3, 2)) == 5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert int(lobb_num(4, 2)) == 20<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L913" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="913"></td>
          <td id="LC913" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check for a number at the end of a string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def end_num(string):<span class="pl-cce">\r\n</span>    text = re.compile(r<span class="pl-cce">\&quot;</span>.*[0-9]$<span class="pl-cce">\&quot;</span>)<span class="pl-cce">\r\n</span>    if text.match(string):<span class="pl-cce">\r\n</span>        return True<span class="pl-cce">\r\n</span>    else:<span class="pl-cce">\r\n</span>        return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">913</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert end_num(&#39;abcdef&#39;)==False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert end_num(&#39;abcdef7&#39;)==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert end_num(&#39;abc&#39;)==False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L914" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="914"></td>
          <td id="LC914" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether the given string is made up of two alternating characters or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def is_Two_Alter(s):  <span class="pl-cce">\r\n</span>    for i in range (len( s) - 2) : <span class="pl-cce">\r\n</span>        if (s[i] != s[i + 2]) : <span class="pl-cce">\r\n</span>            return False<span class="pl-cce">\r\n</span>    if (s[0] == s[1]): <span class="pl-cce">\r\n</span>        return False<span class="pl-cce">\r\n</span>    return True<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">914</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert is_Two_Alter(<span class="pl-cce">\&quot;</span>abab<span class="pl-cce">\&quot;</span>) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_Two_Alter(<span class="pl-cce">\&quot;</span>aaaa<span class="pl-cce">\&quot;</span>) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_Two_Alter(<span class="pl-cce">\&quot;</span>xyz<span class="pl-cce">\&quot;</span>) == False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L915" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="915"></td>
          <td id="LC915" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to rearrange positive and negative numbers in a given array using lambda function.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def rearrange_numbs(array_nums):<span class="pl-cce">\r\n</span>  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)<span class="pl-cce">\r\n</span>  return result <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">915</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert rearrange_numbs([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert rearrange_numbs([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L916" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="916"></td>
          <td id="LC916" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find if there is a triplet in the array whose sum is equal to a given value.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def find_triplet_array(A, arr_size, sum): <span class="pl-cce">\r\n\t</span>for i in range( 0, arr_size-2): <span class="pl-cce">\r\n\t\t</span>for j in range(i + 1, arr_size-1): <span class="pl-cce">\r\n\t\t\t</span>for k in range(j + 1, arr_size): <span class="pl-cce">\r\n\t\t\t\t</span>if A[i] + A[j] + A[k] == sum: <span class="pl-cce">\r\n\t\t\t\t\t</span>return  A[i],A[j],A[k] <span class="pl-cce">\r\n\t\t\t\t\t</span>return True<span class="pl-cce">\r\n\t</span>return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">916</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert find_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L917" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="917"></td>
          <td id="LC917" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the sequences of one upper case letter followed by lower case letters.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def text_uppercase_lowercase(text):<span class="pl-cce">\r\n</span>        patterns = &#39;[A-Z]+[a-z]+$&#39;<span class="pl-cce">\r\n</span>        if re.search(patterns, text):<span class="pl-cce">\r\n</span>                return &#39;Found a match!&#39;<span class="pl-cce">\r\n</span>        else:<span class="pl-cce">\r\n</span>                return (&#39;Not matched!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">917</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert text_uppercase_lowercase(<span class="pl-cce">\&quot;</span>AaBbGg<span class="pl-cce">\&quot;</span>)==(&#39;Found a match!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert text_uppercase_lowercase(<span class="pl-cce">\&quot;</span>aA<span class="pl-cce">\&quot;</span>)==(&#39;Not matched!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert text_uppercase_lowercase(<span class="pl-cce">\&quot;</span>PYTHON<span class="pl-cce">\&quot;</span>)==(&#39;Not matched!&#39;)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L918" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="918"></td>
          <td id="LC918" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to count coin change.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def coin_change(S, m, n): <span class="pl-cce">\r\n</span>    table = [[0 for x in range(m)] for x in range(n+1)] <span class="pl-cce">\r\n</span>    for i in range(m): <span class="pl-cce">\r\n</span>        table[0][i] = 1<span class="pl-cce">\r\n</span>    for i in range(1, n+1): <span class="pl-cce">\r\n</span>        for j in range(m): <span class="pl-cce">\r\n</span>            x = table[i - S[j]][j] if i-S[j] &gt;= 0 else 0<span class="pl-cce">\r\n</span>            y = table[i][j-1] if j &gt;= 1 else 0 <span class="pl-cce">\r\n</span>            table[i][j] = x + y   <span class="pl-cce">\r\n</span>    return table[n][m-1] <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">918</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert coin_change([1, 2, 3],3,4)==4<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert coin_change([4,5,6,7,8,9],6,9)==2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert coin_change([4,5,6,7,8,9],6,4)==1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L919" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="919"></td>
          <td id="LC919" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to multiply all items in the list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def multiply_list(items):<span class="pl-cce">\r\n</span>    tot = 1<span class="pl-cce">\r\n</span>    for x in items:<span class="pl-cce">\r\n</span>        tot *= x<span class="pl-cce">\r\n</span>    return tot<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">919</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert multiply_list([1,-2,3]) == -6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert multiply_list([1,2,3,4]) == 24<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert multiply_list([3,1,2,3]) == 18<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L920" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="920"></td>
          <td id="LC920" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to remove all tuples with all none values in the given tuple list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def remove_tuple(test_list):<span class="pl-cce">\r\n</span>  res = [sub for sub in test_list if not all(ele == None for ele in sub)]<span class="pl-cce">\r\n</span>  return (str(res)) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">920</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == &#39;[(None, 2), (3, 4), (12, 3)]&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == &#39;[(3, 6), (17, 3), (None, 1)]&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == &#39;[(1, 2), (2, None), (3, None), (24, 3)]&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L921" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="921"></td>
          <td id="LC921" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to perform chunking of tuples each of size n.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def chunk_tuples(test_tup, N):<span class="pl-cce">\r\n</span>  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">921</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L922" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="922"></td>
          <td id="LC922" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find a pair with the highest product from a given array of integers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def max_product(arr): <span class="pl-cce">\r\n</span>    arr_len = len(arr) <span class="pl-cce">\r\n</span>    if (arr_len &lt; 2): <span class="pl-cce">\r\n</span>        return None     <span class="pl-cce">\r\n</span>    x = arr[0]; y = arr[1]    <span class="pl-cce">\r\n</span>    for i in range(0, arr_len): <span class="pl-cce">\r\n</span>        for j in range(i + 1, arr_len): <span class="pl-cce">\r\n</span>            if (arr[i] * arr[j] &gt; x * y): <span class="pl-cce">\r\n</span>                x = arr[i]; y = arr[j] <span class="pl-cce">\r\n</span>    return x,y   <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">922</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert max_product([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_product([0, -1, -2, -4, 5, 0, -6])==(-4, -6)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_product([1, 3, 5, 6, 8, 9])==(8,9)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L923" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="923"></td>
          <td id="LC923" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def super_seq(X, Y, m, n):<span class="pl-cce">\r\n\t</span>if (not m):<span class="pl-cce">\r\n\t\t</span>return n<span class="pl-cce">\r\n\t</span>if (not n):<span class="pl-cce">\r\n\t\t</span>return m<span class="pl-cce">\r\n\t</span>if (X[m - 1] == Y[n - 1]):<span class="pl-cce">\r\n\t\t</span>return 1 + super_seq(X, Y, m - 1, n - 1)<span class="pl-cce">\r\n\t</span>return 1 + min(super_seq(X, Y, m - 1, n),<span class="pl-cce">\t</span>super_seq(X, Y, m, n - 1))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">923</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert super_seq(<span class="pl-cce">\&quot;</span>AGGTAB<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>GXTXAYB<span class="pl-cce">\&quot;</span>, 6, 7) == 9<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert super_seq(<span class="pl-cce">\&quot;</span>feek<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>eke<span class="pl-cce">\&quot;</span>, 4, 3) == 5<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert super_seq(<span class="pl-cce">\&quot;</span>PARRT<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>RTA<span class="pl-cce">\&quot;</span>, 5, 3) == 6<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L924" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="924"></td>
          <td id="LC924" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find maximum of two numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def max_of_two( x, y ):<span class="pl-cce">\r\n</span>    if x &gt; y:<span class="pl-cce">\r\n</span>        return x<span class="pl-cce">\r\n</span>    return y<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">924</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert max_of_two(10,20)==20<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_of_two(19,15)==19<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_of_two(-10,-20)==-10<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L925" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="925"></td>
          <td id="LC925" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to calculate the product of all the numbers of a given tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def mutiple_tuple(nums):<span class="pl-cce">\r\n</span>    temp = list(nums)<span class="pl-cce">\r\n</span>    product = 1 <span class="pl-cce">\r\n</span>    for x in temp:<span class="pl-cce">\r\n</span>        product *= x<span class="pl-cce">\r\n</span>    return product<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">925</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert mutiple_tuple((1,2,3)) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert mutiple_tuple((-2,-4,-6)) == -48<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L926" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="926"></td>
          <td id="LC926" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find n-th rencontres number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def binomial_coeffi(n, k): <span class="pl-cce">\r\n\t</span>if (k == 0 or k == n): <span class="pl-cce">\r\n\t\t</span>return 1<span class="pl-cce">\r\n\t</span>return (binomial_coeffi(n - 1, k - 1) <span class="pl-cce">\r\n\t\t</span>+ binomial_coeffi(n - 1, k)) <span class="pl-cce">\r\n</span>def rencontres_number(n, m): <span class="pl-cce">\r\n\t</span>if (n == 0 and m == 0): <span class="pl-cce">\r\n\t\t</span>return 1<span class="pl-cce">\r\n\t</span>if (n == 1 and m == 0): <span class="pl-cce">\r\n\t\t</span>return 0<span class="pl-cce">\r\n\t</span>if (m == 0): <span class="pl-cce">\r\n\t\t</span>return ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) <span class="pl-cce">\r\n\t</span>return (binomial_coeffi(n, m) * rencontres_number(n - m, 0))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">926</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert rencontres_number(7, 2) == 924<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert rencontres_number(3, 0) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert rencontres_number(3, 1) == 3<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L927" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="927"></td>
          <td id="LC927" class="blob-code blob-code-inner js-file-line">{&quot;text&quot;: &quot;Write a function to calculate the height of the given binary tree.&quot;, &quot;code&quot;: &quot;class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef max_height(node): \r\n\tif node is None: \r\n\t\treturn 0 ; \r\n\telse : \r\n\t\tleft_height = max_height(node.left) \r\n\t\tright_height = max_height(node.right) \r\n\t\tif (left_height &gt; right_height): \r\n\t\t\treturn left_height+1\r\n\t\telse: \r\n\t\t\treturn right_height+1&quot;, &quot;task_id&quot;: 927, &quot;test_setup_code&quot;: &quot;root = Node(1) \r\nroot.left = Node(2) \r\nroot.right = Node(3) \r\nroot.left.left = Node(4) \r\nroot.left.right = Node(5) \r\nroot1 = Node(1);  \r\nroot1.left = Node(2);  \r\nroot1.right = Node(3);  \r\nroot1.left.left = Node(4);  \r\nroot1.right.left = Node(5);  \r\nroot1.right.right = Node(6);  \r\nroot1.right.right.right= Node(7);  \r\nroot1.right.right.right.right = Node(8)\r\nroot2 = Node(1) \r\nroot2.left = Node(2) \r\nroot2.right = Node(3) \r\nroot2.left.left = Node(4) \r\nroot2.left.right = Node(5)\r\nroot2.left.left.left = Node(6)\r\nroot2.left.left.right = Node(7)&quot;, &quot;test_list&quot;: [&quot;assert (max_height(root)) == 3&quot;, &quot;assert (max_height(root1)) == 5 &quot;, &quot;assert (max_height(root2)) == 4&quot;], &quot;challenge_test_list&quot;: []}</td>
        </tr>
        <tr>
          <td id="L928" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="928"></td>
          <td id="LC928" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def change_date_format(dt):<span class="pl-cce">\r\n</span>        return re.sub(r&#39;(<span class="pl-cce">\\</span>d{4})-(<span class="pl-cce">\\</span>d{1,2})-(<span class="pl-cce">\\</span>d{1,2})&#39;, &#39;<span class="pl-cce">\\\\</span>3-<span class="pl-cce">\\\\</span>2-<span class="pl-cce">\\\\</span>1&#39;, dt)<span class="pl-cce">\r\n</span>        return change_date_format(dt)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">928</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert change_date_format(&#39;2026-01-02&#39;)==&#39;02-01-2026&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert change_date_format(&#39;2021-01-04&#39;)==&#39;04-01-2021&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert change_date_format(&#39;2030-06-06&#39;)==&#39;06-06-2030&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L929" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="929"></td>
          <td id="LC929" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to count repeated items of a tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_tuplex(tuplex,value):  <span class="pl-cce">\r\n</span>  count = tuplex.count(value)<span class="pl-cce">\r\n</span>  return count<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">929</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L930" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="930"></td>
          <td id="LC930" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function that matches a string that has an a followed by zero or more b&#39;s by using regex.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def text_match(text):<span class="pl-cce">\r\n</span>        patterns = &#39;ab*?&#39;<span class="pl-cce">\r\n</span>        if re.search(patterns,  text):<span class="pl-cce">\r\n</span>                return (&#39;Found a match!&#39;)<span class="pl-cce">\r\n</span>        else:<span class="pl-cce">\r\n</span>                return (&#39;Not matched!&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">930</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match(<span class="pl-cce">\&quot;</span>msb<span class="pl-cce">\&quot;</span>) == &#39;Not matched!&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match(<span class="pl-cce">\&quot;</span>a0c<span class="pl-cce">\&quot;</span>) == &#39;Found a match!&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert text_match(<span class="pl-cce">\&quot;</span>abbc<span class="pl-cce">\&quot;</span>) == &#39;Found a match!&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L931" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="931"></td>
          <td id="LC931" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to calculate the sum of series 1<span class="pl-cce">\u00b3</span>+2<span class="pl-cce">\u00b3</span>+3<span class="pl-cce">\u00b3</span>+<span class="pl-cce">\u2026</span>.+n<span class="pl-cce">\u00b3</span>.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math <span class="pl-cce">\r\n</span>def sum_series(number):<span class="pl-cce">\r\n</span> total = 0<span class="pl-cce">\r\n</span> total = math.pow((number * (number + 1)) /2, 2)<span class="pl-cce">\r\n</span> return total<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">931</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_series(7)==784<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_series(5)==225<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_series(15)==14400<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L932" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="932"></td>
          <td id="LC932" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to remove duplicate words from a given list of strings.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def remove_duplic_list(l):<span class="pl-cce">\r\n</span>    temp = []<span class="pl-cce">\r\n</span>    for x in l:<span class="pl-cce">\r\n</span>        if x not in temp:<span class="pl-cce">\r\n</span>            temp.append(x)<span class="pl-cce">\r\n</span>    return temp<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">932</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_duplic_list([<span class="pl-cce">\&quot;</span>Python<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>Exercises<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>Practice<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>Solution<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>Exercises<span class="pl-cce">\&quot;</span>])==[&#39;Python&#39;, &#39;Exercises&#39;, &#39;Practice&#39;, &#39;Solution&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_duplic_list([<span class="pl-cce">\&quot;</span>Python<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>Exercises<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>Practice<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>Solution<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>Exercises<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>Java<span class="pl-cce">\&quot;</span>])==[&#39;Python&#39;, &#39;Exercises&#39;, &#39;Practice&#39;, &#39;Solution&#39;, &#39;Java&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_duplic_list([<span class="pl-cce">\&quot;</span>Python<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>Exercises<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>Practice<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>Solution<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>Exercises<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>C++<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>C<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>C++<span class="pl-cce">\&quot;</span>])==[&#39;Python&#39;, &#39;Exercises&#39;, &#39;Practice&#39;, &#39;Solution&#39;,&#39;C++&#39;,&#39;C&#39;]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L933" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="933"></td>
          <td id="LC933" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to convert camel case string to snake case string by using regex.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def camel_to_snake(text):<span class="pl-cce">\r\n</span>  str1 = re.sub(&#39;(.)([A-Z][a-z]+)&#39;, r&#39;<span class="pl-cce">\\</span>1_<span class="pl-cce">\\</span>2&#39;, text)<span class="pl-cce">\r\n</span>  return re.sub(&#39;([a-z0-9])([A-Z])&#39;, r&#39;<span class="pl-cce">\\</span>1_<span class="pl-cce">\\</span>2&#39;, str1).lower()<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">933</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert camel_to_snake(&#39;GoogleAssistant&#39;) == &#39;google_assistant&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert camel_to_snake(&#39;ChromeCast&#39;) == &#39;chrome_cast&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert camel_to_snake(&#39;QuadCore&#39;) == &#39;quad_core&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L934" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="934"></td>
          <td id="LC934" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the nth delannoy number.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def dealnnoy_num(n, m): <span class="pl-cce">\r\n\t</span>if (m == 0 or n == 0) : <span class="pl-cce">\r\n\t\t</span>return 1<span class="pl-cce">\r\n\t</span>return dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">934</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert dealnnoy_num(3, 4) == 129<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert dealnnoy_num(3, 3) == 63<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert dealnnoy_num(4, 5) == 681<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L935" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="935"></td>
          <td id="LC935" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to calculate the sum of series 1<span class="pl-cce">\u00b2</span>+2<span class="pl-cce">\u00b2</span>+3<span class="pl-cce">\u00b2</span>+<span class="pl-cce">\u2026</span>.+n<span class="pl-cce">\u00b2</span>.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def series_sum(number):<span class="pl-cce">\r\n</span> total = 0<span class="pl-cce">\r\n</span> total = (number * (number + 1) * (2 * number + 1)) / 6<span class="pl-cce">\r\n</span> return total<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">935</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert series_sum(6)==91<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert series_sum(7)==140<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert series_sum(12)==650<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L936" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="936"></td>
          <td id="LC936" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to re-arrange the given tuples based on the given ordered list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def re_arrange_tuples(test_list, ord_list):<span class="pl-cce">\r\n</span>  temp = dict(test_list)<span class="pl-cce">\r\n</span>  res = [(key, temp[key]) for key in ord_list]<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">936</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L937" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="937"></td>
          <td id="LC937" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to count the most common character in a given string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from collections import Counter <span class="pl-cce">\r\n</span>def max_char(str1):<span class="pl-cce">\r\n</span>    temp = Counter(str1) <span class="pl-cce">\r\n</span>    max_char = max(temp, key = temp.get)<span class="pl-cce">\r\n</span>    return max_char<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">937</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert max_char(<span class="pl-cce">\&quot;</span>hello world<span class="pl-cce">\&quot;</span>)==(&#39;l&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_char(<span class="pl-cce">\&quot;</span>hello <span class="pl-cce">\&quot;</span>)==(&#39;l&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_char(<span class="pl-cce">\&quot;</span>python pr<span class="pl-cce">\&quot;</span>)==(&#39;p&#39;)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L938" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="938"></td>
          <td id="LC938" class="blob-code blob-code-inner js-file-line">{&quot;text&quot;: &quot;Write a function to find three closest elements from three sorted arrays.&quot;, &quot;code&quot;: &quot;import sys \r\n\r\ndef find_closet(A, B, C, p, q, r): \r\n\tdiff = sys.maxsize \r\n\tres_i = 0\r\n\tres_j = 0\r\n\tres_k = 0\r\n\ti = 0\r\n\tj = 0\r\n\tk = 0\r\n\twhile(i &lt; p and j &lt; q and k &lt; r): \r\n\t\tminimum = min(A[i], min(B[j], C[k])) \r\n\t\tmaximum = max(A[i], max(B[j], C[k])); \r\n\t\tif maximum-minimum &lt; diff: \r\n\t\t\tres_i = i \r\n\t\t\tres_j = j \r\n\t\t\tres_k = k \r\n\t\t\tdiff = maximum - minimum; \r\n\t\tif diff == 0: \r\n\t\t\tbreak\r\n\t\tif A[i] == minimum: \r\n\t\t\ti = i+1\r\n\t\telif B[j] == minimum: \r\n\t\t\tj = j+1\r\n\t\telse: \r\n\t\t\tk = k+1\r\n\treturn A[res_i],B[res_j],C[res_k]&quot;, &quot;task_id&quot;: 938, &quot;test_setup_code&quot;: &quot;&quot;, &quot;test_list&quot;: [&quot;assert find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)&quot;, &quot;assert find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)&quot;, &quot;assert find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)&quot;], &quot;challenge_test_list&quot;: []}</td>
        </tr>
        <tr>
          <td id="L939" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="939"></td>
          <td id="LC939" class="blob-code blob-code-inner js-file-line">{&quot;text&quot;: &quot;Write a function to sort a list of dictionaries using lambda function.&quot;, &quot;code&quot;: &quot;def sorted_models(models):\r\n sorted_models = sorted(models, key = lambda x: x[&#39;color&#39;])\r\n return sorted_models&quot;, &quot;task_id&quot;: 939, &quot;test_setup_code&quot;: &quot;&quot;, &quot;test_list&quot;: [&quot;assert sorted_models([{&#39;make&#39;:&#39;Nokia&#39;, &#39;model&#39;:216, &#39;color&#39;:&#39;Black&#39;}, {&#39;make&#39;:&#39;Mi Max&#39;, &#39;model&#39;:2, &#39;color&#39;:&#39;Gold&#39;}, {&#39;make&#39;:&#39;Samsung&#39;, &#39;model&#39;: 7, &#39;color&#39;:&#39;Blue&#39;}])==[{&#39;make&#39;: &#39;Nokia&#39;, &#39;model&#39;: 216, &#39;color&#39;: &#39;Black&#39;}, {&#39;make&#39;: &#39;Samsung&#39;, &#39;model&#39;: 7, &#39;color&#39;: &#39;Blue&#39;}, {&#39;make&#39;: &#39;Mi Max&#39;, &#39;model&#39;: 2, &#39;color&#39;: &#39;Gold&#39;}]&quot;, &quot;assert sorted_models([{&#39;make&#39;:&#39;Vivo&#39;, &#39;model&#39;:20,&#39;color&#39;:&#39;Blue&#39;},{&#39;make&#39;: &#39;oppo&#39;,&#39;model&#39;:17,&#39;color&#39;:&#39;Gold&#39;},{&#39;make&#39;:&#39;Apple&#39;,&#39;model&#39;:11,&#39;color&#39;:&#39;red&#39;}])==([{&#39;make&#39;:&#39;Vivo&#39;, &#39;model&#39;:20,&#39;color&#39;:&#39;Blue&#39;},{&#39;make&#39;: &#39;oppo&#39;,&#39;model&#39;:17,&#39;color&#39;:&#39;Gold&#39;},{&#39;make&#39;:&#39;Apple&#39;,&#39;model&#39;:11,&#39;color&#39;:&#39;red&#39;}])&quot;, &quot;assert sorted_models([{&#39;make&#39;:&#39;micromax&#39;,&#39;model&#39;:40,&#39;color&#39;:&#39;grey&#39;},{&#39;make&#39;:&#39;poco&#39;,&#39;model&#39;:60,&#39;color&#39;:&#39;blue&#39;}])==([{&#39;make&#39;:&#39;poco&#39;,&#39;model&#39;:60,&#39;color&#39;:&#39;blue&#39;},{&#39;make&#39;:&#39;micromax&#39;,&#39;model&#39;:40,&#39;color&#39;:&#39;grey&#39;}])&quot;], &quot;challenge_test_list&quot;: []}</td>
        </tr>
        <tr>
          <td id="L940" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="940"></td>
          <td id="LC940" class="blob-code blob-code-inner js-file-line">{&quot;text&quot;: &quot;Write a function to sort the given array by using heap sort.&quot;, &quot;code&quot;: &quot;def heap_sort(arr):\r\n    heapify(arr)  \r\n    end = len(arr) - 1\r\n    while end &gt; 0:\r\n        arr[end], arr[0] = arr[0], arr[end]\r\n        shift_down(arr, 0, end - 1)\r\n        end -= 1\r\n    return arr\r\n\r\ndef heapify(arr):\r\n    start = len(arr) // 2\r\n    while start &gt;= 0:\r\n        shift_down(arr, start, len(arr) - 1)\r\n        start -= 1\r\ndef shift_down(arr, start, end):\r\n    root = start\r\n    while root * 2 + 1 &lt;= end:\r\n        child = root * 2 + 1\r\n        if child + 1 &lt;= end and arr[child] &lt; arr[child + 1]:\r\n            child += 1\r\n        if child &lt;= end and arr[root] &lt; arr[child]:\r\n            arr[root], arr[child] = arr[child], arr[root]\r\n            root = child\r\n        else:\r\n            return\r\n&quot;, &quot;task_id&quot;: 940, &quot;test_setup_code&quot;: &quot;&quot;, &quot;test_list&quot;: [&quot;assert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]&quot;, &quot;assert heap_sort([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]&quot;, &quot;assert heap_sort([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]&quot;], &quot;challenge_test_list&quot;: []}</td>
        </tr>
        <tr>
          <td id="L941" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="941"></td>
          <td id="LC941" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to count the elements in a list until an element is a tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_elim(num):<span class="pl-cce">\r\n</span>  count_elim = 0<span class="pl-cce">\r\n</span>  for n in num:<span class="pl-cce">\r\n</span>    if isinstance(n, tuple):<span class="pl-cce">\r\n</span>        break<span class="pl-cce">\r\n</span>    count_elim += 1<span class="pl-cce">\r\n</span>  return count_elim<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">941</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert count_elim([10,20,30,(10,20),40])==3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_elim([10,(20,30),(10,20),40])==1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert count_elim([(10,(20,30,(10,20),40))])==0<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L942" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="942"></td>
          <td id="LC942" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to check if any list element is present in the given list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check_element(test_tup, check_list):<span class="pl-cce">\r\n</span>  res = False<span class="pl-cce">\r\n</span>  for ele in check_list:<span class="pl-cce">\r\n</span>    if ele in test_tup:<span class="pl-cce">\r\n</span>      res = True<span class="pl-cce">\r\n</span>      break<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">942</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L943" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="943"></td>
          <td id="LC943" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to combine two given sorted lists using heapq module.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from heapq import merge<span class="pl-cce">\r\n</span>def combine_lists(num1,num2):<span class="pl-cce">\r\n</span>  combine_lists=list(merge(num1, num2))<span class="pl-cce">\r\n</span>  return combine_lists<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">943</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert combine_lists([1,3,7],[2,4,6])==[1,2,3,4,6,7]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L944" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="944"></td>
          <td id="LC944" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to separate and print the numbers and their position of a given string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def num_position(text):<span class="pl-cce">\r\n</span> for m in re.finditer(<span class="pl-cce">\&quot;\\</span>d+<span class="pl-cce">\&quot;</span>, text):<span class="pl-cce">\r\n</span>    return m.start()<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">944</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert num_position(<span class="pl-cce">\&quot;</span>there are 70 flats in this apartment<span class="pl-cce">\&quot;</span>)==10<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert num_position(<span class="pl-cce">\&quot;</span>every adult have 32 teeth<span class="pl-cce">\&quot;</span>)==17<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert num_position(<span class="pl-cce">\&quot;</span>isha has 79 chocolates in her bag<span class="pl-cce">\&quot;</span>)==9<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L945" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="945"></td>
          <td id="LC945" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to convert the given tuples into set.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def tuple_to_set(t):<span class="pl-cce">\r\n</span>  s = set(t)<span class="pl-cce">\r\n</span>  return (s) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">945</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert tuple_to_set((&#39;x&#39;, &#39;y&#39;, &#39;z&#39;) ) == {&#39;y&#39;, &#39;x&#39;, &#39;z&#39;}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert tuple_to_set((&#39;a&#39;, &#39;b&#39;, &#39;c&#39;) ) == {&#39;c&#39;, &#39;a&#39;, &#39;b&#39;}<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert tuple_to_set((&#39;z&#39;, &#39;d&#39;, &#39;e&#39;) ) == {&#39;d&#39;, &#39;e&#39;, &#39;z&#39;}<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L946" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="946"></td>
          <td id="LC946" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the most common elements and their counts of a specified text.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>from collections import Counter <span class="pl-cce">\r\n</span>def most_common_elem(s,a):<span class="pl-cce">\r\n</span>  most_common_elem=Counter(s).most_common(a)<span class="pl-cce">\r\n</span>  return most_common_elem<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">946</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert most_common_elem(&#39;lkseropewdssafsdfafkpwe&#39;,3)==[(&#39;s&#39;, 4), (&#39;e&#39;, 3), (&#39;f&#39;, 3)] <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert most_common_elem(&#39;lkseropewdssafsdfafkpwe&#39;,2)==[(&#39;s&#39;, 4), (&#39;e&#39;, 3)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert most_common_elem(&#39;lkseropewdssafsdfafkpwe&#39;,7)==[(&#39;s&#39;, 4), (&#39;e&#39;, 3), (&#39;f&#39;, 3), (&#39;k&#39;, 2), (&#39;p&#39;, 2), (&#39;w&#39;, 2), (&#39;d&#39;, 2)]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L947" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="947"></td>
          <td id="LC947" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the length of the shortest word.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def len_log(list1):<span class="pl-cce">\r\n</span>    min=len(list1[0])<span class="pl-cce">\r\n</span>    for i in list1:<span class="pl-cce">\r\n</span>        if len(i)&lt;min:<span class="pl-cce">\r\n</span>            min=len(i)<span class="pl-cce">\r\n</span>    return min<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">947</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert len_log([<span class="pl-cce">\&quot;</span>win<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>lose<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>great<span class="pl-cce">\&quot;</span>]) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert len_log([<span class="pl-cce">\&quot;</span>a<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>ab<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>abc<span class="pl-cce">\&quot;</span>]) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert len_log([<span class="pl-cce">\&quot;</span>12<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>12<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>1234<span class="pl-cce">\&quot;</span>]) == 2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L948" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="948"></td>
          <td id="LC948" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to get an item of a tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def get_item(tup1,index):<span class="pl-cce">\r\n</span>  item = tup1[index]<span class="pl-cce">\r\n</span>  return item<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">948</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert get_item((<span class="pl-cce">\&quot;</span>w<span class="pl-cce">\&quot;</span>, 3, <span class="pl-cce">\&quot;</span>r<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>e<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>s<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>o<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>u<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>r<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>c<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>e<span class="pl-cce">\&quot;</span>),3)==(&#39;e&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_item((<span class="pl-cce">\&quot;</span>w<span class="pl-cce">\&quot;</span>, 3, <span class="pl-cce">\&quot;</span>r<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>e<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>s<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>o<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>u<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>r<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>c<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>e<span class="pl-cce">\&quot;</span>),-4)==(&#39;u&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_item((<span class="pl-cce">\&quot;</span>w<span class="pl-cce">\&quot;</span>, 3, <span class="pl-cce">\&quot;</span>r<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>e<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>s<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>o<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>u<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>r<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>c<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>e<span class="pl-cce">\&quot;</span>),-3)==(&#39;r&#39;)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L949" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="949"></td>
          <td id="LC949" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to sort the given tuple list basis the total digits in tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def count_digs(tup):<span class="pl-cce">\r\n</span>  return sum([len(str(ele)) for ele in tup ]) <span class="pl-cce">\r\n</span>def sort_list(test_list):<span class="pl-cce">\r\n</span>  test_list.sort(key = count_digs)<span class="pl-cce">\r\n</span>  return (str(test_list))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">949</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == &#39;[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == &#39;[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == &#39;[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]&#39;<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L950" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="950"></td>
          <td id="LC950" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to display sign of the chinese zodiac for given year.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def chinese_zodiac(year):<span class="pl-cce">\r\n</span> if (year - 2000) % 12 == 0:<span class="pl-cce">\r\n</span>     sign = &#39;Dragon&#39;<span class="pl-cce">\r\n</span> elif (year - 2000) % 12 == 1:<span class="pl-cce">\r\n</span>     sign = &#39;Snake&#39;<span class="pl-cce">\r\n</span> elif (year - 2000) % 12 == 2:<span class="pl-cce">\r\n</span>     sign = &#39;Horse&#39;<span class="pl-cce">\r\n</span> elif (year - 2000) % 12 == 3:<span class="pl-cce">\r\n</span>     sign = &#39;sheep&#39;<span class="pl-cce">\r\n</span> elif (year - 2000) % 12 == 4:<span class="pl-cce">\r\n</span>     sign = &#39;Monkey&#39;<span class="pl-cce">\r\n</span> elif (year - 2000) % 12 == 5:<span class="pl-cce">\r\n</span>     sign = &#39;Rooster&#39;<span class="pl-cce">\r\n</span> elif (year - 2000) % 12 == 6:<span class="pl-cce">\r\n</span>     sign = &#39;Dog&#39;<span class="pl-cce">\r\n</span> elif (year - 2000) % 12 == 7:<span class="pl-cce">\r\n</span>     sign = &#39;Pig&#39;<span class="pl-cce">\r\n</span> elif (year - 2000) % 12 == 8:<span class="pl-cce">\r\n</span>     sign = &#39;Rat&#39;<span class="pl-cce">\r\n</span> elif (year - 2000) % 12 == 9:<span class="pl-cce">\r\n</span>     sign = &#39;Ox&#39;<span class="pl-cce">\r\n</span> elif (year - 2000) % 12 == 10:<span class="pl-cce">\r\n</span>     sign = &#39;Tiger&#39;<span class="pl-cce">\r\n</span> else:<span class="pl-cce">\r\n</span>     sign = &#39;Hare&#39;<span class="pl-cce">\r\n</span> return sign<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">950</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert chinese_zodiac(1997)==(&#39;Ox&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert chinese_zodiac(1998)==(&#39;Tiger&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert chinese_zodiac(1994)==(&#39;Dog&#39;)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L951" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="951"></td>
          <td id="LC951" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the maximum of similar indices in two lists of tuples.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def max_similar_indices(test_list1, test_list2):<span class="pl-cce">\r\n</span>  res = [(max(x[0], y[0]), max(x[1], y[1]))<span class="pl-cce">\r\n</span>   for x, y in zip(test_list1, test_list2)]<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">951</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L952" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="952"></td>
          <td id="LC952" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to compute the value of ncr mod p.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def nCr_mod_p(n, r, p): <span class="pl-cce">\r\n\t</span>if (r &gt; n- r): <span class="pl-cce">\r\n\t\t</span>r = n - r <span class="pl-cce">\r\n\t</span>C = [0 for i in range(r + 1)] <span class="pl-cce">\r\n\t</span>C[0] = 1 <span class="pl-cce">\r\n\t</span>for i in range(1, n + 1): <span class="pl-cce">\r\n\t\t</span>for j in range(min(i, r), 0, -1): <span class="pl-cce">\r\n\t\t\t</span>C[j] = (C[j] + C[j-1]) % p <span class="pl-cce">\r\n\t</span>return C[r] <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">952</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert nCr_mod_p(10, 2, 13) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert nCr_mod_p(11, 3, 14) == 11<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert nCr_mod_p(18, 14, 19) == 1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L953" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="953"></td>
          <td id="LC953" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the minimun number of subsets with distinct elements.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def subset(ar, n): <span class="pl-cce">\r\n</span>    res = 0<span class="pl-cce">\r\n</span>    ar.sort() <span class="pl-cce">\r\n</span>    for i in range(0, n) : <span class="pl-cce">\r\n</span>        count = 1<span class="pl-cce">\r\n</span>        for i in range(n - 1): <span class="pl-cce">\r\n</span>            if ar[i] == ar[i + 1]: <span class="pl-cce">\r\n</span>                count+=1<span class="pl-cce">\r\n</span>            else: <span class="pl-cce">\r\n</span>                break <span class="pl-cce">\r\n</span>        res = max(res, count)  <span class="pl-cce">\r\n</span>    return res <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">953</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert subset([1, 2, 3, 4],4) == 1<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert subset([5, 6, 9, 3, 4, 3, 4],7) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert subset([1, 2, 3 ],3) == 1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L954" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="954"></td>
          <td id="LC954" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function that gives profit amount if the given amount has profit else return none.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def profit_amount(actual_cost,sale_amount): <span class="pl-cce">\r\n</span> if(actual_cost &gt; sale_amount):<span class="pl-cce">\r\n</span>    amount = actual_cost - sale_amount<span class="pl-cce">\r\n</span>    return amount<span class="pl-cce">\r\n</span> else:<span class="pl-cce">\r\n</span>    return None<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">954</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert profit_amount(1500,1200)==300<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert profit_amount(100,200)==None<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert profit_amount(2000,5000)==None<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L955" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="955"></td>
          <td id="LC955" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find out, if the given number is abundant.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def is_abundant(n):<span class="pl-cce">\r\n</span>    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])<span class="pl-cce">\r\n</span>    return fctrsum &gt; n<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">955</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert is_abundant(12)==True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_abundant(13)==False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert is_abundant(9)==False<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L956" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="956"></td>
          <td id="LC956" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to split the given string at uppercase letters by using regex.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import re<span class="pl-cce">\r\n</span>def split_list(text):<span class="pl-cce">\r\n</span>  return (re.findall(&#39;[A-Z][^A-Z]*&#39;, text))<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">956</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert split_list(<span class="pl-cce">\&quot;</span>LearnToBuildAnythingWithGoogle<span class="pl-cce">\&quot;</span>) == [&#39;Learn&#39;, &#39;To&#39;, &#39;Build&#39;, &#39;Anything&#39;, &#39;With&#39;, &#39;Google&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert split_list(<span class="pl-cce">\&quot;</span>ApmlifyingTheBlack+DeveloperCommunity<span class="pl-cce">\&quot;</span>) == [&#39;Apmlifying&#39;, &#39;The&#39;, &#39;Black+&#39;, &#39;Developer&#39;, &#39;Community&#39;]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert split_list(<span class="pl-cce">\&quot;</span>UpdateInTheGoEcoSystem<span class="pl-cce">\&quot;</span>) == [&#39;Update&#39;, &#39;In&#39;, &#39;The&#39;, &#39;Go&#39;, &#39;Eco&#39;, &#39;System&#39;]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L957" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="957"></td>
          <td id="LC957" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to get the position of rightmost set bit.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>import math<span class="pl-cce">\r\n</span>def get_First_Set_Bit_Pos(n):<span class="pl-cce">\r\n</span>     return math.log2(n&amp;-n)+1<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">957</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert get_First_Set_Bit_Pos(12) == 3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_First_Set_Bit_Pos(18) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_First_Set_Bit_Pos(16) == 5<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L958" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="958"></td>
          <td id="LC958" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to convert an integer into a roman numeral.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def int_to_roman( num):<span class="pl-cce">\r\n</span>        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]<span class="pl-cce">\r\n</span>        syb = [<span class="pl-cce">\&quot;</span>M<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>CM<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>D<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>CD<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>C<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>XC<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>L<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>XL<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>X<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>IX<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>V<span class="pl-cce">\&quot;</span>, <span class="pl-cce">\&quot;</span>IV<span class="pl-cce">\&quot;</span>,<span class="pl-cce">\&quot;</span>I<span class="pl-cce">\&quot;</span>]<span class="pl-cce">\r\n</span>        roman_num = &#39;&#39;<span class="pl-cce">\r\n</span>        i = 0<span class="pl-cce">\r\n</span>        while  num &gt; 0:<span class="pl-cce">\r\n</span>            for _ in range(num // val[i]):<span class="pl-cce">\r\n</span>                roman_num += syb[i]<span class="pl-cce">\r\n</span>                num -= val[i]<span class="pl-cce">\r\n</span>            i += 1<span class="pl-cce">\r\n</span>        return roman_num<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">958</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert int_to_roman(1)==(<span class="pl-cce">\&quot;</span>I<span class="pl-cce">\&quot;</span>)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert int_to_roman(50)==(<span class="pl-cce">\&quot;</span>L<span class="pl-cce">\&quot;</span>)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert int_to_roman(4)==(<span class="pl-cce">\&quot;</span>IV<span class="pl-cce">\&quot;</span>)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L959" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="959"></td>
          <td id="LC959" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the average of a list.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def Average(lst): <span class="pl-cce">\r\n</span>    return sum(lst) / len(lst) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">959</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert Average([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Average([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert Average([1,2,3]) == 2<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L960" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="960"></td>
          <td id="LC960" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to solve tiling problem.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def get_noOfways(n):<span class="pl-cce">\r\n</span>    if (n == 0):<span class="pl-cce">\r\n</span>        return 0;<span class="pl-cce">\r\n</span>    if (n == 1):<span class="pl-cce">\r\n</span>        return 1; <span class="pl-cce">\r\n</span>    return get_noOfways(n - 1) + get_noOfways(n - 2);<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">960</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert get_noOfways(4)==3<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_noOfways(3)==2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert get_noOfways(5)==5<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L961" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="961"></td>
          <td id="LC961" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to convert a roman numeral to an integer.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def roman_to_int(s):<span class="pl-cce">\r\n</span>        rom_val = {&#39;I&#39;: 1, &#39;V&#39;: 5, &#39;X&#39;: 10, &#39;L&#39;: 50, &#39;C&#39;: 100, &#39;D&#39;: 500, &#39;M&#39;: 1000}<span class="pl-cce">\r\n</span>        int_val = 0<span class="pl-cce">\r\n</span>        for i in range(len(s)):<span class="pl-cce">\r\n</span>            if i &gt; 0 and rom_val[s[i]] &gt; rom_val[s[i - 1]]:<span class="pl-cce">\r\n</span>                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]<span class="pl-cce">\r\n</span>            else:<span class="pl-cce">\r\n</span>                int_val += rom_val[s[i]]<span class="pl-cce">\r\n</span>        return int_val<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">961</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert roman_to_int(&#39;MMMCMLXXXVI&#39;)==3986<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert roman_to_int(&#39;MMMM&#39;)==4000<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert roman_to_int(&#39;C&#39;)==100<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L962" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="962"></td>
          <td id="LC962" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find the sum of all even natural numbers within the range l and r.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def sum_Natural(n): <span class="pl-cce">\r\n</span>    sum = (n * (n + 1)) <span class="pl-cce">\r\n</span>    return int(sum) <span class="pl-cce">\r\n</span>def sum_Even(l,r): <span class="pl-cce">\r\n</span>    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">962</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_Even(2,5) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_Even(3,8) == 18<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert sum_Even(4,6) == 10<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L963" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="963"></td>
          <td id="LC963" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to calculate the discriminant value.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def discriminant_value(x,y,z):<span class="pl-cce">\r\n</span>    discriminant = (y**2) - (4*x*z)<span class="pl-cce">\r\n</span>    if discriminant &gt; 0:<span class="pl-cce">\r\n</span>        return (<span class="pl-cce">\&quot;</span>Two solutions<span class="pl-cce">\&quot;</span>,discriminant)<span class="pl-cce">\r\n</span>    elif discriminant == 0:<span class="pl-cce">\r\n</span>        return (<span class="pl-cce">\&quot;</span>one solution<span class="pl-cce">\&quot;</span>,discriminant)<span class="pl-cce">\r\n</span>    elif discriminant &lt; 0:<span class="pl-cce">\r\n</span>        return (<span class="pl-cce">\&quot;</span>no real solution<span class="pl-cce">\&quot;</span>,discriminant)<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">963</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert discriminant_value(4,8,2)==(<span class="pl-cce">\&quot;</span>Two solutions<span class="pl-cce">\&quot;</span>,32)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert discriminant_value(5,7,9)==(<span class="pl-cce">\&quot;</span>no real solution<span class="pl-cce">\&quot;</span>,-131)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert discriminant_value(0,0,9)==(<span class="pl-cce">\&quot;</span>one solution<span class="pl-cce">\&quot;</span>,0)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L964" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="964"></td>
          <td id="LC964" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to check whether the length of the word is even or not.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def word_len(s): <span class="pl-cce">\r\n</span>    s = s.split(&#39; &#39;)   <span class="pl-cce">\r\n</span>    for word in s:    <span class="pl-cce">\r\n</span>        if len(word)%2==0: <span class="pl-cce">\r\n</span>            return True  <span class="pl-cce">\r\n</span>        else:<span class="pl-cce">\r\n</span>          return False<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">964</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert word_len(<span class="pl-cce">\&quot;</span>program<span class="pl-cce">\&quot;</span>) == False<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert word_len(<span class="pl-cce">\&quot;</span>solution<span class="pl-cce">\&quot;</span>) == True<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert word_len(<span class="pl-cce">\&quot;</span>data<span class="pl-cce">\&quot;</span>) == True<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L965" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="965"></td>
          <td id="LC965" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to convert camel case string to snake case string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def camel_to_snake(text):<span class="pl-cce">\r\n</span>        import re<span class="pl-cce">\r\n</span>        str1 = re.sub(&#39;(.)([A-Z][a-z]+)&#39;, r&#39;<span class="pl-cce">\\</span>1_<span class="pl-cce">\\</span>2&#39;, text)<span class="pl-cce">\r\n</span>        return re.sub(&#39;([a-z0-9])([A-Z])&#39;, r&#39;<span class="pl-cce">\\</span>1_<span class="pl-cce">\\</span>2&#39;, str1).lower()<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">965</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert camel_to_snake(&#39;PythonProgram&#39;)==(&#39;python_program&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert camel_to_snake(&#39;pythonLanguage&#39;)==(&#39;python_language&#39;)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert camel_to_snake(&#39;ProgrammingLanguage&#39;)==(&#39;programming_language&#39;)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L966" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="966"></td>
          <td id="LC966" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to remove an empty tuple from a list of tuples.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def remove_empty(tuple1): #L = [(), (), (&#39;&#39;,), (&#39;a&#39;, &#39;b&#39;), (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;), (&#39;d&#39;)]<span class="pl-cce">\r\n</span>   tuple1 = [t for t in tuple1 if t]<span class="pl-cce">\r\n</span>   return tuple1<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">966</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_empty([(), (), (&#39;&#39;,), (&#39;a&#39;, &#39;b&#39;), (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;), (&#39;d&#39;)])==[(&#39;&#39;,), (&#39;a&#39;, &#39;b&#39;), (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;), &#39;d&#39;]  <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_empty([(), (), (&#39;&#39;,), (<span class="pl-cce">\&quot;</span>python<span class="pl-cce">\&quot;</span>), (<span class="pl-cce">\&quot;</span>program<span class="pl-cce">\&quot;</span>)])==[(&#39;&#39;,), (<span class="pl-cce">\&quot;</span>python<span class="pl-cce">\&quot;</span>), (<span class="pl-cce">\&quot;</span>program<span class="pl-cce">\&quot;</span>)]  <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert remove_empty([(), (), (&#39;&#39;,), (<span class="pl-cce">\&quot;</span>java<span class="pl-cce">\&quot;</span>)])==[(&#39;&#39;,),(<span class="pl-cce">\&quot;</span>java<span class="pl-cce">\&quot;</span>) ]  <span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L967" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="967"></td>
          <td id="LC967" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to accept the strings which contains all vowels.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def check(string): <span class="pl-cce">\r\n</span>  if len(set(string).intersection(<span class="pl-cce">\&quot;</span>AEIOUaeiou<span class="pl-cce">\&quot;</span>))&gt;=5: <span class="pl-cce">\r\n</span>    return (&#39;accepted&#39;) <span class="pl-cce">\r\n</span>  else: <span class="pl-cce">\r\n</span>    return (<span class="pl-cce">\&quot;</span>not accepted<span class="pl-cce">\&quot;</span>) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">967</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert check(<span class="pl-cce">\&quot;</span>SEEquoiaL<span class="pl-cce">\&quot;</span>) == &#39;accepted&#39;<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check(&#39;program&#39;) == <span class="pl-cce">\&quot;</span>not accepted<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert check(&#39;fine&#39;) == <span class="pl-cce">\&quot;</span>not accepted<span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L968" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="968"></td>
          <td id="LC968" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to find maximum possible value for the given periodic function.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def floor_Max(A,B,N):<span class="pl-cce">\r\n</span>    x = min(B - 1,N)<span class="pl-cce">\r\n</span>    return (A*x) // B<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">968</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert floor_Max(11,10,9) == 9<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert floor_Max(5,7,4) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert floor_Max(2,2,1) == 1<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L969" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="969"></td>
          <td id="LC969" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to join the tuples if they have similar initial elements.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def join_tuples(test_list):<span class="pl-cce">\r\n</span>  res = []<span class="pl-cce">\r\n</span>  for sub in test_list:<span class="pl-cce">\r\n</span>    if res and res[-1][0] == sub[0]:<span class="pl-cce">\r\n</span>      res[-1].extend(sub[1:])<span class="pl-cce">\r\n</span>    else:<span class="pl-cce">\r\n</span>      res.append([ele for ele in sub])<span class="pl-cce">\r\n</span>  res = list(map(tuple, res))<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">969</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L970" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="970"></td>
          <td id="LC970" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find minimum of two numbers.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def min_of_two( x, y ):<span class="pl-cce">\r\n</span>    if x &lt; y:<span class="pl-cce">\r\n</span>        return x<span class="pl-cce">\r\n</span>    return y<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">970</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert min_of_two(10,20)==10<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_of_two(19,15)==15<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_of_two(-10,-20)==-20<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L971" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="971"></td>
          <td id="LC971" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def maximum_segments(n, a, b, c) : <span class="pl-cce">\r\n\t</span>dp = [-1] * (n + 10) <span class="pl-cce">\r\n\t</span>dp[0] = 0<span class="pl-cce">\r\n\t</span>for i in range(0, n) : <span class="pl-cce">\r\n\t\t</span>if (dp[i] != -1) : <span class="pl-cce">\r\n\t\t\t</span>if(i + a &lt;= n ): <span class="pl-cce">\r\n\t\t\t\t</span>dp[i + a] = max(dp[i] + 1, <span class="pl-cce">\r\n\t\t\t\t\t\t\t</span>dp[i + a]) <span class="pl-cce">\r\n\t\t\t</span>if(i + b &lt;= n ): <span class="pl-cce">\r\n\t\t\t\t</span>dp[i + b] = max(dp[i] + 1, <span class="pl-cce">\r\n\t\t\t\t\t\t\t</span>dp[i + b]) <span class="pl-cce">\r\n\t\t\t</span>if(i + c &lt;= n ): <span class="pl-cce">\r\n\t\t\t\t</span>dp[i + c] = max(dp[i] + 1, <span class="pl-cce">\r\n\t\t\t\t\t\t\t</span>dp[i + c]) <span class="pl-cce">\r\n\t</span>return dp[n]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">971</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert maximum_segments(7, 5, 2, 5) == 2<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert maximum_segments(17, 2, 1, 3) == 17<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert maximum_segments(18, 16, 3, 6) == 6<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L972" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="972"></td>
          <td id="LC972" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to concatenate the given two tuples to a nested tuple.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def concatenate_nested(test_tup1, test_tup2):<span class="pl-cce">\r\n</span>  res = test_tup1 + test_tup2<span class="pl-cce">\r\n</span>  return (res) <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">972</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert concatenate_nested((1, 2), (3, 4)) == (1, 2, 3, 4)<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert concatenate_nested((4, 5), (6, 8)) == (4, 5, 6, 8)<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L973" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="973"></td>
          <td id="LC973" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a python function to left rotate the string.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def left_rotate(s,d):<span class="pl-cce">\r\n</span>    tmp = s[d : ] + s[0 : d]<span class="pl-cce">\r\n</span>    return tmp  <span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">973</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert left_rotate(<span class="pl-cce">\&quot;</span>python<span class="pl-cce">\&quot;</span>,2) == <span class="pl-cce">\&quot;</span>thonpy<span class="pl-cce">\&quot;</span>   <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert left_rotate(<span class="pl-cce">\&quot;</span>bigdata<span class="pl-cce">\&quot;</span>,3 ) == <span class="pl-cce">\&quot;</span>databig<span class="pl-cce">\&quot;</span> <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert left_rotate(<span class="pl-cce">\&quot;</span>hadoop<span class="pl-cce">\&quot;</span>,1 ) == <span class="pl-cce">\&quot;</span>adooph<span class="pl-cce">\&quot;</span> <span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
        <tr>
          <td id="L974" class="blob-num js-line-number js-code-nav-line-number js-blob-rnum" data-line-number="974"></td>
          <td id="LC974" class="blob-code blob-code-inner js-file-line">{<span class="pl-ent">&quot;text&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>Write a function to find the minimum total path sum in the given triangle.<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span>def min_sum_path(A): <span class="pl-cce">\r\n\t</span>memo = [None] * len(A) <span class="pl-cce">\r\n\t</span>n = len(A) - 1<span class="pl-cce">\r\n\t</span>for i in range(len(A[n])): <span class="pl-cce">\r\n\t\t</span>memo[i] = A[n][i] <span class="pl-cce">\r\n\t</span>for i in range(len(A) - 2, -1,-1): <span class="pl-cce">\r\n\t\t</span>for j in range( len(A[i])): <span class="pl-cce">\r\n\t\t\t</span>memo[j] = A[i][j] + min(memo[j], <span class="pl-cce">\r\n\t\t\t\t\t\t\t\t\t</span>memo[j + 1]) <span class="pl-cce">\r\n\t</span>return memo[0]<span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;task_id&quot;</span>: <span class="pl-c1">974</span>, <span class="pl-ent">&quot;test_setup_code&quot;</span>: <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-ent">&quot;test_list&quot;</span>: [<span class="pl-s"><span class="pl-pds">&quot;</span>assert min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10 <span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>assert min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9<span class="pl-pds">&quot;</span></span>], <span class="pl-ent">&quot;challenge_test_list&quot;</span>: []}</td>
        </tr>
  </table>
</div>

  <details class="details-reset details-overlay BlobToolbar position-absolute js-file-line-actions dropdown d-none" aria-hidden="true">
    <summary class="btn-octicon ml-0 px-2 p-0 color-bg-default border color-border-default rounded-2" aria-label="Inline file action toolbar">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-kebab-horizontal">
    <path d="M8 9a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3ZM1.5 9a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Zm13 0a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Z"></path>
</svg>
    </summary>
    <details-menu>

      <ul class="BlobToolbar-dropdown dropdown-menu dropdown-menu-se ml-2 mt-2"
      style="width:185px"
      >
        <li>
          <clipboard-copy role="menuitem" class="dropdown-item" id="js-copy-lines" style="cursor:pointer;" aria-label="Copy lines">
            Copy lines
          </clipboard-copy>
        </li>
        <li>
          <clipboard-copy role="menuitem" class="dropdown-item" id="js-copy-permalink" style="cursor:pointer;" aria-label="Copy permalink">
            Copy permalink
          </clipboard-copy>
        </li>
        <li><a class="dropdown-item js-update-url-with-hash" id="js-view-git-blame" role="menuitem" href="/google-research/google-research/blame/23e7e50c883841c2045982433e57e1174dff51b8/mbpp/mbpp.jsonl">View git blame</a></li>
          <li><a class="dropdown-item" id="js-new-issue" role="menuitem" href="/google-research/google-research/issues/new">Reference in new issue</a></li>
      </ul>
    </details-menu>
  </details>

    </div>

    </div>


  

  <details class="details-reset details-overlay details-overlay-dark" id="jumpto-line-details-dialog">
    <summary data-hotkey="l" aria-label="Jump to line"></summary>
    <details-dialog class="Box Box--overlay d-flex flex-column anim-fade-in fast linejump overflow-hidden" aria-label="Jump to line">
      <!-- '"` --><!-- </textarea></xmp> --></option></form><form class="js-jump-to-line-form Box-body d-flex" data-turbo="false" action="" accept-charset="UTF-8" method="get">
        <input class="form-control flex-auto mr-3 linejump-input js-jump-to-line-field" type="text" placeholder="Jump to line&hellip;" aria-label="Jump to line" autofocus>
          <button data-close-dialog="" type="submit" data-view-component="true" class="btn">    Go
</button>
</form>    </details-dialog>
  </details>



</div>

  </div>


  </div>

</turbo-frame>


    </main>
  </div>

  </div>

          <footer class="footer width-full container-xl p-responsive" role="contentinfo">
  <h2 class='sr-only'>Footer</h2>

  <div class="position-relative d-flex flex-items-center pb-2 f6 color-fg-muted border-top color-border-muted flex-column-reverse flex-lg-row flex-wrap flex-lg-nowrap mt-6 pt-6">
    <div class="list-style-none d-flex flex-wrap col-0 col-lg-2 flex-justify-start flex-lg-justify-between mb-2 mb-lg-0">
      <div class="mt-2 mt-lg-0 d-flex flex-items-center">
        <a aria-label="Homepage" title="GitHub" class="footer-octicon mr-2" href="https://github.com">
          <svg aria-hidden="true" height="24" viewBox="0 0 16 16" version="1.1" width="24" data-view-component="true" class="octicon octicon-mark-github">
    <path d="M8 0c4.42 0 8 3.58 8 8a8.013 8.013 0 0 1-5.45 7.59c-.4.08-.55-.17-.55-.38 0-.27.01-1.13.01-2.2 0-.75-.25-1.23-.54-1.48 1.78-.2 3.65-.88 3.65-3.95 0-.88-.31-1.59-.82-2.15.08-.2.36-1.02-.08-2.12 0 0-.67-.22-2.2.82-.64-.18-1.32-.27-2-.27-.68 0-1.36.09-2 .27-1.53-1.03-2.2-.82-2.2-.82-.44 1.1-.16 1.92-.08 2.12-.51.56-.82 1.28-.82 2.15 0 3.06 1.86 3.75 3.64 3.95-.23.2-.44.55-.51 1.07-.46.21-1.61.55-2.33-.66-.15-.24-.6-.83-1.23-.82-.67.01-.27.38.01.53.34.19.73.9.82 1.13.16.45.68 1.31 2.69.94 0 .67.01 1.3.01 1.49 0 .21-.15.45-.55.38A7.995 7.995 0 0 1 0 8c0-4.42 3.58-8 8-8Z"></path>
</svg>
</a>        <span>
        &copy; 2023 GitHub, Inc.
        </span>
      </div>
    </div>

    <nav aria-label='Footer' class="col-12 col-lg-8">
      <h3 class='sr-only' id='sr-footer-heading'>Footer navigation</h3>
      <ul class="list-style-none d-flex flex-wrap col-12 flex-justify-center flex-lg-justify-between mb-2 mb-lg-0" aria-labelledby='sr-footer-heading'>
          <li class="mr-3 mr-lg-0"><a href="https://docs.github.com/site-policy/github-terms/github-terms-of-service" data-analytics-event="{&quot;category&quot;:&quot;Footer&quot;,&quot;action&quot;:&quot;go to terms&quot;,&quot;label&quot;:&quot;text:terms&quot;}">Terms</a></li>
          <li class="mr-3 mr-lg-0"><a href="https://docs.github.com/site-policy/privacy-policies/github-privacy-statement" data-analytics-event="{&quot;category&quot;:&quot;Footer&quot;,&quot;action&quot;:&quot;go to privacy&quot;,&quot;label&quot;:&quot;text:privacy&quot;}">Privacy</a></li>
          <li class="mr-3 mr-lg-0"><a data-analytics-event="{&quot;category&quot;:&quot;Footer&quot;,&quot;action&quot;:&quot;go to security&quot;,&quot;label&quot;:&quot;text:security&quot;}" href="https://github.com/security">Security</a></li>
          <li class="mr-3 mr-lg-0"><a href="https://www.githubstatus.com/" data-analytics-event="{&quot;category&quot;:&quot;Footer&quot;,&quot;action&quot;:&quot;go to status&quot;,&quot;label&quot;:&quot;text:status&quot;}">Status</a></li>
          <li class="mr-3 mr-lg-0"><a data-ga-click="Footer, go to help, text:Docs" href="https://docs.github.com">Docs</a></li>
          <li class="mr-3 mr-lg-0"><a href="https://support.github.com?tags=dotcom-footer" data-analytics-event="{&quot;category&quot;:&quot;Footer&quot;,&quot;action&quot;:&quot;go to contact&quot;,&quot;label&quot;:&quot;text:contact&quot;}">Contact GitHub</a></li>
          <li class="mr-3 mr-lg-0"><a href="https://github.com/pricing" data-analytics-event="{&quot;category&quot;:&quot;Footer&quot;,&quot;action&quot;:&quot;go to Pricing&quot;,&quot;label&quot;:&quot;text:Pricing&quot;}">Pricing</a></li>
        <li class="mr-3 mr-lg-0"><a href="https://docs.github.com" data-analytics-event="{&quot;category&quot;:&quot;Footer&quot;,&quot;action&quot;:&quot;go to api&quot;,&quot;label&quot;:&quot;text:api&quot;}">API</a></li>
        <li class="mr-3 mr-lg-0"><a href="https://services.github.com" data-analytics-event="{&quot;category&quot;:&quot;Footer&quot;,&quot;action&quot;:&quot;go to training&quot;,&quot;label&quot;:&quot;text:training&quot;}">Training</a></li>
          <li class="mr-3 mr-lg-0"><a href="https://github.blog" data-analytics-event="{&quot;category&quot;:&quot;Footer&quot;,&quot;action&quot;:&quot;go to blog&quot;,&quot;label&quot;:&quot;text:blog&quot;}">Blog</a></li>
          <li><a data-ga-click="Footer, go to about, text:about" href="https://github.com/about">About</a></li>
      </ul>
    </nav>
  </div>

  <div class="d-flex flex-justify-center pb-6">
    <span class="f6 color-fg-muted"></span>
  </div>
</footer>




  <div id="ajax-error-message" class="ajax-error-message flash flash-error" hidden>
    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-alert">
    <path d="M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path>
</svg>
    <button type="button" class="flash-close js-ajax-error-dismiss" aria-label="Dismiss error">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x">
    <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"></path>
</svg>
    </button>
    You can’t perform that action at this time.
  </div>

  <div class="js-stale-session-flash flash flash-warn flash-banner" hidden
    >
    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-alert">
    <path d="M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path>
</svg>
    <span class="js-stale-session-flash-signed-in" hidden>You signed in with another tab or window. <a href="">Reload</a> to refresh your session.</span>
    <span class="js-stale-session-flash-signed-out" hidden>You signed out in another tab or window. <a href="">Reload</a> to refresh your session.</span>
  </div>
    <template id="site-details-dialog">
  <details class="details-reset details-overlay details-overlay-dark lh-default color-fg-default hx_rsm" open>
    <summary role="button" aria-label="Close dialog"></summary>
    <details-dialog class="Box Box--overlay d-flex flex-column anim-fade-in fast hx_rsm-dialog hx_rsm-modal">
      <button class="Box-btn-octicon m-0 btn-octicon position-absolute right-0 top-0" type="button" aria-label="Close dialog" data-close-dialog>
        <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x">
    <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"></path>
</svg>
      </button>
      <div class="octocat-spinner my-6 js-details-dialog-spinner"></div>
    </details-dialog>
  </details>
</template>

    <div class="Popover js-hovercard-content position-absolute" style="display: none; outline: none;" tabindex="0">
  <div class="Popover-message Popover-message--bottom-left Popover-message--large Box color-shadow-large" style="width:360px;">
  </div>
</div>

    <template id="snippet-clipboard-copy-button">
  <div class="zeroclipboard-container position-absolute right-0 top-0">
    <clipboard-copy aria-label="Copy" class="ClipboardButton btn js-clipboard-copy m-2 p-0 tooltipped-no-delay" data-copy-feedback="Copied!" data-tooltip-direction="w">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-copy js-clipboard-copy-icon m-2">
    <path d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 0 1 0 1.5h-1.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-1.5a.75.75 0 0 1 1.5 0v1.5A1.75 1.75 0 0 1 9.25 16h-7.5A1.75 1.75 0 0 1 0 14.25Z"></path><path d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0 1 14.25 11h-7.5A1.75 1.75 0 0 1 5 9.25Zm1.75-.25a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Z"></path>
</svg>
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-check js-clipboard-check-icon color-fg-success d-none m-2">
    <path d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z"></path>
</svg>
    </clipboard-copy>
  </div>
</template>
<template id="snippet-clipboard-copy-button-unpositioned">
  <div class="zeroclipboard-container">
    <clipboard-copy aria-label="Copy" class="ClipboardButton btn btn-invisible js-clipboard-copy m-2 p-0 tooltipped-no-delay d-flex flex-justify-center flex-items-center" data-copy-feedback="Copied!" data-tooltip-direction="w">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-copy js-clipboard-copy-icon">
    <path d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 0 1 0 1.5h-1.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-1.5a.75.75 0 0 1 1.5 0v1.5A1.75 1.75 0 0 1 9.25 16h-7.5A1.75 1.75 0 0 1 0 14.25Z"></path><path d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0 1 14.25 11h-7.5A1.75 1.75 0 0 1 5 9.25Zm1.75-.25a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Z"></path>
</svg>
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-check js-clipboard-check-icon color-fg-success d-none">
    <path d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z"></path>
</svg>
    </clipboard-copy>
  </div>
</template>




    </div>

    <div id="js-global-screen-reader-notice" class="sr-only" aria-live="polite" ></div>
  </body>
</html>

