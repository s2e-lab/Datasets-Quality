[{"nl": {"id": 2, "comment": "/**\n * @author Don Li\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3, "comment": "/*\n        inputCopy\n5 3\nxyabd\noutputCopy\n29\ninputCopy\n7 4\nproblem\noutputCopy\n34\ninputCopy\n2 2\nab\noutputCopy\n-1\ninputCopy\n12 1\nabaabbaaabbb\noutputCopy\n1\n        */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3, "comment": "/*\n\u2192Judgement Protocol\nTest: #1, time: 77 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n5 3\nxyabd\nOutput\n29\nAnswer\n29\nChecker Log\nok 1 number(s): \"29\"\nTest: #2, time: 78 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n7 4\nproblem\nOutput\n34\nAnswer\n34\nChecker Log\nok 1 number(s): \"34\"\nTest: #3, time: 139 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n2 2\nab\nOutput\n-1\nAnswer\n-1\nChecker Log\nok 1 number(s): \"-1\"\nTest: #4, time: 124 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n12 1\nabaabbaaabbb\nOutput\n1\nAnswer\n1\nChecker Log\nok 1 number(s): \"1\"\nTest: #5, time: 124 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n50 13\nqwertyuiopasdfghjklzxcvbnmaaaaaaaaaaaaaaaaaaaaaaaa\nOutput\n169\nAnswer\n169\nChecker Log\nok 1 number(s): \"169\"\nTest: #6, time: 108 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n50 14\nqwertyuiopasdfghjklzxcvbnmaaaaaaaaaaaaaaaaaaaaaaaa\nOutput\n-1\nAnswer\n-1\nChecker Log\nok 1 number(s): \"-1\"\nTest: #7, time: 93 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n1 1\na\nOutput\n1\nAnswer\n1\nChecker Log\nok 1 number(s): \"1\"\nTest: #8, time: 108 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n50 1\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nOutput\n1\nAnswer\n1\nChecker Log\nok 1 number(s): \"1\"\nTest: #9, time: 77 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n50 2\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nOutput\n-1\nAnswer\n-1\nChecker Log\nok 1 number(s): \"-1\"\nTest: #10, time: 92 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n13 13\nuwgmkyqeiaocs\nOutput\n169\nAnswer\n169\nChecker Log\nok 1 number(s): \"169\"\nTest: #11, time: 124 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n13 13\nhzdxpbfvrltnj\nOutput\n182\nAnswer\n182\nChecker Log\nok 1 number(s): \"182\"\nTest: #12, time: 93 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n1 1\nn\nOutput\n14\nAnswer\n14\nChecker Log\nok 1 number(s): \"14\"\nTest: #13, time: 92 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n10 8\nsmzeblyjqw\nOutput\n113\nAnswer\n113\nChecker Log\nok 1 number(s): \"113\"\nTest: #14, time: 78 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n20 20\ntzmvhskkyugkuuxpvtbh\nOutput\n-1\nAnswer\n-1\nChecker Log\nok 1 number(s): \"-1\"\nTest: #15, time: 109 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n30 15\nwjzolzzkfulwgioksfxmcxmnnjtoav\nOutput\n-1\nAnswer\n-1\nChecker Log\nok 1 number(s): \"-1\"\nTest: #16, time: 93 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n40 30\nxumfrflllrrgswehqtsskefixhcxjrxbjmrpsshv\nOutput\n-1\nAnswer\n-1\nChecker Log\nok 1 number(s): \"-1\"\nTest: #17, time: 124 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n50 31\nahbyyoxltryqdmvenemaqnbakglgqolxnaifnqtoclnnqiabpz\nOutput\n-1\nAnswer\n-1\nChecker Log\nok 1 number(s): \"-1\"\nTest: #18, time: 124 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n10 7\niuiukrxcml\nOutput\n99\nAnswer\n99\nChecker Log\nok 1 number(s): \"99\"\nTest: #19, time: 109 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n38 2\nvjzarfykmrsrvwbwfwldsulhxtykmjbnwmdufa\nOutput\n5\nAnswer\n5\nChecker Log\nok 1 number(s): \"5\"\nTest: #20, time: 77 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n12 6\nfwseyrarkwcd\nOutput\n61\nAnswer\n61\nChecker Log\nok 1 number(s): \"61\"\nTest: #21, time: 109 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n2 2\nac\nOutput\n4\nAnswer\n4\nChecker Log\nok 1 number(s): \"4\"\nTest: #22, time: 108 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n1 1\nc\nOutput\n3\nAnswer\n3\nChecker Log\nok 1 number(s): \"3\"\nTest: #23, time: 124 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n2 2\nad\nOutput\n5\nAnswer\n5\nChecker Log\nok 1 number(s): \"5\"\nTest: #24, time: 77 ms., memory: 0 KB, exit code: 0, checker exit code: 1, verdict: WRONG_ANSWER\nInput\n2 1\nac\nOutput\n-1\nAnswer\n1\nChecker Log\nwrong answer 1st number\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3, "comment": "//use pw.println() not pw.write();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3, "comment": "//Do not forget to write it after every program return statement !!\n"}, "Heuristic": []}, {"nl": {"id": 4, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Niyaz Nigmatullin\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4, "comment": "//            if (isEOF && ret < 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4, "comment": "//                throw new InputMismatchException();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4, "comment": "//            isEOF = ret == -1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 8, "comment": "/*\ninputCopy\n4\n2 1 2 1\noutputCopy\n4\ninputCopy\n5\n0 -1 -1 -1 -1\noutputCopy\n4\n*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 8, "comment": "// LM10: The next Ballon d'or\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 9, "comment": "// int n = Integer.parseInt(bf.readLine());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 9, "comment": "// int[] a = new int[n]; for(int i=0; i<n; i++) a[i] = Integer.parseInt(st.nextToken());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 12, "comment": "//        out.println(inversions);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 12, "comment": "//        System.err.println(Arrays.toString(a));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 15, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 17, "comment": "//package contese_476;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 17, "comment": "//HashMap<Integer,Integer> h1=new HashMap();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 17, "comment": "//h1.put(a[i],i);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 22, "comment": "//package com.krakn.CF.B1159;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 22, "comment": "//            System.out.println(i + \" \" + temp);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 23, "comment": "/* package whatever; // don't place package name! */"}, "Heuristic": ["H7"]}, {"nl": {"id": 23, "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 23, "comment": "// don't place package name! */\n"}, "Heuristic": []}, {"nl": {"id": 23, "comment": "//res+=(long)(tot1-tot2)*(long)A[i];\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 25, "comment": "/*int n = stdin.nextInt();\n        for(int i = 0; i < n; i++)\n        {\n        \ttest(stdin);\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 27, "comment": "/* spar5h */"}, "Heuristic": ["H7"]}, {"nl": {"id": 28, "comment": "/**\n *\n * @author Haya\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 32, "comment": "//import java.util.Scanner;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 32, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 32, "comment": "//System.out.println(i);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 34, "comment": "//boolean \n"}, "Heuristic": ["H2"]}, {"nl": {"id": 36, "comment": "/**\n     * @param args the command line arguments\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 39, "comment": "//it reads the data about the specified point and divide the data about it ,it is quite fast\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 39, "comment": "//than using direct \n"}, "Heuristic": []}, {"nl": {"id": 39, "comment": "//converts string to integer\n"}, "Heuristic": []}, {"nl": {"id": 39, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 40, "comment": "//System.out.println(lo);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 40, "comment": "//System.out.println(t1);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 43, "comment": "//if (i<11)\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 43, "comment": "//System.out.println(i +\" is \"+dp[i]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 46, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 46, "comment": "//p2[n - subtreeSize];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 47, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Pradyumn\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 51, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Pradyumn\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 53, "comment": "//UPSOLVE\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 55, "comment": "//System.out.println(h+\" \"+f+\" \"+(h-f));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 56, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 56, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 61, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 61, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 62, "comment": "//it reads the data about the specified point and divide the data about it ,it is quite fast\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 62, "comment": "//than using direct \n"}, "Heuristic": []}, {"nl": {"id": 62, "comment": "//converts string to integer\n"}, "Heuristic": []}, {"nl": {"id": 62, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 64, "comment": "//System.out.print((a+b)/c + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 64, "comment": "//System.out.println(h);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 66, "comment": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 66, "comment": "/**\n *\n * @author Andy Phan\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 66, "comment": "//@\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 66, "comment": "//$\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 66, "comment": "//@\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 66, "comment": "// Computes the modular inverse of x\n"}, "Heuristic": []}, {"nl": {"id": 66, "comment": "// Returns 0 if the GCD of x and mod is not 1\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 66, "comment": "// O(log n)  :  Can be converted to use BigIntegers\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 66, "comment": "//@\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 68, "comment": "//Scanner sc = new Scanner();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 70, "comment": "/* package whatever; // don't place package name! */"}, "Heuristic": ["H7"]}, {"nl": {"id": 70, "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 70, "comment": "// don't place package name! */\n"}, "Heuristic": []}, {"nl": {"id": 70, "comment": "// your code goes here\n"}, "Heuristic": []}, {"nl": {"id": 71, "comment": "// line length\n"}, "Heuristic": []}, {"nl": {"id": 72, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author kessido\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 73, "comment": "/// break ; \n"}, "Heuristic": []}, {"nl": {"id": 73, "comment": "/// break ; \n"}, "Heuristic": []}, {"nl": {"id": 74, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 75, "comment": "/////////// TEMPLATE FROM HERE /////////////////\n"}, "Heuristic": []}, {"nl": {"id": 77, "comment": "//long t1 = System.currentTimeMillis();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 77, "comment": "// Standard IO\n"}, "Heuristic": []}, {"nl": {"id": 77, "comment": "//out.println(\"time(s): \" + (1.0*(System.currentTimeMillis()-t1))/1000.0);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 77, "comment": "// File IO\n"}, "Heuristic": []}, {"nl": {"id": 77, "comment": "//fout.println(\"time(s): \" + (1.0*(System.currentTimeMillis()-t1))/1000.0);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 77, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 77, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 78, "comment": "/**\n * Created by Baelish on 8/28/2018.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 78, "comment": "/* public char nextChar() {\n            return (char)skip();\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 78, "comment": "/*private char buff[] = new char[1005];\n        public char[] nextCharArray(){\n            int b = skip(), p = 0;\n            while(!(isSpaceChar(b))){\n                buff[p++] = (char)b;\n                b = readByte();\n            }\n            return Arrays.copyOf(buff, p);\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 78, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 79, "comment": "//System.out.println(t1 + \" \" + t2 + \" \" + t3 + \" \" + t4 + \" \" + t5);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 81, "comment": "/// break ; \n"}, "Heuristic": []}, {"nl": {"id": 81, "comment": "/// break ; \n"}, "Heuristic": []}, {"nl": {"id": 83, "comment": "/**\n\t * Source: Matt Fontaine\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 83, "comment": "/*\n5\n2 1 1 2 5\noutputCopy\nYES\ninputCopy\n3\n4 5 3\noutputCopy\nYES\ninputCopy\n2\n10 10\noutputCopy\nYES\ninputCopy\n3\n1 2 3\noutputCopy\nNO\n\n5\n2 3 2 2 3\n\nYES\n*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 84, "comment": "//System.out.println(Arrays.toString(heights));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 84, "comment": "//System.out.println(Arrays.toString(heights));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 84, "comment": "//Is your Fast I/O being bad?\n"}, "Heuristic": ["H12"]}, {"nl": {"id": 85, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author \\/\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 86, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author gaidash\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 86, "comment": "//        for (int p : a) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 86, "comment": "//            System.out.println(\"Segment for pixel \" + p + \" = \" + \"(\" + left[p] + \" , \" + right[p] + \")\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 86, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 88, "comment": "//package codeforces;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 89, "comment": "// tar \u306e\u65b9\u304c\u6570\u5b57\u304c\u5927\u304d\u3044\u304b\u3069\u3046\u304b\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 89, "comment": "//first\u3067\u6607\u9806\u306b\u30bd\u30fc\u30c8\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 89, "comment": "//return (first == p.first ? second - p.second : first - p.first) * -1; //first\u3067\u964d\u9806\u306b\u30bd\u30fc\u30c8\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 89, "comment": "//return second == p.second ? first - p.first : second - p.second;//second\u3067\u6607\u9806\u306b\u30bd\u30fc\u30c8\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 89, "comment": "//return (second == p.second ? first - p.first : second - p.second)*-1;//second\u3067\u964d\u9806\u306b\u30bd\u30fc\u30c8\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 89, "comment": "//\u7e70\u308a\u8fd4\u3057\u4e8c\u4e57\u6cd5\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 89, "comment": "//fac, inv, finv\u30c6\u30fc\u30d6\u30eb\u306e\u521d\u671f\u5316\u3001\u3053\u308c\u4f7f\u3046\u5834\u5408\u306finitComb()\u3067\u521d\u671f\u5316\u5fc5\u8981\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 89, "comment": "//nCk % mod\n"}, "Heuristic": []}, {"nl": {"id": 89, "comment": "//n! % mod\n"}, "Heuristic": []}, {"nl": {"id": 89, "comment": "//(n!)^-1 with % mod\n"}, "Heuristic": []}, {"nl": {"id": 89, "comment": "// (high + low) / 2\n"}, "Heuristic": []}, {"nl": {"id": 89, "comment": "//(low + high) / 2 (\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u5bfe\u7b56)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 89, "comment": "//n,m\u306e\u6700\u5927\u516c\u7d04\u6570\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 89, "comment": "//3\u8981\u7d20\u306e\u30bd\u30fc\u30c8\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 89, "comment": "//c -> int\u306b\u5909\u63db\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 89, "comment": "// int -> char\u306b\u5909\u63db\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 90, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Liavontsi Brechka\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 91, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 91, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 91, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 91, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 91, "comment": "////////                                                                                                               /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 91, "comment": "////////                                                                                                               /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 91, "comment": "////////   HHHH        HHHH  EEEEEEEEEEEEE   MMMM          MMMM         OOOOOO             SSSSSSS      EEEEEEEEEEEEE  /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 91, "comment": "////////   HHHH        HHHH  EEEEEEEEEEEEE   MMMMMM      MMMMMM      OOO      OOO        SSSS   SSS     EEEEEEEEEEEEE  /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 91, "comment": "////////   HHHH        HHHH  EEEEE           MMMM MMM  MMM MMMM    OOO          OOO    SSSS       SSS   EEEEE          /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 91, "comment": "////////   HHHH        HHHH  EEEEE           MMMM  MMMMMM  MMMM   OOO            OOO   SSSS             EEEEE          /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 91, "comment": "////////   HHHH        HHHH  EEEEE           MMMM          MMMM  OOO              OOO   SSSSSSS         EEEEE          /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 91, "comment": "////////   HHHHHHHHHHHHHHHH  EEEEEEEEEEE     MMMM          MMMM  OOO              OOO      SSSSSS       EEEEEEEEEEE    /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 91, "comment": "////////   HHHHHHHHHHHHHHHH  EEEEEEEEEEE     MMMM          MMMM  OOO              OOO         SSSSSSS   EEEEEEEEEEE    /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 91, "comment": "////////   HHHH        HHHH  EEEEE           MMMM          MMMM   OOO            OOO              SSSS  EEEEE          /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 91, "comment": "////////   HHHH        HHHH  EEEEE           MMMM          MMMM    OOO          OOO     SSS       SSSS  EEEEE          /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 91, "comment": "////////   HHHH        HHHH  EEEEEEEEEEEEE   MMMM          MMMM      OOO      OOO        SSS    SSSS    EEEEEEEEEEEEE  /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 91, "comment": "////////   HHHH        HHHH  EEEEEEEEEEEEE   MMMM          MMMM         OOOOOO             SSSSSSS      EEEEEEEEEEEEE  /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 91, "comment": "////////                                                                                                               /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 91, "comment": "////////                                                                                                               /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 91, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 91, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 91, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 91, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 91, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 91, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 91, "comment": "//FileWriter f = new FileWriter(\"C:\\\\Users\\\\Ibrahim\\\\out.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 91, "comment": "//System.out.println(s+\" \"+k1+\" \"+k2);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 92, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author caoash\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 94, "comment": "// discussed with rainboy\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 99, "comment": "//first contribution\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 99, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 99, "comment": "//System.out.println(Arrays.toString(dist));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 100, "comment": "/**\n * @author Don Li\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 101, "comment": "//    a1[j]=a[i]/2;a2[j++]=a[i]-a[i]/2;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 101, "comment": "//int[] ans=new int[2*n];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 108, "comment": "//System.out.println(i);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 110, "comment": "///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 114, "comment": "// System.out.println(\"me ni hu\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 114, "comment": "// System.out.println(\"me hu\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 115, "comment": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */"}, "Heuristic": ["H2", "H7", "H9"]}, {"nl": {"id": 115, "comment": "//www.apache.org/licenses/LICENSE-2.0\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 115, "comment": "//        int w = 200000, h = 200000, n = 400000;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 115, "comment": "//        Request[] requests = generate(w, h, n);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 115, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 115, "comment": "//        long start = System.currentTimeMillis();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 115, "comment": "//        solve(h, w, requests);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 115, "comment": "//        long end = System.currentTimeMillis();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 115, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 115, "comment": "//        System.out.println(\"Time: \" + (end - start) + \" ms\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 118, "comment": "//For all remaining Nodes\n"}, "Heuristic": []}, {"nl": {"id": 120, "comment": "/**\n * Built using CHelper plug-in Actual solution is at the top\n *\n * @author @Ziklon\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 122, "comment": "//Author: Patel Rag\n"}, "Heuristic": []}, {"nl": {"id": 122, "comment": "//Java version \"1.8.0_211\"\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 122, "comment": "//binary Modular exponentiation\n"}, "Heuristic": []}, {"nl": {"id": 122, "comment": "// Pair class\n"}, "Heuristic": []}, {"nl": {"id": 122, "comment": "// first field of a Pair\n"}, "Heuristic": []}, {"nl": {"id": 122, "comment": "// second field of a Pair\n"}, "Heuristic": []}, {"nl": {"id": 122, "comment": "//Binary Indexed Tree aka Fenwick Tree\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 123, "comment": "/**\n * Built using CHelper plug-in Actual solution is at the top\n *\n * @author MaxHeap\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 123, "comment": "// 0 0 1 1 | 1: 1 1 2| 2: 2 3| 4: 5| 9\n"}, "Heuristic": []}, {"nl": {"id": 123, "comment": "// 0 1 1 1| 1: 1 2 2| 2: 3 3| 5: 6| 11\n"}, "Heuristic": []}, {"nl": {"id": 123, "comment": "// 0 1 1 wwqwq| 1: 1 2 2| 3: 5 3| 8: 8| 16\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 123, "comment": "// 0 0 1 1| 1: 1 1 2| 3: 3 3| 6: 6| 12\n"}, "Heuristic": []}, {"nl": {"id": 123, "comment": "// 0 0 0 1| 1: 1 1 1| 2: 2 2| 4: 4| 8\n"}, "Heuristic": []}, {"nl": {"id": 127, "comment": "// 0 100=4 1000=8 10000=16\n"}, "Heuristic": []}, {"nl": {"id": 129, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 131, "comment": "/**\n * @author Don Li\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 132, "comment": "//201920181\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 134, "comment": "//package com.krakn.CF.D1159;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 135, "comment": "//formula 2^k(2x-1)+1;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 135, "comment": "//System.out.println(b);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 137, "comment": "/**\n * BaZ :D\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 137, "comment": "//pa(\"left\", left);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 137, "comment": "//pa(\"right\", right);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 138, "comment": "/* public double nextDouble() {\n            return Double.parseDouble(next());\n        }\n        \n        public int[] nextIntArray(int n) {\n            int[] a = new int[n];\n            for (int i = 0; i < n; ++i) {\n                a[i] = nextInt();\n            }\n            return a;\n        }\n        \n        public long[] nextLongArray(int n) {\n            long[] a = new long[n];\n            for (int i = 0; i < n; i++) {\n                a[i] = nextLong();\n            }\n            return a;\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 143, "comment": "//q4\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 143, "comment": "//slot all n into char array\n"}, "Heuristic": []}, {"nl": {"id": 143, "comment": "//R, G, B cycle\n"}, "Heuristic": []}, {"nl": {"id": 143, "comment": "//if is 'B'\n"}, "Heuristic": []}, {"nl": {"id": 143, "comment": "//if is 'R'\n"}, "Heuristic": []}, {"nl": {"id": 143, "comment": "//if mod 3 is 2\n"}, "Heuristic": []}, {"nl": {"id": 143, "comment": "//if is 'G'     \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 143, "comment": "//starting from kth position, if different then add 1, and check (j-k)th position\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 143, "comment": "//R cycle\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 143, "comment": "//R cycle \n"}, "Heuristic": []}, {"nl": {"id": 143, "comment": "//G cycle\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 143, "comment": "//B cycle\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 144, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Ribhav\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 150, "comment": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 150, "comment": "/**\n *\n * @author parpaorsa\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 150, "comment": "//package newpackage;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 151, "comment": "/*public int hashCode()\n        {\n            return new Long(x).hashCode() * 31 + new Long(y).hashCode();\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 151, "comment": "//return 0;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 153, "comment": "//System.out.println(count + \" \" + max);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 154, "comment": "//\tSystem.out.println(s+\" \"+max);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 154, "comment": "//System.out.println(f+\" \"+max);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 157, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author pandusonu\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 157, "comment": "// out.print(\"Case #\" + testNumber + \": \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 158, "comment": "/**\n * @author Don Li\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 161, "comment": "/* package codechef; // don't place package name! */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 161, "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 161, "comment": "// don't place package name! */\n"}, "Heuristic": []}, {"nl": {"id": 161, "comment": "// your code goes here\n"}, "Heuristic": []}, {"nl": {"id": 161, "comment": "// Initialize result\n"}, "Heuristic": []}, {"nl": {"id": 161, "comment": "// Update x if it is more  \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 161, "comment": "// than or equal to p\n"}, "Heuristic": []}, {"nl": {"id": 161, "comment": "// If y is odd, multiply x\n"}, "Heuristic": []}, {"nl": {"id": 161, "comment": "// with result\n"}, "Heuristic": []}, {"nl": {"id": 161, "comment": "// y must be even now\n"}, "Heuristic": []}, {"nl": {"id": 161, "comment": "// y = y / 2\n"}, "Heuristic": []}, {"nl": {"id": 162, "comment": "// if we make it 0 and subtract from the result will get WA (do not know why!!!)\n"}, "Heuristic": []}, {"nl": {"id": 167, "comment": "/**\n * CodeForces Round 5D. Follow Traffic Rules\n * Created by Darren on 14-9-14.\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 167, "comment": "/** get next word */"}, "Heuristic": []}, {"nl": {"id": 167, "comment": "//                totalTime = (-2*w+Math.sqrt(4*w*w+8*a*(l-d))) / (2*a);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 167, "comment": "//TODO add check for eof if necessary\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 168, "comment": "/*\n * Created on 17.05.2019\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 168, "comment": "/**\n * @author Wolfgang Weck\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 170, "comment": "//Integer key = tm.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 171, "comment": "/////////////////// CODED++ BY++ ++ ++ ++ BHAVYA++ ARORA++ ++ ++ ++ FROM++ JAYPEE++ INSTITUTE++ OF++ INFORMATION++ TECHNOLOGY++ ////////////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 171, "comment": "///////////////////////// Make it work, make it right, make it fast. Make it work, make it right, make it fast. Make it work, make it right, make it fast. Make it work, make it right, make it fast. /////////////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 171, "comment": "//---------- I/O Template ----------\n"}, "Heuristic": []}, {"nl": {"id": 171, "comment": "//no input \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 171, "comment": "//////////////////////////////////// template finished //////////////////////////////////////\n"}, "Heuristic": []}, {"nl": {"id": 173, "comment": "//        for (int i = 0; i < n; i++) ans += arrB[i] * m;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 173, "comment": "//        for (int i = 0; i < m - 1; i++) ans += arrG[i] - arrB[0];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 173, "comment": "//        if (arrB[m - 1] != arrB[0]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 173, "comment": "//            if (arrB.length == 1) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 173, "comment": "//                ans=-1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 173, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 173, "comment": "//            else ans += arrG[m - 1] - arrB[1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 173, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 173, "comment": "//        if (arrG[m-1] < arrB[0]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 173, "comment": "//            ans=-1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 173, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 173, "comment": "//smallest g goes to second to last\n"}, "Heuristic": []}, {"nl": {"id": 175, "comment": "/* package whatever; // don't place package name! */"}, "Heuristic": ["H7"]}, {"nl": {"id": 175, "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 175, "comment": "// don't place package name! */\n"}, "Heuristic": []}, {"nl": {"id": 175, "comment": "// your code goes here\n"}, "Heuristic": []}, {"nl": {"id": 176, "comment": "/*\n * Created on 17.05.2019\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 176, "comment": "/**\n * @author Wolfgang Weck\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 177, "comment": "//Author: Patel Rag\n"}, "Heuristic": []}, {"nl": {"id": 177, "comment": "//Java version \"1.8.0_211\"\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 177, "comment": "//binary Modular exponentiation\n"}, "Heuristic": []}, {"nl": {"id": 177, "comment": "//Binary Indexed Tree aka Fenwick Tree\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 178, "comment": "//System.out.println(vectors);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 178, "comment": "//stop(500);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 178, "comment": "//System.out.println(\"CURR: \" + curr + \"\\n\" + next1 + \"\\n\" + next2);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 178, "comment": "//System.out.println(vectors.first().euclideanNorm());\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 180, "comment": "// if(arr[j+1]%2==0){\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 180, "comment": "// \tsum=sum+arr[j+1];\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 180, "comment": "// \tif(sum>=max){\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 180, "comment": "// \tmax=sum;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 180, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 180, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 181, "comment": "//        int[] arr = {1, 3, 7, 18};\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 181, "comment": "//        int bIndex = Arrays.binarySearch(arr, 4);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 181, "comment": "//        System.out.println(bIndex);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 181, "comment": "// Integer[] indicesArr = ((Integer[])beacons.keySet().toArray());\n"}, "Heuristic": []}, {"nl": {"id": 181, "comment": "// totalBeacons[i] = totalBeacons[i - nDestroys[i]] + 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 181, "comment": "//totalBeacons[i] = i - nDestroys[i] + totalBeacons[i - nDestroys[i]] + 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 181, "comment": "//        System.out.println(\"\\ntotalBeacons array\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 181, "comment": "//        for (int i = 0; i < n; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 181, "comment": "//            System.out.print(totalBeacons[i] + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 181, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 181, "comment": "//        if (maxBeacons == -1)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 181, "comment": "//            System.out.println(n);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 183, "comment": "// good for depth of up to 1_048_576 = 2^20\n"}, "Heuristic": []}, {"nl": {"id": 183, "comment": "// greatest depth first\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 184, "comment": "/**\n\t * Source: Matt Fontaine\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 184, "comment": "// ======================================================================================\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 184, "comment": "// =============================== Reference Code =======================================\n"}, "Heuristic": []}, {"nl": {"id": 184, "comment": "// ======================================================================================\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 184, "comment": "// Method to return all primes smaller than or equal to \n"}, "Heuristic": []}, {"nl": {"id": 184, "comment": "// n using Sieve of Eratosthenes \n"}, "Heuristic": []}, {"nl": {"id": 184, "comment": "// Create a boolean array \"prime[0..n]\" and initialize \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 184, "comment": "// all entries it as true. A value in prime[i] will \n"}, "Heuristic": []}, {"nl": {"id": 184, "comment": "// finally be false if i is Not a prime, else true. \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 184, "comment": "// If prime[p] is not changed, then it is a prime \n"}, "Heuristic": []}, {"nl": {"id": 184, "comment": "// Update all multiples of p \n"}, "Heuristic": []}, {"nl": {"id": 184, "comment": "// Binary search for number greater than or equal to target\n"}, "Heuristic": []}, {"nl": {"id": 184, "comment": "// returns -1 if number not found\n"}, "Heuristic": []}, {"nl": {"id": 184, "comment": "// Base Case \n"}, "Heuristic": []}, {"nl": {"id": 184, "comment": "// To store results of recursive call \n"}, "Heuristic": []}, {"nl": {"id": 184, "comment": "// Update x and y using results of recursive \n"}, "Heuristic": []}, {"nl": {"id": 184, "comment": "// call \n"}, "Heuristic": []}, {"nl": {"id": 184, "comment": "// Returns modulo inverse of a  \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 184, "comment": "// with respect to m using extended \n"}, "Heuristic": []}, {"nl": {"id": 184, "comment": "// Euclid Algorithm. Refer below post for details: \n"}, "Heuristic": []}, {"nl": {"id": 184, "comment": "// https://www.geeksforgeeks.org/multiplicative-inverse-under-modulo-m/ \n"}, "Heuristic": ["H9"]}, {"nl": {"id": 184, "comment": "// Apply extended Euclid Algorithm \n"}, "Heuristic": []}, {"nl": {"id": 184, "comment": "// q is quotient \n"}, "Heuristic": []}, {"nl": {"id": 184, "comment": "// m is remainder now, process \n"}, "Heuristic": []}, {"nl": {"id": 184, "comment": "// same as euclid's algo \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 184, "comment": "// Make x1 positive \n"}, "Heuristic": []}, {"nl": {"id": 184, "comment": "// k is size of num[] and rem[]. \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 184, "comment": "// Returns the smallest number \n"}, "Heuristic": []}, {"nl": {"id": 184, "comment": "// x such that: \n"}, "Heuristic": []}, {"nl": {"id": 184, "comment": "// x % num[0] = rem[0], \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 184, "comment": "// x % num[1] = rem[1], \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 184, "comment": "// .................. \n"}, "Heuristic": []}, {"nl": {"id": 184, "comment": "// x % num[k-2] = rem[k-1] \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 184, "comment": "// Assumption: Numbers in num[] are pairwise  \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 184, "comment": "// coprime (gcd for every pair is 1) \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 184, "comment": "// Compute product of all numbers \n"}, "Heuristic": []}, {"nl": {"id": 184, "comment": "// Initialize result \n"}, "Heuristic": []}, {"nl": {"id": 184, "comment": "// Apply above formula \n"}, "Heuristic": []}, {"nl": {"id": 185, "comment": "/**\n *   Author: Ridam Nagar\n *   Date: 27 February 2019\n *   Time: 01:17:36\n**/"}, "Heuristic": ["H2"]}, {"nl": {"id": 185, "comment": "/* \npackage codechef; // don't place package name! */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 185, "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 185, "comment": "// don't place package name! */\n"}, "Heuristic": []}, {"nl": {"id": 191, "comment": "// one\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 191, "comment": "// zero\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 191, "comment": "//\t\t\t\tSystem.err.println(i+1);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 194, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 196, "comment": "//package codeforces;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 197, "comment": "/*\nKeep solving problems.\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 197, "comment": "//[l, r]\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 197, "comment": "// attempt to expand palindrome centered at i\n"}, "Heuristic": []}, {"nl": {"id": 197, "comment": "// if palindrome centered at i expands past right,\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 197, "comment": "// adjust center based on expanded palindrome.\n"}, "Heuristic": []}, {"nl": {"id": 198, "comment": "/*static long gcd(long a,long b)\n    {\n    if(b==0)\n    return a;\n    else\n    return gcd(b,a%b);\n    }\n    static int ans1=Integer.MAX_VALUE,ans2=Integer.MAX_VALUE,ans3=Integer.MAX_VALUE,ans4=Integer.MAX_VALUE;\n    static boolean v[]=new boolean[101];\n    static void dfs(Integer so,Set<Integer> s[]){\n    if(!v[so.intValue()])\n    {\n    v[so]=true;\n    for(Integer h:s[so.intValue()])\n    {\n    if(!v[h.intValue()])\n    dfs(h,s);\n    }\n    }\n    }\n    static class Print{\n    public PrintWriter out;\n    Print(OutputStream o)\n    {\n    out=new PrintWriter(o);\n    }\n    }\n    static int CeilIndex(int A[], int l, int r, int key) \n    { \n    while (r - l > 1) { \n    int m = l + (r - l) / 2; \n    if (A[m] >= key) \n    r = m; \n    else\n    l = m; \n    } \n\n    return r; \n    } \n\n    static int LongestIncreasingSubsequenceLength(int A[], int size) \n    { \n    // Add boundary case, when array size is one \n    int[] tailTable = new int[size]; \n    int len; // always points empty slot \n    tailTable[0] = A[0]; \n    len = 1; \n    for (int i = 1; i < size; i++) { \n    if (A[i] < tailTable[0]) \n    // new smallest value \n    tailTable[0] = A[i]; \n\n    else if (A[i] > tailTable[len - 1]) \n    // A[i] wants to extend largest subsequence \n    tailTable[len++] = A[i]; \n\n    else\n    // A[i] wants to be current end candidate of an existing \n    // subsequence. It will replace ceil value in tailTable \n    tailTable[CeilIndex(tailTable, -1, len - 1, A[i])] = A[i]; \n    } \n    return len; \n    }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 198, "comment": "/*static int binary(int n)\n    {\n    int s=1;\n    while(n>0)\n    {\n    s=s<<1;\n    n--;\n    }\n    return s-1;\n    }\n    static StringBuilder bin(int i,int n)\n    {\n    StringBuilder s=new StringBuilder();\n    while(i>0)\n    {\n    s.append(i%2);\n    i=i/2;\n    }\n    while(s.length()!=n)\n    {\n    s.append(0);\n    }\n    return s.reverse();\n    }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 198, "comment": "// Add boundary case, when array size is one \n"}, "Heuristic": []}, {"nl": {"id": 198, "comment": "// always points empty slot \n"}, "Heuristic": []}, {"nl": {"id": 198, "comment": "// new smallest value \n"}, "Heuristic": []}, {"nl": {"id": 198, "comment": "// A[i] wants to extend largest subsequence \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 198, "comment": "// A[i] wants to be current end candidate of an existing \n"}, "Heuristic": []}, {"nl": {"id": 198, "comment": "// subsequence. It will replace ceil value in tailTable \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 199, "comment": "//////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 199, "comment": "//  could be replace with a method, but nah, this is just competitive programming :p\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 201, "comment": "/**\n * @author Don Li\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 203, "comment": "//UPSOLVED\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 204, "comment": "/*\tpublic static void DFS(int sourse)\n\t\t\t{\n\t\t\t\tint count = 0;\n\t\t\t\tvisited[sourse] = true;\n\t\t\t\t\n\t\t\t\tfor(int u : adj[sourse])\n\t\t\t\t{\n\t\t\t\t\tif(!visited[u])\n\t\t\t\t\t{\n\t\t\t\t\t\tDFS(u);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t}*/"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 207, "comment": "//Scanner sc = new Scanner();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 207, "comment": "//<>\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 211, "comment": "// discussed with rainboy\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 212, "comment": "//package fourninetysixDiv3;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 214, "comment": "// practice with rainboy\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 216, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author kessido\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 218, "comment": "//w.println(prefix[i][0]+\" \"+prefix[i][1]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 219, "comment": "/*\n\t\t * Another way if the polygon is convex\n\t\t * 1. Triangulate the poylgon through p\n\t\t * 2. Check if sum areas == poygon area\n\t\t * 3. Handle empty polygon\n\t\t */"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 219, "comment": "//rec\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 219, "comment": "//diamond\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 219, "comment": "// Cases to handle: collinear points, polygons with n < 3\n"}, "Heuristic": []}, {"nl": {"id": 219, "comment": "//first point = last point, counter-clockwise representation\n"}, "Heuristic": []}, {"nl": {"id": 219, "comment": "//clockwise/anti-clockwise check, for convex/concave polygons\n"}, "Heuristic": []}, {"nl": {"id": 219, "comment": "//negative value in case of clockwise\n"}, "Heuristic": []}, {"nl": {"id": 219, "comment": "//for convex/concave polygons - winding number algorithm \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 219, "comment": "//abs makes it work for clockwise\n"}, "Heuristic": []}, {"nl": {"id": 219, "comment": "//center of mass\n"}, "Heuristic": []}, {"nl": {"id": 219, "comment": "//remove abs\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 219, "comment": "//s is a non-negative value\n"}, "Heuristic": []}, {"nl": {"id": 219, "comment": "// angle AOB\n"}, "Heuristic": []}, {"nl": {"id": 219, "comment": "// for integer points and rotation by 90 (counterclockwise) : swap x and y, negate x\n"}, "Heuristic": []}, {"nl": {"id": 219, "comment": "//returns true if it is on the line defined by a and b\n"}, "Heuristic": []}, {"nl": {"id": 219, "comment": "//returns true if it is on the ray whose start point is a and passes through b\n"}, "Heuristic": []}, {"nl": {"id": 219, "comment": "// Another way: find closest point and calculate the distance between it and p\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 220, "comment": "//q4\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 220, "comment": "//slot all n into char array\n"}, "Heuristic": []}, {"nl": {"id": 220, "comment": "//R, G, B cycle\n"}, "Heuristic": []}, {"nl": {"id": 220, "comment": "//if is 'B'\n"}, "Heuristic": []}, {"nl": {"id": 220, "comment": "//if is 'R'\n"}, "Heuristic": []}, {"nl": {"id": 220, "comment": "//if mod 3 is 2\n"}, "Heuristic": []}, {"nl": {"id": 220, "comment": "//if is 'G'     \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 220, "comment": "//starting from kth position, if different then add 1, and check (j-k)th position\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 220, "comment": "//R cycle\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 220, "comment": "//R cycle \n"}, "Heuristic": []}, {"nl": {"id": 220, "comment": "//G cycle\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 220, "comment": "//B cycle\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 221, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 221, "comment": "// all leaves depth = K\n"}, "Heuristic": []}, {"nl": {"id": 221, "comment": "// < for n=1\n"}, "Heuristic": []}, {"nl": {"id": 223, "comment": "// int n = Integer.parseInt(st.nextToken());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 224, "comment": "//package ContestEd69;\n"}, "Heuristic": []}, {"nl": {"id": 225, "comment": "// Initialize result\n"}, "Heuristic": []}, {"nl": {"id": 225, "comment": "// Update x if it is more\n"}, "Heuristic": []}, {"nl": {"id": 225, "comment": "// than or equal to p\n"}, "Heuristic": []}, {"nl": {"id": 225, "comment": "// If y is odd, multiply x\n"}, "Heuristic": []}, {"nl": {"id": 225, "comment": "// with result\n"}, "Heuristic": []}, {"nl": {"id": 225, "comment": "// y must be even now\n"}, "Heuristic": []}, {"nl": {"id": 225, "comment": "// y = y / 2\n"}, "Heuristic": []}, {"nl": {"id": 225, "comment": "// If b is odd, add 'a' to result\n"}, "Heuristic": []}, {"nl": {"id": 225, "comment": "// Multiply 'a' with 2\n"}, "Heuristic": []}, {"nl": {"id": 225, "comment": "// Divide b by 2\n"}, "Heuristic": []}, {"nl": {"id": 225, "comment": "// Return result\n"}, "Heuristic": []}, {"nl": {"id": 226, "comment": "//pw.println(Arrays.toString(arr));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 226, "comment": "//pw.println(qq);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 227, "comment": "/*for (int i = 2; i <= n; i++) {\n\t\t\tfor (int j = 1; j <= i; j++) {\n\t\t\t\tSystem.out.print(dp2[i][j] + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}*/"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 228, "comment": "//br = new BufferedReader( new FileReader(\"input.txt\") );\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 228, "comment": "//in = new Reader(\"input.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 228, "comment": "//br = new BufferedReader( new InputStreamReader( System.in ) );\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 228, "comment": "//int t = in.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 228, "comment": "// line length\n"}, "Heuristic": []}, {"nl": {"id": 231, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 234, "comment": "//PrintWriter out = new PrintWriter(System.out); \n"}, "Heuristic": []}, {"nl": {"id": 236, "comment": "// i think i can break here\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 237, "comment": "//System.out.println(max);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 239, "comment": "/* spar5h */"}, "Heuristic": ["H7"]}, {"nl": {"id": 243, "comment": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 243, "comment": "/**\n *\n * @author Ahmed\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 243, "comment": "/**\n     * @param args the command line arguments\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 243, "comment": "// TODO code application logic here\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 245, "comment": "/**\n *\n * @author Antonio \"Teo\" Alurralde\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 246, "comment": "/**\n * Created by Aminul on 3/14/2019.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 249, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author programajor\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 250, "comment": "// author @mdazmat9\n"}, "Heuristic": []}, {"nl": {"id": 253, "comment": "// Move from both ends, Time limit exceeded on test 6\n"}, "Heuristic": []}, {"nl": {"id": 253, "comment": "// String s = \"\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 253, "comment": "// the other end of i\n"}, "Heuristic": []}, {"nl": {"id": 253, "comment": "// i is left row, i2 is right row\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 253, "comment": "// start with (i,j), then go thru all the cell with (,i) and (,i2)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 253, "comment": "// s += j + \" \" + i + \"\\n\" + j2+ \" \" + i2 + \"\\n\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 253, "comment": "// out.print(s);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 253, "comment": "// if n is odd, there is one line in the middle\n"}, "Heuristic": []}, {"nl": {"id": 253, "comment": "// this is the middle column\n"}, "Heuristic": []}, {"nl": {"id": 253, "comment": "// start with (i,j), then go thru all the cell with (,i) and (,i2)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 254, "comment": "// Scanner scan = new Scanner(System.in);\n"}, "Heuristic": []}, {"nl": {"id": 256, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 257, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 258, "comment": "//-----------PrintWriter for faster output---------------------------------\n"}, "Heuristic": []}, {"nl": {"id": 258, "comment": "//-----------MyScanner class for faster input----------\n"}, "Heuristic": []}, {"nl": {"id": 258, "comment": "//--------------------------------------------------------\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 261, "comment": "// duration of lecture\n"}, "Heuristic": []}, {"nl": {"id": 261, "comment": "// number of minutes keep mishka awake\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 264, "comment": "/* static class descend implements Comparator<pair1> {\n        public int compare(pair1 o1, pair1 o2) {\n            if (o1.pop != o2.pop)\n                return (int) (o1.pop - o2.pop);\n            else\n                return o1.in - o2.in;\n        }\n    }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 270, "comment": "//package contese_476;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 270, "comment": "//HashMap<Integer,Integer> h1=new HashMap();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 270, "comment": "//h1.put(a[i],i);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 271, "comment": "/**\n * Built using CHelper plug-in Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 272, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author sumit\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 276, "comment": "//try a gets b's letter\n"}, "Heuristic": []}, {"nl": {"id": 277, "comment": "// a/b \u304c1\u306b\u8fd1\u3044\u3082\u306e\u3092\u63a2\u3059\n"}, "Heuristic": []}, {"nl": {"id": 279, "comment": "// method to return LCM of two numbers\n"}, "Heuristic": []}, {"nl": {"id": 283, "comment": "//System.out.println(m[i]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 283, "comment": "// make press\n"}, "Heuristic": []}, {"nl": {"id": 285, "comment": "//System.out.println(s);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 285, "comment": "//System.out.println(c[i]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 285, "comment": "//System.out.println(x+ \"  \"+y );\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 286, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Pradyumn\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 291, "comment": "/* -----: Template :----- */"}, "Heuristic": ["H7"]}, {"nl": {"id": 291, "comment": "//        System.out.println(Arrays.toString(dp));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 291, "comment": "//            System.out.println(Arrays.toString(dp));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 292, "comment": "// _ h _ r _ t r _\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 292, "comment": "// _ t _ t _ s t _\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 293, "comment": "// rest at i\n"}, "Heuristic": []}, {"nl": {"id": 293, "comment": "// rest again before n\n"}, "Heuristic": []}, {"nl": {"id": 294, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author aryssoncf\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 295, "comment": "//System.out.println(solve(as));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 295, "comment": "// if fingers is empty return null\n"}, "Heuristic": []}, {"nl": {"id": 295, "comment": "// if as size is one then return first element in fingers\n"}, "Heuristic": []}, {"nl": {"id": 295, "comment": "// get sublist\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 295, "comment": "// recursively call with sublist and limited list of fingers\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 295, "comment": "// if return is null, then return null, else return an array\n"}, "Heuristic": []}, {"nl": {"id": 296, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 299, "comment": "/*static long gcd(long a,long b)\n    {\n    if(b==0)\n    return a;\n    else\n    return gcd(b,a%b);\n    }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 299, "comment": "/*static boolean valid(int i,int j)\n    {\n    if(i<4 && i>=0 && j<4 && j>=0)\n    return true;\n    else\n    return false;\n    }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 300, "comment": "//System.out.println(i+\" \"+size[i%m]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 300, "comment": "//System.out.println(i+\" \"+x+\" \"+y);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 300, "comment": "//System.out.println(idx+\" \"+i);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 301, "comment": "//UPSOLVE\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 302, "comment": "// Note that this loop runs till square root \n"}, "Heuristic": []}, {"nl": {"id": 302, "comment": "// If divisors are equal, print only one \n"}, "Heuristic": []}, {"nl": {"id": 302, "comment": "// Otherwise print both \n"}, "Heuristic": []}, {"nl": {"id": 302, "comment": "// System.out.println(\"min1 \"+min);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 302, "comment": "// System.out.println(\"min \"+min);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 302, "comment": "// System.out.println(\"min \"+min);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 305, "comment": "/*\n        inputCopy\n5 3\nxyabd\noutputCopy\n29\ninputCopy\n7 4\nproblem\noutputCopy\n34\ninputCopy\n2 2\nab\noutputCopy\n-1\ninputCopy\n12 1\nabaabbaaabbb\noutputCopy\n1\n        */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 305, "comment": "/*\n\u2192Judgement Protocol\nTest: #1, time: 77 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n5 3\nxyabd\nOutput\n29\nAnswer\n29\nChecker Log\nok 1 number(s): \"29\"\nTest: #2, time: 78 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n7 4\nproblem\nOutput\n34\nAnswer\n34\nChecker Log\nok 1 number(s): \"34\"\nTest: #3, time: 139 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n2 2\nab\nOutput\n-1\nAnswer\n-1\nChecker Log\nok 1 number(s): \"-1\"\nTest: #4, time: 124 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n12 1\nabaabbaaabbb\nOutput\n1\nAnswer\n1\nChecker Log\nok 1 number(s): \"1\"\nTest: #5, time: 124 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n50 13\nqwertyuiopasdfghjklzxcvbnmaaaaaaaaaaaaaaaaaaaaaaaa\nOutput\n169\nAnswer\n169\nChecker Log\nok 1 number(s): \"169\"\nTest: #6, time: 108 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n50 14\nqwertyuiopasdfghjklzxcvbnmaaaaaaaaaaaaaaaaaaaaaaaa\nOutput\n-1\nAnswer\n-1\nChecker Log\nok 1 number(s): \"-1\"\nTest: #7, time: 93 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n1 1\na\nOutput\n1\nAnswer\n1\nChecker Log\nok 1 number(s): \"1\"\nTest: #8, time: 108 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n50 1\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nOutput\n1\nAnswer\n1\nChecker Log\nok 1 number(s): \"1\"\nTest: #9, time: 77 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n50 2\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nOutput\n-1\nAnswer\n-1\nChecker Log\nok 1 number(s): \"-1\"\nTest: #10, time: 92 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n13 13\nuwgmkyqeiaocs\nOutput\n169\nAnswer\n169\nChecker Log\nok 1 number(s): \"169\"\nTest: #11, time: 124 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n13 13\nhzdxpbfvrltnj\nOutput\n182\nAnswer\n182\nChecker Log\nok 1 number(s): \"182\"\nTest: #12, time: 93 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n1 1\nn\nOutput\n14\nAnswer\n14\nChecker Log\nok 1 number(s): \"14\"\nTest: #13, time: 92 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n10 8\nsmzeblyjqw\nOutput\n113\nAnswer\n113\nChecker Log\nok 1 number(s): \"113\"\nTest: #14, time: 78 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n20 20\ntzmvhskkyugkuuxpvtbh\nOutput\n-1\nAnswer\n-1\nChecker Log\nok 1 number(s): \"-1\"\nTest: #15, time: 109 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n30 15\nwjzolzzkfulwgioksfxmcxmnnjtoav\nOutput\n-1\nAnswer\n-1\nChecker Log\nok 1 number(s): \"-1\"\nTest: #16, time: 93 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n40 30\nxumfrflllrrgswehqtsskefixhcxjrxbjmrpsshv\nOutput\n-1\nAnswer\n-1\nChecker Log\nok 1 number(s): \"-1\"\nTest: #17, time: 124 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n50 31\nahbyyoxltryqdmvenemaqnbakglgqolxnaifnqtoclnnqiabpz\nOutput\n-1\nAnswer\n-1\nChecker Log\nok 1 number(s): \"-1\"\nTest: #18, time: 124 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n10 7\niuiukrxcml\nOutput\n99\nAnswer\n99\nChecker Log\nok 1 number(s): \"99\"\nTest: #19, time: 109 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n38 2\nvjzarfykmrsrvwbwfwldsulhxtykmjbnwmdufa\nOutput\n5\nAnswer\n5\nChecker Log\nok 1 number(s): \"5\"\nTest: #20, time: 77 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n12 6\nfwseyrarkwcd\nOutput\n61\nAnswer\n61\nChecker Log\nok 1 number(s): \"61\"\nTest: #21, time: 109 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n2 2\nac\nOutput\n4\nAnswer\n4\nChecker Log\nok 1 number(s): \"4\"\nTest: #22, time: 108 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n1 1\nc\nOutput\n3\nAnswer\n3\nChecker Log\nok 1 number(s): \"3\"\nTest: #23, time: 124 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n2 2\nad\nOutput\n5\nAnswer\n5\nChecker Log\nok 1 number(s): \"5\"\nTest: #24, time: 77 ms., memory: 0 KB, exit code: 0, checker exit code: 1, verdict: WRONG_ANSWER\nInput\n2 1\nac\nOutput\n-1\nAnswer\n1\nChecker Log\nwrong answer 1st number\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 305, "comment": "//use pw.println() not pw.write();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 305, "comment": "//Do not forget to write it after every program return statement !!\n"}, "Heuristic": []}, {"nl": {"id": 308, "comment": "//sc= new Scanner(System.in);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 309, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author cunbidun\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 309, "comment": "// override to go 75% faster\n"}, "Heuristic": []}, {"nl": {"id": 309, "comment": "// override to go 75% faster\n"}, "Heuristic": []}, {"nl": {"id": 309, "comment": "// override to go 75% faster\n"}, "Heuristic": []}, {"nl": {"id": 309, "comment": "// more on the right, so delete from the right\n"}, "Heuristic": []}, {"nl": {"id": 309, "comment": "// more on the left or equal, so delete from the left\n"}, "Heuristic": []}, {"nl": {"id": 309, "comment": "// special case where left that was deleted was a double link\n"}, "Heuristic": []}, {"nl": {"id": 309, "comment": "// only occurs when height difference is equal\n"}, "Heuristic": []}, {"nl": {"id": 309, "comment": "// can't be faedelung!\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 309, "comment": "// We need to efficiently merge the two AVL trees while keeping them\n"}, "Heuristic": []}, {"nl": {"id": 309, "comment": "// balanced (or nearly balanced). To do this, we take the shorter\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 309, "comment": "// tree and combine it with a similar-height subtree of the taller\n"}, "Heuristic": []}, {"nl": {"id": 309, "comment": "// tree. There are two symmetric cases:\n"}, "Heuristic": []}, {"nl": {"id": 309, "comment": "//   * this tree is taller, or\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 309, "comment": "//   * otherTree is taller.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 309, "comment": "// CASE 1: The other tree is taller than this one. We will thus\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 309, "comment": "// merge this tree into otherTree.\n"}, "Heuristic": []}, {"nl": {"id": 309, "comment": "// STEP 1: Remove the maximum element from this tree.\n"}, "Heuristic": []}, {"nl": {"id": 309, "comment": "// STEP 2: Navigate left from the root of otherTree until we\n"}, "Heuristic": []}, {"nl": {"id": 309, "comment": "// contains a subtree, s, that is no taller than me. (While we are\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 309, "comment": "// navigating left, we store the nodes we encounter in a stack\n"}, "Heuristic": []}, {"nl": {"id": 309, "comment": "// so that we can re-balance them in step 4.)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 309, "comment": "// STEP 3: Replace s with a newly constructed subtree whose root\n"}, "Heuristic": []}, {"nl": {"id": 309, "comment": "// is maxNode, whose left subtree is leftSubTree, and whose right\n"}, "Heuristic": []}, {"nl": {"id": 309, "comment": "// subtree is s.\n"}, "Heuristic": []}, {"nl": {"id": 309, "comment": "// STEP 4: Re-balance the tree and recalculate the heights of s's ancestors.\n"}, "Heuristic": []}, {"nl": {"id": 309, "comment": "// remove() following next()\n"}, "Heuristic": []}, {"nl": {"id": 309, "comment": "// the AVL node referenced by next may have become stale after a remove\n"}, "Heuristic": []}, {"nl": {"id": 309, "comment": "// reset it now: will be retrieved by next call to next()/previous() via nextIndex\n"}, "Heuristic": []}, {"nl": {"id": 311, "comment": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n744444444747477777774\n44444447474747777777\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 311, "comment": "/**\n *\n * @author Andy Phan\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 320, "comment": "/**\n\t * Source: Matt Fontaine\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 320, "comment": "/*\n5\n2 1 1 2 5\noutputCopy\nYES\ninputCopy\n3\n4 5 3\noutputCopy\nYES\ninputCopy\n2\n10 10\noutputCopy\nYES\ninputCopy\n3\n1 2 3\noutputCopy\nNO\n\n5\n2 3 2 2 3\n\nYES\n*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 321, "comment": "//\tSystem.out.println(s+\" \"+max);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 321, "comment": "//System.out.println(f+\" \"+max);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 323, "comment": "// duration of lecture\n"}, "Heuristic": []}, {"nl": {"id": 323, "comment": "// number of minutes keep mishka awake\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 324, "comment": "/**\n * Created by IntelliJ IDEA.\n * User: piyushd\n * Date: Dec 5, 2010\n * Time: 4:09:41 PM\n * To change this template use File | Settings | File Templates.\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 324, "comment": "//in  = new BufferedReader(new InputStreamReader(new FileInputStream(new File(\"C://Users/piyushd/Desktop/codeforces/sample.txt\"))));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 325, "comment": "// br = new BufferedReader(new FileReader(new File(\"input.txt\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 325, "comment": "// out = new PrintWriter(new FileWriter(new File(\"output.txt\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 328, "comment": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 328, "comment": "/************************\n *                      *\n *    Lord Klotski      *\n *                      *\n ***********************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 328, "comment": "// want to find longest sequence of 1s\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 328, "comment": "// then rotate to head\n"}, "Heuristic": []}, {"nl": {"id": 328, "comment": "//System.out.println(\"SWAP \" + i + \" \" + j);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 328, "comment": "//for (int k = 0 ; k < L ; k ++)\n"}, "Heuristic": []}, {"nl": {"id": 328, "comment": "//    System.out.print(arr[k]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 328, "comment": "//System.out.println(\"\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 328, "comment": "// rotate until j is at the front\n"}, "Heuristic": []}, {"nl": {"id": 329, "comment": "//count animals\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 329, "comment": "//fill First\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 329, "comment": "//fill Second\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 329, "comment": "//check\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 329, "comment": "//difference\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 330, "comment": "//      char g = 'T';\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 330, "comment": "//      if(tc > hc){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 330, "comment": "//          tc = hc;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 330, "comment": "//          g = 'H';\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 330, "comment": "//      }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 333, "comment": "/*\n * Hello! You are trying to hack my solution, are you? =)\n * Don't be afraid of the size, it's just a dump of useful methods like gcd, or n-th Fib number.\n * And I'm just too lazy to create a new .java for every task.\n * And if you were successful to hack my solution, please, send me this test as a message or to Abrackadabraa@gmail.com.\n * It can help me improve my skills and i'd be very grateful for that.\n * Sorry for time you spent reading this message. =)\n * Good luck, unknown rival. =)\n * */"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": 333, "comment": "/*\n\t * class cubeWithLetters { String consts = \"\u0427\u041a\u0422\u0424\u042d\u0426\"; char[][] letters = { {\n\t * '\u0410', '\u0411', '\u0413', '\u0412' }, { '\u0414', '\u0415', '\u0417', '\u0416' }, { '\u0418', '\u041b', '\u041d', '\u041c' }, {\n\t * '\u041e', '\u041f', '\u0421', '\u0420' }, { '\u0423', '\u0425', '\u0429', '\u0428' }, { '\u042b', '\u042c', '\u042f', '\u042e' } };\n\t * \n\t * char get(char x) { if (consts.indexOf(x) != -1) return x; for (int i = 0;\n\t * i < 7; i++) { for (int j = 0; j < 4; j++) { if (letters[i][j] == x) { if\n\t * (j == 0) return letters[i][3]; else return letters[i][j - 1]; } } }\n\t * return '!'; }\n\t * \n\t * void subrotate(int x) { char t = letters[x][0]; letters[x][0] =\n\t * letters[x][3]; letters[x][3] = letters[x][2]; letters[x][2] =\n\t * letters[x][1]; letters[x][1] = t; }\n\t * \n\t * void rotate(int x) { subrotate(x); char t; if (x == 0) { t =\n\t * letters[1][0]; letters[1][0] = letters[2][0]; letters[2][0] =\n\t * letters[3][0]; letters[3][0] = letters[5][2]; letters[5][2] = t;\n\t * \n\t * t = letters[1][1]; letters[1][1] = letters[2][1]; letters[2][1] =\n\t * letters[3][1]; letters[3][1] = letters[5][3]; letters[5][3] = t; } if (x\n\t * == 1) { t = letters[2][0]; letters[2][0] = letters[0][0]; letters[0][0] =\n\t * letters[5][0]; letters[5][0] = letters[4][0]; letters[4][0] = t;\n\t * \n\t * t = letters[2][3]; letters[2][3] = letters[0][3]; letters[0][3] =\n\t * letters[5][3]; letters[5][3] = letters[4][3]; letters[4][3] = t; } if (x\n\t * == 2) { t = letters[0][3]; letters[0][3] = letters[1][2]; letters[1][2] =\n\t * letters[4][1]; letters[4][1] = letters[3][0]; letters[3][0] = t;\n\t * \n\t * t = letters[0][2]; letters[0][2] = letters[1][1]; letters[1][1] =\n\t * letters[4][0]; letters[4][0] = letters[3][3]; letters[3][3] = t; } if (x\n\t * == 3) { t = letters[2][1]; letters[2][1] = letters[4][1]; letters[4][1] =\n\t * letters[5][1]; letters[5][1] = letters[0][1]; letters[0][1] = t;\n\t * \n\t * t = letters[2][2]; letters[2][2] = letters[4][2]; letters[4][2] =\n\t * letters[5][2]; letters[5][2] = letters[0][2]; letters[0][2] = t; } if (x\n\t * == 4) { t = letters[2][3]; letters[2][3] = letters[1][3]; letters[1][3] =\n\t * letters[5][1]; letters[5][1] = letters[3][3]; letters[3][3] = t;\n\t * \n\t * t = letters[2][2]; letters[2][2] = letters[1][2]; letters[1][2] =\n\t * letters[5][0]; letters[5][0] = letters[3][2]; letters[3][2] = t; } if (x\n\t * == 5) { t = letters[4][3]; letters[4][3] = letters[1][0]; letters[1][0] =\n\t * letters[0][1]; letters[0][1] = letters[3][2]; letters[3][2] = t;\n\t * \n\t * t = letters[4][2]; letters[4][2] = letters[1][3]; letters[1][3] =\n\t * letters[0][0]; letters[0][0] = letters[3][1]; letters[3][1] = t; } }\n\t * \n\t * public String toString(){ return \"  \" + letters[0][0] + letters[0][1] +\n\t * \"\\n\" + \"  \" + letters[0][3] + letters[0][2] + \"\\n\" + letters[1][0] +\n\t * letters[1][1] + letters[2][0] + letters[2][1] + letters[3][0] +\n\t * letters[3][1] + \"\\n\" + letters[1][3] + letters[1][2] + letters[2][3] +\n\t * letters[2][2] + letters[3][3] + letters[3][2] + \"\\n\" + \"  \" +\n\t * letters[4][0] + letters[4][1] + \"\\n\" + \"  \" + letters[4][3] +\n\t * letters[4][2] + \"\\n\" + \"  \" + letters[5][0] + letters[5][1] + \"\\n\" + \"  \"\n\t * + letters[5][3] + letters[5][2] + \"\\n\"; } }\n\t * \n\t * \n\t * Vector<Integer>[] a; int n, mc, c1, c2; int[] col;\n\t * \n\t * void wave(int x, int p) { for (Iterator<Integer> i = a[x].iterator();\n\t * i.hasNext(); ) { int t = i.next(); if (t == x || t == p) continue; if\n\t * (col[t] == 0) { col[t] = mc; wave(t, x); } else { c1 = x; c2 = t; } } }\n\t * \n\t * void solve() throws IOException {\n\t * \n\t * String s = \"\u0415\u041f\u041e\u0415\u042c\u0420\u0418\u0422\u0421\u0413\u0425\u0416\u0417\u0422\u042f\u041f\u0421\u0422\u0410\u041f\u0414\u0421\u0411\u0418\u0421\u0422\u0427\u041a\"; //String s =\n\t * \"\u0417\u042c\u0423\u041e\u042b\u0422\u0412\u0417\u0422\u042f\u041f\u0423\u0411\u041e\u042b\u0422\u0415\u0410\u042b\u0428\u0425\u042f\u0410\u0422\u0427\u041a\"; cubeWithLetters cube = new\n\t * cubeWithLetters(); for (int x = 0; x < 4; x++) { for (int y = x + 1; y <\n\t * 5; y++) { for (int z = y + 1; z < 6; z++) { cube = new cubeWithLetters();\n\t * out.println(cube.toString()); cube.rotate(x);\n\t * out.println(cube.toString()); cube.rotate(y);\n\t * out.println(cube.toString()); cube.rotate(z);\n\t * out.println(cube.toString()); out.print(x + \" \" + y + \" \" + z + \" = \");\n\t * for (int i = 0; i < s.length(); i++) { out.print(cube.get(s.charAt(i)));\n\t * } out.println(); } } }\n\t * \n\t * int a = nextInt(), b = nextInt(), x = nextInt(), y = nextInt();\n\t * out.print((lib.min(a / (x / lib.gcd(x, y)), b / (y / lib.gcd(x, y))) * (x\n\t * / lib.gcd(x, y))) + \" \" + (lib.min(a / (x / lib.gcd(x, y)), b / (y /\n\t * lib.gcd(x, y))) * (y / lib.gcd(x, y)))); }\n\t */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 333, "comment": "// n - sum, l - length, m - every\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 333, "comment": "// part\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 333, "comment": "// <= m\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 333, "comment": "// long q = 0, t = 1;\n"}, "Heuristic": []}, {"nl": {"id": 333, "comment": "// b > 0\n"}, "Heuristic": []}, {"nl": {"id": 333, "comment": "// b > 0\n"}, "Heuristic": []}, {"nl": {"id": 333, "comment": "// b > 0\n"}, "Heuristic": []}, {"nl": {"id": 333, "comment": "// least prime divisor\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 333, "comment": "// number of prime number\n"}, "Heuristic": []}, {"nl": {"id": 333, "comment": "//String s =\n"}, "Heuristic": []}, {"nl": {"id": 336, "comment": "//stdin\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 336, "comment": "//System.err.println(\"Input: \" + line);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 336, "comment": "//System.out.println(\"I read this number: \" + val);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 339, "comment": "/*for (int i = 0; i < b.length; i++) {\n            out.print(b[i]);\n        }\n        out.println();*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 339, "comment": "//out.println(h + \" \" + maxh);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 340, "comment": "//out.println(kk+\" \"+cur);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 341, "comment": "/*out = new PrintWriter (System.out);\n        final int NUMBER_OF_TESTS = 35;\n        for (int i = 1; i <= NUMBER_OF_TESTS; i++) {\n            Scanner test = new Scanner (new File (\"tests/\" + i + \".in\"));\n            Scanner right = new Scanner (new File (\"tests/\" + i + \".out\"));\n            String get_right = right.nextLine();\n            String get_test = new Main().run(test);\n            if (get_right.equals(get_test)) {\n                out.println(\"Test #\" + i + \": \" + \"OK!\");                \n            } else {\n                out.println(\"Test #\" + i + \": \" + \"ERROR!\");\n                out.println(\"Expected: \" + get_right);\n                out.println(\"Received: \" + get_test);\n                break;\n            }\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 341, "comment": "//    static PrintWriter out;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 341, "comment": "//  static Scanner in;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 341, "comment": "//final String FILENAME = \"jury\"; in = new Scanner (new File (FILENAME + \".in\")); out = new PrintWriter (new File(FILENAME + \".out\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 341, "comment": "//    in = new Scanner (System.in); out = new PrintWriter (System.out);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 343, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 343, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 347, "comment": "/*\n* Author: Nikhil Garg\n* Date:   2010-12-05\n*\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 349, "comment": "// in = new StreamTokenizer( new InputStreamReader( System.in ) );\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 350, "comment": "//package round43;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 351, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 351, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 352, "comment": "//Round #XX - Hamsters and Tigers\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 352, "comment": "//System.out.println(generated);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 352, "comment": "//System.out.println(\"\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 352, "comment": "//System.out.println(generated);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 356, "comment": "/**\n *\n * @author Madi\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 357, "comment": "// 1 = H, 0 = T\n"}, "Heuristic": []}, {"nl": {"id": 361, "comment": "/* for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n               out.print(t[i][j] + \" \");\n            }\n            out.println();\n        }\n        out.println();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                out.print(h[i][j] + \" \");\n            }\n            out.println();\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 361, "comment": "/*out = new PrintWriter (System.out);\n        final int NUMBER_OF_TESTS = 35;\n        for (int i = 1; i <= NUMBER_OF_TESTS; i++) {\n            Scanner test = new Scanner (new File (\"tests/\" + i + \".in\"));\n            Scanner right = new Scanner (new File (\"tests/\" + i + \".out\"));\n            String get_right = right.nextLine();\n            String get_test = new Main().run(test);\n            if (get_right.equals(get_test)) {\n                out.println(\"Test #\" + i + \": \" + \"OK!\");                \n            } else {\n                out.println(\"Test #\" + i + \": \" + \"ERROR!\");\n                out.println(\"Expected: \" + get_right);\n                out.println(\"Received: \" + get_test);\n                break;\n            }\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 361, "comment": "//final String FILENAME = \"jury\"; in = new Scanner (new File (FILENAME + \".in\")); out = new PrintWriter (new File(FILENAME + \".out\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 362, "comment": "/**\n *\n * @author igor_kz\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 363, "comment": "//package round43;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 368, "comment": "//System.out.println(max);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 373, "comment": "/**\n\t * Source: Matt Fontaine\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 373, "comment": "// ======================================================================================\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 373, "comment": "// =============================== Reference Code =======================================\n"}, "Heuristic": []}, {"nl": {"id": 373, "comment": "// ======================================================================================\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 373, "comment": "// Method to return all primes smaller than or equal to \n"}, "Heuristic": []}, {"nl": {"id": 373, "comment": "// n using Sieve of Eratosthenes \n"}, "Heuristic": []}, {"nl": {"id": 373, "comment": "// Create a boolean array \"prime[0..n]\" and initialize \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 373, "comment": "// all entries it as true. A value in prime[i] will \n"}, "Heuristic": []}, {"nl": {"id": 373, "comment": "// finally be false if i is Not a prime, else true. \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 373, "comment": "// If prime[p] is not changed, then it is a prime \n"}, "Heuristic": []}, {"nl": {"id": 373, "comment": "// Update all multiples of p \n"}, "Heuristic": []}, {"nl": {"id": 373, "comment": "// Binary search for number greater than or equal to target\n"}, "Heuristic": []}, {"nl": {"id": 373, "comment": "// returns -1 if number not found\n"}, "Heuristic": []}, {"nl": {"id": 373, "comment": "// Base Case \n"}, "Heuristic": []}, {"nl": {"id": 373, "comment": "// To store results of recursive call \n"}, "Heuristic": []}, {"nl": {"id": 373, "comment": "// Update x and y using results of recursive \n"}, "Heuristic": []}, {"nl": {"id": 373, "comment": "// call \n"}, "Heuristic": []}, {"nl": {"id": 373, "comment": "// Returns modulo inverse of a  \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 373, "comment": "// with respect to m using extended \n"}, "Heuristic": []}, {"nl": {"id": 373, "comment": "// Euclid Algorithm. Refer below post for details: \n"}, "Heuristic": []}, {"nl": {"id": 373, "comment": "// https://www.geeksforgeeks.org/multiplicative-inverse-under-modulo-m/ \n"}, "Heuristic": ["H9"]}, {"nl": {"id": 373, "comment": "// Apply extended Euclid Algorithm \n"}, "Heuristic": []}, {"nl": {"id": 373, "comment": "// q is quotient \n"}, "Heuristic": []}, {"nl": {"id": 373, "comment": "// m is remainder now, process \n"}, "Heuristic": []}, {"nl": {"id": 373, "comment": "// same as euclid's algo \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 373, "comment": "// Make x1 positive \n"}, "Heuristic": []}, {"nl": {"id": 373, "comment": "// k is size of num[] and rem[]. \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 373, "comment": "// Returns the smallest number \n"}, "Heuristic": []}, {"nl": {"id": 373, "comment": "// x such that: \n"}, "Heuristic": []}, {"nl": {"id": 373, "comment": "// x % num[0] = rem[0], \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 373, "comment": "// x % num[1] = rem[1], \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 373, "comment": "// .................. \n"}, "Heuristic": []}, {"nl": {"id": 373, "comment": "// x % num[k-2] = rem[k-1] \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 373, "comment": "// Assumption: Numbers in num[] are pairwise  \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 373, "comment": "// coprime (gcd for every pair is 1) \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 373, "comment": "// Compute product of all numbers \n"}, "Heuristic": []}, {"nl": {"id": 373, "comment": "// Initialize result \n"}, "Heuristic": []}, {"nl": {"id": 373, "comment": "// Apply above formula \n"}, "Heuristic": []}, {"nl": {"id": 374, "comment": "/**\n * Built using CHelper plug-in Actual solution is at the top\n *\n * @author MaxHeap\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 374, "comment": "// 0 0 1 1 | 1: 1 1 2| 2: 2 3| 4: 5| 9\n"}, "Heuristic": []}, {"nl": {"id": 374, "comment": "// 0 1 1 1| 1: 1 2 2| 2: 3 3| 5: 6| 11\n"}, "Heuristic": []}, {"nl": {"id": 374, "comment": "// 0 1 1 wwqwq| 1: 1 2 2| 3: 5 3| 8: 8| 16\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 374, "comment": "// 0 0 1 1| 1: 1 1 2| 3: 3 3| 6: 6| 12\n"}, "Heuristic": []}, {"nl": {"id": 374, "comment": "// 0 0 0 1| 1: 1 1 1| 2: 2 2| 4: 4| 8\n"}, "Heuristic": []}, {"nl": {"id": 375, "comment": "////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 375, "comment": "//////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 375, "comment": "//////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 376, "comment": "/*\n * Hopefully this is AC :D\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 376, "comment": "//if only (b-x) present then both must belong to set 1\n"}, "Heuristic": []}, {"nl": {"id": 376, "comment": "//if only (a-x) present then both must belong to set 0\n"}, "Heuristic": []}, {"nl": {"id": 376, "comment": "//both present hence all 3 should be in same set,doesn't matter which\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 376, "comment": "//if none present then not possible to be in any set\n"}, "Heuristic": []}, {"nl": {"id": 376, "comment": "//if any element without both a-x and b-x found\n"}, "Heuristic": []}, {"nl": {"id": 376, "comment": "//Edge between a and b means they must be present in same set\n"}, "Heuristic": []}, {"nl": {"id": 376, "comment": "//ans[i] =0 or ans[i] =1 means it must be compulsory be present in that set\n"}, "Heuristic": []}, {"nl": {"id": 376, "comment": "//ans[i] = -1 means no restrictions on it's set number\n"}, "Heuristic": []}, {"nl": {"id": 376, "comment": "//Queue\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 376, "comment": "//contains indices of all nodes in this connected component\n"}, "Heuristic": []}, {"nl": {"id": 377, "comment": "/**\n * Generated by Contest helper plug-in\n * Actual solution is at the bottom\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 377, "comment": "//chain\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 377, "comment": "//chain\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 377, "comment": "///\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 378, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Zyflair Griffane\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 379, "comment": "/**\n * 4 4\n * 1 5 3 4\n * 1 2\n * 1 3\n * 2 3\n * 3 3\n *\n *\n * @author pttrung\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 379, "comment": "/**\n     * Cross product ab*ac\n     *\n     * @param a\n     * @param b\n     * @param c\n     * @return\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 379, "comment": "/**\n     * Dot product ab*ac;\n     *\n     * @param a\n     * @param b\n     * @param c\n     * @return\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 379, "comment": "//System.out.println(Arrays.toString(g));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 379, "comment": "// System.out.println(\"UPDATE INDEX \" + index);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 379, "comment": "//    System.out.println(\"NEXT \" +index);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 379, "comment": "//  System.out.println(\"GET INDEX \" + index);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 379, "comment": "// System.out.println(\"BACK \" + index);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 379, "comment": "//    static Point intersect(Point a, Point b, Point c) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 379, "comment": "//        double D = cross(a, b);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 379, "comment": "//        if (D != 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 379, "comment": "//            return new Point(cross(c, b) / D, cross(a, c) / D);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 379, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 379, "comment": "//        return null;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 379, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 379, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 379, "comment": "//    static Point convert(Point a, double angle) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 379, "comment": "//        double x = a.x * cos(angle) - a.y * sin(angle);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 379, "comment": "//        double y = a.x * sin(angle) + a.y * cos(angle);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 379, "comment": "//        return new Point(x, y);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 379, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 379, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 379, "comment": "//    static Point add(Point a, Point b) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 379, "comment": "//        return new Point(a.x + b.x, a.y + b.y);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 379, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 379, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 379, "comment": "// System.out.println(\"DIST \" + dist);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 379, "comment": "//System.setOut(new PrintStream(new BufferedOutputStream(System.out), true));\n"}, "Heuristic": []}, {"nl": {"id": 379, "comment": "//br = new BufferedReader(new FileReader(new File(\"A-large (2).in\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 381, "comment": "//System.err.println((System.currentTimeMillis() - startTime) + \" ms\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 381, "comment": "//long startTime = System.currentTimeMillis();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 382, "comment": "/**\n * Created by hama_du on 2014/09/21.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 383, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 383, "comment": "// InputMismatchException -> UnknownError\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 384, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 385, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Mahmoud Aladdin <aladdin3>\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 386, "comment": "//        in = new FileInputStream(\"in.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 386, "comment": "//        out = new PrintStream(\"out.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 387, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 387, "comment": "// var[i] = true means p[i] \\in A\n"}, "Heuristic": []}, {"nl": {"id": 387, "comment": "// var[i] is false\n"}, "Heuristic": []}, {"nl": {"id": 387, "comment": "// var[i] is true\n"}, "Heuristic": []}, {"nl": {"id": 387, "comment": "// Example: (x=>!y) is translated to Clause(x, y, true, false)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 387, "comment": "//g[negate(v1, n)].add(v2);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 387, "comment": "//g[negate(v2, n)].add(v1);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 389, "comment": "// private static class point implements Comparable<point> {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 389, "comment": "// int l;\n"}, "Heuristic": []}, {"nl": {"id": 389, "comment": "// int r;\n"}, "Heuristic": []}, {"nl": {"id": 389, "comment": "// int index;\n"}, "Heuristic": []}, {"nl": {"id": 389, "comment": "// int buffer;\n"}, "Heuristic": []}, {"nl": {"id": 389, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 389, "comment": "// point(int l, int r, int i, int b) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 389, "comment": "// this.l = l;\n"}, "Heuristic": []}, {"nl": {"id": 389, "comment": "// this.r = r;\n"}, "Heuristic": []}, {"nl": {"id": 389, "comment": "// index = i;\n"}, "Heuristic": []}, {"nl": {"id": 389, "comment": "// buffer = b;\n"}, "Heuristic": []}, {"nl": {"id": 389, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 389, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 389, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 389, "comment": "// @Override\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 389, "comment": "// public int compareTo(point o) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 389, "comment": "// if (o.l < l)\n"}, "Heuristic": []}, {"nl": {"id": 389, "comment": "// return 1;\n"}, "Heuristic": []}, {"nl": {"id": 389, "comment": "// else if (o.l > l)\n"}, "Heuristic": []}, {"nl": {"id": 389, "comment": "// return -1;\n"}, "Heuristic": []}, {"nl": {"id": 389, "comment": "// else if (o.r < r)\n"}, "Heuristic": []}, {"nl": {"id": 389, "comment": "// return 1;\n"}, "Heuristic": []}, {"nl": {"id": 389, "comment": "// else if (o.r > r)\n"}, "Heuristic": []}, {"nl": {"id": 389, "comment": "// return -1;\n"}, "Heuristic": []}, {"nl": {"id": 389, "comment": "// return 0;\n"}, "Heuristic": []}, {"nl": {"id": 389, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 389, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 389, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 389, "comment": "//System.out.println(arr[k]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 389, "comment": "// System.out.println(arr[i] + \" \" + i);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 390, "comment": "// ArrayList<Integer> lis = new ArrayList<Integer>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 390, "comment": "// ArrayList<String> lis = new ArrayList<String>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 390, "comment": "//  PriorityQueue<P> que = new PriorityQueue<P>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 390, "comment": "// PriorityQueue<Integer> que = new PriorityQueue<Integer>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 390, "comment": "//  Stack<Integer> que = new Stack<Integer>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 390, "comment": "//HashMap<Long,Long> map = new HashMap<Long,Long>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 390, "comment": "//\tstatic long sum=0;\n"}, "Heuristic": []}, {"nl": {"id": 390, "comment": "// 1000000007 (10^9+7)\n"}, "Heuristic": []}, {"nl": {"id": 390, "comment": "//static int mod = 1000000009,r=0; ArrayList<Integer> l[]= new ArrayList[n];\n"}, "Heuristic": []}, {"nl": {"id": 390, "comment": "// static int dx[]={1,-1,0,0};\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 390, "comment": "//\tstatic int dy[]={0,0,1,-1};\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 390, "comment": "//\tstatic int dx[]={1,-1,0,0,1,1,-1,-1};\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 390, "comment": "//  static int dy[]={0,0,1,-1,1,-1,1,-1};\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 390, "comment": "//static Set<Integer> set = new HashSet<Integer>();p\n"}, "Heuristic": []}, {"nl": {"id": 390, "comment": "//String line=\"\"; throws Exception, IOException\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 390, "comment": "//(line=br.readLine())!=null\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 390, "comment": "//Scanner sc =new Scanner(System.in);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 390, "comment": "// !!caution!! int long //  \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 390, "comment": "//,a=sc.nextInt(),b=sc.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 390, "comment": "// int n=sc.nextInt(),p[]=new int[n],q[]=new int[n];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 390, "comment": "//int n=sc.nextInt(),a[]=new int[n],b[]=new int[n];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 390, "comment": "// int n=sc.nextInt(),m=sc.nextInt(),a=sc.nextInt(),b=sc.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 390, "comment": "// int r=1<<28;\n"}, "Heuristic": []}, {"nl": {"id": 390, "comment": "//,k=sc.nextInt();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 390, "comment": "//\tdb(id,d[i]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 390, "comment": "//\timplements Comparable<Pair>\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 390, "comment": "// ascend long\n"}, "Heuristic": []}, {"nl": {"id": 390, "comment": "//\treturn   -x.d+d  ; // ascend\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 390, "comment": "//\t return   x.d-d  ; //descend\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 391, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 393, "comment": "// hadle odd , even and single self loops\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 393, "comment": "// propagate b\n"}, "Heuristic": []}, {"nl": {"id": 393, "comment": "// handle doule self loops , cycles\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 393, "comment": "//System.out.println( a - array[i]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 395, "comment": "/**\n * @author Mukesh Singh\n *\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 395, "comment": "/**\n * @define global / instance variables \n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 395, "comment": "/**\n * @solve test case \n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 395, "comment": "/**\n     * @param args the command line arguments\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 395, "comment": "//SquareDetector sd = new SquareDetector(System.in, System.out);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 395, "comment": "//sd.solve();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 398, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 398, "comment": "// if A == B\n"}, "Heuristic": []}, {"nl": {"id": 400, "comment": "// Mark partners\n"}, "Heuristic": []}, {"nl": {"id": 400, "comment": "// Find those with only one friend\n"}, "Heuristic": []}, {"nl": {"id": 400, "comment": "// Process the one frienders\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 400, "comment": "// Check other's friend\n"}, "Heuristic": []}, {"nl": {"id": 400, "comment": "// Check other's friend\n"}, "Heuristic": []}, {"nl": {"id": 400, "comment": "// Process those with two friends\n"}, "Heuristic": []}, {"nl": {"id": 400, "comment": "// Only possibility should now be that both friends are possible\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 400, "comment": "// Print the result\n"}, "Heuristic": []}, {"nl": {"id": 403, "comment": "/** call this method to initialize reader for InputStream */"}, "Heuristic": []}, {"nl": {"id": 403, "comment": "/** get next word */"}, "Heuristic": []}, {"nl": {"id": 403, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 403, "comment": "//TODO add check for eof if necessary\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 407, "comment": "// Solution is at the bottom of code\n"}, "Heuristic": []}, {"nl": {"id": 407, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 407, "comment": "////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 407, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 407, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 407, "comment": "/////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 407, "comment": "/////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 407, "comment": "///////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 407, "comment": "///////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 407, "comment": "////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 407, "comment": "////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 407, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 407, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 407, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 407, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 407, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 407, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 407, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 407, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 407, "comment": "// 0 - a, 1 - b\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 407, "comment": "// 0 - b, 1 - a\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 408, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Nipuna Samarasekara\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 408, "comment": "/////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 408, "comment": "//To change body of implemented methods use File | Settings | File Templates.\n"}, "Heuristic": []}, {"nl": {"id": 408, "comment": "//            if (isEOF && ret < 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 408, "comment": "//                throw new InputMismatchException();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 408, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 408, "comment": "//            isEOF = ret == -1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 409, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author karan173\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 409, "comment": "//queue.add (bb);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 409, "comment": "//every person has two neighbours\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 410, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author shu_mj @ http://shu-mj.com\n */"}, "Heuristic": ["H1", "H9"]}, {"nl": {"id": 410, "comment": "//shu-mj.com\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 412, "comment": "//print(x + \" \" + (a - x));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 414, "comment": "//        if(n%2==1){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 414, "comment": "//            out.println(\"NO\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 414, "comment": "//            return;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 414, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 414, "comment": "//      reader = new BufferedReader(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 414, "comment": "//      out = new PrintWriter(new FileWriter(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 416, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Hamed Valizadeh (havaliza@gmail.com)\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 417, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author karan173\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 417, "comment": "//queue.add (bb);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 417, "comment": "//every person has two neighbours\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 417, "comment": "//cases => either cycles or linear path with loops end points\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 417, "comment": "//            if (j == -1)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 417, "comment": "//            {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 417, "comment": "//                System.out.println (prev + \" \" + aneigh[prev] + bneight[prev] + \" \" + deg[prev] + \" \" + val[prev] + \" \" + val[64] + \" \" + deg[64]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 417, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 421, "comment": "/*\nhttp://blog.csdn.net/keshuai19940722/article/details/39528801\n\n*/"}, "Heuristic": ["H2", "H7", "H9"]}, {"nl": {"id": 421, "comment": "//blog.csdn.net/keshuai19940722/article/details/39528801\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 423, "comment": "// main\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 423, "comment": "// makes the reader and writer\n"}, "Heuristic": []}, {"nl": {"id": 423, "comment": "// read in n,a,b,ints\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 423, "comment": "// use greedy\n"}, "Heuristic": []}, {"nl": {"id": 423, "comment": "// write to out\n"}, "Heuristic": []}, {"nl": {"id": 423, "comment": "// cleanup\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 424, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author George Marcus\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 424, "comment": "//                if (p != i) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 424, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 424, "comment": "//                if (p != i) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 424, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 426, "comment": "//System.out.println(solve(as));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 426, "comment": "// if fingers is empty return null\n"}, "Heuristic": []}, {"nl": {"id": 426, "comment": "// if as size is one then return first element in fingers\n"}, "Heuristic": []}, {"nl": {"id": 426, "comment": "// get sublist\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 426, "comment": "// recursively call with sublist and limited list of fingers\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 426, "comment": "// if return is null, then return null, else return an array\n"}, "Heuristic": []}, {"nl": {"id": 428, "comment": "//UPSOLVED\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 429, "comment": "/**\n * @author Don Li\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 433, "comment": "/**\n * BaZ :D\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 433, "comment": "//pa(\"left\", left);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 433, "comment": "//pa(\"right\", right);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 434, "comment": "// line length\n"}, "Heuristic": []}, {"nl": {"id": 435, "comment": "//package com.krakn.CF.D1159;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 439, "comment": "//package com.krakn.CF.B1159;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 439, "comment": "//            System.out.println(i + \" \" + temp);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 440, "comment": "/*int n = stdin.nextInt();\n        for(int i = 0; i < n; i++)\n        {\n        \ttest(stdin);\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 441, "comment": "// practice with rainboy\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 446, "comment": "// _ h _ r _ t r _\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 446, "comment": "// _ t _ t _ s t _\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 447, "comment": "///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 448, "comment": "// method to return LCM of two numbers\n"}, "Heuristic": []}, {"nl": {"id": 449, "comment": "//try a gets b's letter\n"}, "Heuristic": []}, {"nl": {"id": 450, "comment": "// Scanner scan = new Scanner(System.in);\n"}, "Heuristic": []}, {"nl": {"id": 451, "comment": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n744444444747477777774\n44444447474747777777\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 451, "comment": "/**\n *\n * @author Andy Phan\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 453, "comment": "/*\n\t\t * try { InputReader(new FileInputStream(\"C:\\\\Users\\\\hardik\\\\Desktop\\\\in.txt\"));\n\t\t * } catch(FileNotFoundException e) {}\n\t\t */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 453, "comment": "//new Main().solve();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 453, "comment": "// ans_sb = new StringBuilder();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 453, "comment": "// System.out.println(ans_sb);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 454, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author bacali\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 457, "comment": "/**\n\t * Source: Matt Fontaine\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 458, "comment": "// Solution\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 458, "comment": "//FastReader in = new FastReader(new BufferedReader(new FileReader(\"Main.in\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 458, "comment": "//e.printStackTrace();\n"}, "Heuristic": []}, {"nl": {"id": 458, "comment": "//e.printStackTrace();\n"}, "Heuristic": []}, {"nl": {"id": 459, "comment": "// S\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 459, "comment": "// S\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 464, "comment": "/*\n * Heart beats fast\n * \t\tColors and promises\n * \t\t\tHow to be brave\n * \t\t\t\tHow can I love when I am afraid...\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 464, "comment": "//read the question correctly (is y a vowel? what are the exact constraints?)\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 464, "comment": "//look out for SPECIAL CASES (n=1?) and overflow (ll vs int?)\n"}, "Heuristic": []}, {"nl": {"id": 464, "comment": "//always declare multidimensional arrays as [2][n] not [n][2]\n"}, "Heuristic": []}, {"nl": {"id": 464, "comment": "//it can lead to upto 2-3x diff in runtime\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 464, "comment": "//declare int/long tries with 16 array size due to object overhead :D\n"}, "Heuristic": []}, {"nl": {"id": 464, "comment": "///////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 464, "comment": "///////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 464, "comment": "///template from here\n"}, "Heuristic": []}, {"nl": {"id": 464, "comment": "//output functions////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 464, "comment": "//////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 464, "comment": "//input functions/////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 464, "comment": "//////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 464, "comment": "//some utility functions\n"}, "Heuristic": []}, {"nl": {"id": 465, "comment": "/*\t\t\tif (now[0] > old[0])\n\t\t\t{\n\t\t\t\tint add = now[0] - old[0];\n\n\t\t\t\tchanges += add;\n\n\n\t\t\t}*/"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 466, "comment": "/**\n * @author khokharnikunj8\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 468, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author programajor\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 470, "comment": "//System.out.println(Arrays.toString(arr2));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 475, "comment": "// line length\n"}, "Heuristic": []}, {"nl": {"id": 479, "comment": "/*\nKeep solving problems.\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 482, "comment": "//package que_a;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 482, "comment": "//Enter code here utkarsh\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 482, "comment": "//SHOW_TIME = true;\n"}, "Heuristic": []}, {"nl": {"id": 482, "comment": "//---------- I/O Template ----------\n"}, "Heuristic": []}, {"nl": {"id": 482, "comment": "//no input \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 483, "comment": "/* package whatever; // don't place package name! */"}, "Heuristic": ["H7"]}, {"nl": {"id": 483, "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 483, "comment": "// don't place package name! */\n"}, "Heuristic": []}, {"nl": {"id": 484, "comment": "// import java.io.FileInputStream;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 484, "comment": "// import java.io.FileOutputStream;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 484, "comment": "// import static java.util.Collections.sort;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 484, "comment": "// solveB();\n"}, "Heuristic": []}, {"nl": {"id": 484, "comment": "// solveC();\n"}, "Heuristic": []}, {"nl": {"id": 484, "comment": "// solveD();\n"}, "Heuristic": []}, {"nl": {"id": 484, "comment": "// solveE();\n"}, "Heuristic": []}, {"nl": {"id": 484, "comment": "// solveF();\n"}, "Heuristic": []}, {"nl": {"id": 484, "comment": "// new FastScanner(new FileInputStream(\".in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 484, "comment": "// new PrintWriter(new FileOutputStream(\".out\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 485, "comment": "// Scanner scan = new Scanner(System.in);\n"}, "Heuristic": []}, {"nl": {"id": 485, "comment": "//out.println(mp1.keySet().size());\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 485, "comment": "//  out.close();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 485, "comment": "// StringTokenizer st = new StringTokenizer(bf.readLine());\n"}, "Heuristic": []}, {"nl": {"id": 485, "comment": "// int[] a = new int[n]; for(int i=0; i<n; i++) a[i] = Integer.parseInt(st.nextToken());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 485, "comment": "// int n = Integer.parseInt(st.nextToken());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 485, "comment": "// int n = scan.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 486, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author palayutm\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 486, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 487, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Rishabhdeep Singh\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 488, "comment": "//package jsr.codeforces;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 488, "comment": "//M, XS, XXS, XXXS, L, XL, XXl, XXXL\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 489, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 491, "comment": "// //package ;\n"}, "Heuristic": []}, {"nl": {"id": 492, "comment": "/* \n * UMANG PANCHAL\n * DAIICT\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 492, "comment": "/*   if(s.length()==1)\n\t\t\t   {\n\t\t\t\t   if(s.equals(\"M\"))\n\t\t\t\t   {\n\t\t\t\t\t   if(hm.containsKey(\"S\"))\n\t\t\t\t\t   {\n\t\t\t\t\t\t   if(hm.get(\"S\")==1)\n\t\t\t\t\t\t\t   hm.remove(\"S\");\n\t\t\t\t\t\t   else\n\t\t\t\t\t\t\t   hm.put(s,hm.get(\"S\")-1);\n\t\t\t\t\t   }\n\t\t\t\t\t   else if(hm.containsKey(\"L\"))\n\t\t\t\t\t   {\n\t\t\t\t\t\t   if(hm.get(\"L\")==1)\n\t\t\t\t\t\t\t   hm.remove(\"L\");\n\t\t\t\t\t\t   else\n\t\t\t\t\t\t\t   hm.put(s,hm.get(\"L\")-1);\n\t\t\t\t\t   }\n\t\t\t\t   }\n\t\t\t\t   else if()\n\t\t\t\t   \n\t\t\t   }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 492, "comment": "/*  A recursive function to get the minimum value in a given\n\t        range of array indexes. The following are parameters for\n\t        this function.\n\t \n\t        st    --> Pointer to segment tree\n\t        index --> Index of current node in the segment tree. Initially\n\t                   0 is passed as root is always at index 0\n\t        ss & se  --> Starting and ending indexes of the segment\n\t                     represented by current node, i.e., st[index]\n\t        qs & qe  --> Starting and ending indexes of query range */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 492, "comment": "/* Function to construct segment tree from given array. This function\n\t       allocates memory for segment tree and calls constructSTUtil() to\n\t       fill the allocated memory */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 492, "comment": "/*\n\t *  PriorityQueue<Integer> pq = new PriorityQueue<Integer>(new Comparator<Integer>()\n  \t\t\t{\n  \t\t\t\tpublic int compare(Integer o1, Integer o2)\n  \t\t\t\t{\n  \t\t\t\t\treturn Intege\n  \t\t\t\t\tr.compare(o2,o1);\n  \t\t\t\t}\n  \t\t\t});\n\t * \n\t * \n\t */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 492, "comment": "/*public static long kruskal(Pair[] p)\n\t{\n\t\tlong ans=0;\n\t\tint w=0,x=0,y=0;\n\t\tfor(int i=0;i<p.length;i++)\n\t\t{\n\t\t\tw=p[i].w;\n\t\t\tx=p[i].x;\n\t\t\ty=p[i].y;\n\t\t\tif(root(x)!=root(y))\n\t\t\t{\n\t\t\t\tans+=w;\n\t\t\t\tunion(x,y);\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}*/"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 492, "comment": "// --------------------My Code Starts Here----------------------\n"}, "Heuristic": []}, {"nl": {"id": 492, "comment": "// --------------------My Code Ends Here------------------------\n"}, "Heuristic": []}, {"nl": {"id": 492, "comment": "//array to store segment tree\n"}, "Heuristic": []}, {"nl": {"id": 492, "comment": "// A utility function to get minimum of two numbers\n"}, "Heuristic": []}, {"nl": {"id": 492, "comment": "// A utility function to get the middle index from corner\n"}, "Heuristic": []}, {"nl": {"id": 492, "comment": "// indexes.\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 492, "comment": "// If segment of this node is a part of given range, then\n"}, "Heuristic": []}, {"nl": {"id": 492, "comment": "// return the min of the segment\n"}, "Heuristic": []}, {"nl": {"id": 492, "comment": "// If segment of this node is outside the given range\n"}, "Heuristic": []}, {"nl": {"id": 492, "comment": "// If a part of this segment overlaps with the given range\n"}, "Heuristic": []}, {"nl": {"id": 492, "comment": "// Return minimum of elements in range from index qs (quey\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 492, "comment": "// start) to qe (query end).  It mainly uses RMQUtil()\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 492, "comment": "// Check for erroneous input values\n"}, "Heuristic": []}, {"nl": {"id": 492, "comment": "// A recursive function that constructs Segment Tree for\n"}, "Heuristic": []}, {"nl": {"id": 492, "comment": "// array[ss..se]. si is index of current node in segment tree st\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 492, "comment": "// If there is one element in array, store it in current\n"}, "Heuristic": []}, {"nl": {"id": 492, "comment": "//  node of segment tree and return\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 492, "comment": "// If there are more than one elements, then recur for left and\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 492, "comment": "// right subtrees and store the minimum of two values in this node\n"}, "Heuristic": []}, {"nl": {"id": 492, "comment": "// Allocate memory for segment tree\n"}, "Heuristic": []}, {"nl": {"id": 492, "comment": "//Height of segment tree\n"}, "Heuristic": []}, {"nl": {"id": 492, "comment": "//Maximum size of segment tree\n"}, "Heuristic": []}, {"nl": {"id": 492, "comment": "// allocate memory\n"}, "Heuristic": []}, {"nl": {"id": 492, "comment": "// Fill the allocated memory st\n"}, "Heuristic": []}, {"nl": {"id": 492, "comment": "// Driver program to test above functions\n"}, "Heuristic": []}, {"nl": {"id": 492, "comment": "// n must be odd at this point.  So we can\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 492, "comment": "// skip one element (Note i = i +2)\n"}, "Heuristic": []}, {"nl": {"id": 492, "comment": "// While i divides n, print i and divide n\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 492, "comment": "// This condition is to handle the case whien\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 492, "comment": "// n is a prime number greater than 2\n"}, "Heuristic": []}, {"nl": {"id": 492, "comment": "// w.println(1);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 492, "comment": "// w.println(2);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 492, "comment": "//w.print(1);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 492, "comment": "//this.index=index;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 492, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 492, "comment": "// size[root_b]+=size[root_a];\n"}, "Heuristic": []}, {"nl": {"id": 492, "comment": "// Corner cases\n"}, "Heuristic": []}, {"nl": {"id": 492, "comment": "// This is checked so that we can skip \n"}, "Heuristic": []}, {"nl": {"id": 492, "comment": "// middle five numbers in below loop\n"}, "Heuristic": []}, {"nl": {"id": 492, "comment": "// % is remainder\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 493, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author prakharjain\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 494, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author prakhar897\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 496, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 497, "comment": "/************************ SOLUTION STARTS HERE ************************/"}, "Heuristic": []}, {"nl": {"id": 497, "comment": "/************************ SOLUTION ENDS HERE ************************/"}, "Heuristic": []}, {"nl": {"id": 497, "comment": "/************************ TEMPLATE STARTS HERE **********************/"}, "Heuristic": []}, {"nl": {"id": 497, "comment": "/************************ TEMPLATE ENDS HERE ************************/"}, "Heuristic": []}, {"nl": {"id": 498, "comment": "//-----------------------------------------------------------------------------------\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 505, "comment": "//package contese_476;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 505, "comment": "//HashMap<Integer,Integer> h1=new HashMap();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 505, "comment": "//h1.put(a[i],i);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 506, "comment": "//package contese_476;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 506, "comment": "//HashMap<Integer,Integer> h1=new HashMap();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 506, "comment": "//h1.put(a[i],i);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 507, "comment": "/*\ninputCopy\n4\n2 1 2 1\noutputCopy\n4\ninputCopy\n5\n0 -1 -1 -1 -1\noutputCopy\n4\n*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 507, "comment": "// LM10: The next Ballon d'or\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 512, "comment": "//201920181\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 513, "comment": "/**\n *\n * @author Haya\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 515, "comment": "/* spar5h */"}, "Heuristic": ["H7"]}, {"nl": {"id": 516, "comment": "/* spar5h */"}, "Heuristic": ["H7"]}, {"nl": {"id": 518, "comment": "//boolean \n"}, "Heuristic": ["H2"]}, {"nl": {"id": 520, "comment": "// int n = Integer.parseInt(st.nextToken());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 523, "comment": "//System.out.println(s);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 523, "comment": "//System.out.println(c[i]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 523, "comment": "//System.out.println(x+ \"  \"+y );\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 525, "comment": "//System.out.print((a+b)/c + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 525, "comment": "//System.out.println(h);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 526, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 526, "comment": "// all leaves depth = K\n"}, "Heuristic": []}, {"nl": {"id": 526, "comment": "// < for n=1\n"}, "Heuristic": []}, {"nl": {"id": 529, "comment": "//package global14;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 529, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 529, "comment": "//\t\tif(x < 0){ x = 0; }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 529, "comment": "// print ids which are 1\n"}, "Heuristic": []}, {"nl": {"id": 530, "comment": "/*\n\n    FS Methods:\n\n    - next(): next element in string\n    - nextLine(): nextline in string\n    - ni(): next Integer\n    - nd(): next Double\n    - nl(): next Long\n    - intArray(n): \n    - longArray(n): \n    - to2di(m,n):\n    - to2dl(m,n):\n\n\n\n    */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 530, "comment": "/*\n        - The following are helping method so pls do not do anything to them.\n    \n    */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 530, "comment": "//2021 global14\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 530, "comment": "// jzzhao\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 530, "comment": "//solve(sc,pw);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 530, "comment": "//return \"NO\";\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 530, "comment": "// public static int[][] to2d(Scanner scanner, int m, int n){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 530, "comment": "//     int[][] ans = new int[m][n];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 530, "comment": "//     for(int i = 0;i<m;i++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 530, "comment": "//         String[] r = scanner.nextLine().split(\"[ ]\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 530, "comment": "//         for(int j = 0;j<n;j++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 530, "comment": "//             ans[i][j] = stoi(r[j]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 530, "comment": "//         }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 530, "comment": "//     }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 530, "comment": "//     return ans;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 530, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 530, "comment": "// public static int[] toArray(Scanner scanner, int m){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 530, "comment": "//     int[] ans = new int[m];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 530, "comment": "//     String[] r = scanner.nextLine().split(\"[ ]\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 530, "comment": "//     for(int i = 0;i<m;i++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 530, "comment": "//         ans[i] = stoi(r[i]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 530, "comment": "//     }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 530, "comment": "//     return ans;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 530, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 532, "comment": "//package Round14Global;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 533, "comment": "//\u0628\u0633\u0645 \u0627\u0644\u0644\u0647 \u0627\u0644\u0631\u062d\u0645\u0646 \u0627\u0644\u0631\u062d\u064a\u0645\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 533, "comment": "// line length \n"}, "Heuristic": []}, {"nl": {"id": 533, "comment": "/////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 533, "comment": "//finalAnswer.append(1).append('\\n');\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 533, "comment": "/////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 533, "comment": "// % is remainder\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 533, "comment": "// Create a boolean array \n"}, "Heuristic": []}, {"nl": {"id": 533, "comment": "// \"prime[0..n]\" and\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 533, "comment": "// initialize all entries \n"}, "Heuristic": []}, {"nl": {"id": 533, "comment": "// it as true. A value in\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 533, "comment": "// prime[i] will finally be \n"}, "Heuristic": []}, {"nl": {"id": 533, "comment": "// false if i is Not a\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 533, "comment": "// prime, else true.\n"}, "Heuristic": []}, {"nl": {"id": 533, "comment": "// If prime[p] is not changed, then it is a\n"}, "Heuristic": []}, {"nl": {"id": 533, "comment": "// prime\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 533, "comment": "// Update all multiples of p\n"}, "Heuristic": []}, {"nl": {"id": 533, "comment": "// Print all prime numbers\n"}, "Heuristic": []}, {"nl": {"id": 535, "comment": "///package round_global_14;\n"}, "Heuristic": []}, {"nl": {"id": 535, "comment": "//////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 535, "comment": "///////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 536, "comment": "//suffle\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 536, "comment": "//then sort\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 536, "comment": "// Use this to input code since it is faster than a Scanner\n"}, "Heuristic": []}, {"nl": {"id": 538, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 538, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 538, "comment": "//            a[i] = (int) (Math.random()*1e5 + 1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 538, "comment": "//            a[i] = (long) (Math.random() * 1e9 + 1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 538, "comment": "//System.out.println(\"a - \" + a + \" b - \" + b);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 538, "comment": "//System.out.println(\"modulo inverse of \" + a + \" -> \" + ans);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 538, "comment": "//        System.out.println(MAX_N);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 538, "comment": "//        System.out.println(set);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 539, "comment": "//goal is to always be higher\n"}, "Heuristic": []}, {"nl": {"id": 540, "comment": "/*fac = new long[nn + 1];\n        fac[1] = 1;\n        for(int i = 2; i <= nn; i++)\n            fac[i] = fac[i - 1] * i % MOD;*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 540, "comment": "/*pow2 = new long[nn + 1];\n        pow2[0] = 1L;\n        for(int i = 1; i <= nn; i++)\n            pow2[i] = pow2[i - 1] * 2L;*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 540, "comment": "/*inv = new long[nn + 1];\n        inv[1] = 1;\n        for (int i = 2; i <= nn; ++i)\n            inv[i] = (MOD - MOD / i) * inv[(int)(MOD % i)] % MOD;*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 540, "comment": "/*facInv = new long[nn + 1];\n        facInv[0] = facInv[1] = 1;\n        for (int i = 2; i <= nn; ++i)\n            facInv[i] = facInv[i - 1] * inv[i] % MOD;*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 540, "comment": "/*numOfDiffDiv = new int[nn + 1];\n        for(int i = 2; i <= nn; i++)\n            if(numOfDiffDiv[i] == 0)\n                for(int j = i; j <= nn; j += i)\n                    numOfDiv[j] ++;*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 540, "comment": "/*numOfDiv = new int[nn + 1];\n        numOfDiv[1] = 1;\n        for(int i = 2; i <= nn; i++) {\n            for(int j = 2; j * j <= i; j++) {\n                if(i % j == 0) {\n                    numOfDiv[i] = numOfDiv[i / j] + 1;\n                    break;\n                }\n            }\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 540, "comment": "/*\n        int t = 1;\n        //t = sc.ni();\n        while(t-- > 0) {\n            //boolean res = solve();\n            //out.println(res ? \"YES\" : \"NO\");\n            long res = solve();\n            out.println(res);\n        }*/"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": 540, "comment": "/*String s = sc.nextLine();\n        char[] c = s.toCharArray();\n        int n = c.length;*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 540, "comment": "//static long MOD = 998_244_353L;\n"}, "Heuristic": []}, {"nl": {"id": 540, "comment": "//static long MOD = 1_000_000_033L;\n"}, "Heuristic": []}, {"nl": {"id": 540, "comment": "//static ArrayList <Integer> primes;\n"}, "Heuristic": []}, {"nl": {"id": 540, "comment": "//static int[] primes;\n"}, "Heuristic": []}, {"nl": {"id": 540, "comment": "//-----------PrintWriter for faster output---------------------------------\n"}, "Heuristic": []}, {"nl": {"id": 540, "comment": "// Start writing your solution here. -------------------------------------\n"}, "Heuristic": []}, {"nl": {"id": 540, "comment": "//primes = sieveOfEratosthenes(100001);\n"}, "Heuristic": []}, {"nl": {"id": 540, "comment": "//t = sc.ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 540, "comment": "//boolean res = solve();\n"}, "Heuristic": []}, {"nl": {"id": 540, "comment": "//out.println(res ? \"YES\" : \"NO\");\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 540, "comment": "//out.println(\"Case #\" + tt + \": \" + res);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 540, "comment": "//int n = sc.ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 540, "comment": "//long[] a =  new long[n];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 540, "comment": "//for(int i = 0; i < n; i++) a[i] = sc.nl();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 540, "comment": "// edges to adjacency list by uwi\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 540, "comment": "// tree diameter by uwi\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 540, "comment": "// SegmentTree range min/max query by uwi\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 540, "comment": "//-----------MyScanner class for faster input----------\n"}, "Heuristic": []}, {"nl": {"id": 540, "comment": "//--------------------------------------------------------\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 541, "comment": "//static final long MOD = 1000000007L;\n"}, "Heuristic": []}, {"nl": {"id": 541, "comment": "//static final long MOD2 = 1000000009L;\n"}, "Heuristic": []}, {"nl": {"id": 541, "comment": "//static final long INF = 500000000000L;\n"}, "Heuristic": []}, {"nl": {"id": 541, "comment": "//static final long NINF = -1000000000000000000L;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 541, "comment": "//Sort an array (immune to quicksort TLE)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 541, "comment": "//Ascending order.\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 544, "comment": "//shuffle, then sort\n"}, "Heuristic": []}, {"nl": {"id": 545, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author lucasr\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 546, "comment": "//SOLUTION BEGIN\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 546, "comment": "//SOLUTION END\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 546, "comment": "//Solution Credits: Taranpreet Singh\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 547, "comment": "/* */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 547, "comment": "/* */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 547, "comment": "/* */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 547, "comment": "//        Scanner scan = new Scanner(System.in);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 547, "comment": "//for (int i = 1; i <= 10; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 547, "comment": "//    System.out.println(i + \" \" + divisors(i).toString());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 547, "comment": "//}   \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 547, "comment": "//precondition: n <= m\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 547, "comment": "// If divisors are equal, print only one\n"}, "Heuristic": []}, {"nl": {"id": 547, "comment": "// Otherwise print both\n"}, "Heuristic": []}, {"nl": {"id": 547, "comment": "//first divide by 2\n"}, "Heuristic": []}, {"nl": {"id": 547, "comment": "//insert 2\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 547, "comment": "// Check if number is less than\n"}, "Heuristic": []}, {"nl": {"id": 547, "comment": "// equal to 1\n"}, "Heuristic": []}, {"nl": {"id": 547, "comment": "// Check if number is 2\n"}, "Heuristic": []}, {"nl": {"id": 547, "comment": "// Check if n is a multiple of 2\n"}, "Heuristic": []}, {"nl": {"id": 547, "comment": "// If not, then just check the odds\n"}, "Heuristic": []}, {"nl": {"id": 547, "comment": "// method to return LCM of two numbers\n"}, "Heuristic": []}, {"nl": {"id": 547, "comment": "//printing methods\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 547, "comment": "//WOW!\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 549, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 549, "comment": "//StringJoiner sj = new StringJoiner(\" \"); \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 549, "comment": "//sj.add(strings)\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 550, "comment": "/////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 550, "comment": "/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 551, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 552, "comment": "//package sept;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 552, "comment": "//boolean codechef=true;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 552, "comment": "// String prodKey = \"Av#/lL{OyEKiLR+/Ce%(w]^J65;XZe8FVb]]<931_=80E[BVnU^@4xu*J%KG3,CRqIZrUN~JJ+*6QC*CyBd>'$;>O\"onO.bQ%{L}\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 552, "comment": "// p holds the value of n*(n-1)*(n-2)...,\n"}, "Heuristic": []}, {"nl": {"id": 552, "comment": "// k holds the value of r*(r-1)...\n"}, "Heuristic": []}, {"nl": {"id": 552, "comment": "// C(n, r) == C(n, n-r),\n"}, "Heuristic": []}, {"nl": {"id": 552, "comment": "// choosing the smaller value\n"}, "Heuristic": []}, {"nl": {"id": 552, "comment": "// gcd of p, k\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 552, "comment": "// dividing by gcd, to simplify\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 552, "comment": "// product division by their gcd\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 552, "comment": "// saves from the overflow\n"}, "Heuristic": []}, {"nl": {"id": 552, "comment": "// k should be simplified to 1\n"}, "Heuristic": []}, {"nl": {"id": 552, "comment": "// as C(n, r) is a natural number\n"}, "Heuristic": []}, {"nl": {"id": 552, "comment": "// (denominator should be 1 ) .\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 552, "comment": "// if our approach is correct p = ans and k =1\n"}, "Heuristic": []}, {"nl": {"id": 552, "comment": "// Checks if i is factor of both integers\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 552, "comment": "// A function to do counting sort of arr[] according to\n"}, "Heuristic": []}, {"nl": {"id": 552, "comment": "// the digit represented by exp.\n"}, "Heuristic": []}, {"nl": {"id": 552, "comment": "// output array\n"}, "Heuristic": []}, {"nl": {"id": 552, "comment": "// Store count of occurrences in count[]\n"}, "Heuristic": []}, {"nl": {"id": 552, "comment": "// Change count[i] so that count[i] now contains\n"}, "Heuristic": []}, {"nl": {"id": 552, "comment": "// actual position of this digit in output[]\n"}, "Heuristic": []}, {"nl": {"id": 552, "comment": "// Build the output array\n"}, "Heuristic": []}, {"nl": {"id": 552, "comment": "// Copy the output array to arr[], so that arr[] now\n"}, "Heuristic": []}, {"nl": {"id": 552, "comment": "// contains sorted numbers according to curent digit\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 552, "comment": "// The main function to that sorts arr[] of size n using\n"}, "Heuristic": []}, {"nl": {"id": 552, "comment": "// Radix Sort\n"}, "Heuristic": []}, {"nl": {"id": 552, "comment": "// Find the maximum number to know number of digits\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 552, "comment": "// Do counting sort for every digit. Note that\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 552, "comment": "// instead of passing digit number, exp is passed.\n"}, "Heuristic": []}, {"nl": {"id": 552, "comment": "// exp is 10^i where i is current digit number\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 552, "comment": "// int[] nod = new int[n];\n"}, "Heuristic": []}, {"nl": {"id": 552, "comment": "// for(int i=2;i<n;i++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 552, "comment": "//     int prod = i/mind[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 552, "comment": "//     if (mind[i] != mind[prod]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 552, "comment": "//         nod[i] = nod[prod] + 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 552, "comment": "//     } else {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 552, "comment": "//         nod[i] = nod[prod];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 552, "comment": "//     }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 552, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 552, "comment": "// Simple sieve to find smallest prime factors of numbers \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 552, "comment": "// smaller than MAX \n"}, "Heuristic": []}, {"nl": {"id": 552, "comment": "// Prime number will have same divisor \n"}, "Heuristic": []}, {"nl": {"id": 552, "comment": "// Returns length of the largest subsequence \n"}, "Heuristic": []}, {"nl": {"id": 552, "comment": "// with GCD more than 1. \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 552, "comment": "// Fetch total unique prime divisor of element \n"}, "Heuristic": []}, {"nl": {"id": 552, "comment": "// Increment count[] of Every unique divisor \n"}, "Heuristic": []}, {"nl": {"id": 552, "comment": "// we get till now \n"}, "Heuristic": []}, {"nl": {"id": 552, "comment": "// Find maximum frequency of divisor \n"}, "Heuristic": []}, {"nl": {"id": 552, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 553, "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 553, "comment": "/* Create temp arrays */"}, "Heuristic": ["H7"]}, {"nl": {"id": 553, "comment": "/*Copy data to temp arrays*/"}, "Heuristic": ["H7"]}, {"nl": {"id": 553, "comment": "/* Merge the temp arrays */"}, "Heuristic": ["H7"]}, {"nl": {"id": 553, "comment": "/* Copy remaining elements of L[] if any */"}, "Heuristic": ["H7"]}, {"nl": {"id": 553, "comment": "/* Copy remaining elements of R[] if any */"}, "Heuristic": ["H7"]}, {"nl": {"id": 553, "comment": "/* Create temp arrays */"}, "Heuristic": ["H7"]}, {"nl": {"id": 553, "comment": "/*Copy data to temp arrays*/"}, "Heuristic": ["H7"]}, {"nl": {"id": 553, "comment": "/* Merge the temp arrays */"}, "Heuristic": ["H7"]}, {"nl": {"id": 553, "comment": "/* Copy remaining elements of L[] if any */"}, "Heuristic": ["H7"]}, {"nl": {"id": 553, "comment": "/* Copy remaining elements of R[] if any */"}, "Heuristic": ["H7"]}, {"nl": {"id": 553, "comment": "//\t\t  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 553, "comment": "//\t\t  int T=Integer.parseInt(br.readLine());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 553, "comment": "//\t\t  int T=1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 553, "comment": "// Calculate sum of all elements\n"}, "Heuristic": []}, {"nl": {"id": 553, "comment": "// initialize top row as true\n"}, "Heuristic": []}, {"nl": {"id": 553, "comment": "// initialize leftmost column, except part[0][0], as false\n"}, "Heuristic": []}, {"nl": {"id": 553, "comment": "// Fill the partition table in bottom up manner\n"}, "Heuristic": []}, {"nl": {"id": 553, "comment": "//S%N, N is a power of 2\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 553, "comment": "// Print the number of 2s that divide n \n"}, "Heuristic": []}, {"nl": {"id": 553, "comment": "// n must be odd at this point.  So we can \n"}, "Heuristic": []}, {"nl": {"id": 553, "comment": "// skip one element (Note i = i +2) \n"}, "Heuristic": []}, {"nl": {"id": 553, "comment": "// While i divides n, print i and divide n \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 553, "comment": "// This condition is to handle the case whien \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 553, "comment": "// n is a prime number greater than 2 \n"}, "Heuristic": []}, {"nl": {"id": 553, "comment": "// Corner cases \n"}, "Heuristic": []}, {"nl": {"id": 553, "comment": "// This is checked so that we can skip  \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 553, "comment": "// middle five numbers in below loop \n"}, "Heuristic": []}, {"nl": {"id": 553, "comment": "// Move to right side if target is  \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 553, "comment": "// greater.  \n"}, "Heuristic": []}, {"nl": {"id": 553, "comment": "// Move left side.  \n"}, "Heuristic": []}, {"nl": {"id": 553, "comment": "// Move to left side if target is  \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 553, "comment": "// lesser.  \n"}, "Heuristic": []}, {"nl": {"id": 553, "comment": "// Move right side.  \n"}, "Heuristic": []}, {"nl": {"id": 553, "comment": "// Find sizes of two subarrays to be merged \n"}, "Heuristic": []}, {"nl": {"id": 553, "comment": "// Initial indexes of first and second subarrays \n"}, "Heuristic": []}, {"nl": {"id": 553, "comment": "// Initial index of merged subarry array \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 553, "comment": "// Main function that sorts arr[l..r] using \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 553, "comment": "// merge() \n"}, "Heuristic": []}, {"nl": {"id": 553, "comment": "// Find the middle point \n"}, "Heuristic": []}, {"nl": {"id": 553, "comment": "// Sort first and second halves \n"}, "Heuristic": []}, {"nl": {"id": 553, "comment": "// Merge the sorted halves \n"}, "Heuristic": []}, {"nl": {"id": 553, "comment": "// Find sizes of two subarrays to be merged \n"}, "Heuristic": []}, {"nl": {"id": 553, "comment": "// Initial indexes of first and second subarrays \n"}, "Heuristic": []}, {"nl": {"id": 553, "comment": "// Initial index of merged subarry array \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 553, "comment": "// Main function that sorts arr[l..r] using \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 553, "comment": "// merge() \n"}, "Heuristic": []}, {"nl": {"id": 553, "comment": "// Find the middle point \n"}, "Heuristic": []}, {"nl": {"id": 553, "comment": "// Sort first and second halves \n"}, "Heuristic": []}, {"nl": {"id": 553, "comment": "// Merge the sorted halves \n"}, "Heuristic": []}, {"nl": {"id": 553, "comment": "// line length \n"}, "Heuristic": []}, {"nl": {"id": 554, "comment": "/*\npolyakoff\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 555, "comment": "//I'm Whiplash99\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 557, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 558, "comment": "//check if n is a multiple of 2\n"}, "Heuristic": []}, {"nl": {"id": 558, "comment": "//if not, then just check the odds\n"}, "Heuristic": []}, {"nl": {"id": 558, "comment": "// Create a boolean array \"prime[0..n]\" and initialize\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 558, "comment": "// all entries it as true. A value in prime[i] will\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 558, "comment": "// finally be false if i is Not a prime, else true.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 558, "comment": "// If prime[p] is not changed, then it is a prime\n"}, "Heuristic": []}, {"nl": {"id": 558, "comment": "// Update all multiples of p\n"}, "Heuristic": []}, {"nl": {"id": 558, "comment": "//        int t=1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 559, "comment": "//        Scanner scan = new Scanner(System.in);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 559, "comment": "//        int t = scan.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 559, "comment": "//            Integer[] a= new Integer[n];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 559, "comment": "//            String[] s2= br.readLine().split(\" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 559, "comment": "//            long sum=0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 559, "comment": "//            for (int i=0;i<n;i++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 559, "comment": "//                a[i]= Integer.parseInt(s2[i]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 559, "comment": "//                sum+= Math.abs(a[i]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 559, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 560, "comment": "/*==========================================================================*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 560, "comment": "/*\n*\t\tAUTHOR:    RonWonWon    \n*\t\tCREATED:   02.05.2021 19:58:57\n*\t\tEMAIL:     rachitpts.2454@gmail.com                                  \n*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 560, "comment": "/*==========================================================================*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 560, "comment": "//tt++; out.println(\"Case #\"+tt+\": \"+ans);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 562, "comment": "// br = new BufferedReader(new FileReader(\".in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 562, "comment": "// out = new PrintWriter(new FileWriter(\".out\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 563, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Sandip Jana\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 564, "comment": "/**\n * @author Mubtasim Shahriar\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 564, "comment": "//        int t = 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 566, "comment": "//BufferedReader in = new BufferedReader(new FileReader(\"two\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 569, "comment": "// squares of 2\n"}, "Heuristic": []}, {"nl": {"id": 569, "comment": "// squares of 4\n"}, "Heuristic": []}, {"nl": {"id": 570, "comment": "//package global14;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 571, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 572, "comment": "//package codeforces;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 574, "comment": "/**/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 574, "comment": "/*/\n\t\tScanner sc = new Scanner(new BufferedReader(new InputStreamReader(new FileInputStream(\"src/b.in\"))));\n\t\t/**/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 575, "comment": "//    \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\tstatic class Line{\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t\tPoint p1;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 575, "comment": "//\t\tPoint p2;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 575, "comment": "//\t\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 575, "comment": "//\t\tLine(Point p1,Point p2){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t\t\tthis.p1=p1;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 575, "comment": "//\t\t\tthis.p2=p2;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 575, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 575, "comment": "//\t\t\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 575, "comment": "//\t    static Boolean intersects(Line l1,Line l2) \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t    { \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t    \tPoint A=l1.p1, B=l1.p2,C=l2.p1,D=l2.p2;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t    \t\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t        long a1 = B.y - A.y; \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t        long b1 = A.x - B.x; \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t        long c1 = a1*(A.x) + b1*(A.y); \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t       \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t        long a2 = D.y - C.y; \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t        long b2 = C.x - D.x; \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t        long c2 = a2*(C.x)+ b2*(C.y); \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t       \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t        long determinant = a1*b2 - a2*b1; \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t       \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t        if (determinant == 0) \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t        { \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t            return false; \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t        } \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t        else\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t        { \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t            long x = (b2*c1 - b1*c2)/determinant; \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t            long y = (a1*c2 - a2*c1)/determinant; \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t            \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t            if(x>=0 || x<=1) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t            \treturn true;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t            return false;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t        } \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t    \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t    static Point getSlope(Line l) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t    \tlong num=l.p1.y - l.p2.y;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t    \tlong den=l.p1.x - l.p2.x;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t    \t\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t    \tlong gcd=gcd(num,den);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t    \treturn new Point(num/gcd,den/gcd);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 575, "comment": "//\t\tprivate static long gcd(long a, long b) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t\t\treturn b==0?a:gcd(b,a%b);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 575, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 575, "comment": "//\t    \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 575, "comment": "//        ArrayList<Integer> prime=getPrimeSieve();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//        \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//        \tint x=sc.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//        \tInteger[] arr=new Integer[n];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//        \tlong sum=0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//        \t\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//        \tfor(int i=0;i<n;i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//        \t\tarr[i]=sc.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//        \t\tsum+=arr[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//        \t}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//        \t\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//        \tif(sum==x) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//    \t\t\tbw.append(\"NO\\n\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//    \t\t\tcontinue outer;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//        \t}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 575, "comment": "//        \tArrays.sort(arr,Collections.reverseOrder());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//        \t\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//        \tsum=0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//        \tfor(int i=0;i<n-1;i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//        \t\tsum+=arr[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//        \t\t\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//        \t\tif(sum==x) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//        \t\t\tint temp=arr[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//        \t\t\tarr[i+1]=arr[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//        \t\t\tarr[i]=temp;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//            \t\tsum=sum-arr[i+1]+arr[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//        \t\t}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//        \t}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//        \tbw.append(\"YES\\n\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//        \tfor(int i=0;i<n;i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//        \t\tbw.append(arr[i]+\" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//        \t}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//        \tbw.append(\"\\n\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//        \tbw.append(\"Case #\"+po+\": \"+0+\"\\n\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t\t\tSystem.out.println(\"prev= \"+prev+\" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "//\t\t\t\tSystem.out.println(\"cur= \"+cur+\" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 575, "comment": "// x is the key or target value\n"}, "Heuristic": []}, {"nl": {"id": 575, "comment": "//\t\t\tSystem.out.print(z[i]+\" \");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 575, "comment": "//\t\tSystem.out.println();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 576, "comment": "//sort(arr,0,n-1);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 576, "comment": "//sorting the two halves using a tmp array\n"}, "Heuristic": []}, {"nl": {"id": 576, "comment": "//Copying the elements of tmp into the main array\n"}, "Heuristic": []}, {"nl": {"id": 576, "comment": "//sort(arr,0,n-1);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 576, "comment": "//sorting the two halves using a tmp array\n"}, "Heuristic": []}, {"nl": {"id": 576, "comment": "//Copying the elements of tmp into the main array\n"}, "Heuristic": []}, {"nl": {"id": 576, "comment": "//        boolean sq[]=new boolean[1000000005];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 576, "comment": "//        for(int i=1;i*i<sq.length;i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 576, "comment": "//            sq[i*i]=true;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 576, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 577, "comment": "//-----------MyScanner class for faster input----------\n"}, "Heuristic": []}, {"nl": {"id": 578, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author prakharjain\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 579, "commentn"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 580, "comment": "/*\nKeep solving problems.\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 583, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 584, "comment": "// package CF;\n"}, "Heuristic": []}, {"nl": {"id": 585, "comment": "//package contests.CF495;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 590, "comment": "// Scanner scan = new Scanner(System.in);\n"}, "Heuristic": []}, {"nl": {"id": 590, "comment": "// PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\n"}, "Heuristic": []}, {"nl": {"id": 590, "comment": "// int n = Integer.parseInt(bf.readLine());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 590, "comment": "// int[] a = new int[n]; for(int i=0; i<n; i++) a[i] = Integer.parseInt(st.nextToken());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 590, "comment": "// int n = scan.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 590, "comment": "// out.close(); System.exit(0);\n"}, "Heuristic": []}, {"nl": {"id": 591, "comment": "//        FastScanner in = new FastScanner(\"input.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 591, "comment": "//        PrintWriter out = new PrintWriter(new FileWriter(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 594, "comment": "/**\n * Built using CHelper plug-in Actual solution is at the top\n *\n * @author MaxHeap\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 595, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 596, "comment": "//            int neg=1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 596, "comment": "//            while(!isWhiteSpace(n))\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 596, "comment": "//            {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 596, "comment": "//                if(n>='0'&&n<='9')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 596, "comment": "//                {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 596, "comment": "//                    integer*=10;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 596, "comment": "//                    integer+=n-'0';\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 596, "comment": "//                    n=scan();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 596, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 596, "comment": "//                else throw new InputMismatchException();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 596, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 596, "comment": "//            return neg*integer;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 597, "comment": "//package que_a;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 597, "comment": "//Enter code here utkarsh\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 597, "comment": "//SHOW_TIME = true;\n"}, "Heuristic": []}, {"nl": {"id": 597, "comment": "//---------- I/O Template ----------\n"}, "Heuristic": []}, {"nl": {"id": 597, "comment": "//no input \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 598, "comment": "//package CodeforcesJava;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 600, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author ankur\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 600, "comment": "/*-*------clare------\n//remeber while comparing 2 non primitive data type not to use ==\n//remember Arrays.sort for primitive data has worst time case complexity of 0(n^2) bcoz it uses quick sort\n//again silly mistakes ,yr kb tk krta rhega ye mistakes\n//try to write simple codes ,break it into simple things\n//knowledge>rating\n        /*\n        public class Main\n        implements Runnable{\n    public static void main(String[] args) {\n        new Thread(null,new Main(),\"Main\",1<<26).start();\n\n    }\n    public void run() {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();//chenge the name of task\n        solver.solve(1, in, out);\n        out.close();\n    }\n         */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 600, "comment": "//*-*------clare------\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 600, "comment": "//remeber while comparing 2 non primitive data type not to use ==\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 600, "comment": "//remember Arrays.sort for primitive data has worst time case complexity of 0(n^2) bcoz it uses quick sort\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 600, "comment": "//again silly mistakes ,yr kb tk krta rhega ye mistakes\n"}, "Heuristic": ["H1", "H4"]}, {"nl": {"id": 600, "comment": "//try to write simple codes ,break it into simple things\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 600, "comment": "//knowledge>rating\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 600, "comment": "//chenge the name of task\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 601, "comment": "//\t\t\t\tSystem.out.println(\"hello\"+\" \"+i+\" \"+(i+1));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 601, "comment": "//\t\t\t\tSystem.out.println(\"hello2\"+\" \"+i+\" \"+(i+1));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 601, "comment": "//19 91 991 919 199\n"}, "Heuristic": []}, {"nl": {"id": 602, "comment": "//\t\tBufferedReader in;\n"}, "Heuristic": []}, {"nl": {"id": 602, "comment": "//\t\tuncomment below line to change to BufferedReader\n"}, "Heuristic": []}, {"nl": {"id": 602, "comment": "//\t\tpublic Solver(BufferedReader in, PrintWriter out)\n"}, "Heuristic": []}, {"nl": {"id": 602, "comment": "//\t\tuncomment below line to change to BufferedReader\n"}, "Heuristic": []}, {"nl": {"id": 602, "comment": "//\t\tBufferedReader in = new BufferedReader(new InputStreamReader(inputStream));\n"}, "Heuristic": []}, {"nl": {"id": 604, "comment": "/******************************************\n*    AUTHOR:         AMAN KUMAR SINGH        *\n*    INSTITUITION:   KALYANI GOVERNMENT ENGINEERING COLLEGE  *\n******************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 604, "comment": "//package math_codet;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 605, "comment": "/**\n * @author khokharnikunj8\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 607, "comment": "/*\n\t\t * try { InputReader(new FileInputStream(\"C:\\\\Users\\\\hardik\\\\Desktop\\\\in.txt\"));\n\t\t * } catch(FileNotFoundException e) {}\n\t\t */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 607, "comment": "//debug(c);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 607, "comment": "//this.set = set1;\n"}, "Heuristic": []}, {"nl": {"id": 607, "comment": "//System.out.println(l+\" \"+r+\" \"+tree[id].l+\" \"+tree[id].r+\" \"+tree[id].ans);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 607, "comment": "//shift(id,l,r);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 607, "comment": "//System.out.println(l+\" \"+r+\" \"+x);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 607, "comment": "//\t\t\t\tlazy[id] %= 2;\n"}, "Heuristic": []}, {"nl": {"id": 607, "comment": "//shift(id);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 607, "comment": "//switchNode(tree[(id<<1)+2]);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 607, "comment": "//new Main().solve();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 607, "comment": "// ans_sb = new StringBuilder();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 607, "comment": "// System.out.println(ans_sb);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 615, "comment": "//rand = new Random(42);\n"}, "Heuristic": []}, {"nl": {"id": 616, "comment": "//   pw.println(ans);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 616, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 619, "comment": "// out = new PrintWriter(fileName + \".out\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 619, "comment": "// br = new BufferedReader(new FileReader(fileName + \".in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 619, "comment": "// out = new PrintWriter(fileName + \".out\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 620, "comment": "/*set.add(a[0]-d);\n\t\t\tif(Math.abs(a[0]+d-a[1])>=d)\n\t\t\t{\n\t\t\t\tans++;\n\t\t\t\tset.add(a[0]+d);\n\t\t\t}\n\t\t\t\n\t\t\t*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 620, "comment": "/*public boolean equals(Object o) {\n\t\t\t\tif (o instanceof pair) {\n\t\t\t\t\tpair p = (pair) o;\n\t\t\t\t\treturn p.x == x && p.y == y;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tpublic int hashCode() {\n\t\t\t\treturn new Long(x).hashCode() * 31 + new Long(y).hashCode();\n\t\t\t}\n\t\t\t\n\n\t\t}\n\n\t\t\n\t\t\n\t\t\n\t\n\t\t/*static class node implements Comparable<node>\n \n\t\t{\n\t\t\tInteger x, y, z;\n\t\t\tnode(int x,int y, int z)\n\t\t\t{\n\t\t\t\tthis.x=x;\n\t\t\t\tthis.y=y;\n\t\t\t\tthis.z=z;\n\t\t\t}\n\t\t\t\n\t\t\tpublic int compareTo(pair o) {\n\t\t\t\tint result = x.compareTo(o.x);\n\t\t\t\tif(result==0)\n\t\t\t\t\tresult = y.compareTo(o.y);\n\t\t\t\tif(result==0)\n\t\t\t\t\tresult = z.compareTo(z); \n\t\t\t\treturn result;\n\t\t\t}\n \n\t\t\t@Override\n\t\t\tpublic int compareTo(node o) {\n\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\treturn 0;\n\t\t\t}  \n\t\t}\n\t\t*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 620, "comment": "//Code starts..\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 620, "comment": "//ans++;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 620, "comment": "//pw.println(a[i]+\" \"+a[i-1]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 620, "comment": "//pw.println(dis);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 620, "comment": "//Code ends....\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 620, "comment": "//for(int i=0; i<n; i++)\n"}, "Heuristic": []}, {"nl": {"id": 620, "comment": "//System.out.print(pans[i]+\" \");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 620, "comment": "//\tSystem.out.println(a[rl]+\" \"+n);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 620, "comment": "// Return result for n\n"}, "Heuristic": []}, {"nl": {"id": 620, "comment": "// Calculate  value of Binomial Coefficient in bottom up manner\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 620, "comment": "// Base Cases\n"}, "Heuristic": []}, {"nl": {"id": 620, "comment": "// Calculate value using previosly stored values\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 620, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 621, "comment": "// write your code here\n"}, "Heuristic": []}, {"nl": {"id": 623, "comment": "//package round495;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 623, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 624, "comment": "/*\n * \n * @Author  Ajudiya_13(Bhargav Girdharbhai Ajudiya)\n * Dhirubhai Ambani Institute of Information And Communication Technology \n * \n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 624, "comment": "//System.out.println(ans);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 625, "comment": "// line length\n"}, "Heuristic": []}, {"nl": {"id": 626, "comment": "//////////////////////    SOLUTION   SOLUTION  SOLUTION    //////////////////////////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 626, "comment": "///////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 626, "comment": "////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 626, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 627, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Asgar Javadov\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 632, "comment": "//package;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 632, "comment": "//if (temp=='\\n')\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 632, "comment": "//break;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 632, "comment": "//if (temp==' ' || temp==-1)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 632, "comment": "//break;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 634, "comment": "//while (n-- > 0)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 634, "comment": "//{\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 634, "comment": "//}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 635, "comment": "//package round25;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 637, "comment": "/**\n     * @param args\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 641, "comment": "//System.out.println(bf+\"\"+bs+\"\"+bt);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 642, "comment": "/*\n         * try { // br = new BufferedReader(new FileReader(\"input.txt\")); pw =\n         * new PrintWriter(\"output.txt\"); } catch (FileNotFoundException e) {\n         * e.printStackTrace(); }\n         */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 642, "comment": "// br = new BufferedReader(new FileReader(\"input.txt\")); pw =\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 643, "comment": "//args;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 644, "comment": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 644, "comment": "/**\n *\n * @author Saransh\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 644, "comment": "/**\n     * @param args the command line arguments\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 644, "comment": "// TODO code application logic here\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 650, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 651, "comment": "// -------------- Input/Output routines below ---------------//\n"}, "Heuristic": []}, {"nl": {"id": 651, "comment": "// String problem = this.getClass().getName();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 651, "comment": "// System.exit(1);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 654, "comment": "//package codeforces.br25;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 656, "comment": "//input = new BufferedReader(new FileReader(file + \".in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 659, "comment": "/*\n         * Determines what I should be looking for\n         * Return 0 if even\n         * Return 1 if odd\n         */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 660, "comment": "/**\n *\n * @author Ronak\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 660, "comment": "/**\n     * @param args the command line arguments\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 660, "comment": "// TODO code application logic here\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 662, "comment": "//System.setIn(new FileInputStream(\"1\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 667, "comment": "/**\n * @author Egor Kulikov (egor@egork.net)\n *         Created on 14.03.2010\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 667, "comment": "//\t\tnew Template().run();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 667, "comment": "//\t\tString id = getClass().getName().toLowerCase();\n"}, "Heuristic": []}, {"nl": {"id": 667, "comment": "//\t\ttry {\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 667, "comment": "//\t\t\tSystem.setIn(new FileInputStream(id + \".in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 667, "comment": "//\t\t\tSystem.setOut(new PrintStream(new FileOutputStream(id + \".out\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 667, "comment": "//\t\t} catch (FileNotFoundException e) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 667, "comment": "//\t\t\tthrow new RuntimeException();\n"}, "Heuristic": []}, {"nl": {"id": 667, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 667, "comment": "//        int numTests = in.readInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 667, "comment": "//        for (int testNumber = 0; testNumber < numTests; testNumber++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 667, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 671, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 674, "comment": "/**\n\t * @param args\n\t * @throws IOException \n\t * @throws NumberFormatException \n\t */"}, "Heuristic": ["H1"]}, {"nl": {"id": 674, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 676, "comment": "/**\n * Created by IntelliJ IDEA.\n * User: dev_il\n * Date: 03.08.2010\n * Time: 0:59:04\n * To change this template use File | Settings | File Templates.\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 676, "comment": "// in = new BufferedReader(new FileReader(new File(\"input.txt\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 676, "comment": "// out = new PrintWriter(new File(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 676, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 679, "comment": "//import java.util.Scanner;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 679, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 679, "comment": "//System.out.println(i);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 680, "comment": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 680, "comment": "/**\n *\n * @author parpaorsa\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 680, "comment": "//package newpackage;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 683, "comment": "/*\n * Created on 17.05.2019\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 683, "comment": "/**\n * @author Wolfgang Weck\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 684, "comment": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 684, "comment": "/**\n *\n * @author madis\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 686, "comment": "/**\n * @author Egor Kulikov (kulikov@devexperts.com)\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 687, "comment": "//\tstatic Scanner in;\n"}, "Heuristic": []}, {"nl": {"id": 687, "comment": "//\t\tin = new Scanner(System.in);\n"}, "Heuristic": []}, {"nl": {"id": 689, "comment": "/**\n * @author def\n * @version 1.0\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 690, "comment": "//BufferedReader in = new BufferedReader(new StringReader(data));\n"}, "Heuristic": []}, {"nl": {"id": 691, "comment": "//--------------------- IO stuffs ---------------------\n"}, "Heuristic": []}, {"nl": {"id": 692, "comment": "// long time = System.currentTimeMillis();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 692, "comment": "// System.err.println(System.currentTimeMillis() - time);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 693, "comment": "/*\n         * try { br = new BufferedReader(new FileReader(\"knapsackfixed.in\")); pw\n         * = new PrintWriter(\"knapsackfixed.out\"); } catch\n         * (FileNotFoundException e) { e.printStackTrace(); }\n         */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 694, "comment": "//\t\t\tin = new BufferedReader(new FileReader(new File(\"input.txt\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 694, "comment": "//\t\t\tout = new PrintWriter(new File(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 697, "comment": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 697, "comment": "/**\n *\n * @author madi\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 697, "comment": "/*if (number == 26) {\n            \tnumber = -1;\n            }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 698, "comment": "//Stephen Fulwider\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 698, "comment": "//Parser class for efficient input in Java\n"}, "Heuristic": []}, {"nl": {"id": 698, "comment": "//  Use just as you would Scanner.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 698, "comment": "//  Make sure any method that uses this class throws Exception.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 698, "comment": "//  Email any bugs or problems found to knightry@gmail.com\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 698, "comment": "// read a string into an ALREADY ALLOCATED array, returns the number of characters read\n"}, "Heuristic": []}, {"nl": {"id": 698, "comment": "// print int\n"}, "Heuristic": []}, {"nl": {"id": 698, "comment": "// print long\n"}, "Heuristic": []}, {"nl": {"id": 698, "comment": "// print double\n"}, "Heuristic": []}, {"nl": {"id": 698, "comment": "// print char\n"}, "Heuristic": []}, {"nl": {"id": 698, "comment": "// print String\n"}, "Heuristic": []}, {"nl": {"id": 698, "comment": "//  InputStream stream = new FileInputStream(\"in\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 698, "comment": "// PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n"}, "Heuristic": []}, {"nl": {"id": 698, "comment": "// PrintWriter err = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.err)));\n"}, "Heuristic": []}, {"nl": {"id": 698, "comment": "// this works fine now, i think\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 700, "comment": "/**\n * Created by IntelliJ IDEA.\n * User: Nick\n * Date: 08.08.2010\n * Time: 20:44:02\n * To change this template use File | Settings | File Templates.\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 701, "comment": "//br = new BufferedReader(new InputStreamReader(System.in, \"ISO-8859-1\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 701, "comment": "//out.println(r+\" \"+c);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 702, "comment": "// BC23\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 702, "comment": "// R23C55\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 702, "comment": "//\t\tin = new Scanner(new BufferedReader(new InputStreamReader(new FileInputStream(\"input.txt\"))));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 702, "comment": "//\t\tout = new PrintWriter(new FileWriter(new File(\"output.txt\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 702, "comment": "//\t\tin = new Scanner(new StringReader(\"2\\nR23C55\\nR26C26\\nZ26\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 702, "comment": "//\t\tSystem.setOut(new PrintStream(new BufferedOutputStream(System.out)));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 702, "comment": "//\t\tint n = 1;\n"}, "Heuristic": []}, {"nl": {"id": 702, "comment": "//\t\t\tSystem.err.printf(\"%04d/%04d %7d%n\", i, n, System.currentTimeMillis() - t);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 709, "comment": "/*\n10\nR1C1\nA1\nR1C26\nZ1\nR1C27\nAA1\nR1C28\nAB1\nR1C52\nAZ1\n\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 709, "comment": "// \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd 1 \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 709, "comment": "// \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd 2 \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 710, "comment": "/**\n * Date: 19.02.2010\n * Time: 14:56:28\n *\n * @author Sergey Bankevich (Sergey.Bankevich@gmail.com)\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 710, "comment": "/*for ( int i = 1; i <= 100; i ++ ) {\n            for ( int j = 1; j <= 100; j ++ ) {\n                String s = \"R\" + i + \"C\" + j;\n            for ( char j = 'A'; j <= 'Z'; j ++ ) {\n            String s = j + \"\" + i;\n                System.out.println( s );*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 711, "comment": "/**\n\t * @param args\n\t * @throws IOException \n\t */"}, "Heuristic": ["H1"]}, {"nl": {"id": 711, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 711, "comment": "//\t\tBufferedReader input = new BufferedReader(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 711, "comment": "//\t\tPrintWriter output = new PrintWriter(new FileWriter(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 712, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 712, "comment": "/**\n\t * Exit with an error due to unexpected standard input. \n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 713, "comment": "//2\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 713, "comment": "//R23C55\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 713, "comment": "//BC23\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 714, "comment": "//first rep\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 716, "comment": "// System.out.println(\"decoding CR: \" + s + \"...\" + a[0] + \", \" + a[1]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 716, "comment": "// System.out.println(\"decoding RC: \" + s + \"...\" + a[0] + \", \" + a[1]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 718, "comment": "//--------------------- IO stuffs ---------------------\n"}, "Heuristic": []}, {"nl": {"id": 720, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 721, "comment": "// by kotb\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 722, "comment": "/*if (coef!=1)*/"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 722, "comment": "/*if (len==0)*/"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 722, "comment": "//import java.math.*;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 722, "comment": "//import static java.lang.Math.*;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 722, "comment": "//import static java.util.Arrays.*;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 722, "comment": "//1-checker 2-console\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 722, "comment": "//if (args.length==2) open(args[0], args[1], true, false); else open (\"input.txt\", \"output.txt\", true, false);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 722, "comment": "//else col += (Arrays.binarySearch(alph, c[index]))*coef;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 722, "comment": "//out.print(tmp.length);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 722, "comment": "//row = Integer.parseInt(tmp[1]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 722, "comment": "//else temp[len]=alph[index-1];\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 724, "comment": "//\t\tgen2();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 724, "comment": "//\t\tif (true) return;\n"}, "Heuristic": []}, {"nl": {"id": 724, "comment": "//\t\tSystem.setOut(new PrintStream(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 725, "comment": "//\t\tString ret = \"\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 725, "comment": "//\t\tStringBuffer buff = new StringBuffer();\n"}, "Heuristic": []}, {"nl": {"id": 725, "comment": "//\t\twhile (c != 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 725, "comment": "//\t\t\tint m = c%26;\n"}, "Heuristic": []}, {"nl": {"id": 725, "comment": "//\t\t\tchar ch = (char)(m+'A'-1);\n"}, "Heuristic": []}, {"nl": {"id": 725, "comment": "//\t\t\tbuff.append(ch);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 725, "comment": "//\t\t\tc /= 26;\n"}, "Heuristic": []}, {"nl": {"id": 725, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 725, "comment": "//\t\treturn buff.reverse().toString() + r;\n"}, "Heuristic": []}, {"nl": {"id": 726, "comment": "/**\n * Problem solution template.\n * @author Andrew Porokhin, andrew.porokhin@gmail.com\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 726, "comment": "// TODO: Write your code here ...\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 730, "comment": "//    a1[j]=a[i]/2;a2[j++]=a[i]-a[i]/2;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 730, "comment": "//int[] ans=new int[2*n];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 736, "comment": "/*\n        inputCopy\n5 3\nxyabd\noutputCopy\n29\ninputCopy\n7 4\nproblem\noutputCopy\n34\ninputCopy\n2 2\nab\noutputCopy\n-1\ninputCopy\n12 1\nabaabbaaabbb\noutputCopy\n1\n        */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 736, "comment": "/*\n\u2192Judgement Protocol\nTest: #1, time: 77 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n5 3\nxyabd\nOutput\n29\nAnswer\n29\nChecker Log\nok 1 number(s): \"29\"\nTest: #2, time: 78 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n7 4\nproblem\nOutput\n34\nAnswer\n34\nChecker Log\nok 1 number(s): \"34\"\nTest: #3, time: 139 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n2 2\nab\nOutput\n-1\nAnswer\n-1\nChecker Log\nok 1 number(s): \"-1\"\nTest: #4, time: 124 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n12 1\nabaabbaaabbb\nOutput\n1\nAnswer\n1\nChecker Log\nok 1 number(s): \"1\"\nTest: #5, time: 124 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n50 13\nqwertyuiopasdfghjklzxcvbnmaaaaaaaaaaaaaaaaaaaaaaaa\nOutput\n169\nAnswer\n169\nChecker Log\nok 1 number(s): \"169\"\nTest: #6, time: 108 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n50 14\nqwertyuiopasdfghjklzxcvbnmaaaaaaaaaaaaaaaaaaaaaaaa\nOutput\n-1\nAnswer\n-1\nChecker Log\nok 1 number(s): \"-1\"\nTest: #7, time: 93 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n1 1\na\nOutput\n1\nAnswer\n1\nChecker Log\nok 1 number(s): \"1\"\nTest: #8, time: 108 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n50 1\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nOutput\n1\nAnswer\n1\nChecker Log\nok 1 number(s): \"1\"\nTest: #9, time: 77 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n50 2\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nOutput\n-1\nAnswer\n-1\nChecker Log\nok 1 number(s): \"-1\"\nTest: #10, time: 92 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n13 13\nuwgmkyqeiaocs\nOutput\n169\nAnswer\n169\nChecker Log\nok 1 number(s): \"169\"\nTest: #11, time: 124 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n13 13\nhzdxpbfvrltnj\nOutput\n182\nAnswer\n182\nChecker Log\nok 1 number(s): \"182\"\nTest: #12, time: 93 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n1 1\nn\nOutput\n14\nAnswer\n14\nChecker Log\nok 1 number(s): \"14\"\nTest: #13, time: 92 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n10 8\nsmzeblyjqw\nOutput\n113\nAnswer\n113\nChecker Log\nok 1 number(s): \"113\"\nTest: #14, time: 78 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n20 20\ntzmvhskkyugkuuxpvtbh\nOutput\n-1\nAnswer\n-1\nChecker Log\nok 1 number(s): \"-1\"\nTest: #15, time: 109 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n30 15\nwjzolzzkfulwgioksfxmcxmnnjtoav\nOutput\n-1\nAnswer\n-1\nChecker Log\nok 1 number(s): \"-1\"\nTest: #16, time: 93 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n40 30\nxumfrflllrrgswehqtsskefixhcxjrxbjmrpsshv\nOutput\n-1\nAnswer\n-1\nChecker Log\nok 1 number(s): \"-1\"\nTest: #17, time: 124 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n50 31\nahbyyoxltryqdmvenemaqnbakglgqolxnaifnqtoclnnqiabpz\nOutput\n-1\nAnswer\n-1\nChecker Log\nok 1 number(s): \"-1\"\nTest: #18, time: 124 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n10 7\niuiukrxcml\nOutput\n99\nAnswer\n99\nChecker Log\nok 1 number(s): \"99\"\nTest: #19, time: 109 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n38 2\nvjzarfykmrsrvwbwfwldsulhxtykmjbnwmdufa\nOutput\n5\nAnswer\n5\nChecker Log\nok 1 number(s): \"5\"\nTest: #20, time: 77 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n12 6\nfwseyrarkwcd\nOutput\n61\nAnswer\n61\nChecker Log\nok 1 number(s): \"61\"\nTest: #21, time: 109 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n2 2\nac\nOutput\n4\nAnswer\n4\nChecker Log\nok 1 number(s): \"4\"\nTest: #22, time: 108 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n1 1\nc\nOutput\n3\nAnswer\n3\nChecker Log\nok 1 number(s): \"3\"\nTest: #23, time: 124 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n2 2\nad\nOutput\n5\nAnswer\n5\nChecker Log\nok 1 number(s): \"5\"\nTest: #24, time: 77 ms., memory: 0 KB, exit code: 0, checker exit code: 1, verdict: WRONG_ANSWER\nInput\n2 1\nac\nOutput\n-1\nAnswer\n1\nChecker Log\nwrong answer 1st number\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 736, "comment": "//use pw.println() not pw.write();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 736, "comment": "//Do not forget to write it after every program return statement !!\n"}, "Heuristic": []}, {"nl": {"id": 737, "comment": "/*\n        inputCopy\n5 3\nxyabd\noutputCopy\n29\ninputCopy\n7 4\nproblem\noutputCopy\n34\ninputCopy\n2 2\nab\noutputCopy\n-1\ninputCopy\n12 1\nabaabbaaabbb\noutputCopy\n1\n        */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 737, "comment": "/*\n\u2192Judgement Protocol\nTest: #1, time: 77 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n5 3\nxyabd\nOutput\n29\nAnswer\n29\nChecker Log\nok 1 number(s): \"29\"\nTest: #2, time: 78 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n7 4\nproblem\nOutput\n34\nAnswer\n34\nChecker Log\nok 1 number(s): \"34\"\nTest: #3, time: 139 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n2 2\nab\nOutput\n-1\nAnswer\n-1\nChecker Log\nok 1 number(s): \"-1\"\nTest: #4, time: 124 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n12 1\nabaabbaaabbb\nOutput\n1\nAnswer\n1\nChecker Log\nok 1 number(s): \"1\"\nTest: #5, time: 124 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n50 13\nqwertyuiopasdfghjklzxcvbnmaaaaaaaaaaaaaaaaaaaaaaaa\nOutput\n169\nAnswer\n169\nChecker Log\nok 1 number(s): \"169\"\nTest: #6, time: 108 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n50 14\nqwertyuiopasdfghjklzxcvbnmaaaaaaaaaaaaaaaaaaaaaaaa\nOutput\n-1\nAnswer\n-1\nChecker Log\nok 1 number(s): \"-1\"\nTest: #7, time: 93 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n1 1\na\nOutput\n1\nAnswer\n1\nChecker Log\nok 1 number(s): \"1\"\nTest: #8, time: 108 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n50 1\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nOutput\n1\nAnswer\n1\nChecker Log\nok 1 number(s): \"1\"\nTest: #9, time: 77 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n50 2\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nOutput\n-1\nAnswer\n-1\nChecker Log\nok 1 number(s): \"-1\"\nTest: #10, time: 92 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n13 13\nuwgmkyqeiaocs\nOutput\n169\nAnswer\n169\nChecker Log\nok 1 number(s): \"169\"\nTest: #11, time: 124 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n13 13\nhzdxpbfvrltnj\nOutput\n182\nAnswer\n182\nChecker Log\nok 1 number(s): \"182\"\nTest: #12, time: 93 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n1 1\nn\nOutput\n14\nAnswer\n14\nChecker Log\nok 1 number(s): \"14\"\nTest: #13, time: 92 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n10 8\nsmzeblyjqw\nOutput\n113\nAnswer\n113\nChecker Log\nok 1 number(s): \"113\"\nTest: #14, time: 78 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n20 20\ntzmvhskkyugkuuxpvtbh\nOutput\n-1\nAnswer\n-1\nChecker Log\nok 1 number(s): \"-1\"\nTest: #15, time: 109 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n30 15\nwjzolzzkfulwgioksfxmcxmnnjtoav\nOutput\n-1\nAnswer\n-1\nChecker Log\nok 1 number(s): \"-1\"\nTest: #16, time: 93 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n40 30\nxumfrflllrrgswehqtsskefixhcxjrxbjmrpsshv\nOutput\n-1\nAnswer\n-1\nChecker Log\nok 1 number(s): \"-1\"\nTest: #17, time: 124 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n50 31\nahbyyoxltryqdmvenemaqnbakglgqolxnaifnqtoclnnqiabpz\nOutput\n-1\nAnswer\n-1\nChecker Log\nok 1 number(s): \"-1\"\nTest: #18, time: 124 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n10 7\niuiukrxcml\nOutput\n99\nAnswer\n99\nChecker Log\nok 1 number(s): \"99\"\nTest: #19, time: 109 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n38 2\nvjzarfykmrsrvwbwfwldsulhxtykmjbnwmdufa\nOutput\n5\nAnswer\n5\nChecker Log\nok 1 number(s): \"5\"\nTest: #20, time: 77 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n12 6\nfwseyrarkwcd\nOutput\n61\nAnswer\n61\nChecker Log\nok 1 number(s): \"61\"\nTest: #21, time: 109 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n2 2\nac\nOutput\n4\nAnswer\n4\nChecker Log\nok 1 number(s): \"4\"\nTest: #22, time: 108 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n1 1\nc\nOutput\n3\nAnswer\n3\nChecker Log\nok 1 number(s): \"3\"\nTest: #23, time: 124 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK\nInput\n2 2\nad\nOutput\n5\nAnswer\n5\nChecker Log\nok 1 number(s): \"5\"\nTest: #24, time: 77 ms., memory: 0 KB, exit code: 0, checker exit code: 1, verdict: WRONG_ANSWER\nInput\n2 1\nac\nOutput\n-1\nAnswer\n1\nChecker Log\nwrong answer 1st number\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 737, "comment": "//use pw.println() not pw.write();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 737, "comment": "//Do not forget to write it after every program return statement !!\n"}, "Heuristic": []}, {"nl": {"id": 738, "comment": "//sc= new Scanner(System.in);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 739, "comment": "/**\n * Created by Aminul on 3/14/2019.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 740, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 741, "comment": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 741, "comment": "/**\n *\n * @author Ahmed\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 741, "comment": "/**\n     * @param args the command line arguments\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 741, "comment": "// TODO code application logic here\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 743, "comment": "//if (i<11)\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 743, "comment": "//System.out.println(i +\" is \"+dp[i]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 744, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 745, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 746, "comment": "// one\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 746, "comment": "// zero\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 746, "comment": "//\t\t\t\tSystem.err.println(i+1);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 748, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Niyaz Nigmatullin\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 748, "comment": "//            if (isEOF && ret < 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 748, "comment": "//                throw new InputMismatchException();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 748, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 748, "comment": "//            isEOF = ret == -1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 749, "comment": "// solution goes here\n"}, "Heuristic": []}, {"nl": {"id": 749, "comment": "// binary search\n"}, "Heuristic": []}, {"nl": {"id": 749, "comment": "// infinite??\n"}, "Heuristic": ["H2", "H12"]}, {"nl": {"id": 750, "comment": "/*\n * And now I wonder if I should delete these comments cause they might throw me off. \n * Lol who cares though?\n */"}, "Heuristic": ["H2", "H7", "H12"]}, {"nl": {"id": 750, "comment": "//\t\t\tSystem.out.println(i + \" \" + j);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 750, "comment": "//\t\t\tSystem.out.println(freq.toString());\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 750, "comment": "//\t\t\tSystem.out.println(curTypes);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 750, "comment": "//\t\t\tSystem.out.println();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 750, "comment": "//\t\t\t\tSystem.out.println(Freq);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 750, "comment": "//\t\tif(curTypes == difTypes) min = Math.min(min, j-i);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 751, "comment": "/*int a[]=new int[n];\n    \tfor(int i=0;i<n;i++)\n    \t{\n    \t\ta[i]=in.readInt();\n    \t}*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 751, "comment": "/*int a[]=new int[n];\n\tfor(int i=0;i<n;i++)\n\t{\n\t\ta[i]=Integer.parseInt(l[i]);\n\t}*/"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 751, "comment": "//int t=in.readInt();\n"}, "Heuristic": []}, {"nl": {"id": 751, "comment": "//while(t-->0)\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 751, "comment": "//{\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 751, "comment": "//long n=in.readLong();\n"}, "Heuristic": []}, {"nl": {"id": 751, "comment": "//}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 751, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 751, "comment": "//return 0;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 751, "comment": "//BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 751, "comment": "//StringBuilder sb=new StringBuilder(\"\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 751, "comment": "//InputReader in = new InputReader(System.in);\n"}, "Heuristic": []}, {"nl": {"id": 751, "comment": "//PrintWriter pw=new PrintWriter(System.out);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 751, "comment": "//String line=br.readLine().trim();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 751, "comment": "//int t=Integer.parseInt(br.readLine());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 751, "comment": "//\twhile(t-->0)\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 751, "comment": "//{\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 751, "comment": "//int n=Integer.parseInt(br.readLine());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 751, "comment": "//long n=Long.parseLong(br.readLine());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 751, "comment": "//String l[]=br.readLine().split(\" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 751, "comment": "//int m=Integer.parseInt(l[0]);\n"}, "Heuristic": []}, {"nl": {"id": 751, "comment": "//int k=Integer.parseInt(l[1]);\n"}, "Heuristic": []}, {"nl": {"id": 751, "comment": "//String l[]=br.readLine().split(\" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 751, "comment": "//l=br.readLine().split(\" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 751, "comment": "//System.out.println(\" \");\t     \t\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 751, "comment": "//}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 752, "comment": "// got all, move left\n"}, "Heuristic": []}, {"nl": {"id": 752, "comment": "// advance r\n"}, "Heuristic": []}, {"nl": {"id": 753, "comment": "/*\n\t\tint[] currentRightMost = new int[CH_NUM];\n\t\tArrays.fill(currentRightMost, -1);\n\t\tint[][] next = new int[n+1][CH_NUM];\n\t\tfor (int i = 0; i < n + 1; i++) {\n\t\t\tArrays.fill(next[i], 1 << 30);\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tint idx = charToIndex(s.charAt(i));\n\t\t\tfor (int j = 0; j < CH_NUM; j++) if (exist[j]) {\n\t\t\t\tif (currentRightMost[j] != -1)\n\t\t\t\t\tnext[currentRightMost[j]][idx] = Math.min(next[currentRightMost[j]][idx], i);\n\t\t\t}\n\t\t\tcurrentRightMost[idx] = i;\n\t\t}\n\t\t\n\t\tint res = Integer.MAX_VALUE;\n\t\tfor (int leftMost = 0; leftMost < n; leftMost++) {\n\t\t\tint maxRightMost = 0;\n\t\t\tint idx = charToIndex(s.charAt(leftMost));\n\t\t\tfor (int j = 0; j < CH_NUM; j++) if (exist[j]) {\n\t\t\t\tif (j != idx)\n\t\t\t\t\tmaxRightMost = Math.max(maxRightMost, next[leftMost][j]);\n\t\t\t}\n\t\t\tres = Math.min(res, maxRightMost - leftMost + 1);\n\t\t}\n\t\tSystem.out.println(res);\n\t\t*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 753, "comment": "// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f catch \u30d6\u30ed\u30c3\u30af\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 753, "comment": "//stream = new FileInputStream(new File(\"dec.in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 754, "comment": "/**\n * Created by Omar on 7/22/2016.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 754, "comment": "//        //System.out.println(substring1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 754, "comment": "//        int[] count= new int[52];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 754, "comment": "//        int[] b= new int[52];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 754, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 754, "comment": "//        char k;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 754, "comment": "//        for(int i=0;i<substring1.length();i++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 754, "comment": "//            k=substring1.charAt(i);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 754, "comment": "//            //System.out.println((int)'a');\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 754, "comment": "//            count[(k-'A')]++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 754, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 754, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 754, "comment": "//        for(int i=0;i<52;i++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 754, "comment": "//          b[i]=count[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 754, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 754, "comment": "//            //System.out.println(\"count \"+count[i]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 754, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 754, "comment": "//        int answer=set.size();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 754, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 754, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 754, "comment": "//        for(int i=0;i<input.length();i++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 754, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 754, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 754, "comment": "//        System.out.println(answer);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 754, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 754, "comment": "//System.out.println(\"WAIT\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 754, "comment": "// int max = Integer.MIN_VALUE;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 754, "comment": "//ccc--\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 754, "comment": "//ccc--\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 754, "comment": "// if (ccc != B.length()) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 754, "comment": "// GET.put(test, GET.get(test) - 24);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 754, "comment": "//B-=B;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 754, "comment": "//test += S.charAt(B);\n"}, "Heuristic": []}, {"nl": {"id": 754, "comment": "//}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 754, "comment": "//if(E==0)\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 755, "comment": "/**\n * @author Ran Bi (ran.bi@addepar.com)\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 757, "comment": "// ---->\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 757, "comment": "// <----\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 758, "comment": "/*int l = 0, r = n - 1;\n\t\tfor (l = 0; l < n; ++l) {\n\t\t\tif (Character.isUpperCase(c[l])) {\n\t\t\t\tif (a[26 + c[l] - 'A'] > 1) {\n\t\t\t\t\ta[26 + c[l] - 'A']--;\n\t\t\t\t} else break;\n\t\t\t} else {\n\t\t\t\tif (a[c[l] - 'a'] > 1) {\n\t\t\t\t\ta[c[l] - 'a']--;\n\t\t\t\t} else break;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\tfor (r = n - 1; r >= 0; --r) {\n\t\t\tif (Character.isUpperCase(c[r])) {\n\t\t\t\tif (a[26 + c[r] - 'A'] > 1) {\n\t\t\t\t\ta[26 + c[r] - 'A']--;\n\t\t\t\t} else break;\n\t\t\t} else {\n\t\t\t\tif (a[c[r] - 'a'] > 1) {\n\t\t\t\t\ta[c[r] - 'a']--;\n\t\t\t\t} else break;\n\t\t\t\t\n\t\t\t}\n\t\t}*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 759, "comment": "/*\n * Code Author: Akshay Miterani\n * DA-IICT\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 759, "comment": "//----------My Code----------\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 759, "comment": "//---------------The End------------------\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 759, "comment": "// squaring the base\n"}, "Heuristic": []}, {"nl": {"id": 759, "comment": "// a is greater number\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 759, "comment": "// b is smaller number\n"}, "Heuristic": []}, {"nl": {"id": 760, "comment": "//\tSystem.out.println(ans);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 760, "comment": "// int L ,R ,nowsum ,Ans;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 760, "comment": "//\u627e\u5230LR\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 760, "comment": "//     System.out.println(\"r\"+R);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 761, "comment": "//package baobab;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 762, "comment": "//SWEEP LINE BABYY\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 762, "comment": "//move right\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 763, "comment": "/**\n * Created by ankeet on 7/22/16.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 764, "comment": "/********************************************** a list of common variables **********************************************/"}, "Heuristic": []}, {"nl": {"id": 764, "comment": "/********************************************** a list of common algorithms **********************************************/"}, "Heuristic": []}, {"nl": {"id": 764, "comment": "/**\n     * 1---Get greatest common divisor\n     * @param a :\tfirst number\n     * @param b :\tsecond number\n     * @return\t\tgreatest common divisor\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 764, "comment": "/**\n     * 2---Get the distance from a point to a line\n     * @param x1\tthe x coordinate of one endpoint of the line\n     * @param y1\tthe y coordinate of one endpoint of the line\n     * @param x2\tthe x coordinate of the other endpoint of the line\n     * @param y2\tthe y coordinate of the other endpoint of the line\n     * @param x\t\tthe x coordinate of the point\n     * @param y\t\tthe x coordinate of the point\n     * @return\t\tthe distance from a point to a line\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 764, "comment": "/**\n     * 3---Get the distance from one point to a segment (not a line)\n     * @param x1\tthe x coordinate of one endpoint of the segment\n     * @param y1\tthe y coordinate of one endpoint of the segment\n     * @param x2\tthe x coordinate of the other endpoint of the segment\n     * @param y2\tthe y coordinate of the other endpoint of the segment\n     * @param x\t\tthe x coordinate of the point\n     * @param y\t\tthe y coordinate of the point\n     * @return\t\tthe distance from one point to a segment (not a line)\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 764, "comment": "/**\n     * 4---KMP match, i.e. kmpMatch(\"abcd\", \"bcd\") = 1, kmpMatch(\"abcd\", \"bfcd\") = -1.\n     * @param t:\tString to match.\n     * @param p:\tString to be matched.\n     * @return\t\tif can match, first index; otherwise -1.\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 764, "comment": "/**\n     * 5---Get the hash code of a String\n     * @param\ts:\tinput string\n     * @return\thash code\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 764, "comment": "/**\n     * 6---Get x ^ n % MOD quickly.\n     * @param\tx:\tbase\n     * @param \tn:\ttimes\n     * @return\tx ^ n % MOD\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 764, "comment": "/**\n     * 7---judge if a point is located inside a polygon\n     * @param x0\tthe x coordinate of the point\n     * @param y0\tthe y coordinate of the point\n     * @return true if it is inside the polygon, otherwise false\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 764, "comment": "/*public boolean contains(double x0, double y0)\n\t{\n\t\tint cross = 0;\n\t\tfor(int i = 0;i < n;++i)\n\t\t{\n\t\t\tdouble s = x[i + 1] == x[i] ? 100000000 : (double)(y[i + 1] - y[i]) / (x[i + 1] - x[i]);\n\t\t\tboolean b1 = x[i] <= x0 && x0 < x[i + 1];\n\t\t\tboolean b2 = x[i + 1] <= x0 && x0 < x[i];\n\t\t\tboolean b3 = y0 < s * (x0 - x[i]) + y[i];\n\t\t\tif((b1 || b2) && b3) ++cross;\n\t\t}\n\t\treturn cross % 2 != 0;\n\t}*/"}, "Heuristic": ["H1", "H2", "H7", "H12"]}, {"nl": {"id": 764, "comment": "/**\n     * 8---judge if a point is located on the segment\n     * @param\tx1\tthe x coordinate of one point of the segment\n     * @param\ty1\tthe y coordinate of one point of the segment\n     * @param \tx2\tthe x coordinate of another point of the segment\n     * @param \ty2\tthe y coordinate of another point of the segment\n     * @param\tx\tthe x coordinate of the point\n     * @param \ty\tthe y coordinate of the point\n     * @return\ttrue if it is located on the segment, otherwise false\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 764, "comment": "/**\n     * 9---get the cross product\n     * @param \tp1\tpoint A\n     * @param \tp2\tpoint B\n     * @param \tp\tpoint O\n     * @return\tcross product of OA x OB\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 764, "comment": "/*public long cross(Point p1, Point p2, Point p)\n\t{\n\t\treturn (long)(p1.x - p.x) * (p2.y - p.y) - (long)(p2.x - p.x) * (p1.y - p.y);\n\t}*/"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 764, "comment": "/**\n     * 10---implement topsort and tell if it is possible\n     * @return true if it is possible to implement topsort, otherwise false\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 764, "comment": "/*public boolean topsort()\n\t{\n\t\tQueue<Integer> q = new LinkedList<Integer>();\n\t\tStringBuilder ans = new StringBuilder();\n\t\tint[] in = new int[26];\n\t\tfor(int i = 0;i < 26;++i)\n\t\t{\n\t\t\tif(0 == in[i]) \n\t\t\t{\n\t\t\t\tans.append((char)('a' + i));\n\t\t\t\tq.add(i);\n\t\t\t}\n\t\t}\n\t\twhile(!q.isEmpty())\n\t\t{\n\t\t\tint u = q.poll();\n\t\t\tfor(int i = 0;i < 26;++i)\n\t\t\t{\n\t\t\t\tif(map[u][i])\n\t\t\t\t{\n\t\t\t\t\t--in[i];\n\t\t\t\t\tif(0 == in[i])\n\t\t\t\t\t{\n\t\t\t\t\t\tans.append((char)('a' + i));\n\t\t\t\t\t\tq.add(i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn 26 == ans.length();\n\t}*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 766, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 767, "comment": "/**\n * Created by pallavi on 22/7/16.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 770, "comment": "//System.out.println(\"best: i=\" + i + \" id=\" + id[q.first()]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 770, "comment": "//System.out.println(\"i=\"+i+\" \" +q.toString());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 771, "comment": "/**\n     * Custom buffered reader. Faster than Scanner and BufferedReader + StringTokenizer.\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 771, "comment": "// add s_j\n"}, "Heuristic": []}, {"nl": {"id": 771, "comment": "// contract s_i\n"}, "Heuristic": []}, {"nl": {"id": 773, "comment": "// System.out.println(ci);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 773, "comment": "// System.out.println( seen_all_at - begin + 1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 774, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 774, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 777, "comment": "//     Test.testing();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 780, "comment": "/**\n * Created by Daniil on 5/29/2016.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 780, "comment": "//reader.close();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 782, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 784, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 785, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 787, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 789, "comment": "// \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043f\u0430\u0440\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 789, "comment": "//    out.println(fullCount);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 789, "comment": "//        out.println(\"start = \" + (start+1));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 789, "comment": "//        out.println(\"finish = \" + (finish+1));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 790, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author xwchen\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 793, "comment": "/**\n * @author grozhd\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 797, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Rene\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 798, "comment": "//BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 799, "comment": "// rest at i\n"}, "Heuristic": []}, {"nl": {"id": 799, "comment": "// rest again before n\n"}, "Heuristic": []}, {"nl": {"id": 800, "comment": "// System.out.println(\"me ni hu\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 800, "comment": "// System.out.println(\"me hu\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 801, "comment": "//System.out.println(i+\" \"+size[i%m]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 801, "comment": "//System.out.println(i+\" \"+x+\" \"+y);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 801, "comment": "//System.out.println(idx+\" \"+i);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 802, "comment": "/**\n * @author Don Li\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 804, "comment": "//out.println(lst.get(j)+\"+\"+lst.get(j+1)+\"+\"+1+\"==\"+lst.get(i));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 806, "comment": "//package round17;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 808, "comment": "//System.out.println(nolds);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 808, "comment": "//prime[i] = true iff i is prime, prime[0] = prime[1] = false and i can be from 0 to n (both inclusive)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 808, "comment": "//check for i*i overflow\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 809, "comment": "//\tin =new StreamTokenizer(new BufferedReader(new FileReader(\"input.txt\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 809, "comment": "//  out = new PrintWriter(new FileWriter(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 810, "comment": "//Try to make sum\n"}, "Heuristic": []}, {"nl": {"id": 812, "comment": "//if(n>2)numb.add(2);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 812, "comment": "//System.out.println(j);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 812, "comment": "// System.out.println(numb.get(give)+\"ksjdfskldfgaskldfgasklfgaskldfgaklsfgasdklfgaskldfgaskldfgasdklfg\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 812, "comment": "//System.out.println(counter);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 812, "comment": "//System.out.println(arList[count].get(z));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 812, "comment": "//System.out.println(NUM-1);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 813, "comment": "//System.setIn(new FileInputStream(\"1\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 814, "comment": "//in = new Scanner(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 814, "comment": "//out.println(i);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 815, "comment": "//end public void main()\n"}, "Heuristic": []}, {"nl": {"id": 815, "comment": "//Generating Primes\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 816, "comment": "//input = new BufferedReader(new FileReader(file + \".in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 819, "comment": "//          in = new BufferedReader(new FileReader(filename+\".in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 819, "comment": "//          out = new BufferedWriter(new FileWriter(filename+\".out\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 819, "comment": "//new Thread(null, new Main(), \"1\", 1<<25).start();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 820, "comment": "//System.out.println((n+1)+\" = \"+i+\" + \"+(n-i)+\" + 1\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 821, "comment": "/**\n * @author Egor Kulikov (egor@egork.net)\n *         Created on 14.03.2010\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 821, "comment": "//\t\tnew Template().run();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 821, "comment": "//\t\tString id = getClass().getName().toLowerCase();\n"}, "Heuristic": []}, {"nl": {"id": 821, "comment": "//\t\ttry {\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 821, "comment": "//\t\t\tSystem.setIn(new FileInputStream(id + \".in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 821, "comment": "//\t\t\tSystem.setOut(new PrintStream(new FileOutputStream(id + \".out\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 821, "comment": "//\t\t\tSystem.setIn(new FileInputStream(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 821, "comment": "//\t\t\tSystem.setOut(new PrintStream(new FileOutputStream(\"output.txt\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 821, "comment": "//\t\t} catch (FileNotFoundException e) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 821, "comment": "//\t\t\tthrow new RuntimeException();\n"}, "Heuristic": []}, {"nl": {"id": 821, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 821, "comment": "//        int numTests = in.readInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 821, "comment": "//        for (int testNumber = 0; testNumber < numTests; testNumber++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 821, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 823, "comment": "//BufferedReader in;\n"}, "Heuristic": []}, {"nl": {"id": 823, "comment": "//in = new StreamTokenizer(new BufferedReader(new FileReader(\"input.txt\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 823, "comment": "//out = new PrintWriter(new FileWriter(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 824, "comment": "/**\n     * @param args\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 824, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 826, "comment": "/**\n * Created by HREN_VAM.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 826, "comment": "//in = new BufferedReader(new FileReader(filename + \".in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 826, "comment": "//out = new PrintWriter(new FileWriter(filename + \".out\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 827, "comment": "//\tstatic final String PROBLEM = \"\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 827, "comment": "//\t    for (int i = 0; i < 30; i++) if (p[i]) out.println(i);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 829, "comment": "//                  System.out.println(\"c=\"+c+\", i=\"+p1+\", j=\"+p2);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 830, "comment": "/**\n * Problem solution template.\n * @author Andrew Porokhin, andrew.porokhin@gmail.com\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 830, "comment": "// System.out.printf(\"%d + %d + 1 = %d%n\", primes.get(i - 1), primes.get(i), val);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 830, "comment": "// System.out.printf(\"req: %d actual: %d%n\", k, actualK);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 835, "comment": "//do job\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 839, "comment": "//package codeforces.br17;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 843, "comment": "//public static final String FileName = \"test\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 843, "comment": "//  new Main().run();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 843, "comment": "//br = new BufferedReader(new FileReader(new File(FileName+\".in\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 843, "comment": "//out = new PrintWriter(new BufferedWriter(new FileWriter(FileName+\".out\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 843, "comment": "//in.close();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 843, "comment": "//for (int x:P) out.print(x+\" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 844, "comment": "//       \t\t\tSystem.out.println(pn[i]+\"=\"+pn[j]+\"+\"+pn[j+1]+\"+1\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 847, "comment": "//\t\tSystem.out.println(k);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 849, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 850, "comment": "//        System.err.println(count);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 859, "comment": "//w.println(prefix[i][0]+\" \"+prefix[i][1]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 861, "comment": "/* package whatever; // don't place package name! */"}, "Heuristic": ["H7"]}, {"nl": {"id": 861, "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 861, "comment": "// don't place package name! */\n"}, "Heuristic": []}, {"nl": {"id": 861, "comment": "// your code goes here\n"}, "Heuristic": []}, {"nl": {"id": 862, "comment": "//////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 862, "comment": "//  could be replace with a method, but nah, this is just competitive programming :p\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 863, "comment": "// -- DEBUG switch --\n"}, "Heuristic": []}, {"nl": {"id": 864, "comment": "/*\n\t\tif ( k == 1 ){ \n\t\t\tSystem.out.println(\"1 1\"); return;\n\t\t}\n\t\t*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 870, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 870, "comment": "// if \n"}, "Heuristic": []}, {"nl": {"id": 870, "comment": "// if\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 870, "comment": "// for\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 870, "comment": "// if\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 870, "comment": "// if\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 870, "comment": "// for\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 870, "comment": "// if\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 874, "comment": "// Scanner sc = new Scanner(System.in);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 874, "comment": "// ng\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 874, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 880, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author jarek\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 881, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Lokesh Khandelwal aka (codeKNIGHT | phantom11)\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 884, "comment": "// br = new BufferedReader(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 884, "comment": "// out = new PrintWriter(new FileWriter(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 885, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Jacob Jiang\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 888, "comment": "//        int N = nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 888, "comment": "//        for (int i = 0; i < N; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 888, "comment": "//            runCase(i + 1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 888, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 889, "comment": "/**\n * Created with IntelliJ IDEA.\n * User: Alexey\n * Date: 16.09.12\n * Time: 19:29\n * To change this template use File | Settings | File Templates.\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 890, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 892, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Sunits789\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 892, "comment": "//System.out.println(l+\" \"+r+\" \"+pk+\" \"+k);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 894, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author George Marcus\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 898, "comment": "//in = new BufferedReader(new FileReader(\"in.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 899, "comment": "/**\n     * @param args\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 902, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 902, "comment": "//\t\tSystem.setIn(new FileInputStream(\"b.in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 905, "comment": "//      System.out.println(right);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 907, "comment": "/**\n\t * @param args\n\t * @throws IOException \n\t */"}, "Heuristic": ["H1"]}, {"nl": {"id": 907, "comment": "//\t\tScanner scan = new Scanner(System.in);\n"}, "Heuristic": []}, {"nl": {"id": 908, "comment": "//System.out.println(i + \" \" + count + \" \" + freq[data[i]]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 909, "comment": "/**\n *\n * @author Tibor\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 909, "comment": "/*a[i - 1] <= a[i]*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 909, "comment": "//   static java.io.InputStreamReader converter = new java.io.InputStreamReader(System.in);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 909, "comment": "//    static java.io.BufferedReader in = new java.io.BufferedReader(converter);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 909, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 909, "comment": "//    public static String readLine() {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 909, "comment": "//        String s = \"\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 909, "comment": "//        try {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 909, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 909, "comment": "//            s = in.readLine();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 909, "comment": "//        } catch (Exception e) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 909, "comment": "//            System.out.println(\"Error! Exception: \" + e);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 909, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 909, "comment": "//        return s;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 909, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 909, "comment": "//    static {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 909, "comment": "//        in.ordinaryChars('-', '-');\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 909, "comment": "//        in.ordinaryChars('+', '+');\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 909, "comment": "//        in.wordChars('-', '-');\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 909, "comment": "//        in.wordChars('+', '+');\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 909, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 910, "comment": "/*\nclass P implements Comparable<P>{\n//\timplements Comparable<P>\n    \n\tint x;\n\tboolean b;\n\tP(int x,boolean b){\n\t\tthis.x=x;\n\t\tthis.b=b;\n\t} \n\n\t   public int compareTo(P y){\n         \n\t\t  return  x-y.x;\n\t\t   \n\t\t   }\t\n\t\n}\n//*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 910, "comment": "// ArrayList<Integer> lis = new ArrayList<Integer>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 910, "comment": "// ArrayList<String> lis = new ArrayList<String>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 910, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 910, "comment": "//\tstatic long sum=0;\n"}, "Heuristic": []}, {"nl": {"id": 910, "comment": "// int a,b,c;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 910, "comment": "// 1000000007 (10^9+7)\n"}, "Heuristic": []}, {"nl": {"id": 910, "comment": "//static int mod = 1000000007;\n"}, "Heuristic": []}, {"nl": {"id": 910, "comment": "//static int dx[]={1,-1,0,0};\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 910, "comment": "//static int dy[]={0,0,1,-1};\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 910, "comment": "//static long H,L;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 910, "comment": "//String line=\"\"; throws Exception, IOException\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 910, "comment": "//(line=br.readLine())!=null\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 910, "comment": "//Scanner sc =new Scanner(System.in);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 910, "comment": "// while( ){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 910, "comment": "// db(a);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 910, "comment": "//\tif(t==n-1)break;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 910, "comment": "//\timplements Comparable<P>\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 910, "comment": "//*/\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 913, "comment": "//first contribution\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 913, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 913, "comment": "//System.out.println(Arrays.toString(dist));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 917, "comment": "// FileWriter f = new FileWriter(\"C:\\\\Users\\\\Hp\\\\Desktop\\\\out.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 919, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 921, "comment": "//never leave a uncompleted question in this file, always remove the code after submitting it.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 922, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Vaibhav Pulastya\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 923, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Jaynil\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 928, "comment": "//ascending order\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 928, "comment": "//ascending order\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 929, "comment": "// CodeForces Round #914 B train done\n"}, "Heuristic": []}, {"nl": {"id": 929, "comment": "// count napitki\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 929, "comment": "// BufferedReader bin = new BufferedReader(new FileReader(\"cactus.in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 932, "comment": "//PrintWriter out = new PrintWriter(System.out); \n"}, "Heuristic": []}, {"nl": {"id": 932, "comment": "//System.out.println(ss);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 935, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Rustam Musin (t.me/musin_acm)\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 936, "comment": "//\t\t\tout.print(\"Case #\" + i + \": \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 936, "comment": "//out.println(s-mid + \" \" + mid);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 936, "comment": "// Sathvik's Template Stuff BELOW!!!!!!!!!!!!!!!!!!!!!!\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 938, "comment": "//could she have eaten mid candies?\n"}, "Heuristic": ["H12"]}, {"nl": {"id": 942, "comment": "//        try {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 942, "comment": "//            in = new BufferedReader(new FileReader(\"absum.in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 942, "comment": "//            out = new PrintWriter(new File(\"absum.out\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 942, "comment": "//        } catch (FileNotFoundException e) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 942, "comment": "//            e.printStackTrace();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 942, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 944, "comment": "/**\n * @Author Tran Quang Loc (darkkcyan)\n * BEFORE READING CODE:\n * Java is really lengthy (at least for Java 8). So I used the advantage of initialization block.\n * Basically, every initialization block run before the constructor and they run in the declaration order.\n * And as I understand, every properties (or global variables) is also counted as initialization block.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 944, "comment": "//  could be replace with a method, but nah, this is just competitive programming :p\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 944, "comment": "///// Actual solution below /////\n"}, "Heuristic": []}, {"nl": {"id": 947, "comment": "/* Create temp arrays */"}, "Heuristic": ["H7"]}, {"nl": {"id": 947, "comment": "/*Copy data to temp arrays*/"}, "Heuristic": ["H7"]}, {"nl": {"id": 947, "comment": "/* Merge the temp arrays */"}, "Heuristic": ["H7"]}, {"nl": {"id": 947, "comment": "/* Copy remaining elements of L[] if any */"}, "Heuristic": ["H7"]}, {"nl": {"id": 947, "comment": "/* Copy remaining elements of R[] if any */"}, "Heuristic": ["H7"]}, {"nl": {"id": 947, "comment": "/* Create temp arrays */"}, "Heuristic": ["H7"]}, {"nl": {"id": 947, "comment": "/*Copy data to temp arrays*/"}, "Heuristic": ["H7"]}, {"nl": {"id": 947, "comment": "/* Merge the temp arrays */"}, "Heuristic": ["H7"]}, {"nl": {"id": 947, "comment": "/* Copy remaining elements of L[] if any */"}, "Heuristic": ["H7"]}, {"nl": {"id": 947, "comment": "/* Copy remaining elements of R[] if any */"}, "Heuristic": ["H7"]}, {"nl": {"id": 947, "comment": "//        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 947, "comment": "//we are operating inside box\n"}, "Heuristic": []}, {"nl": {"id": 947, "comment": "//if value does not stretches till right bound then just copy it.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 947, "comment": "//otherwise try to see if there are more matches.\n"}, "Heuristic": []}, {"nl": {"id": 947, "comment": "// Merges two subarrays of arr[].\n"}, "Heuristic": []}, {"nl": {"id": 947, "comment": "// First subarray is arr[l..m]\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 947, "comment": "// Second subarray is arr[m+1..r]\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 947, "comment": "// Find sizes of two subarrays to be merged\n"}, "Heuristic": []}, {"nl": {"id": 947, "comment": "// Initial indexes of first and second subarrays\n"}, "Heuristic": []}, {"nl": {"id": 947, "comment": "// Initial index of merged subarry array\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 947, "comment": "// Main function that sorts arr[l..r] using\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 947, "comment": "// merge()\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 947, "comment": "// Find the middle point\n"}, "Heuristic": []}, {"nl": {"id": 947, "comment": "// Sort first and second halves\n"}, "Heuristic": []}, {"nl": {"id": 947, "comment": "// Merge the sorted halves\n"}, "Heuristic": []}, {"nl": {"id": 947, "comment": "// Merges two subarrays of arr[].\n"}, "Heuristic": []}, {"nl": {"id": 947, "comment": "// First subarray is arr[l..m]\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 947, "comment": "// Second subarray is arr[m+1..r]\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 947, "comment": "// Find sizes of two subarrays to be merged\n"}, "Heuristic": []}, {"nl": {"id": 947, "comment": "// Initial indexes of first and second subarrays\n"}, "Heuristic": []}, {"nl": {"id": 947, "comment": "// Initial index of merged subarry array\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 947, "comment": "// Main function that sorts arr[l..r] using\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 947, "comment": "// merge()\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 947, "comment": "// Find the middle point\n"}, "Heuristic": []}, {"nl": {"id": 947, "comment": "// Sort first and second halves\n"}, "Heuristic": []}, {"nl": {"id": 947, "comment": "// Merge the sorted halves\n"}, "Heuristic": []}, {"nl": {"id": 947, "comment": "// line length\n"}, "Heuristic": []}, {"nl": {"id": 952, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Aman Kumar Singh\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 953, "comment": "//        FastReader in = new FastReader(new FileInputStream(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 953, "comment": "//        PrintWriter out = new PrintWriter(new FileOutputStream(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 954, "comment": "//package learning;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 954, "comment": "// First n in the below  \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 954, "comment": "// condition is for the  \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 954, "comment": "// case where n is 0 \n"}, "Heuristic": []}, {"nl": {"id": 954, "comment": "//return 0;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 954, "comment": "// Java program to generate power set in \n"}, "Heuristic": []}, {"nl": {"id": 954, "comment": "// lexicographic order. \n"}, "Heuristic": []}, {"nl": {"id": 954, "comment": "//int x;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 954, "comment": "//long z;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 954, "comment": "//this.x = x;\n"}, "Heuristic": []}, {"nl": {"id": 954, "comment": "//this.s = s;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 954, "comment": "// this.z = z;\n"}, "Heuristic": []}, {"nl": {"id": 955, "comment": "/************** HELPER CLASSES ***************/"}, "Heuristic": []}, {"nl": {"id": 955, "comment": "/************** FAST IO CODE FOLLOWS *****************/"}, "Heuristic": []}, {"nl": {"id": 955, "comment": "/**** LIBRARIES ****/"}, "Heuristic": []}, {"nl": {"id": 955, "comment": "/* Full Problem Text:\n  \nEach evening after the dinner the SIS's students gather together to play the game of Sport Mafia.\nFor the tournament, Alya puts candies into the box, which will serve as a prize for a winner.\nTo do that, she performs n actions.\nThe first action performed is to put a single candy into the box.\nFor each of the remaining moves she can choose from two options:\n \n the first option, in case the box contains at least one candy, is to take exactly one candy out and eat it.\nThis way the number of candies in the box decreased by 1; \n the second option is to put candies in the box.\nIn this case, Alya will 1 more candy, than she put in the previous time.\nThus, if the bank is empty, then it can only use the second option.\nFor example, one possible sequence of Alya's actions look as follows:\n \n put one candy into the box; \n put two candies into the box; \n eat one candy from the box; \n eat one candy from the box; \n put three candies into the box; \n eat one candy from the box; \n put four candies into the box; \n eat one candy from the box; \n put five candies into the box; \nThis way she will perform 9 actions, the of candies at the end will be 11, while Alya will eat 4 candies in total.\nYou know the total number of actions n and the number of candies at the end k.\nYou need to find the total number of sweets Alya ate.\nThat is the number of moves of the second option.\nIt's guaranteed, that for the given n and k the answer always exists.\nPlease note, that during an action of the first option, Alya takes out and eats exactly one candy.\n\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 955, "comment": "// **** B. Sport Mafia ****\n"}, "Heuristic": []}, {"nl": {"id": 955, "comment": "//static class HS extends HashSet<Integer>{public HS(){super();}public HS(int a){super(a);}};\n"}, "Heuristic": []}, {"nl": {"id": 955, "comment": "//static class AL extends ArrayList<Integer>{public AL(){super();}public AL(int a){super (a);}};\n"}, "Heuristic": []}, {"nl": {"id": 956, "comment": "/*\n4 2\n1 1 4\n0 2 3\n\n5 3\n1 2 4\n0 4 5\n0 3 5\n\n4 3\n1 2 3\n1 1 2\n0 1 3\nNO\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 956, "comment": "// cout << t[v] << \"  \"<< v << \" \" << vl << \" \" << vr<<\" \" << w << endl;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 957, "comment": "/** call this method to initialize reader for InputStream */"}, "Heuristic": []}, {"nl": {"id": 957, "comment": "/** get next word */"}, "Heuristic": []}, {"nl": {"id": 957, "comment": "//long v4=(v3+v2)/2;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 957, "comment": "//TODO add check for eof if necessary\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 959, "comment": "//MScanner sc = new MScanner(\"chess.in\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 959, "comment": "//int[]in=new int[n];for(int i=0;i<n;i++)in[i]=sc.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 961, "comment": "// Working program using Reader Class\n"}, "Heuristic": []}, {"nl": {"id": 961, "comment": "// line length\n"}, "Heuristic": []}, {"nl": {"id": 965, "comment": "// 10\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 965, "comment": "// if(mid > n) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 965, "comment": "// right = mid;\n"}, "Heuristic": []}, {"nl": {"id": 965, "comment": "// continue;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 965, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 965, "comment": "//-5\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 965, "comment": "//10\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 966, "comment": "//====================================================================================================================\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 967, "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 967, "comment": "// your code goes here\n"}, "Heuristic": []}, {"nl": {"id": 967, "comment": "// Initialize result \n"}, "Heuristic": []}, {"nl": {"id": 967, "comment": "// Update x if it is more   \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 967, "comment": "// than or equal to p \n"}, "Heuristic": []}, {"nl": {"id": 967, "comment": "// If y is odd, multiply x \n"}, "Heuristic": []}, {"nl": {"id": 967, "comment": "// with result \n"}, "Heuristic": []}, {"nl": {"id": 967, "comment": "// y must be even now \n"}, "Heuristic": []}, {"nl": {"id": 967, "comment": "// y = y / 2 \n"}, "Heuristic": []}, {"nl": {"id": 968, "comment": "/**\n * @author khokharnikunj8\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 973, "comment": "/* multiply in this bit's contribution while using modulus to keep\n                     * result small */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 973, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 973, "comment": "// Simple swap\n"}, "Heuristic": []}, {"nl": {"id": 973, "comment": "// Simple swap\n"}, "Heuristic": []}, {"nl": {"id": 974, "comment": "/*\nRoses are red\nMemes are neat\nAll my test cases time out\nLmao yeet\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 974, "comment": "//bin search\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 974, "comment": "//ugh I'm shafting\n"}, "Heuristic": []}, {"nl": {"id": 974, "comment": "//run time?\n"}, "Heuristic": ["H2", "H12"]}, {"nl": {"id": 975, "comment": "// int n = Integer.parseInt(bf.readLine());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 975, "comment": "//out.println(count);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 977, "comment": "// to increse stack size in java\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 983, "comment": "// Created by Whiplash99\n"}, "Heuristic": []}, {"nl": {"id": 986, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author cunbidun\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 988, "comment": "// new FastScanner(new FileInputStream(\".in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 988, "comment": "// new PrintWriter(new FileOutputStream(\".out\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 990, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 990, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 990, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 990, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 990, "comment": "////////                                                                                                               /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 990, "comment": "////////                                                                                                               /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 990, "comment": "////////   HHHH        HHHH  EEEEEEEEEEEEE   MMMM          MMMM         OOOOOO             SSSSSSS      EEEEEEEEEEEEE  /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 990, "comment": "////////   HHHH        HHHH  EEEEEEEEEEEEE   MMMMMM      MMMMMM      OOO      OOO        SSSS   SSS     EEEEEEEEEEEEE  /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 990, "comment": "////////   HHHH        HHHH  EEEEE           MMMM MMM  MMM MMMM    OOO          OOO    SSSS       SSS   EEEEE          /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 990, "comment": "////////   HHHH        HHHH  EEEEE           MMMM  MMMMMM  MMMM   OOO            OOO   SSSS             EEEEE          /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 990, "comment": "////////   HHHH        HHHH  EEEEE           MMMM          MMMM  OOO              OOO   SSSSSSS         EEEEE          /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 990, "comment": "////////   HHHHHHHHHHHHHHHH  EEEEEEEEEEE     MMMM          MMMM  OOO              OOO      SSSSSS       EEEEEEEEEEE    /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 990, "comment": "////////   HHHHHHHHHHHHHHHH  EEEEEEEEEEE     MMMM          MMMM  OOO              OOO         SSSSSSS   EEEEEEEEEEE    /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 990, "comment": "////////   HHHH        HHHH  EEEEE           MMMM          MMMM   OOO            OOO              SSSS  EEEEE          /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 990, "comment": "////////   HHHH        HHHH  EEEEE           MMMM          MMMM    OOO          OOO     SSS       SSSS  EEEEE          /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 990, "comment": "////////   HHHH        HHHH  EEEEEEEEEEEEE   MMMM          MMMM      OOO      OOO        SSS    SSSS    EEEEEEEEEEEEE  /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 990, "comment": "////////   HHHH        HHHH  EEEEEEEEEEEEE   MMMM          MMMM         OOOOOO             SSSSSSS      EEEEEEEEEEEEE  /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 990, "comment": "////////                                                                                                               /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 990, "comment": "////////                                                                                                               /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 990, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 990, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 990, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 990, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 990, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 990, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 990, "comment": "// static int n;\n"}, "Heuristic": []}, {"nl": {"id": 990, "comment": "//FileWriter f = new FileWriter(\"C:\\\\Users\\\\Ibrahim\\\\out.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 990, "comment": "//pw.println(rem+\" \"+mid+\" \"+k);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 991, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Xinyi Tao\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 992, "comment": "/*static void compare(Pair arr[], int n) \n\t\t\t{ \n\t\t\t\t// Comparator to sort the pair according to second element \n\t\t\t\tArrays.sort(arr, new Comparator<Pair>() { \n\t\t\t\t\t@Override public int compare(Pair p1, Pair p2) \n\t\t\t\t\t{ \n\t\t\t\t\t\tif(p1.start>p2.start)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if(p1.start==p2.start)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t} \n\t\t\t\t}); \n\t\t\t}\n\t\t\t*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 992, "comment": "/*\t\tpublic static long lcm(long a,long b)\n\t\t\t\t{\n\t\t\t\t\treturn a * (b / gcd(a, b));\n\t\t\t\t}\n\t\t\t*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 992, "comment": "/*public static void dfs(int parent,boolean[] visited)\n\t\t\t\t{\n\t\t\t\t\tTreeSet<Integer> arr=new TreeSet<Integer>();\n\t\t\t\t\tarr=graph.get(parent);\n\t\t\t\t\tvisited[parent]=true;\n\t\t\t\t\tif(a[parent]==1)\n\t\t\t\t\t{\n\t\t\t\t\t\tflag=1;\n\t\t\t\t\t}\n\t\t\t\t\tif(a[parent]==2)\n\t\t\t\t\t{\n\t\t\t\t\t\tflag1=1;\n\t\t\t\t\t}\n\t\t\t\t\tif(flag==1 && flag1==1)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tIterator itr=arr.iterator();\n\t\t\t\t\twhile(itr.hasNext())\n\t\t\t\t\t{\n\t\t\t\t\t\tint num=(int)itr.next();\n\t\t\t\t\t\tif(visited[num]==false)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdfs(num,visited);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tx1x`\n\t\t\t\t}*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 992, "comment": "/*\tboolean[] prime=new boolean[1000001];\n\t\t\t\t\tfor(int i=2;i*i<=1000000;i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(prime[i]==false)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor(int j=2*i;j<=1000000;j+=i)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tprime[j]=true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 992, "comment": "/**/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 992, "comment": "// Equal objects must produce the same \n"}, "Heuristic": []}, {"nl": {"id": 992, "comment": "// hash code as long as they are equal \n"}, "Heuristic": []}, {"nl": {"id": 992, "comment": "// Comparator to sort the pair according to second element \n"}, "Heuristic": []}, {"nl": {"id": 992, "comment": "//\tstatic int flag1=0;\n"}, "Heuristic": []}, {"nl": {"id": 992, "comment": "//\tstatic int[] a;\t\t\t  \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 992, "comment": "//\tstatic int flag=1;\n"}, "Heuristic": []}, {"nl": {"id": 992, "comment": "//\t\t    BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 994, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 994, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 995, "comment": "/*\n\n\n\n\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 995, "comment": "//static InputReader sc=new InputReader(System.in);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 998, "comment": "// RANDOM shuffle\n"}, "Heuristic": []}, {"nl": {"id": 998, "comment": "// QUICK shuffle\n"}, "Heuristic": []}, {"nl": {"id": 999, "comment": "// kth digit\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 999, "comment": "// which number encompasses the Kth digit\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 999, "comment": "// 123[1]1391 = m digits\n"}, "Heuristic": []}, {"nl": {"id": 999, "comment": "// out.print(lo + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 999, "comment": "// backwards\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 999, "comment": "// before : 1[2]3456\n"}, "Heuristic": []}, {"nl": {"id": 999, "comment": "// in list: 6543[2]1\n"}, "Heuristic": []}, {"nl": {"id": 999, "comment": "// offset = 4\n"}, "Heuristic": []}, {"nl": {"id": 999, "comment": "// digits below\n"}, "Heuristic": []}, {"nl": {"id": 999, "comment": "// 9 + 90 + 900\n"}, "Heuristic": []}, {"nl": {"id": 999, "comment": "// [1-9], [10-99], [100-999]\n"}, "Heuristic": []}, {"nl": {"id": 999, "comment": "// 9, 90*2, 900*3, ...\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 999, "comment": "// 9999..\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 999, "comment": "// 9138\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 999, "comment": "// [1-1000), [1000,9138]\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1001, "comment": "// Scanner in = new Scanner(new File(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1003, "comment": "//System.out.println(ans);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1004, "comment": "/*----------------------------------------------------------------------------------------------------------------*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 1004, "comment": "// Change Of Plans BABY.... Change Of Plans //\n"}, "Heuristic": []}, {"nl": {"id": 1004, "comment": "//THE DON'T CARE ZONE BEGINS HERE...\\\\\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1004, "comment": "// The Awesome Input Code is a fast IO method //\n"}, "Heuristic": []}, {"nl": {"id": 1004, "comment": "// functions to take input//\n"}, "Heuristic": []}, {"nl": {"id": 1004, "comment": "//functions to give output\n"}, "Heuristic": []}, {"nl": {"id": 1004, "comment": "// Fast Sort is Radix Sort\n"}, "Heuristic": []}, {"nl": {"id": 1004, "comment": "//threading has been used to increase the stack size.\n"}, "Heuristic": []}, {"nl": {"id": 1004, "comment": "//the last parameter is stack size desired.\n"}, "Heuristic": []}, {"nl": {"id": 1004, "comment": "//pl((\"\\nExecution Time : \" + ((double) System.currentTimeMillis() - s) / 1000) + \" s\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1005, "comment": "/**\n * @(#)DigitSequence.java\n *\n *\n * @author\n * @version 1.00 2019/6/1\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1005, "comment": "/**\n     * Creates a new instance of <code>DigitSequence</code>.\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1005, "comment": "/**\n     * @param args the command line arguments\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1005, "comment": "//System.out.println(Arrays.toString(end));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1005, "comment": "//st=1 {0,9}; st=2 {10, 189}; st=3 {190-2889}; st=4 {2890-38889}\n"}, "Heuristic": []}, {"nl": {"id": 1005, "comment": "//System.out.println(\"st \" + st);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1005, "comment": "//System.out.println(mod);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1005, "comment": "//98888888889\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1005, "comment": "//98888888879\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1005, "comment": "//1088888888889\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1005, "comment": "//1088888888878\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1006, "comment": "//int k =21;\n"}, "Heuristic": []}, {"nl": {"id": 1007, "comment": "// System.out.println(k + \" \" + pow);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1007, "comment": "// System.out.println(k + \" \" + n);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1009, "comment": "//long t1 = System.currentTimeMillis();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1009, "comment": "// Standard IO\n"}, "Heuristic": []}, {"nl": {"id": 1009, "comment": "//out.println(\"time(s): \" + (1.0*(System.currentTimeMillis()-t1))/1000.0);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1009, "comment": "// File IO\n"}, "Heuristic": []}, {"nl": {"id": 1009, "comment": "//fout.println(\"time(s): \" + (1.0*(System.currentTimeMillis()-t1))/1000.0);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1009, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1009, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1014, "comment": "//    System.err.println(\"RES \" + res);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1014, "comment": "//    System.err.println(\"DIGITS \" + digits);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1014, "comment": "//    System.err.println(\"Cnt Res \" + cnt(res));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1015, "comment": "// group number\n"}, "Heuristic": []}, {"nl": {"id": 1015, "comment": "// the max length\n"}, "Heuristic": []}, {"nl": {"id": 1015, "comment": "// the max integer\n"}, "Heuristic": []}, {"nl": {"id": 1015, "comment": "// the digit number between index and len\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1015, "comment": "// the number after index\n"}, "Heuristic": []}, {"nl": {"id": 1015, "comment": "// the number of the index\n"}, "Heuristic": []}, {"nl": {"id": 1017, "comment": "/* void insert(String a)\n    {\n        Trie tmp=root;\n        for(int i=0;i<a.length();i++)\n        {\n            int v=a.charAt(i)-'a';\n            if(tmp.child[v]==null)\n            {\n                tmp.child[v]=new Trie();\n                \n            }\n                tmp=tmp.child[v];\n            }\n            if(tmp.count==0)\n            r++;\n            tmp.count=1;\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1017, "comment": "// Random number generator\t\t\t\n"}, "Heuristic": []}, {"nl": {"id": 1017, "comment": "// Random number generator\t\t\t\n"}, "Heuristic": []}, {"nl": {"id": 1017, "comment": "// Random number generator\t\t\t\n"}, "Heuristic": []}, {"nl": {"id": 1017, "comment": "// Random number generator\t\t\t\n"}, "Heuristic": []}, {"nl": {"id": 1017, "comment": "//1 for prime -1 for not prime\n"}, "Heuristic": []}, {"nl": {"id": 1017, "comment": "//nextINtArray\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1017, "comment": "//nextINtArray\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1017, "comment": "//nextLongArray\n"}, "Heuristic": []}, {"nl": {"id": 1017, "comment": "//nextLongArray\n"}, "Heuristic": []}, {"nl": {"id": 1017, "comment": "//System.out.println(Arrays.toString(a));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1020, "comment": "//package codeforces;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1020, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1020, "comment": "//i=i+d*(temp-a);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1020, "comment": "//System.out.println(a) ;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1020, "comment": "//System.out.println(b);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1020, "comment": "//System.out.println(dig);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1020, "comment": "//System.out.println(\"sun\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1020, "comment": "//num+=(b-rev)*dig;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1020, "comment": "//System.out.println(num);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1020, "comment": "//System.out.println(t);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1020, "comment": "//System.out.println(\"s\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1020, "comment": "//System.out.println();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1020, "comment": "//System.out.println(div);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1020, "comment": "//System.out.println(flag);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1020, "comment": "//System.out.println(net);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1020, "comment": "//q=Integer.toString(net%flag).length();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1020, "comment": "//System.out.println(q);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1020, "comment": "//System.out.println(t);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1020, "comment": "//System.out.println(pig);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1020, "comment": "//System.out.println(w);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1020, "comment": "//System.out.println(r);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1020, "comment": "//System.out.println(pig);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1020, "comment": "//System.out.println(l);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1020, "comment": "//System.out.println(l);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1020, "comment": "//System.out.println(r);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1020, "comment": "//System.out.println(c);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1020, "comment": "//int f=t/w;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1020, "comment": "//System.out.println(f);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1025, "comment": "/**\n     * @param args the command line arguments\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1025, "comment": "//long result = 0;\n"}, "Heuristic": []}, {"nl": {"id": 1027, "comment": "// RANDOM shuffle\n"}, "Heuristic": []}, {"nl": {"id": 1027, "comment": "// QUICK shuffle\n"}, "Heuristic": []}, {"nl": {"id": 1028, "comment": "// int t = sc.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1028, "comment": "// while (t-- > 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1028, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1029, "comment": "//      String fileName = \"C://Users/user/eclipse-workspace/algo/example.txt\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1029, "comment": "//      String outFile = \"C://Users/user/eclipse-workspace/algo/example-out.txt\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1029, "comment": "//      String fileName = \"C://Users/user/eclipse-workspace/algo/A-small-practice.in\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1029, "comment": "//      String outFile = \"C://Users/user/eclipse-workspace/algo/A-small-out.txt\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1029, "comment": "//      String fileName = \"C://Users/user/eclipse-workspace/algo/A-large-practice.in\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1029, "comment": "//      String outFile = \"C://Users/user/eclipse-workspace/algo/A-large-out.txt\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1029, "comment": "//      String fileName = \"/Users/mobike/IdeaProjects/algo/B-small-practice.in\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1029, "comment": "//      String outFile = \"/Users/mobike/IdeaProjects/algo/B-small-out.txt\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1029, "comment": "//      String fileName = \"/Users/mobike/IdeaProjects/algo/B-large-practice.in\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1029, "comment": "//      String outFile = \"/Users/mobike/IdeaProjects/algo/B-large-out.txt\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1029, "comment": "//      String fileName = \"C://Users/user/eclipse-workspace/algo/C-small-practice.in\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1029, "comment": "//      String outFile = \"C://Users/user/eclipse-workspace/algo/C-small-out.txt\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1029, "comment": "//      String fileName = \"C://Users/user/eclipse-workspace/algo/D-small-practice.in\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1029, "comment": "//      String outFile = \"C://Users/user/eclipse-workspace/algo/D-small-out.txt\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1029, "comment": "//      String fileName = \"C://Users/user/eclipse-workspace/algo/D-large-practice.in\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1029, "comment": "//      String outFile = \"C://Users/user/eclipse-workspace/algo/D-large-out.txt\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1029, "comment": "//        int T = scanner.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1029, "comment": "//        for (int i = 1; i <= T; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1029, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1030, "comment": "//\t\tBufferedReader br = new BufferedReader(new FileReader(\"F:/books/input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1031, "comment": "/*******************************************************************************************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 1031, "comment": "/*******************************************************************************************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 1031, "comment": "//\t\tint T = nextInt();\n"}, "Heuristic": []}, {"nl": {"id": 1031, "comment": "//\t\tfor (int i = 1; i <= T; i++)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1031, "comment": "//\t\treader = new BufferedReader(new FileReader(\"ate.in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1031, "comment": "//\t\ttokenizer = new StringTokenizer(\"\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1031, "comment": "//\t\tprintWriter = new PrintWriter(new BufferedWriter(new FileWriter(\"ate.out\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1031, "comment": "// TODO Auto-generated constructor stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1031, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1032, "comment": "/** io **/"}, "Heuristic": ["H1"]}, {"nl": {"id": 1032, "comment": "/** input -- sup\u00f5e que n\u00e3o chegou no EOF **/"}, "Heuristic": ["H1"]}, {"nl": {"id": 1032, "comment": "/** output **/"}, "Heuristic": []}, {"nl": {"id": 1032, "comment": "// freopen(\"in\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1032, "comment": "// imprime double com ponto\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1032, "comment": "// l\u00ea os dados, ignorando linhas vazias\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1032, "comment": "// EOF\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1036, "comment": "//len * Math.pow(10, len) * 0.9;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1036, "comment": "//System.out.println(k);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1036, "comment": "//System.out.println(n);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1037, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1042, "comment": "// package name;\n"}, "Heuristic": []}, {"nl": {"id": 1042, "comment": "//System.out.println(k);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1042, "comment": "//System.out.println(k);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1043, "comment": "//k = 56\n"}, "Heuristic": []}, {"nl": {"id": 1043, "comment": "//League 1: 0 - 9\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1043, "comment": "//League 2: 10 - 99\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1043, "comment": "//League 3: 100 - 999..\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1043, "comment": "//System.out.println(\"k = \"+k);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1043, "comment": "//league = 1 : k = 56 > 9\n"}, "Heuristic": []}, {"nl": {"id": 1043, "comment": "//league = 2 : k = 56 < 99\n"}, "Heuristic": []}, {"nl": {"id": 1043, "comment": "//therefore league = 2\n"}, "Heuristic": []}, {"nl": {"id": 1043, "comment": "//System.out.println(\"League = \"+league);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1043, "comment": "//irrelevancy = 1 * (10^1 - 10^0) = 9\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1043, "comment": "//modified_k = 56 - 9 = 47\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1043, "comment": "//System.out.println(\"modified k = \"+ modified_k);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1043, "comment": "//System.out.println(\"number = \"+number);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1043, "comment": "//System.out.println(position_of_digit);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1043, "comment": "//number = 24\n"}, "Heuristic": []}, {"nl": {"id": 1043, "comment": "//position_of_digit = 47 % 2 = 1\n"}, "Heuristic": []}, {"nl": {"id": 1044, "comment": "/*******************************************************************************************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 1044, "comment": "/*******************************************************************************************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 1044, "comment": "//\t\tint T = nextInt();\n"}, "Heuristic": []}, {"nl": {"id": 1044, "comment": "//\t\tfor (int i = 1; i <= T; i++)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1044, "comment": "//\t\treader = new BufferedReader(new FileReader(\"ate.in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1044, "comment": "//\t\ttokenizer = new StringTokenizer(\"\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1044, "comment": "//\t\tprintWriter = new PrintWriter(new BufferedWriter(new FileWriter(\"ate.out\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1044, "comment": "// TODO Auto-generated constructor stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1044, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1045, "comment": "//System.out.println(l+\" \"+k);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1048, "comment": "// references\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1048, "comment": "// IBIG = 1e9 + 7\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1048, "comment": "// IMAX ~= 2e9\n"}, "Heuristic": []}, {"nl": {"id": 1048, "comment": "// LMAX ~= 9e18\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1048, "comment": "// constants\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1048, "comment": "// math util\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1048, "comment": "// array util\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1048, "comment": "// graph util\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1048, "comment": "// input\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1048, "comment": "// output\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1049, "comment": "/*public static String getString(int number) {\n\t\tint contador = 1;\n\t\tString salida = \"\";\n\t\twhile(salida.length() <= number) {\n\t\t\tsalida += contador;\n\t\t\tcontador++;\n\t\t}\n\t\treturn salida.substring(0, number);\n\t}*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1049, "comment": "//System.out.println(getString((int)k));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1051, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1052, "comment": "//one digit\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1052, "comment": "//two digits\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1052, "comment": "//three digits \n"}, "Heuristic": []}, {"nl": {"id": 1052, "comment": "//four digits \n"}, "Heuristic": []}, {"nl": {"id": 1052, "comment": "//start changing ------------------------------------------------------------\n"}, "Heuristic": []}, {"nl": {"id": 1052, "comment": "//five digits \n"}, "Heuristic": []}, {"nl": {"id": 1052, "comment": "//six digits \n"}, "Heuristic": []}, {"nl": {"id": 1052, "comment": "//seven digits \n"}, "Heuristic": []}, {"nl": {"id": 1052, "comment": "//eight digits \n"}, "Heuristic": []}, {"nl": {"id": 1052, "comment": "//nign digits \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1052, "comment": "//ten digits \n"}, "Heuristic": []}, {"nl": {"id": 1053, "comment": "//System.out.println(\"Digit is at the \" + power + \" power\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1053, "comment": "//System.out.println(\"Digit is at the \" + place + \" number of the sequence\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1053, "comment": "//System.out.println(\"Number is \" + num);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1053, "comment": "//System.out.println(\"Digit is at the \" + answer+  \" in that number\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1053, "comment": "//System.out.println(\"Answer is \" + num2.charAt((int)answer-1));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1054, "comment": "// line length\n"}, "Heuristic": []}, {"nl": {"id": 1055, "comment": "//SOLUTION BEGIN\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1055, "comment": "//Into the Hardware Mode\n"}, "Heuristic": []}, {"nl": {"id": 1055, "comment": "//SOLUTION END\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1055, "comment": "//Solution Credits: Taranpreet Singh\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1057, "comment": "/*\n\t\t    if(hm.containsKey(z))\n\t\t        hm.put(z,hm.get(z)+1);\n\t\t    else\n\t\t        hm.put(z,1);\n\t\t */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1057, "comment": "//for(i=1;i<200;i++)\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1057, "comment": "//{\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1057, "comment": "//out.println(i+\":- \"+l+\" \"+((k-1)/l)+\"  \"+(k%l==0?l:k%l));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1057, "comment": "//out.println(no);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1057, "comment": "//out.println(p+\" \"+index);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1057, "comment": "//}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1058, "comment": "//                System.out.println(k + \" hello \" + c);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1058, "comment": "//            System.out.println(\"k is \" + k);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1058, "comment": "//            System.out.println(\"mo is \" + mo);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1058, "comment": "//            k = Math.max(k-1,0);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1058, "comment": "//            System.out.println(\"k/c is \" + k);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1058, "comment": "//            System.out.println(\"j1 is \" + j1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1058, "comment": "//            System.out.println(\"final ans= \" + j1.charAt((int)mo));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1058, "comment": "//            System.out.println();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1060, "comment": "/*for(int i = 1; i <= 13; i++) out.print(arr[i] + \" \");\n\t\tout.println();*/"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 1060, "comment": "//System.out.println(rest);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1060, "comment": "//System.out.println(ind);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1060, "comment": "//System.out.println(total);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1062, "comment": "/*\n                             ;\\\n                            |' \\\n         _                  ; : ;\n        / `-.              /: : |\n       |  ,-.`-.          ,': : |\n       \\  :  `. `.       ,'-. : |\n        \\ ;    ;  `-.__,'    `-.|\n         \\ ;   ;  :::  ,::'`:.  `.\n          \\ `-. :  `    :.    `.  \\\n           \\   \\    ,   ;   ,:    (\\\n            \\   :., :.    ,'o)): ` `-.\n           ,/,' ;' ,::\"'`.`---'   `.  `-._\n         ,/  :  ; '\"      `;'          ,--`.\n        ;/   :; ;             ,:'     (   ,:)\n          ,.,:.    ; ,:.,  ,-._ `.     \\\"\"'/\n          '::'     `:'`  ,'(  \\`._____.-'\"'\n             ;,   ;  `.  `. `._`-.  \\\\\n             ;:.  ;:       `-._`-.\\  \\`.\n              '`:. :        |' `. `\\  ) \\\n      -hrr-      ` ;:       |    `--\\__,'\n                   '`      ,'\n                        ,-'\n\n\n                      free bug dog\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 1062, "comment": "// Don't place your source in a package\n"}, "Heuristic": []}, {"nl": {"id": 1062, "comment": "// Please name your class Main\n"}, "Heuristic": []}, {"nl": {"id": 1063, "comment": "//package test_1177a;\n"}, "Heuristic": []}, {"nl": {"id": 1063, "comment": "// \u041d\u0430\u0448\u043b\u0438 \u043f\u043e\u0440\u044f\u0434\u043e\u043a\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1064, "comment": "//Less than the lowest index of half\n"}, "Heuristic": []}, {"nl": {"id": 1064, "comment": "//Remember to update lowIndex here.\n"}, "Heuristic": []}, {"nl": {"id": 1064, "comment": "//The final number will at max be 11 characters long, thus it is safe to convert and cast.\n"}, "Heuristic": []}, {"nl": {"id": 1064, "comment": "//Isolate possible combinations so that all further numbers will have the same length.\n"}, "Heuristic": []}, {"nl": {"id": 1064, "comment": "//Stage 1: Completed Successfully.\n"}, "Heuristic": []}, {"nl": {"id": 1065, "comment": "// find xth\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1065, "comment": "// here is the output\n"}, "Heuristic": []}, {"nl": {"id": 1069, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Vadim\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1069, "comment": "//System.out.println(\"splits = \" + splits);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1069, "comment": "//System.out.println(\"rem = \" + rem);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1069, "comment": "//System.out.printf(\"path=%d k=%d size=%d%n\", path, k, size);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1069, "comment": "//System.out.printf(\"size=%d k=%d%n\", size, k);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1070, "comment": "//////////////////////////////////////////////////////////////////////////////////// OFF\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1070, "comment": "//////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1070, "comment": "//////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1070, "comment": "////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1071, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author prakharjain\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1071, "comment": "//                    if (cs > 0 && k < cc) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1071, "comment": "//                        out.println(\"YES \" + cs);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1071, "comment": "//                        continue o;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1071, "comment": "//                    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1074, "comment": "/**\n * Created by timur on 28.03.15.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1074, "comment": "//        for (int i = 0; i < m - 1; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1074, "comment": "//            for (int j = 0; j <= i; j++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1074, "comment": "//                out.println(i + \" \" + j + \" \" + mi[(int)i - j] + \" \" + (ma[(int)i] - l[(int)i - j + 1] * ma[j]));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1074, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1074, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1077, "comment": "// Global vars\n"}, "Heuristic": []}, {"nl": {"id": 1077, "comment": "//log(\"squares:\"+squares+\" cut:\"+cut+\" it:\"+it+\" size:\"+(1L<<it));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1077, "comment": "//log(maxgen);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1077, "comment": "// do first cut\n"}, "Heuristic": []}, {"nl": {"id": 1077, "comment": "//log(\"//check:\"+maxc+\" \"+maxgen[n]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1077, "comment": "//log(\"size:\"+size+\" minc:\"+minc+\" maxc:\"+maxc);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1077, "comment": "//log(\"d:\"+d);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1077, "comment": "//log(\"res:\"+res);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1077, "comment": "//log(\"d:\"+d);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1077, "comment": "//log(\"res:\"+res);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1078, "comment": "//package round524;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1078, "comment": "// 1 5 13 \n"}, "Heuristic": []}, {"nl": {"id": 1078, "comment": "//\t\t\t\ttr(d, inf, sup);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1078, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1081, "comment": "//long t1 = System.currentTimeMillis();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1081, "comment": "// Standard IO\n"}, "Heuristic": []}, {"nl": {"id": 1081, "comment": "//out.println(\"time(s): \" + (1.0*(System.currentTimeMillis()-t1))/1000.0);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1081, "comment": "// File IO\n"}, "Heuristic": []}, {"nl": {"id": 1081, "comment": "//fout.println(\"time(s): \" + (1.0*(System.currentTimeMillis()-t1))/1000.0);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1081, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1081, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1082, "comment": "// TODO: read this byte-by-byte like the other read functions.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1083, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Rustam Musin (t.me/musin_acm)\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1084, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author kessido\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1085, "comment": "/*\n     * 4. Square Matrix Exponentiation\n     */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1085, "comment": "//        System.err.println(f(1));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1085, "comment": "//        System.err.println(f(4));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1085, "comment": "//                long rem = k-((1<<i)-1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1085, "comment": "//                System.err.println(\"steps:\" + steps + \" cnt:\" + cnt + \" f:\"  + f(n-i));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1085, "comment": "//                System.err.println(\"rem: \" + (f(n) - steps - cnt*f(n-i)));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1085, "comment": "//C(p x r) = A(p x q) x (q x r) -- O(p x q x r)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1086, "comment": "// long N = io.nextLong();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1086, "comment": "// long K = io.nextLong();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1086, "comment": "// // io.println(1L << 62);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1086, "comment": "// boolean good;\n"}, "Heuristic": []}, {"nl": {"id": 1086, "comment": "// if (N >= 31) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1086, "comment": "// \tgood = true;\n"}, "Heuristic": []}, {"nl": {"id": 1086, "comment": "// } else {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1086, "comment": "// \tgood = ((1L << (N << 1)) / 3 >= K);\n"}, "Heuristic": []}, {"nl": {"id": 1086, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1086, "comment": "// if (!good) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1086, "comment": "// \tio.println(\"NO\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1086, "comment": "// \treturn;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1086, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1086, "comment": "// int split = getMaxSplit(K);\n"}, "Heuristic": []}, {"nl": {"id": 1086, "comment": "// if (N >= 40) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1086, "comment": "// \tio.printf(\"YES %d\\n\", N - split);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1086, "comment": "// \treturn;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1086, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1086, "comment": "// long used = (1L << split) - 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1086, "comment": "// long rem = K - used;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1086, "comment": "// TODO: read this byte-by-byte like the other read functions.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1087, "comment": "//        System.out.println(square + \" \" + splitDone + \" \" + size + \" \" + splitLeft);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1088, "comment": "// Solution\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1088, "comment": "//FastReader in = new FastReader(new BufferedReader(new FileReader(\"Main.in\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1088, "comment": "//big enough \n"}, "Heuristic": []}, {"nl": {"id": 1088, "comment": "// now: n <= maxN\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1088, "comment": "//e.printStackTrace();\n"}, "Heuristic": []}, {"nl": {"id": 1088, "comment": "//e.printStackTrace();\n"}, "Heuristic": []}, {"nl": {"id": 1089, "comment": "/**\n * @author Don Li\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1090, "comment": "//        String fileName = \"C-large-practice\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1090, "comment": "//        ConsoleIO io = new ConsoleIO(new FileReader(\"D:\\\\Dropbox\\\\code\\\\practice\\\\jb\\\\src\\\\\" + fileName + \".in\"), new PrintWriter(new File(\"D:\\\\Dropbox\\\\code\\\\practice\\\\jb\\\\src\\\\\" + fileName + \".out\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1090, "comment": "//        new Main(io).solveLocal();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1090, "comment": "//public char readChar(){try {return (char)br.read();}catch (Exception ex){ return 0; }}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1091, "comment": "/*\nIf you want to aim high, aim high\nDon't let that studying and grades consume you\nJust live life young\n******************************\nWhat do you think? What do you think?\n1st on Billboard, what do you think of it\nNext is a Grammy, what do you think of it\nHowever you think, I\u2019m sorry, but shit, I have no fcking interest\n*******************************\nI'm standing on top of my Monopoly board\nThat means I'm on top of my game and it don't stop\ntil my hip don't hop anymore\nhttps://www.a2oj.com/Ladder16.html\n*******************************\n300iq as writer = Sad!\n*/"}, "Heuristic": ["H2", "H7", "H9", "H12"]}, {"nl": {"id": 1091, "comment": "//www.a2oj.com/Ladder16.html\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1092, "comment": "//package que_a;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1092, "comment": "//SZ = sieve(); //SZ = 1000001;\n"}, "Heuristic": []}, {"nl": {"id": 1092, "comment": "//---------- I/O Template ----------\n"}, "Heuristic": []}, {"nl": {"id": 1092, "comment": "//no input \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1094, "comment": "/*\nNO\nYES 0\nYES 0\nNO\nNO\nYES 999999942\nYES 59\nYES 63\nYES 2\nNO\nYES 1\nYES 1\nNO\nNO\nYES 0\nYES 0*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 1095, "comment": "//package round503;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1095, "comment": "// 12123432\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1095, "comment": "// 12343212\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1095, "comment": "// u-l d-r\n"}, "Heuristic": []}, {"nl": {"id": 1095, "comment": "// \n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1096, "comment": "// Scanner scan = new Scanner(System.in);\n"}, "Heuristic": []}, {"nl": {"id": 1096, "comment": "// StringTokenizer st = new StringTokenizer(bf.readLine());\n"}, "Heuristic": []}, {"nl": {"id": 1096, "comment": "// int[] a = new int[n]; for(int i=0; i<n; i++) a[i] = Integer.parseInt(st.nextToken());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1096, "comment": "// int n = Integer.parseInt(st.nextToken());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1096, "comment": "// int n = scan.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1096, "comment": "//out.close(); System.exit(0);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1096, "comment": "// 0 thru n-1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1098, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author lewin\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1099, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1100, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author kessido\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1101, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Pradyumn\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1105, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1107, "comment": "//       |----|       /\\      |    |   -----   |\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1107, "comment": "//       |   /       /  \\     |    |     |     |\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1107, "comment": "//       |--/       /----\\    |----|     |     |\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1107, "comment": "//       |   \\     /      \\   |    |     |     |\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1107, "comment": "//       |    \\   /        \\  |    |   -----   -------\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1108, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Pradyumn\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1110, "comment": "//package contests.CF1019;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1111, "comment": "//    \tFastScanner fs = new FastScanner();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1111, "comment": "//    \tPrintWriter out = new PrintWriter(System.out);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1111, "comment": "//shuffle, then sort \n"}, "Heuristic": []}, {"nl": {"id": 1111, "comment": "//shuffle, then sort \n"}, "Heuristic": []}, {"nl": {"id": 1113, "comment": "/**\n * Built using CHelper plug-in Actual solution is at the top\n *\n * @author ilyakor\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1114, "comment": "//        InputReader in = new InputReader(new FileInputStream(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1114, "comment": "//        PrintWriter out = new PrintWriter(new BufferedOutputStream(new FileOutputStream(\"milkvisits.out\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1114, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1114, "comment": "//        out.flush();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1115, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Pradyumn\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1116, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Liavontsi Brechka\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1122, "comment": "// number\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1122, "comment": "// level -- > (n + 8) / 9 * 9; --- > s\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1125, "comment": "/**\n * \n * \u4f5c\u8005\uff1a\u5f20\u5b87\u7fd4 \u521b\u5efa\u65e5\u671f\uff1a2017\u5e746\u670816\u65e5 \u4e0a\u53489:00:48 \u63cf\u8ff0\uff1a\u5199\u5b57\u697c\u91cc\u5199\u5b57\u95f4\uff0c\u5199\u5b57\u95f4\u91cc\u7a0b\u5e8f\u5458\uff1b \u7a0b\u5e8f\u4eba\u5458\u5199\u7a0b\u5e8f\uff0c\u53c8\u62ff\u7a0b\u5e8f\u6362\u9152\u94b1\u3002\n * \u9152\u9192\u53ea\u5728\u7f51\u4e0a\u5750\uff0c\u9152\u9189\u8fd8\u6765\u7f51\u4e0b\u7720\uff1b \u9152\u9189\u9152\u9192\u65e5\u590d\u65e5\uff0c\u7f51\u4e0a\u7f51\u4e0b\u5e74\u590d\u5e74\u3002 \u4f46\u613f\u8001\u6b7b\u7535\u8111\u95f4\uff0c\u4e0d\u613f\u97a0\u8eac\u8001\u677f\u524d\uff1b \u5954\u9a70\u5b9d\u9a6c\u8d35\u8005\u8da3\uff0c\u516c\u4ea4\u81ea\u884c\u7a0b\u5e8f\u5458\u3002\n * \u522b\u4eba\u7b11\u6211\u5fd2\u75af\u766b\uff0c\u6211\u7b11\u81ea\u5df1\u547d\u592a\u8d31\uff1b \u4e0d\u89c1\u6ee1\u8857\u6f02\u4eae\u59b9\uff0c\u54ea\u4e2a\u5f52\u5f97\u7a0b\u5e8f\u5458\uff1f\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1126, "comment": "/*\n\n12 1\n\n25 20\n\n10 9\n\n1000000000000000000 1000000000000000000\n\n1000000000000000000 100000000000000000\n\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 1126, "comment": "//System.out.println(lo+\" \"+hi);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1126, "comment": "//STUPID STUPID DUMB\n"}, "Heuristic": ["H1", "H4"]}, {"nl": {"id": 1126, "comment": "//System.out.println(lo+\" \"+hi);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1126, "comment": "//System.out.println(reallyBig(100000000000000009L,100000000000000000L));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1127, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1127, "comment": "//return -1;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1128, "comment": "/**\n * Road to 1600 raiting\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1131, "comment": "// first number where sum of digs >= s\n"}, "Heuristic": []}, {"nl": {"id": 1131, "comment": "// possibly overshot\n"}, "Heuristic": []}, {"nl": {"id": 1131, "comment": "// always add at least 10\n"}, "Heuristic": []}, {"nl": {"id": 1133, "comment": "// current - sum(current) >= s\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1134, "comment": "//System.out.println(med);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1136, "comment": "// Key is in a[lo..hi] or not present.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1137, "comment": "//new Main().soln();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1137, "comment": "//System.out.println(x);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1137, "comment": "//System.out.println(x+\" \"+parent[x]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1137, "comment": "// || (v == other.u && u == other.v));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1137, "comment": "//return Integer.compare(other.r, r);\n"}, "Heuristic": []}, {"nl": {"id": 1137, "comment": "// 1-indexed array, In this array We save cumulative information to perform efficient range queries and updates\n"}, "Heuristic": []}, {"nl": {"id": 1137, "comment": "//Extracting the portion up to the first significant one of the binary representation of 'ind' and decrementing ind by that number\n"}, "Heuristic": []}, {"nl": {"id": 1137, "comment": "//Extracting the portion up to the first significant one of the binary representation of 'ind' and incrementing ind by that number\n"}, "Heuristic": []}, {"nl": {"id": 1137, "comment": "//out.close();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1137, "comment": "//tr(System.currentTimeMillis() - s + \"ms\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1137, "comment": "// To Get Input\n"}, "Heuristic": []}, {"nl": {"id": 1137, "comment": "// Some Buffer Methods\n"}, "Heuristic": []}, {"nl": {"id": 1137, "comment": "// when nextLine, (isSpaceChar(b) && b != '\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1137, "comment": "// ')\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1138, "comment": "// System.out.println(\"mid is : \" + mid);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1138, "comment": "// System.out.println(\"high is : \" + h);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1138, "comment": "//System.out.println(\"low is : \" + l);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1138, "comment": "//System.out.println(\"n is :\" + n + \" sum is : \" + sum);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1139, "comment": "//            br = new BufferedReader(new FileReader(\"lesson.in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1139, "comment": "//            out = new PrintWriter(new File(\"lesson.out\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1142, "comment": "/**\n *\n * @author Jishnu_T\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1143, "comment": "//System.out.println(a.toString());\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1143, "comment": "//System.out.println(\"jwefcyuwe\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1143, "comment": "//System.out.println(mid.toString());\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1143, "comment": "//System.out.println(a.toString());\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1143, "comment": "//System.out.print(\"sfvlksfv\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1143, "comment": "//System.out.println(c.toString());\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1145, "comment": "//package educational.round23;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1145, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1149, "comment": "//package educational.round23;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1149, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1150, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1150, "comment": "// no's greater thn this grtr\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1150, "comment": "// could check initially too\n"}, "Heuristic": []}, {"nl": {"id": 1151, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1153, "comment": "//\t\tpw.println(mid);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1153, "comment": "//\t\tpw.println(l+\" \"+r);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1155, "comment": "/*------------------------------My Code starts here------------------------------*/"}, "Heuristic": ["H7"]}, {"nl": {"id": 1155, "comment": "/*------------------------------The End------------------------------------------*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 1156, "comment": "// line length\n"}, "Heuristic": []}, {"nl": {"id": 1156, "comment": "// line length\n"}, "Heuristic": []}, {"nl": {"id": 1157, "comment": "/* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1157, "comment": "// to increse stack size in java\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1157, "comment": "//Scanner in=new Scanner(System.in);\n"}, "Heuristic": []}, {"nl": {"id": 1157, "comment": "//sort in incrementing order w.r.t to c\n"}, "Heuristic": []}, {"nl": {"id": 1159, "comment": "/**\n * DA-IICT\n * Author : Savaliya Sagar\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1159, "comment": "// when nextLine, (isSpaceChar(b) && b !=\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1159, "comment": "// ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "/*\n * DA-IICT\n * Author: Jugal Kalal\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 1161, "comment": "//    static ArrayList<Integer> adj[]; //Adjacency Lists\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "// No. of vertices\n"}, "Heuristic": []}, {"nl": {"id": 1161, "comment": "// Constructor\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1161, "comment": "//        adj = new ArrayList[v];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//        for (int i=0; i<v; ++i){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//        \tadj[i] = new ArrayList();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "// Function to add an edge into the graph\n"}, "Heuristic": []}, {"nl": {"id": 1161, "comment": "//\t\tadj[u].add(v);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1161, "comment": "//\t\tadj[v].add(u);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1161, "comment": "//    static void bfs(int s,int n){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//    \tboolean visited[]=new boolean[n];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//    \tLinkedList<Integer> queue=new LinkedList<Integer>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//    \tqueue.add(s);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//    \tvisited[s]=true;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//    \twhile(!queue.isEmpty()){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//    \t\tint num=queue.pop();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "////    \t\tSystem.out.println(ans.toString());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//    \t\tfor(int i=0;i<adj[num].size();i++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//    \t\t\tif(!visited[adj[num].get(i)]){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//    \t\t\t\tvisited[adj[num].get(i)]=true;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//    \t\t\t\tqueue.add(adj[num].get(i));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//    \t\t\t}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//    \t\t}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//    \t}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "// Print the number of 2s that divide n\n"}, "Heuristic": []}, {"nl": {"id": 1161, "comment": "// n must be odd at this point.  So we can\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "// skip one element (Note i = i +2)\n"}, "Heuristic": []}, {"nl": {"id": 1161, "comment": "// While i divides n, print i and divide n\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "// This condition is to handle the case whien\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "// n is a prime number greater than 2\n"}, "Heuristic": []}, {"nl": {"id": 1161, "comment": "////for marking all prime numbers greater than 1 and less than equal to N\n"}, "Heuristic": []}, {"nl": {"id": 1161, "comment": "//Mark all the multiples of i as composite numbers\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//  //if  str2 (pattern) is subsequence of str1 (Text) or not\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//\tstatic boolean function(String str1,String str2){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//\t     str2 = str2.replace(\"\", \".*\");  //returns .*a.*n.*n.*a.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//\t     return (str1.matches(str2));  // returns true\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1161, "comment": "//modified initialize function:\n"}, "Heuristic": []}, {"nl": {"id": 1161, "comment": "//if A and B have same root,means they are connected.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "// modified root function.\n"}, "Heuristic": []}, {"nl": {"id": 1161, "comment": "//\tstatic HashMap<Integer,Integer> level;;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//\tstatic HashMap<Integer,Integer> parent;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//\tstatic boolean T[][][];\n"}, "Heuristic": []}, {"nl": {"id": 1161, "comment": "//\tstatic void subsetSum(int input[], int total, int count) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//        T = new boolean[input.length + 1][total + 1][count+1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//        for (int i = 0; i <= input.length; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//        \tT[i][0][0] = true;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//        \tfor(int j = 1; j<=count; j++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//        \t\tT[i][0][j] = false;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//        \t}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//        int sum[]=new int[input.length+1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//        for(int i=1;i<=input.length;i++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//            sum[i]=sum[i-1]+input[i-1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//        for (int i = 1; i <= input.length; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//            for (int j = 1; j <= (int)Math.min(total,sum[i]); j++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//            \tfor (int k = 1; k <= (int)Math.min(i,count); k++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//            \t\t if (j >= input[i - 1]) {//Exclude and Include\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//                         T[i][j][k] = T[i - 1][j][k] || T[i - 1][j - input[i - 1]][k-1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//                     } else {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//                         T[i][j][k] = T[i-1][j][k];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//                     }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//            \t}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//\tstatic <K,V extends Comparable<? super V>>\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 1161, "comment": "//\tSortedSet<Map.Entry<K,V>> entriesSortedByValues(Map<K,V> map) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//\t    SortedSet<Map.Entry<K,V>> sortedEntries = new TreeSet<Map.Entry<K,V>>(\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//\t        new Comparator<Map.Entry<K,V>>() {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//\t            @Override public int compare(Map.Entry<K,V> e1, Map.Entry<K,V> e2) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//\t                int res = e2.getValue().compareTo(e1.getValue());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//\t                return res != 0 ? res : 1;\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 1161, "comment": "//\t            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//\t        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//\t    );\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//\t    sortedEntries.addAll(map.entrySet());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//\t    return sortedEntries;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1161, "comment": "//minimum prime factor of all the numbers less than n\n"}, "Heuristic": []}, {"nl": {"id": 1161, "comment": "//If i is prime\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1161, "comment": "//x may be negative\n"}, "Heuristic": []}, {"nl": {"id": 1162, "comment": "/******long l1 = l;\n\t\t***while(l1<=n) {\n\t\t\tSystem.out.print(l1 + \" \");\n\t\t\tl1++;\n\t\t}*/"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1162, "comment": "/////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1163, "comment": "/**\n * #\n * @author pttrung\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1163, "comment": "// PrintWriter out = new PrintWriter(new FileOutputStream(new File(\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1163, "comment": "// \"output.txt\")));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1163, "comment": "// System.setOut(new PrintStream(new BufferedOutputStream(System.out), true));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1163, "comment": "//  br = new BufferedReader(new InputStreamReader(new FileInputStream(new File(\"input.txt\"))));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1164, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Amine L\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1165, "comment": "//new Main().soln();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1165, "comment": "//System.out.println(x);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1165, "comment": "//System.out.println(x+\" \"+parent[x]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1165, "comment": "// || (v == other.u && u == other.v));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1165, "comment": "//return Integer.compare(other.r, r);\n"}, "Heuristic": []}, {"nl": {"id": 1165, "comment": "// 1-indexed array, In this array We save cumulative information to perform efficient range queries and updates\n"}, "Heuristic": []}, {"nl": {"id": 1165, "comment": "//Extracting the portion up to the first significant one of the binary representation of 'ind' and decrementing ind by that number\n"}, "Heuristic": []}, {"nl": {"id": 1165, "comment": "//Extracting the portion up to the first significant one of the binary representation of 'ind' and incrementing ind by that number\n"}, "Heuristic": []}, {"nl": {"id": 1165, "comment": "//out.close();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1165, "comment": "//tr(System.currentTimeMillis() - s + \"ms\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1165, "comment": "// To Get Input\n"}, "Heuristic": []}, {"nl": {"id": 1165, "comment": "// Some Buffer Methods\n"}, "Heuristic": []}, {"nl": {"id": 1165, "comment": "// when nextLine, (isSpaceChar(b) && b != '\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1165, "comment": "// ')\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1167, "comment": "// my code starts here\n"}, "Heuristic": []}, {"nl": {"id": 1167, "comment": "// my code ends here\n"}, "Heuristic": []}, {"nl": {"id": 1173, "comment": "// AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1174, "comment": "/**\n *\n * @author Fuad\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1174, "comment": "// TODO code application logic here\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1175, "comment": "// System.out.println(mid);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1175, "comment": "// ans = (mid+1);\n"}, "Heuristic": []}, {"nl": {"id": 1175, "comment": "//\tSystem.out.println(ans);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1175, "comment": "// solve\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1177, "comment": "// my code starts here\n"}, "Heuristic": []}, {"nl": {"id": 1177, "comment": "// my code ends here\n"}, "Heuristic": []}, {"nl": {"id": 1178, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1179, "comment": "// Actually rooted forest\n"}, "Heuristic": []}, {"nl": {"id": 1181, "comment": "/*int x,y;\n\tpublic TestClass(int x,int y)\n\t{\n\t\tthis.x=x;\n\t\tthis.y=y;\n\t}*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1181, "comment": "//Scanner scan=new Scanner(System.in);\n"}, "Heuristic": []}, {"nl": {"id": 1182, "comment": "/*public static void seive(long n){\n\t\tb = new boolean[(int) (n+1)];\n\tArrays.fill(b, true);\n\t\n\t\tfor(int i = 2;i*i<=n;i++){\n\t\t\tif(b[i]){\n\t\t\t\tsum[i]=count[i];\n\t\t\t//\tSystem.out.println(sum[i]+\" wf\");\n\t\t\t\tfor(int p = 2*i;p<=n;p+=i){\n\t\t\t\t\tb[p] = false;\n\t\t\t\t\tsum[i]+=count[p];  \n\t\t\t\t\t//System.out.println(sum[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t}\n\t}*/"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 1182, "comment": "/*public String toString() {\n\t\t\treturn \"[u=\" + u + \", v=\" + v + \"]\";\n\t\t}*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1182, "comment": "//Scanner sc=new Scanner(System.in);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1182, "comment": "//debug(sum);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1182, "comment": "//\tSystem.out.println(sum[i]+\" wf\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1182, "comment": "//System.out.println(sum[i]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1182, "comment": "//binaryStree\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1182, "comment": "// % is remainder\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1183, "comment": "//        InputStream inputStream = new FileInputStream(\"dijkstra.in\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1183, "comment": "//        OutputStream outputStream = new FileOutputStream(\"dijkstra.out\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1184, "comment": "/** Class for buffered reading int and double values */"}, "Heuristic": []}, {"nl": {"id": 1184, "comment": "/** call this method to initialize reader for InputStream */"}, "Heuristic": []}, {"nl": {"id": 1184, "comment": "/** get next word */"}, "Heuristic": []}, {"nl": {"id": 1184, "comment": "//TODO add check for eof if necessary\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1186, "comment": "//System.out.println(\"found: \" + min);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1188, "comment": "// Main solver = new Main(\"input.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1189, "comment": "/*\n\t        \t\t     * Author- Priyam Vora\n\t        \t\t     * BTech 2nd Year DAIICT\n\t        \t\t     */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1189, "comment": "/* class Pair implements Comparable<Pair>{\n\t        \t\t\t\t\n\t    \t\t\t\t\t\n\t    \t\t\t\t\tint ele,ind;\n\t    \t\t\t\t\tPair(int ele,int ind){\n\t    \t\t\t\t\t\n\t    \t\t\t\t\t\tthis.ele=ele;\n\t    \t\t\t\t\t\tthis.ind=ind;\n\t    \t\t\t\t\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\t@Override\n\t    \t\t\t\t\tpublic int compareTo(Pair o) {\n\t    \t\t\t\t\n\t    \t\t\t\t\t\t\t\n\t    \t\t\t\t\t\t\treturn ele-o.ele;\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tpublic int hashCode() {\n\t    \t\t\t\t\t\t\t//int hu = (int) (x ^ (x >>> 32));\n\t    \t\t\t\t\t\t\t//int hv = (int) (y ^ (y >>> 32));\n\t    \t\t\t\t\t\t\t//int hw = (int) (mass ^ (mass >>> 32));\n\t    \t\t\t\t\t\t\t//return 31 * hu + hv ;\n\t    \t\t\t\t\t\treturn 0;\n\t    \t\t\t\t\t\t}\n\t    \t\t\t\t\t\tpublic boolean equals(Object o) {\n\t    \t\t\t\t\t\t\tPair other = (Pair) o;\n\t    \t\t\t\t\t\t//\treturn x == other.x && y == other.y;\n\t    \t\t\t\t\t\treturn false;\n\t    \t\t\t\t\t\t}\n\t    \t\t\t\t}  */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1189, "comment": "//\tprivate static TreeSet<Integer> ts=new TreeSet[200000];\n"}, "Heuristic": []}, {"nl": {"id": 1189, "comment": "// Corner cases\n"}, "Heuristic": []}, {"nl": {"id": 1189, "comment": "// This is checked so that we can skip \n"}, "Heuristic": []}, {"nl": {"id": 1189, "comment": "// middle five numbers in below loop\n"}, "Heuristic": []}, {"nl": {"id": 1189, "comment": "//pw.println(i+\" \"+top);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1189, "comment": "// To Get Input\n"}, "Heuristic": []}, {"nl": {"id": 1189, "comment": "// Some Buffer Methods\n"}, "Heuristic": []}, {"nl": {"id": 1189, "comment": "//int hu = (int) (x ^ (x >>> 32));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1189, "comment": "//int hv = (int) (y ^ (y >>> 32));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1189, "comment": "//int hw = (int) (mass ^ (mass >>> 32));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1189, "comment": "//return 31 * hu + hv ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1189, "comment": "//\treturn x == other.x && y == other.y;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1189, "comment": "//parent=new int[n];\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1192, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Wolfgang Beyer\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1192, "comment": "// if condition(mid) == true\n"}, "Heuristic": []}, {"nl": {"id": 1192, "comment": "//tok = new StringTokenizer(in.readLine(), \", \\t\\n\\r\\f\"); //adds commas as delimeter\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1193, "comment": "//count++;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1194, "comment": "// max\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1194, "comment": "// differential\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1196, "comment": "//    FileWriter writer = new FileWriter(\"input.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1196, "comment": "//    writer.close();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1198, "comment": "/*System.out.println(pot);\n\t\t\tSystem.out.println(k);*/"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 1198, "comment": "//System.out.println(a);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1200, "comment": "// stream = new FileInputStream(new File(\"dec.in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1201, "comment": "/**\n * @author pvasilyev\n * @since 8/16/13\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1201, "comment": "//        final long start = System.currentTimeMillis();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1201, "comment": "//        System.out.println(System.currentTimeMillis() - start);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1203, "comment": "//          System.err.println(cur);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1203, "comment": "//          System.err.println(mid + \" \" + (u + (m - u - k) / (k - 1) * k + k - 1 + (m - u) % (k - 1)) + \" \" + n);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1203, "comment": "//      IOFast.setFileIO(\"rle-size.in\", \"rle-size.out\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1203, "comment": "//      private static final int BUFFER_SIZE = 50 * 200000;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1204, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1204, "comment": "//wrong\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1204, "comment": "//\t\tout.println( full + \", \" + ans );\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1206, "comment": "// for (int moves = 2; moves <= 50; moves++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1206, "comment": "// for (int rightMoves = 2; rightMoves <= moves; rightMoves++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1206, "comment": "// for (int sequence = 2; sequence <= moves; sequence++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1206, "comment": "// if (solveDumb(moves, rightMoves, sequence) != solveSmart(\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1206, "comment": "// moves, rightMoves, sequence)) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1206, "comment": "// out.println(moves + \" \" + rightMoves + \" \" + sequence);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1206, "comment": "// out.flush();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1206, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1206, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1206, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1206, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1206, "comment": "// private long solveDumb(int moves, int rightMoves, int sequence) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1206, "comment": "// long[][][] d = new long[moves + 1][rightMoves + 1][sequence];\n"}, "Heuristic": []}, {"nl": {"id": 1206, "comment": "// long inf = Integer.MAX_VALUE;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1206, "comment": "// for (int i = 0; i <= moves; i++)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1206, "comment": "// for (int j = 0; j <= rightMoves; j++)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1206, "comment": "// Arrays.fill(d[i][j], inf);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1206, "comment": "// d[0][0][0] = 0;\n"}, "Heuristic": []}, {"nl": {"id": 1206, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1206, "comment": "// for (int i = 0; i < moves; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1206, "comment": "// for (int j = 0; j <= rightMoves; j++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1206, "comment": "// for (int k = 0; k < sequence; k++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1206, "comment": "// // right move\n"}, "Heuristic": []}, {"nl": {"id": 1206, "comment": "// if (j < rightMoves) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1206, "comment": "// // last move\n"}, "Heuristic": []}, {"nl": {"id": 1206, "comment": "// if (k + 1 == sequence) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1206, "comment": "// d[i + 1][j + 1][0] = Math.min(d[i + 1][j + 1][0],\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1206, "comment": "// (d[i][j][k] + 1) * 2);\n"}, "Heuristic": []}, {"nl": {"id": 1206, "comment": "// } else {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1206, "comment": "// d[i + 1][j + 1][k + 1] = Math.min(\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1206, "comment": "// d[i + 1][j + 1][k + 1], d[i][j][k] + 1);\n"}, "Heuristic": []}, {"nl": {"id": 1206, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1206, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1206, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1206, "comment": "// // bad move\n"}, "Heuristic": []}, {"nl": {"id": 1206, "comment": "// d[i + 1][j][0] = Math.min(d[i + 1][j][0], d[i][j][k]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1206, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1206, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1206, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1206, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1206, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1206, "comment": "// long result = inf;\n"}, "Heuristic": []}, {"nl": {"id": 1206, "comment": "// for (int i = 0; i < sequence; i++)\n"}, "Heuristic": []}, {"nl": {"id": 1206, "comment": "// result = Math.min(result, d[moves][rightMoves][i]);\n"}, "Heuristic": []}, {"nl": {"id": 1206, "comment": "// return result;\n"}, "Heuristic": []}, {"nl": {"id": 1206, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1207, "comment": "//\t\tSystem.out.println(low);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1208, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1208, "comment": "//            boolean success = false;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1208, "comment": "//            if (stringBuilderValueField != null) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1208, "comment": "//                try {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1208, "comment": "//                    char[] value = (char[]) stringBuilderValueField.get(cache);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1208, "comment": "//                    os.write(value, 0, cache.length());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1208, "comment": "//                    success = true;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1208, "comment": "//                } catch (Exception e) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1208, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1208, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1208, "comment": "//            if (!success) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1208, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1209, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author coderbd\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1210, "comment": "//        for (long i = 0; i < bound; ++i) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1210, "comment": "//            res += k;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1210, "comment": "//            res <<= 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1210, "comment": "//            if (res >= MOD)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1210, "comment": "//                res %= MOD;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1210, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1210, "comment": "//out = new PrintWriter(\"output.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1210, "comment": "//        int N = nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1210, "comment": "//        for (int i = 0; i < N; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1210, "comment": "//            runCase(i + 1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1210, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1211, "comment": "// System.out.println(first);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1212, "comment": "//          System.err.println(cur);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1212, "comment": "//      io.out.println(rec(n, m, 0));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1212, "comment": "//      if(true) return;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1212, "comment": "//          System.err.println(mid + \" \" + (u + (m - u - k) / (k - 1) * k + k - 1 + (m - u) % (k - 1)) + \" \" + n);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1212, "comment": "//      IOFast.setFileIO(\"rle-size.in\", \"rle-size.out\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1212, "comment": "//      private static final int BUFFER_SIZE = 50 * 200000;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1213, "comment": "//package cf196;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1214, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1215, "comment": "// practice with rainboy\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1216, "comment": "//\trec(n, m);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1216, "comment": "//\tSystem.out.println(sc);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1217, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1218, "comment": "/** call this method to initialize reader for InputStream */"}, "Heuristic": []}, {"nl": {"id": 1218, "comment": "/** get next word */"}, "Heuristic": []}, {"nl": {"id": 1218, "comment": "//Scanner input = new Scanner(new File(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1218, "comment": "//PrintWriter out = new PrintWriter(new File(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1218, "comment": "//TODO add check for eof if necessary\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1219, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author RiaD\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1219, "comment": "//out.println(r);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1220, "comment": "/**\n * Date: 23.06.13 at 15:29\n *\n * @author Nickolay Polyarniy aka PolarNick\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1220, "comment": "//                res = (res + (k - 1) * tmp) % MOD;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1220, "comment": "//        out.println(\"mTmp=\" + mTmp + \"Full: \" + fullC);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1220, "comment": "//        out.println(\"After full: \" + res);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1222, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author ffao\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1226, "comment": "//          out.println(score);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1227, "comment": "/*\n\n\n\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 1228, "comment": "/*\n    \t\tret+=pow(K, x+1);\n    \t\tret%=MOD;*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1228, "comment": "//stdin\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1228, "comment": "//System.err.println(\"Input: \" + line);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1228, "comment": "//System.out.println(\"I read this number: \" + val);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1228, "comment": "//String filePath=\"input.txt\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1229, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1230, "comment": "//in = new BufferedReader(new FileReader(\"a.in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1230, "comment": "//out = new PrintWriter(new FileWriter(\"a.out\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1231, "comment": "//deb////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1231, "comment": "/////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1231, "comment": "//  in = new StreamTokenizer(new BufferedReader(new FileReader(\"circles.in\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1231, "comment": "//  out = new PrintWriter(new FileWriter(\"circles.out\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1231, "comment": "//   BufferedReader re= new BufferedReader(new FileReader(\"C:\\\\Users\\\\ASELA\\\\Desktop\\\\A.in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1231, "comment": "// BufferedReader re = new BufferedReader(new InputStreamReader(System.in));\n"}, "Heuristic": []}, {"nl": {"id": 1231, "comment": "// System.out.println(\"sjkd\"+rem);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1232, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author BSRK Aditya\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1237, "comment": "/*Random rnd = new Random(123);\n\t\tfor (int t = 0; t < 10000; t++) {\n\t\t\tSystem.err.println(t);\n\t\t\tint n = rnd.nextInt(100) + 2;\n\t\t\tint m = rnd.nextInt(n + 1);\n\t\t\tint k = rnd.nextInt(n - 1) + 2;\n\n\t\t\tif (t == 16) {\n\t\t\t\tSystem.err.println(\"!\");\n\t\t\t}\n\t\t\tlong r1 = mysol(n, m, k);\n\t\t\tlong r2 = st(n, m, k);\n\t\t\tif (r1 != r2)\n\t\t\t\tthrow new AssertionError(r1 + \" \" + r2);\n\n\t\t}*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1238, "comment": "//\t\tdebug(\"remain\", remain);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1238, "comment": "//\t\tdebug(\"ans\", ans);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1238, "comment": "//\t\tdebug(\"remain2\", remain);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1238, "comment": "//\t\tdebug(\"add\", add);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1238, "comment": "//\t\tdebug(ans);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1239, "comment": "//package round196;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1239, "comment": "//\t\ta %= mod;\n"}, "Heuristic": []}, {"nl": {"id": 1239, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1242, "comment": "/**\n * Created by hama_du on 15/09/10.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1244, "comment": "//\t\tlong a = 2;\n"}, "Heuristic": []}, {"nl": {"id": 1244, "comment": "//\t\tint q = nextInt();\n"}, "Heuristic": []}, {"nl": {"id": 1244, "comment": "//\t\tlong sum = a;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1244, "comment": "//\t\tint s = q;\n"}, "Heuristic": []}, {"nl": {"id": 1244, "comment": "//\t\tfor (int i = 2; i <= s; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1244, "comment": "//\t\t\ta = a*2+2;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1244, "comment": "//\t\t\tsum += a;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1244, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1244, "comment": "//\t\tSystem.out.println(sum);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1244, "comment": "//\t\tSystem.out.println((4*((long)Math.pow(2, s)-1)-2*s));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1244, "comment": "//\t\t\tans = ans * 4 % mod;\n"}, "Heuristic": []}, {"nl": {"id": 1244, "comment": "//\t\t\tans = (ans-2*cnt+2*mod) % mod;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1245, "comment": "// Solution is at the bottom of code\n"}, "Heuristic": []}, {"nl": {"id": 1245, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1245, "comment": "////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1245, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1245, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1245, "comment": "/////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1245, "comment": "/////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1245, "comment": "///////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1245, "comment": "////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1245, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1245, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1245, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1245, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1245, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1245, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1247, "comment": "//N^M % MOD\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1249, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1250, "comment": "/**\n * Created by aditya on 5/3/17.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1250, "comment": "//        System.out.println(pow(2, k+1));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1250, "comment": "//        System.out.println(q1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1250, "comment": "//        System.out.println(q2);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1250, "comment": "//        System.out.println(q3);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1250, "comment": "//        exp = (exp*2)%MOD;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1251, "comment": "//Input Reader\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1251, "comment": "//    private static int nextInt() throws IOException {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1251, "comment": "//        return Integer.parseInt(next());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1251, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1251, "comment": "//    private static long nextLong() throws IOException {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1251, "comment": "//        return Long.parseLong(next());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1251, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1251, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1251, "comment": "//    //    Get a whole line.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1251, "comment": "//    private static String line() throws IOException {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1251, "comment": "//        return reader.readLine();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1251, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1251, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1251, "comment": "//    private static double nextDouble() throws IOException {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1251, "comment": "//        return Double.parseDouble(next());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1251, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1253, "comment": "//in.nextInt();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1256, "comment": "//package CF489; //comment this line\n"}, "Heuristic": []}, {"nl": {"id": 1256, "comment": "//System.out.println(); //comment this line\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1257, "commentn"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1258, "comment": "/*\n * Author    : joney_000[jaswantsinghyada007@gmail.com]\n * Algorithm : N/A\n * Platform  : Codeforces\n * Ref       : \n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 1258, "comment": "// stdIO = false;\n"}, "Heuristic": []}, {"nl": {"id": 1258, "comment": "// 20*20   nCr Pascal Table\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1258, "comment": "//  IMP: roundoff upto 2 digits \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1258, "comment": "//  double roundOff = Math.round(a * 100.0) / 100.0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1258, "comment": "//                    or\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1258, "comment": "//  System.out.printf(\"%.2f\", val);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1258, "comment": "//  print upto 2 digits after decimal\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1258, "comment": "//  val = ((long)(val * 100.0))/100.0;    \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1260, "comment": "//package que_a;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1260, "comment": "//Enter code here utkarsh\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1260, "comment": "//SHOW_TIME = true;\n"}, "Heuristic": []}, {"nl": {"id": 1260, "comment": "//---------- I/O Template ----------\n"}, "Heuristic": []}, {"nl": {"id": 1260, "comment": "//no input \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1263, "comment": "/*\n\t1000000000000000000\n\t */"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 1263, "comment": "/*\n\t1000000000000000000 1000000000000000000\n\t */"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 1263, "comment": "//System.out.println(2+\" \"+(k+1)+\" \"+m);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1263, "comment": "//System.out.println(coeff);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1263, "comment": "//System.out.println(r);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1263, "comment": "// Initialize result\n"}, "Heuristic": []}, {"nl": {"id": 1263, "comment": "// Update x if it is more  \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1263, "comment": "// than or equal to p\n"}, "Heuristic": []}, {"nl": {"id": 1263, "comment": "// If y is odd, multiply x\n"}, "Heuristic": []}, {"nl": {"id": 1263, "comment": "// with result\n"}, "Heuristic": []}, {"nl": {"id": 1263, "comment": "// y must be even now\n"}, "Heuristic": []}, {"nl": {"id": 1263, "comment": "// y = y / 2\n"}, "Heuristic": []}, {"nl": {"id": 1265, "comment": "/**\n * Created by Baelish on 6/18/2018.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1265, "comment": "/* public char nextChar() {\n            return (char)skip();\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1265, "comment": "/*private char buff[] = new char[1005];\n        public char[] nextCharArray(){\n            int b = skip(), p = 0;\n            while(!(isSpaceChar(b))){\n                buff[p++] = (char)b;\n                b = readByte();\n            }\n            return Arrays.copyOf(buff, p);\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1265, "comment": "// long a = bigMod(2, k+1, mod );long b = bigMod(2, k, mod);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1265, "comment": "// debug(a, b, x);\n"}, "Heuristic": []}, {"nl": {"id": 1265, "comment": "// long s = ((a * x) % mod - b % mod + 1 + mod) % mod;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1265, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1267, "comment": "/* spar5h */"}, "Heuristic": ["H7"]}, {"nl": {"id": 1268, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author prakharjain\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1269, "comment": "/*e=e%mod;*/"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 1272, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1273, "comment": "/****************************** START READING HERE ********************************/"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "/************************** UTILITY CODE BELOW THIS LINE **************************/"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "/** Union Find / Disjoint Set data structure. */"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "/* Find roots */"}, "Heuristic": ["H7"]}, {"nl": {"id": 1273, "comment": "/* Already in the same set */"}, "Heuristic": ["H7"]}, {"nl": {"id": 1273, "comment": "/* Merge smaller set into larger set. */"}, "Heuristic": ["H7"]}, {"nl": {"id": 1273, "comment": "/** maxLenSum = maximum possible sum of length of words */"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "/** For heavy calculations on probabilities, this class\n             *  provides more accuracy & efficiency than doubles.\n             *  Math explained: https://en.wikipedia.org/wiki/Log_probability\n             *  Quick start:\n             *      - Instantiate probabilities, eg. Prob a = new Prob(0.75)\n             *      - add(), multiply() return new objects, can perform on nulls & NaNs.\n             *      - get() returns probability as a readable double */"}, "Heuristic": ["H1", "H9"]}, {"nl": {"id": 1273, "comment": "/** Logarithmized probability. Note: 0% represented by logP NaN. */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1273, "comment": "/** Construct instance with real probability. */"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "/** Construct instance with already logarithmized value. */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1273, "comment": "/** Returns real probability as a double. */"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "/***************** STATIC METHODS BELOW ********************/"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "/** Note: returns NaN only when a && b are both NaN/null. */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1273, "comment": "/** Note: multiplying by null or NaN produces NaN (repping 0% real prob). */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1273, "comment": "/** Returns true if p is null or NaN. */"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "/** Returns a new instance with the same value as original. */"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "/**\n             * Use example: Binary b = new Binary(Long.toBinaryString(53249834L));\n             *\n             * When manipulating small binary strings, instantiate new Binary(string)\n             * When just reading large binary strings, instantiate new Binary(string,true)\n             * get(int i) returns a character '1' or '0', not an int.\n             */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1273, "comment": "/************************** Range queries **************************/"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "/** a[0] must be unused. */"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "/** Do not modify i=0. */"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "/** Returns sum from a to b, *BOTH* inclusive. */"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "/** Query sums with log(n) modifyRange */"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "/* TODO: Test that this works. */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1273, "comment": "/***************************** Graphs *****************************/"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "/** Kosaraju's algorithm */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1273, "comment": "/** Use: getCount(2, new int[] {1,2}, new int[] {2,1}) */"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "/* O(n log n) Initialize: new LCAFinder(graph)\n             * O(log n) Queries: find(a,b) returns lowest common ancestor for nodes a and b */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1273, "comment": "/**************************** Geometry ****************************/"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "/****************************** Math ******************************/"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "/** Chained calls to Euclidean algorithm. */"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "/** Euclidean algorithm. */"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "/* Sieve of Eratosthenes. Practically O(n). Values of 0 indicate primes. */"}, "Heuristic": ["H7"]}, {"nl": {"id": 1273, "comment": "/** Least common multiple */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1273, "comment": "/* Palauttaa luvun esityksen kannassa base */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1273, "comment": "/* Palauttaa luvun esityksen kannassa baseTo, kun annetaan luku Stringin\u00e4 kannassa baseFrom */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1273, "comment": "/* Tulkitsee kannassa base esitetyn luvun longiksi (kannassa 10) */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1273, "comment": "/** Total number of K sized unique combinations from pool of size N (unordered)\n             N! / ( K! (N - K)! )   */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1273, "comment": "/** For simple queries where output fits in long. */"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "/** For multiple queries with same n, different k. */"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "/** When output needs % MOD. */"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "/**************************** Strings ****************************/"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "/**\n             * Indices are inclusive.\n             */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1273, "comment": "/**\n             * Efficient for 2 input parameter strings in particular.\n             */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1273, "comment": "/**\n             * Efficient for 3+ strings\n             * More efficient than multiple hashString calls IF strings are same length.\n             */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1273, "comment": "/*************************** Technical ***************************/"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "/** Print, flush, return nextInt. */"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "/** Print, flush, return nextLong. */"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "/** Print, flush, return next word. */"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "//package baobab;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1273, "comment": "// TODO how to exclude from counts cases where dresses are negative?\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 1273, "comment": "// last month no eating\n"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "// Check if double is close to zero, considering precision issues.\n"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "//en.wikipedia.org/wiki/Log_probability\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1273, "comment": "// Starting from left, the first (most remarkable) '1'\n"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "// Update left tree\n"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "// Update right tree\n"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "// parent right hand side\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1273, "comment": "// value from the other tree\n"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "// parent left hand side\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1273, "comment": "// value from the other tree\n"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "// Move to next uplink on the RIGHT side of i\n"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "// Move to next uplink on the LEFT side of i\n"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "// make sure all have initialized lists\n"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "// topoSort variables\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1273, "comment": "// Returns true if segment 1-2 intersects segment 3-4\n"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "// Both segments are vertical\n"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "// Only segment 1-2 is vertical. Does segment 3-4 cross it? y = a*x + b\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 1273, "comment": "// Only segment 3-4 is vertical. Does segment 1-2 cross it? y = a*x + b\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 1273, "comment": "// Parallel lines\n"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "// Non parallel non vertical lines intersect at x. Is x part of both segments?\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 1273, "comment": "// Just call this\n"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "// nC0 == 1\n"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "// Pascal's triangle\n"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "// nC0 == 1\n"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "// Pascal's triangle\n"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "// this is alternative use case\n"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "// Less interesting methods below\n"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "// if all strings are not same length, defer work to another method\n"}, "Heuristic": []}, {"nl": {"id": 1273, "comment": "// otherwise initialize stuff\n"}, "Heuristic": []}, {"nl": {"id": 1275, "comment": "//A and M are coprime\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1275, "comment": "//x may be negative\n"}, "Heuristic": []}, {"nl": {"id": 1275, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1276, "comment": "/*\n * \n * @Author  Ajudiya_13(Bhargav Girdharbhai Ajudiya)\n * Dhirubhai Ambani Institute of Information And Communication Technology \n * \n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 1277, "comment": "/*long binpow(long a, long n) {\n        long r = 1;\n        while (n > 0) {\n            if ((n & 1) > 0) {\n                r *= a;\n            }\n            a *= a;\n            n /= 2;\n        }\n        return r;\n    }/**/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1277, "comment": "/**/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 1277, "comment": "//long r2 = solveSlow(x, k) % mod;\n"}, "Heuristic": []}, {"nl": {"id": 1277, "comment": "//System.out.println(r2);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1277, "comment": "//-------------------------------------------------\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1277, "comment": "//System.err.println(\"Memory = \" + ((totalMemory - freeMemory) / 1024) + \" KB\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1278, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author kanak893\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1279, "comment": "//        String fileName = \"C-large\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1279, "comment": "//        ConsoleIO io = new ConsoleIO(new FileReader(\"D:\\\\Dropbox\\\\code\\\\practice\\\\jb\\\\src\\\\\" + fileName + \".in\"), new PrintWriter(new File(\"D:\\\\Dropbox\\\\code\\\\practice\\\\jb\\\\src\\\\\" + fileName + \".out\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1279, "comment": "//        new Main(io).solveLocal();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1279, "comment": "//public char readChar(){try {return (char)br.read();}catch (Exception ex){ return 0; }}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1280, "comment": "/* package whatever; // don't place package name! */"}, "Heuristic": ["H7"]}, {"nl": {"id": 1280, "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1280, "comment": "// don't place package name! */\n"}, "Heuristic": []}, {"nl": {"id": 1283, "comment": "// Matt Fontaine's Fast IO\n"}, "Heuristic": []}, {"nl": {"id": 1285, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author bacali\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1287, "comment": "/**\n * Created by artur on 18/06/18\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1287, "comment": "//        for (int sx = 0; sx < 100; sx++)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1287, "comment": "//        {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1287, "comment": "//            for (int sk = 0; sk < 100; sk++)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1287, "comment": "//            {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1287, "comment": "//                BigInteger n = BigInteger.valueOf(2)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1287, "comment": "//                        .modPow(BigInteger.valueOf(k + 1), BigInteger.valueOf(mod))\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1287, "comment": "//                        .multiply(BigInteger.valueOf(x))\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1287, "comment": "//                        .add(BigInteger.ONE)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1287, "comment": "//                        .subtract(BigInteger.valueOf(2)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1287, "comment": "//                                .modPow(BigInteger.valueOf(k), BigInteger.valueOf(mod)))\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1287, "comment": "//                        .mod(BigInteger.valueOf(mod));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1287, "comment": "//                long res = n.longValue();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1287, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1287, "comment": "//                long aux = aux(sx, sk);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1287, "comment": "//                if ((res % mod) != aux) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1287, "comment": "//                    System.out.println(sx + \" \" + sk + \": \" + res + \" \" + aux);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1287, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1287, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1287, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1287, "comment": "// % is remainder\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1288, "comment": "/* This index, and everything below it, must not be the first element\n\t\t\t\t * greater than what we're looking for because this element is no greater\n\t\t\t\t * than the element.\n\t\t\t\t */"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 1288, "comment": "/* This element is at least as large as the element, so anything after it can't\n\t\t\t\t * be the first element that's at least as large.\n\t\t\t\t */"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 1288, "comment": "/* This index, and everything below it, must not be the first element\n\t\t\t\t * greater than what we're looking for because this element is no greater\n\t\t\t\t * than the element.\n\t\t\t\t */"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 1288, "comment": "/* This element is at least as large as the element, so anything after it can't\n\t\t\t\t * be the first element that's at least as large.\n\t\t\t\t */"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 1288, "comment": "/* Check if o is an instance of Complex or not\n\t          \"null instanceof [type]\" also returns false */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1288, "comment": "// method to print the divisors\n"}, "Heuristic": []}, {"nl": {"id": 1288, "comment": "// Note that this loop runs till square root\n"}, "Heuristic": []}, {"nl": {"id": 1288, "comment": "// If divisors are equal, print only one\n"}, "Heuristic": []}, {"nl": {"id": 1288, "comment": "// Otherwise print both\n"}, "Heuristic": []}, {"nl": {"id": 1288, "comment": "// Base Case\n"}, "Heuristic": []}, {"nl": {"id": 1288, "comment": "//int x1=1, y1=1; // To store results of recursive call\n"}, "Heuristic": []}, {"nl": {"id": 1288, "comment": "// Update x and y using results of recursive\n"}, "Heuristic": []}, {"nl": {"id": 1288, "comment": "// call\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1288, "comment": "//how many swaps to be a 1 matrix\n"}, "Heuristic": []}, {"nl": {"id": 1288, "comment": "/// begin by 0 and n-1\n"}, "Heuristic": []}, {"nl": {"id": 1288, "comment": "/// searching for the index of first elment greater than x\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1288, "comment": "// numElems is the size of the array i.e arr.size() \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1288, "comment": "// Or a fancy way to avoid int overflow\n"}, "Heuristic": []}, {"nl": {"id": 1288, "comment": "// return high ; \n"}, "Heuristic": []}, {"nl": {"id": 1288, "comment": "////// searching for last element less than X \n"}, "Heuristic": []}, {"nl": {"id": 1288, "comment": "// numElems is the size of the array i.e arr.size() \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1288, "comment": "// Or a fancy way to avoid int overflow\n"}, "Heuristic": []}, {"nl": {"id": 1288, "comment": "// return high ; \n"}, "Heuristic": []}, {"nl": {"id": 1288, "comment": "// return high ; \n"}, "Heuristic": []}, {"nl": {"id": 1288, "comment": "//\t\tpublic static long getSmallestDivisor( long y){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1288, "comment": "//\t\t\tif(isPrime(y))\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1288, "comment": "//\t\t\t\treturn -1;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1288, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1288, "comment": "//\t\t\tfor (long i = 2; i*i <= y; i++)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1288, "comment": "//\t\t\t{\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1288, "comment": "//\t\t\t\tif(y%i ==0)\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1288, "comment": "//\t\t\t\t{\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1288, "comment": "//\t\t\t\t\treturn i;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1288, "comment": "//\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1288, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1288, "comment": "//\t\t\treturn -1;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1288, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1288, "comment": "//\t\t\tArrayList<Integer> s = new ArrayList<Integer>() ;\n"}, "Heuristic": []}, {"nl": {"id": 1288, "comment": "//\t\t\tfor (int i = n-1; i >=0; i--)\n"}, "Heuristic": []}, {"nl": {"id": 1288, "comment": "//\t\t\t{\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1288, "comment": "//\t\t\t\tif(lis[i]==max)\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1288, "comment": "//\t\t\t\t{\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1288, "comment": "//\t\t\t\t\ts.add(a[i].z);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1288, "comment": "//\t\t\t\t\tmax --; \n"}, "Heuristic": []}, {"nl": {"id": 1288, "comment": "//\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1288, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1288, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1288, "comment": "//\t\t\tfor (int i = s.size()-1 ; i>=0 ;  i--)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1288, "comment": "//\t\t\t{\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1288, "comment": "//\t\t\t\tSystem.out.print(s.get(i)+\" \");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1288, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1288, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1288, "comment": "// meaning it has been updated before;\n"}, "Heuristic": []}, {"nl": {"id": 1288, "comment": "// n must be odd at this point.  So we can\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1288, "comment": "// skip one element (Note i = i +2)\n"}, "Heuristic": []}, {"nl": {"id": 1288, "comment": "// While i divides n, print i and divide n\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1288, "comment": "// This condition is to handle the case whien\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1288, "comment": "// n is a prime number greater than 2\n"}, "Heuristic": []}, {"nl": {"id": 1288, "comment": "//\t\tpublic static boolean dfs(Vertix v , int target){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1288, "comment": "//\t\t\ttry{\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1288, "comment": "//\t\t\t\tvisited[v.i]= true ;\n"}, "Heuristic": []}, {"nl": {"id": 1288, "comment": "//\t\t\t} catch (NullPointerException e)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1288, "comment": "//\t\t\t{\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1288, "comment": "//\t\t\t\tSystem.out.println(v.i);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1288, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1288, "comment": "//\t\t\tif(v.i == target)\n"}, "Heuristic": []}, {"nl": {"id": 1288, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1288, "comment": "//\t\t\t\treturn true ;\n"}, "Heuristic": []}, {"nl": {"id": 1288, "comment": "//\t\t\tfor (int i =0 ; i< v.neighbours.size() ; i++)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1288, "comment": "//\t\t\t{ \n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1288, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1288, "comment": "//\t\t\t\tVertix child = v.neighbours.get(i) ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1288, "comment": "//\t\t\t\tif(child.i == target){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1288, "comment": "//\t\t\t\t\tfound = true  ; \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1288, "comment": "//\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1288, "comment": "//\t\t\t\tif(visited[child.i]==false){\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1288, "comment": "//\t\t\t\t\tfound |= dfs(child, target) ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1288, "comment": "//\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1288, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1288, "comment": "//\t\t\treturn found; \n"}, "Heuristic": []}, {"nl": {"id": 1288, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1288, "comment": "// If the object is compared with itself then return true  \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1288, "comment": "// typecast o to Complex so that we can compare data members \n"}, "Heuristic": []}, {"nl": {"id": 1288, "comment": "// Compare the data members and return accordingly \n"}, "Heuristic": []}, {"nl": {"id": 1289, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Vadim Semenov\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1290, "comment": "// Scanner scan = new Scanner(System.in);\n"}, "Heuristic": []}, {"nl": {"id": 1290, "comment": "// int n = Integer.parseInt(bf.readLine());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1290, "comment": "// int[] a = new int[n]; for(int i=0; i<n; i++) a[i] = Integer.parseInt(st.nextToken());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1290, "comment": "// int n = scan.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1291, "comment": "/*\n        long l=ni(),r=ni(),x=ni(),y=ni();\n        long prod=x;\n        prod*=y;\n        int cnt=0;\n        if(l==r && r==x && x==y && x==1)\n        {\n            System.out.println(1);\n            return;\n        }\n        //HashSet<Long> set=new HashSet<>();\n        for(long i=2;i<=Math.sqrt(prod);i++)\n        {\n            if(prod%i==0)\n            {\n                if(Math.min(i,prod/i)>=l && Math.max(i,prod/i)<=r && gcd(i,prod/i)==x)\n                {\n                    //set.add(fnc2(i,prod/i));\n                    //set.add(fnc2(prod/i,i));\n                    if(i!=prod/i)cnt+=2;\n                    else cnt++;\n                }\n            }\n        }\n        ArrayList<Long> factors=new ArrayList<>();\n        while(prod!=1)\n        {\n            long currF=PollardRho(prod);\n            while(prod%currF!=0)\n            {\n                prod/=currF;\n                factors.add(currF);\n            }\n\n        }\n\n        if(l==1)\n        {\n            System.out.println((cnt+2));\n        }\n        else\n        {\n            System.out.println(cnt);\n        }\n\n*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1291, "comment": "/* method to return prime divisor for n */"}, "Heuristic": ["H7"]}, {"nl": {"id": 1291, "comment": "/* initialize random seed */"}, "Heuristic": ["H7"]}, {"nl": {"id": 1291, "comment": "/* no prime divisor for 1 */"}, "Heuristic": ["H7"]}, {"nl": {"id": 1291, "comment": "/* even number means one of the divisors is 2 */"}, "Heuristic": ["H7"]}, {"nl": {"id": 1291, "comment": "/* we will pick from the range [2, N) */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1291, "comment": "/* the constant in f(x).\n         * Algorithm can be re-run with a different c\n         * if it throws failure for a composite. */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1291, "comment": "/* Initialize candidate divisor (or result) */"}, "Heuristic": ["H7"]}, {"nl": {"id": 1291, "comment": "/* until the prime factor isn't obtained.\n       If n is prime, return n */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1291, "comment": "/* Tortoise Move: x(i+1) = f(x(i)) */"}, "Heuristic": ["H7"]}, {"nl": {"id": 1291, "comment": "/* Hare Move: y(i+1) = f(f(y(i))) */"}, "Heuristic": ["H7"]}, {"nl": {"id": 1291, "comment": "/* check gcd of |x-y| and n */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1291, "comment": "/* retry if the algorithm fails to find prime factor\n             * with chosen x and c */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1291, "comment": "//boolean codechef=true;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1291, "comment": "//HashSet<Long> set=new HashSet<>();\n"}, "Heuristic": []}, {"nl": {"id": 1291, "comment": "//set.add(fnc2(i,prod/i));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1291, "comment": "//set.add(fnc2(prod/i,i));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1291, "comment": "//val*=2;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1291, "comment": "//srand (time(NULL));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1291, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1292, "comment": "// Helper.tr(n * p + 1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1293, "comment": "//\tSystem.out.println(power(2,9,1000000007));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1293, "comment": "//out.println(s);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1293, "comment": "//out.println(e);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1293, "comment": "// Initialize result\n"}, "Heuristic": []}, {"nl": {"id": 1293, "comment": "// Update x if it is more  \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1293, "comment": "// than or equal to p\n"}, "Heuristic": []}, {"nl": {"id": 1293, "comment": "// If y is odd, multiply x\n"}, "Heuristic": []}, {"nl": {"id": 1293, "comment": "// with result\n"}, "Heuristic": []}, {"nl": {"id": 1293, "comment": "// y must be even now\n"}, "Heuristic": []}, {"nl": {"id": 1293, "comment": "// y = y / 2\n"}, "Heuristic": []}, {"nl": {"id": 1294, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Vadim Semenov\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1295, "comment": "/*public int hashCode()\n        {\n            return new Long(x).hashCode() * 31 + new Long(y).hashCode();\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1296, "comment": "//package round489;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1296, "comment": "///////// begin\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1296, "comment": "// A^e*v\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1296, "comment": "// int matrix*int vector\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1296, "comment": "// int matrix^2 (be careful about negative value)\n"}, "Heuristic": []}, {"nl": {"id": 1296, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1297, "comment": "/*\t}else{\n\t\t\tans = 0;\n\t\t}\n\t\t*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 1297, "comment": "//\t\tif(x != 0){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1298, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1300, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author kessido\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1301, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1302, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author ankur\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1302, "comment": "/*-*------clare------\n//remeber while comparing 2 non primitive data type not to use ==\n//remember Arrays.sort for primitive data has worst time case complexity of 0(n^2) bcoz it uses quick sort\n//again silly mistakes ,yr kb tk krta rhega ye mistakes\n//try to write simple codes ,break it into simple things\n//knowledge>rating\n        /*\n        public class Main\n        implements Runnable{\n    public static void main(String[] args) {\n        new Thread(null,new Main(),\"Main\",1<<26).start();\n\n    }\n    public void run() {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();//chenge the name of task\n        solver.solve(1, in, out);\n        out.close();\n    }\n         */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1302, "comment": "//*-*------clare------\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1302, "comment": "//remeber while comparing 2 non primitive data type not to use ==\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1302, "comment": "//remember Arrays.sort for primitive data has worst time case complexity of 0(n^2) bcoz it uses quick sort\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1302, "comment": "//again silly mistakes ,yr kb tk krta rhega ye mistakes\n"}, "Heuristic": ["H1", "H4"]}, {"nl": {"id": 1302, "comment": "//try to write simple codes ,break it into simple things\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1302, "comment": "//knowledge>rating\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1302, "comment": "//chenge the name of task\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1303, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Jenish\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1304, "comment": "/** Built using CHelper plug-in Actual solution is at the top */"}, "Heuristic": []}, {"nl": {"id": 1307, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Allen Li\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1309, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1309, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1309, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1310, "comment": "//package pack;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1313, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1314, "comment": "//package com.company;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1314, "comment": "//        Scanner sc = new Scanner(new FileInputStream(\"Test.in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1314, "comment": "//        PrintWriter pw = new PrintWriter(new FileOutputStream(\"Test.out\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1314, "comment": "//        PrintWriter pw = new PrintWriter(new FileOutputStream(\"Test.in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1315, "comment": "//    long mul(long a, long b,long M)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1315, "comment": "//    {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1315, "comment": "//        return (a*1L*b)%M;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1315, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1315, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1317, "comment": "/*\n\t\tfor(long i = 1234567890; i < 1234567999; i++){\n\t\t\tans = (exp(2, i+1)*x - (exp(2, i) - 1))%M;\n\t\t\tif(ans < 0) ans += M;\n\t\t\tSystem.out.println(ans);\n\t\t}\n\t\t/*\n\t\tSystem.out.println((k-1)/2);\n\t\tSystem.out.println(x);\n\t\tSystem.out.println(exp(2, k));\n\t\tSystem.out.println(exp(2, k+1));\n\t\t*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 1318, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1323, "comment": "// q is quotient\n"}, "Heuristic": []}, {"nl": {"id": 1323, "comment": "// m is remainder now, process same as\n"}, "Heuristic": []}, {"nl": {"id": 1323, "comment": "// Euclid's algo\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1323, "comment": "// Update y and x\n"}, "Heuristic": []}, {"nl": {"id": 1323, "comment": "// Make x positive\n"}, "Heuristic": []}, {"nl": {"id": 1323, "comment": "// Initialize result\n"}, "Heuristic": []}, {"nl": {"id": 1323, "comment": "// Update x if it is more\n"}, "Heuristic": []}, {"nl": {"id": 1323, "comment": "// than or equal to p\n"}, "Heuristic": []}, {"nl": {"id": 1323, "comment": "// If y is odd, multiply x\n"}, "Heuristic": []}, {"nl": {"id": 1323, "comment": "// with result\n"}, "Heuristic": []}, {"nl": {"id": 1323, "comment": "// y must be even now\n"}, "Heuristic": []}, {"nl": {"id": 1323, "comment": "// y = y / 2\n"}, "Heuristic": []}, {"nl": {"id": 1325, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Rishabhdeep Singh\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1326, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Rishabhdeep Singh\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1327, "comment": "// Solution\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1327, "comment": "//FastReader in = new FastReader(new BufferedReader(new FileReader(\"Main.in\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1327, "comment": "//e.printStackTrace();\n"}, "Heuristic": []}, {"nl": {"id": 1327, "comment": "//e.printStackTrace();\n"}, "Heuristic": []}, {"nl": {"id": 1328, "comment": "/*\n * Heart beats fast\n * \t\tColors and promises\n * \t\t\tHow to be brave\n * \t\t\t\tHow can I love when I am afraid...\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 1328, "comment": "///////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1328, "comment": "///////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1328, "comment": "///template from here\n"}, "Heuristic": []}, {"nl": {"id": 1328, "comment": "//output functions////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1328, "comment": "//////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1328, "comment": "//input functions/////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1328, "comment": "//////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1328, "comment": "//some utility functions\n"}, "Heuristic": []}, {"nl": {"id": 1329, "comment": "//x > 0, n > 0\n"}, "Heuristic": []}, {"nl": {"id": 1329, "comment": "//    a %= mod;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1329, "comment": "// 1%mod if mod=1,n=0\n"}, "Heuristic": []}, {"nl": {"id": 1330, "comment": "/*void bfs(int k) {\n\t\t\twhile(!q.isEmpty()) {\n\t\t\t\tint y = q.poll();\n\t\t\t\tfor(long i : amp[y]) {\n\t\t\t\t\tif(!b[i]) {\n\t\t\t\t\t\tD[i][k] = D[y][k]+1;\n\t\t\t\t\t\tq.add(i);\n\t\t\t\t\t\tb[i] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t*/"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 1330, "comment": "/*\n\t\tint dfs(int x) {\n\t\t\tb[x] = true;\n\t\t\t//start[x] = time++;\n\t\t\tint ans = 1;\n\t\t\tfor(int i : amp[x]) {\n\t\t\t\tif(!b[i]) {\n\t\t\t\t\tans += dfs(i);\n\t\t\t\t}\n\t\t\t}\n\t\t\t//end[x] = time;\n\t\t\tif(x!= 0 && ans%2==0 && (N-ans)%2==0) cost++;\n\t\t\t\t\n\t\t\treturn ans;\n\t\t}*/"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 1330, "comment": "/*void buildGraph(int n) \n\t\t{\n\t\t\tfor (int i = 0; i < n; i++) \n\t\t\t{\n\t\t\t\tint x1 = ni() - 1, y1 = ni() - 1;\n\t\t\t\tamp[x1].add(y1);\n\t\t\t\tamp[y1].add(x1);\n\t\t\t}\n\t\t}*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1330, "comment": "// tr(System.currentTimeMillis() - s + \"ms\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1330, "comment": "// new CODEFORCES().soln();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1330, "comment": "//start[x] = time++;\n"}, "Heuristic": []}, {"nl": {"id": 1330, "comment": "//end[x] = time;\n"}, "Heuristic": []}, {"nl": {"id": 1330, "comment": "// To Get Input\n"}, "Heuristic": []}, {"nl": {"id": 1330, "comment": "// Some Buffer Methods\n"}, "Heuristic": []}, {"nl": {"id": 1330, "comment": "// when nextLine, (isSpaceChar(b) && b != '\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1330, "comment": "// ')\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1332, "comment": "/** Class for buffered reading int and double values */"}, "Heuristic": []}, {"nl": {"id": 1332, "comment": "/** call this method to initialize reader for InputStream */"}, "Heuristic": []}, {"nl": {"id": 1332, "comment": "/** get next word */"}, "Heuristic": []}, {"nl": {"id": 1332, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1332, "comment": "//TODO add check for eof if necessary\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1333, "comment": "//out.println(mod);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1337, "comment": "/**\n * #\n * @author pttrung\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1337, "comment": "// PrintWriter out = new PrintWriter(new FileOutputStream(new File(\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1337, "comment": "// \"output.txt\")));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1337, "comment": "//System.out.println(\"Minx \" + minX);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1337, "comment": "// System.out.println(\"Maxx \" + maxX);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1337, "comment": "// System.out.println(\"MinY \" + minY);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1337, "comment": "// System.out.println(\"MaxY \" + maxY);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1337, "comment": "//System.out.println(\"MiddleMinX \" + middleMinX);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1337, "comment": "// System.out.println(\"MiddleMaxX \" + middleMaxX);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1337, "comment": "//System.out.println(\"MiddleMinY \" + middleMinY);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1337, "comment": "//System.out.println(\"MiddleMaxY \" + middleMaxY);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1337, "comment": "// System.setOut(new PrintStream(new BufferedOutputStream(System.out), true));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1337, "comment": "//  br = new BufferedReader(new InputStreamReader(new FileInputStream(new File(\"input.txt\"))));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1338, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author ilyakor\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1338, "comment": "//for (int itt = 0; itt < 100; ++itt) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1338, "comment": "//new TestInteractor(n);\n"}, "Heuristic": []}, {"nl": {"id": 1338, "comment": "//}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1338, "comment": "//        if (!flag)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1338, "comment": "//        while (true);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1339, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1340, "comment": "/**/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 1340, "comment": "/*/\n\t\tScanner sc = new Scanner(new BufferedReader(new InputStreamReader(new FileInputStream(\"src/b.in\"))));\n\t\t/**/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1341, "comment": "// Finds smallest rectangle containing something along 1 dimension.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1341, "comment": "//        print(\"   \" + arr(some));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1341, "comment": "//        print(\"   \" + arr(some));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1341, "comment": "//        print(\"   \" + arr(some));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1341, "comment": "//        print(\"   \" + arr(some));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1342, "comment": "//System.getProperty(\"ONLINE_JUDGE\") != null;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1342, "comment": "//new Thread(null, new _Solution(), \"\", 128 * (1L << 20)).start();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1343, "comment": "/**\n\t\t * BEFORE SUBMITTING!!!\n\t\t * MAKE SURE IT IS RIGHT!!!!!\n\t\t * LONG!!\n\t\t * Check if m,n aren't misused\n\t\t * Make sure the output format is right (YES/NO vs Yes/No, newlines vs spaces)\n\t\t * Run with n = 1 or n = 0\n\t\t * Make sure two ints aren't multiplied to get a long\n\n\t\t *\n\t\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1343, "comment": "//ideas: procurar linha que os divide e procurar dentro desses sub-retangulos\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1343, "comment": "// procurar at\u00e9 ser 1\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1343, "comment": "//corner cases: se procurar at\u00e9 ser 1 e n\u00e3o verificar se tem 1 do outro lado posso chegar a 1,2...not good\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1343, "comment": "// tenho que procurar 1,1\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1343, "comment": "//par 1,1\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1343, "comment": "//FDS ISTO\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1343, "comment": "//HASDFDSJGHDFJKSGDFJSGJDFSGJDSFGJF\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1343, "comment": "//FKING WORK\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1343, "comment": "// quero o minimo v >= x2 \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1343, "comment": "//out.printf(\"x2 = %d\", ansx2);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1343, "comment": "// quero o maximo v <= x1\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1343, "comment": "//out.printf(\"x1 = %d\", ansx1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1343, "comment": "// quero o minimo v >= y2 \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1343, "comment": "//out.printf(\"y2 = %d\", ansy2);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1343, "comment": "// quero o maximo v <= y1\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1343, "comment": "//out.printf(\"y1 = %d\", ansy1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1344, "comment": "/**\n\t\t * BEFORE SUBMITTING!!!\n\t\t * MAKE SURE IT IS RIGHT!!!!!\n\t\t * LONG!!\n\t\t * Check if m,n aren't misused\n\t\t * Make sure the output format is right (YES/NO vs Yes/No, newlines vs spaces)\n\t\t * Run with n = 1 or n = 0\n\t\t * Make sure two ints aren't multiplied to get a long\n\n\t\t *\n\t\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1344, "comment": "//ideas: procurar linha que os divide e procurar dentro desses sub-retangulos\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1344, "comment": "// procurar at\u00e9 ser 1\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1344, "comment": "//corner cases: se procurar at\u00e9 ser 1 e n\u00e3o verificar se tem 1 do outro lado posso chegar a 1,2...not good\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1344, "comment": "// tenho que procurar 1,1\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1344, "comment": "//par 1,1\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1344, "comment": "//FDS ISTO\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1344, "comment": "//HASDFDSJGHDFJKSGDFJSGJDFSGJDSFGJF\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1344, "comment": "//FKING WORK\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1344, "comment": "// quero o minimo v >= x2 \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1344, "comment": "//out.printf(\"x2 = %d\", ansx2);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1344, "comment": "// quero o maximo v <= x1\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1344, "comment": "//out.printf(\"x1 = %d\", ansx1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1344, "comment": "// quero o minimo v >= y2 \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1344, "comment": "//out.printf(\"y2 = %d\", ansy2);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1344, "comment": "// quero o maximo v <= y1\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1344, "comment": "//out.printf(\"y1 = %d\", ansy1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1345, "comment": "//\tint X1, Y1, X2, Y2;\n"}, "Heuristic": []}, {"nl": {"id": 1345, "comment": "//\tint X3, Y3, X4, Y4;\n"}, "Heuristic": []}, {"nl": {"id": 1345, "comment": "//\t{\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1345, "comment": "//\t\tX1 = 1;\n"}, "Heuristic": []}, {"nl": {"id": 1345, "comment": "//\t\tY1 = 2;\n"}, "Heuristic": []}, {"nl": {"id": 1345, "comment": "//\t\tX2 = 3;\n"}, "Heuristic": []}, {"nl": {"id": 1345, "comment": "//\t\tY2 = 4;\n"}, "Heuristic": []}, {"nl": {"id": 1345, "comment": "//\t\t\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1345, "comment": "//\t\tX3 = 5;\n"}, "Heuristic": []}, {"nl": {"id": 1345, "comment": "//\t\tY3 = 1;\n"}, "Heuristic": []}, {"nl": {"id": 1345, "comment": "//\t\tX4 = 5;\n"}, "Heuristic": []}, {"nl": {"id": 1345, "comment": "//\t\tY4 = 5;\n"}, "Heuristic": []}, {"nl": {"id": 1345, "comment": "//\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1345, "comment": "//\tint ask(int x1, int y1, int x2, int y2) throws IOException {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1345, "comment": "//\t\treturn inside(x1, y1, x2, y2, X1, Y1, X2, Y2) + inside(x1, y1, x2, y2, X3, Y3, X4, Y4); \n"}, "Heuristic": []}, {"nl": {"id": 1345, "comment": "//\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1345, "comment": "// 0\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1345, "comment": "// >0\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1345, "comment": "// <2\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1345, "comment": "// 2\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1345, "comment": "// >0\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1345, "comment": "// 0\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1345, "comment": "// 2\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1345, "comment": "// <2\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1345, "comment": "// / NOW Y\n"}, "Heuristic": []}, {"nl": {"id": 1345, "comment": "// 0\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1345, "comment": "// >0\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1345, "comment": "// <2\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1345, "comment": "// 2\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1345, "comment": "// >0\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1345, "comment": "// 0\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1345, "comment": "// 2\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1345, "comment": "// <2\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1346, "comment": "// System.out.println(Arrays.deepToString(x));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1346, "comment": "//\t\t\tSystem.out.println(Arrays.deepToString(x));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1346, "comment": "//\t\t\tSystem.out.println(Arrays.deepToString(y));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1346, "comment": "//\t\tint count = 0;\n"}, "Heuristic": []}, {"nl": {"id": 1346, "comment": "//\t\tif (x1 <= 2 && y1 <= 2 && x2 >= 2 && y2 >= 2)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1346, "comment": "//\t\t\tcount++;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1346, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1346, "comment": "//\t\tif (x1 <= 3 && y1 <= 4 && x2 >= 3 && y2 >= 5)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1346, "comment": "//\t\t\tcount++;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1346, "comment": "//\t\tSystem.out.println(count);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1346, "comment": "// max[a, b]\n"}, "Heuristic": []}, {"nl": {"id": 1347, "comment": "/**\n         *\n         */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1347, "comment": "/**\n         *\n         */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1347, "comment": "// SOLUTION!!!\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1347, "comment": "// HACK ME PLEASE IF YOU CAN!!!\n"}, "Heuristic": ["H4"]}, {"nl": {"id": 1347, "comment": "// PLEASE!!!\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1347, "comment": "// PLEASE!!!\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1347, "comment": "// PLEASE!!!\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1347, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1347, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1347, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1347, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1347, "comment": "////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1347, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1347, "comment": "/////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1347, "comment": "/////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1347, "comment": "///////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1347, "comment": "///////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1347, "comment": "////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1347, "comment": "////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1347, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1347, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1347, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1347, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1347, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1347, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1347, "comment": "//////////////// Some useful constants and functions ////////////////\n"}, "Heuristic": []}, {"nl": {"id": 1347, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1347, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1347, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1347, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1347, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1347, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1349, "comment": "//! x11 y11 x12 y12 x21 y21 x22 y22\" \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1349, "comment": "//\"? x1 y1 x2 y2\"\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 1351, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Jialin Ouyang (Jialin.Ouyang@gmail.com)\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1351, "comment": "// lower\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1351, "comment": "// upper\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1351, "comment": "//rect1 = new Rect(2, 2, 2, 2);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1351, "comment": "//rect2 = new Rect(3, 4, 3, 5);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1352, "comment": "//make sure to make new file!\n"}, "Heuristic": []}, {"nl": {"id": 1352, "comment": "//see if you can draw vertical line between them\n"}, "Heuristic": []}, {"nl": {"id": 1352, "comment": "//find horizontal line\n"}, "Heuristic": []}, {"nl": {"id": 1352, "comment": "//find top line of top block\n"}, "Heuristic": []}, {"nl": {"id": 1352, "comment": "//find bottom line of top block\n"}, "Heuristic": []}, {"nl": {"id": 1352, "comment": "//find left of top block\n"}, "Heuristic": []}, {"nl": {"id": 1352, "comment": "//find right of top block\n"}, "Heuristic": []}, {"nl": {"id": 1352, "comment": "//find top line of bottom block\n"}, "Heuristic": []}, {"nl": {"id": 1352, "comment": "//find bottom line of bottom block\n"}, "Heuristic": []}, {"nl": {"id": 1352, "comment": "//find left of bottom block\n"}, "Heuristic": []}, {"nl": {"id": 1352, "comment": "//find right of bottom block\n"}, "Heuristic": []}, {"nl": {"id": 1352, "comment": "//ans is the vertical line between\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1352, "comment": "//find left line of left block\n"}, "Heuristic": []}, {"nl": {"id": 1352, "comment": "//find right line of left block\n"}, "Heuristic": []}, {"nl": {"id": 1352, "comment": "//find top of left block\n"}, "Heuristic": []}, {"nl": {"id": 1352, "comment": "//find bottom of left block\n"}, "Heuristic": []}, {"nl": {"id": 1352, "comment": "//find left line of right block\n"}, "Heuristic": []}, {"nl": {"id": 1352, "comment": "//find right line of right block\n"}, "Heuristic": []}, {"nl": {"id": 1352, "comment": "//find top of right block\n"}, "Heuristic": []}, {"nl": {"id": 1352, "comment": "//find bottom of right block\n"}, "Heuristic": []}, {"nl": {"id": 1353, "comment": "//package round371;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1353, "comment": "// cv <= cu\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1353, "comment": "// du <= dv\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1354, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author AlexFetisov\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1355, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1355, "comment": "//probuje najpierw lewa sciane\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1355, "comment": "//jesli lewy dolny taki sam to ucieto horyzontalnie od gory\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1355, "comment": "//else ucieto wertykalnie od lewej\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1355, "comment": "//        if (contains(qr, re1)) ans++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1355, "comment": "//        if (contains(qr, re2)) ans++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1356, "comment": "//\tSystem.out.println(\"!\"+xx1+\" \"+yy1+\" \"+xx2+\" \"+yy2);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1357, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Egor Kulikov (egor@egork.net)\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1358, "comment": "/*if (arr[1] > arr[3] || arr[0] > arr[2]) {\n            return 0;\n        }\n        int[] check = new int[]{1, 1, 10, 1};\n        int[] check1 = new int[]{5, 5, 5, 10};\n        int result = within(arr, check) ? 1 : 0;\n        result += within(arr, check1) ? 1 : 0;\n        if (cond) {\n            result -= within(arr, first) ? 1 : 0;\n        }\n        return result;*/"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": 1360, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Wolfgang Beyer\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1360, "comment": "/*int ret = 0;\n        //if(x1 <= 17 && 57 <= x2 && y1 <= 80 && 80 <= y2) ++ret;\n\t    //if(x1 <= 25 && 88 <= x2 && y1 <= 51 && 61 <= y2) ++ret;\n        if(x1 <= 10 && 10 <= x2 && y1 <= 11 && 11 <= y2) ++ret;\n        //if(x1 <= 11 && 11 <= x2 && y1 <= 10 && 10 <= y2) ++ret;\n        if(x1 <= 10 && 10 <= x2 && y1 <= 15 && 15 <= y2) ++ret;\n        //System.out.println(x1 + \", \" + y1 + \", \" + x2 + \", \" + y2 + \": \" + ret);\n\t    return ret;*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1360, "comment": "//int n = 100;\n"}, "Heuristic": []}, {"nl": {"id": 1360, "comment": "//int n = 65536;\n"}, "Heuristic": []}, {"nl": {"id": 1360, "comment": "//System.out.println(\"Searching single: \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1360, "comment": "//System.out.println(\"Searching single: \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1360, "comment": "//System.out.println(\"Dia 3: \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1360, "comment": "//System.out.println(\"Searching single: \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1360, "comment": "//System.out.println(\"Dia 4:\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1360, "comment": "//System.out.println(\"Searching single: \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1360, "comment": "//System.out.println(\"\\n\" + queryCount + \" queries used\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1360, "comment": "//System.out.println(\"x1: \" + x1 + \", y1: \" + y1 + \", x2: \" + x2 + \", y2: \" + y2);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1360, "comment": "//if(x1 <= 17 && 57 <= x2 && y1 <= 80 && 80 <= y2) ++ret;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1360, "comment": "//if(x1 <= 25 && 88 <= x2 && y1 <= 51 && 61 <= y2) ++ret;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1360, "comment": "//if(x1 <= 11 && 11 <= x2 && y1 <= 10 && 10 <= y2) ++ret;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1360, "comment": "//System.out.println(x1 + \", \" + y1 + \", \" + x2 + \", \" + y2 + \": \" + ret);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1361, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1362, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Hieu Le\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1362, "comment": "// Find the column of the right edge.\n"}, "Heuristic": []}, {"nl": {"id": 1362, "comment": "// Find the column of the left edge.\n"}, "Heuristic": []}, {"nl": {"id": 1362, "comment": "// Find the topmost row.\n"}, "Heuristic": []}, {"nl": {"id": 1362, "comment": "// Find the bottommost row.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1363, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1364, "comment": "//deb////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1364, "comment": "/////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1364, "comment": "//          in = new StreamTokenizer(new BufferedReader(new FileReader(\"input.txt\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1364, "comment": "// out = new PrintWriter(new FileWriter(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1364, "comment": "//boolean inR(int x,int y){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1364, "comment": "//return (x<=0)&&(x<4)&&(y<=0)&&(y<4);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1364, "comment": "//}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1364, "comment": "//   BufferedReader re= new BufferedReader(new FileReader(\"C:\\\\Users\\\\ASELA\\\\Desktop\\\\PROBLEMSET\\\\input\\\\F\\\\10.in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1364, "comment": "//    System.out.println(ff);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1365, "comment": "//System.out.println(m + \" \" + s + \" \" + n);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1368, "comment": "// BufferedReader in = new BufferedReader(new\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1368, "comment": "// InputStreamReader(System.in));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1368, "comment": "// Scanner in = new Scanner(System.in);\n"}, "Heuristic": []}, {"nl": {"id": 1368, "comment": "//Scanner in = new Scanner(new FileReader(\"forbidden-triples.in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1368, "comment": "//PrintWriter out = new PrintWriter(\"forbidden-triples.out\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1371, "comment": "// K = 5\n"}, "Heuristic": []}, {"nl": {"id": 1371, "comment": "// Start = K-2;\n"}, "Heuristic": []}, {"nl": {"id": 1371, "comment": "// 1 = K-2;\n"}, "Heuristic": []}, {"nl": {"id": 1371, "comment": "// 2 = K-3... etc.\n"}, "Heuristic": []}, {"nl": {"id": 1371, "comment": "//System.out.println(mid + \" \" + big + \" \" + tmp);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1372, "comment": "/**\n * Created with IntelliJ IDEA.\n * User: horikawa\n * Date: 3/23/13\n * Time: 1:29 AM\n * To change this template use File | Settings | File Templates.\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1374, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1375, "comment": "//\t\tdebug(left, right);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1376, "comment": "/**\n * Created with IntelliJ IDEA.\n * User: yuantian\n * Date: 3/24/13\n * Time: 2:18 AM\n * Copyright (c) 2013 All Right Reserved, http://github.com/tyuan73\n */"}, "Heuristic": ["H1", "H9"]}, {"nl": {"id": 1376, "comment": "//github.com/tyuan73\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1384, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author George Marcus\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1385, "comment": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 1385, "comment": "/**\n *\n * @author 111\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1385, "comment": "/**\n     * @param args the command line arguments\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1386, "comment": "/**\n\t * @param args\n\t * @throws IOException\n\t * @throws NumberFormatException\n\t */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1386, "comment": "// BufferedReader rd = new BufferedReader(new\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1386, "comment": "// InputStreamReader(System.in));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1386, "comment": "// StringTokenizer t = new StringTokenizer(rd.readLine(), \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1386, "comment": "// int n = Integer.parseInt(rd.readLine());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1386, "comment": "// long sum = k;\n"}, "Heuristic": []}, {"nl": {"id": 1386, "comment": "// long out = 0l;\n"}, "Heuristic": []}, {"nl": {"id": 1386, "comment": "// seg += (2 - mid);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1386, "comment": "// long sum_m = seg - seg_m;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1386, "comment": "// if (n - mid < out || out == 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1386, "comment": "// out = n - mid - 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1386, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1386, "comment": "// for (long i = k - 1; sum < n && i >= 2; i--) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1386, "comment": "// sum += i - 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1386, "comment": "// out++;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1386, "comment": "// // if (sum >= n)\n"}, "Heuristic": []}, {"nl": {"id": 1386, "comment": "// // break;\n"}, "Heuristic": []}, {"nl": {"id": 1386, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1387, "comment": "//n > k, and there exists a subset (1..k) = n\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1387, "comment": "//goal : sum( subset of (1...k) ) = n\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1387, "comment": "//obs: if exists a soln, it's always possible to push everything to the right-> t + left...k\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1387, "comment": "//so that t + left...k = n, so we just have to find the smallest left such that left..k <= n\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1387, "comment": "//now lo points to the greatest left for which left..k > n\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1387, "comment": "//so lo+1 points to the smallest left for which left..k <= n\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1387, "comment": "//we still have an extra 't' to the left\n"}, "Heuristic": []}, {"nl": {"id": 1387, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1387, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1390, "comment": "// leave empty to read from stdin/stdout\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1390, "comment": "// file names\n"}, "Heuristic": []}, {"nl": {"id": 1392, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1395, "comment": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 1395, "comment": "/**\n *\n * @author admin\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1395, "comment": "/**\n     * @param args the command line arguments\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1395, "comment": "//package pipeline;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1395, "comment": "// TODO code application logic here\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1395, "comment": "// System.out.println(left+\" \"+right);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1395, "comment": "//    System.out.println(x);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1395, "comment": "//  System.out.println(\"if\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1395, "comment": "//    System.out.println(\"else if\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1397, "comment": "//System.out.println(tot);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1397, "comment": "//maximum outlets using mid pipes\n"}, "Heuristic": []}, {"nl": {"id": 1398, "comment": "// private void qsort(int a[]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1398, "comment": "// Random rand = new Random(271828182l);\n"}, "Heuristic": []}, {"nl": {"id": 1398, "comment": "// qsort(a, 0, a.length, rand);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1398, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1398, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1398, "comment": "// private void qsort(int a[], int l, int r, Random rand) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1398, "comment": "// if (r - l <= 1)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1398, "comment": "// return;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1398, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1398, "comment": "// if (r - l == 2) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1398, "comment": "// if (a[r - 1] < a[l]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1398, "comment": "// int t = a[r - 1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1398, "comment": "// a[r - 1] = a[l];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1398, "comment": "// a[l] = t;\n"}, "Heuristic": []}, {"nl": {"id": 1398, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1398, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1398, "comment": "// return;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1398, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1398, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1398, "comment": "// int x = a[rand.nextInt(r - l) + l];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1398, "comment": "// int i = l, j = r - 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1398, "comment": "// while (i < j) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1398, "comment": "// while (a[i] < x)\n"}, "Heuristic": []}, {"nl": {"id": 1398, "comment": "// ++i;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1398, "comment": "// while (a[j] > x)\n"}, "Heuristic": []}, {"nl": {"id": 1398, "comment": "// --j;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1398, "comment": "// if (i < j) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1398, "comment": "// int t = a[i];\n"}, "Heuristic": []}, {"nl": {"id": 1398, "comment": "// a[i] = a[j];\n"}, "Heuristic": []}, {"nl": {"id": 1398, "comment": "// a[j] = t;\n"}, "Heuristic": []}, {"nl": {"id": 1398, "comment": "// ++i;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1398, "comment": "// --j;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1398, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1398, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1398, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1398, "comment": "// qsort(a, l, j + 1, rand);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1398, "comment": "// qsort(a, i, r, rand);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1398, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1399, "comment": "/**\n     * @param args\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1399, "comment": "/*\n                if (rnd<=flr){\n                    System.out.println(k.intValue()-flr);\n                }\n                else {\n                    System.out.println(k.intValue()-(flr+1));\n                }\n                */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1399, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1399, "comment": "//System.out.println(\"lim: \"+lim);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1399, "comment": "//System.out.println(remain2);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1399, "comment": "//System.out.println(temp);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1399, "comment": "//System.out.println(flr);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1399, "comment": "//System.out.println(\"rnd \"+rnd);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1400, "comment": "//---\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1402, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author dy\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1403, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1403, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1403, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1405, "comment": "//in = new BufferedReader(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1405, "comment": "//out = new PrintWriter(\"output.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1405, "comment": "//out.println(Long.MAX_VALUE);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1407, "comment": "//System.out.println(s + \" \" + e );\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1408, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Saul\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1409, "comment": "/**\n * Created with IntelliJ IDEA.\n * User: ira\n * Date: 3/23/13\n * Time: 12:19 PM\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1410, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1410, "comment": "//\u0434\u043e\u043c\u0430  \u0438 \u043a\u043e\u043b \u0442\u0440\u0443\u0431 \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1410, "comment": "// \u0440\u0430\u0437\u0432\u0435\u0442\u043b\u0438\u0442\u0435\u043b\u0438 \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1412, "comment": "/**\n * Created with IntelliJ IDEA.\n * User: yuantian\n * Date: 3/24/13\n * Time: 2:18 AM\n * Copyright (c) 2013 All Right Reserved, http://github.com/tyuan73\n */"}, "Heuristic": ["H1", "H9"]}, {"nl": {"id": 1412, "comment": "/**\n         * non-binary search version, O(n)\n         * it will failed because of \"over time limit erro\" on this case:\n         *  499999998500000001 1000000000   => 999955279\n         *\n         total = 1;\n         for(int i = (int)k; i >= 2; i--) {\n         total += i - 1;\n         if(total >= n) {\n         System.out.println(k-i+1);\n         return;\n         }\n         }\n         */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1412, "comment": "/**\n         * binary search search version. O(lgn)\n         */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1412, "comment": "//github.com/tyuan73\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1414, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Dzmitry Paulenka\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1416, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Dzmitry Paulenka\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1418, "comment": "// Pipeline\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1418, "comment": "// 2013/03/23\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1419, "comment": "//System.out.println(\"n = \" + n);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1419, "comment": "//System.out.println(\"nextK = \" + nextK);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1419, "comment": "//search for a of a...nextK \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1419, "comment": "//System.out.println(\"a = \" + a);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1419, "comment": "//System.out.println(\"count = \" + count);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1419, "comment": "//System.out.println(\"bSum = \" + bSum);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1419, "comment": "//System.out.println(\"nDecr = \" + nDecr);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1419, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1419, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1421, "comment": "// practice with rainboy\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1422, "comment": "//\t\tfor (int i = 0; i <= 10; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1422, "comment": "//\t\t\tSystem.err.println(getSq(n, r, c, i));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1422, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1422, "comment": "// in = new BufferedReader(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1422, "comment": "// out = new PrintWriter(\"output.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1423, "comment": "//corner_share[i]++;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1424, "comment": "//\t\tdebug(n1 + \" \" + n2 + \" \" + n3 + \" \" + n4);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1424, "comment": "//\t\tdebug(n12 + \" \" + n23 + \" \" + n34 + \" \" + n41);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1424, "comment": "//\t\tpln(getNumber(1, 1, 10000, 10000000));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1424, "comment": "//\t\tpln(getNumber(1000, 1000, 1000, 1000000));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1424, "comment": "//\t\tif (true) return;\n"}, "Heuristic": []}, {"nl": {"id": 1424, "comment": "//\t\t\tdebug(ll + \" \" + rr);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1425, "comment": "//package codeforces.cf156;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1425, "comment": "//        hi = 5;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1426, "comment": "//BufferedReader in = new BufferedReader(new FileReader(\"bender.in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1427, "comment": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 1427, "comment": "/**\n *\n * @author malek\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1427, "comment": "//package code;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1427, "comment": "//String cwd = System.getProperty(\"user.dir\") + \"\\\\\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1427, "comment": "//Scanner in = new Scanner(new BufferedInputStream(new FileInputStream(cwd + \"src\\\\code\\\\in.in\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1427, "comment": "//PrintStream out = new PrintStream(cwd + \"src\\\\code\\\\out.out\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1427, "comment": "//=======================\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1427, "comment": "//=======================\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1427, "comment": "//final int MAX_N = 1000 * 1000 + 100;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1428, "comment": "// new FileInputStream(new File(\"input.txt\")),\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1428, "comment": "// new PrintStream(new FileOutputStream(new File(\"output.txt\"))));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1428, "comment": "// BufferedReader in = new BufferedReader(new InputStreamReader(_in));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1428, "comment": "// String[] sp;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1428, "comment": "// lu\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1428, "comment": "// ld\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1428, "comment": "// ru\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1428, "comment": "// rd\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1428, "comment": "// ok\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1428, "comment": "// ng\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1428, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1428, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1428, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1428, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1428, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1428, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1428, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1428, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1428, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1428, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1428, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1428, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1428, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1428, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1428, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1428, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1428, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1428, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1428, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1428, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1428, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1428, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1428, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1428, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1429, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author BSRK Aditya (bsrkaditya@gmail.com)\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1430, "comment": "//\tstatic StreamTokenizer in; static int next() throws Exception {in.nextToken(); return (int) in.nval;}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1430, "comment": "//\tstatic BufferedReader in;\n"}, "Heuristic": []}, {"nl": {"id": 1430, "comment": "//\t\tin = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n"}, "Heuristic": []}, {"nl": {"id": 1430, "comment": "//\t\tin = new BufferedReader(new InputStreamReader(System.in));\n"}, "Heuristic": []}, {"nl": {"id": 1432, "comment": "// L + 1 steps to right\n"}, "Heuristic": []}, {"nl": {"id": 1432, "comment": "// L steps to left\n"}, "Heuristic": []}, {"nl": {"id": 1434, "comment": "//\t\tSystem.out.println(block);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1434, "comment": "//\t\t\tSystem.out.println(mid + \" \" + f(mid));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1435, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1435, "comment": "//System.out.println(z + \" \" + ret);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1435, "comment": "//System.out.println(z + \" \" + ret);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1435, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1436, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1438, "comment": "//up\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1438, "comment": "//left\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1438, "comment": "//down\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1438, "comment": "//right\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1438, "comment": "//upleft\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1438, "comment": "//upright\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1438, "comment": "//dwleft\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1438, "comment": "//dwleft\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1439, "comment": "/** call this method to initialize reader for InputStream */"}, "Heuristic": []}, {"nl": {"id": 1439, "comment": "/** get next word */"}, "Heuristic": []}, {"nl": {"id": 1439, "comment": "//TODO add check for eof if necessary\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1440, "comment": "//in = new BufferedReader(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1440, "comment": "//out = new PrintWriter(new FileWriter(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1441, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1442, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Alex\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1443, "comment": "/** call this method to initialize reader for InputStream */"}, "Heuristic": []}, {"nl": {"id": 1443, "comment": "/** get next word */"}, "Heuristic": []}, {"nl": {"id": 1443, "comment": "//TODO add check for eof if necessary\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1444, "comment": "//          out.println(k + \" \" + cur);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1444, "comment": "//x + i; y + k - i;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1444, "comment": "//          out.println(\"iless == \" + iLess + \" imore == \" + iMore);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1444, "comment": "//          out.println(\"add == \" + add);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1444, "comment": "//x + i; y - k + i;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1444, "comment": "//          out.println(\"iless == \" + iLess + \" imore == \" + iMore);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1444, "comment": "//          out.println(\"add == \" + add);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1444, "comment": "//x - i; y - k + i;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1444, "comment": "//          out.println(\"iless == \" + iLess + \" imore == \" + iMore);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1444, "comment": "//          out.println(\"add == \" + add);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1444, "comment": "//x - i; y + k - i;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1444, "comment": "//          out.println(\"iless == \" + iLess + \" imore == \" + iMore);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1444, "comment": "//          out.println(\"add == \" + add);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1444, "comment": "//          out.println(\"cur == \" + cur);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1444, "comment": "//delete double\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1444, "comment": "//      throw new RuntimeException();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1445, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1446, "comment": "//package round156;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1446, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1448, "comment": "//\t\tfor (int i = 0; i < 10; i++) io.println(f(i));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1448, "comment": "//\t\tio.println();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1448, "comment": "// Sides\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1448, "comment": "// Middle\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1448, "comment": "// Corners\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1449, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Egor Kulikov (egor@egork.net)\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1452, "comment": "//BigInteger sum = blen.multiply(blen.add(BigInteger.ONE)).multiply(blen.shiftLeft(1).add(BigInteger.ONE)).divide(BigInteger.valueOf(6));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1453, "comment": "//\t\t\tin = new BufferedReader(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1453, "comment": "//\t\t\tout = new PrintWriter(\"output.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1453, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1454, "comment": "// stream = new FileInputStream(new File(\"dec.in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1455, "comment": "// left - up\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1455, "comment": "// right - up\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1455, "comment": "// left - down\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1455, "comment": "// right - down\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1456, "comment": "//System.out.println(f(1,100,30));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1456, "comment": "//System.out.println(Long.MAX_VALUE);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1456, "comment": "//System.out.println(\"checking \"+steps+\" hi= \"+hi+\" lo = \"+lo);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1456, "comment": "//System.out.println(f(x,y,steps)+\" \"+f(N-x+1,y,steps)+\" \"+f(N-x+1,N-y+1,steps)+\" \"+f(x,N-y+1,steps));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1456, "comment": "//x,y\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1456, "comment": "//left\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1456, "comment": "//down\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1456, "comment": "//right\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1456, "comment": "//up\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1456, "comment": "//System.out.println(\"total = \"+total);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1456, "comment": "//System.out.println(\"checking \"+steps);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1456, "comment": "//x,y\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1456, "comment": "//left\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1456, "comment": "//down\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1456, "comment": "//right\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1456, "comment": "//up\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1456, "comment": "//System.out.println(\"total = \"+total);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1456, "comment": "//System.out.println(\"f(\"+a+\",\"+b+\",\"+steps+\")\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1456, "comment": "//System.out.println(\"case 1\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1456, "comment": "//System.out.println(\"case 2\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1456, "comment": "//System.out.println(\"case 3\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1456, "comment": "//System.out.println(\"case 4\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1456, "comment": "//System.out.println(\"\\treturning \"+ans);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1457, "comment": "//       |----|       /\\      |    |   -----   |\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1457, "comment": "//       |   /       /  \\     |    |     |     |\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1457, "comment": "//       |--/       /----\\    |----|     |     |\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1457, "comment": "//       |   \\     /      \\   |    |     |     |\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1457, "comment": "//       |    \\   /        \\  |    |   -----   -------\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1458, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author AlexFetisov\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1460, "comment": "////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1460, "comment": "//////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1460, "comment": "////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1460, "comment": "////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1464, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Nipuna Samarasekara\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1464, "comment": "/////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1464, "comment": "//  long k=w;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1464, "comment": "// long k=w;\n"}, "Heuristic": []}, {"nl": {"id": 1464, "comment": "// long k=w;\n"}, "Heuristic": []}, {"nl": {"id": 1464, "comment": "////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1464, "comment": "//  long k=w;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1464, "comment": "// long k=w;\n"}, "Heuristic": []}, {"nl": {"id": 1464, "comment": "// long k=w;\n"}, "Heuristic": []}, {"nl": {"id": 1464, "comment": "//  long k=w;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1464, "comment": "// long k=w;\n"}, "Heuristic": []}, {"nl": {"id": 1464, "comment": "// long k=w;\n"}, "Heuristic": []}, {"nl": {"id": 1464, "comment": "//  long k=w;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1464, "comment": "// long k=w;\n"}, "Heuristic": []}, {"nl": {"id": 1464, "comment": "// long k=w;\n"}, "Heuristic": []}, {"nl": {"id": 1464, "comment": "// System.out.println(t+\" \"+ct);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1464, "comment": "//            if (isEOF && ret < 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1464, "comment": "//                throw new InputMismatchException();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1464, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1464, "comment": "//            isEOF = ret == -1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1465, "comment": "//\t\tif (time == 1)\n"}, "Heuristic": []}, {"nl": {"id": 1465, "comment": "//\t\t\tSystem.err.println(DL + \" \" + DR + \" \" + UL + \" \" + UR);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1465, "comment": "//\t\tif (time == 1)\n"}, "Heuristic": []}, {"nl": {"id": 1465, "comment": "//\t\t\tSystem.err.println(L + \" \" + R + \" \" + U + \" \" + D);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1465, "comment": "//\t\tfor (int i = 0; i <= 100; i++)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1465, "comment": "//\t\t\tSystem.err.println(count(x, y, n, i));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1466, "comment": "// practice with rainboy\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1468, "comment": "/**\n * Created with IntelliJ IDEA.\n * User: brzezinsky\n * Date: 12/16/12\n * Time: 7:44 PM\n * To change this template use File | Settings | File Templates.\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1469, "comment": "//(2^i)-1 is obtained by min[i]^min[i]+1\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1469, "comment": "//try to get 2^i-1 as answer.                \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1471, "comment": "/** call this method to initialize reader for InputStream */"}, "Heuristic": []}, {"nl": {"id": 1471, "comment": "/** get next word */"}, "Heuristic": []}, {"nl": {"id": 1471, "comment": "//Scanner input = new Scanner(new File(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1471, "comment": "//PrintWriter out = new PrintWriter(new File(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1471, "comment": "//TODO add check for eof if necessary\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1471, "comment": "//return the sum over [x,y]\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1471, "comment": "//add v to elements x through y\n"}, "Heuristic": []}, {"nl": {"id": 1472, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Zakhar Voit\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1472, "comment": "/*for (long l = 1; l < 500; l++) {\n            for (long r = l; r < 500; r++) {\n                if (badSolve(l, r) != solve(l, r)) {\n                    out.println(l + \" \" + r);\n                    return;\n                }\n            }\n        }\n        out.println(\"OK\");*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1475, "comment": "//      System.out.println(a);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1475, "comment": "//      System.out.println(b);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1475, "comment": "//      System.out.println(ans);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1475, "comment": "//      System.out.println(b);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1475, "comment": "//      System.out.println();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1477, "comment": "/* Dear hacker, don't bother reading below this line, unless you want to help me debug my I/O routines :-) */"}, "Heuristic": ["H4", "H7"]}, {"nl": {"id": 1477, "comment": "////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1477, "comment": "//////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1477, "comment": "////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1477, "comment": "////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1478, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1478, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1478, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1478, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1478, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1478, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1478, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1478, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1478, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1478, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1478, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1478, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1478, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1478, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1478, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1478, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1478, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1478, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1478, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1478, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1478, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1478, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1478, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1478, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1478, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1478, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1478, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1478, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1478, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1478, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1479, "comment": "// @author Sanzhar\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1479, "comment": "//in = new BufferedReader(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1479, "comment": "//out = new PrintWriter(new FileWriter(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1480, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1482, "comment": "//System.out.println(sq2[61]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1482, "comment": "//log(\"L = \" + l + \" R = \" + r + \" 2^\" + i + \"=\" + sq2[i]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1482, "comment": "//log(\"L = \" + l + \" R = \" + r + \" 2^\" + i + \"=\" + sq2[i]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1482, "comment": "//System.out.println(run(9999999999998l, 9999999999999l));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1483, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1484, "comment": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 1484, "comment": "//br = new BufferedReader(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1484, "comment": "//out = new PrintWriter(\"output.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1484, "comment": "//print2(\"wewe\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1484, "comment": "//print2(a2);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1484, "comment": "//print2(b2);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1484, "comment": "//print2(\"i=\"+i);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1484, "comment": "//print2(out);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1487, "comment": "//package codeforces;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1487, "comment": "//private static MyScanner sc;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1487, "comment": "//sc = new MyScanner(System.in);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1489, "comment": "/* Codeforces Template */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1489, "comment": "/*************************************************************** \n\t * Solution\n\t **************************************************************/"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1489, "comment": "/*************************************************************** \n\t * Input \n\t **************************************************************/"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1489, "comment": "/*************************************************************** \n\t * Output \n\t **************************************************************/"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1489, "comment": "/*************************************************************** \n\t * Utility\n\t **************************************************************/"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1489, "comment": "//\t\tSystem.err.println(Long.toBinaryString(leftBorder));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1489, "comment": "//\t\tSystem.err.println(Long.toBinaryString(rightBorder));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1489, "comment": "//\t\tSystem.err.println(Long.toBinaryString(answer));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1490, "comment": "//(2^i)-1 is obtained by min[i]^min[i]+1\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1490, "comment": "//try to get 2^i-1 as answer.                \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1492, "comment": "//package round169;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1492, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1493, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author ocelopilli\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1494, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author George Marcus\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1496, "comment": "//\t\tSystem.err.println(solve2(4, 9));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1496, "comment": "//\t\tRandom rnd = new Random(312);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1496, "comment": "//\t\tfor (int test = 0; test < 10000; test++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1496, "comment": "//\t\t\tSystem.err.println(test);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1496, "comment": "//\t\t\tint l = rnd.nextInt(100);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1496, "comment": "//\t\t\tint r = rnd.nextInt(100) + l;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1496, "comment": "//\t\t\tlong v1 = stupid(l, r);\n"}, "Heuristic": ["H4"]}, {"nl": {"id": 1496, "comment": "//\t\t\tlong v2 = solve2(l, r);\n"}, "Heuristic": []}, {"nl": {"id": 1496, "comment": "//\t\t\tif (v1 != v2) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1496, "comment": "//\t\t\t\tSystem.err.println(v1 + \" \" + v2);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1496, "comment": "//\t\t\t\tSystem.err.println(l + \" \" + r);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1496, "comment": "//\t\t\t\tthrow new AssertionError();\n"}, "Heuristic": []}, {"nl": {"id": 1496, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1496, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1497, "comment": "/**\n * Created with IntelliJ IDEA.\n * User: brzezinsky\n * Date: 12/16/12\n * Time: 7:44 PM\n * To change this template use File | Settings | File Templates.\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1498, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author emotionalBlind\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1498, "comment": "// range a\n"}, "Heuristic": []}, {"nl": {"id": 1498, "comment": "// range b;\n"}, "Heuristic": []}, {"nl": {"id": 1498, "comment": "// InputMismatchException -> UnknownError\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1499, "comment": "/**\n * @author Abhimanyu Singh\n *\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1499, "comment": "/*\n     char[] getMax0(char lBit[], char rBit[], int lIndex, int rIndex) {\n     char ans[]=new char[64];\n     if(lIndex)\n     }\n    \n\n     char[] getMax(char lBit[], char rBit[], int lIndex, int rIndex) {\n     }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1499, "comment": "/**\n     * @param args the command line arguments\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1500, "comment": "// Use BufferedReader rather than RandomAccessFile; it's much faster\n"}, "Heuristic": []}, {"nl": {"id": 1500, "comment": "//same\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1500, "comment": "//long out=0;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1500, "comment": "//out+=Math.pow(2, i);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1500, "comment": "//      System.out.println(\"Time elapsed (ms): \"+(System.currentTimeMillis()-unixTime));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1500, "comment": "// don't omit this!\n"}, "Heuristic": []}, {"nl": {"id": 1500, "comment": "//Library\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1501, "comment": "/* Dear hacker, don't bother reading below this line, unless you want to help me debug my I/O routines :-) */"}, "Heuristic": ["H4", "H7"]}, {"nl": {"id": 1501, "comment": "////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1501, "comment": "//////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1501, "comment": "////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1501, "comment": "////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1503, "comment": "/**\n * @author Polyarniy Nickolay\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1503, "comment": "//if FILENAME = null, then works with console\n"}, "Heuristic": []}, {"nl": {"id": 1503, "comment": "//        out.println(a);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1503, "comment": "//        out.println(b);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1506, "comment": "// for (int i = 0 ; i < R.size(); ++i)\n"}, "Heuristic": []}, {"nl": {"id": 1506, "comment": "// res.add(false);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1509, "comment": "//in = new BufferedReader(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1509, "comment": "//out = new PrintWriter(\"output.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1510, "comment": "/**\n     * @param args\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1513, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author vadimmm\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1513, "comment": "/*\n        long max = 1;\n        boolean good = false;\n        for (int i = 0; i < 62; ++i) {\n            max <<= 1;\n            if (max > r) {\n                max >>= 1;\n                if (max >= l) {\n                    good = true;\n                }\n                break;\n            }\n        }\n        if (good) {\n            if (max - 1 >= l)\n                out.println(max ^ (max - 1));\n            else\n                out.println(max ^ r);\n            return;\n        }\n        */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1517, "comment": "//Author: Patel Rag\n"}, "Heuristic": []}, {"nl": {"id": 1517, "comment": "//Java version \"1.8.0_211\"\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1517, "comment": "//binary Modular exponentiation\n"}, "Heuristic": []}, {"nl": {"id": 1517, "comment": "//Binary Indexed Tree aka Fenwick Tree\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1518, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author \\/\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1519, "comment": "//UPSOLVE\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1520, "comment": "//UPSOLVE\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1522, "comment": "// @author Sanzhar\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1522, "comment": "//in = new BufferedReader(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1522, "comment": "//out = new PrintWriter(new FileWriter(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1523, "comment": "/** \n\t * Knuth's shuffle. Generate a random permutation of an array\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1523, "comment": "//System.out.println(Arrays.toString(A));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1523, "comment": "//A[i] is not start of a chain\n"}, "Heuristic": []}, {"nl": {"id": 1523, "comment": "//System.out.println(\"considering \"+A[i]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1523, "comment": "//System.out.println(\"\\t\"+chainSize);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1523, "comment": "// 0<=j<=i;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1523, "comment": "// Parse an integer array of size N from a string s\n"}, "Heuristic": []}, {"nl": {"id": 1524, "comment": "//basically tried to understand ping's greedy alg\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1524, "comment": "//lol what?? If use HashSet timeout, but if use tree set, not?\n"}, "Heuristic": ["H12"]}, {"nl": {"id": 1524, "comment": "//even with super high initialize capacty = 100,000,where max 100000\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1524, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1524, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1525, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Zakhar Voit\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1528, "comment": "/* Dear hacker, don't bother reading below this line, unless you want to help me debug my I/O routines :-) */"}, "Heuristic": ["H4", "H7"]}, {"nl": {"id": 1528, "comment": "////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1528, "comment": "//////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1528, "comment": "////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1528, "comment": "////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1530, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author sheep\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1531, "comment": "// new FileInputStream(new File(\"input.txt\")),\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1531, "comment": "// new PrintStream(new FileOutputStream(new File(\"output.txt\"))));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1531, "comment": "// Scanner sc = new Scanner(System.in);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1531, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1531, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1531, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1531, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1531, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1531, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1531, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1531, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1531, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1531, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1531, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1531, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1531, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1531, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1531, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1531, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1531, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1531, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1531, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1531, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1531, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1531, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1531, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1531, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1532, "comment": "/*\n\nclass P implements Comparable<P>{\n\tint x,y;\n\tP(int x,int y){ this.x=x; this.y=y;  }\n\t\n\tpublic int compareTo(P z) {\n\t if( x-z.x!=0)   return  x-z.x ;  //ascend \n\t else return  y-z.y ; \n\t}\n}\n//*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1532, "comment": "// ArrayList<Integer> lis = new ArrayList<Integer>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1532, "comment": "// ArrayList<String> lis = new ArrayList<String>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1532, "comment": "//  PriorityQueue<P> que = new PriorityQueue<P>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1532, "comment": "// PriorityQueue<Integer> que = new PriorityQueue<Integer>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1532, "comment": "//  Stack<Integer> que = new Stack<Integer>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1532, "comment": "//\tstatic long sum=0;\n"}, "Heuristic": []}, {"nl": {"id": 1532, "comment": "// 1000000007 (10^9+7)\n"}, "Heuristic": []}, {"nl": {"id": 1532, "comment": "//static int mod = 1000000009,r=0;\n"}, "Heuristic": []}, {"nl": {"id": 1532, "comment": "// static int dx[]={1,-1,0,0};\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1532, "comment": "//\tstatic int dy[]={0,0,1,-1};\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1532, "comment": "//\tstatic int dx[]={1,-1,0,0,1,1,-1,-1};\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1532, "comment": "//  static int dy[]={0,0,1,-1,1,-1,1,-1};\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1532, "comment": "//static long H,L;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1532, "comment": "//static Set<Integer> set = new HashSet<Integer>();\n"}, "Heuristic": []}, {"nl": {"id": 1532, "comment": "//String line=\"\"; throws Exception, IOException\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1532, "comment": "//(line=br.readLine())!=null\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1532, "comment": "//Scanner sc =new Scanner(System.in);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1532, "comment": "// !!caution!! int long //  \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1532, "comment": "// while( ){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1532, "comment": "// int  n=sc.nextInt(),m=sc.nextInt();//a[]=new int[n],b[]=new int[n];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1532, "comment": "//db(p,x[mid]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1532, "comment": "//ascend \n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1532, "comment": "//*/\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1533, "comment": "/** call this method to initialize reader for InputStream */"}, "Heuristic": []}, {"nl": {"id": 1533, "comment": "/** get next word */"}, "Heuristic": []}, {"nl": {"id": 1533, "comment": "//TODO add check for eof if necessary\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1535, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Jacob Jiang\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1536, "comment": "//\t\t\tSystem.setOut(new PrintStream(new FileOutputStream(packageName + \"output.txt\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1539, "comment": "/*for(int i=0;i<arr.size();i++){\n            System.out.print(arr.get(i)+\" \");\n        }\n        System.out.println();\n        */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1539, "comment": "//  System.out.println(\"index \"+ans);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1540, "comment": "/* Dear hacker, don't bother reading below this line, unless you want to help me debug my I/O routines :-) */"}, "Heuristic": ["H4", "H7"]}, {"nl": {"id": 1540, "comment": "////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1540, "comment": "//////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1540, "comment": "////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1540, "comment": "////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1541, "comment": "// Solution is at the bottom of code\n"}, "Heuristic": []}, {"nl": {"id": 1541, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1541, "comment": "////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1541, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1541, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1541, "comment": "/////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1541, "comment": "/////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1541, "comment": "///////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1541, "comment": "////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1541, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1541, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1541, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1541, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1544, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1544, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1549, "comment": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 1549, "comment": "/**\n *\n * @author NAO93\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1551, "comment": "/* Dear hacker, don't bother reading below this line, unless you want to help me debug my I/O routines :-) */"}, "Heuristic": ["H4", "H7"]}, {"nl": {"id": 1551, "comment": "////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1551, "comment": "//////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1551, "comment": "////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1551, "comment": "////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1552, "comment": "/* Codeforces Template */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1552, "comment": "/*************************************************************** \n\t * Solution\n\t **************************************************************/"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1552, "comment": "/*************************************************************** \n\t * Input \n\t **************************************************************/"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1552, "comment": "/*************************************************************** \n\t * Output \n\t **************************************************************/"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1552, "comment": "/*************************************************************** \n\t * Utility\n\t **************************************************************/"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1553, "comment": "//package round168;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1553, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1556, "comment": "//http://www.codeforces.com/contest/275/problem/C\n"}, "Heuristic": ["H2", "H9"]}, {"nl": {"id": 1558, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1559, "comment": "//System.err.println(a[n-i-1] + \" \" + st.get(a[n-i-1])); \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1559, "comment": "//System.err.println(x); \n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1561, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author emotionalBlind\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1561, "comment": "// InputMismatchException -> UnknownError\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1562, "comment": "/**\n * Actual solution is at the top, in class Solver\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1562, "comment": "//@Override\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1562, "comment": "//\t\t\t\toutputStream = new FileOutputStream(\"IO/out.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1562, "comment": "//\t\t\t\tinputStream = new FileInputStream(\"IO/in.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1562, "comment": "//\t\t\t\toutputStream = new FileOutputStream(\"IO/out.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1562, "comment": "//\t\tSequenceUtils.quickSort(mas);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1562, "comment": "// add vertexes\n"}, "Heuristic": []}, {"nl": {"id": 1562, "comment": "// add edge\n"}, "Heuristic": []}, {"nl": {"id": 1562, "comment": "// iterate through incident edges\n"}, "Heuristic": []}, {"nl": {"id": 1562, "comment": "// graph info\n"}, "Heuristic": []}, {"nl": {"id": 1562, "comment": "// simple edge info\n"}, "Heuristic": []}, {"nl": {"id": 1562, "comment": "// weighted edge info\n"}, "Heuristic": []}, {"nl": {"id": 1562, "comment": "// flow edge info\n"}, "Heuristic": []}, {"nl": {"id": 1562, "comment": "// add vertexes\n"}, "Heuristic": []}, {"nl": {"id": 1562, "comment": "// add edge\n"}, "Heuristic": []}, {"nl": {"id": 1562, "comment": "// iterate through incident edges\n"}, "Heuristic": []}, {"nl": {"id": 1562, "comment": "// graph info\n"}, "Heuristic": []}, {"nl": {"id": 1562, "comment": "// simple edge info\n"}, "Heuristic": []}, {"nl": {"id": 1562, "comment": "// weighted edge info\n"}, "Heuristic": []}, {"nl": {"id": 1562, "comment": "// flow edge info\n"}, "Heuristic": []}, {"nl": {"id": 1562, "comment": "// swap\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1562, "comment": "// reverse\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1562, "comment": "// next permutation\n"}, "Heuristic": []}, {"nl": {"id": 1562, "comment": "// random shuffle\n"}, "Heuristic": []}, {"nl": {"id": 1562, "comment": "// merge sort\n"}, "Heuristic": []}, {"nl": {"id": 1562, "comment": "// quick sort\n"}, "Heuristic": []}, {"nl": {"id": 1562, "comment": "// unique\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1565, "comment": "//------------------------------------------------------------------------------\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1567, "comment": "//basically tried to understand ping's greedy alg\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1567, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1567, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1568, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author ocelopilli\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1568, "comment": "//out.println( a[i]+\" \"+a[pos] );\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1569, "comment": "/**\n     * @param args\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1570, "comment": "/* Dear hacker, don't bother reading below this line, unless you want to help me debug my I/O routines :-) */"}, "Heuristic": ["H4", "H7"]}, {"nl": {"id": 1570, "comment": "////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1570, "comment": "//////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1570, "comment": "////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1570, "comment": "////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1573, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Jacob Jiang\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1579, "comment": "// long start = System.currentTimeMillis();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1579, "comment": "// long end = System.currentTimeMillis();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1579, "comment": "// System.out.println(\" Execution time was \"+(end-start)+\" ms.\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1581, "comment": "// {{{\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1581, "comment": "// }}}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1581, "comment": "// {{{\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1581, "comment": "// }}}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1581, "comment": "// {{{\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1581, "comment": "// }}}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1582, "comment": "// in = new BufferedReader(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1582, "comment": "// out = new PrintWriter(\"output.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1582, "comment": "// new Thread(null, new Solution(), \"1\", 1 << 28).start();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1583, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author niyaznigmatul \n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1586, "comment": "// in = new BufferedReader(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1586, "comment": "// out = new PrintWriter(\"output.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1586, "comment": "// new Thread(null, new Solution(), \"1\", 1 << 28).start();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1587, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Egor Kulikov (egor@egork.net)\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1590, "comment": "//sortInt(b);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1592, "comment": "//      private static final int BUFFER_SIZE = 50 * 200000;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1593, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Egor Kulikov (egor@egork.net)\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1594, "comment": "//sortInt(b);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1596, "comment": "// in = new BufferedReader(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1596, "comment": "// out = new PrintWriter(\"output.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1598, "comment": "//package round136;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1599, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1600, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Jacob Jiang\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1604, "comment": "/**\n * Actual solution is at the top, in class Solver\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1604, "comment": "//\t\t\t\toutputStream = new FileOutputStream(\"IO/out.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1604, "comment": "//\t\t\t\tinputStream = new FileInputStream(\"file_name\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1604, "comment": "//\t\t\t\toutputStream = new FileOutputStream(\"file_name\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1605, "comment": "////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1605, "comment": "// reader=new BufferedReader(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1605, "comment": "//writer=new PrintWriter(new PrintWriter(System.out));\n"}, "Heuristic": []}, {"nl": {"id": 1605, "comment": "//writer=new PrintWriter(new FileWriter(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1605, "comment": "//writer.close();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1609, "comment": "////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1609, "comment": "// reader=new BufferedReader(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1609, "comment": "//writer=new PrintWriter(new FileWriter(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1610, "comment": "// try {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1610, "comment": "// in = new Scanner(new FileInputStream(fileName + \".in\"), \"ISO-8859-1\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1610, "comment": "// out = new PrintWriter(fileName + \".out\", \"ISO-8859-1\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1610, "comment": "// } catch (FileNotFoundException e) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1610, "comment": "// throw new Error(e);\n"}, "Heuristic": []}, {"nl": {"id": 1610, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1610, "comment": "// } catch (UnsupportedEncodingException e) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1610, "comment": "// throw new Error(e);\n"}, "Heuristic": []}, {"nl": {"id": 1610, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1612, "comment": "/*\n * @author Ivan Pryvalov (ivan.pryvalov@gmail.com)\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 1612, "comment": "/**\n\t\t * Please ensure ar.length <= byteBuf.length!\n\t\t * \n\t\t * @param ar\n\t\t * @throws IOException\n\t\t */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1612, "comment": "/**\n\t\t * Returns next meaningful character as a byte.<br>\n\t\t * \n\t\t * @return\n\t\t * @throws IOException\n\t\t */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1612, "comment": "/**\n\t\t * Returns next meaningful character OR space as a byte.<br>\n\t\t * \n\t\t * @return\n\t\t * @throws IOException\n\t\t */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1612, "comment": "/**\n\t     * Reads line.\n\t     * \n\t     * @return\n\t     * @throws IOException\n\t     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1612, "comment": "/**\n\t     * Reads token. Spacebar is separator char.\n\t     * \n\t     * @return\n\t     * @throws IOException\n\t     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1612, "comment": "/**\n\t     * Spacebar is included as separator char\n\t     * \n\t     * @throws IOException\n\t     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1612, "comment": "/*\n\t\t//TODO test Unix/Windows formats\n\t\tpublic void toNextLine() throws IOException{\n\t\t\twhile ((ch=nextChar())!='\\n');\n\t\t}\n\t\t*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1612, "comment": "/////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1612, "comment": "//important to read long-string tokens properly\n"}, "Heuristic": []}, {"nl": {"id": 1612, "comment": "//InputStream bis;\n"}, "Heuristic": []}, {"nl": {"id": 1612, "comment": "//OutputStream bos;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1612, "comment": "//\t@Override\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1612, "comment": "//PrintStream out = null;\n"}, "Heuristic": []}, {"nl": {"id": 1612, "comment": "//48 or 0x30\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1612, "comment": "//32 or 0x20\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1612, "comment": "//45 or 0x2d\t\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1612, "comment": "//!!!\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1612, "comment": "//TODO test Unix/Windows formats\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1613, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1614, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Sunits789\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1615, "comment": "// br = new BufferedReader(new FileReader(\"G.in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1615, "comment": "// out = new PrintWriter(\"G.out\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1616, "comment": "////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1616, "comment": "// reader=new BufferedReader(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1616, "comment": "//writer=new PrintWriter(new PrintWriter(System.out));\n"}, "Heuristic": []}, {"nl": {"id": 1616, "comment": "//writer=new PrintWriter(new FileWriter(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1616, "comment": "//writer.close();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1617, "comment": "//package round136;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1618, "comment": "//LinkedList <Integer> gavno = new LinkedList<Integer>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1618, "comment": "//gavno.add(i);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1620, "comment": "/**\n * User: serparamon\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1620, "comment": "//Scanner in = new Scanner(System.in);\n"}, "Heuristic": []}, {"nl": {"id": 1622, "comment": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 1622, "comment": "/**\n *\n * @author Andy Phan\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1622, "comment": "//@\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1622, "comment": "//$\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1622, "comment": "//@\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1622, "comment": "// Computes the modular inverse of x\n"}, "Heuristic": []}, {"nl": {"id": 1622, "comment": "// Returns 0 if the GCD of x and mod is not 1\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1622, "comment": "// O(log n)  :  Can be converted to use BigIntegers\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1622, "comment": "//@\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1624, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1625, "comment": "/* public double nextDouble() {\n            return Double.parseDouble(next());\n        }\n        \n        public int[] nextIntArray(int n) {\n            int[] a = new int[n];\n            for (int i = 0; i < n; ++i) {\n                a[i] = nextInt();\n            }\n            return a;\n        }\n        \n        public long[] nextLongArray(int n) {\n            long[] a = new long[n];\n            for (int i = 0; i < n; i++) {\n                a[i] = nextLong();\n            }\n            return a;\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1626, "comment": "// 0 100=4 1000=8 10000=16\n"}, "Heuristic": []}, {"nl": {"id": 1628, "comment": "//        out.println(inversions);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1628, "comment": "//        System.err.println(Arrays.toString(a));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1629, "comment": "//System.out.println(i);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1633, "comment": "/**\n     * @param args\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1634, "comment": "/////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1634, "comment": "// IO\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1634, "comment": "/////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1634, "comment": "/////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1634, "comment": "/////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1634, "comment": "// pre - written\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1634, "comment": "/////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1634, "comment": "//////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1635, "comment": "/**\n * Write a description of class VK2A here.\n * \n * @author (your name) \n * @version (a version number or a date)\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1638, "comment": "/**\n     * @param args\n     * @throws IOException \n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1638, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1639, "comment": "/**\n\t * @param args\n\t * @throws IOException \n\t */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1639, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1640, "comment": "// VK Cup 2012 Round2 Unofficial Div2 Edition\n"}, "Heuristic": []}, {"nl": {"id": 1643, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1645, "comment": "/**\n * Created by IntelliJ IDEA.\n * User: \u041c\u0438\u0445\u0430\u0438\u043b\n * Date: 25.03.12\n * Time: 19:03\n * To change this template use File | Settings | File Templates.\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1646, "comment": "/**\n * Created by IntelliJ IDEA.\n * User: Mirza\n * Date: 25.03.12\n * Time: 18:51\n * To change this template use File | Settings | File Templates.\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1646, "comment": "//static StreamTokenizer in; static int next() throws Exception {in.nextToken(); return (int) in.nval;}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1646, "comment": "//  static BufferedReader in;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1646, "comment": "//      in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1646, "comment": "//      in = new BufferedReader(new InputStreamReader(System.in));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1648, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author hheng\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1649, "comment": "//\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0442\u043e\u043a\u0435\u043d\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1650, "comment": "/**\n\t * @param args\n\t * @throws IOException\n\t */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1652, "comment": "/**\n * @author Vaibhav Mittal\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1654, "comment": "//<editor-fold desc=\"input parse\" defaultstate=\"collapsed\">\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1654, "comment": "//</editor-fold>\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1657, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author codeKNIGHT\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1658, "comment": "/*--------------------------------------------------------------*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 1660, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author @zhendeaini6001\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1661, "comment": "/****************************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 1661, "comment": "/****************************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 1664, "comment": "//\tstatic StreamTokenizer in; static int next() throws Exception {in.nextToken(); return (int) in.nval;}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1664, "comment": "//\tstatic BufferedReader in;\n"}, "Heuristic": []}, {"nl": {"id": 1664, "comment": "//\t\tin = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n"}, "Heuristic": []}, {"nl": {"id": 1664, "comment": "//\t\tin = new BufferedReader(new InputStreamReader(System.in));\n"}, "Heuristic": []}, {"nl": {"id": 1666, "comment": "// BufferedReader in = new BufferedReader(new\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1666, "comment": "// InputStreamReader(System.in));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1668, "comment": "//2.2250738585072012e-308\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1672, "comment": "//      System.out.println(Arrays.toString(ar));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1673, "comment": "//higher\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1673, "comment": "//lower\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1673, "comment": "//System.out.println(Arrays.toString(C));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1674, "comment": "//Main Code starts Here\n"}, "Heuristic": []}, {"nl": {"id": 1679, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1680, "comment": "//stdin\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1680, "comment": "//System.err.println(\"Input: \" + line);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1680, "comment": "//System.out.println(\"I read this number: \" + val);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1680, "comment": "//System.out.println(\"I read this number: \" + val);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1687, "comment": "/* (non-Javadoc)\n   * @see java.lang.Comparable#compareTo(java.lang.Object)\n   */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1687, "comment": "/** call this method to initialize reader for InputStream */"}, "Heuristic": []}, {"nl": {"id": 1687, "comment": "/** get next word */"}, "Heuristic": []}, {"nl": {"id": 1687, "comment": "//Scanner input = new Scanner(new File(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1687, "comment": "//PrintWriter out = new PrintWriter(new File(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1687, "comment": "// TODO(mkirsche): Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1687, "comment": "//TODO add check for eof if necessary\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1689, "comment": "//TODO parameters\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1689, "comment": "//=========================================================================================================================\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1691, "comment": "//System.out.println(numhouse);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1691, "comment": "//System.out.println(requireside);\t\t\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1691, "comment": "//System.out.println(coo);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1691, "comment": "//System.out.println(side);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1693, "comment": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 1693, "comment": "/**\n *\n * @author madi\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1698, "comment": "//cand.add(tbl[0].x - tbl[0].len / 2);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1702, "comment": "/*\n * Hello! You are trying to hack my solution, are you? =)\n * Don't be afraid of the size, it's just a dump of useful methods like gcd, or n-th Fib number.\n * And I'm just too lazy to create a new .java for every task.\n * And if you were successful to hack my solution, please, send me this test as a message or to Abrackadabraa@gmail.com.\n * It can help me improve my skills and i'd be very grateful for that.\n * Sorry for time you spent reading this message. =)\n * Good luck, unknown rival. =)\n * */"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": 1702, "comment": "/*\n\t * class cubeWithLetters { String consts = \"\u0427\u041a\u0422\u0424\u042d\u0426\"; char[][] letters = { {\n\t * '\u0410', '\u0411', '\u0413', '\u0412' }, { '\u0414', '\u0415', '\u0417', '\u0416' }, { '\u0418', '\u041b', '\u041d', '\u041c' }, {\n\t * '\u041e', '\u041f', '\u0421', '\u0420' }, { '\u0423', '\u0425', '\u0429', '\u0428' }, { '\u042b', '\u042c', '\u042f', '\u042e' } };\n\t * \n\t * char get(char x) { if (consts.indexOf(x) != -1) return x; for (int i = 0;\n\t * i < 7; i++) { for (int j = 0; j < 4; j++) { if (letters[i][j] == x) { if\n\t * (j == 0) return letters[i][3]; else return letters[i][j - 1]; } } }\n\t * return '!'; }\n\t * \n\t * void subrotate(int x) { char t = letters[x][0]; letters[x][0] =\n\t * letters[x][3]; letters[x][3] = letters[x][2]; letters[x][2] =\n\t * letters[x][1]; letters[x][1] = t; }\n\t * \n\t * void rotate(int x) { subrotate(x); char t; if (x == 0) { t =\n\t * letters[1][0]; letters[1][0] = letters[2][0]; letters[2][0] =\n\t * letters[3][0]; letters[3][0] = letters[5][2]; letters[5][2] = t;\n\t * \n\t * t = letters[1][1]; letters[1][1] = letters[2][1]; letters[2][1] =\n\t * letters[3][1]; letters[3][1] = letters[5][3]; letters[5][3] = t; } if (x\n\t * == 1) { t = letters[2][0]; letters[2][0] = letters[0][0]; letters[0][0] =\n\t * letters[5][0]; letters[5][0] = letters[4][0]; letters[4][0] = t;\n\t * \n\t * t = letters[2][3]; letters[2][3] = letters[0][3]; letters[0][3] =\n\t * letters[5][3]; letters[5][3] = letters[4][3]; letters[4][3] = t; } if (x\n\t * == 2) { t = letters[0][3]; letters[0][3] = letters[1][2]; letters[1][2] =\n\t * letters[4][1]; letters[4][1] = letters[3][0]; letters[3][0] = t;\n\t * \n\t * t = letters[0][2]; letters[0][2] = letters[1][1]; letters[1][1] =\n\t * letters[4][0]; letters[4][0] = letters[3][3]; letters[3][3] = t; } if (x\n\t * == 3) { t = letters[2][1]; letters[2][1] = letters[4][1]; letters[4][1] =\n\t * letters[5][1]; letters[5][1] = letters[0][1]; letters[0][1] = t;\n\t * \n\t * t = letters[2][2]; letters[2][2] = letters[4][2]; letters[4][2] =\n\t * letters[5][2]; letters[5][2] = letters[0][2]; letters[0][2] = t; } if (x\n\t * == 4) { t = letters[2][3]; letters[2][3] = letters[1][3]; letters[1][3] =\n\t * letters[5][1]; letters[5][1] = letters[3][3]; letters[3][3] = t;\n\t * \n\t * t = letters[2][2]; letters[2][2] = letters[1][2]; letters[1][2] =\n\t * letters[5][0]; letters[5][0] = letters[3][2]; letters[3][2] = t; } if (x\n\t * == 5) { t = letters[4][3]; letters[4][3] = letters[1][0]; letters[1][0] =\n\t * letters[0][1]; letters[0][1] = letters[3][2]; letters[3][2] = t;\n\t * \n\t * t = letters[4][2]; letters[4][2] = letters[1][3]; letters[1][3] =\n\t * letters[0][0]; letters[0][0] = letters[3][1]; letters[3][1] = t; } }\n\t * \n\t * public String toString(){ return \"  \" + letters[0][0] + letters[0][1] +\n\t * \"\\n\" + \"  \" + letters[0][3] + letters[0][2] + \"\\n\" + letters[1][0] +\n\t * letters[1][1] + letters[2][0] + letters[2][1] + letters[3][0] +\n\t * letters[3][1] + \"\\n\" + letters[1][3] + letters[1][2] + letters[2][3] +\n\t * letters[2][2] + letters[3][3] + letters[3][2] + \"\\n\" + \"  \" +\n\t * letters[4][0] + letters[4][1] + \"\\n\" + \"  \" + letters[4][3] +\n\t * letters[4][2] + \"\\n\" + \"  \" + letters[5][0] + letters[5][1] + \"\\n\" + \"  \"\n\t * + letters[5][3] + letters[5][2] + \"\\n\"; } }\n\t * \n\t * \n\t * Vector<Integer>[] a; int n, mc, c1, c2; int[] col;\n\t * \n\t * void wave(int x, int p) { for (Iterator<Integer> i = a[x].iterator();\n\t * i.hasNext(); ) { int t = i.next(); if (t == x || t == p) continue; if\n\t * (col[t] == 0) { col[t] = mc; wave(t, x); } else { c1 = x; c2 = t; } } }\n\t * \n\t * void solve() throws IOException {\n\t * \n\t * String s = \"\u0415\u041f\u041e\u0415\u042c\u0420\u0418\u0422\u0421\u0413\u0425\u0416\u0417\u0422\u042f\u041f\u0421\u0422\u0410\u041f\u0414\u0421\u0411\u0418\u0421\u0422\u0427\u041a\"; //String s =\n\t * \"\u0417\u042c\u0423\u041e\u042b\u0422\u0412\u0417\u0422\u042f\u041f\u0423\u0411\u041e\u042b\u0422\u0415\u0410\u042b\u0428\u0425\u042f\u0410\u0422\u0427\u041a\"; cubeWithLetters cube = new\n\t * cubeWithLetters(); for (int x = 0; x < 4; x++) { for (int y = x + 1; y <\n\t * 5; y++) { for (int z = y + 1; z < 6; z++) { cube = new cubeWithLetters();\n\t * out.println(cube.toString()); cube.rotate(x);\n\t * out.println(cube.toString()); cube.rotate(y);\n\t * out.println(cube.toString()); cube.rotate(z);\n\t * out.println(cube.toString()); out.print(x + \" \" + y + \" \" + z + \" = \");\n\t * for (int i = 0; i < s.length(); i++) { out.print(cube.get(s.charAt(i)));\n\t * } out.println(); } } }\n\t * \n\t * int a = nextInt(), b = nextInt(), x = nextInt(), y = nextInt();\n\t * out.print((lib.min(a / (x / lib.gcd(x, y)), b / (y / lib.gcd(x, y))) * (x\n\t * / lib.gcd(x, y))) + \" \" + (lib.min(a / (x / lib.gcd(x, y)), b / (y /\n\t * lib.gcd(x, y))) * (y / lib.gcd(x, y)))); }\n\t */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1702, "comment": "// double d = 2.2250738585072012e-308;\n"}, "Heuristic": []}, {"nl": {"id": 1702, "comment": "// n - sum, l - length, m - every\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1702, "comment": "// part\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1702, "comment": "// <= m\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1702, "comment": "// long q = 0, t = 1;\n"}, "Heuristic": []}, {"nl": {"id": 1702, "comment": "// b > 0\n"}, "Heuristic": []}, {"nl": {"id": 1702, "comment": "// b > 0\n"}, "Heuristic": []}, {"nl": {"id": 1702, "comment": "// b > 0\n"}, "Heuristic": []}, {"nl": {"id": 1702, "comment": "// least prime divisor\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1702, "comment": "// number of prime number\n"}, "Heuristic": []}, {"nl": {"id": 1702, "comment": "//String s =\n"}, "Heuristic": []}, {"nl": {"id": 1705, "comment": "//in = new BufferedReader(new FileReader(new File(\"input.txt\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1705, "comment": "//out = new PrintWriter(new File(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1705, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1710, "comment": "//\t\tint x = 0 ;\n"}, "Heuristic": []}, {"nl": {"id": 1710, "comment": "//\t\t\tx++;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1710, "comment": "//\t\t\tif(x == 2)\n"}, "Heuristic": []}, {"nl": {"id": 1710, "comment": "//\t\t\t\tbreak;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1711, "comment": "//System.out.println(na+\" \"+nb);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1712, "comment": "//\tstatic Scanner in;\n"}, "Heuristic": []}, {"nl": {"id": 1712, "comment": "//\t\tin = new Scanner(System.in);\n"}, "Heuristic": []}, {"nl": {"id": 1713, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1713, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1713, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1715, "comment": "/**\n *\n * @author camoroh13\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1715, "comment": "//       Scanner sc = new Scanner(new FileInputStream(\"/home/camoroh13/NetBeansProjects/JavaApplication1/src/input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1715, "comment": "//        int[][] h = new int[n][2];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1715, "comment": "//System.out.println(Math.abs(key-val*1.0/2 - (lastKey + last*1.0/2)) + \"-\" + key + \"-\"+val);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1717, "comment": "/**\n * @author Son-Huy TRAN\n * \n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1717, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1721, "comment": "////////////////////////////////////////////////////////////////    \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1721, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1721, "comment": "////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1722, "comment": "/*\n\t\t\tif(cottages[0].end + t < cottages[1].beginning)\n\t\t\t\tcounter++;\n\t\t\t//check lefthand side of last cottage\n\t\t\t\n\t\t\tif(cottages[numbCottages-1].beginning -t > cottages[numbCottages-2].end)\n\t\t\t\tcounter++;\n\t\t\t\t\n\t\t\t\t*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1722, "comment": "//check righthand side of first cottage\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1722, "comment": "//check lefthand side of last cottage\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1722, "comment": "//\t\t\t\t\tSystem.out.println(counter + \"left hand\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1722, "comment": "//\t\t\t\t\tSystem.out.println(counter + \"right hand\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1722, "comment": "//\t\t\tif(this.beginning<house.beginning){\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1722, "comment": "//\t\t\t\treturn -1;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1722, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1722, "comment": "//\t\t\telse if(this.beginning==house.beginning){\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1722, "comment": "//\t\t\t\treturn 0;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1722, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1722, "comment": "//\t\t\telse{\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1722, "comment": "//\t\t\t\treturn 1;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1722, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1723, "comment": "/**\n *\n * @author epiZend\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1723, "comment": "//System.out.println(\"end \"+end+\" start \"+start);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1723, "comment": "//System.out.println(\"diff\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1724, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1735, "comment": "/**\n * Created by HREN_VAM.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1735, "comment": "//in = new BufferedReader(new FileReader(filename + \".in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1735, "comment": "//out = new PrintWriter(new FileWriter(filename + \".out\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1737, "comment": "//how many positions between house i and house i + 1 can we fit in?\n"}, "Heuristic": ["H12"]}, {"nl": {"id": 1739, "comment": "//Left\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1742, "comment": "/**\n * @author Alexander Grigoryev\n *         Created on 28.07.2011\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1744, "comment": "/**\n * \n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1744, "comment": "/**\n * @author burdakovd\n * \n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1744, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1748, "comment": "//input = new BufferedReader(new FileReader(file + \".in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1752, "comment": "//end public void main()\n"}, "Heuristic": []}, {"nl": {"id": 1752, "comment": "//int pair\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1755, "comment": "// Read the header\n"}, "Heuristic": []}, {"nl": {"id": 1755, "comment": "// Read the houses\n"}, "Heuristic": []}, {"nl": {"id": 1755, "comment": "// Sort the houses\n"}, "Heuristic": []}, {"nl": {"id": 1756, "comment": "/**\n * @author Egor Kulikov (egor@egork.net)\n *         Created on 14.03.2010\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1756, "comment": "//\t\tnew Template().run();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1756, "comment": "//\t\tString id = getClass().getName().toLowerCase();\n"}, "Heuristic": []}, {"nl": {"id": 1756, "comment": "//\t\ttry {\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1756, "comment": "//\t\t\tSystem.setIn(new FileInputStream(id + \".in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1756, "comment": "//\t\t\tSystem.setOut(new PrintStream(new FileOutputStream(id + \".out\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1756, "comment": "//\t\t\tSystem.setIn(new FileInputStream(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1756, "comment": "//\t\t\tSystem.setOut(new PrintStream(new FileOutputStream(\"output.txt\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1756, "comment": "//\t\t} catch (FileNotFoundException e) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1756, "comment": "//\t\t\tthrow new RuntimeException();\n"}, "Heuristic": []}, {"nl": {"id": 1756, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1756, "comment": "//        int numTests = in.readInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1756, "comment": "//        for (int testNumber = 0; testNumber < numTests; testNumber++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1756, "comment": "//\t\t\tout.print(\"Case #\" + (testNumber + 1) + \": \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1756, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1757, "comment": "/**\n * Date 22.11.2011\n * Time 17:49:45\n * Author Woodey\n * $\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1759, "comment": "//package round15;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1759, "comment": "//\t\tin = new Scanner(new StringReader(\"2 3 0 4 5 2\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1759, "comment": "//\t\tint n = in.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1759, "comment": "//\t\t\tSystem.err.printf(\"%04d/%04d %7d%n\", i, n, System.currentTimeMillis() - t);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1760, "comment": "//package round15;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1763, "comment": "//~ 22:04:48\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1763, "comment": "//~ System.out.println(c+offset+j);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1763, "comment": "//~ System.out.println(last);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1763, "comment": "//~ System.out.println(index);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1764, "comment": "//atleast 2 possible configs\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1765, "comment": "// private void solution() throws IOException {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1765, "comment": "// int t = in.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1765, "comment": "// while (t-- > 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1765, "comment": "// int n =in.nextInt();\n"}, "Heuristic": []}, {"nl": {"id": 1765, "comment": "// int m = in.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1765, "comment": "// int x1 = in.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1765, "comment": "// int y1 = in.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1765, "comment": "// int x2 = in.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1765, "comment": "// int y2 = in.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1765, "comment": "//\t\t\t\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1765, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1765, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1767, "comment": "//have bult yet\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1767, "comment": "//new house\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1767, "comment": "//min way\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1767, "comment": "//real way\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1767, "comment": "//out.println(ideal);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1767, "comment": "//out.println(real);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1770, "comment": "// TODO Auto-generated constructor stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1770, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1771, "comment": "/*new File(\"input.txt\")*/"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 1773, "comment": "//Left\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1779, "comment": "//pw.printf(\"\\nWorking time: %d ms\\n\", System.currentTimeMillis() - st);            \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1780, "comment": "//beginning and end\n"}, "Heuristic": []}, {"nl": {"id": 1785, "comment": "//reader = new BufferedReader(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1785, "comment": "//writer = new PrintWriter(new BufferedWriter(new FileWriter(\"output.txt\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1785, "comment": "// long t=new Date().getTime();\n"}, "Heuristic": []}, {"nl": {"id": 1785, "comment": "// writer.println(t-new Date().getTime());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1787, "comment": "// a/b \u304c1\u306b\u8fd1\u3044\u3082\u306e\u3092\u63a2\u3059\n"}, "Heuristic": []}, {"nl": {"id": 1789, "comment": "//------------------------------------------------------------------------------\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1790, "comment": "//stdin\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1790, "comment": "//System.err.println(\"Input: \" + line);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1790, "comment": "//System.out.println(\"I read this number: \" + val);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1790, "comment": "//System.out.println(\"I read this number: \" + val);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1790, "comment": "//String filePath=\"input.txt\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1790, "comment": "//String filePath=\"D:\\\\_d\\\\learn\\\\coursera\\\\algorithms and design II\\\\data\\\\knapsack2.txt\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1792, "comment": "//            in = new BufferedReader(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1793, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author c0der\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1793, "comment": "//out.println(m+\" \"+a[i]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1794, "comment": "/**\n * Generated by Contest helper plug-in\n * Actual solution is at the bottom\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1796, "comment": "//package Round_159;\n"}, "Heuristic": []}, {"nl": {"id": 1797, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author coderbd\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1798, "comment": "// Sworn to fight and die\n"}, "Heuristic": []}, {"nl": {"id": 1798, "comment": "// ---->\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1798, "comment": "// return o.x - x; // <----\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1798, "comment": "// return o.y-y;\n"}, "Heuristic": []}, {"nl": {"id": 1801, "comment": "//package round159;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1801, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1802, "comment": "//package A;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1807, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1807, "comment": "//To change body of catch statement use File | Settings | File Templates.\n"}, "Heuristic": []}, {"nl": {"id": 1808, "comment": "// IO utilities:\n"}, "Heuristic": []}, {"nl": {"id": 1808, "comment": "//EOF\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1808, "comment": "// skip any non digits\n"}, "Heuristic": []}, {"nl": {"id": 1808, "comment": "// read digits and parse number\n"}, "Heuristic": []}, {"nl": {"id": 1808, "comment": "// check if we reached end of buffer\n"}, "Heuristic": []}, {"nl": {"id": 1808, "comment": "// copy leftovers to buffer start\n"}, "Heuristic": []}, {"nl": {"id": 1808, "comment": "// and now fill the buffer\n"}, "Heuristic": []}, {"nl": {"id": 1808, "comment": "// and attempt to parse int again\n"}, "Heuristic": []}, {"nl": {"id": 1808, "comment": "//EOF\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1808, "comment": "// skip any non digits\n"}, "Heuristic": []}, {"nl": {"id": 1808, "comment": "// read digits and parse number\n"}, "Heuristic": []}, {"nl": {"id": 1808, "comment": "// check if we reached end of buffer\n"}, "Heuristic": []}, {"nl": {"id": 1808, "comment": "// copy leftovers to buffer start\n"}, "Heuristic": []}, {"nl": {"id": 1808, "comment": "// and now fill the buffer\n"}, "Heuristic": []}, {"nl": {"id": 1808, "comment": "// and attempt to parse int again\n"}, "Heuristic": []}, {"nl": {"id": 1808, "comment": "//EOF\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1808, "comment": "// skip any non chars\n"}, "Heuristic": []}, {"nl": {"id": 1808, "comment": "// read chars\n"}, "Heuristic": []}, {"nl": {"id": 1808, "comment": "// check if we reached end of buffer\n"}, "Heuristic": []}, {"nl": {"id": 1808, "comment": "// copy leftovers to buffer start\n"}, "Heuristic": []}, {"nl": {"id": 1808, "comment": "// and now fill the buffer\n"}, "Heuristic": []}, {"nl": {"id": 1808, "comment": "// and attempt to parse int again\n"}, "Heuristic": []}, {"nl": {"id": 1808, "comment": "//EOF\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1808, "comment": "// read chars\n"}, "Heuristic": []}, {"nl": {"id": 1808, "comment": "// check if we reached end of buffer\n"}, "Heuristic": []}, {"nl": {"id": 1808, "comment": "// copy leftovers to buffer start\n"}, "Heuristic": []}, {"nl": {"id": 1808, "comment": "// and now fill the buffer\n"}, "Heuristic": []}, {"nl": {"id": 1808, "comment": "// and attempt to parse int again\n"}, "Heuristic": []}, {"nl": {"id": 1809, "comment": "/**\n *\n * @author oleksiys\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1811, "comment": "//package codeforces.contests.cf159;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1812, "comment": "////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1812, "comment": "//////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1812, "comment": "////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1812, "comment": "////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1813, "comment": "//System.out.println(filtery);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1813, "comment": "//System.out.println(devices + \" \" + act);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1815, "comment": "// in = new StreamTokenizer(new BufferedReader(new FileReader(\"input.txt\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1815, "comment": "// out = new PrintWriter(new FileWriter(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1815, "comment": "//  System.out.println(\"k \"+k);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1815, "comment": "//  System.out.println(k);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1817, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1818, "comment": "/**\n *\n * @author Natasha\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1820, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1826, "comment": "//\t\tBufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\n"}, "Heuristic": []}, {"nl": {"id": 1829, "comment": "//<editor-fold desc=\"input parse\" defaultstate=\"collapsed\">\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1829, "comment": "//</editor-fold>\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1829, "comment": "//reader = new java.io.BufferedReader(new java.io.FileReader(\"input.txt\"), 1 << 20);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1829, "comment": "//writer = new java.io.BufferedWriter(new java.io.FileWriter(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1830, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Lokesh Khandelwal\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1831, "comment": "/**\n\t * @param args\n\t * @throws IOException\n\t */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1831, "comment": "// BufferedReader rd = new BufferedReader(new\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1831, "comment": "// InputStreamReader(System.in));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1831, "comment": "// StringTokenizer t = new StringTokenizer(rd.readLine(), \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1832, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1833, "comment": "/**\n     * @param args\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1833, "comment": "//\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1833, "comment": "//\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1833, "comment": "//\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1836, "comment": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 1836, "comment": "/**\n *\n * @author AndresFelipe\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1837, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author BSRK Aditya (bsrkaditya@gmail.com)\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1838, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author kessido\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1842, "comment": "//System.out.println(count + \" \" + max);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1843, "comment": "//System.out.println(Arrays.toString(heights));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1843, "comment": "//System.out.println(Arrays.toString(heights));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1843, "comment": "//Is your Fast I/O being bad?\n"}, "Heuristic": ["H12"]}, {"nl": {"id": 1845, "comment": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */"}, "Heuristic": ["H2", "H7", "H9"]}, {"nl": {"id": 1845, "comment": "//www.apache.org/licenses/LICENSE-2.0\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1845, "comment": "//        int w = 200000, h = 200000, n = 400000;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1845, "comment": "//        Request[] requests = generate(w, h, n);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1845, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1845, "comment": "//        long start = System.currentTimeMillis();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1845, "comment": "//        solve(h, w, requests);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1845, "comment": "//        long end = System.currentTimeMillis();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1845, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1845, "comment": "//        System.out.println(\"Time: \" + (end - start) + \" ms\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1846, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Ribhav\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1847, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1847, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1847, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1847, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1847, "comment": "////////                                                                                                               /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1847, "comment": "////////                                                                                                               /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1847, "comment": "////////   HHHH        HHHH  EEEEEEEEEEEEE   MMMM          MMMM         OOOOOO             SSSSSSS      EEEEEEEEEEEEE  /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1847, "comment": "////////   HHHH        HHHH  EEEEEEEEEEEEE   MMMMMM      MMMMMM      OOO      OOO        SSSS   SSS     EEEEEEEEEEEEE  /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1847, "comment": "////////   HHHH        HHHH  EEEEE           MMMM MMM  MMM MMMM    OOO          OOO    SSSS       SSS   EEEEE          /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1847, "comment": "////////   HHHH        HHHH  EEEEE           MMMM  MMMMMM  MMMM   OOO            OOO   SSSS             EEEEE          /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1847, "comment": "////////   HHHH        HHHH  EEEEE           MMMM          MMMM  OOO              OOO   SSSSSSS         EEEEE          /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1847, "comment": "////////   HHHHHHHHHHHHHHHH  EEEEEEEEEEE     MMMM          MMMM  OOO              OOO      SSSSSS       EEEEEEEEEEE    /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1847, "comment": "////////   HHHHHHHHHHHHHHHH  EEEEEEEEEEE     MMMM          MMMM  OOO              OOO         SSSSSSS   EEEEEEEEEEE    /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1847, "comment": "////////   HHHH        HHHH  EEEEE           MMMM          MMMM   OOO            OOO              SSSS  EEEEE          /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1847, "comment": "////////   HHHH        HHHH  EEEEE           MMMM          MMMM    OOO          OOO     SSS       SSSS  EEEEE          /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1847, "comment": "////////   HHHH        HHHH  EEEEEEEEEEEEE   MMMM          MMMM      OOO      OOO        SSS    SSSS    EEEEEEEEEEEEE  /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1847, "comment": "////////   HHHH        HHHH  EEEEEEEEEEEEE   MMMM          MMMM         OOOOOO             SSSSSSS      EEEEEEEEEEEEE  /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1847, "comment": "////////                                                                                                               /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1847, "comment": "////////                                                                                                               /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1847, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1847, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1847, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1847, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1847, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1847, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1847, "comment": "//FileWriter f = new FileWriter(\"C:\\\\Users\\\\Ibrahim\\\\out.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1847, "comment": "//System.out.println(s+\" \"+k1+\" \"+k2);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1848, "comment": "//System.out.println(vectors);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1848, "comment": "//stop(500);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1848, "comment": "//System.out.println(\"CURR: \" + curr + \"\\n\" + next1 + \"\\n\" + next2);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1848, "comment": "//System.out.println(vectors.first().euclideanNorm());\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1849, "comment": "//Scanner sc = new Scanner();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1849, "comment": "//<>\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1850, "comment": "// discussed with rainboy\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1851, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author cunbidun\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1851, "comment": "// override to go 75% faster\n"}, "Heuristic": []}, {"nl": {"id": 1851, "comment": "// override to go 75% faster\n"}, "Heuristic": []}, {"nl": {"id": 1851, "comment": "// override to go 75% faster\n"}, "Heuristic": []}, {"nl": {"id": 1851, "comment": "// more on the right, so delete from the right\n"}, "Heuristic": []}, {"nl": {"id": 1851, "comment": "// more on the left or equal, so delete from the left\n"}, "Heuristic": []}, {"nl": {"id": 1851, "comment": "// special case where left that was deleted was a double link\n"}, "Heuristic": []}, {"nl": {"id": 1851, "comment": "// only occurs when height difference is equal\n"}, "Heuristic": []}, {"nl": {"id": 1851, "comment": "// can't be faedelung!\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1851, "comment": "// We need to efficiently merge the two AVL trees while keeping them\n"}, "Heuristic": []}, {"nl": {"id": 1851, "comment": "// balanced (or nearly balanced). To do this, we take the shorter\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1851, "comment": "// tree and combine it with a similar-height subtree of the taller\n"}, "Heuristic": []}, {"nl": {"id": 1851, "comment": "// tree. There are two symmetric cases:\n"}, "Heuristic": []}, {"nl": {"id": 1851, "comment": "//   * this tree is taller, or\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1851, "comment": "//   * otherTree is taller.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1851, "comment": "// CASE 1: The other tree is taller than this one. We will thus\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1851, "comment": "// merge this tree into otherTree.\n"}, "Heuristic": []}, {"nl": {"id": 1851, "comment": "// STEP 1: Remove the maximum element from this tree.\n"}, "Heuristic": []}, {"nl": {"id": 1851, "comment": "// STEP 2: Navigate left from the root of otherTree until we\n"}, "Heuristic": []}, {"nl": {"id": 1851, "comment": "// contains a subtree, s, that is no taller than me. (While we are\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1851, "comment": "// navigating left, we store the nodes we encounter in a stack\n"}, "Heuristic": []}, {"nl": {"id": 1851, "comment": "// so that we can re-balance them in step 4.)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1851, "comment": "// STEP 3: Replace s with a newly constructed subtree whose root\n"}, "Heuristic": []}, {"nl": {"id": 1851, "comment": "// is maxNode, whose left subtree is leftSubTree, and whose right\n"}, "Heuristic": []}, {"nl": {"id": 1851, "comment": "// subtree is s.\n"}, "Heuristic": []}, {"nl": {"id": 1851, "comment": "// STEP 4: Re-balance the tree and recalculate the heights of s's ancestors.\n"}, "Heuristic": []}, {"nl": {"id": 1851, "comment": "// remove() following next()\n"}, "Heuristic": []}, {"nl": {"id": 1851, "comment": "// the AVL node referenced by next may have become stale after a remove\n"}, "Heuristic": []}, {"nl": {"id": 1851, "comment": "// reset it now: will be retrieved by next call to next()/previous() via nextIndex\n"}, "Heuristic": []}, {"nl": {"id": 1855, "comment": "// good for depth of up to 1_048_576 = 2^20\n"}, "Heuristic": []}, {"nl": {"id": 1855, "comment": "// greatest depth first\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1858, "comment": "//-----------PrintWriter for faster output---------------------------------\n"}, "Heuristic": []}, {"nl": {"id": 1858, "comment": "//-----------MyScanner class for faster input----------\n"}, "Heuristic": []}, {"nl": {"id": 1858, "comment": "//--------------------------------------------------------\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1860, "comment": "/*public int hashCode()\n        {\n            return new Long(x).hashCode() * 31 + new Long(y).hashCode();\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1860, "comment": "//        long ans = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1860, "comment": "//        long sum = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1860, "comment": "//              ans += arr[i] * 1l * (i - y) - sum + x;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1860, "comment": "//return 0;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1861, "comment": "/* ignore */"}, "Heuristic": ["H7"]}, {"nl": {"id": 1861, "comment": "/* ignore */"}, "Heuristic": ["H7"]}, {"nl": {"id": 1861, "comment": "// k : 0-indexed\n"}, "Heuristic": []}, {"nl": {"id": 1861, "comment": "// [s, t)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1861, "comment": "//System.out.println(answer);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1862, "comment": "/*int t = nextInt();\n        for (int i = 0; i < t; i++) {\n            out.printf(Locale.US, \"Case #%d: %d\\n\", i + 1, solve());\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1862, "comment": "//            e.printStackTrace();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1863, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Liavontsi Brechka\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1864, "comment": "//Educational Codeforces Round 34\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1867, "comment": "//Compress values to be 1-indexed\n"}, "Heuristic": []}, {"nl": {"id": 1867, "comment": "//rev.put(comp.get(copy[i]), copy[i]);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1867, "comment": "//\tBIT bit = new BIT(n);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1867, "comment": "//Go through each element in the array\n"}, "Heuristic": []}, {"nl": {"id": 1867, "comment": "//freq[comp.get(x)]--;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1867, "comment": "//Find the amount of values equal to (x-1), x, and (x+1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1867, "comment": "//\tSystem.out.println(\"x= \"+x+\" b:\"+below+\"  e:\"+eq+\"  a:\"+above);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1867, "comment": "//\t\tSystem.out.println(\"sum:\"+sum+\"  leave:\"+leaveOut+\"  oth:\"+other+\"   cur:\"+cur+\"\\n\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1868, "commentn"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1869, "comment": "//out = new PrintWriter(new BufferedWriter(new FileWriter(\"output.out\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1870, "comment": "/*\n\t\t * Node[] nn = new Node[n]; for(int i=0;i<n;i++) { nn[i] = new Node();\n\t\t * nn[i].node = i; nn[i].dist = arr[i]; } //debug(fa); Arrays.sort(nn);\n\t\t * //debug(nn); for(int i=0;i<n-1;i++) { if(nn[i].dist + 1 == nn[i+1].dist) {\n\t\t * System.out.println(nn[i].node +\" \"+nn[i+1].node); if(nn[i].node >\n\t\t * nn[i+1].node) { fa++; }else fa--; } }\n\t\t */"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 1870, "comment": "/*if(i==1 && j==3) {\n\t\t// System.out.println(cnt+\" \"+i+\" \"+j+\" \"+s);\n\t\t// debug(indi);\n\t\t// }*/"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 1870, "comment": "/*\n\t\t * try { InputReader(new FileInputStream(\"C:\\\\Users\\\\hardik\\\\Desktop\\\\in.txt\"));\n\t\t * } catch(FileNotFoundException e) {}\n\t\t */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1870, "comment": "// debug(ans);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1870, "comment": "//debug(fa); Arrays.sort(nn);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1870, "comment": "//debug(nn); for(int i=0;i<n-1;i++) { if(nn[i].dist + 1 == nn[i+1].dist) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1870, "comment": "// int k = nextInt();\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// int n = nextInt();\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// String[] arr = new String[k];\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// for(int i=0;i<k;i++)\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// arr[i] = nextLine();\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// HashSet<String> set1 = new HashSet<>();\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// for(int i=0;i<k;i++)\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// set1.add(arr[i]);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1870, "comment": "// if(set1.size() == 1) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1870, "comment": "// String s = arr[0];\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// pw.print(s.charAt(1));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1870, "comment": "// pw.print(s.charAt(0));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1870, "comment": "// for(int i=2;i<n;i++)\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// pw.print(s.charAt(i));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1870, "comment": "// }else {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1870, "comment": "// String s1 = arr[0];\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// set1.remove(arr[0]);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1870, "comment": "// HashSet<Integer>[] aa = new HashSet[set1.size()];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1870, "comment": "// ArrayList<String> set = new ArrayList<>();\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// for(String s:set1)\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// set.add(s);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1870, "comment": "// int k1 = 0;\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// boolean f1 = false;\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// for(String s:set) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1870, "comment": "// aa[k1] = new HashSet<>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1870, "comment": "// for(int i=0;i<n;i++)\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// if(s1.charAt(i) != s.charAt(i))\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// aa[k1].add(i);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1870, "comment": "// if(aa[k1].size() > 4) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1870, "comment": "// pw.println(-1);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1870, "comment": "// f1 = true;\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1870, "comment": "// k1++;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1870, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1870, "comment": "// //debug(set);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1870, "comment": "// char[] ch = s1.toCharArray();\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1870, "comment": "// boolean[] f11 = new boolean[set.size()];\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// int k2 = 0;\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// for(String s:set) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1870, "comment": "// int[] freq = new int[26];\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// for(int i=0;i<n;i++)\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// freq[s.charAt(i)-'a']++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1870, "comment": "// boolean kuu = false;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1870, "comment": "// for(int i=0;i<26;i++)\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// if(freq[i] >= 2) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1870, "comment": "// kuu = true;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1870, "comment": "// break;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1870, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1870, "comment": "// f11[k2] = true;\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// k2++;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1870, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1870, "comment": "// // debug(f11);\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1870, "comment": "// for(int i=0;i<n;i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1870, "comment": "// if(f1)\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1870, "comment": "// break;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1870, "comment": "// for(int j=i+1;j<n;j++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1870, "comment": "// if(f1)\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1870, "comment": "// break;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1870, "comment": "// //System.out.println(i+\" \"+j);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1870, "comment": "// char tmp = ch[i];\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// ch[i] = ch[j];\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// ch[j] = tmp;\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// k1 = 0;\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// HashSet<Integer> haha = new HashSet<>();\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// boolean f = true;\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// for(String s:set) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1870, "comment": "// HashSet<Integer> indi = aa[k1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1870, "comment": "// boolean h1 = false;\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// boolean h2 = false;\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// if(!indi.contains(i)) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1870, "comment": "// indi.add(i);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1870, "comment": "// h1 = true;\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1870, "comment": "// if(!indi.contains(j)) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1870, "comment": "// indi.add(j);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1870, "comment": "// h2 = true;\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1870, "comment": "// int cnt = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1870, "comment": "// for(int ii:indi) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1870, "comment": "// if(s.charAt(ii) != ch[ii])\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1870, "comment": "// cnt++;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1870, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1870, "comment": "// /*if(i==1 && j==3) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1870, "comment": "// System.out.println(cnt+\" \"+i+\" \"+j+\" \"+s);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1870, "comment": "// debug(indi);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1870, "comment": "// }*/\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1870, "comment": "// if(cnt > 2 ) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1870, "comment": "// f = false;\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// break;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1870, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1870, "comment": "// if(cnt ==1 && !f11[k1]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1870, "comment": "// f = false;\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// break;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1870, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1870, "comment": "// if(h1)\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1870, "comment": "// indi.remove(i);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1870, "comment": "// if(h2)\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1870, "comment": "// indi.remove(j);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1870, "comment": "// k1++;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1870, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1870, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1870, "comment": "// if(f) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1870, "comment": "// for(int i1=0;i1<n;i1++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1870, "comment": "// pw.print(ch[i1]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1870, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1870, "comment": "// f1 = true;\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// break;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1870, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1870, "comment": "// tmp = ch[i];\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// ch[i] = ch[j];\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// ch[j] = tmp;\n"}, "Heuristic": []}, {"nl": {"id": 1870, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1870, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1870, "comment": "// if(!f1)\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1870, "comment": "// pw.println(-1);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1870, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1870, "comment": "// this.set = set1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1870, "comment": "// System.out.println(l+\" \"+r+\" \"+tree[id].l+\" \"+tree[id].r+\" \"+tree[id].ans);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1870, "comment": "// shift(id);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1870, "comment": "// System.out.println(l+\" \"+r+\" \"+x);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1870, "comment": "// shift(id);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1870, "comment": "// System.out.println(ans_sb);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1871, "comment": "//\t\t\tSystem.out.println(sum + \" \" + a[i].val);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1871, "comment": "//\t\tSystem.out.println(Arrays.toString(update));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1871, "comment": "//\t\t\tSystem.out.println(a[i].val + \" \" + a[i].id + \" \" + right + \" \" + freq);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1871, "comment": "//\t\t\tres += right - (val * freq);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1871, "comment": "//\t\t\tres += (val * freq) - left;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1871, "comment": "//\t\t\tSystem.out.println(a[i].val + \" \" + a[i].id + \" \" + left + \" \" + freq);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1871, "comment": "//\t\t\tSystem.out.println();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1871, "comment": "//\t\t\tSystem.out.println(i + \" \" + b[i].val + \" \" + fr);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1871, "comment": "//\t\t\tres -= (fr*(b[i].val+1)) - (fr*b[i].val);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1871, "comment": "//\t\tSystem.out.println(res);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1871, "comment": "//\t\t\tSystem.out.println(i + \" \" + b[i].val + \" \" + fr);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1871, "comment": "//\t\t\tres += (fr*(b[i].val+1)) - (fr*b[i].val);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1871, "comment": "//Remember that when querying a sum to query the 1-based index of the value.\n"}, "Heuristic": []}, {"nl": {"id": 1871, "comment": "//\t\t\t\tbr = new BufferedReader(new FileReader(\"cases.in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1872, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author khokharnikunj8\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1873, "comment": "// calculate the amount added for all j = n all at once\n"}, "Heuristic": []}, {"nl": {"id": 1873, "comment": "// it's a[j] - a[i]\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1873, "comment": "// step one\n"}, "Heuristic": []}, {"nl": {"id": 1873, "comment": "// positive part\n"}, "Heuristic": []}, {"nl": {"id": 1873, "comment": "// step two\n"}, "Heuristic": []}, {"nl": {"id": 1873, "comment": "// negative part\n"}, "Heuristic": []}, {"nl": {"id": 1873, "comment": "//\t\t\tSystem.out.println(amtPlus+\" \"+amtMinus);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1873, "comment": "// range [ll, rr)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1873, "comment": "// number of values in between [lo, hi] in range [ll, rr)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1873, "comment": "// sum of values between [lo, hi] in range [ll, rr)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1874, "comment": "/*\n * PDPM IIITDM Jabalpur\n * Asutosh Rana\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 1874, "comment": "//in.readInt();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1874, "comment": "// res = res + (count*A[i] - sum);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1874, "comment": "// res = res + (k*(A[i]-1) - k*A[i]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1874, "comment": "// res = res + (k*(A[i]+1) - k*A[i]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1874, "comment": "// out.println(res);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1874, "comment": "// out.println(\"-1\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1876, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author darkhan imangaliyev\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1876, "comment": "//        System.out.println(compressed);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1876, "comment": "//            System.out.println(\"b[i] = \" + b[i]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1876, "comment": "//            System.out.println(\"l = \" + l + \", r = \" + r);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1876, "comment": "//            System.out.println(\"left = \" + left + \", right = \" + right);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1876, "comment": "//            System.out.println(\"countLeft = \" + countLeft + \", countRight = \" + countRight);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1876, "comment": "//            System.out.println();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1877, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author ZYCSwing\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1878, "comment": "/* public static int find(int v,int start,int end,int l,int r)\n            {\n                if(r < start || end < l)\n                {\n                    return Integer.MIN_VALUE;\n                }\n                if(l <= start && end <= r)\n                {\n                    return (tre[v]);\n                }\n                int mid = (start + end) / 2;\n                int p1 = find(2*v, start, mid, l, r);\n                int p2 = find(2*v+1, mid+1, end, l, r);\n                return Math.max(p1, p2);          \n            }\n            static int tre[]=new int[4000005];\n            public static void Update(int v,int tl,int tr,int index,int val)\n            {\n                if(tl==tr)\n                {\n                    tre[v]=val;\n                }\n                else\n                {\n                    int mid=(tl+tr)/2;\n                    if(tl <= index &&index <= mid)\n                    {\n                        Update(2*v,tl, mid, index, val);\n                    }\n                    else\n                    {\n                        Update(2*v+1,mid+1,tr, index, val);\n                    }\n                    tre[v]=(Math.max(tre[2*v],tre[2*v+1]));\n                }\n            }\n            */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1878, "comment": "// System.out.println(ans+\" \"+tmp1+\" \"+tmp2+\" \"+tmp3+\" \"+lol);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1879, "comment": "//package educational.round34;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1879, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1880, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Pradyumn\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1880, "comment": "//debug.tr(\"1\", s1, sum1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1880, "comment": "//debug.tr(\"2\", s2, sum2);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1881, "comment": "/* PrintWriter and BufferedReader Template from Codeforces */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1882, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1882, "comment": "//            out.printf(\"%d: cs %d, minus %d%n\", i, (cs[N] - cs[i]), cur * (N - i));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1883, "comment": "//in.nextLongArray(n);\n"}, "Heuristic": []}, {"nl": {"id": 1883, "comment": "//if (i < n / 2) arr[i] = 1;\n"}, "Heuristic": []}, {"nl": {"id": 1883, "comment": "//else arr[i] = 1000000000;\n"}, "Heuristic": []}, {"nl": {"id": 1883, "comment": "//System.out.println(a + \"  \" + countLess + \"  \" + sumLess + \"  \" + countMore + \"  \" + sumMore);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1883, "comment": "// Used for compressed BIT\n"}, "Heuristic": []}, {"nl": {"id": 1883, "comment": "// Compressed BIT constructor\n"}, "Heuristic": []}, {"nl": {"id": 1883, "comment": "// A BIT that only stores the values that will be updated. \n"}, "Heuristic": []}, {"nl": {"id": 1883, "comment": "// indices is a sorted array of all the unique indices \n"}, "Heuristic": []}, {"nl": {"id": 1883, "comment": "// that would be used for this BIT.\n"}, "Heuristic": []}, {"nl": {"id": 1883, "comment": "// Search for the index in the array. If the index was not found, \n"}, "Heuristic": []}, {"nl": {"id": 1883, "comment": "// return the first index lower than the search index.\n"}, "Heuristic": []}, {"nl": {"id": 1883, "comment": "// Read the largest index less than or equal to the given index.\n"}, "Heuristic": []}, {"nl": {"id": 1883, "comment": "// Update a specific index by a value. If the index is not in this \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1883, "comment": "// compressed BIT, the index below will be updated.\n"}, "Heuristic": []}, {"nl": {"id": 1884, "comment": "/**\n * Created by Aminul on 12/12/2017.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1884, "comment": "/* public char nextChar() {\n            return (char)skip();\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1884, "comment": "/*private char buff[] = new char[1005];\n        public char[] nextCharArray(){\n            int b = skip(), p = 0;\n            while(!(isSpaceChar(b))){\n                buff[p++] = (char)b;\n                b = readByte();\n            }\n            return Arrays.copyOf(buff, p);\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1884, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1885, "comment": "//\t\tint n=(int)2e5;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1885, "comment": "//\t\tfor(int i=0;i<n;i++){\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1885, "comment": "//\t\t\tarr[i]=1;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1885, "comment": "//\t\t\tif(i>n/2)\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1885, "comment": "//\t\t\t\tarr[i]=(int)1e9;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1885, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1887, "comment": "/*int t = nextInt();\n        for (int i = 0; i < t; i++) {\n            out.printf(Locale.US, \"Case #%d: %d\\n\", i + 1, solve());\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1887, "comment": "//            e.printStackTrace();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1894, "comment": "/**\n * Works good for CF\n * \n * @author cykeltillsalu\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1894, "comment": "// some local config\n"}, "Heuristic": []}, {"nl": {"id": 1894, "comment": "// solution\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1894, "comment": "// run all cases from testfile:\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1894, "comment": "// run on server\n"}, "Heuristic": []}, {"nl": {"id": 1896, "comment": "/*--------------------------------------------------------------*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 1897, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author @listen\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1898, "comment": "//static BufferedReader in;\n"}, "Heuristic": []}, {"nl": {"id": 1898, "comment": "//static StringTokenizer st;\n"}, "Heuristic": []}, {"nl": {"id": 1898, "comment": "//in = new BufferedReader(new InputStreamReader(System.in));\n"}, "Heuristic": []}, {"nl": {"id": 1898, "comment": "//st = new StringTokenizer(\"\",\" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1898, "comment": "//System.out.println(sum2 + \" \" + sum);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1902, "comment": "//stdin\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1902, "comment": "//System.err.println(\"Input: \" + line);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1902, "comment": "//System.out.println(\"I read this number: \" + val);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1902, "comment": "//System.out.println(\"I read this number: \" + val);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1903, "comment": "// BufferedReader in = new BufferedReader(new\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1903, "comment": "// InputStreamReader(System.in));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1905, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Nova\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1906, "comment": "//coded by : ariefianto17 | Reza Ariefianto\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1908, "comment": "//include coin i\n"}, "Heuristic": []}, {"nl": {"id": 1911, "comment": "//BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1913, "comment": "//Main Code starts Here\n"}, "Heuristic": []}, {"nl": {"id": 1915, "comment": "//\t\t\tin = new BufferedReader(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1915, "comment": "//\t\t\tout = new PrintWriter(\"output.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1915, "comment": "//if (!in.ready()) return null;\n"}, "Heuristic": []}, {"nl": {"id": 1916, "comment": "////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1917, "comment": "//Edwin Lunando template for online algorithm contest\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1917, "comment": "//  class node implements Comparable<node> {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1917, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1917, "comment": "//    public int a;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1917, "comment": "//    public int b;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1917, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1917, "comment": "//    public int compareTo(node a) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1917, "comment": "//      if (a.b == this.b) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1917, "comment": "//        return a.a - this.a;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1917, "comment": "//      } else {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1917, "comment": "//        return a.b - this.b;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1917, "comment": "//      }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1917, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1917, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1917, "comment": "//    public node(int a, int b) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1917, "comment": "//      this.a = a;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1917, "comment": "//      this.b = b;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1917, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1917, "comment": "//  }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1917, "comment": "//br = new BufferedReader(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1917, "comment": "//out = new PrintWriter(new BufferedWriter(new FileWriter(\"output.txt\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1920, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author codeKNIGHT\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1921, "comment": "//          in = new BufferedReader(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1921, "comment": "//          out = new PrintWriter(\"output.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1924, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1924, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1924, "comment": "// try {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1924, "comment": "// br = new BufferedReader(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1924, "comment": "// } catch (FileNotFoundException e) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1924, "comment": "// e.printStackTrace();\n"}, "Heuristic": []}, {"nl": {"id": 1924, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1924, "comment": "// try {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1924, "comment": "// pw = new PrintWriter(new FileWriter(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1924, "comment": "// } catch (IOException e) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1924, "comment": "// // TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1924, "comment": "// e.printStackTrace();\n"}, "Heuristic": []}, {"nl": {"id": 1924, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1926, "comment": "/****************************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 1926, "comment": "/****************************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 1927, "comment": "//start();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1927, "comment": "////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1927, "comment": "//print2((millis() - t) / 1000.0);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1927, "comment": "//////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1929, "comment": "//------------------------------------------------------------------------------\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1933, "comment": "// br=new BufferedReader(new InputStreamReader(System.in));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1937, "comment": "/**\n * @author Andrew Porokhin, andrew.porokhin@gmail.com\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1937, "comment": "// TODO: Write your code here ...\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1937, "comment": "// Introduce thread in order to increase stack size\n"}, "Heuristic": []}, {"nl": {"id": 1938, "comment": "/*  for (int i =0; i<n; i++){\n        out.print(a[i]+\" \");\n    }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 1939, "comment": "//pw.println(Arrays.toString(arr));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1939, "comment": "//pw.println(qq);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1941, "comment": "//        for (int i = 0; i < n; i++) ans += arrB[i] * m;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1941, "comment": "//        for (int i = 0; i < m - 1; i++) ans += arrG[i] - arrB[0];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1941, "comment": "//        if (arrB[m - 1] != arrB[0]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1941, "comment": "//            if (arrB.length == 1) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1941, "comment": "//                ans=-1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1941, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1941, "comment": "//            else ans += arrG[m - 1] - arrB[1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1941, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1941, "comment": "//        if (arrG[m-1] < arrB[0]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1941, "comment": "//            ans=-1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1941, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1941, "comment": "//smallest g goes to second to last\n"}, "Heuristic": []}, {"nl": {"id": 1946, "comment": "/** http://pastebin.com/j0xdUjDn */"}, "Heuristic": ["H1", "H9"]}, {"nl": {"id": 1946, "comment": "//pastebin.com/j0xdUjDn */\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1946, "comment": "// solution\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1947, "comment": "//System.out.println(\"erwer\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1947, "comment": "//      System.out.println(i+\" \"+p[i]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1947, "comment": "//  System.out.println(i);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1947, "comment": "//      System.out.println(i);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1948, "comment": "/****\n     *       Number of co-prime numbers on [1, n].\n     *       Number a is Co-prime if gcd (a, n) == 1\n     *       O (sqrt(n))\n     ****/"}, "Heuristic": ["H1"]}, {"nl": {"id": 1948, "comment": "/****\n     *       Raise number a to power of n.\n     *       O (log n)\n     ****/"}, "Heuristic": ["H1"]}, {"nl": {"id": 1948, "comment": "/****\n     *       Finding the greatest common divisor of two numbers.\n     *       O (log min(a, b))\n     ****/"}, "Heuristic": ["H1"]}, {"nl": {"id": 1948, "comment": "/****\n     *       Finding the lowest common multiple of two numbers.\n     *       O (log min(a, b))\n     ****/"}, "Heuristic": ["H1"]}, {"nl": {"id": 1948, "comment": "/****\n     *       Eratosthenes Sieve of numbers - [0..n]. True - simple, False - not simple.\n     *       O (n log log n)\n     ****/"}, "Heuristic": ["H1"]}, {"nl": {"id": 1948, "comment": "//    FastScanner in = new FastScanner(new File(\"test.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1949, "comment": "/*--------------------------------------------------------------*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 1952, "comment": "//Main Code starts Here\n"}, "Heuristic": []}, {"nl": {"id": 1952, "comment": "//debug(a,b);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1952, "comment": "//debug(arr);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1959, "comment": "// BufferedReader in = new BufferedReader(new\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1959, "comment": "// InputStreamReader(System.in));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1960, "comment": "//stdin\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1960, "comment": "//System.err.println(\"Input: \" + line);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1960, "comment": "//System.out.println(\"I read this number: \" + val);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1960, "comment": "//System.out.println(\"I read this number: \" + val);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1961, "comment": "/****************************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 1961, "comment": "/****************************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 1964, "comment": "//out.println(a[i] + \" * \" + cnt);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1965, "comment": "//      for (int i = 1; i <= n; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1965, "comment": "//          System.out.println(a[i].x+\" \"+a[i].y);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1965, "comment": "//      }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1965, "comment": "//      int plase = 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1965, "comment": "//      if (k==1) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1965, "comment": "//          int ans = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1965, "comment": "//          for (int j = 1; j <= n; j++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1965, "comment": "//              if (a[j].x==a[1].x && a[j].y ==a[1].y) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1965, "comment": "//                  ans++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1965, "comment": "//              }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1965, "comment": "//          }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1965, "comment": "//          System.out.println(ans);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1965, "comment": "//          return;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1965, "comment": "//      }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1965, "comment": "//      for (int i = 2; i <= n; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1965, "comment": "//          if (a[i].x==a[i-1].x && a[i].y==a[i-1].y) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1965, "comment": "//              \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1965, "comment": "//          }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1965, "comment": "//          else {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1965, "comment": "//              plase++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1965, "comment": "//              if (plase==k) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1965, "comment": "//                  int ans = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1965, "comment": "//                  for (int j = 1; j <= n; j++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1965, "comment": "//                      if (a[j].x==a[i].x && a[j].y ==a[i].y) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1965, "comment": "//                          ans++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1965, "comment": "//                      }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1965, "comment": "//                  }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1965, "comment": "//                  System.out.println(ans);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1965, "comment": "//                  return;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1965, "comment": "//              }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1965, "comment": "//          }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1965, "comment": "//      }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1966, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1968, "comment": "//package codeforces;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1968, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1972, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author @zhendeaini6001\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1972, "comment": "// TODO Auto-generated constructor stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 1973, "comment": "//CODING TAIM\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 1975, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Nova\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1979, "comment": "//\tstatic StreamTokenizer in; static int next() throws Exception {in.nextToken(); return (int) in.nval;}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1979, "comment": "//\tstatic BufferedReader in;\n"}, "Heuristic": []}, {"nl": {"id": 1979, "comment": "//\t\tin = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n"}, "Heuristic": []}, {"nl": {"id": 1979, "comment": "//\t\tin = new BufferedReader(new InputStreamReader(System.in));\n"}, "Heuristic": []}, {"nl": {"id": 1981, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author codeKNIGHT\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1984, "comment": "/*\n\t\tfor(int i=0;i<N;i++)\n\t\t\tSystem.out.println(array[i].problems);*/"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 1986, "comment": "//reader = new BufferedReader(new InputStreamReader(new FileInputStream(\"test.inp\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1986, "comment": "//writer = new PrintWriter(new FileOutputStream(\"test.out\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1986, "comment": "//reader.close();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1986, "comment": "//System.out.println(System.currentTimeMillis() - tbegin + \"ms\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1987, "comment": "// long l = sc.nextLong();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1987, "comment": "// int i = sc.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1987, "comment": "// String input = sc.nextLine();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1988, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Egor Kulikov (egor@egork.net)\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1990, "comment": "//package round113;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1991, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author hheng\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 1993, "comment": "/**\n * @author piuspratik (Piyush Das)\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 1994, "comment": "//package fourninetysixDiv3;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1998, "comment": "/*\nKeep solving problems.\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 1998, "comment": "//[l, r]\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 1998, "comment": "// attempt to expand palindrome centered at i\n"}, "Heuristic": []}, {"nl": {"id": 1998, "comment": "// if palindrome centered at i expands past right,\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 1998, "comment": "// adjust center based on expanded palindrome.\n"}, "Heuristic": []}, {"nl": {"id": 1999, "comment": "//Scanner sc = new Scanner();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2002, "comment": "/*static long gcd(long a,long b)\n    {\n    if(b==0)\n    return a;\n    else\n    return gcd(b,a%b);\n    }\n    static int ans1=Integer.MAX_VALUE,ans2=Integer.MAX_VALUE,ans3=Integer.MAX_VALUE,ans4=Integer.MAX_VALUE;\n    static boolean v[]=new boolean[101];\n    static void dfs(Integer so,Set<Integer> s[]){\n    if(!v[so.intValue()])\n    {\n    v[so]=true;\n    for(Integer h:s[so.intValue()])\n    {\n    if(!v[h.intValue()])\n    dfs(h,s);\n    }\n    }\n    }\n    static class Print{\n    public PrintWriter out;\n    Print(OutputStream o)\n    {\n    out=new PrintWriter(o);\n    }\n    }\n    static int CeilIndex(int A[], int l, int r, int key) \n    { \n    while (r - l > 1) { \n    int m = l + (r - l) / 2; \n    if (A[m] >= key) \n    r = m; \n    else\n    l = m; \n    } \n\n    return r; \n    } \n\n    static int LongestIncreasingSubsequenceLength(int A[], int size) \n    { \n    // Add boundary case, when array size is one \n    int[] tailTable = new int[size]; \n    int len; // always points empty slot \n    tailTable[0] = A[0]; \n    len = 1; \n    for (int i = 1; i < size; i++) { \n    if (A[i] < tailTable[0]) \n    // new smallest value \n    tailTable[0] = A[i]; \n\n    else if (A[i] > tailTable[len - 1]) \n    // A[i] wants to extend largest subsequence \n    tailTable[len++] = A[i]; \n\n    else\n    // A[i] wants to be current end candidate of an existing \n    // subsequence. It will replace ceil value in tailTable \n    tailTable[CeilIndex(tailTable, -1, len - 1, A[i])] = A[i]; \n    } \n    return len; \n    }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2002, "comment": "/*static int binary(int n)\n    {\n    int s=1;\n    while(n>0)\n    {\n    s=s<<1;\n    n--;\n    }\n    return s-1;\n    }\n    static StringBuilder bin(int i,int n)\n    {\n    StringBuilder s=new StringBuilder();\n    while(i>0)\n    {\n    s.append(i%2);\n    i=i/2;\n    }\n    while(s.length()!=n)\n    {\n    s.append(0);\n    }\n    return s.reverse();\n    }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2002, "comment": "// Add boundary case, when array size is one \n"}, "Heuristic": []}, {"nl": {"id": 2002, "comment": "// always points empty slot \n"}, "Heuristic": []}, {"nl": {"id": 2002, "comment": "// new smallest value \n"}, "Heuristic": []}, {"nl": {"id": 2002, "comment": "// A[i] wants to extend largest subsequence \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2002, "comment": "// A[i] wants to be current end candidate of an existing \n"}, "Heuristic": []}, {"nl": {"id": 2002, "comment": "// subsequence. It will replace ceil value in tailTable \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2003, "comment": "//        int[] arr = {1, 3, 7, 18};\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2003, "comment": "//        int bIndex = Arrays.binarySearch(arr, 4);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2003, "comment": "//        System.out.println(bIndex);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2003, "comment": "// Integer[] indicesArr = ((Integer[])beacons.keySet().toArray());\n"}, "Heuristic": []}, {"nl": {"id": 2003, "comment": "// totalBeacons[i] = totalBeacons[i - nDestroys[i]] + 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2003, "comment": "//totalBeacons[i] = i - nDestroys[i] + totalBeacons[i - nDestroys[i]] + 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2003, "comment": "//        System.out.println(\"\\ntotalBeacons array\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2003, "comment": "//        for (int i = 0; i < n; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2003, "comment": "//            System.out.print(totalBeacons[i] + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2003, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2003, "comment": "//        if (maxBeacons == -1)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2003, "comment": "//            System.out.println(n);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2005, "comment": "//Integer key = tm.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2006, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2007, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author aryssoncf\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2010, "comment": "//if (b){if(t<pmin){pmin = t; continue;}}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2010, "comment": "//out.print(min);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2010, "comment": "//out.print(pmin);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2010, "comment": "//out.flush();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2013, "comment": "//new FileReader();\n"}, "Heuristic": []}, {"nl": {"id": 2013, "comment": "//new File();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2015, "comment": "/**\n * @author Egor Kulikov (egor@egork.net)\n *         Created on 14.03.2010\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2015, "comment": "//\t\tnew Thread(new Template()).start();\n"}, "Heuristic": []}, {"nl": {"id": 2015, "comment": "//\t\tString id = getClass().getName().toLowerCase();\n"}, "Heuristic": []}, {"nl": {"id": 2015, "comment": "//\t\ttry {\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2015, "comment": "//\t\t\tSystem.setIn(new FileInputStream(id + \".in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2015, "comment": "//\t\t\tSystem.setOut(new PrintStream(new FileOutputStream(id + \".out\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2015, "comment": "//\t\t\tSystem.setIn(new FileInputStream(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2015, "comment": "//\t\t\tSystem.setOut(new PrintStream(new FileOutputStream(\"output.txt\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2015, "comment": "//\t\t} catch (FileNotFoundException e) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2015, "comment": "//\t\t\tthrow new RuntimeException();\n"}, "Heuristic": []}, {"nl": {"id": 2015, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2015, "comment": "//        int numTests = in.readInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2015, "comment": "//        for (int testNumber = 0; testNumber < numTests; testNumber++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2015, "comment": "//\t\t\tout.print(\"Case \" + (testNumber + 1) + \": \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2015, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2016, "comment": "//do job\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2017, "comment": "// TODO code application logic here\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2020, "comment": "//\t\t\tthrow new RuntimeException();\n"}, "Heuristic": []}, {"nl": {"id": 2020, "comment": "//\t\t\tSystem.out.println(input.next());\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2021, "comment": "/**\n * User: Kandy\n * Date: 29.06.2010\n * Time: 21:07:24\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2021, "comment": "//package codeforces.br22;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2024, "comment": "/**\n     * @param args\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2024, "comment": "// for i\n"}, "Heuristic": []}, {"nl": {"id": 2025, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2028, "comment": "// -------------- Input/Output routines below ---------------//\n"}, "Heuristic": []}, {"nl": {"id": 2028, "comment": "// String problem = this.getClass().getName();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2028, "comment": "// System.exit(1);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2029, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2032, "comment": "/**\n *\n * @author ishani\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2034, "comment": "//System.out.print(\"size \" + arr.length );\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2034, "comment": "//System.out.print(\" arr[i] \" + arr[i] + \" arr[i+1] \" + arr[i+1] + \"\\n\" );\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2034, "comment": "//System.out.print(\"Changed val to true\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2036, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2036, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2038, "comment": "/**\n *\n * @author Izhari Ishak Aksa\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2039, "comment": "/**\n\t * @param args\n\t * @throws IOException \n\t */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2039, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2039, "comment": "//BufferedReader input = new BufferedReader(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2039, "comment": "//BufferedWriter output = new BufferedWriter(new FileWriter(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2041, "comment": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 2041, "comment": "/**\n *\n * @author kal1sha\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2041, "comment": "/**\n     * @param args the command line arguments\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2041, "comment": "//package a_vtoray_poriadkovay_statistika;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2041, "comment": "// TODO code application logic hereSc\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2043, "comment": "//package timus;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2043, "comment": "// Writer writer = new OutputStreamWriter(System.out);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2043, "comment": "// n - sum, l - length, m - every part\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2043, "comment": "// <= m\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2048, "comment": "//System.setIn(new FileInputStream(\"1\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2049, "comment": "//val == false  \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2051, "comment": "/* Template for TopCoder and ACMonline. */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2051, "comment": "// Here is the solution:\n"}, "Heuristic": []}, {"nl": {"id": 2054, "comment": "//package round22;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2054, "comment": "//\tprivate String INPUT = \"5 1 2 3 1 1\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2057, "comment": "// String[] inData = { \"4\", \"A\", \"B\", \"C\", \"D\", \"A-B 1:1\", \"A-C 2:2\",\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2057, "comment": "// \"A-D 1:0\", \"B-C 1:0\", \"B-D 0:3\", \"C-D 0:3\" };\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2058, "comment": "// static int INF=1<<28;\n"}, "Heuristic": []}, {"nl": {"id": 2058, "comment": "//int x,y;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2058, "comment": "//static ArrayList<Integer> lis = new ArrayList<Integer>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2058, "comment": "//\tScanner sc =new Scanner(new File(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2058, "comment": "// File file = new File(\"prime2.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2058, "comment": "//\tPrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(file)));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2058, "comment": "//\tsc.useDelimiter(\"(\\\\s)+|[,]\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2058, "comment": "//\tArrayList<Integer> lis = new ArrayList<Integer>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2058, "comment": "//ArrayList<String> lis = new ArrayList<String>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2058, "comment": "//System.out.println();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2058, "comment": "//  for(int i=0;i<;i++)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2060, "comment": "////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2061, "comment": "//created at 6:06 PM 12/9/11 by Abrackadabra\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2061, "comment": "//0 - consoleIO, 1 - <taskName>.in/out, 2 - input.txt/output.txt, 3 - test case generator\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2063, "comment": "////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2063, "comment": "//print2((millis() - t) / 1000.0);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2066, "comment": "/**\n * Created by IntelliJ IDEA.\n * User: mac\n * Date: 11-12-9\n * Time: \u4e0b\u534810:48\n * To change this template use File | Settings | File Templates.\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2069, "comment": "/////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2069, "comment": "// IO\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2069, "comment": "/////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2069, "comment": "/////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2069, "comment": "/////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2069, "comment": "// pre - written\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2069, "comment": "/////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2069, "comment": "//////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2070, "comment": "//static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n"}, "Heuristic": []}, {"nl": {"id": 2071, "comment": "/**\n     * @param args\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2074, "comment": "// br = new BufferedReader(new FileReader(\"taska.in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2074, "comment": "// out = new PrintWriter(\"taska.out\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2074, "comment": "// br = new BufferedReader(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2074, "comment": "// out = new PrintWriter(\"output.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2074, "comment": "// Locale.setDefault(Locale.US);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2080, "comment": "//System.setIn(new FileInputStream(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2080, "comment": "//System.setOut(new PrintStream(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2082, "comment": "// {{{\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2082, "comment": "// }}}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2082, "comment": "// {{{\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2082, "comment": "// }}}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2083, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Egor Kulikov (egor@egork.net)\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2084, "comment": "/********************************************************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 2084, "comment": "/* THERE IS INPUT */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2084, "comment": "//Locale.setDefault(Locale.US);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2091, "comment": "// int min = 1;\n"}, "Heuristic": []}, {"nl": {"id": 2091, "comment": "// int max = 1000000000;\n"}, "Heuristic": []}, {"nl": {"id": 2091, "comment": "// a[0]=max;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2092, "comment": "// in = new Scanner(System.in);\n"}, "Heuristic": []}, {"nl": {"id": 2093, "comment": "//package round97;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2096, "comment": "//Scanner sc = new Scanner(System.in);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2096, "comment": "//a.add(1);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2097, "comment": "// in = new BufferedReader(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2097, "comment": "// out = new PrintWriter(\"output.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2101, "comment": "//package round97;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2104, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2105, "comment": "// in = new BufferedReader(new FileReader(filename+\".in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2105, "comment": "// out = new BufferedWriter(new FileWriter(filename+\".out\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2105, "comment": "// new Thread(new Main()).start();\n"}, "Heuristic": []}, {"nl": {"id": 2107, "comment": "/*\n * Raudel Ravelo Suarez\n * Problem: \n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 2107, "comment": "//sc = new Scanner(System.in);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2107, "comment": "//sc = new Scanner(new FileReader(\"in.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2107, "comment": "//in = new BufferedReader(new FileReader(\"in.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2107, "comment": "//Add your code here\n"}, "Heuristic": []}, {"nl": {"id": 2109, "comment": "/*\tpublic static void DFS(int sourse)\n\t\t\t{\n\t\t\t\tint count = 0;\n\t\t\t\tvisited[sourse] = true;\n\t\t\t\t\n\t\t\t\tfor(int u : adj[sourse])\n\t\t\t\t{\n\t\t\t\t\tif(!visited[u])\n\t\t\t\t\t{\n\t\t\t\t\t\tDFS(u);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t}*/"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 2111, "comment": "/*public int hashCode()\n        {\n            return new Long(x).hashCode() * 31 + new Long(y).hashCode();\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2111, "comment": "//return 0;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2116, "comment": "//PrintWriter out = new PrintWriter(System.out); \n"}, "Heuristic": []}, {"nl": {"id": 2117, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author caoash\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2120, "comment": "// discussed with rainboy\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2121, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2121, "comment": "//p2[n - subtreeSize];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2122, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2123, "comment": "/**\n * @author: Mehul Raheja\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2123, "comment": "/*\n        Runtime = O()\n     */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2123, "comment": "//  int found = -1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2123, "comment": "// System.out.println(Arrays.toString(y));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2125, "comment": "// InputStream inputStream = System.in; // Useful when taking input other than\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2125, "comment": "// console eg file handling // check ctor of inputReader\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2127, "commentn"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2129, "comment": "//(x1-x2)2+(y1-y2)2=r2\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2130, "comment": "//         pw.printf(\"testing %d %d\\n\", i, j);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2130, "comment": "//           pw.printf(\"on colision %d %d\\n\", i, j);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2130, "comment": "//           pw.printf(\"touvhing %d %d\\n\", i, j);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2132, "comment": "//if(x2 == 12 && x1 == 8 && y1 > 13 && y1 < 14)    out.println(dis +\" \"+ y2);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2132, "comment": "//if(n == 4)  out.println(a[i] +\" \"+ y[i]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2132, "comment": "//Enter code here utkarsh\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2133, "comment": "// import java.awt.Point;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2133, "comment": "// max=10\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2133, "comment": "// n=10: 160ms\n"}, "Heuristic": []}, {"nl": {"id": 2133, "comment": "// n=11: 1600-1700ms\n"}, "Heuristic": []}, {"nl": {"id": 2135, "comment": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 2135, "comment": "/**\n *\n * @author kamranmaharov\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2135, "comment": "//System.out.println(i + \" \" + j + \" \" + D);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2138, "comment": "/**\n\t\t * Compute x for a * x + b = 0 and ||x|| = C where 'this' is a. Care must be\n\t\t * taken to handle the case where either a.x or a.y is near zero.\n\t\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2138, "comment": "/**\n\t * Sort points by polar angle relative to center, using trig. This is a\n\t * counter-clockwise sort with zero at 3 o'clock.\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2138, "comment": "/**\n\t * Sort points by polar angle relative to center, w/o trig. This is a\n\t * counter-clockwise sort with zero at 3 o'clock.\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2138, "comment": "/*\n\t * Solve a * x^2 + b * x + c == 0 Returns 0, 1, or 2 solutions. If 2 solutions\n\t * x1, x2, guarantees that x1 < x2\n\t */"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 2138, "comment": "/*\n\t * The Line/Circle classes provide a number of methods that require dealing with\n\t * floating point precision issues. Default EPS to a suitable value, such as\n\t * 1e-6, which should work for many problems in which the input coordinates are\n\t * in integers and subsequently inexact floating point values are being\n\t * computed.\n\t */"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 2138, "comment": "/*\n\t * A line denoted by two points p and q. For internal computations, we use the\n\t * parametric representation of the line as p + t d where d = q - p. For\n\t * convenience, we compute and store d in the constructor. Most methods hide the\n\t * parametric representation of the line, but it is exposed via\n\t * getPointFromParameter and intersectionParameters for those problems that need\n\t * it.\n\t *\n\t * The line may be interpreted either as a line segment denoted by the two end\n\t * points, or as the infinite line determined by these two points. Intersection\n\t * methods are provided for both cases.\n\t */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2138, "comment": "/*\n\t\t * Point of intersection of this line segment with another line segment. Returns\n\t\t * only points that lie inside both line segments, else null.\n\t\t *\n\t\t * Result may include points \"just outside\" the bounds, given EPS.\n\t\t */"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 2138, "comment": "/*\n\t\t * Point of intersection of this (infinite) line with other (infinite) line.\n\t\t * Return null if collinear.\n\t\t */"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 2138, "comment": "/*\n\t\t * Intersect this line with that line Solves: this.p + s * this.d == l.p + t l.d\n\t\t * Return null if lines are collinear Else returns [s, t].\n\t\t */"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 2138, "comment": "/*\n\t\t * Compute points of intersection of this infinite line with a circle. Computes\n\t\t * projection 'x' of c.c onto line, then computes x +/- d.scaleToLength(h) where\n\t\t * h is computed via Pythagoras. Sorted by decreasing 't' (as would be used in\n\t\t * getPointFromParameter)\n\t\t *\n\t\t * May return two points even if line is a tangent.\n\t\t */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2138, "comment": "/*\n\t\t * Compute points of intersection of this infinite line with a circle.\n\t\t *\n\t\t * Solves a + t * b = c + r subject to ||r|| = R Returns zero, one, or two\n\t\t * points on the periphery, e.g. c + r[0,1], sorted by decreasing 't'.\n\t\t * Alternative version which requires solving quadratic equation.\n\t\t *\n\t\t * Careful: set EPS if you need to handle round-off error in discriminant.\n\t\t */"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 2138, "comment": "/**\n\t\t * Is r contained within the line segment spanned by p/q, including their\n\t\t * endpoints?\n\t\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2138, "comment": "/**\n\t\t * Is r on the infinite line?\n\t\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2138, "comment": "/**\n\t * Alternative line implementation using the \"general form\" equation.\n\t *\n\t * a * x + b * y + c = 0\n\t *\n\t * This is provided for problems in which a line may be given in general form in\n\t * the input. Compared to class Line, GLine: - is shorter, particularly when\n\t * only line/line and line/circle intersections are required. - does not support\n\t * those functions of Line that relate to LineSegment.\n\t */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2138, "comment": "/* Is this point inside the circle */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2138, "comment": "/* Is this point on the circle's periphery */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2138, "comment": "/*\n\t\t * a line segment is outside a circle if both end points are outside and if any\n\t\t * intersection points are outside the bounds of the line segment.\n\t\t */"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 2138, "comment": "/* Returns the tangent lines that the point p makes with this circle, if any. */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2138, "comment": "/*\n\t\t * Compute points of intersection of this circle (c1, r1) with that circle (c2,\n\t\t * r2). Model as triangle equation m = c2 - c1 = r1 - r2 m = r1 - r2 -> m^2 =\n\t\t * r1^2 + r2^2 - 2 r1 r2 (squaring) -> r1 r2 = (r1^2 + r2^2 - m^2)/2 and by\n\t\t * multiplying by r1 we obtain m = r1 - r2 -> m r1 = r1^2 - r1 r2 -> m r1 = r1^2\n\t\t * - (r1^2 + r2^2 - m^2)/2 -> m r1 + (r2^2 - r1^2 - m^2)/2 = 0 and ready for\n\t\t * solveDotProductConstrainedByNorm\n\t\t *\n\t\t * Note that if the circles are (apprx) touching, this function may return 0, 1,\n\t\t * or 2 intersection points, depending on which side of 0 the discriminant\n\t\t * falls. You will not get NaN.\n\t\t *\n\t\t * If the circles coincidence (same center and radius) this will throw an\n\t\t * 'degenerate case' error in solveDotProductConstrainedByNorm !!!\n\t\t */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2138, "comment": "/*\n\t\t * Shorter version of intersectsCircle that solves quadratic equation inline.\n\t\t * Assumes there are 2 intersection points. The vector 'mid' is where the\n\t\t * altitude of the triangle formed by the centers and the intersection point\n\t\t * hits the line connecting the centers. Its length is e. midn is normal to it\n\t\t * and its length is f.\n\t\t */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2138, "comment": "/* Construct smallest circle that circumscribes 2 points a and b. */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2138, "comment": "/* Construct circle circumscribed by 3 points a, b, c */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2138, "comment": "/*\n\t\t * Find minimum enclosing circle for a set of points. Peter, we need a source\n\t\t * for this algorithm and its expected complexity.\n\t\t */"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 2138, "comment": "/**\n\t * Some basic operations on Polygons.\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2138, "comment": "/* Absolute of signed triangle areas */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2138, "comment": "/*\n\t\t * Returns an P[] array representing an open shape that is the convex hull of\n\t\t * the given array of points, or null if less than 2 points were given.\n\t\t */"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 2138, "comment": "/*\n\t\t * \"Point-in-Polygon\" PIP tests. Return true if point is contained in this\n\t\t * polygon\n\t\t *\n\t\t * All of these tests may return 0 or 1 for points on the boundary. A separate\n\t\t * test is required to determine if a point is on the boundary.\n\t\t */"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 2138, "comment": "/*\n\t\t * Crossing-number based algorith due to Wm. Randolph Franklin. Works only for\n\t\t * simple polygons.\n\t\t */"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 2138, "comment": "/*\n\t\t * Winding numbers based algorithm, which also works for self-intersecting\n\t\t * polygons. http://geomalgorithms.com/a03-_inclusion.html describes this as the\n\t\t * always preferred algorithm.\n\t\t *\n\t\t * Return: wn = the winding number (=0 only when P is outside)\n\t\t */"}, "Heuristic": ["H1", "H2", "H7", "H9"]}, {"nl": {"id": 2138, "comment": "/**\n\t\t * Is q on the boundary of this polygon?\n\t\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2138, "comment": "// Use hypot() only if intermediate overflow must be avoided; very slow\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2138, "comment": "// rotateCCW(90deg)\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// rotateCW(90deg)\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// use if sin, cos are known\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2138, "comment": "// angle to horizontal (1, 0); result is in [-pi, pi] rad or (-180-180) deg\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// angle between two vectors, result is in [0, pi] rad (0-180 deg)\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// is going from this to b to c a CCW turn? Do not use if points may be\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 2138, "comment": "// collinear\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2138, "comment": "// memory-optimized version of this.sub(to).length2() that avoids an\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// intermediate object\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// Hashable Point\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2138, "comment": "// arbitrary tie-breaker\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// orientation() requires that a and b lie in the same half-plane\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// arbitrary tie-breaker\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// Numerically more stable, see\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// https://en.wikipedia.org/wiki/Loss_of_significance#A_better_algorithm\n"}, "Heuristic": ["H9"]}, {"nl": {"id": 2138, "comment": "// reflect vector across vector (as if line originated at (0, 0))\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// reflect point across (infinite) line\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// project p onto this (infinite) line. Returns point on line\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2138, "comment": "// return distance of point P from this (infinite) line.\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// check that point of intersection is in direction 'd'\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// and within segment bounds\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// Use Cramer's rule; see text\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2138, "comment": "// outside by more than EPS\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// EPS (!?)\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// we represent a, b as a vector to benefit from the available dot/det routines.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2138, "comment": "// n = new P(a, b) --- this is the (right) normal vector to the line\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// checks if on (infinite) line.\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// checks if on the same side, no EPS\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// angle of inclination to horizontal; result is in [0, pi] rad\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// XXX untested\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// XXX untested\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// XXX untested\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// circle-line intersection, refactored from\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// https://e-maxx-eng.appspot.com/geometry/circle-line-intersection.html\n"}, "Heuristic": ["H2", "H9"]}, {"nl": {"id": 2138, "comment": "// shift line to center, this is undone by adding C.c before returning.\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// undo shift to center\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// Let c +/- r be the tangent points. Then there's a 'd' such that\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2138, "comment": "// p + d - r = c\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2138, "comment": "// Since d r = 0, we multiply by r and get\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// (p - c) r - ||r|| = 0 subject to ||r|| = R\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2138, "comment": "// compute [c +/- r1] to obtain intersection points\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// div-by-zero if circles share center\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// NaN if circles don't intersect\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// returns true if this circle is outside that circle\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// returns true if this circle is entirely contained inside that circle\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// extend line from that.c to this.c by radius R\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// points are collinear\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// open form, p[0] connects to p[n-1]\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// Constructors clone original array/collection\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// (0) find the lowest point, breaking ties to the right\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// (1) sort points by angle from pivot\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// crossproduct\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2138, "comment": "// if collinear, use distance to break tie\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// (3) create stack\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// (4) select points that maintain left turns\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// keep\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2138, "comment": "// discard\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2138, "comment": "// keep current point\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "//geomalgorithms.com/a03-_inclusion.html describes this as the\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// the winding number counter\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// loop through all edges of the polygon\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// edge from V[i] to V[i+1]\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// start y <= P.y\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2138, "comment": "// an upward crossing\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// P left of edge\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// have a valid up intersect\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// start y > P.y (no test needed)\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// a downward crossing\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// P right of edge\n"}, "Heuristic": []}, {"nl": {"id": 2138, "comment": "// have a valid down intersect\n"}, "Heuristic": []}, {"nl": {"id": 2139, "comment": "/*\n public class _908C {\n\n }\n\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 2139, "comment": "// actual solution\n"}, "Heuristic": []}, {"nl": {"id": 2139, "comment": "// end here\n"}, "Heuristic": []}, {"nl": {"id": 2140, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2142, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Aeroui\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2142, "comment": "// the first one\n"}, "Heuristic": []}, {"nl": {"id": 2144, "comment": "// If you can hack doubles that's dumb\n"}, "Heuristic": ["H4"]}, {"nl": {"id": 2145, "comment": "////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2145, "comment": "//////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2145, "comment": "//////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2147, "comment": "/**\n\t * \u30b0\u30e9\u30d5\u306e\u884c\u5217\u306b\u3088\u308b\u5b9f\u88c5\n\t * \u63a5\u70b9\u6570\u306e\u5927\u304d\u3044\u30b0\u30e9\u30d5\u3067\u4f7f\u3046\u3068MLE\u3067\u6b7b\u306b\u305d\u3046\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2147, "comment": "/**\n\t * DFS(\u6df1\u3055\u512a\u5148\u63a2\u7d22)\u306b\u3088\u308b\u5b9f\u88c5\n\t * \u8a08\u7b97\u91cf\u306fO(E*MaxFlow)\u306e\u306f\u305a (E:\u8fba\u306e\u6570, MaxFlow:\u6700\u5927\u30d5\u30ed\u30fc)\n\t */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2147, "comment": "/**\n\t\t * \u6700\u5927\u30d5\u30ed\u30fc(\u6700\u5c0f\u30ab\u30c3\u30c8)\u3092\u6c42\u3081\u308b\n\t\t * @param from \u59cb\u70b9(source)\u306eID\n\t\t * @param to \u7d42\u70b9(target)\u306eID\n\t\t * @return \u6700\u5927\u30d5\u30ed\u30fc(\u6700\u5c0f\u30ab\u30c3\u30c8)\n\t\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2147, "comment": "/**\n\t\t * \u30d5\u30ed\u30fc\u306e\u5b9f\u884c \u30b0\u30e9\u30d5\u306e\u66f4\u65b0\u3082\u884c\u3046\n\t\t * @param from \u73fe\u5728\u3044\u308b\u7bc0\u70b9\u306eID\n\t\t * @param to \u7d42\u70b9(target)\u306eID\n\t\t * @param current_flow \u3053\u3053\u307e\u3067\u306e\u6d41\u91cf\n\t\t * @param passed \u65e2\u306b\u901a\u3063\u305f\u7bc0\u70b9\u304b\u5426\u304b\u3092\u683c\u7d0d\u3057\u305f\u914d\u5217\n\t\t * @return \u7d42\u70b9(target)\u306b\u6d41\u3057\u305f\u6d41\u91cf/\u623b\u308a\u306e\u30b0\u30e9\u30d5\u306e\u6d41\u91cf\n\t\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2147, "comment": "/**\n\t * 1-indexed\u306eBIT\u914d\u5217\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2147, "comment": "/**\n\t\t * \u6307\u5b9a\u3057\u305f\u8981\u7d20\u306b\u5024\u3092\u52a0\u7b97\u3059\u308b\n\t\t * \u8a08\u7b97\u91cf\u306fO(logN)\n\t\t * @param index \u52a0\u7b97\u3059\u308b\u8981\u7d20\u306e\u6dfb\u5b57\n\t\t * @param value \u52a0\u7b97\u3059\u308b\u91cf\n\t\t */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2147, "comment": "/**\n\t\t * 1\u301c\u6307\u5b9a\u3057\u305f\u8981\u7d20\u307e\u3067\u306e\u548c\u3092\u53d6\u5f97\u3059\u308b\n\t\t * \u8a08\u7b97\u91cf\u306fO(logN)\n\t\t * @param index \u548c\u306e\u7d42\u7aef\n\t\t * @return 1\u301cindex\u307e\u3067\u306e\u548c\n\t\t */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2148, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author phantom11\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2149, "comment": "//package GoodBye2017;\n"}, "Heuristic": []}, {"nl": {"id": 2150, "comment": "//BEGIN HERE\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2150, "comment": "// if from different set\n"}, "Heuristic": []}, {"nl": {"id": 2150, "comment": "// rank keeps the tree short\n"}, "Heuristic": []}, {"nl": {"id": 2151, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Pradyumn\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2152, "comment": "/**\n * Created by Ariana Herbst on 12/29/17.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2152, "comment": "/**\n * Created by Ariana Herbst on 12/29/17\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2154, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2156, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Wolfgang Beyer\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2156, "comment": "//tok = new StringTokenizer(in.readLine(), \", \\t\\n\\r\\f\"); //adds commas as delimeter\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2157, "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2157, "comment": "//int n=Integer.parseInt(br.readLine());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2157, "comment": "//int n=Integer.parseInt(st.nextToken());\n"}, "Heuristic": []}, {"nl": {"id": 2157, "comment": "//StringTokenizer st = new StringTokenizer(br.readLine());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2157, "comment": "// System.out.println(i+\" \"+max);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2158, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author MaxHeap\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2159, "comment": "/*\nID: andrew42\nLANG: JAVA\nTASK: \nPROG: \n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 2161, "comment": "//System.out.println(cur + \" \" + max);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2161, "comment": "//System.out.println();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2162, "comment": "//>>>BaZ<<<//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2162, "comment": "//static MyFileReader1 ss;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2162, "comment": "//static MyFileReader scan;\n"}, "Heuristic": []}, {"nl": {"id": 2162, "comment": "//pw = new PrintWriter(new File(\"C://Users/Aman deep/Desktop/output.txt\"));  \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2162, "comment": "//ss = new MyFileReader1();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2162, "comment": "//scan = new MyFileReader();\n"}, "Heuristic": []}, {"nl": {"id": 2162, "comment": "//System.out.println(\"Execution time : \"+Execution_Time+\" seconds\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2162, "comment": "//NoSuchElementException -> EOF\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2162, "comment": "//File input template\n"}, "Heuristic": []}, {"nl": {"id": 2162, "comment": "//Users/Aman deep/Desktop/input.txt\"));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2162, "comment": "//File input template\n"}, "Heuristic": []}, {"nl": {"id": 2162, "comment": "//Users/Aman deep/Desktop/output.txt\"));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2164, "comment": "/**\n * Created by mostafa on 12/29/17.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2165, "comment": "// if(i==5) pw.println(j);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2165, "comment": "//if(i==4) pw.println(mx);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2165, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2170, "comment": "// for 10^9 + k mods.\n"}, "Heuristic": []}, {"nl": {"id": 2170, "comment": "// 10^9 + k\n"}, "Heuristic": []}, {"nl": {"id": 2170, "comment": "// x1,y1 must be stationary.\n"}, "Heuristic": []}, {"nl": {"id": 2174, "comment": "/* \n\nBufferedReader sc = new BufferedReader(new InputStreamReader(System.in));\n\nint n = Integer.parseInt(sc.readLine());\nString[] t = sc.readLine().split(\" \");\nint[] list = new int[n];\nfor(int x=0; x<n; x++){\n\tlist[x] = Integer.parseInt(t[x]);\n}\n\t\t\nString[] dir = sc.readLine().split(\" \");\nint a = Integer.parseInt(dir[0]);\nint b = Integer.parseInt(dir[1]);\nint c = Integer.parseInt(dir[2]);\nint d = Integer.parseInt(dir[3]);\nint e = Integer.parseInt(dir[4]);\n\nint n = Integer.parseInt(sc.readLine());\n\n*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2176, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2177, "comment": "/*\n * code together\n * code better\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 2177, "comment": "//HashMap<, V>\n"}, "Heuristic": []}, {"nl": {"id": 2178, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2178, "comment": "// placing circle i\n"}, "Heuristic": []}, {"nl": {"id": 2178, "comment": "// testing collision with placed circles\n"}, "Heuristic": []}, {"nl": {"id": 2178, "comment": "// they will collide\n"}, "Heuristic": []}, {"nl": {"id": 2178, "comment": "// compute the increase in y that will be had\n"}, "Heuristic": []}, {"nl": {"id": 2181, "comment": "// -----------MyScanner class for faster input----------\n"}, "Heuristic": []}, {"nl": {"id": 2181, "comment": "// --------------------------------------------------------\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2186, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2188, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2189, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2189, "comment": "// then we intersect with prev\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2190, "comment": "/**\n *\n * @author msagimbekov\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2191, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2191, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2191, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2192, "comment": "/*public int hashCode()\n        {\n            return new Long(x).hashCode() * 31 + new Long(y).hashCode();\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2192, "comment": "//debug(delx);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2192, "comment": "//return 0;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2193, "comment": "/*\n * \n * @Author  Ajudiya_13(Bhargav Girdharbhai Ajudiya)\n * Dhirubhai Ambani Institute of Information And Communication Technology \n * \n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 2193, "comment": "//System.out.println(j);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2193, "comment": "//System.out.println(r);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2194, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2195, "comment": "//FastReader infile = new FastReader(\"test.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2195, "comment": "//System.out.println(System.currentTimeMillis()-time);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2196, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author khokharnikunj8\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2197, "comment": "// new Thread(null,new Runnable(){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2197, "comment": "// \tpublic void run(){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2197, "comment": "// \t\tSolver Machine = new Solver() ;\n"}, "Heuristic": []}, {"nl": {"id": 2197, "comment": "// \t\ttry{\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2197, "comment": "// \t\t\tMachine.Solve() ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2197, "comment": "// \t\t\tMachine.Finish() ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2197, "comment": "// \t\t}catch(Exception e){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2197, "comment": "// \t\t\te.printStackTrace() ;\n"}, "Heuristic": []}, {"nl": {"id": 2197, "comment": "// \t\t\tSystem.out.flush() ;\n"}, "Heuristic": []}, {"nl": {"id": 2197, "comment": "// \t\t\tSystem.exit(-1) ;\n"}, "Heuristic": []}, {"nl": {"id": 2197, "comment": "// \t\t}catch(Error e){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2197, "comment": "// \t\t\te.printStackTrace() ;\n"}, "Heuristic": []}, {"nl": {"id": 2197, "comment": "// \t\t\tSystem.out.flush() ;\n"}, "Heuristic": []}, {"nl": {"id": 2197, "comment": "// \t\t\tSystem.exit(-1) ;\n"}, "Heuristic": []}, {"nl": {"id": 2197, "comment": "// \t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2197, "comment": "// \t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2197, "comment": "// },\"Solver\",1l<<27).start() ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2199, "comment": "//            br = new BufferedReader(new FileReader(\"pnumbers.in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2199, "comment": "//            out = new PrintWriter(new File(\"out.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2208, "comment": "//String test = \"C-large\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2208, "comment": "//ConsoleIO io = new ConsoleIO(new FileReader(\"D:\\\\Dropbox\\\\code\\\\practice\\\\jb\\\\src\\\\\" + test + \".in\"), new PrintWriter(new File(\"D:\\\\Dropbox\\\\code\\\\practice\\\\jb\\\\src\\\\\" + test + \"-out.txt\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2208, "comment": "//public char readChar(){try {return (char)br.read();}catch (Exception ex){ return 0; }}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2211, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author ilyakor\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2212, "comment": "//System.out.println(\"dist\" + dist);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2212, "comment": "//yi - dist?\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 2213, "comment": "// new FastScanner(new FileInputStream(\".in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2213, "comment": "// new PrintWriter(new FileOutputStream(\".out\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2214, "comment": "//package info.stochastic;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2214, "comment": "//out.println(cur);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2214, "comment": "//out.println();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2215, "comment": "//package codeforces;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2216, "comment": "/**\n * Created by Baelish on 8/28/2018.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2216, "comment": "/* public char nextChar() {\n            return (char)skip();\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2216, "comment": "/*private char buff[] = new char[1005];\n        public char[] nextCharArray(){\n            int b = skip(), p = 0;\n            while(!(isSpaceChar(b))){\n                buff[p++] = (char)b;\n                b = readByte();\n            }\n            return Arrays.copyOf(buff, p);\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2216, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2217, "comment": "// i think i can break here\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2219, "comment": "// Note that this loop runs till square root \n"}, "Heuristic": []}, {"nl": {"id": 2219, "comment": "// If divisors are equal, print only one \n"}, "Heuristic": []}, {"nl": {"id": 2219, "comment": "// Otherwise print both \n"}, "Heuristic": []}, {"nl": {"id": 2219, "comment": "// System.out.println(\"min1 \"+min);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2219, "comment": "// System.out.println(\"min \"+min);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2219, "comment": "// System.out.println(\"min \"+min);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2221, "comment": "//package ContestEd69;\n"}, "Heuristic": []}, {"nl": {"id": 2222, "comment": "//package goodbye2017;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2222, "comment": "// 10*700^3*10\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2222, "comment": "// base\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2222, "comment": "// base\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2222, "comment": "// base\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2222, "comment": "// base\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2222, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2224, "comment": "// now we have one more digit >= j\n"}, "Heuristic": []}, {"nl": {"id": 2224, "comment": "// use digits are bad, 10 - use are good\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2224, "comment": "// System.err.println(Arrays.toString(ans));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2224, "comment": "// stress();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2224, "comment": "//\t\t test();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2225, "comment": "//\t\tchar xx[] = new char[700];\n"}, "Heuristic": []}, {"nl": {"id": 2225, "comment": "//\t\tfill(xx, '9');\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2225, "comment": "//\t\tString x = new String(xx);\n"}, "Heuristic": []}, {"nl": {"id": 2227, "comment": "//at least d\n"}, "Heuristic": []}, {"nl": {"id": 2227, "comment": "//exact count of at least d\n"}, "Heuristic": []}, {"nl": {"id": 2228, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Jialin Ouyang (Jialin.Ouyang@gmail.com)\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2228, "comment": "// not free\n"}, "Heuristic": []}, {"nl": {"id": 2228, "comment": "// not free\n"}, "Heuristic": []}, {"nl": {"id": 2228, "comment": "// free\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2228, "comment": "// free\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2229, "comment": "// [less][cntBigger] -> sum\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2231, "comment": "//        MyReader reader = new MyReader(new FileInputStream(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2232, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2234, "comment": "//out.println(Arrays.toString(dp1));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2234, "comment": "//out.println(dp2[0][n]+\" \"+dp2[1][n]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2238, "comment": "//false in lst means an \"s\" (simple statement), and true a \"f\"(for loop)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2238, "comment": "// arrayPrinter(dp) ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2238, "comment": "//(i-1)st statement is a for loop \n"}, "Heuristic": []}, {"nl": {"id": 2238, "comment": "//i-1 st statement is a simple statement\n"}, "Heuristic": []}, {"nl": {"id": 2238, "comment": "// arrayPrinter(dp) ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2239, "comment": "/*\t\t\tSystem.out.println(\"dp :\");\n\n\t\t\tfor (int i = 0; i <= n; i++)\n\t\t\t{\n\t\t\t\tSystem.out.print(\"i : \" + i + \" => \");\n\t\t\t\tfor (int j = 0; j <= n; j++)\n\t\t\t\t\tSystem.out.print(dp[i][j] + \" \");\n\t\t\t\tSystem.out.println();\n\t\t\t}*/"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 2239, "comment": "/*\n\n6\nf\nf\ns\ns\ns\ns\n: 10\n\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 2239, "comment": "//\t\t\tSystem.out.println(\"curr : \" + curr + \", bI : \" + backIndents);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2239, "comment": "//\t\t\t\t\tSystem.out.println(\"calling from curr : \" + curr + \", bI : \" + backIndents);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2240, "comment": "// static void  arrayPrinter(int[][] dp)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2240, "comment": "// {\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2240, "comment": "// System.out.println(\":::\") ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2240, "comment": "// for(int i=0;i<dp.length;i++)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2240, "comment": "// {\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2240, "comment": "// for(int j=0;j<dp[0].length;j++)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2240, "comment": "// {\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2240, "comment": "// System.out.print(dp[i][j]+\" \") ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2240, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2240, "comment": "// System.out.println() ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2240, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2240, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2240, "comment": "//false in lst means an \"s\" (simple statement), and true a \"f\"(for loop)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2240, "comment": "// int sum_i = 0;\n"}, "Heuristic": []}, {"nl": {"id": 2240, "comment": "// for(int j=0;j<lst.length;j++)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2240, "comment": "// sum_i = (sum_i+dp[i-1][j])%1000000007 ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2240, "comment": "//(i-1)st statement is a for loop \n"}, "Heuristic": []}, {"nl": {"id": 2240, "comment": "//i-1 st statement is a simple statement\n"}, "Heuristic": []}, {"nl": {"id": 2240, "comment": "// if(j==lst.length-1)\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2240, "comment": "// dp[i][j] = dp[i][j-1] ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2240, "comment": "// else\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2240, "comment": "// dp[i][j] = (dp[i-1][j]+dp[i][j+1])%1000000007 ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2240, "comment": "// for(int i=0;i<lst.length;i++)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2240, "comment": "// System.out.print(dp[lst.length-1][i]+\" \") ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2240, "comment": "// System.out.println() ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2242, "comment": "/*\n * PDPM IIITDM Jabalpur\n * Asutosh Rana\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 2242, "comment": "/* sum of all positions from */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2242, "comment": "//in.readInt();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2246, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author pandusonu\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2246, "comment": "/*\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                out.print(ans[i][j]+\" \");\n            }\n            out.println();\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2246, "comment": "// out.print(\"Case #\" + testNumber + \": \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2247, "comment": "/**\n * @author: Mehul Raheja\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2247, "comment": "/*\n        Runtime = O()\n     */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2247, "comment": "//Arrays.fill(dp[0], 1);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2247, "comment": "// System.out.println(Arrays.toString(dp[i-1]));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2247, "comment": "// System.out.println(sum);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2247, "comment": "//System.out.println(Arrays.toString(dp[i]));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2247, "comment": "// System.out.println(\"HERE1\" + det);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2247, "comment": "//System.out.println(\"HERE2\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2247, "comment": "//System.out.println(\"HERE \" + Arrays.toString(dp[i]));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2247, "comment": "//System.out.println(\"HERE3\" + sum);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2247, "comment": "//System.out.println(Arrays.toString(dp[i]));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2247, "comment": "//System.out.println(Arrays.toString(dp[dp.length-1]));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2247, "comment": "//        boolean det = false;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2247, "comment": "//        int maxlayer = 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2247, "comment": "//        long ans = 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2247, "comment": "//        for (int i = 0; i < N; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2247, "comment": "//            if (d[i] == 'f') {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2247, "comment": "//                if (!det) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2247, "comment": "//                    //System.out.println(\"HERE\" + maxlayer);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2247, "comment": "//                    ans = ans * maxlayer;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2247, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2247, "comment": "//                det = true;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2247, "comment": "//                maxlayer++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2247, "comment": "//                //System.out.println(\"HERE\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2247, "comment": "//            } else if (d[i] == 's') {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2247, "comment": "//                if (det) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2247, "comment": "//                    det = false;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2247, "comment": "//                    continue;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2247, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2247, "comment": "//                det = false;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2247, "comment": "//                System.out.println(maxlayer);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2247, "comment": "//                ans = ans * maxlayer;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2247, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2247, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2247, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2247, "comment": "//        System.out.println(ans);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2248, "comment": "//false in lst means an \"s\" (simple statement), and true a \"f\"(for loop)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2248, "comment": "//(i-1)st statement is a for loop \n"}, "Heuristic": []}, {"nl": {"id": 2248, "comment": "//i-1 st statement is a simple statement\n"}, "Heuristic": []}, {"nl": {"id": 2249, "comment": "//\t\t\tSystem.out.println(n+\" s\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2249, "comment": "// if this is an s\n"}, "Heuristic": []}, {"nl": {"id": 2249, "comment": "// transition from the one directly above and everything to the right of that\n"}, "Heuristic": []}, {"nl": {"id": 2249, "comment": "// for each dp space. using cumulative sums will make this easier\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2249, "comment": "// otherwise, this is an f\n"}, "Heuristic": []}, {"nl": {"id": 2249, "comment": "// transition from the spot on the top left\n"}, "Heuristic": []}, {"nl": {"id": 2249, "comment": "// answer is the sum of the last row\n"}, "Heuristic": []}, {"nl": {"id": 2249, "comment": "// fast scanner stuff\n"}, "Heuristic": []}, {"nl": {"id": 2250, "comment": "// index, maxNumOfIntents -> count\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2250, "comment": "// -----------MyScanner class for faster input----------\n"}, "Heuristic": []}, {"nl": {"id": 2250, "comment": "// --------------------------------------------------------\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2252, "comment": "// \u4f7f\u3046\u306e\u306f[n][n]\u3060\u3051\u3069\u3001j+1==n\u306e\u3068\u304dif\u5206\u5c90\u305b\u305a\u306b\u6e08\u3080\u3088\u3046\u306bn+1\u306b\u3057\u3066\u308b\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2252, "comment": "// i\u306f\u65e2\u306b\u57cb\u307e\u3063\u3066\u3044\u3066i+1\u306b\u66f8\u304d\u8fbc\u3093\u3067\u3044\u304f\u304b\u3089\u3001i<n-1\u307e\u3067\u3067\u3044\u3044\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2252, "comment": "// \u53f3\u4e0b\u306b\u30b3\u30d4\u30fc\u3057\u3066\u3044\u304f\u304b\u3089\u6ea2\u308c\u306a\u3044\u3088\u3046\u306bj<n-1\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2252, "comment": "// \u4f55\u901a\u308a\u304b\u3068\u3044\u3046\u306e\u3092\u53f3\u304b\u3089\u57cb\u3081\u3066\u3044\u304f\u304b\u3089j--\u3067\u9032\u3081\u308b\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2252, "comment": "// \u8db3\u3057\u3066\u3044\u304f\u3068\u5927\u304d\u304f\u306a\u308b\u304b\u3089\u3053\u306e\u6642\u70b9\u3067\u3082\u3046%m\u3057\u3066\u304a\u304f\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2253, "comment": "// new Thread(null,new Runnable(){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2253, "comment": "// \tpublic void run(){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2253, "comment": "// \t\tSolver Machine = new Solver() ;\n"}, "Heuristic": []}, {"nl": {"id": 2253, "comment": "// \t\ttry{\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2253, "comment": "// \t\t\tMachine.Solve() ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2253, "comment": "// \t\t\tMachine.Finish() ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2253, "comment": "// \t\t}catch(Exception e){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2253, "comment": "// \t\t\te.printStackTrace() ;\n"}, "Heuristic": []}, {"nl": {"id": 2253, "comment": "// \t\t\tSystem.out.flush() ;\n"}, "Heuristic": []}, {"nl": {"id": 2253, "comment": "// \t\t\tSystem.exit(-1) ;\n"}, "Heuristic": []}, {"nl": {"id": 2253, "comment": "// \t\t}catch(Error e){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2253, "comment": "// \t\t\te.printStackTrace() ;\n"}, "Heuristic": []}, {"nl": {"id": 2253, "comment": "// \t\t\tSystem.out.flush() ;\n"}, "Heuristic": []}, {"nl": {"id": 2253, "comment": "// \t\t\tSystem.exit(-1) ;\n"}, "Heuristic": []}, {"nl": {"id": 2253, "comment": "// \t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2253, "comment": "// \t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2253, "comment": "// },\"Solver\",1l<<27).start() ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2257, "comment": "//false in lst means an \"s\" (simple statement), and true a \"f\"(for loop)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2257, "comment": "//(i-1)st statement is a for loop \n"}, "Heuristic": []}, {"nl": {"id": 2257, "comment": "//i-1 st statement is a simple statement\n"}, "Heuristic": []}, {"nl": {"id": 2258, "comment": "/**\n *\n * @author rohan\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2258, "comment": "///////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2259, "comment": "// index, maxNumOfIntents -> count\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2259, "comment": "// -----------MyScanner class for faster input----------\n"}, "Heuristic": []}, {"nl": {"id": 2259, "comment": "// --------------------------------------------------------\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2260, "comment": "//why am I MLE'ing???\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 2260, "comment": "//\t\t\tfor(int indent = 1; indent <= curIndent + 1; ++indent) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2260, "comment": "//\t\t\t\tans += dp(ind + 1, indent);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2260, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2260, "comment": "//\t\t\tfor(int indent = 0; indent <= curIndent; ++indent) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2260, "comment": "//\t\t\t\tans += dp(ind + 1, indent);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2260, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2260, "comment": "//\t\tlong time = System.currentTimeMillis();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2260, "comment": "//\t\tSystem.out.println(System.currentTimeMillis() - time);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2261, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author ankur\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2261, "comment": "//*-*------clare------\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2262, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2263, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Pradyumn\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2263, "comment": "//our only option is to go 1 depth deeper\n"}, "Heuristic": []}, {"nl": {"id": 2263, "comment": "// for each j all preceding depths are possible\n"}, "Heuristic": []}, {"nl": {"id": 2263, "comment": "// can also implement partial sum to improve\n"}, "Heuristic": []}, {"nl": {"id": 2263, "comment": "// time complexity to dpeth * n only(affect only if no. of f are less than n s\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2264, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Liavontsi Brechka\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2266, "comment": "/*\n6\nf\ns\nf\ns\nf\ns\n\n\n\t */"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 2266, "comment": "// StreamTokenizer in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n"}, "Heuristic": []}, {"nl": {"id": 2267, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author ShekharN\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2267, "comment": "//int[] tmp = new int[n];\n"}, "Heuristic": []}, {"nl": {"id": 2267, "comment": "//tmp[(i+cnt)%n] = dp[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2267, "comment": "//Arrays.parallelSetAll(dp,i->tmp[i]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2268, "comment": "/*\n public class _909C {\n\n }\n\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 2268, "comment": "// actual solution\n"}, "Heuristic": []}, {"nl": {"id": 2268, "comment": "// end here\n"}, "Heuristic": []}, {"nl": {"id": 2269, "comment": "//        System.out.println(l);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2270, "comment": "// for 10^9 + k mods.\n"}, "Heuristic": []}, {"nl": {"id": 2270, "comment": "// 10^9 + k\n"}, "Heuristic": []}, {"nl": {"id": 2270, "comment": "//System.out.println(\"Program: \"+prgm);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2270, "comment": "// line, indentations\n"}, "Heuristic": []}, {"nl": {"id": 2270, "comment": "// line length\n"}, "Heuristic": []}, {"nl": {"id": 2271, "comment": "//in = new BufferedReader(new FileReader(\"metro.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2271, "comment": "//for\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2271, "comment": "//simple\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2272, "comment": "//        MyReader reader = new MyReader(new FileInputStream(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2273, "comment": "// TODO Auto-generated constructor stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2273, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2275, "comment": "//\t\tSystem.out.println(Arrays.deepToString(array));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2276, "comment": "//http://codeforces.com/contest/909/problem/C\n"}, "Heuristic": ["H2", "H9"]}, {"nl": {"id": 2276, "comment": "// dp[i][j] = number of ways to have a for loop indented\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2276, "comment": "// j times at the ith position.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2277, "comment": "/**\n\t * \u30b0\u30e9\u30d5\u306e\u884c\u5217\u306b\u3088\u308b\u5b9f\u88c5\n\t * \u63a5\u70b9\u6570\u306e\u5927\u304d\u3044\u30b0\u30e9\u30d5\u3067\u4f7f\u3046\u3068MLE\u3067\u6b7b\u306b\u305d\u3046\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2277, "comment": "/**\n\t * DFS(\u6df1\u3055\u512a\u5148\u63a2\u7d22)\u306b\u3088\u308b\u5b9f\u88c5\n\t * \u8a08\u7b97\u91cf\u306fO(E*MaxFlow)\u306e\u306f\u305a (E:\u8fba\u306e\u6570, MaxFlow:\u6700\u5927\u30d5\u30ed\u30fc)\n\t */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2277, "comment": "/**\n\t\t * \u6700\u5927\u30d5\u30ed\u30fc(\u6700\u5c0f\u30ab\u30c3\u30c8)\u3092\u6c42\u3081\u308b\n\t\t * @param from \u59cb\u70b9(source)\u306eID\n\t\t * @param to \u7d42\u70b9(target)\u306eID\n\t\t * @return \u6700\u5927\u30d5\u30ed\u30fc(\u6700\u5c0f\u30ab\u30c3\u30c8)\n\t\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2277, "comment": "/**\n\t\t * \u30d5\u30ed\u30fc\u306e\u5b9f\u884c \u30b0\u30e9\u30d5\u306e\u66f4\u65b0\u3082\u884c\u3046\n\t\t * @param from \u73fe\u5728\u3044\u308b\u7bc0\u70b9\u306eID\n\t\t * @param to \u7d42\u70b9(target)\u306eID\n\t\t * @param current_flow \u3053\u3053\u307e\u3067\u306e\u6d41\u91cf\n\t\t * @param passed \u65e2\u306b\u901a\u3063\u305f\u7bc0\u70b9\u304b\u5426\u304b\u3092\u683c\u7d0d\u3057\u305f\u914d\u5217\n\t\t * @return \u7d42\u70b9(target)\u306b\u6d41\u3057\u305f\u6d41\u91cf/\u623b\u308a\u306e\u30b0\u30e9\u30d5\u306e\u6d41\u91cf\n\t\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2277, "comment": "/**\n\t * 1-indexed\u306eBIT\u914d\u5217\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2277, "comment": "/**\n\t\t * \u6307\u5b9a\u3057\u305f\u8981\u7d20\u306b\u5024\u3092\u52a0\u7b97\u3059\u308b\n\t\t * \u8a08\u7b97\u91cf\u306fO(logN)\n\t\t * @param index \u52a0\u7b97\u3059\u308b\u8981\u7d20\u306e\u6dfb\u5b57\n\t\t * @param value \u52a0\u7b97\u3059\u308b\u91cf\n\t\t */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2277, "comment": "/**\n\t\t * 1\u301c\u6307\u5b9a\u3057\u305f\u8981\u7d20\u307e\u3067\u306e\u548c\u3092\u53d6\u5f97\u3059\u308b\n\t\t * \u8a08\u7b97\u91cf\u306fO(logN)\n\t\t * @param index \u548c\u306e\u7d42\u7aef\n\t\t * @return 1\u301cindex\u307e\u3067\u306e\u548c\n\t\t */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2279, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2279, "comment": "// safe if we came out of a statement, we can traverse\n"}, "Heuristic": []}, {"nl": {"id": 2279, "comment": "// we must use this indentation\n"}, "Heuristic": []}, {"nl": {"id": 2280, "comment": "//        stringBuilder.append(\"7 3\\n\" +\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2280, "comment": "//                \"1 5 2 6 3 7 4\\n\" +\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2280, "comment": "//                \"2 5 3\\n\" +\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2280, "comment": "//                \"4 4 1\\n\" +\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2280, "comment": "//                \"1 7 3\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2280, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2280, "comment": "//        Random r = new Random(5);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2280, "comment": "//        stringBuilder.append(\"100000 5000 \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2280, "comment": "//        for (int i = 0; i < 100000; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2280, "comment": "//            stringBuilder.append(\" \" + (r.nextInt(2000000000) - 1000000000) + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2280, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2280, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2280, "comment": "//        for (int k = 0; k < 5000; k++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2280, "comment": "//            stringBuilder.append(\" 1 100000 777 \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2280, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2282, "comment": "//A and M are coprime\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2282, "comment": "//x may be negative\n"}, "Heuristic": []}, {"nl": {"id": 2282, "comment": "//new code5().run();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2282, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2283, "comment": "/*\nTASK: CFC\nLANG: JAVA\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 2283, "comment": "//new FileInputStream(new File(\"CFC.in\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2283, "comment": "//PrintWriter out = new PrintWriter(new File(\"CFC.out\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2284, "comment": "/*\nint n = Integer.parseInt(sc.nextLine());\nString[] t = sc.nextLine().split(\" \");\nint[] list = new int[n];\nfor(int x=0; x<n; x++){\n\tlist[x] = Integer.parseInt(t[x]);\n}\n\t\t\nString[] dir = sc.nextLine().split(\" \");\nint a = Integer.parseInt(dir[0]);\nint b = Integer.parseInt(dir[1]);\nint c = Integer.parseInt(dir[2]);\nint d = Integer.parseInt(dir[3]);\nint e = Integer.parseInt(dir[4]);\n\nint n = Integer.parseInt(sc.nextLine());\n*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2284, "comment": "// \"s\"\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2284, "comment": "//System.out.println(listCount);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2285, "comment": "// Write your code here\n"}, "Heuristic": []}, {"nl": {"id": 2286, "comment": "//    pw.println(x+\" \"+cnt);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2286, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2289, "comment": "//out.println(Arrays.toString(deep));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2289, "comment": "// new FastScanner(new FileInputStream(\".in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2289, "comment": "// new PrintWriter(new FileOutputStream(\".out\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2291, "comment": "//BEGIN HERE\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2291, "comment": "// if from different set\n"}, "Heuristic": []}, {"nl": {"id": 2291, "comment": "// rank keeps the tree short\n"}, "Heuristic": []}, {"nl": {"id": 2292, "comment": "//package round455;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2292, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2294, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2295, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2296, "comment": "//            br = new BufferedReader(new FileReader(\"divljak.in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2296, "comment": "//            pw = new PrintWriter(new BufferedWriter(new FileWriter(\"divljak.out\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2296, "comment": "//            br = new BufferedReader(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2296, "comment": "//            pw = new PrintWriter(new FileWriter(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2299, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author ShekharN\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2300, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author ankur\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2300, "comment": "//System.out.println(ans1+\" \"+n+\" egsvd\"+horiz);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2300, "comment": "//System.out.println(ans1+\" \"+n+\" \"+horiz);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2300, "comment": "//*-*------clare------\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2301, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author ZYCSwing\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2302, "comment": "// print(dp);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2303, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2305, "comment": "//in.nextInt();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2306, "comment": "// try {inputStream= new FileInputStream(file);} catch (FileNotFoundException ex){return;};\n"}, "Heuristic": []}, {"nl": {"id": 2306, "comment": "//        try {outputStream= new FileOutputStream(fileOut);} catch (FileNotFoundException ex){return;};\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2308, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Wolfgang Beyer\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2308, "comment": "//long[] sum = new long[n + 3];\n"}, "Heuristic": []}, {"nl": {"id": 2308, "comment": "//sum[j] = sum[j + 1] + current[j];\n"}, "Heuristic": []}, {"nl": {"id": 2308, "comment": "//for (int j = 0; j <= i + 1; j++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2308, "comment": "//  current[j] =\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2308, "comment": "//}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2308, "comment": "//tok = new StringTokenizer(in.readLine(), \", \\t\\n\\r\\f\"); //adds commas as delimeter\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2309, "comment": "/*\n\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 2309, "comment": "//\t\t\t\t\tfor(int k=0;k<=j;k++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2309, "comment": "//\t\t\t\t\t\tmemo[i][j] += memo[i+1][k+1];\n"}, "Heuristic": []}, {"nl": {"id": 2309, "comment": "//\t\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2309, "comment": "//\t\tfor(int i=0;i<=N;i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2309, "comment": "//\t\t\tfor(int j=0;j<=N;j++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2309, "comment": "//\t\t\t\tSystem.out.print(memo[i][j]+\" \");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2309, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2309, "comment": "//\t\t\tSystem.out.println();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2309, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2309, "comment": "//\t\tSystem.out.println();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2311, "comment": "/**\n * Created by Jarek on 2017-12-30.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2312, "comment": "/* spar5h */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2312, "comment": "//index + depth/indentation\n"}, "Heuristic": []}, {"nl": {"id": 2312, "comment": "//c[i] = f implies that indentation will always be increased by one in i + 1\n"}, "Heuristic": []}, {"nl": {"id": 2312, "comment": "//c[i] = s implies that value of i + 1 can include any previous value of equal or higher indentation\n"}, "Heuristic": []}, {"nl": {"id": 2313, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Pradyumn\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2315, "comment": "//        long finalSum = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2315, "comment": "//        for (int i = 0; i < n; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2315, "comment": "//            finalSum+=sums[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2315, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2316, "comment": "//int accum = sol[0];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2316, "comment": "//out.println(Arrays.toString(sol));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2316, "comment": "// Fast input reader. Based on Kattio.java from open.kattis.com\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2316, "comment": "// but has method names to match Scanner\n"}, "Heuristic": []}, {"nl": {"id": 2317, "comment": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 2317, "comment": "/**\n *\n * @author EndUser\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2317, "comment": "//            for (int k = 0; k <= currentMax; k++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2317, "comment": "//                System.out.print(result[preIndex][k] + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2317, "comment": "//                \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2317, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2317, "comment": "//            System.out.println(\"\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2319, "comment": "//out.println(dp[2][0]+\" \"+dp[2][1]+\" \"+dp[2][2]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2320, "comment": "//package round455;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2320, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2321, "comment": "/* ignore */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2321, "comment": "/* ignore */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2322, "comment": "//false in lst means an \"s\" (simple statement), and true a \"f\"(for loop)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2322, "comment": "// arrayPrinter(dp) ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2322, "comment": "//(i-1)st statement is a for loop \n"}, "Heuristic": []}, {"nl": {"id": 2322, "comment": "//i-1 st statement is a simple statement\n"}, "Heuristic": []}, {"nl": {"id": 2322, "comment": "// arrayPrinter(dp) ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2323, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author phantom11\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2323, "comment": "//        for(i=0;i<=N;i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2323, "comment": "//            Arrays.fill(dp[i], -1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2323, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2323, "comment": "//        out.printLine(recur(0, 0));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2325, "comment": "/*\n * Institute DA-IICT\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 2325, "comment": "//boolean flag=i==1;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2325, "comment": "//long dp1[]=Arrays.copyOf(dp, n+1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2325, "comment": "//tr(dp);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2325, "comment": "// when nextLine, (inSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2326, "comment": "//print(n, memo);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2326, "comment": "//Fast I/O code is copied from uwi code.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2326, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2326, "comment": "//return i(this.sc-p.sc);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2329, "comment": "/**\n * Created by trung.pham on 28/12/17.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2329, "comment": "//System.out.println(index + \" \" + nested);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2329, "comment": "// System.out.println(result + \" \" + index + \" \" + nested);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2330, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2331, "comment": "// dp[i][j] is the number ways the ith statement is indented j times\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2333, "comment": "//dp[firstInLoop][index][indentLevel]\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2333, "comment": "//base case\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2333, "comment": "//if I am forced, just do it\n"}, "Heuristic": []}, {"nl": {"id": 2333, "comment": "//if I am on the end level, I don't have a choice\n"}, "Heuristic": []}, {"nl": {"id": 2333, "comment": "//otherwise, add all the possibilities\n"}, "Heuristic": []}, {"nl": {"id": 2334, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2335, "comment": "//package educational.round35;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2335, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2336, "comment": "/**\n * @author: Mehul Raheja\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2336, "comment": "/*\n        Runtime = O()\n     */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2336, "comment": "//int[] x = {1,2,3,4,5,6,7,8,9,10};\n"}, "Heuristic": []}, {"nl": {"id": 2336, "comment": "// System.out.println(cur);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2336, "comment": "//        for (int i = 0; i < 30; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2336, "comment": "//            int[] x = new int[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2336, "comment": "//            for (int j = 0; j < i; j++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2336, "comment": "//                x[j] = j + 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2336, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2336, "comment": "//            int[] y = new int[x.length];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2336, "comment": "//            for (int k = 0; k < x.length; k++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2336, "comment": "//                y[x.length - 1 - k] = x[k];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2336, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2336, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2336, "comment": "////            System.out.println(inv(x));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2336, "comment": "////            System.out.println(inv(y));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2336, "comment": "//            System.out.println(i + \" \" + ((inv(y) - inv(x))%2 == 1));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2336, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2337, "comment": "//A and M are coprime\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2337, "comment": "//x may be negative\n"}, "Heuristic": []}, {"nl": {"id": 2337, "comment": "//new code5().run();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2337, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2338, "comment": "//System.out.println(cnt);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2341, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Liavontsi Brechka\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2343, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Liavontsi Brechka\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2345, "comment": "//\t\tout.println(\"stamp : \" + elapsed / time);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2345, "comment": "//\t\tout.println(\"stamp : \" + TimeUnit.SECONDS.convert(elapsed, TimeUnit.NANOSECONDS));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2345, "comment": "//\t\tout.flush();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2345, "comment": "// c = gcd(a, b) -> extends gcd method: ax + by = c <----> (b % a)p + q = c;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2345, "comment": "// gcd\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2345, "comment": "// \n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2345, "comment": "// find any solution of the equation: ax + by = c using extends gcd\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2346, "comment": "//>>>BaZ<<<//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2346, "comment": "//static MyFileReader scan;\n"}, "Heuristic": []}, {"nl": {"id": 2346, "comment": "//static MyFileReader1 ss;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2346, "comment": "//scan = new MyFileReader();\n"}, "Heuristic": []}, {"nl": {"id": 2346, "comment": "//ss = new MyFileReader1();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2346, "comment": "//pw = new PrintWriter(new File(\"C://Users/Aman deep/Desktop/output.txt\"));  \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2346, "comment": "//System.out.println(\"Execution time : \"+Execution_Time+\" seconds\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2346, "comment": "//File input template\n"}, "Heuristic": []}, {"nl": {"id": 2346, "comment": "//Users/Aman deep/Desktop/input.txt\"));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2346, "comment": "//File input template\n"}, "Heuristic": []}, {"nl": {"id": 2346, "comment": "//Users/Aman deep/Desktop/output.txt\"));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2347, "comment": "/*int inv=0;\n        int temp=0;\n        long[][] inv_a = new long[n][n];\n        for (int i=0;i<n;i++){\n            for (int j=0;j<n;j++){\n                inv_a[i][j]=-1;\n            }\n        }\n        for (int i=n-2;i>=0;i--){\n            for (int j=i+1;j<n;j++){\n                if (arr[i]<arr[j]){\n                    inv++;\n                    temp++;\n                }\n                if (temp%2==0) inv_a[i][j]=0;\n                else inv_a[i][j]=1;\n            }\n            temp=0;\n        }\n        if (inv%2==0) inv=0;\n        else inv=1;\n        for (int i=0;i<m;i++){\n            int l = sc.nextInt()-1;\n            int r = sc.nextInt()-1;\n            long[][] exp = new long[r-l+1][r-l+1];\n            for (int k=0;k<exp.length;k++){\n                for (int h=0;h<exp.length;h++){\n                    exp[k][h]=-1;\n                }\n            }\n            for (int j=l;j<=r;j++){\n\n            }\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2347, "comment": "//temp++;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2347, "comment": "//if (temp%2==0) inv_a[i][j]=0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2347, "comment": "//else inv_a[i][j]=1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2348, "comment": "//package educational35;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2348, "comment": "//indices from start to end; but values from start+1 to end+1 !!\n"}, "Heuristic": []}, {"nl": {"id": 2352, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2353, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Pradyumn\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2354, "comment": "/**\n * Reader class based on the article at \"https://www.cpe.ku.ac.th/~jim/java-io.html\"\n * */"}, "Heuristic": ["H9"]}, {"nl": {"id": 2354, "comment": "//        System.out.println(parity ? \"even\": \"odd\");\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 2354, "comment": "//www.cpe.ku.ac.th/~jim/java-io.html\"\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2354, "comment": "//    static long nextLong() throws IOException{\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2354, "comment": "//        return Long.parseLong(next());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2354, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2354, "comment": "//Get a whole line.\n"}, "Heuristic": []}, {"nl": {"id": 2354, "comment": "//    static String line() throws IOException{\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2354, "comment": "//        return reader.readLine();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2354, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2354, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2354, "comment": "//    static double nextDouble() throws IOException{return Double.parseDouble(next());}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2355, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2356, "comment": "//out.println(ans);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2357, "comment": "// To Get Input\n"}, "Heuristic": []}, {"nl": {"id": 2357, "comment": "// Some Buffer Methods\n"}, "Heuristic": []}, {"nl": {"id": 2358, "comment": "//\t\t\tint a = in.nextInt() - 1, b = in.nextInt() - 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2358, "comment": "//\t\t\tquery(ar, memo, in.nextInt() - 1, in.nextInt() - 1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2360, "comment": "/*\n\t\t  br = new BufferedReader(new FileReader(\"input.txt\"));\n\t\t  pw = new PrintWriter(new BufferedWriter(new FileWriter(\"output.txt\")));\n\t\t  br = new BufferedReader(new InputStreamReader(System.in));\n\t\t  pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2360, "comment": "//int qq = 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2360, "comment": "//int qq = readInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2361, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author phantom11\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2361, "comment": "//DebugUtils.debug(inverse);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2362, "comment": "// InputStream inputStream = System.in; // Useful when taking input other than\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2362, "comment": "// console eg file handling // check ctor of inputReader\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2362, "comment": "// To print in file use this:- out = new PrintWriter(\"destination of file\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2362, "comment": "// including extension\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2363, "comment": "/* ignore */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2363, "comment": "/* ignore */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2363, "comment": "// k : 0-indexed\n"}, "Heuristic": []}, {"nl": {"id": 2363, "comment": "// [s, t)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2363, "comment": "//System.out.println(inv);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2363, "comment": "//System.out.println(size + \" \" + ((size * (size - 1) / 2)));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2364, "comment": "//Fast I/O code is copied from uwi code.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2364, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2364, "comment": "//return i(this.sc-p.sc);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2365, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2367, "comment": "/**\n p * @author prakhar28\n *\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2367, "comment": "/*implements Comparable<Pair>*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 2367, "comment": "/*public int compareTo(Pair ob){\n\t\t\treturn this.num-ob.num;\n\t\t}*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2367, "comment": "// line length+1\n"}, "Heuristic": []}, {"nl": {"id": 2367, "comment": "//buf[cnt++]=(byte)c;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2368, "comment": "/**\n * #\n * @author pttrung\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2368, "comment": "// PrintWriter out = new PrintWriter(new FileOutputStream(new File(\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2368, "comment": "// \"output.txt\")));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2368, "comment": "//            for (int j = r; j >= l; j--) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2368, "comment": "//                tmp[j] = data[j];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2368, "comment": "//                a.update(data[j], 1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2368, "comment": "//                total -= a.get(data[j] - 1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2368, "comment": "//               // total += 2;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2368, "comment": "//               // total %= 2;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2368, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2368, "comment": "// System.out.println(\"PRE \" + result);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2368, "comment": "// System.out.println(Arrays.toString(tmp));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2368, "comment": "//            for (int j = 0; j < (r - l + 1) / 2; j++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2368, "comment": "//                data[r - j] = tmp[l + j];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2368, "comment": "//                data[l + j] = tmp[r - j];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2368, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2368, "comment": "// System.out.println(\"AFTER \" + result);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2368, "comment": "// System.out.println(Arrays.toString(data));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2368, "comment": "// System.setOut(new PrintStream(new BufferedOutputStream(System.out), true));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2368, "comment": "//  br = new BufferedReader(new InputStreamReader(new FileInputStream(new File(\"input.txt\"))));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2369, "comment": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 2369, "comment": "/**\n *\n * @author EndUser\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2370, "comment": "// \tSystem.out.println(no);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2370, "comment": "//\t\tSystem.out.println(te);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2370, "comment": "//\t\t\tSystem.out.println(\"HOLA\"+no);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2371, "comment": "/*\nint n = Integer.parseInt(sc.nextLine());\nString[] t = sc.nextLine().split(\" \");\nint[] list = new int[n];\nfor(int x=0; x<n; x++){\n\tlist[x] = Integer.parseInt(t[x]);\n}\n\t\t\nString[] dir = sc.nextLine().split(\" \");\nint a = Integer.parseInt(dir[0]);\nint b = Integer.parseInt(dir[1]);\nint c = Integer.parseInt(dir[2]);\nint d = Integer.parseInt(dir[3]);\nint e = Integer.parseInt(dir[4]);\n\nint n = Integer.parseInt(sc.nextLine());\n*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2371, "comment": "//Scanner sc = new Scanner(System.in);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2371, "comment": "//System.out.println(even);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2373, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2374, "comment": "/*\n * PDPM IIITDM Jabalpur\n * Asutosh Rana\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 2374, "comment": "//in.readInt();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2375, "comment": "/*\n\n    [[[[[[[[[[[[[[[      ]]]]]]]]]]]]]]]\n    [::::::::::::::      ::::::::::::::]\n    [::::::::::::::      ::::::::::::::]\n    [::::::[[[[[[[:      :]]]]]]]::::::]\n    [:::::[                      ]:::::]\n    [:::::[                      ]:::::]\n    [:::::[                      ]:::::]\n    [:::::[                      ]:::::]\n    [:::::[    CODE YOUR LIFE    ]:::::]\n    [:::::[   Kripa Shankar jha  ]:::::]\n    [:::::[                      ]:::::]\n    [:::::[                      ]:::::]\n    [:::::[                      ]:::::]\n    [:::::[                      ]:::::]\n    [::::::[[[[[[[:      :]]]]]]]::::::]\n    [::::::::::::::      ::::::::::::::]\n    [::::::::::::::      ::::::::::::::]\n    [[[[[[[[[[[[[[[      ]]]]]]]]]]]]]]]\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 2375, "comment": "/**\n         * Read the next integer from the input stream.\n         * @return The next integer.\n         * @throws IOException\n         */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2375, "comment": "/**\n         * Read the next byte of data from the input stream.\n         * @return the next byte of data, or -1 if the end of the stream is reached.\n         * @throws IOException if an I/O error occurs.\n         */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2375, "comment": "/**\n         * Read data from the input stream into the buffer\n         * @throws IOException if an I/O error occurs.\n         */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2375, "comment": "//~~~~~~~~~~~~~~~~~~~~~~~@@@@@@@@@@@@@@@_____________K_____S_____J__________@@@@@@@@@@@@@@@@@@@@@@@@@@@@~~~~~~~~~~~~~~~~~~~~~~~~~~\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2375, "comment": "//Date:00/00/17\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2375, "comment": "//-------------\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2375, "comment": "// use ((((((( sc ............... for input\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2375, "comment": "//___________________________Fast-Input_Output-------------------******************* \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2375, "comment": "// 2^16, a good compromise for some problems\n"}, "Heuristic": []}, {"nl": {"id": 2375, "comment": "// Underlying input stream\n"}, "Heuristic": []}, {"nl": {"id": 2375, "comment": "// Self-maintained buffer\n"}, "Heuristic": []}, {"nl": {"id": 2375, "comment": "// Current read position in the buffer\n"}, "Heuristic": []}, {"nl": {"id": 2375, "comment": "// Effective bytes in the buffer read from the input stream\n"}, "Heuristic": []}, {"nl": {"id": 2377, "comment": "/**\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2378, "comment": "//System.out.println(count);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2379, "comment": "// Solver Machine = new Solver() ;\n"}, "Heuristic": []}, {"nl": {"id": 2379, "comment": "// Machine.Solve() ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2379, "comment": "// Machine.Finish() ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2380, "comment": "/*public int hashCode()\n        {\n            return new Long(x).hashCode() * 31 + new Long(y).hashCode();\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2380, "comment": "//return 0;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2381, "comment": "//package codeforces.Educational35;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2382, "commentn"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2383, "comment": "// import java.awt.Point;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2385, "comment": "//package Educational35;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2385, "comment": "//import FastScanner.Competitive;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2385, "comment": "///////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2385, "comment": "//is = System.in;\n"}, "Heuristic": []}, {"nl": {"id": 2385, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2386, "comment": "/*   static void BITupdate(int x,int val)\n        {\n        \twhile(x<=n)\n        \t{\n        \t\tBIT[x]+=val;\n        \t\tx+= x & -x;\n        \t}\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2386, "comment": "/*   static void update(int x,long val)\n        {\n      \n        \tval=val%MOD;\n        \twhile(x<=n)\n        \t{\n        \t\t// System.out.println(x);\n        \tBIT[x]=(BIT[x]+val)%MOD;\n        \tx+=(x & -x);\n        \t}\n        //\tSystem.out.println(\"dfd\");\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2386, "comment": "/*      static long sum(int x)\n        {\n        \tlong sum=0;\n        \twhile(x>0)\n        \t{\n        \t\tsum=(sum+BIT[x])%MOD;\n        \t\tx-=x & -x;\n        \t}\n        \treturn sum;\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2386, "comment": "/*  \n   private static void BFS(int sou){\n        Queue<Integer> q=new LinkedList<Integer>();\n        q.add(sou);\n        Visited[sou]=true;\n        levl[sou]=0;\n        while(!q.isEmpty()){\n            int top=q.poll();\n            \n            for(int i:adj[top]){\n                //pw.println(i+\" \"+top);\n            if(!Visited[i])\n            {\n                \n                q.add(i);\n                levl[i]=levl[top]+1;\n            }\n            \n            Visited[i]=true;\n            \n            }\n        }\n    }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2386, "comment": "/* private static void kahn(int n){\n                    \n                    PriorityQueue<Integer> q=new PriorityQueue<Integer>();\n                    for(int i=1;i<=n;i++){\n                        if(indeg[i]==0){\n                            q.add(i);\n                        }\n                    }\n                    while(!q.isEmpty()){\n                        int top=q.poll();\n                        st.push(top);\n                        for(Node i:adj[top]){\n                            indeg[i.to]--;\n                            if(indeg[i.to]==0){\n                                q.add(i.to);\n                            }\n                        }\n                    }\n                }\n                    \n                    static int state=1;\n                    static long no_exc=0,no_vert=0;\n                  static Stack<Integer> st;\n                  static HashSet<Integer> inset;\n                 /*   private static void topo(int curr){\n                        \n                        Visited[curr]=true;\n                        inset.add(curr);\n                        for(int x:adj[curr]){\n                            if(adj[x].contains(curr) || inset.contains(x)){\n                                state=0;\n                                return;\n                            }\n                            if(state==0)\n                                return;\n                            \n                        }\n                        st.push(curr);\n                        \n                        inset.remove(curr);\n                    }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2386, "comment": "//    private static TreeSet<Integer> ts=new TreeSet[200000];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2386, "comment": "//  static int n,m;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2386, "comment": "//ind frog crab\n"}, "Heuristic": []}, {"nl": {"id": 2386, "comment": "// System.out.println(x);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2386, "comment": "//\tSystem.out.println(\"dfd\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2386, "comment": "//this.s = s;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2386, "comment": "//\t\t&((Long.compare(s, other.s) != 0 ? (Long.compare(s, other.s)):(Long.compare(u, other.v)!=0?Long.compare(u, other.v):Long.compare(v, other.u))));\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 2386, "comment": "//return this.u-other.u;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2386, "comment": "//pw.println(i+\" \"+top);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2386, "comment": "// To Get Input\n"}, "Heuristic": []}, {"nl": {"id": 2386, "comment": "// Some Buffer Methods\n"}, "Heuristic": []}, {"nl": {"id": 2387, "comment": "// discussed with rainboy\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2389, "comment": "// import java.awt.Point;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2391, "comment": "/*\n3\n1 2 3\n2\n1 2\n2 3\n\n4\n1 2 4 3\n4\n1 1\n1 4\n1 4\n2 3\n\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 2391, "comment": "//\t\t\tfor(int j=0; j<=r-l; j++)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2391, "comment": "//\t\t\t\tnv[l+j] = vals[r-j];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2391, "comment": "//\t\t\t\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2391, "comment": "//\t\t\tfor(int j=0; j<=r-l; j++)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2391, "comment": "//\t\t\t\tvals[l+j] = nv[l+j];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2393, "comment": "//false = 0, true = 1;\n"}, "Heuristic": []}, {"nl": {"id": 2395, "comment": "//package Educational35;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2395, "comment": "//import FastScanner.Competitive;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2395, "comment": "///////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2395, "comment": "//is = System.in;\n"}, "Heuristic": []}, {"nl": {"id": 2395, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2397, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2399, "comment": "//app.\u306f\u5168\u90e8\u3051\u3059\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2399, "comment": "//\u6d41\u3059\u524d\u306bfinal\u306b\u3059\u308b\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2399, "comment": "//\u6d41\u3059\u524d\u306bstatic\u306b\u3059\u308b\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2399, "comment": "//\u6d41\u3059\u524d\u306bstatic\u306b\u3059\u308b\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2399, "comment": "//\u6d41\u3059\u524d\u306bstatic\u306b\u3059\u308b\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2399, "comment": "//\u30ab\u30a6\u30f3\u30c8\u3059\u308b\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2399, "comment": "//\u4ea4\u63db\u6642\u8ffd\u52a0\u5206\u30ab\u30a6\u30f3\u30c8\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2399, "comment": "//\u5224\u5b9a\u3059\u308b\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2399, "comment": "//\u6d41\u3059\u524d\u306bstatic\u306b\u3059\u308b\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2399, "comment": "//\t\t\tcheckInput();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2400, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2401, "comment": "//        stringBuilder.append(\"7 3\\n\" +\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2401, "comment": "//                \"1 5 2 6 3 7 4\\n\" +\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2401, "comment": "//                \"2 5 3\\n\" +\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2401, "comment": "//                \"4 4 1\\n\" +\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2401, "comment": "//                \"1 7 3\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2401, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2401, "comment": "//        Random r = new Random(5);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2401, "comment": "//        stringBuilder.append(\"100000 5000 \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2401, "comment": "//        for (int i = 0; i < 100000; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2401, "comment": "//            stringBuilder.append(\" \" + (r.nextInt(2000000000) - 1000000000) + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2401, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2401, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2401, "comment": "//        for (int k = 0; k < 5000; k++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2401, "comment": "//            stringBuilder.append(\" 1 100000 777 \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2401, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2403, "comment": "/* Input */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2405, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author ShekharN\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2406, "comment": "/*\n * Author Ayub Subhaniya\n * Institute DA-IICT\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 2406, "comment": "// when nextLine, (inSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2408, "comment": "/*\nKeep solving problems.\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 2409, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Liavontsi Brechka\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2410, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Wolfgang Beyer\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2410, "comment": "//tok = new StringTokenizer(in.readLine(), \", \\t\\n\\r\\f\"); //adds commas as delimeter\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2412, "comment": "/**\n * #\n * @author pttrung\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2412, "comment": "// PrintWriter out = new PrintWriter(new FileOutputStream(new File(\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2412, "comment": "// \"output.txt\")));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2412, "comment": "// System.setOut(new PrintStream(new BufferedOutputStream(System.out), true));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2412, "comment": "//  br = new BufferedReader(new InputStreamReader(new FileInputStream(new File(\"input.txt\"))));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2414, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author ankur\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2414, "comment": "//System.out.println(ct);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2414, "comment": "// System.out.println(ct);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2414, "comment": "//*-*------clare------\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2417, "comment": "//       |----|       /\\      |    |   -----   |\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2417, "comment": "//       |   /       /  \\     |    |     |     |\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2417, "comment": "//       |--/       /----\\    |----|     |     |\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2417, "comment": "//       |   \\     /      \\   |    |     |     |\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2417, "comment": "//       |    \\   /        \\  |    |   -----   -------\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2422, "comment": "//        MyReader reader = new MyReader(new FileInputStream(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2424, "comment": "//BEGIN HERE\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2424, "comment": "// if from different set\n"}, "Heuristic": []}, {"nl": {"id": 2424, "comment": "// rank keeps the tree short\n"}, "Heuristic": []}, {"nl": {"id": 2425, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2426, "comment": "/* \n * UMANG PANCHAL\n * DAIICT\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 2426, "comment": "// --------------------My Code Starts Here----------------------\n"}, "Heuristic": []}, {"nl": {"id": 2426, "comment": "// Corner cases\n"}, "Heuristic": []}, {"nl": {"id": 2426, "comment": "// This is checked so that we can skip \n"}, "Heuristic": []}, {"nl": {"id": 2426, "comment": "// middle five numbers in below loop\n"}, "Heuristic": []}, {"nl": {"id": 2426, "comment": "// --------------------My Code Ends Here------------------------\n"}, "Heuristic": []}, {"nl": {"id": 2426, "comment": "// % is remainder\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2428, "comment": "// Fast input reader. Based on Kattio.java from open.kattis.com\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2428, "comment": "// but has method names to match Scanner\n"}, "Heuristic": []}, {"nl": {"id": 2429, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2431, "comment": "/* package whatever; // don't place package name! */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2431, "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2431, "comment": "/*int[][] nck=new int[2000][2000];\n\t\tfor(int i=0;i<=n;i++){\n\t\t\tfor(int j=0;j<=n;j++){\n\t\t\t\tnck[i][j]=0;\n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<=n;i++){\n\t\t\tnck[i][0]=1;\n\t\t\tfor(int j=1;j<=i;j++){\n\t\t\t\tnck[i][j]=nck[i-1][j]+nck[i-1][j-1];\n\t\t\t\tnck[i][j]%=2;\n\t\t\t}\n\t\t}*/"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 2431, "comment": "// don't place package name! */\n"}, "Heuristic": []}, {"nl": {"id": 2432, "comment": "////////////////////////////////////////////////////// Merge Sort ////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": []}, {"nl": {"id": 2432, "comment": "/////////////////////////////////////////////////////////// Methods ////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": []}, {"nl": {"id": 2432, "comment": "////////////////////////////////////////// Input Reader ////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": []}, {"nl": {"id": 2434, "comment": "// count inversions\n"}, "Heuristic": []}, {"nl": {"id": 2434, "comment": "// r excluding, l including\n"}, "Heuristic": []}, {"nl": {"id": 2437, "comment": "/**\n * @author derrick20\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2437, "comment": "//        var sumMap = new HashMap<Integer, ArrayList<Pair>>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2437, "comment": "//                sumMap.computeIfAbsent(sum, val -> new ArrayList<>()).add(new Pair(i, j, sum));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2437, "comment": "//            System.out.println(group);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2439, "comment": "// package codeforce.Training1900;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2439, "comment": "//https://codeforces.com/problemset/problem/1141/F2\n"}, "Heuristic": ["H2", "H9"]}, {"nl": {"id": 2439, "comment": "//    MUST SEE BEFORE SUBMISSION\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2439, "comment": "//    check whether int part would overflow or not, especially when it is a * b!!!!\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2439, "comment": "//        int t = sc.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2440, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author revanth\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2441, "comment": "/**\n\t * Source: Matt Fontaine\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2441, "comment": "/*\n7\n4 1 2 2 1 5 3\noutputCopy\n3\n7 7\n2 3\n4 5\ninputCopy\n11\n-5 -4 -3 -2 -1 0 1 2 3 4 5\noutputCopy\n2\n3 4\n1 1\ninputCopy\n4\n1 1 1 1\noutputCopy\n4\n4 4\n1 1\n2 2\n3 3\n*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2443, "comment": "/* public static long primeFactorization(long n)\n        {\n             HashSet<Integer> a =new HashSet<Integer>();\n        \tlong cnt=0;\n            for(int i=2;i*i<=n;i++)\n            {\n                while(a%i==0)\n                {\n                    a.add(i);\n                    a/=i;\n                }\n            }\n            if(a!=1)\n            \tcnt++;\n                //a.add(n);\n            return cnt;\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2443, "comment": "//a.add(n);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2444, "comment": "//got best sum\n"}, "Heuristic": []}, {"nl": {"id": 2444, "comment": "// ____________________________________________________________________________\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2444, "comment": "//|                                                                            |\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2444, "comment": "//|  /$$$$$$  /$$$$$$         /$$$$$$   /$$                /$$$$$$   /$$$$$$   |\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2444, "comment": "//| |_  $$_/ /$$__  $$       /$$__  $$ | $$               /$$__  $$ /$$__  $$  |\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2444, "comment": "//|   | $$  | $$  \\ $$      | $$  \\__//$$$$$$   /$$   /$$| $$  \\__/| $$  \\__/  |\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2444, "comment": "//|   | $$  | $$  | $$      |  $$$$$$|_  $$_/  | $$  | $$| $$$$    | $$$$      |\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2444, "comment": "//|   | $$  | $$  | $$       \\____  $$ | $$    | $$  | $$| $$_/    | $$_/      |\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2444, "comment": "//|   | $$  | $$  | $$       /$$  \\ $$ | $$ /$$| $$  | $$| $$      | $$        |\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2444, "comment": "//|  /$$$$$$|  $$$$$$/      |  $$$$$$/ |  $$$$/|  $$$$$$/| $$      | $$        |\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2444, "comment": "//| |______/ \\______/        \\______/   \\___/   \\______/ |__/      |__/        |\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2444, "comment": "//|____________________________________________________________________________|\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2444, "comment": "// Buffer of Bytes\n"}, "Heuristic": []}, {"nl": {"id": 2444, "comment": "// Scan method used to scan buf\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2444, "comment": "// Removing startPointing whitespaces\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2444, "comment": "// If Negative Sign encounters\n"}, "Heuristic": []}, {"nl": {"id": 2444, "comment": "// Removing startPointing whitespaces\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2444, "comment": "// If Negative Sign encounters\n"}, "Heuristic": []}, {"nl": {"id": 2445, "comment": "//br = new BufferedReader( new FileReader(\"input.txt\") );\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2445, "comment": "//in = new Reader(\"input.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2445, "comment": "//br = new BufferedReader( new InputStreamReader( System.in ) );\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2445, "comment": "//int t = in.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2445, "comment": "// line length\n"}, "Heuristic": []}, {"nl": {"id": 2446, "comment": "//System.out.println(mid);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2446, "comment": "//        my_no multiply(my_no obj){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2446, "comment": "//            long num1=obj.num;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2446, "comment": "//            long denom1=obj.denom;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2446, "comment": "//            long num2=this.num;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2446, "comment": "//            long denom2=this.denom;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2446, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2446, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2448, "comment": "//System.out.println(minvalue);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2448, "comment": "// System.out.println(sum+\" \"+var.sum);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2448, "comment": "//System.out.println(sum+\" \"+var.sum);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2448, "comment": "//var = new Node(minvalue,0,0);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2449, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Washoum\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2451, "comment": "// max disjoint range set in ranges[r]\n"}, "Heuristic": []}, {"nl": {"id": 2451, "comment": "// backtrack on bid\n"}, "Heuristic": []}, {"nl": {"id": 2453, "comment": "/*\nIf you want to aim high, aim high\nDon't let that studying and grades consume you\nJust live life young\n******************************\nIf I'm the sun, you're the moon\nBecause when I go up, you go down\n*******************************\nI'm working for the day I will surpass you\nhttps://www.a2oj.com/Ladder16.html\n*/"}, "Heuristic": ["H2", "H7", "H9"]}, {"nl": {"id": 2453, "comment": "//www.a2oj.com/Ladder16.html\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2456, "comment": "//package com.example.programming;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2457, "comment": "/**\n * @author derrick20\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2457, "comment": "// greedily schedule the intervals\n"}, "Heuristic": []}, {"nl": {"id": 2460, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author beginner1010\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2460, "comment": "// consider only bestSums\n"}, "Heuristic": []}, {"nl": {"id": 2461, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2462, "comment": "//            writer.println(\"Pairs having sum: \"+e);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2462, "comment": "//            for(Pair p : list) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2462, "comment": "//                writer.print(p);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2462, "comment": "//                writer.print(\" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2462, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2462, "comment": "//            writer.println();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2463, "comment": "// max disjoint range set in ranges[r]\n"}, "Heuristic": []}, {"nl": {"id": 2463, "comment": "// backtrack on bid\n"}, "Heuristic": []}, {"nl": {"id": 2465, "comment": "//Solution Credits: Taranpreet Singh\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2465, "comment": "//SOLUTION BEGIN\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2465, "comment": "//Code not meant for understanding, proceed with caution\n"}, "Heuristic": []}, {"nl": {"id": 2465, "comment": "//SOLUTION END\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2465, "comment": "//Solution Credits: Taranpreet Singh\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2467, "comment": "// Author: aman_robotics\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2467, "comment": "//package math_codet;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2468, "comment": "///////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2469, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2469, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2471, "comment": "// I/O\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2472, "comment": "//int best_sum = -1;\n"}, "Heuristic": []}, {"nl": {"id": 2472, "comment": "//int sum = entry.getKey();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2473, "comment": "//package sept;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2473, "comment": "//boolean debug=false;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2473, "comment": "//cnt++;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2473, "comment": "//out.println(pr.a+\" \"+pr.b);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2473, "comment": "//,int c\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2473, "comment": "//this.c=c;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2473, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2473, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2475, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2476, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2476, "comment": "//out.println(hm);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2476, "comment": "//out.println(al);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2476, "comment": "//out.println(all);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2476, "comment": "//out.println(all.size());\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2476, "comment": "//out.println(\"ca\" + msize + \" \" + all.size());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2476, "comment": "//out.println(hm);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2478, "comment": "//out.println((ar.get(0).l+1)+\" \"+(ar.get(0).r+1));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2479, "comment": "//out.println(l);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2480, "comment": "// references\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2480, "comment": "// IBIG = 1e9 + 7\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2480, "comment": "// IMAX ~= 2e9\n"}, "Heuristic": []}, {"nl": {"id": 2480, "comment": "// LMAX ~= 9e18\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2480, "comment": "// constants\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2480, "comment": "// math util\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2480, "comment": "// array util\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2480, "comment": "// graph util\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2480, "comment": "// input\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2480, "comment": "// output\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2481, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author beginner1010\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2482, "comment": "//System.out.println(mid +\" \"+ left +\" \" +right);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2483, "comment": "// 3,5,7\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2483, "comment": "// 2x+3=n\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2483, "comment": "// for(Map.Entry<Integer,Integer> Test: map.entrySet()){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2483, "comment": "//            int Key=Test.getKey();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2483, "comment": "//            int val=Test.getValue();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2483, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2484, "comment": "/*\nKeep solving problems.\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 2485, "comment": "// package CF1141;\n"}, "Heuristic": []}, {"nl": {"id": 2485, "comment": "//        int max = Integer.MIN_VALUE;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2485, "comment": "//        out.println(ans.size() + \"\\n\" + ans);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2485, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2485, "comment": "//        out.println(map);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2485, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2485, "comment": "//        out.println(Arrays.toString(sum));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2485, "comment": "// Note that this loop runs till square root\n"}, "Heuristic": []}, {"nl": {"id": 2485, "comment": "//    GCD - Using Euclid theorem.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2485, "comment": "//    Extended euclidean algorithm\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2485, "comment": "//    Used to solve equations of the form ax + by = gcd(a,b)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2485, "comment": "//    return array [d, a, b] such that d = gcd(p, q), ap + bq = d\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2485, "comment": "// X ^ y mod p\n"}, "Heuristic": []}, {"nl": {"id": 2485, "comment": "// Returns modulo inverse of a\n"}, "Heuristic": []}, {"nl": {"id": 2485, "comment": "// with respect to m using extended\n"}, "Heuristic": []}, {"nl": {"id": 2485, "comment": "// Euclid Algorithm. Refer below post for details:\n"}, "Heuristic": []}, {"nl": {"id": 2485, "comment": "// https://www.geeksforgeeks.org/multiplicative-inverse-under-modulo-m/\n"}, "Heuristic": ["H2", "H9"]}, {"nl": {"id": 2485, "comment": "// Apply extended Euclid Algorithm\n"}, "Heuristic": []}, {"nl": {"id": 2485, "comment": "// Make x1 positive\n"}, "Heuristic": []}, {"nl": {"id": 2485, "comment": "// k is size of num[] and rem[].\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2485, "comment": "// Returns the smallest number\n"}, "Heuristic": []}, {"nl": {"id": 2485, "comment": "// x such that:\n"}, "Heuristic": []}, {"nl": {"id": 2485, "comment": "// x % num[0] = rem[0],\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2485, "comment": "// x % num[1] = rem[1],\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2485, "comment": "// ..................\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2485, "comment": "// x % num[k-2] = rem[k-1]\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2485, "comment": "// Assumption: Numbers in num[] are pairwise\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2485, "comment": "// coprime (gcd for every pair is 1)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2485, "comment": "//  Binary search\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2485, "comment": "//    First occurence using binary search\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2485, "comment": "//    Last occurenece using binary search\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2485, "comment": "// Merge sort\n"}, "Heuristic": []}, {"nl": {"id": 2485, "comment": "//**********JUST CALL THE CONSTRUCTOR, THIS FUNCTION WILL BE CALLED AUTOMATICALLY******\n"}, "Heuristic": []}, {"nl": {"id": 2485, "comment": "//          Replace this line if you want to change the function of the Segment tree.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2485, "comment": "//***********We have to use this function **************\n"}, "Heuristic": []}, {"nl": {"id": 2485, "comment": "//This is a helper function.\n"}, "Heuristic": []}, {"nl": {"id": 2485, "comment": "//************* DO NOT USE THIS ****************\n"}, "Heuristic": []}, {"nl": {"id": 2485, "comment": "//             Segment tree implemented for range minimum query. Change the below line to change the function.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2485, "comment": "// idx - index to be updated in the array\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2485, "comment": "// node - index to be updated in the seg tree\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2485, "comment": "// Leaf node\n"}, "Heuristic": []}, {"nl": {"id": 2485, "comment": "// If idx is in the left child, recurse on the left child\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2485, "comment": "// if idx is in the right child, recurse on the right child\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2485, "comment": "// Internal node will have the min of both of its children\n"}, "Heuristic": []}, {"nl": {"id": 2485, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2485, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2486, "comment": "/*for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                if (hm.containsKey(sub[i][j])) {\n                    hm.get(sub[i][j]).add(new P(i, j));\n                } else {\n                    List<P> temp = new ArrayList<>();\n                    temp.add(new P(i, j));\n                    hm.put(sub[i][j], temp);\n                }\n            }\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2486, "comment": "/*for(Map.Entry it : hm.entrySet()) {\n            int or = overlap(it.getValue());\n            ans = Math.max(ans, or);\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2486, "comment": "/*List<P> sortedList = listOfPair.stream()\n                .sorted((pair1, pair2) -> pair1.getB().compareTo(pair2.getB()))\n                .collect(Collectors.toList());*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2486, "comment": "//package codeforces_464_div2;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2488, "comment": "//package codeforces;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2489, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Liavontsi Brechka\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2490, "comment": "// static Scanner s=new Scanner(System.in);\n"}, "Heuristic": []}, {"nl": {"id": 2490, "comment": "//        t=i(s()[0]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2490, "comment": "//dp[i]=a[i]+max(dp[j]) S.T. j<i and h[j]<h[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2490, "comment": "//                     if(sum==5&&i==5) System.out.println(tm.get(sum).floorKey(4));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2490, "comment": "//                     if(tm.containsKey(sum)&&tm.get(sum).floorKey(i-1)!=null){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2490, "comment": "//                             val = Math.max(val, dp[tm.get(sum).floorKey(i - 1)].getOrDefault(sum, 0));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2490, "comment": "//                     }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2490, "comment": "//            System.out.println(dp[5].get(5L)+\" \"+dp[4].get(5L));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2490, "comment": "//        System.out.println(sb);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2490, "comment": "//        BufferedReader s = new BufferedReader(new InputStreamReader(System.in));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2491, "comment": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 2491, "comment": "/**\n *\n * @author Hemant Dhanuka\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2491, "comment": "//package Round547;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2491, "comment": "// line length \n"}, "Heuristic": []}, {"nl": {"id": 2491, "comment": "//    Scanner s=new Scanner(System.in);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2491, "comment": "//Node rangelist[]=new  Node[pq1.size()+1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2491, "comment": "//int count=1;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2491, "comment": "//rangelist[0]=new Node(-1,-1);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2492, "comment": "//for(Map.Entry<Long,ArrayList<Node>> pair: map.entrySet())\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2492, "comment": "//System.out.println(pair.getKey()+\" \"+pair.getValue());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2493, "comment": "// max disjoint range set in ranges[r]\n"}, "Heuristic": []}, {"nl": {"id": 2493, "comment": "//\t\t\tArrays.sort(ranges, (a, b) -> b.size() - a.size());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2493, "comment": "// backtrack on bid\n"}, "Heuristic": []}, {"nl": {"id": 2494, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author beginner1010\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2495, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author beginner1010\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2496, "comment": "//\t\tfor(int i=4;i<=4;i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2496, "comment": "//\t\t\tInputStream uinputStream = new FileInputStream(\"shortcut.in\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2496, "comment": "//\t\t\tString f = i+\".in\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2496, "comment": "//\t\t\tInputStream uinputStream = new FileInputStream(f);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2496, "comment": "//\t\t\tInputReader in = new InputReader(uinputStream);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2496, "comment": "//\t\t\tPrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"shortcut.out\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2496, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2496, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2497, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Jenish\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "/* Create temp arrays */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2498, "comment": "/* Merge the temp arrays */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2498, "comment": "/* Copy remaining elements of L[] if any */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2498, "comment": "/* Copy remaining elements of R[] if any */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2498, "comment": "/* Create temp arrays */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2498, "comment": "/* Merge the temp arrays */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2498, "comment": "/* Copy remaining elements of L[] if any */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2498, "comment": "/* Copy remaining elements of R[] if any */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2498, "comment": "/*above line finds out maximum of dp[j](excluding ith element value) \n    and val[i] + dp[j-wt[i]] (including ith element value and the \n    profit with \"KnapSack capacity - ith element weight\") */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2498, "comment": "/*\nlowerBound - finds largest element equal or less than value paased\nupperBound - finds smallest element equal or more than value passed\n\nif not present return -1;\n\n*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2498, "comment": "// U KNOW THAT IF THIS DAY WILL BE URS THEN NO ONE CAN DEFEAT U HERE................\n"}, "Heuristic": []}, {"nl": {"id": 2498, "comment": "//JUst keep faith in ur strengths .................................................. \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "// ASCII = 48 + i ;// 2^28 = 268,435,456  > 2* 10^8 // log 10 base 2 = 3.3219 \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "// odd:: (x^2+1)/2 , (x^2-1)/2 ; x>=3// even:: (x^2/4)+1 ,(x^2/4)-1  x >=4 \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "// FOR ANY ODD NO N : N,N-1,N-2\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "//ALL ARE PAIRWISE COPRIME \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "//THEIR COMBINED LCM IS PRODUCT OF ALL THESE NOS\n"}, "Heuristic": []}, {"nl": {"id": 2498, "comment": "// two consecutive odds are always coprime to each other\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "// two consecutive even have always gcd  = 2 ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "// Rectangle r = new Rectangle(int x , int y,int widht,int height) \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "//Creates a rect. with bottom left cordinates as (x, y) and top right as ((x+width),(y+height))\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "//BY DEFAULT Priority Queue is MIN in nature in java\n"}, "Heuristic": []}, {"nl": {"id": 2498, "comment": "//to use as max , just push with negative sign and change sign after removal \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "// We can make a sieve of max size 1e7 .(no time or space issue) \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "// In 1e7 starting nos we have about 66*1e4 prime nos \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "// static int[] arr = new int[100002] ; \n"}, "Heuristic": []}, {"nl": {"id": 2498, "comment": "// static int[] dp = new int[100002] ;  \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "///////////////////////////////////////////////////////////////////////////////////////// \n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "//////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "/////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "//////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "///////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "///////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "/////////////////////////////////////////// ////////////////////////////////////////////////   \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "/////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "/////////////////////////////////////////////////////////////////////////////////// \n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "///////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "///////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "//////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "///////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "///////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "///////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "// FALSE == prime\n"}, "Heuristic": []}, {"nl": {"id": 2498, "comment": "// TRUE ==  COMPOSITE\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "// FALSE== 1\n"}, "Heuristic": []}, {"nl": {"id": 2498, "comment": "// time complexity = 0(NlogLogN)== o(N)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "// gives prime nos bw 1 to N\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "///////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "/////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "///////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "// KMP ALGORITHM : TIME COMPL:O(N+M) \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "// FINDS THE OCCURENCES OF PATTERN AS A  SUBSTRING IN STRING\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "//RETURN THE ARRAYLIST OF INDEXES \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "// IF SIZE OF LIST IS ZERO MEANS PATTERN IS NOT PRESENT IN STRING\n"}, "Heuristic": []}, {"nl": {"id": 2498, "comment": "///////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "///////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "// CALCULATE TOTIENT Fn FOR ALL VALUES FROM 1 TO n\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "// TOTIENT(N) = count of nos less than n and grater than 1 whose gcd with n is 1 \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "// or n and the no  will be coprime in nature\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "//time : O(n*(log(logn)))\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "/////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "///////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "//////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "//////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "// Find sizes of two subarrays to be merged\n"}, "Heuristic": []}, {"nl": {"id": 2498, "comment": "//Copy data to temp arrays\n"}, "Heuristic": []}, {"nl": {"id": 2498, "comment": "// Initial indexes of first and second subarrays\n"}, "Heuristic": []}, {"nl": {"id": 2498, "comment": "// Initial index of merged subarry array\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "// Main function that sorts arr[l..r] using\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "// merge()\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "// Find the middle point\n"}, "Heuristic": []}, {"nl": {"id": 2498, "comment": "// Sort first and second halves\n"}, "Heuristic": []}, {"nl": {"id": 2498, "comment": "// Merge the sorted halves\n"}, "Heuristic": []}, {"nl": {"id": 2498, "comment": "// Find the middle point\n"}, "Heuristic": []}, {"nl": {"id": 2498, "comment": "// Sort first and second halves\n"}, "Heuristic": []}, {"nl": {"id": 2498, "comment": "// Merge the sorted halves\n"}, "Heuristic": []}, {"nl": {"id": 2498, "comment": "// Find sizes of two subarrays to be merged\n"}, "Heuristic": []}, {"nl": {"id": 2498, "comment": "//Copy data to temp arrays\n"}, "Heuristic": []}, {"nl": {"id": 2498, "comment": "// Initial indexes of first and second subarrays\n"}, "Heuristic": []}, {"nl": {"id": 2498, "comment": "// Initial index of merged subarry array\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "/////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "//dp[i] stores the profit with KnapSack capacity \"i\" \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "//initially profit with 0 to W KnapSack capacity is 0 \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "// iterate through all items \n"}, "Heuristic": []}, {"nl": {"id": 2498, "comment": "//traverse dp array from right to left \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "///////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "//////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "// to return max sum of any subarray in given array\n"}, "Heuristic": []}, {"nl": {"id": 2498, "comment": "/////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "///////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "/////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "//////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "//TO GENERATE ALL(DUPLICATE ALSO EXIST) PERMUTATIONS OF A STRING\n"}, "Heuristic": []}, {"nl": {"id": 2498, "comment": "// JUST CALL generatePermutation( str,  start,  end) start :inclusive ,end : exclusive \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "//Function for swapping the characters at position I with character at position j  \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "//Function for generating different permutations of the string  \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "//Prints the permutations  \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "//Swapping the string by fixing a character  \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "//Recursively calling function generatePermutation() for rest of the characters   \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "//Backtracking and swapping the characters again.  \n"}, "Heuristic": []}, {"nl": {"id": 2498, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "//////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "/////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "//////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "//time comp : o(logn) \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "//time comp : o(logn) \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "//time comp : o(logn)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "//////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "/////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "//////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "//calculates a^x mod p in logarithmic time.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "//calculates the modular multiplicative of a mod p.\n"}, "Heuristic": []}, {"nl": {"id": 2498, "comment": "//(assuming p is prime).\n"}, "Heuristic": []}, {"nl": {"id": 2498, "comment": "// calculates C(n,r) mod p (assuming p is prime).\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "// calculate total no of nos greater than or equal to key in  sorted array arr\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "// static ArrayList<Integer>[] adj ;\n"}, "Heuristic": []}, {"nl": {"id": 2498, "comment": "// static int mod= 1000000007 ;\n"}, "Heuristic": []}, {"nl": {"id": 2498, "comment": "//////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "//////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "//Scanner scn = new Scanner(System.in);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "//int[] store = {2 ,3, 5 , 7  ,11 , 13 , 17 , 19 , 23 , 29 , 31 , 37 } ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "// product of first 11 prime nos is greater than 10 ^ 12;\n"}, "Heuristic": []}, {"nl": {"id": 2498, "comment": "//sieve() ;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "//ArrayList<Integer> arr[] = new ArrayList[n] ;\n"}, "Heuristic": []}, {"nl": {"id": 2498, "comment": "// ArrayList<Integer> lista = new ArrayList<>() ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "// ArrayList<Integer> listb = new ArrayList<>() ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "//ArrayList<String> lists = new ArrayList<>() ;\n"}, "Heuristic": []}, {"nl": {"id": 2498, "comment": "//HashMap<Long,Long> map = new HashMap<>() ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "//HashMap<String,Integer> maps = new HashMap<>() ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "//HashMap<Integer,Boolean> mapb = new HashMap<>() ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "//HashMap<Point,Integer> point = new HashMap<>() ; \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "//Collections.sort(list);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2498, "comment": "//if(map.containsKey(arr[i]))map.put(arr[i] , map.get(arr[i]) +1 ) ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "//else map.put(arr[i],1) ;\n"}, "Heuristic": []}, {"nl": {"id": 2498, "comment": "// if(map.containsKey(temp))map.put(temp , map.get(temp) +1 ) ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "// else map.put(temp,1) ;\n"}, "Heuristic": []}, {"nl": {"id": 2498, "comment": "//int bit  =Integer.bitCount(n);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "// gives total no of set bits in n;\n"}, "Heuristic": []}, {"nl": {"id": 2498, "comment": "// Arrays.sort(arr, new Comparator<Pair>() {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "// \t\t\t@Override\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2498, "comment": "// \t\t\tpublic int compare(Pair a, Pair b) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "// \t\t\t\tif (a.first != b.first) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "// \t\t\t\t\treturn a.first - b.first; // for increasing order of first\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "// \t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2498, "comment": "// \t\t\t\treturn a.second - b.second ; //if first is same then sort on second basis\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "// \t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2498, "comment": "// \t\t});\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2498, "comment": "//testcase = scn.nextInt() ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "//if(map.containsKey(arr[i]))map.put(arr[i],map.get(arr[i])+1) ;else map.put(arr[i],1) ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "//if(map.containsKey(temp))map.put(temp,map.get(temp)+1) ;else map.put(temp,1) ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "//adj = new ArrayList[n] ;\n"}, "Heuristic": []}, {"nl": {"id": 2498, "comment": "// for(int i = 0; i< n; i++)\n"}, "Heuristic": []}, {"nl": {"id": 2498, "comment": "// {\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2498, "comment": "//     adj[i] = new ArrayList<Integer>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2498, "comment": "// long n = scn.nextLong() ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "//String s = scn.next() ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "//out.println(ans) ;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2498, "comment": "//out.println(ans+\" \"+in) ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "//out.println(\"Case #\" + testcases + \": \"  + ans ) ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "//out.println(\"@\") ;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2498, "comment": "// test case  end loop\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2498, "comment": "// solve fn ends\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2501, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author prakharjain\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2502, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2504, "comment": "//        t = s.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2504, "comment": "//            System.out.println(sets);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2505, "comment": "/*\n                             ;\\\n                            |' \\\n         _                  ; : ;\n        / `-.              /: : |\n       |  ,-.`-.          ,': : |\n       \\  :  `. `.       ,'-. : |\n        \\ ;    ;  `-.__,'    `-.|\n         \\ ;   ;  :::  ,::'`:.  `.\n          \\ `-. :  `    :.    `.  \\\n           \\   \\    ,   ;   ,:    (\\\n            \\   :., :.    ,'o)): ` `-.\n           ,/,' ;' ,::\"'`.`---'   `.  `-._\n         ,/  :  ; '\"      `;'          ,--`.\n        ;/   :; ;             ,:'     (   ,:)\n          ,.,:.    ; ,:.,  ,-._ `.     \\\"\"'/\n          '::'     `:'`  ,'(  \\`._____.-'\"'\n             ;,   ;  `.  `. `._`-.  \\\\\n             ;:.  ;:       `-._`-.\\  \\`.\n              '`:. :        |' `. `\\  ) \\\n      -hrr-      ` ;:       |    `--\\__,'\n                   '`      ,'\n                        ,-'\n\n\n                      free bug dog\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 2505, "comment": "// Don't place your source in a package\n"}, "Heuristic": []}, {"nl": {"id": 2505, "comment": "// Please name your class Main\n"}, "Heuristic": []}, {"nl": {"id": 2506, "comment": "//    int[] h,ne,to,wt;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//    int ct = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//    int n;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//    void graph(int n,int m){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        h = new int[n];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        Arrays.fill(h,-1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "////        sccno = new int[n];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "////        dfn = new int[n];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "////        low = new int[n];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "////        iscut = new boolean[n];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        ne = new int[2*m];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        to = new int[2*m];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        wt = new int[2*m];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        ct = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//    void add(int u,int v,int w){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        to[ct] = v;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        ne[ct] = h[u];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        wt[ct] = w;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        h[u] = ct++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//    int color[],dfn[],low[],stack[] = new int[1000000],cnt[];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//    int sccno[];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//    boolean iscut[];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//    int time = 0,top = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//    int scc_cnt = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//    // \u6709\u5411\u56fe\u7684\u5f3a\u8fde\u901a\u5206\u91cf\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//    void tarjan(int u) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        low[u] = dfn[u]= ++time;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        stack[top++] = u;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        for(int i=h[u];i!=-1;i=ne[i]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            int v = to[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            if(dfn[v]==0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                tarjan(v);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                low[u]=Math.min(low[u],low[v]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            } else if(sccno[v]==0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                // dfn>0 but sccno==0, means it's in current stack\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                low[u]=Math.min(low[u],low[v]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//        if(dfn[u]==low[u]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            sccno[u] = ++scc_cnt;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            while(stack[top-1]!=u) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                sccno[stack[top-1]] = scc_cnt;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                --top;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            --top;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//    //\u7f29\u70b9, topology sort\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//    int[] h1,to1,ne1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//    int ct1 = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//    void point(){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        for(int i=0;i<n;i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            if(dfn[i]==0) tarjan(i);//\u6709\u53ef\u80fd\u56fe\u4e0d\u8fde\u901a\uff0c\u6240\u4ee5\u8981\u5faa\u73af\u5224\u65ad\u3002\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        // \u5165\u5ea6\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        int du[] = new int[scc_cnt+1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        h1 = new int[scc_cnt+1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        Arrays.fill(h1, -1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        to1 = new int[scc_cnt*scc_cnt];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        ne1 = new int[scc_cnt*scc_cnt];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        // scc_cnt \u4e2a\u70b9\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//        for(int i=1;i<=n;i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            for(int j=h[i]; j!=-1; j=ne[j]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                int y = to[j];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                if(sccno[i] != sccno[y]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                    // add(sccno[i],sccno[y]);  // \u5efa\u65b0\u56fe\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                    to1[ct1] = sccno[y];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                    ne1[ct1] = h[sccno[i]];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                    h[sccno[i]] = ct1++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                    du[sccno[y]]++; //\u5b58\u5165\u5ea6\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//        int q[] = new int[100000];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        int end = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        int st = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        for(int i=1;i<=scc_cnt;++i){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            if(du[i]==0){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                q[end++] = i;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//        int dp[] = new int[scc_cnt+1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        while(st<end){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            int cur = q[st++];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            for(int i=h1[cur];i!=-1;i=ne1[i]){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                int y = to[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                // dp[y] += dp[cur];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                if(--du[y]==0){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                    q[end++] = y;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//    int fa[];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//    int faw[];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//    int dep = -1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//    int pt = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//    void go(int rt,int f,int dd){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//        int p = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        stk[p] = rt;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        lk[p] = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        fk[p] = f;p++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        while(p>0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            int cur = stk[p - 1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            int fp = fk[p - 1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            int ll = lk[p - 1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            p--;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//            if (ll > dep) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                dep = ll;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                pt = cur;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            for (int i = h[cur]; i != -1; i = ne[i]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                int v = to[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                if (fp == v) continue;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//                stk[p] = v;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                lk[p] = ll + wt[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                fk[p] = cur;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                p++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//    int pt1 = -1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//    void go1(int rt,int f,int dd){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//        int p = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        stk[p] = rt;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        lk[p] = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        fk[p] = f;p++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        while(p>0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            int cur = stk[p - 1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            int fp = fk[p - 1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            int ll = lk[p - 1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            p--;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//            if (ll > dep) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                dep = ll;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                pt1 = cur;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//            fa[cur] = fp;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            for (int i = h[cur]; i != -1; i = ne[i]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                int v = to[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                if (v == fp) continue;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                faw[v] = wt[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                stk[p] = v;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                lk[p] = ll + wt[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                fk[p] = cur;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                p++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//    int r = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//    int stk[] = new int[301];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//    int fk[] = new int[301];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//    int lk[] = new int[301];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//    void ddfs(int rt,int t1,int t2,int t3,int l){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//        int p = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        stk[p] = rt;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        lk[p] = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        fk[p] = t3;p++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        while(p>0){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            int cur = stk[p-1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            int fp = fk[p-1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            int ll = lk[p-1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            p--;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            r = Math.max(r,ll);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            for(int i=h[cur];i!=-1;i=ne[i]){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                int v = to[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                if(v==t1||v==t2||v==fp) continue;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                stk[p] = v;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                lk[p] = ll+wt[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                fk[p] = cur;p++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//N , M , K , a , b , c , d . \u5176\u4e2dN , M\u662f\u77e9\u9635\u7684\u884c\u5217\u6570\uff1bK \u662f\u4e0a\u9501\u7684\u623f\u95f4\u6570\u76ee\uff0c(a, b)\u662f\u8d77\u59cb\u4f4d\u7f6e\uff0c(c, d)\u662f\u51fa\u53e3\u4f4d\u7f6e\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        int n = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        int m = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        int k = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        int a = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        int b = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        int c = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        int d = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//        char cc[][] = nm(n,m);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        char keys[][] = new char[n][m];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//        char ky = 'a';\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        for(int i=0;i<k;++i){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            int x = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            int y = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            keys[x][y] = ky;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            ky++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        int f1[] = {a,b,0};\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//        int dd[][] = {{0,1},{0,-1},{1,0},{-1,0}};\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//        Queue<int[]> q =  new LinkedList<>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        q.offer(f1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        int ts = 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//        boolean vis[][][] = new boolean[n][m][33];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//        while(q.size()>0){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            int sz = q.size();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            while(sz-->0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                int cur[] = q.poll();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                vis[cur[0]][cur[1]][cur[2]] = true;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//                int x = cur[0];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                int y = cur[1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//                for (int u[] : dd) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                       int lx = x +  u[0];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                       int ly = y +  u[1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                       if (lx >= 0 && ly >= 0 && lx < n && ly < m && (cc[lx][ly] != '#')&&!vis[lx][ly][cur[2]]){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                            char ck =cc[lx][ly];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                            if(ck=='.'){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                                if(lx==c&&ly==d){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                                    println(ts); return;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                                if(keys[lx][ly]>='a'&&keys[lx][ly]<='z') {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                                    int cao = cur[2] | (1 << (keys[lx][ly] - 'a'));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                                    q.offer(new int[]{lx, ly, cao});\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                                    vis[lx][ly][cao] = true;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                                }else {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//                                    q.offer(new int[]{lx, ly, cur[2]});\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//                            }else if(ck>='A'&&ck<='Z'){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                                int g = 1<<(ck-'A');\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                                if((g&cur[2])>0){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                                    if(lx==c&&ly==d){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                                        println(ts); return;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                                    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                                    if(keys[lx][ly]>='a'&&keys[lx][ly]<='z') {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//                                        int cao = cur[2] | (1 << (keys[lx][ly] - 'a'));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                                        q.offer(new int[]{lx, ly, cao});\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                                        vis[lx][ly][cao] = true;;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                                    }else {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//                                        q.offer(new int[]{lx, ly, cur[2]});\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                                    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                       }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            ts++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        println(-1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        int n = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//        HashSet<String> st = new HashSet<>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        HashMap<String,Integer> mp = new HashMap<>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//        for(int i=0;i<n;++i){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            String s  = ns();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            int id= 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            if(mp.containsKey(s)){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                int u = mp.get(s);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                id = u;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//            if(st.contains(s)) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//                while (true) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                    String ts = s + id;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                    if (!st.contains(ts)) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                        s = ts;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                        break;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                    id++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                mp.put(s,id+1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            }else{\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                mp.put(s,1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            println(s);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            st.add(s);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        int t = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//        for(int i=0;i<t;++i){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            int n = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            long w[] = nal(n);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//            Map<Long,Long> mp = new HashMap<>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            PriorityQueue<long[]> q =new PriorityQueue<>((xx,xy)->{return Long.compare(xx[0],xy[0]);});\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//            for(int j=0;j<n;++j){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                q.offer(new long[]{w[j],0});\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                mp.put(w[j],mp.getOrDefault(w[j],0L)+1L);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//            while(q.size()>=2){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                long f[] = q.poll();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                long y1 = f[1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                if(y1==0){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                    y1 = mp.get(f[0]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                    if(y1==1){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                        mp.remove(f[0]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                    }else{\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                        mp.put(f[0],y1-1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                long g[] = q.poll();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                long y2 = g[1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                if(y2==0){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                    y2 = mp.get(g[0]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                    if(y2==1){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                        mp.remove(g[0]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                    }else{\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                        mp.put(g[0],y2-1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                q.offer(new long[]{f[0]+g[0],2L*y1*y2});\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            long r[] = q.poll();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            println(r[1]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//  int o= 9*8*7*6;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//  println(o);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//       int t = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//       for(int i=0;i<t;++i){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//           long a = nl();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//           int k  = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//           if(k==1){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//               println(a);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//               continue;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//           }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//           int f = (int)(a%10L);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//           int s = 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//           int j = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//           for(;j<30;j+=2){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//               int u = f-j;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//               if(u<0){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                   u = 10+u;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//               }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//               s = u*s;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//               s = s%10;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//               if(s==k){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                   break;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//               }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//           }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//           if(s==k) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//               println(a - j - 2);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//           }else{\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//               println(-1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//           }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//       }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//     int m = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//     h = new int[n];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//     to = new int[2*(n-1)];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//     ne = new int[2*(n-1)];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//     wt = new int[2*(n-1)];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//     for(int i=0;i<n-1;++i){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//         int u = ni()-1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//         int v = ni()-1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//     }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//  long a[] = nal(n);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        int n = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        int k = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        t1 = new long[200002];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//        int p[][] = new int[n][3];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//        for(int i=0;i<n;++i){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            p[i][0]  = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            p[i][1]  = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            p[i][2]  = i+1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        Arrays.sort(p, new Comparator<int[]>() {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            @Override\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            public int compare(int[] x, int[] y) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                if(x[1]!=y[1]){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                    return Integer.compare(x[1],y[1]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                return Integer.compare(y[0], x[0]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        });\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//        for(int i=0;i<n;++i){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            int ck = p[i][0];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//    int []h,to,ne,wt;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//    long t2[];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//    static int query(int num,int l,int r){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//        if(a[num].l>=l&&a[num].r<=r){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            return a[num].tot;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        }else{\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            int m = (a[num].l+a[num].r)>>1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            int le = num<<1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            int ri = le|1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            pushdown(num, le, ri);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            int ma = 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            int mi = 100000001;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            if(l<=m) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                int r1 = query(le, l, r);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                ma = ma*r1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2506, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            if(r>m){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                int r2 = query(ri, l, r);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//                ma = ma*r2;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//            return ma;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "//a[num].res[1] = Math.min(a[le].res[1],a[ri].res[1]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2506, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2507, "comment": "//  System.out.println(temp.size());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2508, "comment": "/**\n * Built using CHelper plug-in Actual solution is at the top\n *\n * @author MaxHeap\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2510, "comment": "// System.out.println(t+\" \"+sum);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2511, "comment": "// Input from file\n"}, "Heuristic": []}, {"nl": {"id": 2511, "comment": "// File inputFile = new File(\"JavaFile.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2511, "comment": "// File outputFile = new File(\"JavaOutputFile.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2511, "comment": "// FileReader fileReader = new FileReader(inputFile);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2511, "comment": "// Here it ends\n"}, "Heuristic": []}, {"nl": {"id": 2511, "comment": "// MyScanner sc = new MyScanner(fileReader);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2511, "comment": "// Output to console\n"}, "Heuristic": []}, {"nl": {"id": 2511, "comment": "// out = new PrintWriter(new PrintStream(outputFile)); // Output to file\n"}, "Heuristic": []}, {"nl": {"id": 2511, "comment": "// System.out.println(map);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2511, "comment": "// System.out.println(set);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2513, "comment": "//ending for each sum\n"}, "Heuristic": []}, {"nl": {"id": 2513, "comment": "//k for each sum\n"}, "Heuristic": []}, {"nl": {"id": 2514, "comment": "/**\n * @author derrick20\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2514, "comment": "/**\n                 we can actually perform the greedy scheduling as we read in the information!\n                 Because we are sweeping with an increasing right pointer, the moment a sum is\n                 found with this right endpoint, we can greedily place it into the schedule\n                 for a given sum \"bucket\", (if it's disjoint. Otherwise, we would be replacing\n                 one OR MORE previous intervals, which would only decrease or keep the same size,\n                 while reducing our future accessibility for adding intervals!)\n                 */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2516, "comment": "//\t\tBufferedReader br = new BufferedReader(new FileReader(\"F:/books/input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2516, "comment": "//\t\t\t\tSystem.out.println(i+\",\"+j);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2516, "comment": "//\t\t\t\tif(prev==1 || prev==-1) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2516, "comment": "//\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2517, "comment": "//    int[] h,ne,to,wt;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//    int ct = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//    int n;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//    void graph(int n,int m){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        h = new int[n];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        Arrays.fill(h,-1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "////        sccno = new int[n];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "////        dfn = new int[n];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "////        low = new int[n];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "////        iscut = new boolean[n];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        ne = new int[2*m];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        to = new int[2*m];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        wt = new int[2*m];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        ct = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//    void add(int u,int v,int w){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        to[ct] = v;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        ne[ct] = h[u];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        wt[ct] = w;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        h[u] = ct++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//    int color[],dfn[],low[],stack[] = new int[1000000],cnt[];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//    int sccno[];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//    boolean iscut[];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//    int time = 0,top = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//    int scc_cnt = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//    // \u6709\u5411\u56fe\u7684\u5f3a\u8fde\u901a\u5206\u91cf\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//    void tarjan(int u) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        low[u] = dfn[u]= ++time;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        stack[top++] = u;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        for(int i=h[u];i!=-1;i=ne[i]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            int v = to[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            if(dfn[v]==0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                tarjan(v);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                low[u]=Math.min(low[u],low[v]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            } else if(sccno[v]==0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                // dfn>0 but sccno==0, means it's in current stack\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                low[u]=Math.min(low[u],low[v]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//        if(dfn[u]==low[u]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            sccno[u] = ++scc_cnt;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            while(stack[top-1]!=u) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                sccno[stack[top-1]] = scc_cnt;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                --top;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            --top;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//    //\u7f29\u70b9, topology sort\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//    int[] h1,to1,ne1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//    int ct1 = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//    void point(){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        for(int i=0;i<n;i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            if(dfn[i]==0) tarjan(i);//\u6709\u53ef\u80fd\u56fe\u4e0d\u8fde\u901a\uff0c\u6240\u4ee5\u8981\u5faa\u73af\u5224\u65ad\u3002\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        // \u5165\u5ea6\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        int du[] = new int[scc_cnt+1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        h1 = new int[scc_cnt+1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        Arrays.fill(h1, -1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        to1 = new int[scc_cnt*scc_cnt];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        ne1 = new int[scc_cnt*scc_cnt];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        // scc_cnt \u4e2a\u70b9\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//        for(int i=1;i<=n;i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            for(int j=h[i]; j!=-1; j=ne[j]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                int y = to[j];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                if(sccno[i] != sccno[y]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                    // add(sccno[i],sccno[y]);  // \u5efa\u65b0\u56fe\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                    to1[ct1] = sccno[y];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                    ne1[ct1] = h[sccno[i]];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                    h[sccno[i]] = ct1++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                    du[sccno[y]]++; //\u5b58\u5165\u5ea6\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//        int q[] = new int[100000];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        int end = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        int st = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        for(int i=1;i<=scc_cnt;++i){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            if(du[i]==0){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                q[end++] = i;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//        int dp[] = new int[scc_cnt+1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        while(st<end){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            int cur = q[st++];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            for(int i=h1[cur];i!=-1;i=ne1[i]){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                int y = to[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                // dp[y] += dp[cur];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                if(--du[y]==0){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                    q[end++] = y;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//    int fa[];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//    int faw[];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//    int dep = -1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//    int pt = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//    void go(int rt,int f,int dd){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//        int p = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        stk[p] = rt;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        lk[p] = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        fk[p] = f;p++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        while(p>0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            int cur = stk[p - 1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            int fp = fk[p - 1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            int ll = lk[p - 1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            p--;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//            if (ll > dep) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                dep = ll;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                pt = cur;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            for (int i = h[cur]; i != -1; i = ne[i]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                int v = to[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                if (fp == v) continue;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//                stk[p] = v;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                lk[p] = ll + wt[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                fk[p] = cur;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                p++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//    int pt1 = -1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//    void go1(int rt,int f,int dd){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//        int p = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        stk[p] = rt;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        lk[p] = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        fk[p] = f;p++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        while(p>0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            int cur = stk[p - 1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            int fp = fk[p - 1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            int ll = lk[p - 1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            p--;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//            if (ll > dep) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                dep = ll;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                pt1 = cur;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//            fa[cur] = fp;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            for (int i = h[cur]; i != -1; i = ne[i]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                int v = to[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                if (v == fp) continue;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                faw[v] = wt[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                stk[p] = v;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                lk[p] = ll + wt[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                fk[p] = cur;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                p++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//    int r = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//    int stk[] = new int[301];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//    int fk[] = new int[301];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//    int lk[] = new int[301];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//    void ddfs(int rt,int t1,int t2,int t3,int l){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//        int p = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        stk[p] = rt;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        lk[p] = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        fk[p] = t3;p++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        while(p>0){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            int cur = stk[p-1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            int fp = fk[p-1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            int ll = lk[p-1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            p--;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            r = Math.max(r,ll);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            for(int i=h[cur];i!=-1;i=ne[i]){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                int v = to[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                if(v==t1||v==t2||v==fp) continue;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                stk[p] = v;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                lk[p] = ll+wt[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                fk[p] = cur;p++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//N , M , K , a , b , c , d . \u5176\u4e2dN , M\u662f\u77e9\u9635\u7684\u884c\u5217\u6570\uff1bK \u662f\u4e0a\u9501\u7684\u623f\u95f4\u6570\u76ee\uff0c(a, b)\u662f\u8d77\u59cb\u4f4d\u7f6e\uff0c(c, d)\u662f\u51fa\u53e3\u4f4d\u7f6e\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        int n = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        int m = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        int k = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        int a = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        int b = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        int c = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        int d = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//        char cc[][] = nm(n,m);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        char keys[][] = new char[n][m];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//        char ky = 'a';\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        for(int i=0;i<k;++i){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            int x = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            int y = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            keys[x][y] = ky;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            ky++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        int f1[] = {a,b,0};\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//        int dd[][] = {{0,1},{0,-1},{1,0},{-1,0}};\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//        Queue<int[]> q =  new LinkedList<>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        q.offer(f1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        int ts = 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//        boolean vis[][][] = new boolean[n][m][33];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//        while(q.size()>0){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            int sz = q.size();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            while(sz-->0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                int cur[] = q.poll();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                vis[cur[0]][cur[1]][cur[2]] = true;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//                int x = cur[0];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                int y = cur[1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//                for (int u[] : dd) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                       int lx = x +  u[0];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                       int ly = y +  u[1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                       if (lx >= 0 && ly >= 0 && lx < n && ly < m && (cc[lx][ly] != '#')&&!vis[lx][ly][cur[2]]){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                            char ck =cc[lx][ly];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                            if(ck=='.'){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                                if(lx==c&&ly==d){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                                    println(ts); return;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                                if(keys[lx][ly]>='a'&&keys[lx][ly]<='z') {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                                    int cao = cur[2] | (1 << (keys[lx][ly] - 'a'));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                                    q.offer(new int[]{lx, ly, cao});\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                                    vis[lx][ly][cao] = true;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                                }else {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//                                    q.offer(new int[]{lx, ly, cur[2]});\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//                            }else if(ck>='A'&&ck<='Z'){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                                int g = 1<<(ck-'A');\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                                if((g&cur[2])>0){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                                    if(lx==c&&ly==d){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                                        println(ts); return;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                                    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                                    if(keys[lx][ly]>='a'&&keys[lx][ly]<='z') {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//                                        int cao = cur[2] | (1 << (keys[lx][ly] - 'a'));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                                        q.offer(new int[]{lx, ly, cao});\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                                        vis[lx][ly][cao] = true;;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                                    }else {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//                                        q.offer(new int[]{lx, ly, cur[2]});\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                                    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                       }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            ts++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        println(-1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        int n = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//        HashSet<String> st = new HashSet<>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        HashMap<String,Integer> mp = new HashMap<>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//        for(int i=0;i<n;++i){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            String s  = ns();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            int id= 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            if(mp.containsKey(s)){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                int u = mp.get(s);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                id = u;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//            if(st.contains(s)) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//                while (true) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                    String ts = s + id;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                    if (!st.contains(ts)) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                        s = ts;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                        break;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                    id++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                mp.put(s,id+1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            }else{\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                mp.put(s,1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            println(s);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            st.add(s);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        int t = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//        for(int i=0;i<t;++i){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            int n = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            long w[] = nal(n);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//            Map<Long,Long> mp = new HashMap<>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            PriorityQueue<long[]> q =new PriorityQueue<>((xx,xy)->{return Long.compare(xx[0],xy[0]);});\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//            for(int j=0;j<n;++j){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                q.offer(new long[]{w[j],0});\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                mp.put(w[j],mp.getOrDefault(w[j],0L)+1L);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//            while(q.size()>=2){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                long f[] = q.poll();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                long y1 = f[1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                if(y1==0){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                    y1 = mp.get(f[0]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                    if(y1==1){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                        mp.remove(f[0]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                    }else{\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                        mp.put(f[0],y1-1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                long g[] = q.poll();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                long y2 = g[1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                if(y2==0){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                    y2 = mp.get(g[0]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                    if(y2==1){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                        mp.remove(g[0]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                    }else{\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                        mp.put(g[0],y2-1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                q.offer(new long[]{f[0]+g[0],2L*y1*y2});\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            long r[] = q.poll();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            println(r[1]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//  int o= 9*8*7*6;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//  println(o);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//       int t = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//       for(int i=0;i<t;++i){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//           long a = nl();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//           int k  = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//           if(k==1){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//               println(a);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//               continue;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//           }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//           int f = (int)(a%10L);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//           int s = 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//           int j = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//           for(;j<30;j+=2){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//               int u = f-j;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//               if(u<0){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                   u = 10+u;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//               }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//               s = u*s;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//               s = s%10;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//               if(s==k){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                   break;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//               }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//           }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//           if(s==k) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//               println(a - j - 2);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//           }else{\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//               println(-1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//           }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//       }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//     int m = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//     h = new int[n];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//     to = new int[2*(n-1)];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//     ne = new int[2*(n-1)];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//     wt = new int[2*(n-1)];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//     for(int i=0;i<n-1;++i){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//         int u = ni()-1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//         int v = ni()-1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//     }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//  long a[] = nal(n);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        int n = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        int k = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        t1 = new long[200002];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//        int p[][] = new int[n][3];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//        for(int i=0;i<n;++i){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            p[i][0]  = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            p[i][1]  = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            p[i][2]  = i+1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        Arrays.sort(p, new Comparator<int[]>() {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            @Override\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            public int compare(int[] x, int[] y) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                if(x[1]!=y[1]){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                    return Integer.compare(x[1],y[1]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                return Integer.compare(y[0], x[0]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        });\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//        for(int i=0;i<n;++i){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            int ck = p[i][0];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//    int []h,to,ne,wt;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//    long t2[];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//    static int query(int num,int l,int r){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//        if(a[num].l>=l&&a[num].r<=r){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            return a[num].tot;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        }else{\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            int m = (a[num].l+a[num].r)>>1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            int le = num<<1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            int ri = le|1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            pushdown(num, le, ri);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            int ma = 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            int mi = 100000001;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            if(l<=m) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                int r1 = query(le, l, r);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                ma = ma*r1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2517, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            if(r>m){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                int r2 = query(ri, l, r);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//                ma = ma*r2;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//            return ma;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "//a[num].res[1] = Math.min(a[le].res[1],a[ri].res[1]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2517, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2518, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author prakharjain\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2519, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Liavontsi Brechka\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2522, "comment": "/**\n * @author derrick20\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2522, "comment": "//        var sumMap = new HashMap<Integer, ArrayList<Pair>>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2522, "comment": "//        var sums = new ArrayList<Pair>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2522, "comment": "//                sumMap.computeIfAbsent(sum, val -> new ArrayList<>()).add(new Pair(i, j, sum));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2522, "comment": "//            System.out.println(group);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2523, "comment": "// ignore\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2523, "comment": "// [0,r)\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2523, "comment": "// [0,r)\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2524, "comment": "/* intersection */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2524, "comment": "// recover segment set\n"}, "Heuristic": []}, {"nl": {"id": 2525, "comment": "/*Author: Satyajeet Singh, Delhi Technological University*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2525, "comment": "/*********************************************Constants******************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 2525, "comment": "/****************************************Solutions Begins*****************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 2525, "comment": "/****************************************Solutions Ends**************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 2525, "comment": "/****************************************Template Begins************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 2525, "comment": "/***************************************Precision Printing**********************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 2525, "comment": "/******************************************Graph*********************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 2525, "comment": "/*********************************************PAIR********************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 2525, "comment": "/*****************************************DEBUG***********************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 2525, "comment": "/************************************MODULAR EXPONENTIATION***********************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 2525, "comment": "/********************************************GCD**********************************************************/"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2525, "comment": "/******************************************SIEVE**********************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 2525, "comment": "/********************************************End***********************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 2525, "comment": "// debug(map);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2525, "comment": "// squaring the base\n"}, "Heuristic": []}, {"nl": {"id": 2525, "comment": "// a is greater number\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2525, "comment": "// b is smaller number\n"}, "Heuristic": []}, {"nl": {"id": 2526, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2527, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Washoum\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2528, "comment": "//package com.example.programming;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2528, "comment": "//String[] strings = br.readLine().split(\" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//    int[] h,ne,to,wt;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//    int ct = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//    int n;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//    void graph(int n,int m){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        h = new int[n];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        Arrays.fill(h,-1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "////        sccno = new int[n];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "////        dfn = new int[n];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "////        low = new int[n];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "////        iscut = new boolean[n];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        ne = new int[2*m];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        to = new int[2*m];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        wt = new int[2*m];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        ct = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//    void add(int u,int v,int w){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        to[ct] = v;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        ne[ct] = h[u];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        wt[ct] = w;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        h[u] = ct++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//    int color[],dfn[],low[],stack[] = new int[1000000],cnt[];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//    int sccno[];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//    boolean iscut[];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//    int time = 0,top = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//    int scc_cnt = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//    // \u6709\u5411\u56fe\u7684\u5f3a\u8fde\u901a\u5206\u91cf\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//    void tarjan(int u) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        low[u] = dfn[u]= ++time;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        stack[top++] = u;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        for(int i=h[u];i!=-1;i=ne[i]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            int v = to[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            if(dfn[v]==0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                tarjan(v);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                low[u]=Math.min(low[u],low[v]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            } else if(sccno[v]==0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                // dfn>0 but sccno==0, means it's in current stack\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                low[u]=Math.min(low[u],low[v]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//        if(dfn[u]==low[u]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            sccno[u] = ++scc_cnt;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            while(stack[top-1]!=u) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                sccno[stack[top-1]] = scc_cnt;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                --top;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            --top;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//    //\u7f29\u70b9, topology sort\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//    int[] h1,to1,ne1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//    int ct1 = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//    void point(){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        for(int i=0;i<n;i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            if(dfn[i]==0) tarjan(i);//\u6709\u53ef\u80fd\u56fe\u4e0d\u8fde\u901a\uff0c\u6240\u4ee5\u8981\u5faa\u73af\u5224\u65ad\u3002\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        // \u5165\u5ea6\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        int du[] = new int[scc_cnt+1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        h1 = new int[scc_cnt+1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        Arrays.fill(h1, -1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        to1 = new int[scc_cnt*scc_cnt];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        ne1 = new int[scc_cnt*scc_cnt];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        // scc_cnt \u4e2a\u70b9\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//        for(int i=1;i<=n;i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            for(int j=h[i]; j!=-1; j=ne[j]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                int y = to[j];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                if(sccno[i] != sccno[y]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                    // add(sccno[i],sccno[y]);  // \u5efa\u65b0\u56fe\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                    to1[ct1] = sccno[y];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                    ne1[ct1] = h[sccno[i]];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                    h[sccno[i]] = ct1++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                    du[sccno[y]]++; //\u5b58\u5165\u5ea6\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//        int q[] = new int[100000];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        int end = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        int st = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        for(int i=1;i<=scc_cnt;++i){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            if(du[i]==0){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                q[end++] = i;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//        int dp[] = new int[scc_cnt+1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        while(st<end){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            int cur = q[st++];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            for(int i=h1[cur];i!=-1;i=ne1[i]){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                int y = to[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                // dp[y] += dp[cur];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                if(--du[y]==0){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                    q[end++] = y;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//    int fa[];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//    int faw[];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//    int dep = -1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//    int pt = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//    void go(int rt,int f,int dd){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//        int p = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        stk[p] = rt;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        lk[p] = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        fk[p] = f;p++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        while(p>0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            int cur = stk[p - 1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            int fp = fk[p - 1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            int ll = lk[p - 1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            p--;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//            if (ll > dep) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                dep = ll;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                pt = cur;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            for (int i = h[cur]; i != -1; i = ne[i]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                int v = to[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                if (fp == v) continue;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//                stk[p] = v;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                lk[p] = ll + wt[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                fk[p] = cur;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                p++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//    int pt1 = -1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//    void go1(int rt,int f,int dd){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//        int p = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        stk[p] = rt;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        lk[p] = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        fk[p] = f;p++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        while(p>0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            int cur = stk[p - 1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            int fp = fk[p - 1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            int ll = lk[p - 1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            p--;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//            if (ll > dep) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                dep = ll;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                pt1 = cur;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//            fa[cur] = fp;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            for (int i = h[cur]; i != -1; i = ne[i]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                int v = to[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                if (v == fp) continue;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                faw[v] = wt[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                stk[p] = v;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                lk[p] = ll + wt[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                fk[p] = cur;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                p++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//    int r = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//    int stk[] = new int[301];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//    int fk[] = new int[301];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//    int lk[] = new int[301];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//    void ddfs(int rt,int t1,int t2,int t3,int l){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//        int p = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        stk[p] = rt;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        lk[p] = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        fk[p] = t3;p++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        while(p>0){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            int cur = stk[p-1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            int fp = fk[p-1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            int ll = lk[p-1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            p--;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            r = Math.max(r,ll);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            for(int i=h[cur];i!=-1;i=ne[i]){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                int v = to[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                if(v==t1||v==t2||v==fp) continue;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                stk[p] = v;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                lk[p] = ll+wt[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                fk[p] = cur;p++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//N , M , K , a , b , c , d . \u5176\u4e2dN , M\u662f\u77e9\u9635\u7684\u884c\u5217\u6570\uff1bK \u662f\u4e0a\u9501\u7684\u623f\u95f4\u6570\u76ee\uff0c(a, b)\u662f\u8d77\u59cb\u4f4d\u7f6e\uff0c(c, d)\u662f\u51fa\u53e3\u4f4d\u7f6e\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        int n = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        int m = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        int k = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        int a = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        int b = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        int c = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        int d = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//        char cc[][] = nm(n,m);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        char keys[][] = new char[n][m];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//        char ky = 'a';\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        for(int i=0;i<k;++i){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            int x = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            int y = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            keys[x][y] = ky;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            ky++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        int f1[] = {a,b,0};\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//        int dd[][] = {{0,1},{0,-1},{1,0},{-1,0}};\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//        Queue<int[]> q =  new LinkedList<>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        q.offer(f1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        int ts = 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//        boolean vis[][][] = new boolean[n][m][33];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//        while(q.size()>0){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            int sz = q.size();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            while(sz-->0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                int cur[] = q.poll();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                vis[cur[0]][cur[1]][cur[2]] = true;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//                int x = cur[0];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                int y = cur[1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//                for (int u[] : dd) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                       int lx = x +  u[0];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                       int ly = y +  u[1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                       if (lx >= 0 && ly >= 0 && lx < n && ly < m && (cc[lx][ly] != '#')&&!vis[lx][ly][cur[2]]){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                            char ck =cc[lx][ly];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                            if(ck=='.'){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                                if(lx==c&&ly==d){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                                    println(ts); return;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                                if(keys[lx][ly]>='a'&&keys[lx][ly]<='z') {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                                    int cao = cur[2] | (1 << (keys[lx][ly] - 'a'));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                                    q.offer(new int[]{lx, ly, cao});\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                                    vis[lx][ly][cao] = true;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                                }else {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//                                    q.offer(new int[]{lx, ly, cur[2]});\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//                            }else if(ck>='A'&&ck<='Z'){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                                int g = 1<<(ck-'A');\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                                if((g&cur[2])>0){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                                    if(lx==c&&ly==d){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                                        println(ts); return;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                                    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                                    if(keys[lx][ly]>='a'&&keys[lx][ly]<='z') {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//                                        int cao = cur[2] | (1 << (keys[lx][ly] - 'a'));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                                        q.offer(new int[]{lx, ly, cao});\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                                        vis[lx][ly][cao] = true;;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                                    }else {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//                                        q.offer(new int[]{lx, ly, cur[2]});\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                                    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                       }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            ts++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        println(-1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        int n = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//        HashSet<String> st = new HashSet<>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        HashMap<String,Integer> mp = new HashMap<>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//        for(int i=0;i<n;++i){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            String s  = ns();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            int id= 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            if(mp.containsKey(s)){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                int u = mp.get(s);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                id = u;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//            if(st.contains(s)) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//                while (true) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                    String ts = s + id;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                    if (!st.contains(ts)) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                        s = ts;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                        break;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                    id++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                mp.put(s,id+1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            }else{\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                mp.put(s,1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            println(s);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            st.add(s);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        int t = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//        for(int i=0;i<t;++i){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            int n = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            long w[] = nal(n);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//            Map<Long,Long> mp = new HashMap<>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            PriorityQueue<long[]> q =new PriorityQueue<>((xx,xy)->{return Long.compare(xx[0],xy[0]);});\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//            for(int j=0;j<n;++j){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                q.offer(new long[]{w[j],0});\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                mp.put(w[j],mp.getOrDefault(w[j],0L)+1L);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//            while(q.size()>=2){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                long f[] = q.poll();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                long y1 = f[1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                if(y1==0){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                    y1 = mp.get(f[0]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                    if(y1==1){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                        mp.remove(f[0]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                    }else{\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                        mp.put(f[0],y1-1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                long g[] = q.poll();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                long y2 = g[1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                if(y2==0){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                    y2 = mp.get(g[0]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                    if(y2==1){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                        mp.remove(g[0]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                    }else{\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                        mp.put(g[0],y2-1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                q.offer(new long[]{f[0]+g[0],2L*y1*y2});\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            long r[] = q.poll();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            println(r[1]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//  int o= 9*8*7*6;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//  println(o);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//       int t = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//       for(int i=0;i<t;++i){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//           long a = nl();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//           int k  = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//           if(k==1){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//               println(a);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//               continue;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//           }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//           int f = (int)(a%10L);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//           int s = 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//           int j = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//           for(;j<30;j+=2){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//               int u = f-j;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//               if(u<0){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                   u = 10+u;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//               }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//               s = u*s;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//               s = s%10;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//               if(s==k){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                   break;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//               }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//           }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//           if(s==k) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//               println(a - j - 2);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//           }else{\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//               println(-1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//           }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//       }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//     int m = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//     h = new int[n];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//     to = new int[2*(n-1)];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//     ne = new int[2*(n-1)];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//     wt = new int[2*(n-1)];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//     for(int i=0;i<n-1;++i){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//         int u = ni()-1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//         int v = ni()-1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//     }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//  long a[] = nal(n);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        int n = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        int k = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        t1 = new long[200002];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//        int p[][] = new int[n][3];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//        for(int i=0;i<n;++i){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            p[i][0]  = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            p[i][1]  = ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            p[i][2]  = i+1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        Arrays.sort(p, new Comparator<int[]>() {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            @Override\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            public int compare(int[] x, int[] y) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                if(x[1]!=y[1]){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                    return Integer.compare(x[1],y[1]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                return Integer.compare(y[0], x[0]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        });\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//        for(int i=0;i<n;++i){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            int ck = p[i][0];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//    int []h,to,ne,wt;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//    long t2[];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//    static int query(int num,int l,int r){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//        if(a[num].l>=l&&a[num].r<=r){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            return a[num].tot;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        }else{\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            int m = (a[num].l+a[num].r)>>1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            int le = num<<1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            int ri = le|1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            pushdown(num, le, ri);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            int ma = 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            int mi = 100000001;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            if(l<=m) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                int r1 = query(le, l, r);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                ma = ma*r1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2529, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            if(r>m){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                int r2 = query(ri, l, r);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//                ma = ma*r2;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//            return ma;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "//a[num].res[1] = Math.min(a[le].res[1],a[ri].res[1]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2529, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2531, "comment": "/*\n    Author: Anthony Ngene\n    Created: 05/10/2020 - 14:12\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 2531, "comment": "/* Fermat's little theorem: a^(MOD-1) => 1\n    Therefore (divide both sides by a): a^(MOD-2) => a^(-1) */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2531, "comment": "// checks: 1. edge cases   2. overflow   3. possible errors (e.g 1/0, arr[out])   4. time/space complexity\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2531, "comment": "// Generated Code Below:\n"}, "Heuristic": []}, {"nl": {"id": 2531, "comment": "// zero indexed\n"}, "Heuristic": []}, {"nl": {"id": 2531, "comment": "// shuffle, then sort\n"}, "Heuristic": []}, {"nl": {"id": 2533, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author ijxjdjd\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2533, "comment": "//return a node that will do nothing while merging: ex. Infinity for min query, -Infinity for max query, 0 for sum\n"}, "Heuristic": []}, {"nl": {"id": 2533, "comment": "//change when doing different operations\n"}, "Heuristic": []}, {"nl": {"id": 2533, "comment": "//node number, cur range of node, cur range of query\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2533, "comment": "//change query, not assignment\n"}, "Heuristic": []}, {"nl": {"id": 2535, "comment": "/* spar5h */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2536, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2537, "comment": "//System.out.println(\"here\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2537, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2537, "comment": "// System.out.println(mxv);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2537, "comment": "// System.out.println(vec.get(i).l+\" \"+vec.get(i).r);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2537, "comment": "// System.out.println(\"h\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2538, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2539, "comment": "//long val;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2539, "comment": "//this.val=val;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2542, "comment": "/*\nIf you want to aim high, aim high\nDon't let that studying and grades consume you\nJust live life young\n******************************\nIf I'm the sun, you're the moon\nBecause when I go up, you go down\n*******************************\nI'm working for the day I will surpass you\nhttps://www.a2oj.com/Ladder16.html\n*/"}, "Heuristic": ["H2", "H7", "H9"]}, {"nl": {"id": 2542, "comment": "//www.a2oj.com/Ladder16.html\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2542, "comment": "//thonky wonky\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2547, "comment": "/**\n * Built using CHelper plug-in Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2548, "comment": "// Move from both ends, Time limit exceeded on test 6\n"}, "Heuristic": []}, {"nl": {"id": 2548, "comment": "// String s = \"\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2548, "comment": "// the other end of i\n"}, "Heuristic": []}, {"nl": {"id": 2548, "comment": "// i is left row, i2 is right row\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2548, "comment": "// start with (i,j), then go thru all the cell with (,i) and (,i2)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2548, "comment": "// s += j + \" \" + i + \"\\n\" + j2+ \" \" + i2 + \"\\n\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2548, "comment": "// out.print(s);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2548, "comment": "// if n is odd, there is one line in the middle\n"}, "Heuristic": []}, {"nl": {"id": 2548, "comment": "// this is the middle column\n"}, "Heuristic": []}, {"nl": {"id": 2548, "comment": "// start with (i,j), then go thru all the cell with (,i) and (,i2)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2554, "comment": "//For all remaining Nodes\n"}, "Heuristic": []}, {"nl": {"id": 2555, "comment": "/**\n * Created at 22:05 on 2019-09-14\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2559, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author null\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2560, "comment": "//\t\tSystem.out.println(arr);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2560, "comment": "//\t\t\tSystem.out.println(groups);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2560, "comment": "//\t\t\t\tSystem.out.println(j);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2560, "comment": "//\t\t\t\t\tgroups.add(arr.get(j));\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2560, "comment": "//\t\tSystem.out.println(arr);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2561, "comment": "// Warning: Printing unwanted or ill-formatted data to output will cause the test cases to fail\n"}, "Heuristic": []}, {"nl": {"id": 2563, "comment": "//****Use Integer Wrapper Class for Arrays.sort()****\n"}, "Heuristic": []}, {"nl": {"id": 2564, "comment": "/* (non-Javadoc)\n\t * @see java.lang.Object#hashCode()\n\t */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2564, "comment": "//static final long MOD = 1000000007;\n"}, "Heuristic": []}, {"nl": {"id": 2564, "comment": "//Sort an array (immune to quicksort TLE)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2564, "comment": "//Ascending order\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2566, "comment": "//package Round584;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2566, "comment": "//arr2[0]=true;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2567, "comment": "// END\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2571, "comment": "//System.out.println(a[i]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2576, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author KharYusuf\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2576, "comment": "//w.println(a[j]+\" \"+a[i]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2578, "comment": "//package practice;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2578, "comment": "//it reads the data about the specified point and divide the data about it ,it is quite fast\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2578, "comment": "//than using direct \n"}, "Heuristic": []}, {"nl": {"id": 2578, "comment": "//converts string to integer\n"}, "Heuristic": []}, {"nl": {"id": 2578, "comment": "//\tScanner sc = new Scanner(System.in);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2579, "comment": "/**\n     *\n     * @param a\n     * @param b\n     * @return\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2579, "comment": "//System.out.println(num + \" is not prime\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2579, "comment": "//System.out.println(num + \" is not prime\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2579, "comment": "//System.out.println(num + \" is prime\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2579, "comment": "//System.out.println(array[j]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2579, "comment": "//result++;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2580, "comment": "// for(int i=0;i<n;i++)\n"}, "Heuristic": []}, {"nl": {"id": 2580, "comment": "// System.out.println(\"i \"+i);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2580, "comment": "// System.out.println(\"size \"+copy.size());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2585, "comment": "/*Global Variables*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 2585, "comment": "/*Template Stuff*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 2587, "comment": "// end Scanner\n"}, "Heuristic": []}, {"nl": {"id": 2588, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author gaidash\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2592, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2594, "comment": "//        FastReader in = new FastReader(new FileInputStream(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2594, "comment": "//        PrintWriter out = new PrintWriter(new FileOutputStream(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2595, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author unknown\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2595, "comment": "// credits uwi\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2596, "commentn"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2600, "comment": "//package cf584d12;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2609, "comment": "/**\n * ******* Created by bla on 14/9/19 6:17 PM*******\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2610, "comment": "//SOLUTION BEGIN\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2610, "comment": "//Into the Hardware Mode\n"}, "Heuristic": []}, {"nl": {"id": 2610, "comment": "//SOLUTION END\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2610, "comment": "//Solution Credits: Taranpreet Singh\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2612, "comment": "/********************************************************************************************\n//********************************************************************************************\n//********************************************************************************************\n\n    static class SolutionFailedException extends Exception {\n        int code;\n\n        public SolutionFailedException(int code) {\n            this.code = code;\n        }\n    }\n\n    int [] sort(int [] a) {\n        final int SHIFT = 16, MASK = (1 << SHIFT) - 1, SIZE = (1 << SHIFT) + 1;\n        int n = a.length, ta [] = new int [n], ai [] = new int [SIZE];\n        for (int i = 0; i < n; ai[(a[i] & MASK) + 1]++, i++);\n        for (int i = 1; i < SIZE; ai[i] += ai[i - 1], i++);\n        for (int i = 0; i < n; ta[ai[a[i] & MASK]++] = a[i], i++);\n        int [] t = a; a = ta; ta = t;\n        ai = new int [SIZE];\n        for (int i = 0; i < n; ai[(a[i] >> SHIFT) + 1]++, i++);\n        for (int i = 1; i < SIZE; ai[i] += ai[i - 1], i++);\n        for (int i = 0; i < n; ta[ai[a[i] >> SHIFT]++] = a[i], i++);\n        return ta;\n    }\n\n    private static void shuffle(int[] array) {\n        Random random = new Random();\n        for (int i = array.length - 1; i > 0; i--) {\n            int index = random.nextInt(i + 1);\n            int temp = array[index];\n            array[index] = array[i];\n            array[i] = temp;\n        }\n    }\n\n    /**\n     * If searched element doesn't exist, returns index of first element which is bigger than searched value.<br>\n     * If searched element is bigger than any array element function returns first index after last element.<br>\n     * If searched element is lower than any array element function returns index of first element.<br>\n     * If there are many values equals searched value function returns first occurrence.<br>\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2612, "comment": "/**\n     * Returns index of first element which is grater than searched value.\n     * If searched element is bigger than any array element, returns first index after last element.\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2612, "comment": "// package cf1209;\n"}, "Heuristic": []}, {"nl": {"id": 2612, "comment": "//********************************************************************************************\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2612, "comment": "//********************************************************************************************\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2612, "comment": "//********************************************************************************************\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2613, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2614, "comment": "/**\n * Date: 14 Sep, 2019\n * Link: \n * \n * @author Prasad-Chaudhari\n * @linkedIn: https://www.linkedin.com/in/prasad-chaudhari-841655a6/\n * @git: https://github.com/Prasad-Chaudhari\n */"}, "Heuristic": ["H1", "H9"]}, {"nl": {"id": 2614, "comment": "//www.linkedin.com/in/prasad-chaudhari-841655a6/\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2614, "comment": "//github.com/Prasad-Chaudhari\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2614, "comment": "// TODO code application logic here\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2614, "comment": "// System.out.println(i);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2615, "comment": "/**\n * Created by Alyssa Herbst on 9/14/19 9:05 AM.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2615, "comment": "//Scanner sc = new Scanner(System.in);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2619, "comment": "/**\n * https://codeforces.com/contests\n */"}, "Heuristic": ["H2", "H9"]}, {"nl": {"id": 2619, "comment": "//codeforces.com/contests\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2619, "comment": "// true = \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2622, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Egor Kulikov (egor@egork.net)\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2624, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2624, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2626, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Asgar Javadov\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2627, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2628, "comment": "/* Do not compare for all \n           elements. Compare only  \n           when max_ending_here > 0 */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2628, "comment": "//import javafx.util.*; \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2628, "comment": "//import java.lang.*;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2628, "comment": "//  static int n;static ArrayList<Integer> arr[];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2628, "comment": "// int ans[];\n"}, "Heuristic": []}, {"nl": {"id": 2628, "comment": "//    Scanner sc=new Scanner(System.in);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2628, "comment": "//  System.out.println(arr[i]+\" \"+arr[j]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2628, "comment": "//  this.i=i;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2628, "comment": "//return (a.y)-(b.y);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2628, "comment": "// If a and m are relatively prime, then modulo inverse \n"}, "Heuristic": []}, {"nl": {"id": 2628, "comment": "// is a^(m-2) mode m \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2628, "comment": "// To compute x^y under modulo m \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2629, "comment": "/**/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 2629, "comment": "/*/\n\t\tScanner sc = new Scanner(new BufferedReader(new InputStreamReader(new FileInputStream(\"src/a.in\"))));\n\t\t/**/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2631, "comment": "/**\n     *\n     * @param set\n     * @param a\n     * @return\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2633, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author beginner1010\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2634, "comment": "//import java.lang.*;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2634, "comment": "// line length \n"}, "Heuristic": []}, {"nl": {"id": 2634, "comment": "//Functions\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2634, "comment": "//int T=sc.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2634, "comment": "//int i=0;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2634, "comment": "// End of test cases loop \n"}, "Heuristic": []}, {"nl": {"id": 2634, "comment": "//end of main function\n"}, "Heuristic": []}, {"nl": {"id": 2635, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2636, "comment": "//\tSystem.out.println(Arrays.toString(color));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2639, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2642, "comment": "// int n = Integer.parseInt(st.nextToken());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2644, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Washoum\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2645, "comment": "//it reads the data about the specified point and divide the data about it ,it is quite fast\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2645, "comment": "//than using direct \n"}, "Heuristic": []}, {"nl": {"id": 2645, "comment": "//converts string to integer\n"}, "Heuristic": []}, {"nl": {"id": 2645, "comment": "//  this.i=i;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2645, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2645, "comment": "// Corner cases \n"}, "Heuristic": []}, {"nl": {"id": 2645, "comment": "// This is checked so  \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2645, "comment": "// that we can skip \n"}, "Heuristic": []}, {"nl": {"id": 2645, "comment": "// middle five numbers \n"}, "Heuristic": []}, {"nl": {"id": 2645, "comment": "// in below loop \n"}, "Heuristic": []}, {"nl": {"id": 2645, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2646, "comment": "//System.out.println(4%-1);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2647, "comment": "// line length\n"}, "Heuristic": []}, {"nl": {"id": 2647, "comment": "// Initialize result\n"}, "Heuristic": []}, {"nl": {"id": 2647, "comment": "// While i divides n, print i and divide n\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2647, "comment": "//PrintWriter writer=new PrintWriter(System.out);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2647, "comment": "//Scanner r = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n"}, "Heuristic": []}, {"nl": {"id": 2647, "comment": "//Scanner r=new Scanner(System.in);\n"}, "Heuristic": []}, {"nl": {"id": 2650, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Jenish\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2651, "comment": "//if(flag==1)count++;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2651, "comment": "// void hold(boolean b)throws Exception{if(!b)throw new Exception(\"Hold right there, Sparky!\");}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2652, "comment": "//char[] c = br.readLine().toCharArray();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2652, "comment": "//b[i]=Integer.parseInt(st.nextToken());\n"}, "Heuristic": []}, {"nl": {"id": 2653, "comment": "//                    System.out.println(arr[j]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2653, "comment": "//                System.out.println(min+\" k\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2656, "comment": "/* Create temp arrays */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2656, "comment": "/*Copy data to temp arrays*/"}, "Heuristic": ["H7"]}, {"nl": {"id": 2656, "comment": "/* Merge the temp arrays */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2656, "comment": "/* Copy remaining elements of L[] if any */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2656, "comment": "/* Copy remaining elements of R[] if any */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2656, "comment": "/* Create temp arrays */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2656, "comment": "/*Copy data to temp arrays*/"}, "Heuristic": ["H7"]}, {"nl": {"id": 2656, "comment": "/* Merge the temp arrays */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2656, "comment": "/* Copy remaining elements of L[] if any */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2656, "comment": "/* Copy remaining elements of R[] if any */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2656, "comment": "//        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2656, "comment": "//Pass number of total nodes as parameter to the constructor\n"}, "Heuristic": []}, {"nl": {"id": 2656, "comment": "//Returns an array with the smallest prime factor for each number and primes marked as 0\n"}, "Heuristic": []}, {"nl": {"id": 2656, "comment": "//we are operating inside box\n"}, "Heuristic": []}, {"nl": {"id": 2656, "comment": "//if value does not stretches till right bound then just copy it.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2656, "comment": "//otherwise try to see if there are more matches.\n"}, "Heuristic": []}, {"nl": {"id": 2656, "comment": "// Merges two subarrays of arr[].\n"}, "Heuristic": []}, {"nl": {"id": 2656, "comment": "// First subarray is arr[l..m]\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2656, "comment": "// Second subarray is arr[m+1..r]\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2656, "comment": "// Find sizes of two subarrays to be merged\n"}, "Heuristic": []}, {"nl": {"id": 2656, "comment": "// Initial indexes of first and second subarrays\n"}, "Heuristic": []}, {"nl": {"id": 2656, "comment": "// Initial index of merged subarry array\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2656, "comment": "// Main function that sorts arr[l..r] using\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2656, "comment": "// merge()\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2656, "comment": "// Find the middle point\n"}, "Heuristic": []}, {"nl": {"id": 2656, "comment": "// Sort first and second halves\n"}, "Heuristic": []}, {"nl": {"id": 2656, "comment": "// Merge the sorted halves\n"}, "Heuristic": []}, {"nl": {"id": 2656, "comment": "// Merges two subarrays of arr[].\n"}, "Heuristic": []}, {"nl": {"id": 2656, "comment": "// First subarray is arr[l..m]\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2656, "comment": "// Second subarray is arr[m+1..r]\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2656, "comment": "// Find sizes of two subarrays to be merged\n"}, "Heuristic": []}, {"nl": {"id": 2656, "comment": "// Initial indexes of first and second subarrays\n"}, "Heuristic": []}, {"nl": {"id": 2656, "comment": "// Initial index of merged subarry array\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2656, "comment": "// Main function that sorts arr[l..r] using\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2656, "comment": "// merge()\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2656, "comment": "// Find the middle point\n"}, "Heuristic": []}, {"nl": {"id": 2656, "comment": "// Sort first and second halves\n"}, "Heuristic": []}, {"nl": {"id": 2656, "comment": "// Merge the sorted halves\n"}, "Heuristic": []}, {"nl": {"id": 2656, "comment": "// line length\n"}, "Heuristic": []}, {"nl": {"id": 2659, "comment": "/** call this method to initialize reader for InputStream */"}, "Heuristic": []}, {"nl": {"id": 2659, "comment": "/** get next word */"}, "Heuristic": []}, {"nl": {"id": 2659, "comment": "/* Create temp arrays */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2659, "comment": "/*Copy data to temp arrays*/"}, "Heuristic": ["H7"]}, {"nl": {"id": 2659, "comment": "/* Merge the temp arrays */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2659, "comment": "/* Copy remaining elements of L[] if any */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2659, "comment": "/* Copy remaining elements of R[] if any */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2659, "comment": "/* A utility function to print array of size n */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2659, "comment": "// Using built-in sort function Arrays.sort\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2659, "comment": "// Compare values according to columns\n"}, "Heuristic": []}, {"nl": {"id": 2659, "comment": "// To sort in descending order revert\n"}, "Heuristic": []}, {"nl": {"id": 2659, "comment": "// the '>' Operator\n"}, "Heuristic": []}, {"nl": {"id": 2659, "comment": "// End of function call sort().\n"}, "Heuristic": []}, {"nl": {"id": 2659, "comment": "// Using built-in sort function Arrays.sort\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2659, "comment": "// Compare values according to columns\n"}, "Heuristic": []}, {"nl": {"id": 2659, "comment": "// To sort in descending order revert\n"}, "Heuristic": []}, {"nl": {"id": 2659, "comment": "// the '>' Operator\n"}, "Heuristic": []}, {"nl": {"id": 2659, "comment": "// End of function call sort().\n"}, "Heuristic": []}, {"nl": {"id": 2659, "comment": "//TODO add check for eof if necessary\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2659, "comment": "// Merges two subarrays of arr[].\n"}, "Heuristic": []}, {"nl": {"id": 2659, "comment": "// First subarray is arr[l..m]\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2659, "comment": "// Second subarray is arr[m+1..r]\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2659, "comment": "// Find sizes of two subarrays to be merged\n"}, "Heuristic": []}, {"nl": {"id": 2659, "comment": "// Initial indexes of first and second subarrays\n"}, "Heuristic": []}, {"nl": {"id": 2659, "comment": "// Initial index of merged subarry array\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2659, "comment": "// Main function that sorts arr[l..r] using\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2659, "comment": "// merge()\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2659, "comment": "// Find the middle point\n"}, "Heuristic": []}, {"nl": {"id": 2659, "comment": "// Sort first and second halves\n"}, "Heuristic": []}, {"nl": {"id": 2659, "comment": "// Merge the sorted halves\n"}, "Heuristic": []}, {"nl": {"id": 2659, "comment": "// Driver method\n"}, "Heuristic": []}, {"nl": {"id": 2663, "comment": "//Scanner sc = new Scanner();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2663, "comment": "//<>\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2664, "comment": "/*\tArrays.sort(arr, new Comparator<Pair>() { \n\t\t\t\t@Override public int compare(Pair p1, Pair p2) \n\t\t\t\t{ \n\t\t\t\t\tif(p1.start>p2.start)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\telse if(p1.start==p2.start)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t} \n\t\t\t}); */"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 2664, "comment": "/*\t\tpublic static long lcm(long a,long b)\n\t\t\t{\n\t\t\t\treturn a * (b / gcd(a, b));\n\t\t\t}\n\t\t*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 2664, "comment": "/**/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 2664, "comment": "// Equal objects must produce the same \n"}, "Heuristic": []}, {"nl": {"id": 2664, "comment": "// hash code as long as they are equal \n"}, "Heuristic": []}, {"nl": {"id": 2664, "comment": "// Comparator to sort the pair according to second element \n"}, "Heuristic": []}, {"nl": {"id": 2664, "comment": "//\tstatic int flag1=0;\n"}, "Heuristic": []}, {"nl": {"id": 2664, "comment": "//\tstatic int[] a;\t\t\t  \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2665, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2667, "comment": "/**\n * @author Finn Lidbetter\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2669, "comment": "//for (t = in.nextInt(), tidx = 1; tidx <= t; tidx++)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2669, "comment": "//out.print(String.format(\"Case #%d: \", tidx));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2670, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author anand.oza\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2672, "comment": "//System.out.println(a[i]+\" : \"+a[j]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2672, "comment": "//System.out.println(c);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2679, "comment": "//System.out.println(paint);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2682, "comment": "/* multiply in this bit's contribution while using modulus to keep\n                     * result small */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2682, "comment": "/*\n5 6\n1 4\n2 3\n3 4\n4 5\n5 2\n3 5\n\n5 8\n1 2\n2 3\n1 3\n4 3\n3 4\n4 1\n4 5\n5 1\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 2682, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2682, "comment": "// Simple swap\n"}, "Heuristic": []}, {"nl": {"id": 2682, "comment": "// Simple swap\n"}, "Heuristic": []}, {"nl": {"id": 2683, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author prakhar897\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2683, "comment": "//out.println(arr[i]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2683, "comment": "//out.println(arr);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2684, "comment": "/*Author: Satyajeet Singh, Delhi Technological University*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2684, "comment": "/*********************************************Constants******************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 2684, "comment": "/****************************************Solutions Begins***************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 2684, "comment": "/****************************************Solutions Ends**************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 2684, "comment": "/****************************************Template Begins************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 2684, "comment": "/***************************************Precision Printing**********************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 2684, "comment": "/**************************************Bit Manipulation**************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 2684, "comment": "/******************************************Graph*********************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 2684, "comment": "/*********************************************PAIR********************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 2684, "comment": "/******************************************Long Pair*******************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 2684, "comment": "/*****************************************DEBUG***********************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 2684, "comment": "/************************************MODULAR EXPONENTIATION***********************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 2684, "comment": "/********************************************GCD**********************************************************/"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2684, "comment": "/******************************************SIEVE**********************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 2684, "comment": "/********************************************End***********************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 2684, "comment": "// squaring the base\n"}, "Heuristic": []}, {"nl": {"id": 2684, "comment": "// a is greater number\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2684, "comment": "// b is smaller number\n"}, "Heuristic": []}, {"nl": {"id": 2685, "comment": "// No sorceries shall previal. //\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2686, "comment": "/**\n * Built using CHelper plug-in Actual solution is at the top\n *\n * @author ilyakor\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2687, "comment": "/*import java.io.BufferedReader;\n        import java.io.InputStreamReader;\n        import java.util.StringTokenizer;\n\npublic class Round584_a {\n        public static void main(String[] args) throws Exception {\n                BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n                StringTokenizer st;\n        }\n}*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2692, "comment": "//        \tpw.println(\"min = \" + temp);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2692, "comment": "//        \t\t\tpw.println(\"j = \" + list.get(j));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2692, "comment": "//        \t\t\tpw.println(\"min = \" + temp);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2692, "comment": "//        \tfor (int i = 0; i < list.size(); i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2692, "comment": "//        \t\tpw.println(list.get(i) + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2692, "comment": "//        \t}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2693, "comment": "//package round584;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2693, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2694, "comment": "/**\n * @author khokharnikunj8\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2695, "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2697, "comment": "//package Round584;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2697, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2697, "comment": "//\t\tSystem.out.println(Arrays.toString(a));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2700, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2701, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author mikit\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2701, "comment": "// out.setBoolLabel(LightWriter.BoolLabel.YES_NO_FIRST_UP);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2702, "comment": "// Working program using Reader Class \n"}, "Heuristic": []}, {"nl": {"id": 2702, "comment": "// line length \n"}, "Heuristic": []}, {"nl": {"id": 2704, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2706, "comment": "//q4\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2706, "comment": "//slot all n into char array\n"}, "Heuristic": []}, {"nl": {"id": 2706, "comment": "//R, G, B cycle\n"}, "Heuristic": []}, {"nl": {"id": 2706, "comment": "//if is 'B'\n"}, "Heuristic": []}, {"nl": {"id": 2706, "comment": "//if is 'R'\n"}, "Heuristic": []}, {"nl": {"id": 2706, "comment": "//if mod 3 is 2\n"}, "Heuristic": []}, {"nl": {"id": 2706, "comment": "//if is 'G'     \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2706, "comment": "//starting from kth position, if different then add 1, and check (j-k)th position\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2706, "comment": "//R cycle\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2706, "comment": "//R cycle \n"}, "Heuristic": []}, {"nl": {"id": 2706, "comment": "//G cycle\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2706, "comment": "//B cycle\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2707, "comment": "//q4\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2707, "comment": "//slot all n into char array\n"}, "Heuristic": []}, {"nl": {"id": 2707, "comment": "//R, G, B cycle\n"}, "Heuristic": []}, {"nl": {"id": 2707, "comment": "//if is 'B'\n"}, "Heuristic": []}, {"nl": {"id": 2707, "comment": "//if is 'R'\n"}, "Heuristic": []}, {"nl": {"id": 2707, "comment": "//if mod 3 is 2\n"}, "Heuristic": []}, {"nl": {"id": 2707, "comment": "//if is 'G'     \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2707, "comment": "//starting from kth position, if different then add 1, and check (j-k)th position\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2707, "comment": "//R cycle\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2707, "comment": "//R cycle \n"}, "Heuristic": []}, {"nl": {"id": 2707, "comment": "//G cycle\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2707, "comment": "//B cycle\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2708, "comment": "/* -----: Template :----- */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2708, "comment": "//        System.out.println(Arrays.toString(dp));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2708, "comment": "//            System.out.println(Arrays.toString(dp));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2709, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author pandusonu\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2709, "comment": "// out.print(\"Case #\" + testNumber + \": \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2710, "comment": "/* static class descend implements Comparator<pair1> {\n        public int compare(pair1 o1, pair1 o2) {\n            if (o1.pop != o2.pop)\n                return (int) (o1.pop - o2.pop);\n            else\n                return o1.in - o2.in;\n        }\n    }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2711, "comment": "/**\n * @author Don Li\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2712, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author gaidash\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2712, "comment": "//        for (int p : a) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2712, "comment": "//            System.out.println(\"Segment for pixel \" + p + \" = \" + \"(\" + left[p] + \" , \" + right[p] + \")\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2712, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2713, "comment": "/*for (int i = 2; i <= n; i++) {\n\t\t\tfor (int j = 1; j <= i; j++) {\n\t\t\t\tSystem.out.print(dp2[i][j] + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}*/"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 2717, "comment": "//package codeforces;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2718, "comment": "/// break ; \n"}, "Heuristic": []}, {"nl": {"id": 2718, "comment": "/// break ; \n"}, "Heuristic": []}, {"nl": {"id": 2719, "comment": "/*static long gcd(long a,long b)\n    {\n    if(b==0)\n    return a;\n    else\n    return gcd(b,a%b);\n    }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2719, "comment": "/*static boolean valid(int i,int j)\n    {\n    if(i<4 && i>=0 && j<4 && j>=0)\n    return true;\n    else\n    return false;\n    }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2723, "comment": "/*Author LAVLESH*/"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 2725, "comment": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 2725, "comment": "/**\n *\n * @author Sourav Kumar Paul\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2725, "comment": "//package NumberTheory;\n"}, "Heuristic": []}, {"nl": {"id": 2725, "comment": "//int gcd = gcd(924,923);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2725, "comment": "//System.out.println(gcd);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2725, "comment": "// System.out.println(gcd(923,461));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2728, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2730, "comment": "//End if\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2730, "comment": "//End main()\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2730, "comment": "//End class\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2732, "comment": "/**\n * Created by jizhe on 2016/1/29.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2740, "comment": "//(new FileReader(\"input.in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2740, "comment": "//PrintWriter pw = new PrintWriter(\"output.out\", \"UTF-8\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2743, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Nipuna Samarasekara\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2743, "comment": "/////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2743, "comment": "//            if (isEOF && ret < 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2743, "comment": "//                throw new InputMismatchException();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2743, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2743, "comment": "//            isEOF = ret == -1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2745, "comment": "// Set up scanner\n"}, "Heuristic": []}, {"nl": {"id": 2745, "comment": "// System.out.println(\"Enter n\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2745, "comment": "// Odd number easy\n"}, "Heuristic": []}, {"nl": {"id": 2745, "comment": "// Even number is a bit harder\n"}, "Heuristic": []}, {"nl": {"id": 2746, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author walker\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2747, "comment": "/**\n * Created by jizhe on 2016/1/29.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2752, "comment": "/**\n * @author Roman Elizarov\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2752, "comment": "// read input\n"}, "Heuristic": []}, {"nl": {"id": 2752, "comment": "// solve\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2752, "comment": "// write result\n"}, "Heuristic": []}, {"nl": {"id": 2753, "comment": "//inputs\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2754, "comment": "//BufferedReader in = new BufferedReader(new FileReader(\"lcm.in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2755, "comment": "/** Oct 21, 2012 **/"}, "Heuristic": []}, {"nl": {"id": 2755, "comment": "/**\n * @author DOAN Minh Quy\n * @email mquy.doan@gmail.com\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2755, "comment": "/**\n     * @param args\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2755, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2755, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2758, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Nasko\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2759, "comment": "///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2759, "comment": "////////////////////////////////////////////  SOLUTION ///////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2759, "comment": "///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2759, "comment": "//      main();   \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2759, "comment": "///input\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2759, "comment": "//void main\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2759, "comment": "//class main\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2761, "comment": "// br = new BufferedReader(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2761, "comment": "// out = new PrintWriter(new FileWriter(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2764, "comment": "/**\n * 2013.07.27 No.1 235A LCM Challenge\n * \u6570\u8bba n%2 == 0?     n%3 == 0?\n * @author Administrator * \n */"}, "Heuristic": ["H2", "H12"]}, {"nl": {"id": 2769, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author BSRK Aditya (bsrkaditya@gmail.com)\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2771, "comment": "// int n = Integer.parseInt(bf.readLine());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2771, "comment": "// int[] a = new int[n]; for(int i=0; i<n; i++) a[i] = Integer.parseInt(st.nextToken());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2776, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2776, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2777, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2779, "comment": "//      System.out.println(a+\" \"+b);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2782, "comment": "/**\n * Created by carolineshi on 3/30/17.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2782, "comment": "//f <= s\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2784, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2785, "comment": "//package A;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2791, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2792, "comment": "//david alexander\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2794, "comment": "/*\n(7 10)  1 2 3\n(3, 7)\n(1, 3)\n\n(3, 7)\n(3, 4)\n(3, 1)\n(2, 1)\n(1, 1)\n1\n\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 2794, "comment": "/*\n                    (4, 17) 4 + 4\n                    (1, 4)\n\n                    (4, 16) 4\n                    (4, 12)\n                    (4, 8)\n                    (4, 4)\n\n                */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2796, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2798, "comment": "//System.out.println(a+\" \"+b);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2801, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author John Martin\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2802, "comment": "/**\n     * @param args\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2802, "comment": "//package Demo;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2802, "comment": "//import java.io.Console;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2802, "comment": "//import javax.swing.plaf.basic.BasicInternalFrameTitlePane.MaximizeAction;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2802, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2803, "comment": "/************************ SOLUTION STARTS HERE ***********************/"}, "Heuristic": []}, {"nl": {"id": 2803, "comment": "/************************ SOLUTION ENDS HERE ************************/"}, "Heuristic": []}, {"nl": {"id": 2803, "comment": "/************************ TEMPLATE STARTS HERE *********************/"}, "Heuristic": []}, {"nl": {"id": 2803, "comment": "/************************ TEMPLATE ENDS HERE ************************/"}, "Heuristic": []}, {"nl": {"id": 2807, "comment": "/* take the min and the remainder as the previous min. */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2809, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2811, "comment": "/*\n2\n4 17\n7 987654321\noutputCopy\n8\n141093479\n*/"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 2812, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Rb_wahid\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2813, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2814, "comment": "/*package whatever //do not write package name here */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2814, "comment": "//do not write package name here */\n"}, "Heuristic": []}, {"nl": {"id": 2815, "comment": "/*Talent is something you make bloom , instinct is something you polish*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2815, "comment": "//toString\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2815, "comment": "// line length\n"}, "Heuristic": []}, {"nl": {"id": 2816, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2818, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2819, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author John Martin\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2821, "comment": "/*\nbr = new BufferedReader(new FileReader(\"input.txt\"));\npw = new PrintWriter(new BufferedWriter(new FileWriter(\"output.txt\")));\nbr = new BufferedReader(new InputStreamReader(System.in));\npw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2821, "comment": "/* NOTEBOOK CODE */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2823, "comment": "// @author Sanzhar\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2823, "comment": "//in = new BufferedReader(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2823, "comment": "//out = new PrintWriter(new FileWriter(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2829, "comment": "/////////// TEMPLATE FROM HERE /////////////////\n"}, "Heuristic": []}, {"nl": {"id": 2832, "comment": "/**\n * Created by Egor on 24/10/14.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2836, "comment": "/**\n *\n * @author \u0442\u0430\u043d\u044f\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2836, "comment": "/**\n     * @param args the command line arguments\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2839, "comment": "//int n = Integer.parseInt(in.readLine());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2839, "comment": "//int n = Integer.parseInt(spl[0]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2839, "comment": "//String[] spl = in.readLine().split(\" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2841, "comment": "// solution\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2843, "comment": "/* package whatever; // don't place package name! */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2843, "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2843, "comment": "// don't place package name! */\n"}, "Heuristic": []}, {"nl": {"id": 2844, "comment": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 2844, "comment": "/**\n *\n * @author Sagimbekov_MA\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2845, "comment": "//base case\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2846, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2846, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2851, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2851, "comment": "//a\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2851, "comment": "//b\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2852, "comment": "/* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2854, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2855, "comment": "// int n = Integer.parseInt(in.readLine());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2858, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2861, "comment": "//Scanner in = new Scanner(new File(\"practice.in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2865, "comment": "// Set up scanner\n"}, "Heuristic": []}, {"nl": {"id": 2865, "comment": "// System.out.println(\"Enter l\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2865, "comment": "// System.out.println(\"Enter r\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2878, "comment": "// main\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2878, "comment": "// makes the reader and writer\n"}, "Heuristic": []}, {"nl": {"id": 2878, "comment": "// read in \n"}, "Heuristic": []}, {"nl": {"id": 2878, "comment": "// write\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2878, "comment": "// cleanup\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2885, "comment": "//BufferedReader buf = new BufferedReader(new InputStreamReader(System.in));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2885, "comment": "//  StringTokenizer st=new StringTokenizer(buf.readLine());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2886, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2891, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2892, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2893, "comment": "/* package whatever; // don't place package name! */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2893, "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2893, "comment": "// don't place package name! */\n"}, "Heuristic": []}, {"nl": {"id": 2896, "comment": "// streams\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2896, "comment": "// out = new BufferedWriter(new OutputStreamWriter(System.out));\n"}, "Heuristic": []}, {"nl": {"id": 2902, "comment": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 2902, "comment": "/**\n *\n * @author RezaM\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2906, "comment": "/**\n * Created by misanand on 9/20/14.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2908, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Nipuna Samarasekara\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2908, "comment": "/////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2908, "comment": "//            if (isEOF && ret < 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2908, "comment": "//                throw new InputMismatchException();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2908, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2908, "comment": "//            isEOF = ret == -1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2911, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Anirudh Rayabharam (anirudhrb@yandex.com)\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2912, "comment": "/**\n * TODO: describe\n *\n * @author keks\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 2915, "comment": "//\u017c\ufffd\ufffd\ufffd4\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2915, "comment": "//\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2920, "comment": "// main\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2920, "comment": "// makes the reader and writer\n"}, "Heuristic": []}, {"nl": {"id": 2920, "comment": "// read in N\n"}, "Heuristic": []}, {"nl": {"id": 2920, "comment": "// write to out\n"}, "Heuristic": []}, {"nl": {"id": 2920, "comment": "// cleanup\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2921, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2923, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author bdepwgjqet\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2926, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2927, "comment": "//StringTokenizer st=new StringTokenizer(bf.readLine());\n"}, "Heuristic": []}, {"nl": {"id": 2928, "comment": "//ponemos el while con su condicion en este caso si bandera \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2928, "comment": "//igual si el divisor llego al numero q se capturo este sera primo \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2929, "comment": "/* package whatever; // don't place package name! */"}, "Heuristic": ["H7"]}, {"nl": {"id": 2929, "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2929, "comment": "// don't place package name! */\n"}, "Heuristic": []}, {"nl": {"id": 2931, "comment": "// author @mdazmat9\n"}, "Heuristic": []}, {"nl": {"id": 2933, "comment": "/**\n *   Author: Ridam Nagar\n *   Date: 27 February 2019\n *   Time: 01:17:36\n**/"}, "Heuristic": ["H2"]}, {"nl": {"id": 2933, "comment": "/* \npackage codechef; // don't place package name! */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2933, "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 2933, "comment": "// don't place package name! */\n"}, "Heuristic": []}, {"nl": {"id": 2937, "comment": "//long t1 = System.currentTimeMillis();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2937, "comment": "// Standard IO\n"}, "Heuristic": []}, {"nl": {"id": 2937, "comment": "//out.println(\"time(s): \" + (1.0*(System.currentTimeMillis()-t1))/1000.0);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2937, "comment": "// File IO\n"}, "Heuristic": []}, {"nl": {"id": 2937, "comment": "//fout.println(\"time(s): \" + (1.0*(System.currentTimeMillis()-t1))/1000.0);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2937, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2937, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2938, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 2943, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2944, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author George Marcus\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2946, "comment": "//BufferedReader in = new BufferedReader(new FileReader(\"200C.in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2947, "comment": "//                b = a;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2947, "comment": "//        System.out.println(c);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2954, "comment": "// br = new BufferedReader(new FileReader(new File(\"taskA.in\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2954, "comment": "// out = new PrintWriter(\"taskA.out\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2957, "comment": "//package CF;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 2957, "comment": "// Div One\n"}, "Heuristic": []}, {"nl": {"id": 2962, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Niyaz Nigmatullin\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2962, "comment": "//            if (isEOF && ret < 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2962, "comment": "//                throw new InputMismatchException();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2962, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2962, "comment": "//            isEOF = ret == -1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2963, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 2964, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2966, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author dudkamaster\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2967, "comment": "//in = new BufferedReader(new FileReader(\"a.in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2967, "comment": "//out = new PrintWriter(new FileWriter(\"a.out\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2968, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author sheep\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2969, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Alex\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2969, "comment": "//        while(true) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2969, "comment": "//            if (b <= 1){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2969, "comment": "//                i += a;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2969, "comment": "//                out.print(i);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2969, "comment": "//                return;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2969, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2969, "comment": "//            i++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2969, "comment": "//            long aa = Math.max(a, b);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2969, "comment": "//            long bb = Math.min(a, b);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2969, "comment": "//            aa -= bb;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2969, "comment": "//            a = aa;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2969, "comment": "//            b = bb;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2969, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2969, "comment": "//        out.print(i);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 2971, "comment": "// a > b\n"}, "Heuristic": []}, {"nl": {"id": 2980, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2987, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author KNIGHT0X300\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 2987, "comment": "//To change body of catch statement use File | Settings | File Templates.\n"}, "Heuristic": []}, {"nl": {"id": 2987, "comment": "// do the sum\n"}, "Heuristic": []}, {"nl": {"id": 2989, "comment": "/// break ; \n"}, "Heuristic": []}, {"nl": {"id": 2989, "comment": "/// break ; \n"}, "Heuristic": []}, {"nl": {"id": 2992, "comment": "/**\n *\n * @author Antonio \"Teo\" Alurralde\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3008, "comment": "/**\n * @author Son-Huy TRAN\n * \n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3008, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3008, "comment": "// begin reading inputs\n"}, "Heuristic": []}, {"nl": {"id": 3008, "comment": "// reading inputs\n"}, "Heuristic": []}, {"nl": {"id": 3008, "comment": "// end reading inputs\n"}, "Heuristic": []}, {"nl": {"id": 3009, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3009, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3016, "comment": "//\tstatic StreamTokenizer in; static int next() throws Exception {in.nextToken(); return (int) in.nval;}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3016, "comment": "//\tstatic BufferedReader in;\n"}, "Heuristic": []}, {"nl": {"id": 3016, "comment": "//\t\tin = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n"}, "Heuristic": []}, {"nl": {"id": 3016, "comment": "//\t\tin = new BufferedReader(new InputStreamReader(System.in));\n"}, "Heuristic": []}, {"nl": {"id": 3018, "comment": "//package arbuz;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3021, "comment": "/**\n * Write a description of class lukno here.\n * \n * @author (your name) \n * @version (a version number or a date)\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3028, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3028, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3030, "comment": "//Scanner reader = new Scanner(new File(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3030, "comment": "//PrintWriter writer = new PrintWriter(\"output.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3035, "comment": "/**\n * Write a description of class lukno here.\n * \n * @author (your name) \n * @version (a version number or a date)\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3039, "comment": "/**\n * Created with IntelliJ IDEA.\n * User: \u0421\u0430\u0448\u0430\n * Date: 08.08.12\n * Time: 14:12\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3049, "comment": "/**\n * Built using CHelper plug-in Actual solution is at the top\n *\n * @author @Ziklon\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3052, "comment": "// tar \u306e\u65b9\u304c\u6570\u5b57\u304c\u5927\u304d\u3044\u304b\u3069\u3046\u304b\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3052, "comment": "//first\u3067\u6607\u9806\u306b\u30bd\u30fc\u30c8\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3052, "comment": "//return (first == p.first ? second - p.second : first - p.first) * -1; //first\u3067\u964d\u9806\u306b\u30bd\u30fc\u30c8\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 3052, "comment": "//return second == p.second ? first - p.first : second - p.second;//second\u3067\u6607\u9806\u306b\u30bd\u30fc\u30c8\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 3052, "comment": "//return (second == p.second ? first - p.first : second - p.second)*-1;//second\u3067\u964d\u9806\u306b\u30bd\u30fc\u30c8\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 3052, "comment": "//\u7e70\u308a\u8fd4\u3057\u4e8c\u4e57\u6cd5\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3052, "comment": "//fac, inv, finv\u30c6\u30fc\u30d6\u30eb\u306e\u521d\u671f\u5316\u3001\u3053\u308c\u4f7f\u3046\u5834\u5408\u306finitComb()\u3067\u521d\u671f\u5316\u5fc5\u8981\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3052, "comment": "//nCk % mod\n"}, "Heuristic": []}, {"nl": {"id": 3052, "comment": "//n! % mod\n"}, "Heuristic": []}, {"nl": {"id": 3052, "comment": "//(n!)^-1 with % mod\n"}, "Heuristic": []}, {"nl": {"id": 3052, "comment": "// (high + low) / 2\n"}, "Heuristic": []}, {"nl": {"id": 3052, "comment": "//(low + high) / 2 (\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u5bfe\u7b56)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3052, "comment": "//n,m\u306e\u6700\u5927\u516c\u7d04\u6570\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3052, "comment": "//3\u8981\u7d20\u306e\u30bd\u30fc\u30c8\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3052, "comment": "//c -> int\u306b\u5909\u63db\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3052, "comment": "// int -> char\u306b\u5909\u63db\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3053, "comment": "/////////////////// CODED++ BY++ ++ ++ ++ BHAVYA++ ARORA++ ++ ++ ++ FROM++ JAYPEE++ INSTITUTE++ OF++ INFORMATION++ TECHNOLOGY++ ////////////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3053, "comment": "///////////////////////// Make it work, make it right, make it fast. Make it work, make it right, make it fast. Make it work, make it right, make it fast. Make it work, make it right, make it fast. /////////////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3053, "comment": "//---------- I/O Template ----------\n"}, "Heuristic": []}, {"nl": {"id": 3053, "comment": "//no input \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3053, "comment": "//////////////////////////////////// template finished //////////////////////////////////////\n"}, "Heuristic": []}, {"nl": {"id": 3056, "comment": "/**\n     * @param args the command line arguments\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3057, "comment": "//Author: Patel Rag\n"}, "Heuristic": []}, {"nl": {"id": 3057, "comment": "//Java version \"1.8.0_211\"\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3057, "comment": "//binary Modular exponentiation\n"}, "Heuristic": []}, {"nl": {"id": 3057, "comment": "// Pair class\n"}, "Heuristic": []}, {"nl": {"id": 3057, "comment": "// first field of a Pair\n"}, "Heuristic": []}, {"nl": {"id": 3057, "comment": "// second field of a Pair\n"}, "Heuristic": []}, {"nl": {"id": 3057, "comment": "//Binary Indexed Tree aka Fenwick Tree\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3058, "comment": "//System.out.println(h+\" \"+f+\" \"+(h-f));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3062, "comment": "/* package whatever; // don't place package name! */"}, "Heuristic": ["H7"]}, {"nl": {"id": 3062, "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3062, "comment": "// don't place package name! */\n"}, "Heuristic": []}, {"nl": {"id": 3062, "comment": "// your code goes here\n"}, "Heuristic": []}, {"nl": {"id": 3065, "comment": "/**\n     * @param args\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3065, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3067, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3067, "comment": "//package Codeforces72;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3068, "comment": "/****************************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 3068, "comment": "/****************************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 3069, "comment": "/*\n    for (int i = 0; i <= n; i++) {\n      for (int j = 0; j <= n - i; j++) {\n        best = Math.max(best, i + j + Math.min(n - i, n - j));\n      }\n    }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3069, "comment": "//    in = new BufferedReader(new FileReader(FILE_IN));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3069, "comment": "//    out = new PrintWriter(FILE_OUT);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3069, "comment": "// TODO: type your code here\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3072, "comment": "//input = new BufferedReader(new FileReader(fin + \".txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3072, "comment": "//output = new PrintWriter(new FileWriter(fout + \".txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3073, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3080, "comment": "/**\n * Created by IntelliJ IDEA.\n * User: piyushd\n * Date: 4/13/11\n * Time: 8:07 PM\n * To change this template use File | Settings | File Templates.\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3087, "comment": "/////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3088, "comment": "//\u041a\u043e\u043b-\u0432\u043e \u0434\u0435\u0441\u044f\u0442\u0438\u0447\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b (\u0432\u043a\u043b\u044e\u0447\u0430\u044f 0), \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u0432 \u0441\u0435\u0431\u0435 \u0446\u0438\u0444\u0440\u044b \u043e\u0442 0 \u0434\u043e k-1\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3088, "comment": "//\u041f\u0438\u0448\u0435\u0442\u0441\u044f \u0441 do{}while(nextPermutation(a));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3088, "comment": "//One-dimensional array     \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3088, "comment": "//Two-dimensional array\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3088, "comment": "//Three-dimensional array\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3089, "comment": "/**\n * Created by IntelliJ IDEA.\n * User: Administrator\n * Date: 13.05.11\n * Time: 23:21\n * To change this template use File | Settings | File Templates.\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3093, "comment": "/**\n * @author abashkin\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3101, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3101, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3105, "comment": "/**\n\t * @param args\n\t * @throws IOException \n\t * @throws NumberFormatException \n\t */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3109, "comment": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3109, "comment": "/**\n *\n * @author Saransh\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3109, "comment": "/**\n     * @param args the command line arguments\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3109, "comment": "// TODO code application logic here\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3109, "comment": "//BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3111, "comment": "/**\n *\n * @author Mostafa\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3112, "comment": "/**\n * May 13, 2011\u00a0\n * @author parisel\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3114, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3114, "comment": "//                double topSpeed = (Math.sqrt(2. * a * d) + w) / 2;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3114, "comment": "//                minTime = (topSpeed / a) + (topSpeed - w) / a + getTimeAfterSign(w, v, l - d, a);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3116, "comment": "/*out = new PrintWriter(new FileWriter(\"output.txt\"));\n        in =new StreamTokenizer(new BufferedReader(new FileReader(\"input.txt\")));*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3117, "comment": "//v1 -> v2 mennyi utat tesz meg\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3117, "comment": "//v1 -> v2 mennyi id\u0151\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3117, "comment": "//h\u00e1tral\u00e9v\u0151 \u00fat\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3117, "comment": "//eltelt id\u0151\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3117, "comment": "//nincs korl\u00e1toz\u00e1s\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3117, "comment": "//gyorsul\u00f3 szakaszok a korl\u00e1toz\u00e1sig\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3117, "comment": "//gyorsul\u00f3 szakaszok a korl\u00e1toz\u00e1st\u00f3l\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3117, "comment": "//nem gyorsul\u00f3 szakaszok ideje\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3118, "comment": "// \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd v. \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3118, "comment": "// \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3118, "comment": "// \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd, \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3118, "comment": "// \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3118, "comment": "// \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd v. \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3118, "comment": "// \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd, \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd - \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3118, "comment": "// \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd - \ufffd\ufffd\ufffd\ufffd\ufffd, \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3118, "comment": "// \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3120, "comment": "//System.out.printf(\"timeToDelaySpeed=%.5f, timeToDelay=%.5f\\n\", timeToDelaySpeed, timeToDelay);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3120, "comment": "// we won't reach delaySpeed before delay marker\n"}, "Heuristic": []}, {"nl": {"id": 3120, "comment": "// 2 cases: we don't reach max by time we reach end\n"}, "Heuristic": []}, {"nl": {"id": 3120, "comment": "// we do reach max, then travel at max\n"}, "Heuristic": []}, {"nl": {"id": 3120, "comment": "// binary search to find best velocity to stop acceleration in beginning\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3120, "comment": "// okay, we can go faster\n"}, "Heuristic": []}, {"nl": {"id": 3120, "comment": "// now we have delayDist to go, and we are at delaySpeed\n"}, "Heuristic": []}, {"nl": {"id": 3120, "comment": "// [0] = time in h, [1] = dist travelled, in km\n"}, "Heuristic": []}, {"nl": {"id": 3120, "comment": "// input units are in km/h^2, km/h, km/h\n"}, "Heuristic": []}, {"nl": {"id": 3120, "comment": "// returns time it takes to travel dist, with given inputs\n"}, "Heuristic": []}, {"nl": {"id": 3121, "comment": "// )(()()))(())))\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3124, "comment": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3124, "comment": "/**\n *\n * @author madis\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3125, "comment": "//out.println(tSecond);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3125, "comment": "//out.println(Vstart);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3125, "comment": "//in = new BufferedReader(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3125, "comment": "//out = new PrintWriter(new FileWriter(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3127, "comment": "/**\n * @author Egor Kulikov (egor@egork.net)\n *         Created on 14.03.2010\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3128, "comment": "//out.println(x + \" \" + y + \" \" + z);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3128, "comment": "//OX\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3128, "comment": "//out.println(\"l: \" + L + \", r: \" + R + \", t: \" + t + \", v: \" + V);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3128, "comment": "//XY\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3128, "comment": "//out.println(\"t: \" + (T - t));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3128, "comment": "//YD\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3128, "comment": "//out.println(\"l: \" + L + \", r: \" + R + \", t: \" + t + \", v: \" + V);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3128, "comment": "//DZ\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3128, "comment": "//out.println(\"l: \" + L + \", r: \" + R + \", t: \" + t + \", v: \" + V);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3128, "comment": "//ZL\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3130, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3132, "comment": "//System.out.println(t1 + \" \" + t2 + \" \" + t3 + \" \" + t4 + \" \" + t5);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3134, "comment": "// two cases: I reach the delayPoint at a speed higher than the delaySpeed, or I don't.\n"}, "Heuristic": []}, {"nl": {"id": 3134, "comment": "// I can reach the delayPoint without being delayed\n"}, "Heuristic": []}, {"nl": {"id": 3134, "comment": "// binary search to find best velocity to stop acceleration in beginning\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3134, "comment": "// okay, we can go faster\n"}, "Heuristic": []}, {"nl": {"id": 3134, "comment": "// now we have delayDist to go, and we are at delaySpeed\n"}, "Heuristic": []}, {"nl": {"id": 3134, "comment": "// [0] = time in h, [1] = dist travelled, in km\n"}, "Heuristic": []}, {"nl": {"id": 3134, "comment": "// input units are in km/h^2, km/h, km/h\n"}, "Heuristic": []}, {"nl": {"id": 3134, "comment": "// returns time it takes to travel dist, with given inputs\n"}, "Heuristic": []}, {"nl": {"id": 3136, "comment": "//The PandaScanner class, for Panda fast scanning!\n"}, "Heuristic": []}, {"nl": {"id": 3137, "comment": "//\twriter.println(time_max*a < w); writer.println(v <= (w+a*time_d)/2); writer.println(w < v); \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3137, "comment": "//\t\tdouble t = (Math.sqrt(limit*limit+2*a*(l-d))-limit)/a;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3137, "comment": "//\t\twriter.println(\"t1 = \" + t1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3137, "comment": "//\t\twriter.println(\"dist1 = \" + dist1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3137, "comment": "//\t\twriter.println(\"t3 = \" + t3);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3137, "comment": "//\t\twriter.println(\"dist2 = \" + dist2);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3137, "comment": "//\t\twriter.println(\"t4 = \" + t4);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3144, "comment": "/*\"d\"*/"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 3145, "comment": "// okay. just go\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3145, "comment": "// after that, just go.\n"}, "Heuristic": []}, {"nl": {"id": 3147, "comment": "/**\n\t *  s \u304b\u3089 v \u306b\u9054\u3059\u308b\u307e\u3067\u306e\u6642\u9593\u3068\u3001\u305d\u306e\u9593\u306e\u8d70\u884c\u8ddd\u96e2\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3147, "comment": "/**\n\t * \u521d\u901f s\u3001\u52a0\u901fa\u3001 \u6700\u9ad8\u901f\u5ea6 v \u3067\u8ddd\u96e2 l \u3092\u8d70\u308b\u306e\u306b\u304b\u304b\u308b\u6642\u9593\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3147, "comment": "// \u8ddd\u96e2 d \u307e\u3067\u306b\u901f\u5ea6 w \u306b\u9054\u3057\u306a\u3044\u5834\u5408\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3147, "comment": "// \u305d\u308c\u4ee5\u5916\u306f\u3001d \u306f\u901f\u5ea6w\u3067\u901a\u904e\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3147, "comment": "// d \u307e\u3067\u306b\u6700\u9ad8\u901f\u5ea6 v \u306b\u9054\u3059\u308b\u5834\u5408\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3147, "comment": "// d \u307e\u3067\u306b\u6700\u9ad8\u901f\u5ea6\u306b\u9054\u3057\u306a\u3044\u5834\u5408\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3147, "comment": "//\t\t\tSystem.setOut(new PrintStream(new FileOutputStream(packageName + \"output.txt\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3150, "comment": "// System.err.println(t1 + \" \" + left + \" \" + timeToV + \" \" + distToV\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3150, "comment": "// + \" \" + d1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3150, "comment": "// System.err.println(t2 + \" \" + (a * t2 * t2 * .5 + w * t2));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3151, "comment": "/*\n\tpublic double T()\n\t{\n\t\tdouble t1, s1, tx, sx, vx, ty, vy, sz, tz;\n\t\tt1 = vmax / a;\n\t\ts1 = a*t1*t1 / 2.0;\n\t\t\n\t\tvx = Math.sqrt((2.0*a*d + w*w)/2.0);\n\t\ttx = vx / a;\n\t\t\n\t\tif(s1 < d)\n\t\t{\n\t\t\t//reaches vmax\n\t\t\tif(vx < vmax)\n\t\t\t{\n\t\t\t\t//stops at vx\n\t\t\t\treturn tx + (vx - w)/a + T2(w);\n\t\t\t}\n\t\t\telse //vx >= vmax\n\t\t\t{\n\t\t\t\t//stops at vmax\n\t\t\t\tif(w > vmax)\n\t\t\t\t{\n\t\t\t\t\treturn t1 + (d - s1)/vmax + T2(vmax);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttz = (vmax - w)/a;\n\t\t\t\t\tsz = ((vmax + w)/2.0) * tz;\n\t\t\t\t\t\n\t\t\t\t\treturn t1 + (d-sz-s1)/vmax + tz + T2(w);\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse //s1 >= d\n\t\t{\n\t\t\t//never reaches vmax\n\t\t\tvy = Math.sqrt(2.0*d*a);\n\t\t\tty = vy / a;\n\t\t\tif(vx < vy)\n\t\t\t{\n\t\t\t\t//stops at vx\n\t\t\t\treturn tx + (vx - w)/a + T2(w);\n\t\t\t}\n\t\t\telse //vx >= vy\n\t\t\t{\n\t\t\t\tif(w < vy)\n\t\t\t\t{\n\t\t\t\t\treturn w/a + (d - w*w/(2.0*a))/w + T2(w);\n\t\t\t\t}\n\t\t\t\telse //w >= vy\n\t\t\t\t{\n\t\t\t\t\t//goes to vy, accelerate all the way\n\t\t\t\t\treturn ty + T2(vy);\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3151, "comment": "//end public void main()\n"}, "Heuristic": []}, {"nl": {"id": 3151, "comment": "//w < vmax\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3151, "comment": "//vmax > w\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3151, "comment": "//v2 > vx > w\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3151, "comment": "//v2 > vmax > w\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3151, "comment": "//v2 < w, v2 <= vmax\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3151, "comment": "//v2 >= w, vmax > w\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3151, "comment": "//v2 > vmax > w\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3151, "comment": "//vmax >= v2 >= w\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3151, "comment": "//out.println(\"Questionable.\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3151, "comment": "//return binary() + T2(w);\n"}, "Heuristic": []}, {"nl": {"id": 3151, "comment": "//return  t3 + (d-s3)/w + T2(w);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3151, "comment": "//reaches vmax\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3151, "comment": "//stops at vx\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3151, "comment": "//vx >= vmax\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3151, "comment": "//stops at vmax\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3151, "comment": "//s1 >= d\n"}, "Heuristic": []}, {"nl": {"id": 3151, "comment": "//never reaches vmax\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3151, "comment": "//stops at vx\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3151, "comment": "//vx >= vy\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3151, "comment": "//w >= vy\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3151, "comment": "//goes to vy, accelerate all the way\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3151, "comment": "//v0 <= min(w, vmax)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3151, "comment": "//reaches vmax\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3151, "comment": "//s1 >= len - d\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3151, "comment": "//does not reach vmax\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3152, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3152, "comment": "// long time = -System.currentTimeMillis();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3152, "comment": "// BufferedReader br = new BufferedReader(new\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3152, "comment": "// InputStreamReader(System.in));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3152, "comment": "//\t\tScanner sc = new Scanner(new File(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3152, "comment": "// BufferedReader br = new BufferedReader(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3152, "comment": "// PrintStream ps = System.out;// new PrintStream(new\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3152, "comment": "// File(\"output.txt\"));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3152, "comment": "// gopa(br, ps);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3152, "comment": "// System.out.println(tmplen);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3153, "comment": "//\u041a\u043e\u043b-\u0432\u043e \u0434\u0435\u0441\u044f\u0442\u0438\u0447\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b (\u0432\u043a\u043b\u044e\u0447\u0430\u044f 0), \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u0432 \u0441\u0435\u0431\u0435 \u0446\u0438\u0444\u0440\u044b \u043e\u0442 0 \u0434\u043e k-1\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3153, "comment": "//\u041f\u0438\u0448\u0435\u0442\u0441\u044f \u0441 do{}while(nextPermutation(a));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3153, "comment": "//One-dimensional array     \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3153, "comment": "//Two-dimensional array\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3153, "comment": "//Three-dimensional array\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3154, "comment": "// doesn't make it to speed w before reaching d\n"}, "Heuristic": []}, {"nl": {"id": 3154, "comment": "// never gets to speed w\n"}, "Heuristic": []}, {"nl": {"id": 3154, "comment": "// never gets to speed v\n"}, "Heuristic": []}, {"nl": {"id": 3154, "comment": "// makes it to speed v\n"}, "Heuristic": []}, {"nl": {"id": 3154, "comment": "// makes it to speed w before reachig d\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3154, "comment": "// get up to speed w \n"}, "Heuristic": []}, {"nl": {"id": 3154, "comment": "// get time after reaching d\n"}, "Heuristic": []}, {"nl": {"id": 3154, "comment": "// never makes it back to v after reaching d\n"}, "Heuristic": []}, {"nl": {"id": 3154, "comment": "// makes it to speed v after reaching d\n"}, "Heuristic": []}, {"nl": {"id": 3154, "comment": "// handle getting to d\n"}, "Heuristic": []}, {"nl": {"id": 3154, "comment": "// can't get to v before reaching d\n"}, "Heuristic": []}, {"nl": {"id": 3154, "comment": "// can get to v before reaching d\n"}, "Heuristic": []}, {"nl": {"id": 3155, "comment": "// v = at\n"}, "Heuristic": []}, {"nl": {"id": 3155, "comment": "// s = att/2\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3155, "comment": "// ss = v1*t + a*t*t/2;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3155, "comment": "// v = v1 + a*t\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3155, "comment": "// s = v1*t + a*t*t/2\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3163, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3165, "comment": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3165, "comment": "/**\n *\n * @author N-AssassiN\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3165, "comment": "/**\n     * @param args the command line arguments\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3165, "comment": "//private final static String filename = \"filename\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3165, "comment": "//reader = new BufferedReader(new FileReader(filename + \".in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3165, "comment": "//out = new BufferedWriter(new FileWriter(filename + \".out\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3165, "comment": "//long startTime = System.currentTimeMillis();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3165, "comment": "//long runTime = System.currentTimeMillis() - startTime;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3165, "comment": "//out.write(runTime + \"\\n\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3166, "comment": "//\t\tk = nextInt();\n"}, "Heuristic": []}, {"nl": {"id": 3167, "comment": "/**\n\t * @param args\n\t * @throws IOException \n\t */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3171, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author George Marcus\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3173, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3175, "comment": "/** UVA 10130 - SuperSale */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3175, "comment": "/** totally n products, max Weight is w */"}, "Heuristic": []}, {"nl": {"id": 3175, "comment": "//sc = new Scanner(new File(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3179, "comment": "/**\n *\n * @author saurabh\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3179, "comment": "/**\n     * @param args the command line arguments\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3179, "comment": "// TODO code application logic here\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3179, "comment": "//System.out.println(n);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3179, "comment": "//n= -n;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3179, "comment": "//n=-n;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3179, "comment": "//  System.out.println(x);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3194, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3195, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3195, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3197, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3197, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3201, "comment": "/**\n * Created with IntelliJ IDEA.\n * User: Venky\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3205, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author AndrewShmig\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3208, "comment": "//it reads the data about the specified point and divide the data about it ,it is quite fast\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3208, "comment": "//than using direct \n"}, "Heuristic": []}, {"nl": {"id": 3208, "comment": "//converts string to integer\n"}, "Heuristic": []}, {"nl": {"id": 3208, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3209, "comment": "//it reads the data about the specified point and divide the data about it ,it is quite fast\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3209, "comment": "//than using direct \n"}, "Heuristic": []}, {"nl": {"id": 3209, "comment": "//converts string to integer\n"}, "Heuristic": []}, {"nl": {"id": 3209, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3210, "comment": "// if(arr[j+1]%2==0){\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3210, "comment": "// \tsum=sum+arr[j+1];\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3210, "comment": "// \tif(sum>=max){\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3210, "comment": "// \tmax=sum;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3210, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3210, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3213, "comment": "/**\n * Created by Gantushig on 2/18/2016.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3217, "comment": "//new careercup().run();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3217, "comment": "//new CC().run();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3217, "comment": "//System.out.println(Integer.MAX_VALUE);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3219, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Alex\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3220, "comment": "/**\n * Created by ww on 13.02.2016.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3221, "comment": "/*\n     * Code Author: Akshay Miterani\n     * DA-IICT\n     */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3221, "comment": "//----------My Code Starts Here----------\n"}, "Heuristic": []}, {"nl": {"id": 3221, "comment": "//---------------The End------------------\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3221, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3225, "comment": "/**\n * Feb 18, 2016 | 4:00:49 PM\n * <pre>\n * <u>Description</u>\n *\n * </pre>\n *\n * @author Essiennta Emmanuel (colourfulemmanuel@gmail.com)\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3226, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author ATailouloute\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3228, "comment": "/* package whatever; // don't place package name! */"}, "Heuristic": ["H7"]}, {"nl": {"id": 3228, "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3228, "comment": "// don't place package name! */\n"}, "Heuristic": []}, {"nl": {"id": 3228, "comment": "// your code goes here\n"}, "Heuristic": []}, {"nl": {"id": 3229, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Egor Kulikov (egor@egork.net)\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3233, "comment": "/**\n *\n * @author Mohammad Hadi\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3242, "comment": "//\t\tScanner in=new Scanner(System.in);\n"}, "Heuristic": []}, {"nl": {"id": 3247, "comment": "//(new FileReader(\"input.in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3248, "comment": "/**\n * Created by mmaikovych on 18.02.16.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3251, "comment": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3251, "comment": "/**\n *\n * @author Madi\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3252, "comment": "/*\n * The MIT License\n *\n * Copyright 2016 Mouad NACIRI <mouadnaciri1@gmail.com>.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3252, "comment": "/**\n *\n * @author NACIRI Mouad <mouadnaciri1@gmail.com>\n * @version 1.5.1\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3252, "comment": "/* VIP, DON'T TOUCH!! */"}, "Heuristic": ["H7"]}, {"nl": {"id": 3252, "comment": "//IO stuff...\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3254, "comment": "//long time = System.currentTimeMillis();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3254, "comment": "//time = System.currentTimeMillis() - time;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3254, "comment": "//System.out.println(time + \" ms\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3254, "comment": "//in = new StreamTokenizer(new BufferedReader(new InputStreamReader(new FileInputStream(\"input.txt\"))));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3254, "comment": "//BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(\"input.txt\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3254, "comment": "//out = new PrintWriter(new File(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3254, "comment": "//BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3255, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Erasyl Abenov\n * \n * \n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3257, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3259, "comment": "/* ignore */"}, "Heuristic": ["H7"]}, {"nl": {"id": 3259, "comment": "/* ignore */"}, "Heuristic": ["H7"]}, {"nl": {"id": 3260, "comment": "/*\n * Code Author: Sanket Udgirkar.\n * DA-IICT\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3260, "comment": "//PrintWriter out=new PrintWriter(outputStream);\n"}, "Heuristic": []}, {"nl": {"id": 3260, "comment": "//out.close();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3262, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3263, "comment": "/**\n * Created by IntelliJ IDEA.\n * User: SONY\n * Date: 27.05.12\n * Time: 18:25\n * To change this template use File | Settings | File Templates.\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3264, "comment": "/*if(T==0) {\n\n            return;\n        }\n        if(T==1) {\n            System.out.println(\"0 0 0\");\n            return;\n        }\n        System.out.println();*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3267, "comment": "// BufferedReader in = new BufferedReader(new\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3267, "comment": "// InputStreamReader(System.in));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3267, "comment": "// Scanner in = new Scanner(System.in);\n"}, "Heuristic": []}, {"nl": {"id": 3267, "comment": "// Scanner in = new Scanner(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3267, "comment": "// PrintWriter out = new PrintWriter(\"output.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3268, "comment": "/**\n     * @param args\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3269, "comment": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3269, "comment": "/**\n *\n * @author scawn\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3269, "comment": "/**\n     * @param args the command line arguments\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3269, "comment": "//        if (n == 1 || n == 2 || n == 0){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3269, "comment": "//            System.out.println(\"I'm too stupid to solve this problem\");\n"}, "Heuristic": ["H1", "H4"]}, {"nl": {"id": 3269, "comment": "//            return;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3269, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3272, "comment": "//while(sc.hasNext()){\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3272, "comment": "//create a fib\n"}, "Heuristic": []}, {"nl": {"id": 3272, "comment": "//}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3273, "comment": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3273, "comment": "/**\n *\n * @author DELL\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3273, "comment": "//package CodeForces3;\n"}, "Heuristic": []}, {"nl": {"id": 3276, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3276, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3280, "comment": "// long t=new Date().getTime();\n"}, "Heuristic": []}, {"nl": {"id": 3280, "comment": "// writer.println(t-new Date().getTime());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3281, "comment": "/**\n *\n * @author Gitesh\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3281, "comment": "/**\n     * @param args the command line arguments\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3284, "comment": "/**\n     * @param args\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3286, "comment": "/**\n * Author: Maksim Novik\n * Date: 30.06.12\n * Time: 22:34\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3296, "comment": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3296, "comment": "/**\n *\n * @author dilshan\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3296, "comment": "/**\n     * @param args the command line arguments\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3296, "comment": "//System.out.println(y);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3303, "comment": "//\tint n = iread();\t\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3303, "comment": "//    out.write(ans_path + \"\\n\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3303, "comment": "//             in = new BufferedReader(new FileReader(taskname + \".in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3303, "comment": "//             out = new BufferedWriter(new FileWriter(taskname + \".out\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3303, "comment": "// Locale.setDefault(Locale.US);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3310, "comment": "//\t\tint f1 = 0;\n"}, "Heuristic": []}, {"nl": {"id": 3310, "comment": "//\t\tint f2 = 1;\n"}, "Heuristic": []}, {"nl": {"id": 3310, "comment": "//\t\t\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3310, "comment": "//\t\twhile(true){\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3310, "comment": "//\t\t\tint t = f1 + f2;\n"}, "Heuristic": []}, {"nl": {"id": 3310, "comment": "//\t\t\tif(t == N){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3310, "comment": "//\t\t\t\t//guaranteed that n is a Fibonacci number\n"}, "Heuristic": []}, {"nl": {"id": 3310, "comment": "//\t\t\t\tbreak;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3310, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3310, "comment": "//\t\t\tf1 = f2;\n"}, "Heuristic": []}, {"nl": {"id": 3310, "comment": "//\t\t\tf2 = t;\n"}, "Heuristic": []}, {"nl": {"id": 3310, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3311, "comment": "/**\n * Created with IntelliJ IDEA.\n * User: vaibhav mittal\n * Date: 23/6/12\n * Time: 1:15 AM\n * To change this template use File | Settings | File Templates.\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3315, "comment": "/**\n * @author Don Li\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3316, "comment": "/*\n\t\t * Another way if the polygon is convex\n\t\t * 1. Triangulate the poylgon through p\n\t\t * 2. Check if sum areas == poygon area\n\t\t * 3. Handle empty polygon\n\t\t */"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 3316, "comment": "//rec\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3316, "comment": "//diamond\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3316, "comment": "// Cases to handle: collinear points, polygons with n < 3\n"}, "Heuristic": []}, {"nl": {"id": 3316, "comment": "//first point = last point, counter-clockwise representation\n"}, "Heuristic": []}, {"nl": {"id": 3316, "comment": "//clockwise/anti-clockwise check, for convex/concave polygons\n"}, "Heuristic": []}, {"nl": {"id": 3316, "comment": "//negative value in case of clockwise\n"}, "Heuristic": []}, {"nl": {"id": 3316, "comment": "//for convex/concave polygons - winding number algorithm \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3316, "comment": "//abs makes it work for clockwise\n"}, "Heuristic": []}, {"nl": {"id": 3316, "comment": "//center of mass\n"}, "Heuristic": []}, {"nl": {"id": 3316, "comment": "//remove abs\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3316, "comment": "//s is a non-negative value\n"}, "Heuristic": []}, {"nl": {"id": 3316, "comment": "// angle AOB\n"}, "Heuristic": []}, {"nl": {"id": 3316, "comment": "// for integer points and rotation by 90 (counterclockwise) : swap x and y, negate x\n"}, "Heuristic": []}, {"nl": {"id": 3316, "comment": "//returns true if it is on the line defined by a and b\n"}, "Heuristic": []}, {"nl": {"id": 3316, "comment": "//returns true if it is on the ray whose start point is a and passes through b\n"}, "Heuristic": []}, {"nl": {"id": 3316, "comment": "// Another way: find closest point and calculate the distance between it and p\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3317, "comment": "/* Shubhang Verma */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3317, "comment": "//m - ct\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3317, "comment": "//    \t\tfor(int I=0;I<n;I++)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3317, "comment": "//    \t\t{\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3317, "comment": "//    \t\t\tfor(int J=0;J<n;J++)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3317, "comment": "//    \t\t\t{\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3317, "comment": "//    \t\t\t\tSystem.out.print(eg[I][J]+\" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3317, "comment": "//    \t\t\t}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3317, "comment": "//    \t\t\tSystem.out.println();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3317, "comment": "//    \t\t}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3317, "comment": "//System.out.println();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3317, "comment": "//System.out.println(matching);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3318, "comment": "//        boolean oj = true;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3318, "comment": "//                sc  = new FastScanner(new FileReader(\"D:\\\\JavaOlymp\\\\FatalError\\\\output.txt\") );\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3318, "comment": "//        new Thread( null, new Runnable() {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3318, "comment": "//            @Override\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3318, "comment": "//            public void run() {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3318, "comment": "//                new Main().run();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3318, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3318, "comment": "//            }, \"LOL\", 256L * 1024 * 1024 / 2 ).run();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3318, "comment": "//        }, \"LOL\", 2000 * 1024 * 1024 ).run();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3318, "comment": "//////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3318, "comment": "//            out.printf( \"%d %d\\n\", c, curAns );\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3320, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Niyaz Nigmatullin\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3320, "comment": "//            if (isEOF && ret < 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3320, "comment": "//                throw new InputMismatchException();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3320, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3320, "comment": "//            isEOF = ret == -1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "/**\n     * Returns true if there is a path from the source 's' to the sink 't' in the residual graph.\n     * Also fills parent[] to store the path.\n     * See here for more info:  http://www.geeksforgeeks.org/ford-fulkerson-algorithm-for-maximum-flow-problem/\n     */"}, "Heuristic": ["H1", "H9"]}, {"nl": {"id": 3324, "comment": "/**\n     * Returns the maximum flow from 's' to 't' in the given graph.\n     * See here for more info:  http://www.geeksforgeeks.org/ford-fulkerson-algorithm-for-maximum-flow-problem/\n     */"}, "Heuristic": ["H1", "H9"]}, {"nl": {"id": 3324, "comment": "/**\n     * Returns true if a matching for vertex 'u' is possible.\n     * See here for more info:  http://www.geeksforgeeks.org/maximum-bipartite-matching/\n     */"}, "Heuristic": ["H1", "H9"]}, {"nl": {"id": 3324, "comment": "/**\n     * Returns the maximum bipartite matching from an an adjacency matrix.\n     * Note:  bpGraph[i][j] = true if there is an edge from i to j.\n     * Note:  matchIJ (array of length M) is an output variable containing the matchings, such that matchIJ[i] = j means that there is a match from i to j.\n     * Note:  matchJI (array of length N) is an output variable containing the matchings, such that matchJI[j] = i means that there is a match from i to j.\n     * See here for more info:  http://www.geeksforgeeks.org/maximum-bipartite-matching/\n     */"}, "Heuristic": ["H1", "H9"]}, {"nl": {"id": 3324, "comment": "/**\n     * Returns the maximum bipartite matching from an an adjacency matrix.\n     * Note:  bpGraph[i][j] = true if there is an edge from i to j.\n     * Note:  matchJI (array of length N) is an output variable containing the matchings, such that matchJI[j] = i means that there is a match from i to j.\n     * See here for more info:  http://www.geeksforgeeks.org/maximum-bipartite-matching/\n     */"}, "Heuristic": ["H1", "H9"]}, {"nl": {"id": 3324, "comment": "/**\n     * Returns the maximum bipartite matching from an an adjacency matrix.\n     * Overload of the bipartiteMatching function without output parameters.\n     * See here for more info:  http://www.geeksforgeeks.org/maximum-bipartite-matching/\n     */"}, "Heuristic": ["H1", "H9"]}, {"nl": {"id": 3324, "comment": "/**\n     * Overload of the bipartiteMatching function taking an adjacency matrix of int[][] instead of boolean[][].\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "/**\n     * Overload of the bipartiteMatching function taking an adjacency matrix of int[][] instead of boolean[][].\n     * Note:  matchJI (array of length N) is an output variable containing the matchings, such that matchJI[j] = i means that there is a match from i to j.\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "/**\n     * Overload of the bipartiteMatching function taking an adjacency matrix of int[][] instead of boolean[][].\n     * Note:  matchIJ (array of length M) is an output variable containing the matchings, such that matchIJ[i] = j means that there is a match from i to j.\n     * Note:  matchJI (array of length N) is an output variable containing the matchings, such that matchJI[j] = i means that there is a match from i to j.\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "/**\n     * Converts an integer adjacency matrix of 1's and 0's to a boolean adjacency matrix.\n     * Useful with bipartiteMatching, which takes adjancency matrix of boolean[][] as input (instead of int[][]).\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//    \tint N = mat.length;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//    \tint M = mat[0].length;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3324, "comment": "//    \tint centerConnect = (mat[center][center]) ? 0 : 1;\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 3324, "comment": "//    \tfor (int i = 0; i < N; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//\t\t\tif (i != center) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//\t\t\t\tif (!mat[i][center]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//\t\t\t\t\tcenterConnect++;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3324, "comment": "//\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3324, "comment": "//\t\t\t\tif (!mat[center][i]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//\t\t\t\t\tcenterConnect++;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3324, "comment": "//\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3324, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3324, "comment": "//\t    \tmat[i][center] = false;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//\t    \tmat[center][i] = false;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3324, "comment": "//    \t\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//    \tint[][] adjMat = new int[2 * N + 2][2 * N + 2];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//    \tfor (int i = 0; i < N; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//    \t\tfor (int j = 0; j < N; j++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//    \t\t\tint idx = N + j;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//    \t\t\tadjMat[i][idx] = (mat[i][j]) ? 1 : 0;\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 3324, "comment": "//    \t\t}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//    \t}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//    \tint s = 2 * N;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//    \tint t = 2 * N + 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//    \tfor (int i = 0; i < N; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//    \t\tadjMat[s][i] = 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//    \t}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//    \tfor (int i = N; i < 2 * N; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//    \t\tadjMat[i][t] = 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//    \t}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//    \t\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//    \tint matches = fordFulkerson(adjMat, s, t);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//    \t\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//    \treturn centerConnect + matches;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//    \tint M = mat[0].length;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//    \tint centerConnect = (mat[center][center]) ? 0 : 1;\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 3324, "comment": "//    \t\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//    \tfor (int i = 0; i < N; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//    \t\tif (i != center) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//    \t\t\tif (!mat[i][center]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//    \t\t\t\tcenterConnect++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//    \t\t\t}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//    \t\t\tif (!mat[center][i]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//    \t\t\t\tcenterConnect++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//    \t\t\t}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//    \t\t}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//        \tmat[i][center] = false;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//        \tmat[center][i] = false;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//    \t}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//    \treturn (centerConnect + N - 1 - matches);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3324, "comment": "//www.geeksforgeeks.org/ford-fulkerson-algorithm-for-maximum-flow-problem/\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3324, "comment": "//www.geeksforgeeks.org/ford-fulkerson-algorithm-for-maximum-flow-problem/\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3324, "comment": "//www.geeksforgeeks.org/maximum-bipartite-matching/\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3324, "comment": "//www.geeksforgeeks.org/maximum-bipartite-matching/\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3324, "comment": "//www.geeksforgeeks.org/maximum-bipartite-matching/\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3324, "comment": "//www.geeksforgeeks.org/maximum-bipartite-matching/\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3326, "comment": "/**\n * @author Don Li\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3327, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3327, "comment": "//\t\t\tint src = 2*N;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3327, "comment": "//\t\t\tint dst = 2*N+1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3327, "comment": "//\t\t\tint[][] cap  = new int[2*N+2][2*N+2];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3327, "comment": "//\t\t\tint[][] cost = new int[2*N+2][2*N+2];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3327, "comment": "//\t\t\tfor (int i = 0; i < N; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3327, "comment": "//\t\t\t\tcap[src][i] = 1;\n"}, "Heuristic": []}, {"nl": {"id": 3327, "comment": "//\t\t\t\tcost[src][i] = 1;\n"}, "Heuristic": []}, {"nl": {"id": 3327, "comment": "//\t\t\t\tcap[N+i][dst] = 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3327, "comment": "//\t\t\t\tcost[N+i][dst] = 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3327, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3327, "comment": "//\t\t\tfor (int i = 0; i < N; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3327, "comment": "//\t\t\t\tif (i == c) continue;\n"}, "Heuristic": []}, {"nl": {"id": 3327, "comment": "//\t\t\t\tfor (int j = 0; j < N; j++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3327, "comment": "//\t\t\t\t\tif (j == c) continue;\n"}, "Heuristic": []}, {"nl": {"id": 3327, "comment": "//\t\t\t\t\tif (!graph[i][j]) continue;\t\t\t\t\t\n"}, "Heuristic": []}, {"nl": {"id": 3327, "comment": "//\t\t\t\t\tcap[i][N+j] = 1;\n"}, "Heuristic": []}, {"nl": {"id": 3327, "comment": "//\t\t\t\t\tcost[i][N+j] = 1;\t\t\t\t\t\n"}, "Heuristic": []}, {"nl": {"id": 3327, "comment": "//\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3327, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3327, "comment": "//\t\t\tMinCostMaxFlow flow = new MinCostMaxFlow();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3327, "comment": "//\t\t\tint result[] = flow.getMaxFlow(cap, cost, src, dst);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3327, "comment": "//\t\t\tint glen = result[0];\n"}, "Heuristic": []}, {"nl": {"id": 3328, "comment": "/**\n * @author Don Li\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3329, "comment": "//Author: net12k44\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3329, "comment": "//}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3329, "comment": "//out.println((String.format(\"%.2f\",(double)(System.currentTimeMillis()-startTime)/1000)));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3329, "comment": "//////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3330, "comment": "/**\n     * Returns true if a matching for vertex 'u' is possible.\n     * See here for more info:  http://www.geeksforgeeks.org/maximum-bipartite-matching/\n     */"}, "Heuristic": ["H1", "H9"]}, {"nl": {"id": 3330, "comment": "/**\n     * Returns the maximum bipartite matching from an an adjacency matrix.\n     * Note:  bpGraph[i][j] = true if there is an edge from i to j.\n     * Note:  matchIJ (array of length M) is an output variable containing the matchings, such that matchIJ[i] = j means that there is a match from i to j.\n     * Note:  matchJI (array of length N) is an output variable containing the matchings, such that matchJI[j] = i means that there is a match from i to j.\n     * See here for more info:  http://www.geeksforgeeks.org/maximum-bipartite-matching/\n     */"}, "Heuristic": ["H1", "H9"]}, {"nl": {"id": 3330, "comment": "/**\n     * Returns the maximum bipartite matching from an an adjacency matrix.\n     * Note:  bpGraph[i][j] = true if there is an edge from i to j.\n     * Note:  matchJI (array of length N) is an output variable containing the matchings, such that matchJI[j] = i means that there is a match from i to j.\n     * See here for more info:  http://www.geeksforgeeks.org/maximum-bipartite-matching/\n     */"}, "Heuristic": ["H1", "H9"]}, {"nl": {"id": 3330, "comment": "/**\n     * Returns the maximum bipartite matching from an an adjacency matrix.\n     * Overload of the bipartiteMatching function without output parameters.\n     * See here for more info:  http://www.geeksforgeeks.org/maximum-bipartite-matching/\n     */"}, "Heuristic": ["H1", "H9"]}, {"nl": {"id": 3330, "comment": "/**\n     * Overload of the bipartiteMatching function taking an adjacency matrix of int[][] instead of boolean[][].\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3330, "comment": "/**\n     * Overload of the bipartiteMatching function taking an adjacency matrix of int[][] instead of boolean[][].\n     * Note:  matchJI (array of length N) is an output variable containing the matchings, such that matchJI[j] = i means that there is a match from i to j.\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3330, "comment": "/**\n     * Overload of the bipartiteMatching function taking an adjacency matrix of int[][] instead of boolean[][].\n     * Note:  matchIJ (array of length M) is an output variable containing the matchings, such that matchIJ[i] = j means that there is a match from i to j.\n     * Note:  matchJI (array of length N) is an output variable containing the matchings, such that matchJI[j] = i means that there is a match from i to j.\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3330, "comment": "/**\n     * Converts an integer adjacency matrix of 1's and 0's to a boolean adjacency matrix.\n     * Useful with bipartiteMatching, which takes adjancency matrix of boolean[][] as input (instead of int[][]).\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3330, "comment": "//www.geeksforgeeks.org/maximum-bipartite-matching/\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3330, "comment": "//www.geeksforgeeks.org/maximum-bipartite-matching/\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3330, "comment": "//www.geeksforgeeks.org/maximum-bipartite-matching/\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3330, "comment": "//www.geeksforgeeks.org/maximum-bipartite-matching/\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3331, "comment": "/**\n     * Returns true if a matching for vertex 'u' is possible.\n     * See here for more info:  http://www.geeksforgeeks.org/maximum-bipartite-matching/\n     */"}, "Heuristic": ["H1", "H9"]}, {"nl": {"id": 3331, "comment": "/**\n     * Returns the maximum bipartite matching from an an adjacency matrix.\n     * Note:  bpGraph[i][j] = true if there is an edge from i to j.\n     * Note:  matchIJ (array of length M) is an output variable containing the matchings, such that matchIJ[i] = j means that there is a match from i to j.\n     * Note:  matchJI (array of length N) is an output variable containing the matchings, such that matchJI[j] = i means that there is a match from i to j.\n     * See here for more info:  http://www.geeksforgeeks.org/maximum-bipartite-matching/\n     */"}, "Heuristic": ["H1", "H9"]}, {"nl": {"id": 3331, "comment": "/**\n     * Returns the maximum bipartite matching from an an adjacency matrix.\n     * Note:  bpGraph[i][j] = true if there is an edge from i to j.\n     * Note:  matchJI (array of length N) is an output variable containing the matchings, such that matchJI[j] = i means that there is a match from i to j.\n     * See here for more info:  http://www.geeksforgeeks.org/maximum-bipartite-matching/\n     */"}, "Heuristic": ["H1", "H9"]}, {"nl": {"id": 3331, "comment": "/**\n     * Returns the maximum bipartite matching from an an adjacency matrix.\n     * Overload of the bipartiteMatching function without output parameters.\n     * See here for more info:  http://www.geeksforgeeks.org/maximum-bipartite-matching/\n     */"}, "Heuristic": ["H1", "H9"]}, {"nl": {"id": 3331, "comment": "/**\n     * Overload of the bipartiteMatching function taking an adjacency matrix of int[][] instead of boolean[][].\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3331, "comment": "/**\n     * Overload of the bipartiteMatching function taking an adjacency matrix of int[][] instead of boolean[][].\n     * Note:  matchJI (array of length N) is an output variable containing the matchings, such that matchJI[j] = i means that there is a match from i to j.\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3331, "comment": "/**\n     * Overload of the bipartiteMatching function taking an adjacency matrix of int[][] instead of boolean[][].\n     * Note:  matchIJ (array of length M) is an output variable containing the matchings, such that matchIJ[i] = j means that there is a match from i to j.\n     * Note:  matchJI (array of length N) is an output variable containing the matchings, such that matchJI[j] = i means that there is a match from i to j.\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3331, "comment": "/**\n     * Converts an integer adjacency matrix of 1's and 0's to a boolean adjacency matrix.\n     * Useful with bipartiteMatching, which takes adjancency matrix of boolean[][] as input (instead of int[][]).\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3331, "comment": "//www.geeksforgeeks.org/maximum-bipartite-matching/\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3331, "comment": "//www.geeksforgeeks.org/maximum-bipartite-matching/\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3331, "comment": "//www.geeksforgeeks.org/maximum-bipartite-matching/\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3331, "comment": "//www.geeksforgeeks.org/maximum-bipartite-matching/\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3332, "comment": "//package codeforces;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3332, "comment": "//                Arrays.fill(used, false);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3332, "comment": "//                    amend(v);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3332, "comment": "//        Utils utils = new Utils();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3332, "comment": "//        for(int i = 1; i <= n; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3332, "comment": "//            utils.amend(i);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3332, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3332, "comment": "//            utils.cancel(i);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3332, "comment": "//            utils.amend(i - 1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3333, "comment": "// System.setOut(new PrintStream(\"./../../out\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3334, "comment": "//package codeforces;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3335, "comment": "//        boolean oj = true;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3335, "comment": "//                sc  = new FastScanner(new FileReader(\"D:\\\\JavaOlymp\\\\FatalError\\\\output.txt\") );\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3335, "comment": "//        new Thread( null, new Runnable() {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3335, "comment": "//            @Override\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3335, "comment": "//            public void run() {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3335, "comment": "//                new Main().run();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3335, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3335, "comment": "//            }, \"LOL\", 256L * 1024 * 1024 / 2 ).run();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3335, "comment": "//        }, \"LOL\", 2000 * 1024 * 1024 ).run();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3335, "comment": "//////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3335, "comment": "//            out.printf( \"%d %d\\n\", c, curAns );\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3336, "comment": "//package round227;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3336, "comment": "//\t\tint n = 500, m = 1000;\n"}, "Heuristic": []}, {"nl": {"id": 3336, "comment": "//\t\tRandom gen = new Random();\n"}, "Heuristic": []}, {"nl": {"id": 3336, "comment": "//\t\tStringBuilder sb = new StringBuilder();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3336, "comment": "//\t\tsb.append(n + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3336, "comment": "//\t\tsb.append(m + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3336, "comment": "//\t\tboolean[][] g = new boolean[n][n];\n"}, "Heuristic": []}, {"nl": {"id": 3336, "comment": "//\t\tfor(int i = 0;i < m;i++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3336, "comment": "//\t\t\twhile(true){\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3336, "comment": "//\t\t\t\tint r = gen.nextInt(n);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3336, "comment": "//\t\t\t\tint c = gen.nextInt(n);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3336, "comment": "//\t\t\t\tif(!g[r][c]){\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3336, "comment": "//\t\t\t\t\tg[r][c] = true;\n"}, "Heuristic": []}, {"nl": {"id": 3336, "comment": "//\t\t\t\t\tbreak;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3336, "comment": "//\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3336, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3336, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3336, "comment": "//\t\tfor(int i = 0;i < n;i++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3336, "comment": "//\t\t\tfor(int j = 0;j < n;j++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3336, "comment": "//\t\t\t\tif(g[i][j]){\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3336, "comment": "//\t\t\t\t\tsb.append((i+1) + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3336, "comment": "//\t\t\t\t\tsb.append((j+1) + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3336, "comment": "//\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3336, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3336, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3336, "comment": "//\t\tINPUT = sb.toString();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3336, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "/**\n     * Returns true if there is a path from the source 's' to the sink 't' in the residual graph.\n     * Also fills parent[] to store the path.\n     * See here for more info:  http://www.geeksforgeeks.org/ford-fulkerson-algorithm-for-maximum-flow-problem/\n     */"}, "Heuristic": ["H1", "H9"]}, {"nl": {"id": 3339, "comment": "/**\n     * Returns the maximum flow from 's' to 't' in the given graph.\n     * See here for more info:  http://www.geeksforgeeks.org/ford-fulkerson-algorithm-for-maximum-flow-problem/\n     */"}, "Heuristic": ["H1", "H9"]}, {"nl": {"id": 3339, "comment": "/**\n     * Returns true if a matching for vertex 'u' is possible.\n     * See here for more info:  http://www.geeksforgeeks.org/maximum-bipartite-matching/\n     */"}, "Heuristic": ["H1", "H9"]}, {"nl": {"id": 3339, "comment": "/**\n     * Returns the maximum bipartite matching from an an adjacency matrix.\n     * Note:  bpGraph[i][j] = true if there is an edge from i to j.\n     * Note:  matchIJ (array of length M) is an output variable containing the matchings, such that matchIJ[i] = j means that there is a match from i to j.\n     * Note:  matchJI (array of length N) is an output variable containing the matchings, such that matchJI[j] = i means that there is a match from i to j.\n     * See here for more info:  http://www.geeksforgeeks.org/maximum-bipartite-matching/\n     */"}, "Heuristic": ["H1", "H9"]}, {"nl": {"id": 3339, "comment": "/**\n     * Returns the maximum bipartite matching from an an adjacency matrix.\n     * Note:  bpGraph[i][j] = true if there is an edge from i to j.\n     * Note:  matchJI (array of length N) is an output variable containing the matchings, such that matchJI[j] = i means that there is a match from i to j.\n     * See here for more info:  http://www.geeksforgeeks.org/maximum-bipartite-matching/\n     */"}, "Heuristic": ["H1", "H9"]}, {"nl": {"id": 3339, "comment": "/**\n     * Returns the maximum bipartite matching from an an adjacency matrix.\n     * Overload of the bipartiteMatching function without output parameters.\n     * See here for more info:  http://www.geeksforgeeks.org/maximum-bipartite-matching/\n     */"}, "Heuristic": ["H1", "H9"]}, {"nl": {"id": 3339, "comment": "/**\n     * Overload of the bipartiteMatching function taking an adjacency matrix of int[][] instead of boolean[][].\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "/**\n     * Overload of the bipartiteMatching function taking an adjacency matrix of int[][] instead of boolean[][].\n     * Note:  matchJI (array of length N) is an output variable containing the matchings, such that matchJI[j] = i means that there is a match from i to j.\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "/**\n     * Overload of the bipartiteMatching function taking an adjacency matrix of int[][] instead of boolean[][].\n     * Note:  matchIJ (array of length M) is an output variable containing the matchings, such that matchIJ[i] = j means that there is a match from i to j.\n     * Note:  matchJI (array of length N) is an output variable containing the matchings, such that matchJI[j] = i means that there is a match from i to j.\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "/**\n     * Converts an integer adjacency matrix of 1's and 0's to a boolean adjacency matrix.\n     * Useful with bipartiteMatching, which takes adjancency matrix of boolean[][] as input (instead of int[][]).\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//    \tint N = mat.length;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//    \tint M = mat[0].length;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3339, "comment": "//    \tint centerConnect = (mat[center][center]) ? 0 : 1;\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 3339, "comment": "//    \tfor (int i = 0; i < N; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//\t\t\tif (i != center) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//\t\t\t\tif (!mat[i][center]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//\t\t\t\t\tcenterConnect++;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3339, "comment": "//\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3339, "comment": "//\t\t\t\tif (!mat[center][i]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//\t\t\t\t\tcenterConnect++;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3339, "comment": "//\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3339, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3339, "comment": "//\t    \tmat[i][center] = false;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//\t    \tmat[center][i] = false;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3339, "comment": "//    \t\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//    \tint[][] adjMat = new int[2 * N + 2][2 * N + 2];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//    \tfor (int i = 0; i < N; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//    \t\tfor (int j = 0; j < N; j++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//    \t\t\tint idx = N + j;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//    \t\t\tadjMat[i][idx] = (mat[i][j]) ? 1 : 0;\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 3339, "comment": "//    \t\t}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//    \t}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//    \tint s = 2 * N;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//    \tint t = 2 * N + 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//    \tfor (int i = 0; i < N; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//    \t\tadjMat[s][i] = 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//    \t}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//    \tfor (int i = N; i < 2 * N; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//    \t\tadjMat[i][t] = 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//    \t}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//    \t\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//    \tint matches = fordFulkerson(adjMat, s, t);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//    \t\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//    \treturn centerConnect + matches;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//    \tint M = mat[0].length;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//    \tint centerConnect = (mat[center][center]) ? 0 : 1;\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 3339, "comment": "//    \t\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//    \tfor (int i = 0; i < N; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//    \t\tif (i != center) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//    \t\t\tif (!mat[i][center]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//    \t\t\t\tcenterConnect++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//    \t\t\t}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//    \t\t\tif (!mat[center][i]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//    \t\t\t\tcenterConnect++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//    \t\t\t}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//    \t\t}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//        \tmat[i][center] = false;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//        \tmat[center][i] = false;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//    \t}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//    \treturn (centerConnect + N - 1 - matches);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3339, "comment": "//www.geeksforgeeks.org/ford-fulkerson-algorithm-for-maximum-flow-problem/\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3339, "comment": "//www.geeksforgeeks.org/ford-fulkerson-algorithm-for-maximum-flow-problem/\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3339, "comment": "//www.geeksforgeeks.org/maximum-bipartite-matching/\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3339, "comment": "//www.geeksforgeeks.org/maximum-bipartite-matching/\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3339, "comment": "//www.geeksforgeeks.org/maximum-bipartite-matching/\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3339, "comment": "//www.geeksforgeeks.org/maximum-bipartite-matching/\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3340, "comment": "/**\n         * thread safe Factorizer\n         */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3340, "comment": "/**\n         * thread safe\n         */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3340, "comment": "/**\n             * lazy\n             * time complexity O(n * log(n) * log(log(n))\n             * memory complexity O(n)\n             */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3340, "comment": "/**\n             * complexity O(result)\n             */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3341, "comment": "//        boolean oj = true;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3341, "comment": "//                sc  = new FastScanner(new FileReader(\"D:\\\\JavaOlymp\\\\FatalError\\\\output.txt\") );\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3341, "comment": "//        new Thread( null, new Runnable() {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3341, "comment": "//            @Override\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3341, "comment": "//            public void run() {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3341, "comment": "//                new Main().run();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3341, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3341, "comment": "//            }, \"LOL\", 256L * 1024 * 1024 / 2 ).run();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3341, "comment": "//        }, \"LOL\", 2000 * 1024 * 1024 ).run();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3341, "comment": "//////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3341, "comment": "//            out.printf( \"%d %d\\n\", c, curAns );\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3342, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author sheep\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3343, "comment": "/**\n * Created by ali on 2/3/14.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3344, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3349, "comment": "/**\n * MxNINJA 04:06:52 \u0635 14/01/2014\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3350, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3357, "comment": "//= new PrintWriter(System.out);\n"}, "Heuristic": []}, {"nl": {"id": 3357, "comment": "//try {\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3357, "comment": "// (new File(name + \".in\"));//StreamTokenizer(new FileReader(new File(name + \".in\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3357, "comment": "// new PrintWriter(new File(name + \".out\")); //= new PrintWriter(System.out);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3357, "comment": "//} catch (IOException e) {}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3359, "comment": "//The PandaScanner class, for Panda fast scanning!\n"}, "Heuristic": []}, {"nl": {"id": 3362, "comment": "//package arbuz;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3363, "comment": "// by agus.mw\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3364, "comment": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3364, "comment": "/**\n *\n * @author madi\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3365, "comment": "//cout.println(str.toString());\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3366, "comment": "/**\n * @author Alexander Grigoryev\n *         Created on 01.08.11\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3367, "comment": "/**\n     * @param args\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3367, "comment": "// for j\n"}, "Heuristic": []}, {"nl": {"id": 3367, "comment": "// for i\n"}, "Heuristic": []}, {"nl": {"id": 3370, "comment": "//take this substring\n"}, "Heuristic": []}, {"nl": {"id": 3372, "comment": "//do here\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3372, "comment": "//do job\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3373, "comment": "//final String FILENAME = \"dvd\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3373, "comment": "//in = new BufferedReader(new FileReader(new File(FILENAME + \".in\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3373, "comment": "//out = new PrintWriter(new File(FILENAME + \".out\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3373, "comment": "//in = new Scanner(System.in);\n"}, "Heuristic": []}, {"nl": {"id": 3373, "comment": "//static Scanner in;\n"}, "Heuristic": []}, {"nl": {"id": 3375, "comment": "/**\n\t * @author hunglee\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3377, "comment": "//stdin\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3377, "comment": "//System.err.println(\"Input: \" + line);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3377, "comment": "//System.out.println(\"I read this number: \" + val);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3384, "comment": "/**\n * User: alms\n * Date: 09.07.2010\n * Time: 18:57:44\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3385, "comment": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3385, "comment": "/**\n *\n * @author Trung Pham\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3385, "comment": "// System.out.println(\"UPDATE INDEX \" + index);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3385, "comment": "//    System.out.println(\"NEXT \" +index);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3385, "comment": "//  System.out.println(\"GET INDEX \" + index);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3385, "comment": "// System.out.println(\"BACK \" + index);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3385, "comment": "//    static Point intersect(Point a, Point b, Point c) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3385, "comment": "//        double D = cross(a, b);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3385, "comment": "//        if (D != 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3385, "comment": "//            return new Point(cross(c, b) / D, cross(a, c) / D);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3385, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3385, "comment": "//        return null;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3385, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3385, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3385, "comment": "//    static Point convert(Point a, double angle) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3385, "comment": "//        double x = a.x * cos(angle) - a.y * sin(angle);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3385, "comment": "//        double y = a.x * sin(angle) + a.y * cos(angle);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3385, "comment": "//        return new Point(x, y);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3385, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3385, "comment": "//System.setOut(new PrintStream(new BufferedOutputStream(System.out), true));\n"}, "Heuristic": []}, {"nl": {"id": 3385, "comment": "//   br = new BufferedReader(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3387, "comment": "// the followings are methods to take care of inputs.\n"}, "Heuristic": ["H4"]}, {"nl": {"id": 3389, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Zyflair Griffane\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3390, "comment": "//\t\t\t\tSystem.out.println(i+ \" \"+ j);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3391, "comment": "// citire\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3391, "comment": "//\t\t\tScanner sc = new Scanner(new File(\"in.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3391, "comment": "//\t\t\t\tSystem.out.println(t + \"\t\"  + b);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3391, "comment": "//\t\t\t\t\t\tSystem.out.println(t);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3393, "comment": "/*************************************************************************\n *  Compilation:  javac LRS.java\n *  Execution:    java LRS < file.txt\n *  Dependencies: StdIn.java\n *  \n *  Reads a text corpus from stdin, replaces all consecutive blocks of\n *  whitespace with a single space, and then computes the longest\n *  repeated substring in that corpus. Suffix sorts the corpus using\n *  the system sort, then finds the longest repeated substring among \n *  consecutive suffixes in the sorted order.\n * \n *  % java LRS < mobydick.txt\n *  ',- Such a funny, sporty, gamy, jesty, joky, hoky-poky lad, is the Ocean, oh! Th'\n * \n *  % java LRS \n *  aaaaaaaaa\n *  'aaaaaaaa'\n *\n *  % java LRS\n *  abcdefg\n *  ''\n *\n *************************************************************************/"}, "Heuristic": ["H1"]}, {"nl": {"id": 3393, "comment": "// return the longest common prefix of s and t\n"}, "Heuristic": []}, {"nl": {"id": 3393, "comment": "// return the longest repeated string in s\n"}, "Heuristic": []}, {"nl": {"id": 3393, "comment": "// form the N suffixes\n"}, "Heuristic": []}, {"nl": {"id": 3393, "comment": "// sort them\n"}, "Heuristic": []}, {"nl": {"id": 3393, "comment": "// find longest repeated substring by comparing adjacent sorted suffixes\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3393, "comment": "// read in text, replacing all consecutive whitespace with a single space\n"}, "Heuristic": []}, {"nl": {"id": 3393, "comment": "// then compute longest repeated substring\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3397, "comment": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3397, "comment": "/**\n *\n * @author lav\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3397, "comment": "/**\n     * @param args the command line arguments\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3397, "comment": "//package substring;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3397, "comment": "// System.out.println(\"entet strig\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3397, "comment": "//  System.out.println(str.substring(0, str.length()));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3397, "comment": "//int a=i+sub.indexOf(sub.charAt(0));\n"}, "Heuristic": []}, {"nl": {"id": 3397, "comment": "// TODO code application logic here\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3399, "comment": "//package timus;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3399, "comment": "// n - sum, l - length, m - every part\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3399, "comment": "// <= m\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3401, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3401, "comment": "// System.out.println(i + \" \" + tmp);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3401, "comment": "//\t\t Scanner sc = new Scanner(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3401, "comment": "// BufferedReader br = new BufferedReader(new\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3401, "comment": "// InputStreamReader(System.in));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3401, "comment": "// PrintWriter pw = new PrintWriter(new FileWriter(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3402, "comment": "/*throws FileNotFoundException*/"}, "Heuristic": ["H7"]}, {"nl": {"id": 3402, "comment": "/*throws FileNotFoundException*/"}, "Heuristic": ["H7"]}, {"nl": {"id": 3402, "comment": "//Scanner sscan = new Scanner(new File(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3402, "comment": "//PrintStream oout = new PrintStream(new File(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3402, "comment": "//sscan.close();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3402, "comment": "//oout.close();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3406, "comment": "//System.out.format(\"Adding from %d to %d -> %s\\n\",i, i+j,str.substring(i, i + j));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3408, "comment": "//\tstatic StreamTokenizer in; static int next() throws Exception {in.nextToken(); return (int) in.nval;}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3408, "comment": "//\t\tin = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n"}, "Heuristic": []}, {"nl": {"id": 3410, "comment": "//final String FILENAME = \"dvd\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3410, "comment": "//in = new BufferedReader(new FileReader(new File(FILENAME + \".in\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3410, "comment": "//out = new PrintWriter(new File(FILENAME + \".out\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3410, "comment": "//in = new Scanner(System.in);\n"}, "Heuristic": []}, {"nl": {"id": 3410, "comment": "//static Scanner in;\n"}, "Heuristic": []}, {"nl": {"id": 3413, "comment": "//counts the length\n"}, "Heuristic": []}, {"nl": {"id": 3413, "comment": "//start index of string\n"}, "Heuristic": []}, {"nl": {"id": 3415, "comment": "//System.out.println(str.substring(x,x+i));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3420, "comment": "//InputStream input = new FileInputStream(\"fileIn.in\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3420, "comment": "//OutputStream output = new FileOutputStream(\"fileOut.out\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3425, "comment": "//////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3425, "comment": "//////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3429, "comment": "//1:11\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3430, "comment": "//System.out.println(str.substring(x,x+i));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3433, "comment": "/**\n * @author Egor Kulikov (egor@egork.net)\n *         Created on 14.03.2010\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3433, "comment": "//\t\tnew Template().run();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3433, "comment": "//\t\tString id = getClass().getName().toLowerCase();\n"}, "Heuristic": []}, {"nl": {"id": 3433, "comment": "//\t\ttry {\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3433, "comment": "//\t\t\tSystem.setIn(new FileInputStream(id + \".in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3433, "comment": "//\t\t\tSystem.setOut(new PrintStream(new FileOutputStream(id + \".out\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3433, "comment": "//\t\t\tSystem.setIn(new FileInputStream(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3433, "comment": "//\t\t\tSystem.setOut(new PrintStream(new FileOutputStream(\"output.txt\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3433, "comment": "//\t\t} catch (FileNotFoundException e) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3433, "comment": "//\t\t\tthrow new RuntimeException();\n"}, "Heuristic": []}, {"nl": {"id": 3433, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3433, "comment": "//        int numTests = in.readInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3433, "comment": "//        for (int testNumber = 0; testNumber < numTests; testNumber++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3433, "comment": "//\t\t\tout.print(\"Case \" + (testNumber + 1) + \": \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3433, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3435, "comment": "//in=new BufferedReader(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3435, "comment": "//out=new PrintWriter(new FileWriter(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3439, "comment": "//System.getSecurityManager() == null;\n"}, "Heuristic": []}, {"nl": {"id": 3440, "comment": "// System.out.println(\"Enter\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3445, "comment": "//input = new BufferedReader(new FileReader(file + \".in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3445, "comment": "//print(ss, k);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3446, "comment": "//package round23;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3446, "comment": "//\tprivate String INPUT = add(\"a\", 100);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3447, "comment": "//TODO\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3447, "comment": "//tools//////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3448, "comment": "/**\n     * @param args\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3449, "comment": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3449, "comment": "/**\n *\n * @author Gaurav\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3449, "comment": "//System.out.println(g);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3449, "comment": "//System.out.println(s.substring(k,k+g.length()));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3450, "comment": "//contest 23. You're Given A String\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3451, "comment": "//              println(t);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3457, "comment": "/**\n * Mx NINJA 04:06:52 \u0635 14/01/2014\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3461, "comment": "/**\n * @author Egor Kulikov (egor@egork.net)\n *         Created on 14.03.2010\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3461, "comment": "//\t\tnew Template().run();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3461, "comment": "//\t\tString id = getClass().getName().toLowerCase();\n"}, "Heuristic": []}, {"nl": {"id": 3461, "comment": "//\t\ttry {\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3461, "comment": "//\t\t\tSystem.setIn(new FileInputStream(id + \".in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3461, "comment": "//\t\t\tSystem.setOut(new PrintStream(new FileOutputStream(id + \".out\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3461, "comment": "//\t\t\tSystem.setIn(new FileInputStream(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3461, "comment": "//\t\t\tSystem.setOut(new PrintStream(new FileOutputStream(\"output.txt\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3461, "comment": "//\t\t} catch (FileNotFoundException e) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3461, "comment": "//\t\t\tthrow new RuntimeException();\n"}, "Heuristic": []}, {"nl": {"id": 3461, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3461, "comment": "//        int numTests = in.readInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3461, "comment": "//        for (int testNumber = 0; testNumber < numTests; testNumber++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3461, "comment": "//\t\t\tout.print(\"Case \" + (testNumber + 1) + \": \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3461, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3464, "comment": "/**\n *\n * @author Prateep\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3464, "comment": "/**\n     * @param args the command line arguments\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3464, "comment": "// TODO code application logic here\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3465, "comment": "//\t\tbr = new BufferedReader(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3465, "comment": "//\t\tout = new PrintWriter(\"output.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3467, "comment": "//StreamTokenizer in;\n"}, "Heuristic": []}, {"nl": {"id": 3467, "comment": "//in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n"}, "Heuristic": []}, {"nl": {"id": 3467, "comment": "//int ni() throws IOException { in.nextToken(); return (int) in.nval; }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3468, "comment": "// -------------- Input/Output routines below ---------------//\n"}, "Heuristic": []}, {"nl": {"id": 3468, "comment": "// String problem = this.getClass().getName();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3468, "comment": "// System.exit(1);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3469, "comment": "//        \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3469, "comment": "//        char[] ccc = new char[1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3469, "comment": "//        String ddd = \"abcdef\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3469, "comment": "//        ddd.getChars(2, 3, ccc, 0);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3469, "comment": "//        \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3469, "comment": "//        String sssss = new String(ccc);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3469, "comment": "//      \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3469, "comment": "//        System.out.println(sssss);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3469, "comment": "//        \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3469, "comment": "//System.out.println(sss);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3469, "comment": "// out.flush();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3470, "comment": "/**\n * Created by IntelliJ IDEA.\n * User: shakhov\n * Date: 15.06.2011\n * Time: 15:22:46\n * To change this template use File | Settings | File Templates.\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3470, "comment": "//search\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3470, "comment": "//reader = new BufferedReader(new FileReader(\"LifeWithoutZeros.in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3470, "comment": "//writer = new PrintWriter(new BufferedWriter(new FileWriter(\"LifeWithoutZeros.out\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3470, "comment": "//long t=new Date().getTime();\n"}, "Heuristic": []}, {"nl": {"id": 3470, "comment": "//writer.println(t-new Date().getTime());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3478, "comment": "//input+=\"3\";\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3478, "comment": "//\tSystem.out.printf(\"%s %s %d\\n\", input.substring(a,a+c), input.substring(b,b+c), input.substring(a,a+c).compareTo(input.substring(b,b+c)));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3479, "comment": "/**\n * User: Kandy\n * Date: 12.07.2010\n * Time: 21:51:52\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3479, "comment": "//package codeforces.br23;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3480, "comment": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3480, "comment": "/**\n *\n * @author abdelrahman\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3480, "comment": "/**\n     * @param args the command line arguments\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3480, "comment": "// TODO code application logic here\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3481, "comment": "// in = new BufferedReader(new FileReader(new File(\"input.txt\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3481, "comment": "//out = new PrintWriter(new File(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3481, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3482, "comment": "/**\n * Mx 04:06:52 \u0635 14/01/2014\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3485, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3488, "comment": "/*\npolyakoff\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3488, "comment": "//        t = in.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3489, "comment": "/**\n    @author KhanhNguyenn\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3489, "comment": "// main solver\n"}, "Heuristic": []}, {"nl": {"id": 3489, "comment": "// sub-problem: 2 orders to merge together x1,x2,..,xn and y1,y2,..,ym\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3489, "comment": "// D\u1ef1a v\u00e0o b\u00e0i to\u00e1n chia k\u1eb9p Euler, ta ch\u1ee9ng minh dc s\u1ed1 c\u00e1ch merge l\u00e0\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3489, "comment": "// (m+n)C(m-1)=(m+n)C(n+1)\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3489, "comment": "// calculate nCk\n"}, "Heuristic": []}, {"nl": {"id": 3489, "comment": "// nCk= (n-1)C(k-1)+ (n-1)Ck\n"}, "Heuristic": []}, {"nl": {"id": 3489, "comment": "//dp[i][j]: number of ways to turn on first i , using j manually\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3489, "comment": "// @Override\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3489, "comment": "// public int compareTo(Pair o) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3489, "comment": "//     if (this.x > o.x){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3489, "comment": "//         return 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3489, "comment": "//     }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3489, "comment": "//     else if (this.x < o.x){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3489, "comment": "//         return -1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3489, "comment": "//     }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3489, "comment": "//     else{\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3489, "comment": "//         return Integer.compare(this.y, o.y);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3489, "comment": "//     }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3489, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3489, "comment": "// fast input reader class;\n"}, "Heuristic": []}, {"nl": {"id": 3490, "comment": "// StringBuilder uses java.lang\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3490, "comment": "// first value number of computers considered\n"}, "Heuristic": []}, {"nl": {"id": 3490, "comment": "// second value number of computers manually on\n"}, "Heuristic": []}, {"nl": {"id": 3490, "comment": "// from left to right, over first i computers\n"}, "Heuristic": []}, {"nl": {"id": 3490, "comment": "// number of computers turned on manually\n"}, "Heuristic": []}, {"nl": {"id": 3490, "comment": "// want to add dp[j][k]*factorial[k+(i-j-1)]*oneOverFactorial[k]*oneOverFactorial[i-j-1]*powerOfTwo[i-j-2]\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3490, "comment": "//System.out.print(st.toString());\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3490, "comment": "// i.e. ... 4 5 6\n"}, "Heuristic": []}, {"nl": {"id": 3490, "comment": "// i.e. 6 5 4 ...\n"}, "Heuristic": []}, {"nl": {"id": 3491, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3491, "comment": "// Total.\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3491, "comment": "// Switched on manually.\n"}, "Heuristic": []}, {"nl": {"id": 3491, "comment": "// Switched on manually in the first block.\n"}, "Heuristic": []}, {"nl": {"id": 3492, "comment": "//https://github.com/EgorKulikov/yaal/tree/master/lib/main/net/egork\n"}, "Heuristic": ["H1", "H2", "H9"]}, {"nl": {"id": 3493, "comment": "//\u56de\u8f66\uff0c\u7a7a\u884c\u60c5\u51b5\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3494, "comment": "//package com.company.cf.global14;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3494, "comment": "//        if (n == 1 && i != 1) return 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3494, "comment": "//        if (n == 2 && i == 1) return 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3494, "comment": "//        long res = (i * dp(n - 2, i - 1)) % M;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3495, "comment": "/**\n    @author KhanhNguyenn\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3495, "comment": "// main solver\n"}, "Heuristic": []}, {"nl": {"id": 3495, "comment": "// sub-problem: 2 orders to merge together x1,x2,..,xn and y1,y2,..,ym\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3495, "comment": "// D\u1ef1a v\u00e0o b\u00e0i to\u00e1n chia k\u1eb9p Euler, ta ch\u1ee9ng minh dc s\u1ed1 c\u00e1ch merge l\u00e0\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3495, "comment": "// (m+n)C(m-1)=(m+n)C(n+1)\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3495, "comment": "// calculate nCk\n"}, "Heuristic": []}, {"nl": {"id": 3495, "comment": "// nCk= (n-1)C(k-1)+ (n-1)Ck\n"}, "Heuristic": []}, {"nl": {"id": 3495, "comment": "//dp[i][j]: number of ways to turn on first i , using j manually\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3495, "comment": "// @Override\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3495, "comment": "// public int compareTo(Pair o) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3495, "comment": "//     if (this.x > o.x){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3495, "comment": "//         return 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3495, "comment": "//     }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3495, "comment": "//     else if (this.x < o.x){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3495, "comment": "//         return -1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3495, "comment": "//     }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3495, "comment": "//     else{\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3495, "comment": "//         return Integer.compare(this.y, o.y);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3495, "comment": "//     }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3495, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3495, "comment": "// fast input reader class;\n"}, "Heuristic": []}, {"nl": {"id": 3496, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author lucasr\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3496, "comment": "// size, cant\n"}, "Heuristic": []}, {"nl": {"id": 3497, "comment": "//make sure to make new file!\n"}, "Heuristic": []}, {"nl": {"id": 3497, "comment": "//what n you're on, what how many computers you've turned on manually\n"}, "Heuristic": []}, {"nl": {"id": 3497, "comment": "//initial\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3497, "comment": "//number for part up to previous block\n"}, "Heuristic": []}, {"nl": {"id": 3497, "comment": "//a choose b\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3497, "comment": "//from geeksforgeeks\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3497, "comment": "// q is quotient \n"}, "Heuristic": []}, {"nl": {"id": 3497, "comment": "// m is remainder now, process same as \n"}, "Heuristic": []}, {"nl": {"id": 3497, "comment": "// Euclid's algo \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3497, "comment": "// Update y and x \n"}, "Heuristic": []}, {"nl": {"id": 3497, "comment": "// Make x positive \n"}, "Heuristic": []}, {"nl": {"id": 3498, "comment": "//int t = readInt();\n"}, "Heuristic": []}, {"nl": {"id": 3498, "comment": "// index , total , cont\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3498, "comment": "//long dp[][][]=new  long[n+2][n+2][n+2];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3498, "comment": "//  dp[0][0][0]=1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3498, "comment": "///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3498, "comment": "// nothing\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3499, "comment": "//        InputReader in = new InputReader(new FileInputStream(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3499, "comment": "//        PrintWriter out = new PrintWriter(new BufferedOutputStream(new FileOutputStream(\"milkvisits.out\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3499, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3499, "comment": "//        long start = System.currentTimeMillis();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3499, "comment": "//        out.flush();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3502, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3502, "comment": "//            boolean success = false;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3502, "comment": "//            if (stringBuilderValueField != null) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3502, "comment": "//                try {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3502, "comment": "//                    char[] value = (char[]) stringBuilderValueField.get(cache);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3502, "comment": "//                    os.write(value, 0, cache.length());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3502, "comment": "//                    success = true;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3502, "comment": "//                } catch (Exception e) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3502, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3502, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3502, "comment": "//            if (!success) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3502, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3502, "comment": "//ans = calc(x);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3503, "comment": "/*fac = new long[nn + 1];\n        fac[1] = 1;\n        for(int i = 2; i <= nn; i++)\n            fac[i] = fac[i - 1] * i % MOD;*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3503, "comment": "/*pow2 = new long[nn + 1];\n        pow2[0] = 1L;\n        for(int i = 1; i <= nn; i++)\n            pow2[i] = pow2[i - 1] * 2L;*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3503, "comment": "/*inv = new long[nn + 1];\n        inv[1] = 1;\n        for (int i = 2; i <= nn; ++i)\n            inv[i] = (MOD - MOD / i) * inv[(int)(MOD % i)] % MOD;*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3503, "comment": "/*facInv = new long[nn + 1];\n        facInv[0] = facInv[1] = 1;\n        for (int i = 2; i <= nn; ++i)\n            facInv[i] = facInv[i - 1] * inv[i] % MOD;*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3503, "comment": "/*numOfDiffDiv = new int[nn + 1];\n        for(int i = 2; i <= nn; i++)\n            if(numOfDiffDiv[i] == 0)\n                for(int j = i; j <= nn; j += i)\n                    numOfDiv[j] ++;*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3503, "comment": "/*numOfDiv = new int[nn + 1];\n        numOfDiv[1] = 1;\n        for(int i = 2; i <= nn; i++) {\n            for(int j = 2; j * j <= i; j++) {\n                if(i % j == 0) {\n                    numOfDiv[i] = numOfDiv[i / j] + 1;\n                    break;\n                }\n            }\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3503, "comment": "/*\n        int t = 1;\n        //t = sc.ni();\n        while(t-- > 0) {\n            //boolean res = solve();\n            //out.println(res ? \"YES\" : \"NO\");\n            long res = solve();\n            out.println(res);\n        }*/"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": 3503, "comment": "/*String s = sc.nextLine();\n        char[] c = s.toCharArray();\n        int n = c.length;*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3503, "comment": "//static long MOD = 998_244_353L;\n"}, "Heuristic": []}, {"nl": {"id": 3503, "comment": "//static long MOD = 1_000_000_033L;\n"}, "Heuristic": []}, {"nl": {"id": 3503, "comment": "//static ArrayList <Integer> primes;\n"}, "Heuristic": []}, {"nl": {"id": 3503, "comment": "//static int[] primes;\n"}, "Heuristic": []}, {"nl": {"id": 3503, "comment": "//-----------PrintWriter for faster output---------------------------------\n"}, "Heuristic": []}, {"nl": {"id": 3503, "comment": "// Start writing your solution here. -------------------------------------\n"}, "Heuristic": []}, {"nl": {"id": 3503, "comment": "//primes = sieveOfEratosthenes(100001);\n"}, "Heuristic": []}, {"nl": {"id": 3503, "comment": "//t = sc.ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3503, "comment": "//boolean res = solve();\n"}, "Heuristic": []}, {"nl": {"id": 3503, "comment": "//out.println(res ? \"YES\" : \"NO\");\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 3503, "comment": "//t = sc.ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3503, "comment": "//out.println(\"Case #\" + tt + \": \" + res);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3503, "comment": "//out.println(res ? \"YES\" : \"NO\");\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 3503, "comment": "//int n = sc.ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3503, "comment": "//long[] a =  new long[n];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3503, "comment": "//for(int i = 0; i < n; i++) a[i] = sc.nl();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3503, "comment": "//naft[len + 1][len + 2] -= bef[len][ind];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3503, "comment": "//naft[len + 1][len + 2] -= aft[len][ind];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3503, "comment": "//nbef[len + 1][len + 2] -= dp2[0][len][ind] + dp2[1][len][ind];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3503, "comment": "// edges to adjacency list by uwi\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3503, "comment": "// tree diameter by uwi\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3503, "comment": "// SegmentTree range min/max query by uwi\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3503, "comment": "//-----------MyScanner class for faster input----------\n"}, "Heuristic": []}, {"nl": {"id": 3503, "comment": "//--------------------------------------------------------\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3504, "comment": "//static ArrayList<Integer>a;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3504, "comment": "//static String a,b;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3504, "comment": "//A();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3504, "comment": "//B();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3504, "comment": "//C();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3504, "comment": "//D();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3504, "comment": "//F();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3504, "comment": "//G();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3504, "comment": "//int grp=1;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3504, "comment": "//ol(\"\"+pow2[3]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3505, "comment": "/*\nbts songs to dance to:\nI need U\nRun\nON\nFilter\nI'm fine\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3505, "comment": "//0^0 = 1\n"}, "Heuristic": []}, {"nl": {"id": 3506, "comment": "//last thing was skipped, impossible\n"}, "Heuristic": []}, {"nl": {"id": 3506, "comment": "//last thing was included, 1 way of doing that\n"}, "Heuristic": []}, {"nl": {"id": 3506, "comment": "//TODO: brute force number of xs to place\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3509, "comment": "//shuffle, then sort \n"}, "Heuristic": []}, {"nl": {"id": 3509, "comment": "//shuffle, then sort \n"}, "Heuristic": []}, {"nl": {"id": 3510, "comment": "/*\n                             ;\\\n                            |' \\\n         _                  ; : ;\n        / `-.              /: : |\n       |  ,-.`-.          ,': : |\n       \\  :  `. `.       ,'-. : |\n        \\ ;    ;  `-.__,'    `-.|\n         \\ ;   ;  :::  ,::'`:.  `.\n          \\ `-. :  `    :.    `.  \\\n           \\   \\    ,   ;   ,:    (\\\n            \\   :., :.    ,'o)): ` `-.\n           ,/,' ;' ,::\"'`.`---'   `.  `-._\n         ,/  :  ; '\"      `;'          ,--`.\n        ;/   :; ;             ,:'     (   ,:)\n          ,.,:.    ; ,:.,  ,-._ `.     \\\"\"'/\n          '::'     `:'`  ,'(  \\`._____.-'\"'\n             ;,   ;  `.  `. `._`-.  \\\\\n             ;:.  ;:       `-._`-.\\  \\`.\n              '`:. :        |' `. `\\  ) \\\n      -hrr-      ` ;:       |    `--\\__,'\n                   '`      ,'\n                        ,-'\n\n\n                      free bug dog\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3510, "comment": "// Don't place your source in a package\n"}, "Heuristic": []}, {"nl": {"id": 3510, "comment": "// Please name your class Main\n"}, "Heuristic": []}, {"nl": {"id": 3510, "comment": "//pow[cnt-1]\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3511, "comment": "// Main Code at the Bottom\n"}, "Heuristic": []}, {"nl": {"id": 3511, "comment": "//Fast IO class\n"}, "Heuristic": []}, {"nl": {"id": 3511, "comment": "//env=true;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3511, "comment": "//debug\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3511, "comment": "//Global variables and functions\n"}, "Heuristic": []}, {"nl": {"id": 3511, "comment": "//Main function(The main code starts from here)\n"}, "Heuristic": []}, {"nl": {"id": 3511, "comment": "//test=sc.nextInt();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3512, "comment": "//-----------------Utility--------------------------------------------\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3512, "comment": "//0^0 = 1\n"}, "Heuristic": []}, {"nl": {"id": 3512, "comment": "//--------------------------------------------------------------------\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3513, "comment": "// practice with kaiboy, coached by rainboy\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3514, "comment": "// number of computers on\n"}, "Heuristic": []}, {"nl": {"id": 3514, "comment": "// number manually turned on\n"}, "Heuristic": []}, {"nl": {"id": 3514, "comment": "// number of computers manually turned on in next \"block\"\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3517, "comment": "//    call dp[i][j] is number ways can turn on i computer but we just turn on j computer manually.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3518, "comment": "//\tSystem.out.println((j + k) + \" \" + k + \" - \" + choose[j + k][k]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3518, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3518, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3518, "comment": "//private static long getGCD(long l, long m) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3518, "comment": "//// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3518, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3518, "comment": "//long t1 = Math.min(l, m);\n"}, "Heuristic": []}, {"nl": {"id": 3518, "comment": "//long t2 = Math.max(l, m);\n"}, "Heuristic": []}, {"nl": {"id": 3518, "comment": "//while (true) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3518, "comment": "//\tlong temp = t2 % t1;\n"}, "Heuristic": []}, {"nl": {"id": 3518, "comment": "//\tif (temp == 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3518, "comment": "//\t\treturn t1;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3518, "comment": "//\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3518, "comment": "//\tt2 = t1;\n"}, "Heuristic": []}, {"nl": {"id": 3518, "comment": "//\tt1 = temp;\n"}, "Heuristic": []}, {"nl": {"id": 3518, "comment": "//}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3519, "comment": "// dp[i][auto]\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3519, "comment": "//-----------MyScanner class for faster input----------\n"}, "Heuristic": []}, {"nl": {"id": 3520, "comment": "/*$%:+ML,g',1k~^dfBSUBskMeZ~x2(Q6>Pq}k\",\n\t\t\t\"XQseb,o}gb]X/'2P%Q$%@Km16RjWt#91?0][T%}q==jMrJGCPP6y?{!OJ:AQ_2dfnHE*Ys+8aS(+D`s&'@A*)E<hlY>v{N@GM!U$jyRr%Q';X^;@gJ#2&xV\",\n\t\t\t\"DELtxBvP@0IqcRU%L-`xQ4no:.|f,NTu1xr`wDGEIVm-q@,G8|1Wst3v)9Dxdc77a1mM6&PgJKY9B~rMVkIoWIG'N>Mrl9YNg)o3)P}mUt^)8-cb$xI_;oX:\",\n\t\t\t\"7lAu)]H&x-r)=mE]6P2B&Ifm(9F9!zNjJd&TN,b}mE;BPwb/*Im&&^pdI%@,U&8ZA24^Us]WYEc[dS[<87^^~/+Nm;?jMe|TU[mP#N,_D}h%-CQxL86/HF-+6\",\n\t\t\t\"/t_'OVLqoVtJlGd%mSg;o^7S(~wf9+>I'INo<[BqyTn]v<PaeLj~eQ~}~X32b7ZTcAMzHu)6jtT2H?@M95(C1:?aNhYMKC(kvP=Z^~+6P@|viR#utIW/iI!3KV\",\n\t\t\t\"*u-akgNqo>b6tkqN5DJSt9NoLl<?DE>+T4N-|<(&kFCv$Q%-fo9dC*4U!gnv<w,Xc4bXAhBV|Jm,Z]J0pMlXBy=*nbA_Pjbr#O;$%dfzGRd}KeJQo/RZNogHMpF\",\n\t\t\t\"'eP7fDQH-H#!j|h>)IoEF6-WZC]lIVJ/@|?/s9&sqd)p^~ugx~zDDH`&P7ch~iZ-jKp5aGQo-v1@I0ugW3LsiA%U:CP`UP@jc>*E30?~zglP0lXb@p(<c$ePRwEN\",\n\t\t\t\"%cQ]O`I?Z^[TbsO6:jNKN`y7o[~KhRv~iu=cY;NVxR*ZQxNrIpfSqw7K{#{{4dOtIsKF-':@tqyVW[{x9t4U}[e1-0XXTABM^.J,{Tc{(wr3Uj@+O7`rznkDp>s]J\",\n\t\t\t\"$G?d*@BxvQ>{2NdbzHeR[LIa-7Q`Puj(Ht)5f+GP7]1AoL[>IIW(>*_Z2`H2Pq:pj2JQ^t|tr|;d5:JS/cG37|x(tV~iHgDQN-3-tyAc{hf#kdsD=lbd`v{64$E2e*\",\n\t\t\t\"#VUQemGH]0leFuV^:<V`hp?J7x?aenY:C^^R:27~{+4jYd+A4{txe>S*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3520, "comment": "/*i;W[@`:s(}ydvSS6\",\n\t\t\t\"$^s.%XfK,2Us*n]WU'k9Y>9Ti?20]8RxV2EX'=SXH:,X@;e|.Sb;.7R7wCrll+HHJ|O>jw:!P5[i?v'w~{:MycsG{*[}8JgOsqC%SL0t[HM}i41=Jf}')SGy@tfqofVg:6&Q|w,#b&/H'/.gM3>HqO:Aqi&$W|U1wGV\",\n\t\t\t\"$(,3<E-seNZ&V1R_W=Spc4Br?Rg4?~dFw$an{FvyZMra{{gqA9+.X|vAGE<<L##Eo!CMQ~!e?e,,h3=K?<wT)|e+z:%2.k@VLav8M|,N@)/ROo']/KQ1P:X|H%Po<NFFj-+%U729dyXh,-~=2~fTYI3|AB~u_PcH-];F\",\n\t\t\t\"#Zl-GtX['ct@ch9KkiOLP]77.6VNelm_SNNJdW.dFGXRP%<TwO#K98r$NfUG*#-L({8o%>XZF}J|D?E0DEL@v83NC.L!wex96!O|5QQ_*e7RG=j-Sj'o>2*{HV<)GOwH487evAZNk=r-T1y.=m,&Vi.(knw@I$;T,58^N\",\n\t\t\t\"#:wmn8J6`[w<COAVr/!`3[G5V}yy;>2<UfHofYl%Uhh;t&1M<H$Y7q(hJNy68M=yQESKE)T19)Z;oRk9WWNe4{]G1J<_oCXnTy`%GEly&XLiN[K`H<r^Z:9s>Bei|x({E(Aoo5T{_BYg%2Edli_86seC(U~'B+>1]FYq$J\",\n\t\t\t\"#!8/U;c]1nFCeP9%:a!g0~F%q3lXy#KH[k@uUwmEAGJt,wmWt8L{MMQ7Sr6'S!+L<z=tFrp^:'(^49)2fXPqLWd#<tHob8o^:|o9i]HcFT^;,8tDi#ES>'='m~au8*d?Dsmn>#WSWrgYm<5~x:g=(!gS%3/{L<~EgF!1s$*\",\n\t\t\t\"l'7.(t`M4Y7Tk7XzHdB&z`(SJ>m?-f(bJ3{6uUJbV4+;qxH#UAT^aB|4zph0r(2z52!]Vrcx*h3!Z_<rw@bUdg6]B?6M;XK2-I4#_H$8s0Gjo@2GGER/F7/o9]Y?]rb@50|~5UVv_o(y9GjTwNs]nvw4wFBw0,{Gz7N|Ec2\",\n\t\t\t\"]*=2VfKD12h27;a()?>O9fOx5@[2,TyP$:Xbhxtx]9}xp,-;&yi/Fo|0eMDY-50VUl)QoLe9=N0ed/1!<Q>Qoa5yto%M@Z,HIoStM+YJw;?vva-.}tFowDB#Wr/t14u4'nx%h6b1]XMVEMJEamjX;v=/<Km3>$S~N[5h)9T{\",\n\t\t\t\"PD(W!DH&6nUOB'l@y{vk3w^|[rZt.RGB+rS=m~CrP[XY#LewEHqr{I.3km60z=fFEG31N:tlvhC(A4gEa;.*grU~zK6AuPX31.+0r*;[a[19~H/h~PN8Gt1hlA=iy$7fJ.N`bKWSCL{v&BJ#f8?t`zjg<V(wRRU>cbfWcVofN\",\n\t\t\t\"G0^NuhwXa4w~)jZ[j*{E%YMCaa<&H.}X945dS|w^g;'GQc<-.a(E&5g/:ZEWy?abIifub!S|`!&]&AZs'ePT?t$6ZZCB`UI@|moZ75`Sg:_nG}k6A`&9<<^[>os<kF;0F4qe2!PA^}fqmcypQwv2)hC`D,*rEqHAm)uL_I;bl6\",\n\t\t\t\"?u2[Z<@uQ{/!E3#STHVkA'RhMEn,'e@y}aWko'B&:3Mu?UVS-@V;Ink)`@yu]:~My@|Xiz7rP@fa.GW~DlD=gKzDxOH{6fATk-UFfFe=>_8Cqi:zL{MP#[HM'6ob$BW-(@;x[H`}jv@lWTdXKMdyZ}mK=|=U+*ePW0`AR0Kuy-N\",\n\t\t\t\":.{n;Au!==aW_~~/31:%|ap'pU+C9#>Hlf;h;HKs)1CYZnJ5ly_+@AM%,@N`|Eihs-c~{A~6|1,M1cU>*Ej`k:&.VOu;t)&e~~#MjS5,jIA;nB4^V*|T_F_z[-,A5}jP/_/i~Gc;*(fL8p%0U-A},qRIs*YKv>qa!y19MO~^(Vy{\",\n\t\t\t\"5VN9jpHpDfSUTBca)i8|h}_bRyht0S'H!{CRO9.Sq[efz^ORXP8zS}x8~;];v@eD^HGNAle,7ZI`T1NU4Mg~{W(W-&M[<h|Q*[l1:/3!'g*aYkfa[REbi`==?-PzhwO:%'sXir$}=O}~Cs-vr5YyZ%qZCPzPPnFZ8h^fO~)wB|dyk\",\n\t\t\t\"1x3Vt~rj21Twzr|,,=oz8EPC)V[~)lB|>thqaR,X?GC(h`u)I7K/BWtaGwt_!_vcA%!zerw[UCYgMvE,KBX<%m8unQG2aTCbOqNk[v%}%`]IH]@0n=4^G#}`jdM3|Y2+n|TLx=~d/y0fqc&n,OZS^]3Z,]%Q#hQoYNX|b)e~?PhY)o\",\n\t\t\t\"/!t6rJh<$~fBmH<nWA'=$:;%E'e`;}v/jOSQ^b4YA*GEiGrK{~4fync%3;JCq+oDTJhIi|)u$TC>3!qC6a=d`ccOA,!aEI6XA~_W0%S4,2/KseIf>8eclVHN&a91=uADU2|N[-*E-xv+P@9xHT7&'w$DxgfW?nOJ,2NFOCcY@7s24]*\",\n\t\t\t\",`HDkC$U.~U'arpO^7jRs]noo(UES(0LwSUbf@#+JSp0sfGq{*b@i`n}Rc|9>Bu>_NU>#_DG)%QYR^a`od5Ur|x8lyt&]Wc}f{b5}c7:nQdLrV.Dqy|XUCZlrgL-g6uyCW8pg2DC[0qxk0B'!tA)s[y_?}xR`VGm$0pPcPn}g[Q>oD5.\",\n\t\t\t\"*jji4DRB!hfp?ZuKi9k'ac`.p6,[NI[W#/?|N!'[kkltdB+{[9p^&~s7_[4^)[[|S.)s+Aou|O;yO&xEZD^)'U#A2F}V?iqsuurhiF.N!)7K!t@^-LGY_n2cxwvAT>q>>3go&'seAX~WI2)qxnX8n|}*:*Xb|)&mR<;RbxYd<}*fg47TZ\",\n\t\t\t\")9CRIedE3+m?Od0R1]irO:W=/#h7)Lh=~{KW0X0f^g9XrRAdlZ$z?Fc;x7j8Sd-2|g55F$;cXNhs/mw<s,TQDSeWsm33#3(R{,Ob8`2~@{k]$1Jwe-yT'`c&x3y(O-OmpGPhh^LrZS6j`?yx4~7T]vdtnje8zi{@=jd05}`Z>IkH'5kSKV\",\n\t\t\t\"(#HoN7l>L4n=^ANA(IaRW.G[)a~Ba;X,w{e8v8clkID!fYH+5{|xDSS$uC6syF88!9+a9ih_egHrdO@.;1*{d8^F:zB-99jpxCc@:X8GEVd*'&05V`~33r%m+bT'lN`G[k|`QHd|TZtk4GW^DBSQ7e}K0muStmgPPmt`.n}-|KkY03@5^2s\",\n\t\t\t\"'!^B^p',7STXpZVf!2wPNs!z53Tk_-^^pl8bur(,DSd-'NfF0GGO+'=a2*d#8-^Ja>&jO:J+tBeaIU&^5e^11z{f~{ytN6ul%t.p-3yu$VYB-tfY(/oPp9aH1j/L26}w{'{scAx]z8@zK7[E8yMBe(HyyAg!;ccXrY-_N'@a!(&L(Dnb/cTk\",\n\t\t\t\"&2pjLw&NC{giV*juxwZWN_}/[*!%Ti?4@;z]A[]Dpj9h%~qj1_jYBnxTzo*(yHv`SJ^O]gr5jV{)(e2zqQZ%:t-CG+(Yh5K,%+!AAf:ME/x#fovahf5<|:Fw<oGcpve8n:[p[sThf_RUs&f:y}s&3wq/gD./o>3xtwx!+ir<@IB.*~}m6WypV\",\n\t\t\t\"%Pd*8Gq8{;atxi@9$8q?&?f#T]yuZ@^,6'54subP_v/fw,i.Z0|wzZ0C>Kyi`Sc@w4kUsL^CAlKy-Jza<4?pk+XHykmfao.1jaLrNOiidfXW`_8'_xjQkzN1_rC`uJ/>xaq=>wTY7'HY4~2Z=_Cjmj$4EIKc4H:#w8[*CKrh]7C=.S`R;8jcH:\",\n\t\t\t\"$zY+<nWAv5i;5blo,oAh0F/w[:=L@%K1XC1Op3Li<aDJFGJQWPb8Pd35kPWnJjUL<|hoHVruU)5ikGU6/s*|o1<E4Co{yhRn*>[C1+$fD0@A:1Xw^.m}j3NJ+3vw;Z.`WIKy!ZUBTS>k(y5qJnaw0X.)d*=oAk{B{qJw.+10!m$m&4Al=A1f0h6\",\n\t\t\t\"$OHucOmzWj'k|Jum@9Mg64h49fO.<8K2<m;z`P';F50%ZrwSiHx2t1fS[/Vx'G~#]6GA%x`QVa6/'%boOHc2U+4kXCnB38j]ff&7PfpLTCa*EDDM[*)ry;]$,o~vrZz=bw}CYJE-~|}^ubb6O{~]k9dB5?uW^F&MIYW@lgQRYK*zVy(Ur}2n4vtV\",\n\t\t\t\"$,PB8I?Ky'%q[q^yot]_Sjm8Wem9n=BQ&e2OXz#}<O)5gpTR7fucCdbZ[yh6a&xJkk~&=V;4!Ug,>sKDH|YQ((c@x=U6i@i<'U3B6.HtIftpsNF:xp<luo!!'9k94a}G=fV?[h$lWDCO,o$A_eWM=;n#/Xz?=4K<2:[4n0miA1kDTcF;`JNr~tbOF\",\n\t\t\t\"#lOxX(0q*A!6x.j;!R'WxF3pC=Vx}q(RXzrm,&EyEr1C[a|l,QZKf|+OUBof`Viu]gl8VQn<AoNKCcc.k8N#rEuv.2_}on<_%s1=Co/<c>3t];!V{']M/*&jJRzd,?ZiD[x%.`[5>`SDpjK<WI?N}Mk)wf2=03N5q4'uc]xqVz/n~:L~GG#CjO=tjN\",\n\t\t\t\"#S@AU=fe$SHn]yzn6gqIfj('27i23vxet%fC4Fy/8('5p.1'RED9mctIV'Tm]2H0BA'wCtJza8k>&&JC67wZtn$O`4HNixlu9xHK.(z:4u'8bq>f@NUXG-fktAC,m[8^t1E=@58C5%_n}I#S2-C0:]*!fx^]k$=xGXaEyh7puIJVR*34^DXH(ArqLeJ\",\n\t\t\t\"#?-RrehybIle8R52XUN-S51F3S*IX;?(cBUR25Uv(_}JP{?OI:P~2L5>LNU-Lb8lqf~mpkvv/s[m7_L?ov5Xb.(7IMSaBF]Pm~Wy)+0k90csQ{URTd:%zd}wkT3W87xMd;zJNHBFHH4!^28nJW0l^t^57H5^o%0|{x63}4rm%'<6!=@)(kWl7oNm3Qa*\",\n\t\t\t\"#.2hWTPyqLPcf!YQV^I.ok9GxDNS#ENgo(8{r198n0M(gLp8wZ<-4F4[$mmI;vfrbKM?5pK8S]}6jV!a;ZQAEKo*SI;IOQ]M#-{.;=[Wsn?Df^,RUEX#IC6Q>[~UZono|L'B}Ux^meu(F6#oSkphejQU+q57hm(z}<s@oW$+VU5QBl6Rzu{zpc$B?HIc2\",\n\t\t\t\"|xQ<OktmmS8Ky.b)v<(=>^0Wm['.76wt>X`B?9)fuW0)JoDfwQzn(MAedlPn}ec'Ce:7a>3(6)6b+)SoL4&)trtualfml=v$6Q5lVbzlhb0k_f=oqfzI:7n5Qg|y58?mJ$.$r+{^1#+cDWS.xAd]Vi@>+##Bsm8n`3OZhV9wiRT(lpHgT9iqZ5#m,(=4{\",\n\t\t\t\"pv*~5&:|m~ss@H+X|H0h~{XZ'oe}VR1'N#q3fECr1p%l5&j7c(WgI8<TPL>0Y.X*P6(V{e4e-[;x,a/9).'tNQ]c;kbZyQ%kYH;(3CaS(rS4XT~/e$[x/~#mgDoxv55I@s?CEs`*^_^ZbY/G3zD.3SW]a_c?g,j}6~]5?9kg_K#~J7>L<z}i&|}v'Ns~AN\",\n\t\t\t\"fe`c<@@ER5E?wAhfkO3jAKY+$anJ4X4iu{h![)lqYWaK98]!ZrQ3w$5Z'e3$5O~c!S5sMta/lpI4&8G4.@DpF?inWC1dDbZn`=Bz$M!;|8G):_X:q,/`<THEO5oVfJAum6}lHQQH$Qy!BUHe~vSP7<C>x@ggqh~Sk5+BxKu5ASf(rr%ls8ZqR;J:MjpD,h6\",\n\t\t\t\"^)fTj5!q<yp).wIma11RS7,=?v1-]iV8-fvs0m+eBTCC8*h@;I-YEXC{o#gHkz@CEz2u6W~r^f9'Rm8*.+2OQZzpIUjO94@m<aJY`|~ynb$Pg.R/j+3,DnahKN!3FX1:v4lJp_X'<lp0a+G{Sc=Dz$)BWqF|W2vEJ)NJpTmvi[+pa;+)aF9rM*g)PO-WminN\",\n\t\t\t\"UevaP{tsZ_IsFO.O,DrTETjhFk[Wm@#Y!IL:5t/CJ+eq+HwWl-OYn1Yp8zF$cJbFVw(rVM6A6xm]~:#rxW;mW+z:!>bGh%#/#>ZFPr`6eKpF8l%*tBz&wG@|yVt-6LFUUS4JuE,o@9&hYOGjJ:+<&o>nW);'0BvR/iWa{'%a/8vU/=}t$%p2KBHBS_KjSy+m{\",\n\t\t\t\"OJ{`D$g@95?7dOu1+UxJKIgk:kRZ!I1jiWpANY{$[9.BWkzDVt<yHs?dT~p^m%U@]30Q$-K=&?+OcjxOA(?:`_C.LUElc$Xr75ZGBVUiG/)1nQW}?5cWds>+D'3E~zHE|.a&M#$F:/4Gwh3-y}IE]r@A@)%/:^=NpD^*H2|J@TL~@G)gbvDQKDv2lI!xa|,2Dk\",\n\t\t\t\"J($ts4G+1>s:%rtmu!H*(UG%HoXPAR0)(c(_mDXZW?c|1:i*0Vq!gS2c[8heGEh?-KbP[k:A=7Y<M:IG/-5F=[Z/s/;:tVgk?,$|mjYbv1fF/t[di::Kp%3}l%eC}F!RGzy/1BOwfTA#}?5$`|StC$^Jc{b(z~~ALPw/[~]WMXi+>F=3=,MXmBvf](f}cLPHp1o\",\n\t\t\t\"EJ}~.I!*LesVOH,}'d^+y`qqHU0B2?<MERaZ_{E=yP&9ZTn/lL'dpd%qR]gmH}&(Rmv#i7QjV'1PgKnddXjj%sb$e3d5a&llD]q.Tq-p%dOn@F&6+Mw/Z1zfjcs:}vW|&]9H'4A<qs;)62i77F$5O-)AB&<SXi]:Zo>[U#CyBl|gN?D|eR~VD2ZvGsOlJ.W((m]*\",\n\t\t\t\"ALzX&|aT.Dmt`:~9xe7&fBf0vx+D:ZKNp9l9s3B%96fh.IXnH~R'an0yT?8{cVUG>0XF[*O=;nr[N(,tpq3^H(Aq*!h6.5%%cySP?;?bY4nfEyJ+,=rd8?9Hj[Xde.|Q:;_VoTV<;ep'T5kX4z(,.Mq19>c@y4VB+`|$}TF3,}ythw$VqVpMZ%N1^o*H=BMmE}vz.\",\n\t\t\t\">$rw|!m?2><`[:&M2C~i(d+iZMYy<dI7Gv=qzvvp*'G:=TOy3Up]|&o;(sc,se!5o>^kT~a!HFGqZVOGonQ7G+)lIYGe9!ys=Y!X|GJ@([iWe'e.QQKs+V`:^Ip=W1.^~Wg?y3IR6YNWV:qU`a3naI-I9#LK*}Z&Et;$?H1fgIcYSl:pwa{8uo.[0$pL3n@<qanU}Z\",\n\t\t\t\";'3^il_9O)ZDc7b@u'P(0|&4WuNdD--=?b[GdoBj'qqswyT^oYv.`UmEkrBAEM0/[5q>6+,a0._sDs^;XCo/_JkgCae>]9E^kL4=#?6u}QLcBU/{s$VYuVK'jbCF&+JEO(a9.f!./=Ph5a2votzQj8|(KMg#bSQZdU*@eYem{leJ?kN8|$&xqTYg_vrZJ'::'Sk./;V\",\n\t\t\t\"8MZ?;{+LTa;B,{[N^tb=&K&xKbuz(>oY:Y<BZTIC]q@STh_a:_>V>x}bA~vEb4S4zw5+NYd@e@*e&Y^?NDbUGqb&4VYj!kLq!z,f[kb+h+a2WC#>Y1kRt0`!i|3A'Pvo:Q]O@(QYZ}/6no[T+rV'rx[(}cZholzWm|Ykw<&i,u>!DK=rKAa!}9c-C9OLb{ag4sPTfl*s\",\n\t\t\t\"66pK~$<x#nX}}G2ov/*D3nSu{O&'w[ZFY5x*{9$;'v/}Xxe|{#?hzRC;%-Gly58=@)%v@p#d&&gyd520|(?>-P3zl%HZol(aQGhI}>_qSWGlV(@'ZvweZd<TjH)ovAS;NBc?[P<YJXB1JFxJW!YbG:Xf)nO#I4|<i_8)e,#>z_riy,T#AW=j3)GUI*5!pT9;Gj{o<E7(k\",\n\t\t\t\"4:J?]u@Lll<=)L~k(&DLSSq+oVUGVl@]Upgd%0l@&Qy0w]2&*OrS,w*~B6O_F?PW.byYh'vU,&1bQMv^*Q}P7byDt-!F@Y%RTkj$4vv1+UZNui~~>nlyjPzdgbpr&}/kK/RTx7PMBbl6)~(,JhS}gu$&./z7d[0aa*!Z,J88am1FfYk[17~6l;6Se5y+#.k!}.Qgu)X]/V\",\n\t\t\t\"2T_]&ocY++_6VV{$.GzkrjbY1+F&}bWvhUAEYmSKj}}3{nvy8J&U7QAFeFgOONyG/id2%p^Oc[WLC9XteY~by)UK@X]1{=TdWoDxAUvDE(}T3-[(jEt:o`e^OkdZb3z20;$%4t;l1Zs87l+DOV+|IFMZ$+7|DqL(<s-POEg^]nSL`G)Re1t?(*#f6GlYf`)O^;mnG2@:f$:\",\n\t\t\t\"1&AaeWkkM6l0VZnBT7qOB)A$@*:T>KfPz6#*Kk[pOe7SU19>JLD0um!fmCwL'US+5[Ss=oW/BfNi;BTku??4Im]ip9n}~g2D(Dtg@=_.AMA-:|Y{&g}ZfdXe(5;`H//*Ns~ca3SUeOhz])%cbr]D-;qt19pyJYNTH6=vl[QX3*msbQNp!,gV=F:^m8KOz,jut_d#ViZHxE|6\",\n\t\t\t\"/enI@^+TreiDlM6uffShI7yAj.F?Ow+P',EXBy$^OF#Gom|V;~AkwQ0zKG!cTI%jP~#luZiKbLLQ|sG;?67y-@S;Ty9/;v'b+p4zu,P1LP[E%u4efl*I%iZMt#}U;S6$@(1=>h*imkBG2qdJ:pO+y(Q~.g|~+?FFe:`gVa~]NaFyC!eHkV3onN;L{Q#1ySeHB8pA@AWK?r~CV\",\n\t\t\t\".Un-RzOkdbH$-en3szwY~^Af?hTU)]iSk.4%F*@[*ldxO'/W6%nhDF2SPX^>[U`fn{y4MEMYOz:$PB6u';8T'*<L`*'c`,;!uJ`kb90#?|$hYmUJw#UdGgnfJ%!)H}mw76#*.)i,'scblCSMS:7b=uz={5)~Cr!N&T}L/.pMt!.Ji_+hIw4]iu{dqrhg@DV5/Ul]>#X=.]9FdF\",\n\t\t\t\"-SG;#)fjZ`(Enb}`}W*H/VxeQa7Rj~jTV^PP;O&Fw^'CBHG[JXYeYHZ+2l7;G/G0ct/klpDKpq|CcK5jd>f,y:g4TyAmIPJFh{x5+HT]1tKy*|vph2kMRx}ltKn'|@Xew!>/sE+k.a@e(hDOfe<%j],euH(/`inABzDnZF!dAJEmln.F_WJ'l-92?-|zgC,f<S0lgcxb^9E{2vN\",\n\t\t\t\",[yX){E~e9S4jvQT/~Aakj=uo/4@*gD3,V*D8ofysX1>Ae-xXq,}:rbT{,HTIo'ZMA&i_DpHO%Q&Q7>>xZQ*dTP2_`oXz0(cO$aM0d{jeNH.?(5F-sg7$9KRkFr)NgGC<3M`Jm(Xs&8]K^+9g^;jSj-Nx&dK|li!A73VXF;'6yLj_Mb8Gk-za{wT0MW0>&^BwqJ;qmQ)P?H)n1HJ\",\n\t\t\t\"+o#r6Pnw$cD996'^:%b$n&j,0M?G|GHN#y9(1k[niN.7ZpfH|<wMH*eU.N9R0(T95(7WaL#SfK^0n_c&k7#/X?+YFj|iv#^p61D[~(:`Q7kFu$?VIL7$knd(Hl`-qjyd{9`b?d(m$*Z.1z(e_v:UE%@qI#nj^R7%F[Vb6&h'=bPn%8TCgA;kuuIV&)~u'n7sC~KIG_XP,zOl3.%@*\",\n\t\t\t\"+,JO<qcGu5bN/#%H`j}_DKpe09'ECkP)/s@fqz4!]J#AX]&R8f=|/TKnL2#=XM[1YrBFU^E94/536qmN?ZE.[Dk4OVT,l.++@m+I5tT$nZpWbGo}$o8`0/*{>awt)US<.8{Junv/Ds8z:iZ|^q}S:CA[5,$<CjRW[y|cN9<oU]#&vG|hxvc;s:;FD_M2KWH,TkW'MZLn4?7Gb6TIc2\",\n\t\t\t\"*N1[!]mY?Jj#d`:'`9${KbD!(Pt7~jyE4/AT3y@eHG-:%kGs:Mj0J(k^Ua)YlmWR2B>vcUR)EL_ro]^uYOLVcGWe+4dp8ew(l'G6~5%5!D$5KPf,+k)/Y<%>#g-v=|*_x=^E}g{Us.'Ru5Rv7VYpB_K_j@[75!Mh+x,e`kO;PHk|X)e{//t6}<:CV{>`)Mu1fM_hj.$>5j|_Z#c)yq{\",\n\t\t\t\")w?e1OFY04O8C,8ulv*]M0'`67yRZ|AOqt!+o<2g6l-RZn6[Bm]%7{&%KH.>Y5&w0n*Kp*zJbY<]-xwLjA>nI7,TDj]Mp?Qt'wUz~0W*Qd_/SF'PMPdPa4WS2aL&MKrt2e$3NxEz{>V#ZwL5Zkg4b--jP0=o+ZIg8E/~B9~Fjv;8YIr!xWVN^9']ZH}FxlTAr|,0O!pw-7OeMMm:?/zN\",\n\t\t\t\")H.Y(S1~@HuNS/&&*qk1w{1V;{IsIcRDYDrx`BO0Fu?3C-!xR^uNLzpl~2UafSvwtQ7sy%RveJkiL*MMeJ6^mlGaShVj6J!_nt%<MURec4bvC^IuQA^v8Dl7Wr]t[bw?D8Nl{z:#Y#J|EuO-?MK'y/@w6S)MD9b@x$z3[o]?zvmv+=35RG%=?Mona((Ta%_Wc/QEx&>0wUIC->&T*hOd6\",\n\t\t\t\"({zdo_T@^?&st*6ZCH4F(nJ~oWkmJ/]-1$AMJ{W;y_xDV:GWu<M1Fss~3n=I<ng8gWsZzn:N3>ah*Z*(KSX67WiMz.(_4hg_f^^%3#9U.@'oFJ<4mk+2HHc&3TM|e'5NEd2=3U>-O{~EAV;RJ%ICi$~kQY8<PW|m$|IPl6vW0*H@~la5udc%'s^/t|0s[}^-q8o3UD'/qlVbnc4]!nLYQN\",\n\t\t\t\"(V4iSgme]A-r)`jW>0kIH_fM7&$}JM-_Kn/mM]Ov)k-Fq*e&ts=]j1Pb$lPO`sO-al2xp*8c*7o7#lEMS_cOUE_X=PL`/jsfLIwAn$wRfY5-n:fl,k:PR8hCrKw7BGgUc3J2plF6!dD[Duy][J0l8MSc^6q#[J##A8lQw9V5=U1#{+^+_UdoC5hM5;)o4{J>l%@wEa=;|e]aeWV<Ddttma{\",\n\t\t\t\"(5FP#L;TnJb)@wYlgh`V&UJ1pfDaVF?zL;Xo*ZfP@S$JSH_=.MWZYEKa-/!|PX`)C<3&}(7~HYu'mch`SaQCx?J(IEO)!<+,kK]8&ev/Y<^{97:aWI3|[y'>)nS4ir$WP](2de{wC>a$_n#mf}tj-'851_),l*ON:j.<{DqqL3acKw*P7!<@63)ek%=)%Jk8O(sd_7NV%-R0osNX,JY=>Tmk\",\n\t\t\t\"'u+diyQHDXQ$$dXf1h6%bbi}zKe1G|'1>lg5DU1{Sd1e-.a']0Fo0G0`+MS7BmEF&1ro?C|EM#)nI%v2<]r+8Wl_!OP2iPzXmhR;K6&P(n(9h$q|dWWY:{8'`B5wD?/?AP^nQo-`sg]-3*~;sK(;)x!lY4*5J$<HtCZ%Z`j6RE<A(wr5NAt4S(dJl@yh}B9k&GwA6LMJ/u{HfioiYFDVN^59o\",\n\t\t\t\"'Y{H>k77_<{*x>yk^IdL{APT8y#~[r`5~Jg1+o3p^$93<'L=iDf1J5n@e8?EzNR;>7D-P*?WL=i^=,,y$Ad0nHhB!]l#Od!''l{!./F,;KZ(G-Q[KUlPN>0Q-YQNU#.fm)M!S=f.qwL@XbV7e+[H6nTB{o+kq!LO'q2@j'n%X63:'AoY||~!2F4k%n(t'U8w]ivI@v,uAVAD@$H`{(9b6o@,]*\",\n\t\t\t\"'B^+L2*tNL3]Nhz?9dWv#IWwdUYujTZ6|@%rY}|6}k#iCD&PWuQI6v]J+2(mKP5zFAz9:4H@GRW%N>a=_lxM'$K;b[q8Pj9HDgQ`Y1KH0g;%K2`yUc+22jKDVDz]|}K-urG=IXP}2qQ5p-R+}AIX:|S8i7rA79D^{/v,|n!qTs|TNdY+0G1$KmZDCB:Vm%NtV(&;eJHF9bJiLignN-[0@]M5db.\",\n\t\t\t\"'-s0fO*o_?61-|:h;mfv:Em>%008;X5kh)xjpmK]@`p`qh_iPb%DcQSWDWZLlQ$=6[JM(Z.t+U%7mGVztM`Q7zCW0GRq`eQ0MP$5!m7thKT0;!=@RRTXq2~!'p%vEQCb!Mi}4QM`cCp;Wa]_1c_l!6H0l54z<*(:5'v0?+)0Se<8~@hW-3KUaer@0cgb&!Mye{:2:6|5@j(LwDM/cuK.vMITUqHZ\",\n\t\t\t\"&xGB9=4|u&BO]B7&R~^y.n#./!R%Xx.Z8yzDO]Uif%k%bBd|JJ8ML'b_&L4jekaLZrkA%lFtdty4,FZ2`V-Ub$KeJo6,.N$!4SW<K*}9E>>jWqq./@)Eqw^TWt<ic@mhQm9X/Kc*+yi!evriT{c0*A8P3'i6N$3C>2[j!S.#zJZi;1emv*jXh^T[yjyCK3;+Yb|0|4re'-HpZdsJ|)C{I'KTv^x+V\",\n\t\t\t\"&h%DhhZhb6@Ev#_3evf|V^yG.M_^y<3~5[JBD*sGnX:u9>qb}#L8-59V-Y]H*62;#TB_Xpul4.hu!cyNOjwyL`[L^A3)>K9V|3a~n)_GjQl;^h|tp)')R/;yr'rva/J/~-a>)kHUAW]:tqJ+u{qUKE#3d<A*aVWtuB2`KzK@ewYYlleW7JTd;eqmB8?,GDfrhV%|o]W$8a4`I>j$xjV5m(Jm2j,f!s\",\n\t\t\t\"&XWQd:?07/|#n2R_%sb9uEk)x^#GPt/M#%s-u1liz!<PXsXW0uuF~Pef2tc^nyN8Vg:/bu=N%&wsEH:_+q1j8oTd5aBeDtU}?wa)/fp[jLO7HB0Iex&ht;#*7$@z'4b3i'UnE5@kksu|ac}.n{ZuT~On,Y#t3bO@v.{teuiGgCDOVkBW*d;0(S/5}5~:tzR*BbHQLfD)YF9ITfc8t+GtMb(XiJWQdXk\",\n\t\t\t\"&Kt>R1iyl{Pe-xo>`%s8+*AuM]3_-S1^LlW}{PDMB#<#+q<E3t(sJ7+#g-).:;|Y)':lcB{C5lT%CvP^vm#rHj~8IlBe8A@,_D]pv`4Hf`rDr@@3h|@/~$*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3520, "comment": "/*C)'bD?HO+|a14boXmyQ;w(?7KQTq}]'RXjf6D/W;J)av.\",\n\t\t\t\"$0)&DevbA.2iU_Hf<T.@S8$fB5F{7E=~9@W2YV7`(wwq?dn9CSgb]'h0fxC01@Qd$ciZE|{p}jhi9(-74Oj5LxmKH&*cqJ0rtx_i$hxT~Bk?Ko;}8|*TD'PeaW8m~x1>Z[*A<TT9$nv[bGs-iye}wkgeKFCiv>^{:Y1d,G3DAJ^br,gP-F?Dm5EYX>F0u>~%=u,sI&&_OfT5L^pD&T0};eby'RF*SrZJ9*(:R0zeHmU%G2`I47#tMQa5=&0a/i}80d7s9Km]ayB$W'~qHmeaqfV,?e74KeZ\",\n\t\t\t\"$OGjtpKA`vz*8DE`?zqFcOQIPE%MjL/f#3g~Atw4{^;[^y<bW:%yx+,Xg^9~GNob]y5T#DMPPKX>TlH24Vr%feA{&#V5#5G7#v^6W.sbk7TA7GZ:Y}`Bx%b+dnC!gpP<uUv5>5:]<?bw=>SY&J#F^Aj|3bPh@+(bjRkmGfDP8x;,hN~1wxzewb[([FE-x#jc!VXt8heFHo$P|B=]:6kjni0L7&m1dPx+i4%(#06M=pb/WA&Erw,'h!e@J[Xq8|r*Tk9u[Bx%4nvw&M0q<EhgeJ`p@.rhJ>WV\",\n\t\t\t\"$uDqXvMZcIaE.=MjGG+Fe`uC;Qawx;(</$Z~c+'.Mn-Squvz0^8lS=I8/.@%)F/a#'#I{;4$gk~S$#h'|Q8]zti,ODR%4#^qDW1ol20Yi*c!M3WI5X9p*hG73g~!g{~_]T9eig6iKXv49*'ybz$`8?~A`WH=MQc+F-{0o($j%*Ws{g$*(0x;=jk,]FF?uo0?7Qu*tfQ%guA~KzNW*BWdS`'S`:Lq9w3Y5#N'(00]rPc&#*#Ihob9-aj.On4owf1*dh[1_IvKWVZ|mEkSI'N'@'ivwHv,}c6gs\",\n\t\t\t\"%D*?W@yqSA$efWzmSw>gn1Fj=(#LS7GS*Y%ort`HjX8!QMCIPC7s-yI$v(X^U?<3SahO0/Mr.,&&@FK,zJ:k%$Ej4MNhX%eV%!/CeyO=n6Jnku;p!~4^XO6Dy#kRwC,f2PBdE)dbB4[67]^J(UTmQWzB$s9znKZ'dPHK,FR2C)'33'VR)ni'v`0meR:@-I|{1:}6JseLy5)+xVGU3!>#(~OJ#Ms3<QDyA=PR=b%Ltb;G_pBL8(&OH7f>Kbr|j5SQ}[?miKiNc(NU3c-xxAuJD8_y=r4jv4av0k\",\n\t\t\t\"%xtr[Ak{Qc)N3@AO=sBXYXxu/eL}C#MJ4HMBRdm[QTo<q.O8UX6.}&y4G_~IUw>+|@+^IINa$xAm):8~0m:sZlcdXj4kRECju5%A,6m1+i]*?_0Q28FQ7GhjW?qr$$_=23*xNaxA{JaefIP}<EFhmK5}9!dyVlSPYL(_>r;/d:kTT87C175XHOB2v9ieziK+T}9a_|*yqxl_ri$)T-$hL[<iG8r1+GTrET~E??'Q}9AP'.5T|VQX?am@@*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3520, "comment": "/*2>pZDUPu}|6~Bqgh@%;F7L}q,p(sgoZUtr.._Iy60os!vB6ptfGNBpoDDut}STrX_chV\",\n\t\t\t\"']jMB)IG2`RJzjN+$NI8*7iv6/7_1#;Q/9el)br5T.[L+)R{Gk'[,)G7R*hgKgsOOhZrdX'tMRUFqOfP#cM_!-bykP'*Ex;quu,{Taa&$Q[LfC22Kw4XxG*HVe>Llt=J!urpJGh&M1w$14ZX+mVYL@KKiFkF?TFi#m2n:O{K*Ai7[<y}/nT.c%Yv$ZbZre'Dr{.`M[b]HRtI.@B^k]f4$;x{md%`<%};gk4^!7!zxyJ@m`D1gPhDWxL=3ji#qAu2ByJ?K^Um+D=7(,P)Pc,:cr@Gxo,c7AjV0fjh5r?C3xyc,~z%iy>?3up/ar0elF\",\n\t\t\t\")$VR<ms!>RSTSH({sVrL)NYtc)j22yPkLZFnEcbZoi`66rE7L@>U19Mq@^fpPM*(gMh!%r$]DJwup.hT32JOP@C|0U#~n|eY:W|%vi4qc'O&N1]~<4>3)h'P-/=_%xZu7O{}&5ufpsW|n1HQ([%}&$#ha',`SOr?KG%fbmqW907>u;rx1zNgeJ;H4bykK8`=)o9jOQkD>&;k{xwc]9N$Ye.J4]s},W$>x77u0iHO#1F@GR|nB3hb3nyuCTW>|g~SPoA{}}~]U2~CCBpH036T4~p@2H$dH~}psxi{CrDTrt)W4zMPQ9^as>I6z>j2JUN\",\n\t\t\t\"*jfa7K){O/#?SLj[J~pmY;!j8fD0nT;zRvNRuMH(/j`RH%vNq'Ummtuv/x*DRV7|vd%nmM8b-XQgg?Gr2j[r?[17#v]5l$NvkCgObi.NU%XpB]e!F,9j23+hcxbxd^Ck`Z;(P(,KHQPHsD&EZ`wu[sJ[[l!#}Q#~JFI#Pk=-`t,]4-XJe.}:N^M51]j#`cQ-Cs,W'U/F*T1(IaGGgQ`/Vghcw)+(.942(l~zuDRh77K>/Au;Zl}Z{}Ov]>Ki!X)}{);;UL0&!Wn/pdc|:bH._y4N&r]>XJmJcyFP*E$^`^2zw'MHxY~;jm~K?v1%;}uJ\",\n\t\t\t\",~Io6vl2IE6IH$kby-Vdt{<`_EPm]NJ*O;bRJI7@iJ7q8gkMv'dNoZ;_aeYl}|1XWfb*+1^Yw)H]E%s:is-)BLq:K1t>a!orjZyEs5P.=XsmGct8axD.t?kDtAh!=g2*N-P@QoBYdu:B1w|;?kEvTNqx2&VU_Y3x**[I+Xkef4x%t3%SV]0>-Krtuv}&AR5*-fIt9RIXAA&?%9EIG{wu6<{6t=4lu&qK^q%m-&<:n,&GaaYNa-n4DD.,5`Kh$LezK'wt>`'6}?A*DSB?82Ni)>>}[O@3ml7Z`O0O'3w`cbI#EirlQ5A8H)&IeJCd^7`X*\",\n\t\t\t\"/lKkVWzvSP/wNNLi(xHY@aFVHXq~X:$=uYP!>vdYy%=-a7FjV&(WW/}{_Rzu/$_qh*m5sR9MW!ghoUy-/=+Qd1zR`S=/f&PCVO?GGH]f$'fz2Wk[tEt79JduH&l%#ll8iFxE{=.S*~Jt;sa?eMYPl2'Wu_5>X@hi8~5{mW<2F&}-S/+w5d@ZC>/0G0|15n)Fl~CAi3>KbgXLy+A;N5<two1jtd8/Kk/NjtskL:~ts7ZmKYzopbX[R3)EctA1PVx,>)F!YBv#W)nfl$,+^Ip<is2l'88y>s.['uD}6yriZ-Kv02qT@sRJ!8!)K,$6/Yijc2\",\n\t\t\t\"3C!Q^8llMl?e1E^^3y2,g|x~K#X-yP?'w&6n-OZy{=)v;jnYJI1jQ2BXT|)hXAg<~P4,z%<ep(38]6n;J?!))Y*Rn>QP/M~,#%4u(|/et.8?*mHRZF>G)&AmjFtqcq&Mxm:?Kr*bS+g%QsWzaGu$@S~0Sp<,j)&Y|N[}QTO`h/<LeMd51ztXnzhr.X[c1:+e(uT@UTl@Q%!iihiZOZ4vXG-|XYFbD!``i_nB9?+xmZ~wO$A[=gkE>7-2>LPg(E6*5vfm5W#hY?;E7SYXg%cKx8KVmfUNBz]MJ<}bi;I]*A|'=Z?:9y6qUIqHxWfZ9Bq~?,{\",\n\t\t\t\"7tfhFhN+In9@4y;uJX.Vz.^Y|HDc>_q1[n)N3v%FY(,Q66SPEOE'eN|8I%7{/%IaIVTX$Oe*IJ=i5}t01MK<7P_&VJ#!^~.h[QzE:X7.-ZMI([[*B7LUwNk=c$FLC|{Azoik.g;:nIv![_;#``chZNlWcVR:>y[)]N.p$[1%=X'WPd}aD~l:$N)Q1qz%;'dfKz-Z^-Ca0}6J9x/per{@X/lf/WCi_f,$w587~5u#Fg|8CVz;urpg0~Sp{!DPOppRLAj~~J+4:le?oVyif~fK]hm/oywcNih>7sO2q7@YEy,[[O2'sB]JdMT&:F9|+gJp/y~N\",\n\t\t\t\"=`*2pE~jAfzi:;'$9!8`/c|=v8Y`+p2k.Ic[T#D<zEcXyUVIq;%A;P?R^vi~x~=@)|;Wc`|^g@B#F67,+-|L[8MrUv#'k[w4^q'SF%%.'|e<8exT7}~#/$e)64<F3f>ol8Bb4((gt{4zGX$rx;w[|oCM+VgzPbr5;31s(07,}e6z>`*2iqtjRnQjIvTjTr}74zZ$Jtcg1hX~7Nn`*]SV:*V_'b'PNpS{f<iXQ$:ky]rj[L`y>a$B+oq+h$Y%$Fq{<4JUzd:=ktj]]Dg/v>Z;jwL5-SN.rD><`v8Nu}0Q>a@H=@.IGd,gjQGqAxrzyA|+uLgO6\",\n\t\t\t\"E&(aY$GfJIc;YVnE'4Yx1sTq[q$oJ[Z9P?X:I:,HWDQNR^&JBhRe6O~@Glt]?f`G[yG]{2qWTQy,lcAQ+,Dw:cdS_&c?X`DolV!!GDQ;QxY[mt}yqy+b/{4F;c0$@aiN*#x<fMsfq&uo'!b]eKt^.~vhT9(1EFeSWW-PtCL5.=.DxV/@|Rds7bQafBvVjqDX4~2'Enj#pl$J-WNF8;P-WSl_(_I,zf`Tm'yhThTy*v7;eg:mfU$=-RK/<m]ZD!=-o]FXk|b1qB)KO&;lMt0zi~gO^TZ~'$B2`j%97sWBVPjR@l>Ng~|`^W!59#vzxibkG[+i~N\",\n\t\t\t\"NOYA]|Zy%[E9w*'SQD[e9bd[R8dKhs'YlZQ,boXf^lnx(>$[]SW`f9i9Mt>N?QqI8m4byK0NHF<j/K*AUc;uXBX$~{9C;L)<hjg#{.haglq{'mX*J[_T>Dts5x8TRU!Kr2kpsy<meuZJ<Y]YIbU7&baz)l*bPw!G9TYO5hoN(>MO~/6UCpF?S,&VZCG$]R#Vj7TTfUMga<@aXC[<G<gp;?+4TZi`:eD1VJ_ixO,~fW1W0+{A$Ta~(C?tcLS-<H^_b-iZ.1QP@0g#H;BAUX4aI@%eWRgKYmXeL09X)&Rjj}%.=%HYWz$#5~8a:OGd(]zXxD|mz${\",\n\t\t\t\"Z[W;%Mkpe%k,g39A;OP<:V1ax}G?lf*5A0=G!gRXEE'0xBL#/+$i#`t:$2%Pn7p9s+z>>(TT}t(s+*<BBE@ZA>g:@)C812ZwHdr}(ZAb+7/HVI0E#bDK540?k<cUKEj/07puI&mY@XhY:p7|2)jNG1>adFmtRD_&45m(ogqz#42}4iW5=g!9:AgSLTdG$P0;3rSAFZD%s[N_*ZgU=m|calSAJ$wRm-opooIU-%]S,Cj@Jl04@oQn83fn'YtEIm)(-Ap#oMZ6{?Z#:t$YbUz{wcqyCMuMCO^cTR`C-R:}:'WdNp-RA1r~'ax#VMzM1Q=Qgj#.W,}k\",\n\t\t\t\"k6|k`H$MH32,G?mD+3X4kl_qi|a-+o3:&Xs.:,h#_^w1WjhF`ylHS1x-ZJY.}@['v7~Q#VJWm6Y-G~TLe&fcxP3NIgn*BU7{4TbOz#[Sj'cVy5p/K*N@H?-K%@r/9sF6bR`BZcOF=yX?a#d(UH}Kw*x!Ds-sDk6~A?rEwWiCSF#EBrKwE]B!VCeHS[<LJv*p+Z<]%N`G-!!&-1E[Zx.':/43=0k8ms<?cg?'2j+30+ytbKVC|-Hz3.5,4A]4rbvkVwCrxYh2M}:+Cx4rE)M{AXX}`=kHZr8'zdiIy<mt9uhFIeQ/X'jy?]`)dV{FXz!bkP3vpg#bo\",\n\t\t\t\"#!A7RqIK|K%Ji3sYP[kUMnn1I<'jh},;8<sW(Oxvbs|5QA>+hKp$52:AOH/tqA}@[rLcEH<1qP[R}3-kHS*.ALL0n)!^L<$nuPuD2?m#5n2wYZfjyYPR$@'gePjn#3SD`^{Ywjmb.IRaf6o}*U~nT0$t+e,T:yS0i]qG0OBz(k(dW]U7`IwofxFUvv,9SU9](VL>x|QCc>jWM^?le3C,.YOb]t}AFuFCntN3g}/7v%1wb?~Cdnr3!F'|%v?A|+h%i;I+f7Fz~EH#$Y#ykMTKfnsGk$%`d-/]++jURI*e<))dyckGC}SuEyF]4wjqtZ&N>Nd$3hO|(]*\",\n\t\t\t\"#<?J53IY~r2]](I`bq|1pA3rS<Nd@H@c(:M-k]>{xe^Mo[uIgh?4BDd_>7G?$u^aqLTBvr~YVn.JXc>>uO]OyAbk;_*KzSfsg7KQ:_8r6uOvOy#bW.16,&[wN|>s9r'sry%20S6D8yj#Mt!8#Y40?K;<rW.N,AMgxt-j(eB^{=@_z9[o8l&|5rq/Hm|iB(r52~lAA[RAeaq9x)]d^vP1^l}p%#p7Ohf)Vy{#>!Jjqr]Cm>+?3bnO+BEESMj';S)>DyTz{JdR!zc[$oLQ([MrH0[i:!<n@s(^#$#g,(@d>OPQ7`7@riNWzvSPs0uaA<ws_4z|QTU4+]E.\",\n\t\t\t\"#^zp}Y3dmNyNFYdW}N#O'impD9tcs[w,NvSkyDh*OOjDlx3XUF`5JHeJlP/u%i<I*4,XlN0$7QR-M*5kDrZphsk*GLQm_Y<a.Q*NzqR+?A-WEq_'z`55s@wiN%%kXC*l+rfK}K;v[]Rat>;4uzN'>3xqJ.Cv}P4e$%8CTqvyLLdF4}K)498fmgp/NAmvfiZSaKvh'j#8x&IU#K[^hQ7a`,++yDQr7XKPl9?^ksbs>nKI0O|_]mLuA`I{G7e7^%fKPRw,|fUtfun[,Npy$ET&@FQgtt,ZvAZ9ulk*ALI~LU;Dva7E;H|/Zy;).-{vFoWX%v*0V,=zoO]XZ\",\n\t\t\t\"$-XZIbQk5EX%|'=^06g-UWQQ,UrX(%21VJ2uZM7p*CV~c*I-mN<&'{7-$:^$xzq4,mE</IY-)H9SqF}GnVo<BhW8J81?Ld9Ztx~T_5nb7TuR6lT=S@TZ[VAa#D..hRD{HP,>Hr?wi`MTyx$>D|h?Jh2_xy,p7)c/~o:h.Gr)@(Y$1X?QGa1_-i-*#HRCk5v.T)oKa?uN-Q<$UXQu`Cmhh9[=+'P|3(a2*V;9l;9JB.{,![IPR4HP^[tBOO7$oqiO)d2%XTFIX5}RxZDOaOj3qOB~1iklMo_:#)?]ENgYwb(9g'W,d!y<*8y{XWshGQsLQJg$R&hhn^OJ7V\",\n\t\t\t\"$g@e{!IdK@kp}qbO6V(i!)ry:O]p~*^dI8[#2]kuwDX8fhf?w6U9n1FH:P(NO/$po<PAuvQ-r|=kkYmSn4FS^<?lc:iZ-N[9.H*bj6X{G'xo>S6Tdn,`H4n!.7W6E3%EohZEI2Spv.25LF74-.Iq/W(]'G)pe&~,Z-b'@rh%J@1%jgj'S$i#p.c!(0!/(qhH(Z|B,QMH8oEb7R9![B~ZT7FOyw4]-RBXhS/I-G]uv(qvo(4q}|nme#}lg{u(ZsLi2vm$Lz-Ie5_:lFcKehJpPJE,0!y^-SU8mrsdz&ej(H^81W*Q7ngFT>`sh03D-T%|NXlM43c|e_.I.Vs\",\n\t\t\t\"%T:di!5|Uw.6QR[h,i>_D^:<5)e9PM_}5sPW>;INAI]-YY1f(QhgBS_!H-`KIfHC29G}bt*!)x,>{%$-$a[btyf8!YRzQ?ud6mRAJ(=yXs=c#9c411vOp(=z$J~'7mcF^[mR*ri9w~P4?xfk&+dhO>asDcb'Y%<>;%O34v*l4Jo75aAP=d)*J0_LOZOpwIPsc}6'%)PnN(-9XR@/,zMkIT-,m;.J8z~D$%tMOXjIhQhEkXa.mRJacYEG&u:r7Z+Mj[|Ov-#_bTb,!VrCtL6nJid.dR/4)jV|]1jE6!QDXH03|ts.6(x2|(@%(R}yin)i_yOHI]5G)_]>yN4k\",\n\t\t\t\"&Xn$=~2(Ld<BhF'FQ//G#m$z'y!&^3@W14O-CNYoMA|hjaIl%y^.,LJ=cZ,Q.qsUl?D?{|w#pZ:|z+4ybgD_w9o3+|]>?RX1(7&TaJ1}Yc#SzC_T+a|?JIgt4I]K,wz!&}!]oN29FwV/Q5cB^_!/)Yr+%duKZr@,lNv%yzRSApr5&_D]xUX+y3hO5UvUue=}D<u9PH:MD,|xilIHiCrT@^we:rzr~jrYyc`CC<$],KQ~|Z|H:c@t`b/x?0>i22O+_5W*olB!e[1{egP3%$Si5oB-/0D1lXhe5m:L+uXF:o;@$8MfG7UP=[c{8TB>N:wtXTqb*['vrM(<7+C|V\",\n\t\t\t\"'|0p]1w;Ulg{*[aHODXhz3pP*(h*F'p@nwvO/j]<1'7)>cXK%1-amh<Ulc=kg3eg,p`g]T[~w8Uh#by{yGJ.d1P+>?0'0Ty7MpQTTy*oVk0}M71P93-hfLzz&uRZ22b{F7&BK*C|qag]tUaiEE4mPr5&5A}Nzc_p9SKSFvXGwxV>&rwSj1G3wL)v:&=mHkaFyyO0n&fMRUwSMMl(U^92ngs8/b%fpj!padysC?/w{W7Wt^Ki&q{(&r:TE((Mt0t#BPa%@V<8n*0'JN$v[(YGMF2X3WlC{+K9Y+)_mH,p-#Gz^5^JYN^x`<01lt9x@50?{e?hI))K*mlul*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3520, "comment": "//*Ns~ca3SUeOhz])%cbr]D-;qt19pyJYNTH6=vl[QX3*msbQNp!,gV=F:^m8KOz,jut_d#ViZHxE|6\",\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3520, "comment": "//t6}<:CV{>`)Mu1fM_hj.$>5j|_Z#c)yq{\",\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3520, "comment": "//5`Q4|@j72YAhOb,eU/cj@$MP9?,TjF(;={.lKHq]1^#rvyH5QcuGFd+'Z5>+f6},iR3&`gBe?_1iikXz;:VB|$a1Av]a2vViLo~&Q_I;.n~0^<MY2'v#sKqxb8#kk{joFlMixtp^}s&ae*DgRf,?'VRYfc|#5:gXuZFA4qp6/:Fg8W~)6`.YWmqkelY,X?J4U{Y&.$=A>-y'v.;~_%}DNe#WJ-H}*\",\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3520, "comment": "//G#m$z'y!&^3@W14O-CNYoMA|hjaIl%y^.,LJ=cZ,Q.qsUl?D?{|w#pZ:|z+4ybgD_w9o3+|]>?RX1(7&TaJ1}Yc#SzC_T+a|?JIgt4I]K,wz!&}!]oN29FwV/Q5cB^_!/)Yr+%duKZr@,lNv%yzRSApr5&_D]xUX+y3hO5UvUue=}D<u9PH:MD,|xilIHiCrT@^we:rzr~jrYyc`CC<$],KQ~|Z|H:c@t`b/x?0>i22O+_5W*olB!e[1{egP3%$Si5oB-/0D1lXhe5m:L+uXF:o;@$8MfG7UP=[c{8TB>N:wtXTqb*['vrM(<7+C|V\",\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3520, "comment": "// n > 1\n"}, "Heuristic": []}, {"nl": {"id": 3520, "comment": "// n > 0\n"}, "Heuristic": []}, {"nl": {"id": 3522, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3522, "comment": "//prefix, # of autos\n"}, "Heuristic": []}, {"nl": {"id": 3522, "comment": "//number of autos\n"}, "Heuristic": []}, {"nl": {"id": 3522, "comment": "//prefix\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3522, "comment": "//StringJoiner sj = new StringJoiner(\" \"); \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3522, "comment": "//sj.add(strings)\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3523, "comment": "//log(binom[i]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3523, "comment": "//log(\"base:\"+dp[i][i]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3523, "comment": "//log(\"j:\"+j+\" cn:\"+cn+\" dp:\"+dp[j][cn]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3523, "comment": "//log(\"perm:\"+binom[cn+me][cn]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3523, "comment": "//log(\"d:\"+d);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3523, "comment": "//log(\"res:\"+res);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3523, "comment": "//log(\"d:\"+d);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3523, "comment": "//log(\"res:\"+res);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3525, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3526, "comment": "//asdf\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3526, "comment": "// br = new BufferedReader(new FileReader(\".in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3526, "comment": "// out = new PrintWriter(new FileWriter(\".out\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3526, "comment": "// Number of ways to make a segment of length x is 2^(x-1)\n"}, "Heuristic": []}, {"nl": {"id": 3526, "comment": "// DP: Given position I.\n"}, "Heuristic": []}, {"nl": {"id": 3526, "comment": "//System.out.println(i + \": \" + solve(n,i) + \" \" + (n-i) + \" \" + (i));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3527, "comment": "// ni();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3527, "comment": "// a^b\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3527, "comment": "// when nextLine, (isSpaceChar(b) && b != '\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3527, "comment": "// ')\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3528, "comment": "//package global14;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3528, "comment": "// 11110\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3528, "comment": "//\t\t\ttr(dp[i]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3528, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3528, "comment": "//\t\tif(x < 0){ x = 0; }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3528, "comment": "// print ids which are 1\n"}, "Heuristic": []}, {"nl": {"id": 3529, "comment": "//log(binom[i]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3529, "comment": "//log(\"base:\"+dp[i][i]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3529, "comment": "//log(\"j:\"+j+\" cn:\"+cn+\" dp:\"+dp[j][cn]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3529, "comment": "//log(\"perm:\"+binom[cn+me][cn]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3529, "comment": "//log(\"d:\"+d);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3529, "comment": "//log(\"res:\"+res);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3529, "comment": "//log(\"d:\"+d);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3529, "comment": "//log(\"res:\"+res);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3530, "comment": "/*fac = new long[nn + 1];\n        fac[1] = 1;\n        for(int i = 2; i <= nn; i++)\n            fac[i] = fac[i - 1] * i % MOD;*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3530, "comment": "/*pow2 = new long[nn + 1];\n        pow2[0] = 1L;\n        for(int i = 1; i <= nn; i++)\n            pow2[i] = pow2[i - 1] * 2L;*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3530, "comment": "/*inv = new long[nn + 1];\n        inv[1] = 1;\n        for (int i = 2; i <= nn; ++i)\n            inv[i] = (MOD - MOD / i) * inv[(int)(MOD % i)] % MOD;*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3530, "comment": "/*facInv = new long[nn + 1];\n        facInv[0] = facInv[1] = 1;\n        for (int i = 2; i <= nn; ++i)\n            facInv[i] = facInv[i - 1] * inv[i] % MOD;*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3530, "comment": "/*numOfDiffDiv = new int[nn + 1];\n        for(int i = 2; i <= nn; i++)\n            if(numOfDiffDiv[i] == 0)\n                for(int j = i; j <= nn; j += i)\n                    numOfDiv[j] ++;*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3530, "comment": "/*numOfDiv = new int[nn + 1];\n        numOfDiv[1] = 1;\n        for(int i = 2; i <= nn; i++) {\n            for(int j = 2; j * j <= i; j++) {\n                if(i % j == 0) {\n                    numOfDiv[i] = numOfDiv[i / j] + 1;\n                    break;\n                }\n            }\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3530, "comment": "/*\n        int t = 1;\n        //t = sc.ni();\n        while(t-- > 0) {\n            //boolean res = solve();\n            //out.println(res ? \"YES\" : \"NO\");\n            long res = solve();\n            out.println(res);\n        }*/"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": 3530, "comment": "/*String s = sc.nextLine();\n        char[] c = s.toCharArray();\n        int n = c.length;*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3530, "comment": "//static long MOD = 998_244_353L;\n"}, "Heuristic": []}, {"nl": {"id": 3530, "comment": "//static long MOD = 1_000_000_033L;\n"}, "Heuristic": []}, {"nl": {"id": 3530, "comment": "//static ArrayList <Integer> primes;\n"}, "Heuristic": []}, {"nl": {"id": 3530, "comment": "//static int[] primes;\n"}, "Heuristic": []}, {"nl": {"id": 3530, "comment": "//-----------PrintWriter for faster output---------------------------------\n"}, "Heuristic": []}, {"nl": {"id": 3530, "comment": "// Start writing your solution here. -------------------------------------\n"}, "Heuristic": []}, {"nl": {"id": 3530, "comment": "//primes = sieveOfEratosthenes(100001);\n"}, "Heuristic": []}, {"nl": {"id": 3530, "comment": "//t = sc.ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3530, "comment": "//boolean res = solve();\n"}, "Heuristic": []}, {"nl": {"id": 3530, "comment": "//out.println(res ? \"YES\" : \"NO\");\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 3530, "comment": "//t = sc.ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3530, "comment": "//out.println(\"Case #\" + tt + \": \" + res);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3530, "comment": "//out.println(res ? \"YES\" : \"NO\");\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 3530, "comment": "//int n = sc.ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3530, "comment": "//long[] a =  new long[n];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3530, "comment": "//for(int i = 0; i < n; i++) a[i] = sc.nl();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3530, "comment": "//naft[len + 1][len + 2] -= bef[len][ind];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3530, "comment": "//naft[len + 1][len + 2] -= aft[len][ind];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3530, "comment": "//nbef[len + 1][len + 2] -= dp2[0][len][ind] + dp2[1][len][ind];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3530, "comment": "// edges to adjacency list by uwi\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3530, "comment": "// tree diameter by uwi\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3530, "comment": "// SegmentTree range min/max query by uwi\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3530, "comment": "//-----------MyScanner class for faster input----------\n"}, "Heuristic": []}, {"nl": {"id": 3530, "comment": "//--------------------------------------------------------\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3531, "comment": "// br = new BufferedReader(new FileReader(\".in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3531, "comment": "// out = new PrintWriter(new FileWriter(\".out\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3531, "comment": "// Number of ways to make a segment of length x is 2^(x-1)\n"}, "Heuristic": []}, {"nl": {"id": 3531, "comment": "// DP: Given position I.\n"}, "Heuristic": []}, {"nl": {"id": 3531, "comment": "//System.out.println(i + \": \" + solve(n,i) + \" \" + (n-i) + \" \" + (i));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3532, "comment": "// upsolve with rainboy\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3533, "comment": "//package com.company;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3533, "comment": "//                System.err.println(s + \" \" + t + \" \" + cap);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3533, "comment": "//        Scanner sc = new Scanner(new FileInputStream(\"input\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3533, "comment": "//        PrintWriter pw = new PrintWriter(new FileOutputStream(\"output\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3534, "comment": "// upsolve with rainboy\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3535, "comment": "// thou shall not create nodes except through addNode()\n"}, "Heuristic": []}, {"nl": {"id": 3535, "comment": "// index in nodes array\n"}, "Heuristic": []}, {"nl": {"id": 3535, "comment": "// true: edge is in original graph\n"}, "Heuristic": []}, {"nl": {"id": 3535, "comment": "// nodes connected\n"}, "Heuristic": []}, {"nl": {"id": 3535, "comment": "// current flow\n"}, "Heuristic": []}, {"nl": {"id": 3535, "comment": "// reference to this edge's dual\n"}, "Heuristic": []}, {"nl": {"id": 3535, "comment": "// only used for MinCost.\n"}, "Heuristic": []}, {"nl": {"id": 3535, "comment": "// returns [maxflow, mincost]\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3535, "comment": "// unavoidable boiler plate\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3535, "comment": "// allows Dijkstra to work with negative edge weights\n"}, "Heuristic": []}, {"nl": {"id": 3535, "comment": "// used to store an augmenting path\n"}, "Heuristic": []}, {"nl": {"id": 3535, "comment": "// minimal cost to vertex\n"}, "Heuristic": []}, {"nl": {"id": 3536, "comment": "//package educational.round67;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3536, "comment": "// public int iniflow;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3536, "comment": "// cloning\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3536, "comment": "// NOT VERIFIED\n"}, "Heuristic": []}, {"nl": {"id": 3536, "comment": "// cloning\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3536, "comment": "// shortest path src->sink\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3536, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3537, "comment": "// upsolve with rainboy\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3538, "comment": "/* boolean possible = BellmanFord(true); \n                     if(!possible) return false; */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3538, "comment": "/*if(dist[T] >= 0)return true;*/"}, "Heuristic": ["H7"]}, {"nl": {"id": 3538, "comment": "/*if(dist[T] >= 0)return true;*/"}, "Heuristic": ["H7"]}, {"nl": {"id": 3538, "comment": "// shortest distances\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3538, "comment": "// not to consider reverse edges\n"}, "Heuristic": []}, {"nl": {"id": 3538, "comment": "// check for negative cycles\n"}, "Heuristic": []}, {"nl": {"id": 3538, "comment": "// present node \n"}, "Heuristic": []}, {"nl": {"id": 3538, "comment": "// 0 -> not added 1 -> not removed 2 -> removed\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3538, "comment": "// previous node for augmentation\n"}, "Heuristic": []}, {"nl": {"id": 3538, "comment": "// min dist\n"}, "Heuristic": []}, {"nl": {"id": 3538, "comment": "// no need of reduced cost\n"}, "Heuristic": []}, {"nl": {"id": 3538, "comment": "// had a better val \n"}, "Heuristic": []}, {"nl": {"id": 3538, "comment": "// important\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3538, "comment": "// reduced cost\n"}, "Heuristic": []}, {"nl": {"id": 3538, "comment": "// if(dist[T] >= 0)return true; // non contributing flow\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3538, "comment": "// uncomment to check for negative cycles\n"}, "Heuristic": []}, {"nl": {"id": 3538, "comment": "// set true to check for negative cycles\n"}, "Heuristic": []}, {"nl": {"id": 3538, "comment": "// boolean possible = BellmanFord(false); \n"}, "Heuristic": []}, {"nl": {"id": 3538, "comment": "// if(!possible) return false;\n"}, "Heuristic": []}, {"nl": {"id": 3538, "comment": "// getting back the original cost\n"}, "Heuristic": []}, {"nl": {"id": 3538, "comment": "// S + n\n"}, "Heuristic": []}, {"nl": {"id": 3538, "comment": "// ans.calSimple();\n"}, "Heuristic": []}, {"nl": {"id": 3539, "comment": "// upsolve with rainboy\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3540, "comment": "/* boolean possible = BellmanFord(true); \n                     if(!possible) return false; */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3540, "comment": "/*if(dist[T] >= 0)return true;*/"}, "Heuristic": ["H7"]}, {"nl": {"id": 3540, "comment": "/*if(dist[T] >= 0)return true;*/"}, "Heuristic": ["H7"]}, {"nl": {"id": 3540, "comment": "// shortest distances\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3540, "comment": "// not to consider reverse edges\n"}, "Heuristic": []}, {"nl": {"id": 3540, "comment": "// check for negative cycles\n"}, "Heuristic": []}, {"nl": {"id": 3540, "comment": "// present node \n"}, "Heuristic": []}, {"nl": {"id": 3540, "comment": "// 0 -> not added 1 -> not removed 2 -> removed\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3540, "comment": "// previous node for augmentation\n"}, "Heuristic": []}, {"nl": {"id": 3540, "comment": "// min dist\n"}, "Heuristic": []}, {"nl": {"id": 3540, "comment": "// no need of reduced cost\n"}, "Heuristic": []}, {"nl": {"id": 3540, "comment": "// had a better val \n"}, "Heuristic": []}, {"nl": {"id": 3540, "comment": "// important\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3540, "comment": "// reduced cost\n"}, "Heuristic": []}, {"nl": {"id": 3540, "comment": "// if(dist[T] >= 0)return true; // non contributing flow\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3540, "comment": "// uncomment to check for negative cycles\n"}, "Heuristic": []}, {"nl": {"id": 3540, "comment": "// set true to check for negative cycles\n"}, "Heuristic": []}, {"nl": {"id": 3540, "comment": "// boolean possible = BellmanFord(false); \n"}, "Heuristic": []}, {"nl": {"id": 3540, "comment": "// if(!possible) return false;\n"}, "Heuristic": []}, {"nl": {"id": 3540, "comment": "// getting back the original cost\n"}, "Heuristic": []}, {"nl": {"id": 3540, "comment": "// S + n\n"}, "Heuristic": []}, {"nl": {"id": 3540, "comment": "// ans.calWithPotential();\n"}, "Heuristic": []}, {"nl": {"id": 3541, "comment": "// upsolve with rainboy\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3542, "comment": "// upsolve with rainboy\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3543, "comment": "// public int iniflow;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3543, "comment": "// cloning\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3543, "comment": "// NOT VERIFIED\n"}, "Heuristic": []}, {"nl": {"id": 3543, "comment": "// cloning\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3543, "comment": "// shortest path src->sink\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3543, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3544, "comment": "// upsolve with rainboy\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3545, "comment": "// upsolve with rainboy\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3546, "comment": "// upsolve with rainboy\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3547, "comment": "// upsolve with rainboy\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3548, "comment": "// upsolve with rainboy\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3549, "comment": "// thou shall not create nodes except through addNode()\n"}, "Heuristic": []}, {"nl": {"id": 3549, "comment": "// index in nodes array\n"}, "Heuristic": []}, {"nl": {"id": 3549, "comment": "// true: edge is in original graph\n"}, "Heuristic": []}, {"nl": {"id": 3549, "comment": "// nodes connected\n"}, "Heuristic": []}, {"nl": {"id": 3549, "comment": "// current flow\n"}, "Heuristic": []}, {"nl": {"id": 3549, "comment": "// reference to this edge's dual\n"}, "Heuristic": []}, {"nl": {"id": 3549, "comment": "// only used for MinCost.\n"}, "Heuristic": []}, {"nl": {"id": 3549, "comment": "// returns [maxflow, mincost]\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3549, "comment": "// unavoidable boiler plate\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3549, "comment": "// allows Dijkstra to work with negative edge weights\n"}, "Heuristic": []}, {"nl": {"id": 3549, "comment": "// used to store an augmenting path\n"}, "Heuristic": []}, {"nl": {"id": 3549, "comment": "// minimal cost to vertex\n"}, "Heuristic": []}, {"nl": {"id": 3550, "comment": "// upsolve with rainboy\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3552, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author nasko\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3554, "comment": "/*\n     * This FastReader code is taken from GeeksForGeeks.com\n     * https://www.geeksforgeeks.org/fast-io-in-java-in-competitive-programming/\n     *\n     * The article was written by Rishabh Mahrsee\n     */"}, "Heuristic": ["H1", "H7", "H9"]}, {"nl": {"id": 3554, "comment": "//www.geeksforgeeks.org/fast-io-in-java-in-competitive-programming/\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3555, "comment": "//System.out.println(burnAt + \" \" + i + \" \" + j);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3555, "comment": "//withour sqrt\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3555, "comment": "//-----------------------------------------------------------\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3555, "comment": "//in = new BufferedReader(new InputStreamReader(System.in));\n"}, "Heuristic": []}, {"nl": {"id": 3557, "comment": "//\tfor (int i = 0 ; i < n ; i++) for (int j = 0 ; j < m ; j++) System.out.println(A[i][j]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3558, "comment": "//which is best to use\n"}, "Heuristic": []}, {"nl": {"id": 3558, "comment": "// InputStreamReader stream = new InputStreamReader(System.in);\n"}, "Heuristic": []}, {"nl": {"id": 3558, "comment": "// BufferedReader input = new BufferedReader(stream);\n"}, "Heuristic": []}, {"nl": {"id": 3558, "comment": "//is iterator faster\n"}, "Heuristic": []}, {"nl": {"id": 3561, "comment": "// HashSet<Point> vis = new HashSet<>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3561, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3561, "comment": "// add in set\n"}, "Heuristic": []}, {"nl": {"id": 3562, "comment": "/*for(int i = 2;i<=n;i++){\n\t\t\t\t\t\tif(b[i]) prime[i] = i;\n\t\t\t\t\t}*/"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 3562, "comment": "/*\n\t\t\t\t\n\t\t\t\tstatic class Pair3{\n\t\t\t\t\tint x, y ,z;\n\t\t\t\t\tPair3(int x, int y, int z){\n\t\t\t\t\t\tthis.x = x;\n\t\t\t\t\t\tthis.y = y;\n\t\t\t\t\t\tthis.z = z;\n\t\t\t\t\t}\n\t\t\t\t}*/"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 3562, "comment": "/*long[] build(int ss, int se, int si) {\n\t\t\t\t\t\tif (ss == se) {\n\t\t\t\t\t\t\tst[si][0] = 1;\n\t\t\t\t\t\t\tst[si][1] = 1;\n\t\t\t\t\t\t\tst[si][2] = 1;\n\t\t\t\t\t\t\treturn st[si];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tint mid = (ss + se) / 2;\n\t\t\t\t\t\tlong a1[] = build(ss, mid, si * 2), a2[] = build(mid + 1, se,\n\t\t\t\t\t\t\t\tsi * 2 + 1);\n\t\t\t\t\t\tlong ans[] = new long[3];\n\t\t\t\t\t\tif (arr[mid] < arr[mid + 1]) {\n\t\t\t\t\t\t\tans[1] = Math.max(a2[1], Math.max(a1[1], a1[2] + a2[0]));\n\t\t\t\t\t\t\tif (a1[1] == (mid - ss + 1))\n\t\t\t\t\t\t\t\tans[0] = ans[1];\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tans[0] = a1[0];\n\t\t\t\t\t\t\tif (a2[2] == (se - mid))\n\t\t\t\t\t\t\t\tans[2] = ans[1];\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tans[2] = a2[2];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tans[1] = Math.max(a1[1], a2[1]);\n\t\t\t\t\t\t\tans[0] = a1[0];\n\t\t\t\t\t\t\tans[2] = a2[2];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tst[si] = ans;\n\t\t\t\t\t\treturn st[si];\n\t\t\t\t\t}*/"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 3562, "comment": "/*boolean get(int qs, int qe, int ss, int se, int si){\n\t\t\t\t\t\tif(qs>se || qe<ss) return 0;\n\t\t\t\t\t\tif (qs <= ss && qe >= se) {\n\t\t\t\t\t\t\treturn st[si];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tint mid = (ss+se)/2;\n\t\t\t\t\t\treturn get(qs, qe, ss, mid, si * 2)+get(qs, qe, mid + 1, se, si * 2 + 1);\n\t\t\t\t\t}*/"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 3562, "comment": "//static Queue<Integer> q = new LinkedList<>();\n"}, "Heuristic": []}, {"nl": {"id": 3562, "comment": "//static PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3562, "comment": "//System.setIn(new FileInputStream(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3562, "comment": "//System.setOut(new PrintStream(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3562, "comment": "//(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\QAL2.txt\"));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3562, "comment": "//PrintWriter log1 = new PrintWriter(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\input01\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3562, "comment": "//(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\output00\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3562, "comment": "//log = new BufferedWriter(new OutputStreamWriter(System.out));\n"}, "Heuristic": []}, {"nl": {"id": 3562, "comment": "//System.out.println(q);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3562, "comment": "//\tSystem.out.println(ans);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3562, "comment": "// 1-indexed array, In this array We save cumulative information to perform efficient range queries and updates\n"}, "Heuristic": []}, {"nl": {"id": 3562, "comment": "//Extracting the portion up to the first significant one of the binary representation of 'ind' and decrementing ind by that number\n"}, "Heuristic": []}, {"nl": {"id": 3562, "comment": "//Extracting the portion up to the first significant one of the binary representation of 'ind' and incrementing ind by that number\n"}, "Heuristic": []}, {"nl": {"id": 3562, "comment": "//return Double.compare(ans, other.ans);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3562, "comment": "// create lps[] that will hold the longest\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3562, "comment": "// prefix suffix values for pattern\n"}, "Heuristic": []}, {"nl": {"id": 3562, "comment": "// index for pat[]\n"}, "Heuristic": []}, {"nl": {"id": 3562, "comment": "// Preprocess the pattern (calculate lps[]\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3562, "comment": "// array)\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3562, "comment": "// index for txt[]\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3562, "comment": "// parent.add((i-j));\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3562, "comment": "// mismatch after j matches\n"}, "Heuristic": []}, {"nl": {"id": 3562, "comment": "// Do not match lps[0..lps[j-1]] characters,\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3562, "comment": "// they will match anyway\n"}, "Heuristic": []}, {"nl": {"id": 3562, "comment": "// length of the previous longest prefix suffix\n"}, "Heuristic": []}, {"nl": {"id": 3562, "comment": "// lps[0] is always 0\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3562, "comment": "// the loop calculates lps[i] for i = 1 to M-1\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3562, "comment": "// (pat[i] != pat[len])\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3562, "comment": "// This is tricky. Consider the example.\n"}, "Heuristic": []}, {"nl": {"id": 3562, "comment": "// AAACAAAA and i = 7. The idea is similar \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3562, "comment": "// to search step.\n"}, "Heuristic": []}, {"nl": {"id": 3562, "comment": "// Also, note that we do not increment\n"}, "Heuristic": []}, {"nl": {"id": 3562, "comment": "// i here\n"}, "Heuristic": []}, {"nl": {"id": 3562, "comment": "// if (len == 0)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3562, "comment": "//hs.add(prefix);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3562, "comment": "//build(0, n - 1, 1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3562, "comment": "//arr[idx] += val;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3562, "comment": "// This node needs to be updated\n"}, "Heuristic": []}, {"nl": {"id": 3562, "comment": "// Update it\n"}, "Heuristic": []}, {"nl": {"id": 3562, "comment": "// Mark child as lazy\n"}, "Heuristic": []}, {"nl": {"id": 3562, "comment": "// Mark child as lazy\n"}, "Heuristic": []}, {"nl": {"id": 3562, "comment": "// Reset it\n"}, "Heuristic": []}, {"nl": {"id": 3562, "comment": "// Current segment is not within range [l, r]\n"}, "Heuristic": []}, {"nl": {"id": 3562, "comment": "// Segment is fully within range\n"}, "Heuristic": []}, {"nl": {"id": 3562, "comment": "// Not leaf node\n"}, "Heuristic": []}, {"nl": {"id": 3562, "comment": "// Updating left child\n"}, "Heuristic": []}, {"nl": {"id": 3562, "comment": "// Updating right child\n"}, "Heuristic": []}, {"nl": {"id": 3562, "comment": "// Updating root with max value \n"}, "Heuristic": []}, {"nl": {"id": 3562, "comment": "// Out of range\n"}, "Heuristic": []}, {"nl": {"id": 3562, "comment": "// This node needs to be updated\n"}, "Heuristic": []}, {"nl": {"id": 3562, "comment": "// Update it\n"}, "Heuristic": []}, {"nl": {"id": 3562, "comment": "// Mark child as lazy\n"}, "Heuristic": []}, {"nl": {"id": 3562, "comment": "// Mark child as lazy\n"}, "Heuristic": []}, {"nl": {"id": 3562, "comment": "// Reset it\n"}, "Heuristic": []}, {"nl": {"id": 3562, "comment": "// Current segment is totally within range [l, r]\n"}, "Heuristic": []}, {"nl": {"id": 3562, "comment": "// Query left child\n"}, "Heuristic": []}, {"nl": {"id": 3562, "comment": "// Query right child\n"}, "Heuristic": []}, {"nl": {"id": 3562, "comment": "//System.out.println(str);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3563, "comment": "// new InputReader(inputStream);\n"}, "Heuristic": []}, {"nl": {"id": 3563, "comment": "//new PrintWriter(outputStream);\n"}, "Heuristic": []}, {"nl": {"id": 3566, "comment": "//package c;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3569, "comment": "/**\n * Created by IntelliJ IDEA.\n * User: Taras_Brzezinsky\n * Date: 9/16/11\n * Time: 1:27 PM\n * To change this template use File | Settings | File Templates.\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3570, "comment": "//                  System.out.println(i+1 + \" \" + (j+1));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3571, "comment": "//System.out.println(lastx + \" \" + lasty);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3573, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Zyflair Griffane\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3574, "comment": "//sc.nextLine();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3579, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3581, "comment": "//false:\ufffdu\ufffdG\ufffdv\ufffd\ufffd\ufffd\u0102\u0202\ufffd\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3583, "comment": "/**\n\t * @param args\n\t * @throws FileNotFoundException \n\t */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3583, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3585, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3586, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3586, "comment": "// To compute x^y under modulo m\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3586, "comment": "// Initialize result\n"}, "Heuristic": []}, {"nl": {"id": 3586, "comment": "// Update x if it is more than or\n"}, "Heuristic": []}, {"nl": {"id": 3586, "comment": "// equal to p\n"}, "Heuristic": []}, {"nl": {"id": 3586, "comment": "// If y is odd, multiply x\n"}, "Heuristic": []}, {"nl": {"id": 3586, "comment": "// with result\n"}, "Heuristic": []}, {"nl": {"id": 3586, "comment": "// y must be even now\n"}, "Heuristic": []}, {"nl": {"id": 3586, "comment": "// y = y/2\n"}, "Heuristic": []}, {"nl": {"id": 3586, "comment": "// Function to find modular \n"}, "Heuristic": []}, {"nl": {"id": 3586, "comment": "// inverse of a under modulo m\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3586, "comment": "// Assumption: m is prime\n"}, "Heuristic": []}, {"nl": {"id": 3586, "comment": "//System.out.print(\"Inverse doesn't exist\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3586, "comment": "// If a and m are relatively prime, then\n"}, "Heuristic": []}, {"nl": {"id": 3586, "comment": "// modulo inverse is a^(m-2) mode m\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3586, "comment": "//\t\t\tSystem.out.println(\"Modular multiplicative inverse is \"\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3586, "comment": "//\t\t\t\t\t\t\t\t\t\t\t+power(a, m - 2, m));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3586, "comment": "// Base case\n"}, "Heuristic": []}, {"nl": {"id": 3586, "comment": "// Fill factorial array so that we\n"}, "Heuristic": []}, {"nl": {"id": 3586, "comment": "// can find all factorial of r, n\n"}, "Heuristic": []}, {"nl": {"id": 3586, "comment": "// and n-r\n"}, "Heuristic": []}, {"nl": {"id": 3587, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author zodiacLeo\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3587, "comment": "//        for (int i = 0; i < n; i++)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3587, "comment": "//        {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3587, "comment": "//            for (int j = 0; j < m; j++)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3587, "comment": "//            {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3587, "comment": "//                out.print(map[i][j] + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3587, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3587, "comment": "//            out.println();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3587, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3589, "comment": "//(new InputStreamReader(System.in));\n"}, "Heuristic": []}, {"nl": {"id": 3591, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3594, "comment": "//\tprivate static HashMap\n"}, "Heuristic": []}, {"nl": {"id": 3594, "comment": "//Visited[s]=true;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3594, "comment": "//     queue.add(new Pair(x,y));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3594, "comment": "//  level[x][y]=-1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3594, "comment": "//System.out.println(level[i][j]+\" \");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3594, "comment": "//System.out.println();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3594, "comment": "//\t getAns(startVertex);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3594, "comment": "//return getAns();\n"}, "Heuristic": []}, {"nl": {"id": 3594, "comment": "//0-Blue 1-Pink\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3594, "comment": "//System.out.println(startVertex);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3594, "comment": "//\tlev_dfs[startVertex]=1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3594, "comment": "// System.out.println(top+\" \"+adj[top].size());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3594, "comment": "//  \tSystem.out.print(n+\" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3594, "comment": "//\tSystem.out.print(n+\" \");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3594, "comment": "//    System.out.println(\"--------------------------------\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3594, "comment": "//  System.out.println(\"NO\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3594, "comment": "// return c;\n"}, "Heuristic": []}, {"nl": {"id": 3594, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3594, "comment": "//\tSort in increasing order\n"}, "Heuristic": []}, {"nl": {"id": 3595, "comment": "//InputStream input = System.in;\n"}, "Heuristic": []}, {"nl": {"id": 3595, "comment": "//OutputStream output = System.out;\n"}, "Heuristic": []}, {"nl": {"id": 3595, "comment": "//InputReader in = new InputReader(input);\n"}, "Heuristic": []}, {"nl": {"id": 3595, "comment": "//PrintWriter out = new PrintWriter(output);\n"}, "Heuristic": []}, {"nl": {"id": 3595, "comment": "// line length\n"}, "Heuristic": []}, {"nl": {"id": 3596, "comment": "//\t\tScanner sc = new Scanner(System.in);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3596, "comment": "//\t\tPrintWriter out = new PrintWriter(System.out);\n"}, "Heuristic": []}, {"nl": {"id": 3598, "comment": "/*\nIf you want to aim high, aim high\nDon't let that studying and grades consume you\nJust live life young\n******************************\nWhat do you think? What do you think?\n1st on Billboard, what do you think of it\nNext is a Grammy, what do you think of it\nHowever you think, I\u2019m sorry, but shit, I have no fcking interest\n*******************************\nI'm standing on top of my Monopoly board\nThat means I'm on top of my game and it don't stop\ntil my hip don't hop anymore\nhttps://www.a2oj.com/Ladder16.html\n*******************************\n300iq as writer = Sad!\n*/"}, "Heuristic": ["H2", "H7", "H9", "H12"]}, {"nl": {"id": 3598, "comment": "//www.a2oj.com/Ladder16.html\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3601, "comment": "/**\n * @author igor_kz\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3603, "comment": "//stdin\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3603, "comment": "//System.err.println(\"Input: \" + line);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3603, "comment": "//System.out.println(\"I read this number: \" + val);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3606, "comment": "/**\n\t * This reader class is NOT Mine.\n\t **/"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3606, "comment": "//import java.util.Scanner;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3606, "comment": "//the upper tree\n"}, "Heuristic": []}, {"nl": {"id": 3606, "comment": "//the tree to the right\n"}, "Heuristic": []}, {"nl": {"id": 3606, "comment": "//the lower tree\n"}, "Heuristic": []}, {"nl": {"id": 3606, "comment": "//the point to the left\n"}, "Heuristic": []}, {"nl": {"id": 3606, "comment": "//System.out.println((last.x + 1) + \" \" + (last.y + 1));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3606, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3607, "comment": "//        FastReader sc = new FastReader();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3610, "comment": "/*PrintWriter out= new PrintWriter(new File(\"input.txt\"));\n        Reader sc=new Reader();*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3610, "comment": "///////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3610, "comment": "//    RRRRRRRRR            AAA             HHH     HHH     IIIIIIIIIIIII   LLL           //\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3610, "comment": "//    RR    RRR           AAAAA            HHH     HHH      IIIIIIIIIII    LLL           //\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3610, "comment": "//    RR   RRR           AAAAAAA           HHH     HHH          III        LLL           //\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3610, "comment": "//    RR  RRR           AAA   AAA          HHHHHHHHHHH          III        LLL           //\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3610, "comment": "//    RRRRRR           AAA     AAA         HHHHHHHHHHH          III        LLL           //\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3610, "comment": "//    RR  RRR         AAAAAAAAAAAAA        HHH     HHH          III        LLL           //\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3610, "comment": "//    RR    RRR      AAA         AAA       HHH     HHH      IIIIIIIIIII    LLLLLLLLLLLL  //\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3610, "comment": "//    RR     RRR    AAA           AAA      HHH     HHH     IIIIIIIIIIIII   LLLLLLLLLLLL  //\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3610, "comment": "///////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3612, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Nafiur Rahman Khadem Shafin \ud83d\ude42\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3612, "comment": "/*\n\t\t\t * file input-output \ud83d\ude2e. Multi source bfs. Same as snackdown problem.\n\t\t\t * */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3612, "comment": "//\t\t\tSystem.out.println (\"ber hoise \"+op+\" \"+plvl);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3612, "comment": "//\t\t\t\tSystem.out.println (newX+\" \"+newY+\" \"+n+\" \"+m);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3612, "comment": "//\t\t\t\t\tSystem.out.println (\"dhukse \"+newX+\" \"+newY);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3612, "comment": "//\t\t\tSystem.out.println (max);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3612, "comment": "//\t\t\te.printStackTrace ();\n"}, "Heuristic": []}, {"nl": {"id": 3612, "comment": "//to detect eof\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3613, "comment": "//which is best to use\n"}, "Heuristic": []}, {"nl": {"id": 3613, "comment": "// InputStreamReader stream = new InputStreamReader(System.in);\n"}, "Heuristic": []}, {"nl": {"id": 3613, "comment": "// BufferedReader input = new BufferedReader(stream);\n"}, "Heuristic": []}, {"nl": {"id": 3613, "comment": "// while(ExistsAliveTree()){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3613, "comment": "//     spread();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3613, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3613, "comment": "// System.out.println(LitTrees.getLast()[0] + \" \" + LitTrees.getLast()[1]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3613, "comment": "//is iterator faster\n"}, "Heuristic": []}, {"nl": {"id": 3614, "comment": "//package round35;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3614, "comment": "//\tString INPUT = \"3 3 1 1 1\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3615, "comment": "/*for (int i = 1; i<=n; i++)\n\t\t\tfor (int j = 1; j<=m; j++)\n\t\t\t\ta[i][j] = 40001;\n\t\t*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3615, "comment": "//System.in);//\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3615, "comment": "//System.out);//\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3615, "comment": "//a=new int[n+1][m+1];\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3616, "comment": "/*\n        inB = new BufferedReader(new InputStreamReader(System.in));\n        out = new PrintWriter(System.out);\n        /**/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3616, "comment": "/*\n        try {\n        inB = new BufferedReader(new InputStreamReader(new FileInputStream(\"input.txt\")));\n        out = new PrintWriter(new FileOutputStream(\"output.txt\"));\n        } catch(Exception e) {}\n        /**/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3616, "comment": "//*\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3616, "comment": "//if(isValid(x+1,y+1) && !used[x+1][y+1])   ad.add(new int[] {x+1,  y+1, d});\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3616, "comment": "//if(isValid(x+1,y-1) && !used[x+1][y-1])   ad.add(new int[] {x+1,  y-1, d});\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3616, "comment": "//if(isValid(x-1,y+1) && !used[x-1][y+1])   ad.add(new int[] {x-1,  y+1, d});\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3616, "comment": "//if(isValid(x-1,y-1) && !used[x-1][y-1])   ad.add(new int[] {x-1,  y-1, d});\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3616, "comment": "/////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3616, "comment": "// pre - written\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3616, "comment": "/////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3616, "comment": "/////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3617, "comment": "//package round35;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3617, "comment": "//\tString INPUT = \"3 3 1 1 1\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3619, "comment": "// line length \n"}, "Heuristic": []}, {"nl": {"id": 3620, "comment": "/**\n *\n *\n * 3 2 3 5\n * -2 -1 4 -1 2 7 3\n *\n * 10 1 -10617 30886 -7223 -63085 47793 -61665 -14614 60492 16649 -58579 3 8 1\n * 10 4 7 1 7 3 7\n *\n * 22862 -34877\n *\n * @author pttrung\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3620, "comment": "//PrintWriter out = new PrintWriter(System.out);\n"}, "Heuristic": []}, {"nl": {"id": 3620, "comment": "// System.out.println(map[p.x][p.y] + \" \" + p.x + \" \" + p.y);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3620, "comment": "// System.setOut(new PrintStream(new BufferedOutputStream(System.out), true));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3620, "comment": "// br = new BufferedReader(new InputStreamReader(System.in));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3621, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author zodiacLeo\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3622, "comment": "/**\n         *\n         */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3622, "comment": "/**\n         *\n         */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3622, "comment": "// SOLUTION!!!\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3622, "comment": "// HACK ME PLEASE IF YOU CAN!!!\n"}, "Heuristic": ["H4"]}, {"nl": {"id": 3622, "comment": "// PLEASE!!!\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3622, "comment": "// PLEASE!!!\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3622, "comment": "// PLEASE!!!\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3622, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3622, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3622, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3622, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3622, "comment": "////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3622, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3622, "comment": "/////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3622, "comment": "/////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3622, "comment": "///////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3622, "comment": "///////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3622, "comment": "////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3622, "comment": "////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3622, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3622, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3622, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3622, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3622, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3622, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3622, "comment": "//////////////// Some useful constants and functions ////////////////\n"}, "Heuristic": []}, {"nl": {"id": 3622, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3622, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3622, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3622, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3622, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3622, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3622, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3622, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3623, "comment": "// for fast output printing  : use printwriter or stringbuilder\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3623, "comment": "// remember to close pw using pw.close()\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3623, "comment": "//\t\tPrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\n"}, "Heuristic": []}, {"nl": {"id": 3623, "comment": "//\t\tMyScanner sc = new MyScanner();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3623, "comment": "// print string \"s\" multiple times \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3623, "comment": "// prefer to use this function for multiple printing\n"}, "Heuristic": []}, {"nl": {"id": 3623, "comment": "// take log with base 2\n"}, "Heuristic": []}, {"nl": {"id": 3623, "comment": "// using lambda function for sorting\n"}, "Heuristic": []}, {"nl": {"id": 3623, "comment": "// (n choose k) = (n/k) * ((n-1) choose (k-1))\n"}, "Heuristic": []}, {"nl": {"id": 3623, "comment": "// just for keeping gcd function for other personal purposes\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3623, "comment": "// ======================= binary search (lower and upper bound) =======================\n"}, "Heuristic": []}, {"nl": {"id": 3623, "comment": "// for first occurrence\n"}, "Heuristic": []}, {"nl": {"id": 3623, "comment": "// for last occurrence\n"}, "Heuristic": []}, {"nl": {"id": 3623, "comment": "// ================================================================\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3623, "comment": "// ================== SEIVE OF ERATOSTHENES =======================\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3623, "comment": "// Complexity : O(N * log(log(N)))       ( almost O(N) )\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3623, "comment": "// set.add(0);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3623, "comment": "// set.add(1);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3623, "comment": "// ===========================================================\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3623, "comment": "// ================ Permutation of String ====================\n"}, "Heuristic": []}, {"nl": {"id": 3623, "comment": "// Union-find\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3623, "comment": "// static int[] parent, rank;\n"}, "Heuristic": []}, {"nl": {"id": 3623, "comment": "//\tpublic static void makeSet(int n) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3623, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3623, "comment": "//\t\tparent = new int[n+1];\n"}, "Heuristic": []}, {"nl": {"id": 3623, "comment": "//\t\trank = new int[n+1];\n"}, "Heuristic": []}, {"nl": {"id": 3623, "comment": "//\t\tfor(int i = 1; i <= n; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3623, "comment": "//\t\t\tparent[i] = i;\n"}, "Heuristic": []}, {"nl": {"id": 3623, "comment": "//\t\t\trank[i] = 0;\n"}, "Heuristic": []}, {"nl": {"id": 3623, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3623, "comment": "//\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3623, "comment": "//root of u\n"}, "Heuristic": []}, {"nl": {"id": 3623, "comment": "//root of v\n"}, "Heuristic": []}, {"nl": {"id": 3623, "comment": "//\tpublic static int dijkstra(int x, int y) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3623, "comment": "//    \tint[] dist = new int[n+1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3623, "comment": "//    \tArrays.fill(dist, Integer.MAX_VALUE);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3623, "comment": "//    \tPriorityQueue<Node> q = new PriorityQueue<>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3623, "comment": "//    \tq.add(new Node(x, 0));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3623, "comment": "//    \tdist[x] = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3623, "comment": "//    \twhile(!q.isEmpty()) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3623, "comment": "//    \t\tNode node = q.poll();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3623, "comment": "//    \t\tint u = node.key;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3623, "comment": "//    \t\tif(u == y) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3623, "comment": "//    \t\t\tbreak;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3623, "comment": "//    \t\t}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3623, "comment": "//    \t\tfor(int v : res[u]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3623, "comment": "//    \t\t\tif(dist[v] > dist[u]+count[u]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3623, "comment": "//    \t\t\t\tdist[v] = dist[u] + count[u];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3623, "comment": "//    \t\t\t\tq.add(new Node(v, dist[v]));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3623, "comment": "//    \t\t\t}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3623, "comment": "//    \t\t}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3623, "comment": "//    \t}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3623, "comment": "//    \tif(dist[y] == Integer.MAX_VALUE) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3623, "comment": "//    \t\treturn -1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3623, "comment": "//    \t}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3623, "comment": "//    \treturn dist[y];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3623, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3626, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3626, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3627, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3629, "comment": "//              if(set.contains(x + \"\" + y)) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3629, "comment": "//                  continue;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3629, "comment": "//              }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3632, "comment": "/**\n * Created by mostafa on 10/7/17.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3633, "comment": "//TODO parameters\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3633, "comment": "//=========================================================================================================================\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3634, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3634, "comment": "//        writer.flush();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3636, "comment": "/**\n * Created by IntelliJ IDEA.\n * User: Taras_Brzezinsky\n * Date: 9/16/11\n * Time: 1:27 PM\n * To change this template use File | Settings | File Templates.\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3640, "comment": "/** call this method to initialize reader for InputStream */"}, "Heuristic": []}, {"nl": {"id": 3640, "comment": "/** get next word */"}, "Heuristic": []}, {"nl": {"id": 3640, "comment": "//TODO add check for eof if necessary\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3642, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author MaxHeap\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3644, "comment": "/*System.in*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3644, "comment": "// package Practice1.CF35;\n"}, "Heuristic": []}, {"nl": {"id": 3644, "comment": "//        pair[] arr = new pair[n];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3644, "comment": "//            arr[i] = p;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3648, "comment": "//\t\tBufferedReader s = new BufferedReader(new InputStreamReader(System.in));\n"}, "Heuristic": []}, {"nl": {"id": 3648, "comment": "//\t\tPrintWriter out = new PrintWriter(System.out);\n"}, "Heuristic": []}, {"nl": {"id": 3649, "comment": "/*   if (ONLINE_JUDGE && fileName.isEmpty()) {\n            in = new BufferedReader(new InputStreamReader(System.in));\n            out = new PrintWriter(System.out);\n        } else {\n            if (fileName.isEmpty()) {*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3649, "comment": "/*  } else {\n                in = new BufferedReader(new FileReader(fileName + \".in\"));\n                out = new PrintWriter(fileName + \".out\");\n           /* }\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3649, "comment": "//new Thread(null, new _Solution(), \"\", 128 * (1L << 20)).start();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3650, "comment": "// new InputReader(inputStream);\n"}, "Heuristic": []}, {"nl": {"id": 3650, "comment": "//new PrintWriter(outputStream);\n"}, "Heuristic": []}, {"nl": {"id": 3651, "comment": "//Scanner in = new Scanner(System.in);\n"}, "Heuristic": []}, {"nl": {"id": 3651, "comment": "//System.out.println(j+\" \"+p);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3651, "comment": "//System.out.println(j);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3651, "comment": "//System.out.print(fireTime[i][j]+\" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3651, "comment": "//System.out.println();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3651, "comment": "//System.out.println(tx+\" \"+ty);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3652, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Nafiur Rahman Khadem Shafin \ud83d\ude42\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3652, "comment": "/*\n\t\t\t * file input-output \ud83d\ude2e. Multi source bfs. Same as snackdown problem.\n\t\t\t * */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3652, "comment": "//\t\t\tSystem.out.println (\"ber hoise \"+op+\" \"+plvl);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3652, "comment": "//\t\t\t\tSystem.out.println (newX+\" \"+newY+\" \"+n+\" \"+m);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3652, "comment": "//\t\t\t\t\tSystem.out.println (\"dhukse \"+newX+\" \"+newY);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3652, "comment": "//\t\t\tSystem.out.println (max);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3652, "comment": "//\t\t\te.printStackTrace ();\n"}, "Heuristic": []}, {"nl": {"id": 3652, "comment": "//to detect eof\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3653, "comment": "/**\n\t * @param args\n\t * @throws FileNotFoundException \n\t */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3653, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3657, "comment": "//        Scanner sc=new Scanner(System.in);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3657, "comment": "// line length\n"}, "Heuristic": []}, {"nl": {"id": 3658, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3658, "comment": "//            for (int i = 0; i < n; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3658, "comment": "//                for (int j = 0; j < m; j++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3658, "comment": "//                    System.out.printf(\"%d \", map[i][j] ? 1 : 0);\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 3658, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3658, "comment": "//                System.out.println();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3658, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3658, "comment": "//            System.out.println(\"\\n-------\\n\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3660, "comment": "//System.err.println(System.currentTimeMillis() - time);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3661, "comment": "/**\n * 35C\n *\n * @author artyom\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3661, "comment": "//--------------------------------------------------------------\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3662, "comment": "//\t\tsc = new MyScanner(System.in);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3662, "comment": "//\t\tout = new PrintWriter(System.out);\n"}, "Heuristic": []}, {"nl": {"id": 3664, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author zodiacLeo\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3666, "comment": "/*   if (ONLINE_JUDGE && fileName.isEmpty()) {\n            in = new BufferedReader(new InputStreamReader(System.in));\n            out = new PrintWriter(System.out);\n        } else {\n            if (fileName.isEmpty()) {*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3666, "comment": "/*  } else {\n                in = new BufferedReader(new FileReader(fileName + \".in\"));\n                out = new PrintWriter(fileName + \".out\");\n           /* }\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3666, "comment": "//new Thread(null, new _Solution(), \"\", 128 * (1L << 20)).start();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3667, "comment": "// BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n"}, "Heuristic": []}, {"nl": {"id": 3669, "comment": "//\t\tSystem.out.println((besty+1) + \" \" + (bestx+1));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3670, "comment": "//\tString INPUT = \"3 3 1 1 1\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3671, "comment": "// Scanner sc = new Scanner(System.in);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3671, "comment": "// PrintWriter out = new PrintWriter(System.out);\n"}, "Heuristic": []}, {"nl": {"id": 3672, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Alex\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3675, "comment": "//package C;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3675, "comment": "// = new boolean[2001][2001];\n"}, "Heuristic": []}, {"nl": {"id": 3675, "comment": "//  System.out.println(\"r = \"+(p.r) + \" c = \" + (p.c));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3675, "comment": "//    System.out.println(\"r = \"+(currR+rows[i]) + \" c = \" + (currC+cols[i]));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3676, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3677, "comment": "//        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3677, "comment": "//        InputStream inputStream = System.in;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3677, "comment": "//        OutputStream outputStream = System.out;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3677, "comment": "//        InputReader s = new InputReader(inputStream);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3677, "comment": "//        PrintWriter out = new PrintWriter(outputStream);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3677, "comment": "// input.txt / output.txt\n"}, "Heuristic": []}, {"nl": {"id": 3678, "comment": "/*\n\t  br = new BufferedReader(new FileReader(\"input.txt\"));\n\t  pw = new PrintWriter(new BufferedWriter(new FileWriter(\"output.txt\")));\n\t  br = new BufferedReader(new InputStreamReader(System.in));\n\t  pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3678, "comment": "//int qq = 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3678, "comment": "//int qq = readInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3679, "comment": "//bw.append((current.x + i) + \" \" + (current.y + j) + \"\\n\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3684, "comment": "//          BufferedReader bfd = new BufferedReader(new InputStreamReader(System.in));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3684, "comment": "//          System.out.println(last.x+1 + \" \" +(last.y+1));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3685, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Nasko\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3687, "comment": "/**\n * Created by tmdautov on 07.02.18.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3687, "comment": "// res -> get coordinates of most remote tree\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3687, "comment": "//Scanner sc = new Scanner(System.in);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3687, "comment": "//out.println(\"helll\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3687, "comment": "// 1. create objects\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3687, "comment": "// 2. fill dist array with -1\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3687, "comment": "// 3. fill queue with fired k-trees\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3687, "comment": "// dist to fired trees is 0\n"}, "Heuristic": []}, {"nl": {"id": 3687, "comment": "// 4. run bfs\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3687, "comment": "//System.out.println(cur);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3687, "comment": "// 5. find max pair by dist array\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3687, "comment": "// how to sort array of pairs?\n"}, "Heuristic": ["H12"]}, {"nl": {"id": 3688, "comment": "/*   class Plane {\n        double a;\n        double b;\n        double c;\n        double d;\n\n        Plane (Point fir, Point sec, Point thi) {\n            double del1 = (sec.y - fir.y) * (thi.z - fir.z) - (thi.y - fir.y) * (sec.z - fir.z);\n            double del2 = (thi.x - fir.x) * (sec.z - fir.z) - (thi.z - fir.z) * (sec.x - fir.x);\n            double del3 = (thi.y - fir.y) * (sec.x - fir.x) - (thi.x - fir.x) * (sec.y - fir.y);\n            a = del1;\n            b = del2;\n            c = del3;\n            d = -fir.x * del1 - fir.y * del2 - fir.z * del3;\n        }\n\n        double distance(Point point) {\n            return abs(a * point.x + b * point.y + c * point.z + d) / sqrt(a * a + b * b + c * c);\n        }\n\n\n    } */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3688, "comment": "/*   public void simulation(int k) {\n        long ans = 0;\n        int start = 1;\n        for (int i = 0; i < k; i++) {\n            start *= 10;\n        }\n        for (int i = start/10; i < start; i++) {\n            int locAns = 0;\n            for (int j = start/10; j < start; j++) {\n                if  (sum(i + j) == sum(i) + sum(j) ) {\n                    ans += 1;\n                    locAns += 1;\n                } else {\n                    //.println(i + \"!!!\" + j);\n                }\n            }\n            //out.println(i + \" \" + locAns);\n        }\n        out.println(ans);\n    }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3688, "comment": "/*  void dfs(int u, int numOfComponent) {\n        vis[u] = true;\n        componentNum[u] = numOfComponent;\n\n        for (Integer v: g.get(u)) {\n            if (!vis[v]) {\n                dfs(v, numOfComponent);\n            }\n        }\n    } */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3688, "comment": "// Sworn to fight and die\n"}, "Heuristic": []}, {"nl": {"id": 3688, "comment": "// ---->\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3688, "comment": "//return o.x * o.y - x * y; // <----\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3688, "comment": "// ---->\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3688, "comment": "//return o.x * o.y - x * y; // <----\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3688, "comment": "//int compareResult = Long.compare(y, o.y); // ---->\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3688, "comment": "//if (compareResult != 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3688, "comment": "//    return -compareResult;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3688, "comment": "//}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3688, "comment": "//return o.x * o.y - x * y; // <----\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3688, "comment": "//return Long.compare(score, o.score);\n"}, "Heuristic": []}, {"nl": {"id": 3688, "comment": "//.println(i + \"!!!\" + j);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3688, "comment": "//out.println(i + \" \" + locAns);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3690, "comment": "// :%s/Cbeta35/\"name\"/\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3690, "comment": "// if (debug) \n"}, "Heuristic": []}, {"nl": {"id": 3691, "comment": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3691, "comment": "/**\n *\n * @author madis\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3699, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3699, "comment": "//                            System.out.println(i + \" \" + j + \" \" + k + \" \" + s + \" \" + dp.length + \" \" + dp[0].length + \" \" + dp[0][0].length + \" \" + dp[0][0][0].length);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3699, "comment": "//                            System.out.println(i + \" \" + j + \" \" + k + \" \" + s + \" \" + dp.length + \" \" + dp[0].length + \" \" + dp[0][0].length + \" \" + dp[0][0][0].length);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3699, "comment": "//        Arrays.fill(ways, -1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3702, "comment": "/*\n\t\tfor(int i = 0; i < dp1.length; i++)\n\t\t\tout.println(Arrays.toString(dp1[i]));\n\t\tout.println(\"-----\");\n\t\tfor(int i = 0; i < dp2.length; i++) {\n\t\t\tfor(int j = 0; j < dp2[i].length; j++) \n\t\t\t\t\tout.println(Arrays.toString(dp2[i][j]));\n\t\t\t\tout.println();\n\t\t\t}\n\t\tfor(int i = 0; i <= c[0]; i++) for(int j = 0; j <= c[1]; j++) for(int k = 0; k <= c[2]; k++) out.printf(\"%d %d %d: %d%n\", i, j, k, combo[i][j][k][0] + combo[i][j][k][1] + combo[i][j][k][2]); */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3702, "comment": "///\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3705, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3705, "comment": "//                            System.out.println(i + \" \" + j + \" \" + k + \" \" + s + \" \" + dp.length + \" \" + dp[0].length + \" \" + dp[0][0].length + \" \" + dp[0][0][0].length);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3705, "comment": "//                            System.out.println(i + \" \" + j + \" \" + k + \" \" + s + \" \" + dp.length + \" \" + dp[0].length + \" \" + dp[0][0].length + \" \" + dp[0][0][0].length);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3705, "comment": "//        Arrays.fill(ways, -1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3707, "comment": "/*\n                             ;\\\n                            |' \\\n         _                  ; : ;\n        / `-.              /: : |\n       |  ,-.`-.          ,': : |\n       \\  :  `. `.       ,'-. : |\n        \\ ;    ;  `-.__,'    `-.|\n         \\ ;   ;  :::  ,::'`:.  `.\n          \\ `-. :  `    :.    `.  \\\n           \\   \\    ,   ;   ,:    (\\\n            \\   :., :.    ,'o)): ` `-.\n           ,/,' ;' ,::\"'`.`---'   `.  `-._\n         ,/  :  ; '\"      `;'          ,--`.\n        ;/   :; ;             ,:'     (   ,:)\n          ,.,:.    ; ,:.,  ,-._ `.     \\\"\"'/\n          '::'     `:'`  ,'(  \\`._____.-'\"'\n             ;,   ;  `.  `. `._`-.  \\\\\n             ;:.  ;:       `-._`-.\\  \\`.\n              '`:. :        |' `. `\\  ) \\\n      -hrr-      ` ;:       |    `--\\__,'\n                   '`      ,'\n                        ,-'\n\n\n                      free bug dog\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3707, "comment": "/*\n5 3\n1 1\n2 1\n2 1\n2 1\n2 2\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3707, "comment": "// Don't place your source in a package\n"}, "Heuristic": []}, {"nl": {"id": 3707, "comment": "// Please name your class Main\n"}, "Heuristic": []}, {"nl": {"id": 3707, "comment": "//a\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3707, "comment": "//bc\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3707, "comment": "//System.out.println(x+\" \"+y+\" \"+z);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3707, "comment": "//init\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3707, "comment": "//a\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3707, "comment": "//b c\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3707, "comment": "//type!=0\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3707, "comment": "//price\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3710, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3710, "comment": "//                            System.out.println(i + \" \" + j + \" \" + k + \" \" + s + \" \" + dp.length + \" \" + dp[0].length + \" \" + dp[0][0].length + \" \" + dp[0][0][0].length);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3710, "comment": "//                            System.out.println(i + \" \" + j + \" \" + k + \" \" + s + \" \" + dp.length + \" \" + dp[0].length + \" \" + dp[0][0].length + \" \" + dp[0][0][0].length);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3710, "comment": "//        Arrays.fill(ways, -1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3712, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3712, "comment": "//                            System.out.println(i + \" \" + j + \" \" + k + \" \" + s + \" \" + dp.length + \" \" + dp[0].length + \" \" + dp[0][0].length + \" \" + dp[0][0][0].length);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3712, "comment": "//                            System.out.println(i + \" \" + j + \" \" + k + \" \" + s + \" \" + dp.length + \" \" + dp[0].length + \" \" + dp[0][0].length + \" \" + dp[0][0][0].length);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3712, "comment": "//        Arrays.fill(ways, -1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3713, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3714, "comment": "//package prac;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3714, "comment": "// \n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3714, "comment": "//\t\t\t\t\tif(base > 0 && ls > 0){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3714, "comment": "//\t\t\t\t\t\ttr(i, j, k, base, ls);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3714, "comment": "//\t\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3714, "comment": "//\t\tint n = 50, m = 2500;\n"}, "Heuristic": []}, {"nl": {"id": 3714, "comment": "//\t\tRandom gen = new Random();\n"}, "Heuristic": []}, {"nl": {"id": 3714, "comment": "//\t\tStringBuilder sb = new StringBuilder();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3714, "comment": "//\t\tsb.append(n + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3714, "comment": "//\t\tsb.append(m + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3714, "comment": "//\t\tfor (int i = 0; i < n; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3714, "comment": "//\t\t\tsb.append(50 + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3714, "comment": "//\t\t\tsb.append(gen.nextInt(3)+1 + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3714, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3714, "comment": "//\t\tINPUT = sb.toString();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3714, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3715, "comment": "// https://codeforces.com/contest/1185/submission/55800229 (rainboy)\n"}, "Heuristic": ["H1", "H9"]}, {"nl": {"id": 3717, "comment": "//static final long MOD2 = 1000000009L;\n"}, "Heuristic": []}, {"nl": {"id": 3717, "comment": "//static final long MOD = 998244353L;\n"}, "Heuristic": []}, {"nl": {"id": 3717, "comment": "//static final long INF = 500000000000L;\n"}, "Heuristic": []}, {"nl": {"id": 3717, "comment": "//Sort an array (immune to quicksort TLE)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3717, "comment": "//Ascending order.\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3717, "comment": "//Ascending order.\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3720, "comment": "// https://codeforces.com/contest/1497/submission/110250082\n"}, "Heuristic": ["H2", "H9"]}, {"nl": {"id": 3721, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3721, "comment": "//\t\tif(x < 0){ x = 0; }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3721, "comment": "// print ids which are 1\n"}, "Heuristic": []}, {"nl": {"id": 3722, "comment": "/*\n    boolean[] prime = new boolean[10001];\n    for (int i = 0; i <= 10000; i++) {\n      prime[i] = true;\n    }\n\n    for (int p = 2; p * p <= 10000; p++) {\n      if (prime[p]) {\n        for (int i = p * p; i <= 10000; i += p) {\n          prime[i] = false;\n        }\n      }\n    }\n    ArrayList<Integer> primes = new ArrayList<>();\n\n    for (int i = 2; i < 10001; i++) {\n      if (prime[i]) {\n        primes.add(i);\n      }\n    }\n    */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3722, "comment": "/*\n        int raw = Integer.parseInt(st.nextToken());\n        \n        for (int p : primes) {\n          if (p*p > raw) {\n            break;\n          }\n          while (raw % (p*p) == 0) {\n            raw /= p*p;\n          }\n        }\n        a[i] = raw;\n        */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3722, "comment": "/* this should work (O(n*k^2))\n      int[][] minLeftIndex = new int[n][k+1];\n    \n      for (int j = 0; j <= k; j++) {\n        HashMap<Integer, Integer> interval = new HashMap<>();\n        int leftIndex = 0; // the right index is i in this case\n        int removed = 0;\n\n        for (int i = 0; i < n; i++) {\n          if (!interval.containsKey(a[i])) {\n            interval.put(a[i], 0);\n          }\n          interval.put(a[i], interval.get(a[i])+1);\n          if (interval.get(a[i]) > 1) {\n            removed++;\n          }\n          while (removed > j) {\n            interval.put(a[leftIndex], interval.get(a[leftIndex])-1);\n            if (interval.get(a[leftIndex]) > 0) {\n              removed--;\n            }\n            leftIndex++;\n          }\n          minLeftIndex[i][j] = leftIndex;\n          //System.out.println(i + \" \" + j + \" \" + leftIndex);\n        }\n      }\n\n      int[][] dp = new int[n][k+1];\n\n      // dp at all i = 0 = 0\n      for (int i = 0; i < n; i++) {\n        for (int j = 0; j <= k; j++) {\n          int min = Integer.MAX_VALUE;\n          for (int l = 0; l <= j; l++) {\n            if (minLeftIndex[i][l] > 0) {\n              min = Math.min(min, dp[minLeftIndex[i][l]-1][j-l] + 1); // \n            } else {\n              min = 0;\n            }\n            \n          }\n          if (min != Integer.MAX_VALUE) {\n            dp[i][j] = min;\n          }\n        }\n      }\n      \n      System.out.println(dp[n-1][k]+1);\n\n      \n\n      */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3722, "comment": "/*\n      HashSet<Integer> hs = new HashSet<>();\n\n      int segments = 1;\n\n      for (int i = 0; i < n; i++) {\n        if (hs.contains(a[i])) {\n          segments++;\n          hs.clear();\n        }\n        hs.add(a[i]);\n      }\n      System.out.println(segments);\n      */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3722, "comment": "// get primes up to 10000\n"}, "Heuristic": []}, {"nl": {"id": 3722, "comment": "// hard version has extra here\n"}, "Heuristic": []}, {"nl": {"id": 3722, "comment": "// better version O(nk)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3722, "comment": "// the right index is i in this case\n"}, "Heuristic": []}, {"nl": {"id": 3722, "comment": "//System.out.println(i + \" \" + j + \" \" + leftIndex);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3722, "comment": "// dp at all i = 0 = 0\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3722, "comment": "// \n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3722, "comment": "// easy solution\n"}, "Heuristic": []}, {"nl": {"id": 3723, "comment": "/**\n * author: derrick20\n * created: 3/20/21 7:13 PM\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3723, "comment": "//        generate();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3723, "comment": "// extend it for free (unique)\n"}, "Heuristic": []}, {"nl": {"id": 3723, "comment": "// start anew\n"}, "Heuristic": []}, {"nl": {"id": 3723, "comment": "// Use a change (only if existing segment)\n"}, "Heuristic": []}, {"nl": {"id": 3723, "comment": "// if this cost beats the old cost, or if it has a later start point, it's better.\n"}, "Heuristic": []}, {"nl": {"id": 3723, "comment": "//                System.out.println(Arrays.toString(start[nxt]));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3723, "comment": "//                System.out.println(Arrays.toString(dp[nxt]));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3723, "comment": "// always allowed to waste initial changes by starting offset, so mono decr\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3725, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3725, "comment": "//      TreeSet<Long> set;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3725, "comment": "//          set = new TreeSet<Long>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3725, "comment": "//              set.add(x);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3725, "comment": "//              set.remove(x);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3725, "comment": "//      public long getFirst() {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3725, "comment": "//          return set.first();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3725, "comment": "//      }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3725, "comment": "//      public long getLast() {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3725, "comment": "//          return set.last();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3725, "comment": "//      }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3725, "comment": "//StringJoiner sj = new StringJoiner(\" \"); \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3725, "comment": "//sj.add(strings)\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3727, "comment": "// left[i][x] = l where al ... ai such that in x moves it is valid subsequence\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3727, "comment": "// x y z w a b c\n"}, "Heuristic": []}, {"nl": {"id": 3727, "comment": "// System.out.println(now);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3727, "comment": "// System.out.println(i + \" \" + x + \" \" + l + \" \" + now);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3727, "comment": "// for (int[] x: left)\n"}, "Heuristic": []}, {"nl": {"id": 3727, "comment": "// System.out.println(Arrays.toString(x));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3727, "comment": "//#\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3727, "comment": "//$\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3728, "comment": "//stan hu tao\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3728, "comment": "//join nct ridin by first year culture reps\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3730, "comment": "/**\n * author: derrick20\n * created: 3/19/21 11:57 PM\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3730, "comment": "//        generate();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3730, "comment": "//            HashMap<Integer, Integer> freq = new HashMap<>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3733, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3733, "comment": "//                System.out.println(i + \" \"  + Arrays.toString(dp[i]));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3733, "comment": "//                System.out.println(\"Treeset : \" + ts);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3734, "comment": "//runs in roughly O(maxN * lg^2(maxN)))\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3734, "comment": "//REMINDERS:\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3734, "comment": "//- CHECK FOR INTEGER-OVERFLOW BEFORE SUBMITTING\n"}, "Heuristic": []}, {"nl": {"id": 3734, "comment": "//- CAN U BRUTEFORCE OVER SOMETHING, TO MAKE IT EASIER TO CALCULATE THE SOLUTION\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3735, "comment": "// Don't place your source in a package\n"}, "Heuristic": []}, {"nl": {"id": 3735, "comment": "// Please name your class Main\n"}, "Heuristic": []}, {"nl": {"id": 3735, "comment": "//scanner from SecondThread\n"}, "Heuristic": []}, {"nl": {"id": 3735, "comment": "//pre-processing\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3735, "comment": "//how far it can go\n"}, "Heuristic": []}, {"nl": {"id": 3735, "comment": "//take k change\n"}, "Heuristic": []}, {"nl": {"id": 3735, "comment": "//the maximum place I can reach\n"}, "Heuristic": []}, {"nl": {"id": 3736, "comment": "/**\n * author: derrick20\n * created: 3/19/21 11:57 PM\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3736, "comment": "//        generate();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3736, "comment": "//        System.out.println(Arrays.toString(canonical));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3736, "comment": "//            HashMap<Integer, Integer> freq = new HashMap<>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3737, "comment": "//<>\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3738, "comment": "/*\n 50\n873 838 288 87 889 364 720 410 565 651 577 356 740 99 549 592 994 385 777 435 486 118 887 440 749 533 356 790 413 681 267 496 475 317 88 660 374 186 61 437 729 860 880 538 277 301 667 180 60 393\n\n 6\n 2 2 3 3 5 5\n \n 4\n 2 2 3 3\n\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3738, "comment": "//System.out.println(hm);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3738, "comment": "//\t\t\tHashMap<Integer,Integer> dups = new HashMap<>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3738, "comment": "//\t\t\tfor(int x : list){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3738, "comment": "//\t\t\t\tif(!dups.containsKey(x)){\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3738, "comment": "//\t\t\t\t\tdups.put(x, 0);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3738, "comment": "//\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3738, "comment": "//\t\t\t\tdups.put(x, dups.get(x)+1);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3738, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3738, "comment": "//\t\t\tfor (int k : dups.keySet()) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3738, "comment": "//\t\t\t\tint amount = dups.get(k);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3738, "comment": "//\t\t\t\tlong tomult = new BigInteger(fact[amount]+\"\").modInverse(new BigInteger(mod+\"\")).longValue();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3738, "comment": "//\t\t\t\tbigmult*= tomult;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3738, "comment": "//\t\t\t\tbigmult %= mod;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3738, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3738, "comment": "//System.out.println(\"bigmult: \" + bigmult);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3738, "comment": "//System.out.println(\"dex: \" + dex + \" need \" + need);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3738, "comment": "//System.out.println(\"dex: \" + dex + \" need: \"+ need + \" numdivs: \" + numdivs + \" c1: \" + choose[need][gotoneed] + \" c2 \" +  choose[numspots-need][numdivs-gotoneed]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3738, "comment": "//System.out.println(\"dex: \" + dex + \" need: \"+ need + \" ret: \" + ret);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3738, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3739, "comment": "//package round429;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3739, "comment": "// 203530\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3739, "comment": "// aca\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3739, "comment": "//\t\t\tfor(int k = 0;k <= all;k++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3739, "comment": "//\t\t\t\tdp[k] = dp[k] % mod * fif[1][v] % mod;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3739, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3739, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3740, "comment": "//\t\tSystem.err.println(Arrays.toString(a) + \" \" + idx);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3740, "comment": "//\t\tSystem.err.println(Arrays.toString(dp));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3740, "comment": "//stress();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3740, "comment": "//test();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3741, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3741, "comment": "// For a description, see http://petr-mitrichev.blogspot.com/2017/07/a-week7.html\n"}, "Heuristic": ["H9"]}, {"nl": {"id": 3743, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3744, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3745, "comment": "/**\n * author: derrick20\n * created: 11/11/20 1:03 PM\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3745, "comment": "// dp[g][bad] = ways to interleave first g groups for a given # of bad pairs\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3745, "comment": "// dp[0][k] = 0, k != 0\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3745, "comment": "//            System.out.println(Arrays.toString(dp[prefix]));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3746, "comment": "/**\n * author: derrick20\n * created: 11/11/20 1:45 PM\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3746, "comment": "/*\n        intuition for runtime analysis:\n        Say there were k groups, each size n / k\n\n        The outer loop is k, 2nd loop is n worst case,\n        and the inner 2 are bounded by n / k (amt per group)\n        k * n * (n / k) * (n / k) = n^3 / k, which works despite 4 loops!!\n\n        Seems hard to convert into pull-dp since prevBad has a more direct\n        meaning in the arrangements, so using that as our variable makes more sense\n         */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3746, "comment": "// dp[g][bad] = ways to interleave first g groups for a given # of bad pairs\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3746, "comment": "// dp[0][k] = 0, k != 0\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3746, "comment": "// key bugs here and there: USE THE CORRECT BOUNDS\n"}, "Heuristic": []}, {"nl": {"id": 3746, "comment": "// key bug: NEED TO RELATE PREVIOUS DP\n"}, "Heuristic": []}, {"nl": {"id": 3746, "comment": "//            System.out.println(Arrays.toString(dp[prefix]));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3747, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3747, "comment": "//            if (arr[0] == 285) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3747, "comment": "//                out.println(i);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3747, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3748, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3749, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3749, "comment": "// For a description, see http://petr-mitrichev.blogspot.com/2017/07/a-week7.html\n"}, "Heuristic": ["H9"]}, {"nl": {"id": 3750, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3751, "comment": "//package round429;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3751, "comment": "// XX -> XCX\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3751, "comment": "// CC -> CCC\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3751, "comment": "// XC -> XCC\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3751, "comment": "// #XC = 2*(i-k)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3751, "comment": "// XY -> XCY\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3751, "comment": "// #XY = bef+i+1-#XC-#CC-#XX\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3751, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3752, "comment": "//\tout.println(list);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3752, "comment": "//\tout.println(res);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3753, "comment": "/*\n\n2\n3 5\n\n2\n6 5\n1 11\n-10 12\n\n3\n3 6 2\n\n\n1   8   5   3\n-7  9   5   3\n-7  4   14  3\n\n\n1   8   5   3\n1   3   13  3\n-2  4   13  3\n   \n\n3\n1 3 6\n\n3 3 6\n\n5 12\n-7 19\n\n\n3 5 7 11 13\n-2 8\n\n\n5 9\n\n\n5 9\n\n\n3 6 7\n-3 9 7\n\n6 3 7\n\n\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3753, "comment": "//\t\tSystem.out.println(color + \" \"+  priorities);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3754, "comment": "//package round429;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3754, "comment": "// XX -> XCX\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3754, "comment": "// CC -> CCC\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3754, "comment": "// XC -> XCC\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3754, "comment": "// #XC = 2*(i-k)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3754, "comment": "// XY -> XCY\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3754, "comment": "// #XY = bef+i+1-#XC-#CC-#XX\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3754, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3755, "comment": "//package round429;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3755, "comment": "// XX -> XCX\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3755, "comment": "// CC -> CCC\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3755, "comment": "// XC -> XCC\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3755, "comment": "// #XC = 2*(i-k)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3755, "comment": "// XY -> XCY\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3755, "comment": "// #XY = bef+i+1-#XC-#CC-#XX\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3755, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3756, "comment": "//out.println(Arrays.deepToString(dp));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3757, "comment": "// Author : RegalBeast\n"}, "Heuristic": []}, {"nl": {"id": 3759, "comment": "/**/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3759, "comment": "/*/\n\t\tDataInputStream in = new DataInputStream(new FileInputStream(\"src/d.in\"));\n\t\t/**/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3760, "comment": "// f.err(k + \"\\n\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3760, "comment": "// errorprint(ans, n, m);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3761, "comment": "//\t\tScanner sc=new Scanner(System.in);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3762, "comment": "//6 3\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3762, "comment": "//2 3 10 7 5 14\n"}, "Heuristic": []}, {"nl": {"id": 3762, "comment": "//1 6\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3762, "comment": "//2 4\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3762, "comment": "//3 5\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3762, "comment": "// max[a, b]\n"}, "Heuristic": []}, {"nl": {"id": 3763, "comment": "//package round718;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3763, "comment": "//2 5 9 9 9 9 9 8 8 8 8 5 6 7 8 9\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3763, "comment": "//\t\tint n = 500, m = 500;\n"}, "Heuristic": []}, {"nl": {"id": 3763, "comment": "//\t\tRandom gen = new Random();\n"}, "Heuristic": []}, {"nl": {"id": 3763, "comment": "//\t\tStringBuilder sb = new StringBuilder();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3763, "comment": "//\t\tsb.append(n + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3763, "comment": "//\t\tsb.append(n + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3763, "comment": "//\t\tsb.append(20 + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3763, "comment": "//\t\tfor (int i = 0; i < n; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3763, "comment": "//\t\t\tfor(int j = 0;j < m-1;j++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3763, "comment": "//\t\t\t\tsb.append(gen.nextInt(200000) + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3763, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3763, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3763, "comment": "//\t\tfor (int i = 0; i < n-1; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3763, "comment": "//\t\t\tfor(int j = 0;j < m;j++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3763, "comment": "//\t\t\t\tsb.append(gen.nextInt(200000) + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3763, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3763, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3763, "comment": "//\t\tINPUT = sb.toString();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3763, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3763, "comment": "//\t\tif(x < 0){ x = 0; }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3763, "comment": "// print ids which are 1\n"}, "Heuristic": []}, {"nl": {"id": 3764, "comment": "/*\n                             ;\\\n                            |' \\\n         _                  ; : ;\n        / `-.              /: : |\n       |  ,-.`-.          ,': : |\n       \\  :  `. `.       ,'-. : |\n        \\ ;    ;  `-.__,'    `-.|\n         \\ ;   ;  :::  ,::'`:.  `.\n          \\ `-. :  `    :.    `.  \\\n           \\   \\    ,   ;   ,:    (\\\n            \\   :., :.    ,'o)): ` `-.\n           ,/,' ;' ,::\"'`.`---'   `.  `-._\n         ,/  :  ; '\"      `;'          ,--`.\n        ;/   :; ;             ,:'     (   ,:)\n          ,.,:.    ; ,:.,  ,-._ `.     \\\"\"'/\n          '::'     `:'`  ,'(  \\`._____.-'\"'\n             ;,   ;  `.  `. `._`-.  \\\\\n             ;:.  ;:       `-._`-.\\  \\`.\n              '`:. :        |' `. `\\  ) \\\n      -hrr-      ` ;:       |    `--\\__,'\n                   '`      ,'\n                        ,-'\n\n\n                      free bug dog\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3764, "comment": "// Don't place your source in a package\n"}, "Heuristic": []}, {"nl": {"id": 3764, "comment": "// Please name your class Main\n"}, "Heuristic": []}, {"nl": {"id": 3764, "comment": "//edge : 4 directions.\n"}, "Heuristic": []}, {"nl": {"id": 3765, "comment": "//static final long MOD2 = 1000000009L;\n"}, "Heuristic": []}, {"nl": {"id": 3765, "comment": "//static final long MOD = 998244353L;\n"}, "Heuristic": []}, {"nl": {"id": 3765, "comment": "//static final long INF = 500000000000L;\n"}, "Heuristic": []}, {"nl": {"id": 3765, "comment": "//static final long NINF = -1000000000000000000L;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3765, "comment": "//up\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3765, "comment": "//down\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3765, "comment": "//left\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3765, "comment": "//right\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3765, "comment": "//Sort an array (immune to quicksort TLE)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3765, "comment": "//Ascending order.\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3766, "comment": "//long startTime = System.currentTimeMillis();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3766, "comment": "//int t = sc.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3766, "comment": "//System.out.println(\"time: \" + (System.currentTimeMillis() - startTime));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3767, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3768, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3768, "comment": "//j + 1 and j -1\n"}, "Heuristic": []}, {"nl": {"id": 3768, "comment": "// move forward on j\n"}, "Heuristic": []}, {"nl": {"id": 3768, "comment": "// move backward on j\n"}, "Heuristic": []}, {"nl": {"id": 3768, "comment": "// move forward on i\n"}, "Heuristic": []}, {"nl": {"id": 3768, "comment": "// move backward on i\n"}, "Heuristic": []}, {"nl": {"id": 3768, "comment": "//memoize\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3769, "comment": "//int t = sc.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3770, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3770, "comment": "//up down left right;\n"}, "Heuristic": []}, {"nl": {"id": 3770, "comment": "// \t\t\t\tpaths.put(powers501[3]*i + powers501[2]*j + powers501[1]*i + powers501[0]*(j+1), val);\n"}, "Heuristic": []}, {"nl": {"id": 3770, "comment": "// \t\t\t\tpaths.put(powers501[3]*i + powers501[2]*(j+1) + powers501[1]*i + powers501[0]*j, val);\n"}, "Heuristic": []}, {"nl": {"id": 3770, "comment": "// \t\t\t\tpaths.put(powers501[3]*(i+1) + powers501[2]*j + powers501[1]*i + powers501[0]*j, val);\n"}, "Heuristic": []}, {"nl": {"id": 3770, "comment": "// \t\t\t\tpaths.put(powers501[3]*i + powers501[2]*j + powers501[1]*(i+1) + powers501[0]*j, val);\n"}, "Heuristic": []}, {"nl": {"id": 3770, "comment": "//StringJoiner sj = new StringJoiner(\" \"); \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3770, "comment": "//sj.add(strings)\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3772, "comment": "//Utilities\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3774, "comment": "//sort(arr,0,n-1);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3774, "comment": "//sorting the two halves using a tmp array\n"}, "Heuristic": []}, {"nl": {"id": 3774, "comment": "//Copying the elements of tmp into the main array\n"}, "Heuristic": []}, {"nl": {"id": 3774, "comment": "//sort(arr,0,n-1);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3774, "comment": "//sorting the two halves using a tmp array\n"}, "Heuristic": []}, {"nl": {"id": 3774, "comment": "//Copying the elements of tmp into the main array\n"}, "Heuristic": []}, {"nl": {"id": 3779, "comment": "// Main Code at the Bottom\n"}, "Heuristic": []}, {"nl": {"id": 3779, "comment": "//Fast IO class\n"}, "Heuristic": []}, {"nl": {"id": 3779, "comment": "//env=true;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3779, "comment": "//debug\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3779, "comment": "//Global variables and functions\n"}, "Heuristic": []}, {"nl": {"id": 3779, "comment": "//Main function(The main code starts from here)\n"}, "Heuristic": []}, {"nl": {"id": 3779, "comment": "//test=sc.nextInt();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3780, "comment": "//created by Whiplash99\n"}, "Heuristic": []}, {"nl": {"id": 3781, "comment": "//CHECK FOR N=1\n"}, "Heuristic": []}, {"nl": {"id": 3781, "comment": "//CHECK FOR N=1\n"}, "Heuristic": []}, {"nl": {"id": 3781, "comment": "//CHECK FOR N=1\t\t\t\n"}, "Heuristic": []}, {"nl": {"id": 3781, "comment": "//CHECK FOR N=1\n"}, "Heuristic": []}, {"nl": {"id": 3781, "comment": "// StringBuffer sb=new StringBuffer(\"\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3781, "comment": "//  ttt =i(); \t\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3781, "comment": "//System.out.println(sb.toString());\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3781, "comment": "//CHECK FOR N=1                    //CHECK FOR M=0\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3781, "comment": "//CHECK FOR N=1                    //CHECK FOR M=0\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3781, "comment": "//CHECK FOR N=1\n"}, "Heuristic": []}, {"nl": {"id": 3781, "comment": "//CHECK FOR N=1\n"}, "Heuristic": []}, {"nl": {"id": 3781, "comment": "//CHECK FOR N=1\n"}, "Heuristic": []}, {"nl": {"id": 3781, "comment": "//\t\t  if(i==m && j==n && k<org) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3781, "comment": "//\t\t\t  return Integer.MAX_VALUE;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3781, "comment": "//\t\t  }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3781, "comment": "//\t\tpublic int compareTo(Pair o) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3781, "comment": "//\t\t\tif(this.x>o.x)\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3781, "comment": "//\t\t\t\treturn 1;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3781, "comment": "//\t\t\telse if(this.x<o.x)\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3781, "comment": "//\t\t\t\treturn -1;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3781, "comment": "//\t\t\telse {\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3781, "comment": "//\t\t\t\tif(this.y>o.y)\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3781, "comment": "//\t\t\t\t\treturn 1;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3781, "comment": "//\t\t\t\telse if(this.y<o.y)\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3781, "comment": "//\t\t\t\t\treturn -1;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3781, "comment": "//\t\t\t\telse\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3781, "comment": "//\t\t\t\t\treturn 0;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3781, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3781, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3783, "comment": "/**\n *\n * @Har_Har_Mahadev\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3783, "comment": "//=============================================================================\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3783, "comment": "//--------------------------The End---------------------------------\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3783, "comment": "//=============================================================================\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3783, "comment": "//\t\tt = sc.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3783, "comment": "//\t\t @Override\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3783, "comment": "//\t\t    public boolean equals(Object o) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3783, "comment": "//\t\t        if (this == o) return true;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3783, "comment": "//\t\t        if (!(o instanceof Pair)) return false;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3783, "comment": "//\t\t        Pair key = (Pair) o;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3783, "comment": "//\t\t        return x == key.x && y == key.y;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3783, "comment": "//\t\t    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3783, "comment": "//\t\t \n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3783, "comment": "//\t\t    @Override\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3783, "comment": "//\t\t    public int hashCode() {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3783, "comment": "//\t\t        int result = x;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3783, "comment": "//\t\t        result = 31 * result + y;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3783, "comment": "//\t\t        return result;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3783, "comment": "//\t\t    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3783, "comment": "/////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3783, "comment": "/////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3784, "comment": "//return 0;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3786, "comment": "// Created by @thesupremeone on 23/04/21\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3786, "comment": "// Fast Input & Output\n"}, "Heuristic": []}, {"nl": {"id": 3787, "comment": "// package com.company.codeforces;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3787, "comment": "//            System.out.println(\"hit\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3787, "comment": "//left\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3788, "comment": "/*if (din == null)\n                return;*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3788, "comment": "//package Codeforces.Round718Div1_2;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3788, "comment": "//for up\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3788, "comment": "//for down\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3788, "comment": "//for left\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3788, "comment": "//for right\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3788, "comment": "// line length\n"}, "Heuristic": []}, {"nl": {"id": 3789, "comment": "/*\n\n    FS Methods:\n\n    - next(): next element in string\n    - nextLine(): nextline in string\n    - ni(): next Integer\n    - nd(): next Double\n    - nl(): next Long\n    - intArray(n): \n    - longArray(n): \n    - to2di(m,n):\n    - to2dl(m,n):\n\n\n\n    */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3789, "comment": "/*\n        - The following are helping method so pls do not do anything to them.\n    \n    */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3789, "comment": "//Template with FastScanner\n"}, "Heuristic": []}, {"nl": {"id": 3789, "comment": "// jzzhao\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3789, "comment": "//int tc = sc.ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3789, "comment": "//pw.println(solve(sc,pw));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3789, "comment": "// edge info\n"}, "Heuristic": []}, {"nl": {"id": 3789, "comment": "// for(int i= 0;i<n;i++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3789, "comment": "//     for(int j = 0;j<m-1;j++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3789, "comment": "//         int l = i*1000+j;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3789, "comment": "//         int r = i*1000+j+1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3789, "comment": "//         String cur = l+\" \"+r;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3789, "comment": "//         String cur2 = r+\" \"+l;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3789, "comment": "//         map.put(cur,arr[i][j]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3789, "comment": "//         map.put(cur2,arr[i][j]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3789, "comment": "//     }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3789, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3789, "comment": "// for(int i= 0;i<n-1;i++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3789, "comment": "//     for(int j = 0;j<m;j++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3789, "comment": "//         int l = i*1000+j;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3789, "comment": "//         int r = (i+1)*1000+j;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3789, "comment": "//         String cur = l+\" \"+r;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3789, "comment": "//         String cur2 = r+\" \"+l;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3789, "comment": "//         map.put(cur,arr2[i][j]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3789, "comment": "//         map.put(cur2,arr2[i][j]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3789, "comment": "//     }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3789, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3789, "comment": "//dp fill\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3789, "comment": "// public static int[][] to2d(Scanner scanner, int m, int n){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3789, "comment": "//     int[][] ans = new int[m][n];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3789, "comment": "//     for(int i = 0;i<m;i++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3789, "comment": "//         String[] r = scanner.nextLine().split(\"[ ]\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3789, "comment": "//         for(int j = 0;j<n;j++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3789, "comment": "//             ans[i][j] = stoi(r[j]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3789, "comment": "//         }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3789, "comment": "//     }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3789, "comment": "//     return ans;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3789, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3789, "comment": "// public static int[] toArray(Scanner scanner, int m){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3789, "comment": "//     int[] ans = new int[m];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3789, "comment": "//     String[] r = scanner.nextLine().split(\"[ ]\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3789, "comment": "//     for(int i = 0;i<m;i++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3789, "comment": "//         ans[i] = stoi(r[i]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3789, "comment": "//     }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3789, "comment": "//     return ans;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3789, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3790, "comment": "//        tc=sc.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3790, "comment": "//            pw.printf(\"Case #%d:\", i);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3792, "comment": "// Author : RegalBeast\n"}, "Heuristic": []}, {"nl": {"id": 3793, "comment": "/* PriorityQueue\u306f\u62e1\u5f35for\u6587\u3067\u51fa\u3059\u3068sort\u3055\u308c\u3066\u306a\u3044\u9806\u756a\u3067\u51fa\u3066\u304f\u308b\n * long\u306ebit\u6f14\u7b97\u306f1L<<pos\u306b\u6ce8\u610f\n * JOI\u306fMLE\u304c\u53b3\u3057\u3044\u3002\u6700\u60aashort\u3092\u4f7f\u3046\u3002\n * ArrayList\u306f\u30aa\u30fc\u30c8\u30dc\u30af\u30b7\u30f3\u30b0\u304c\u9045\u3044\u304b\u3089\u3001\u6700\u60aa\u81ea\u4f5clist\u3092\u4f7f\u3046\n */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3793, "comment": "/*\u7565\u8a9e\n * 2-to, 4-for, 8-from\n * -L -long(\u578b), -P -\u7d20\u6570P\u3092\u6cd5\u3068\u3057\u305f\u4f59\u308a\n * a,b -\u4efb\u610f\u306e\u5f15\u6570, n,m -\u81ea\u7136\u6570, p -\u7d20\u6570\n * pos -postition\n * abs -\u7d76\u5bfe\u5024\n * min -minimum, max -maximum, ave -average\n * div -divide\n * pow -power(\u7d2f\u4e57)\n * ceil -ceiling(\u5929\u4e95\u95a2\u6570)\n * dt -data\n * ln -length\n * sc -scanner\n * INF -INFINITY\n * e97 -10E9+7=1000000007(prime often used)\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3793, "comment": "//@Japanese\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3793, "comment": "// @Japanese \u91cd\u307f\u4ed8\u304d\u30b0\u30e9\u30d5\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3793, "comment": "// \u91cd\u307f\u3064\u304d\u30b0\u30e9\u30d5\u306e\u9802\u70b9\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3793, "comment": "// @Japanese \u91cd\u307f\u7740\u304d\u306e\u30b0\u30e9\u30d5\u306e\u8fba\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3793, "comment": "// \u4eca\u306f\u5c0f\u3055\u3044\u306e\u304c\u524d\u306b\u51fa\u3066\u304f\u308b\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3793, "comment": "// throw Error if should_true is not true @Japanese\u300c\u65ad\u8a00\u300d\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3793, "comment": "// O(log(index))\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3793, "comment": "// @Japanese \u7e70\u308a\u8fd4\u3057\u4e8c\u4e57\u6cd5\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3793, "comment": "// O(log(n))\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3793, "comment": "// num < 2^digit\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3793, "comment": "// O(log10(n))\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3793, "comment": "// @Japanese num \u306f digit\u6841\u306e\u6570\u3067\u300110^digit\u672a\u6e80\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3793, "comment": "// O(n)\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3793, "comment": "// O(n) see also PermulationCombination:O(max_sz)+Q\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3793, "comment": "// O(log(m+n))\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3793, "comment": "// O(\u221an)\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3793, "comment": "// @Japanese \u9006\u5143\u3092\u6c42\u3081\u308b\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3793, "comment": "// O(10log(n))\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3793, "comment": "// p\u306f\u7d20\u6570\u3067\u306a\u304f\u3066\u3082\u3088\u3044\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3793, "comment": "// \u30cd\u30c3\u30c8\u304b\u3089\u62fe\u3063\u3066\u304d\u305f\u306e\u304c\u7406\u89e3\u4e0d\u80fd\u3060\u3063\u305f\u306e\u3067\u3001\u884c\u5217\u8a08\u7b97\u3092\u7528\u3044\u3066\u975e\u52b9\u7387\u7684\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u66f8\u3044\u305f\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3793, "comment": "// @Japanese\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3793, "comment": "// yn\u22611(mod p)\n"}, "Heuristic": []}, {"nl": {"id": 3793, "comment": "// <-> xp+yn=1; (n<p)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3793, "comment": "// ...(sx+ty)a+(ux+vy)b=1 (|sv-tu|=1)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3793, "comment": "// ...(sx+ty)a+(ux+vy)=1\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3793, "comment": "// <- sx+ty=0, ux+vy=1\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3793, "comment": "// O(n)\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3793, "comment": "// O(n)\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3793, "comment": "// O(n)\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3793, "comment": "// O(n)\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3793, "comment": "// O(n)\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3793, "comment": "// O(n)\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3793, "comment": "// O(G-S)\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3793, "comment": "// O(log(dt.length))\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3793, "comment": "// dt should be sorted in 0->INF\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3793, "comment": "// return adress of target\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3793, "comment": "// O(log(dt.length))\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3793, "comment": "// dt should be sorted in 0->INF\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3793, "comment": "// @Japanese target\u4ee5\u4e0b\u306e\u6700\u5927\u306eaddress\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3793, "comment": "// O(log(dt.length))\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3793, "comment": "// dt should be sorted in 0->INF\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3793, "comment": "// @Japanese target\u3088\u308a\u5927\u304d\u3044\u6700\u5c0f\u306eaddress\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3793, "comment": "//@Japanese \u30cd\u30c3\u30c8\u304b\u3089\u62fe\u3063\u3066\u304d\u305f\u3002\u3088\u304f\u5206\u304b\u3089\u3093\u3002\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3793, "comment": "// a means array\n"}, "Heuristic": []}, {"nl": {"id": 3794, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3795, "comment": "// int t;\n"}, "Heuristic": []}, {"nl": {"id": 3795, "comment": "// Pair(int f,int s, PrintWriter w){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3795, "comment": "// this.p = p;\n"}, "Heuristic": []}, {"nl": {"id": 3795, "comment": "// this.w = w;\n"}, "Heuristic": []}, {"nl": {"id": 3795, "comment": "// this.t = t;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3795, "comment": "// 1 for swap\n"}, "Heuristic": []}, {"nl": {"id": 3795, "comment": "// e1.w.println(\"**\"+e1.f+\" \"+e2.f);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3795, "comment": "// e1.w.println(\"##\"+e1.f+\" \"+e2.f);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3795, "comment": "//// recursive dfs\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3795, "comment": "// int n = dist.length - 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3795, "comment": "// int max = 1;\n"}, "Heuristic": []}, {"nl": {"id": 3795, "comment": "// dist[x] = dist[s] + 1;\n"}, "Heuristic": []}, {"nl": {"id": 3795, "comment": "// w.println(\"* \" + s + \" \" + x + \" \" + p);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3795, "comment": "// max = Math.max(max,(n-p));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3795, "comment": "//// iterative BFS\n"}, "Heuristic": []}, {"nl": {"id": 3795, "comment": "// dist--;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3795, "comment": "// dist--;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3795, "comment": "// siz++;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3795, "comment": "// x is the target value or key\n"}, "Heuristic": []}, {"nl": {"id": 3795, "comment": "// x is the key or target value\n"}, "Heuristic": []}, {"nl": {"id": 3795, "comment": "// x is the target value or key\n"}, "Heuristic": []}, {"nl": {"id": 3795, "comment": "// x is the key or target value\n"}, "Heuristic": []}, {"nl": {"id": 3795, "comment": "//////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3795, "comment": "//////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3795, "comment": "// code here\n"}, "Heuristic": []}, {"nl": {"id": 3795, "comment": "// ArrayList<Integer>[] g;\n"}, "Heuristic": []}, {"nl": {"id": 3795, "comment": "//int[] col;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3795, "comment": "//HashMap<Long, Boolean>[] dp;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3795, "comment": "// boolean[][] v;\n"}, "Heuristic": []}, {"nl": {"id": 3795, "comment": "//long[] a;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3795, "comment": "// ArrayList<Integer[]> a;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3795, "comment": "// int[][] ans;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3795, "comment": "// StringBuilder[] a;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3795, "comment": "// StringBuilder[] b;\n"}, "Heuristic": []}, {"nl": {"id": 3795, "comment": "//StringBuilder ans;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3795, "comment": "//test = sc.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3796, "comment": "// t=ni();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3796, "comment": "/////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3796, "comment": "/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3798, "comment": "//int cases = sc.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3798, "comment": "//for(int i=0;i<cases;i++)\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3799, "comment": "//    static long MOD = 998244353;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3799, "comment": "//        test = sc.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3799, "comment": "//            out.print(\"Case #\"+i+\": \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3799, "comment": "//Shuffle Sort\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3799, "comment": "//shuffle, then sort\n"}, "Heuristic": []}, {"nl": {"id": 3799, "comment": "//Brian Kernighans Algorithm\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3799, "comment": "//Euclidean Algorithm\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3799, "comment": "//Modular Exponentiation\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3799, "comment": "//AKS Algorithm\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3800, "comment": "//static ArrayList<Integer>a;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3800, "comment": "//static String a,b;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3800, "comment": "//A();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3800, "comment": "//B();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3800, "comment": "//C();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3800, "comment": "//E();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3800, "comment": "//F();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3800, "comment": "//G();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3800, "comment": "//nums[i]=new ArrayList<Integer>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3800, "comment": "///nums[i].add(a[i][j]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3801, "comment": "// author: Nagabhushan S Baddi\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3801, "comment": "// PRIMARY VARIABLES\n"}, "Heuristic": []}, {"nl": {"id": 3801, "comment": "// CONSTANTS\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3801, "comment": "// INIT\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3801, "comment": "// PRINT ANSWER\n"}, "Heuristic": []}, {"nl": {"id": 3801, "comment": "// SORT SHORTCUTS - QUICK SORT TO MERGE SORT\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3801, "comment": "// INPUT SHORTCUTS\n"}, "Heuristic": []}, {"nl": {"id": 3801, "comment": "// PRINT SHORTCUTS\n"}, "Heuristic": []}, {"nl": {"id": 3801, "comment": "// GRAPH SHORTCUTS\n"}, "Heuristic": []}, {"nl": {"id": 3801, "comment": "// MATHS AND NUMBER THEORY SHORTCUTS\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3801, "comment": "// O(log(min(a,b)))\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3801, "comment": "// Segment Tree\n"}, "Heuristic": []}, {"nl": {"id": 3801, "comment": "// Range Sum\n"}, "Heuristic": []}, {"nl": {"id": 3801, "comment": "// seg[pos] = seg[2*pos+1]+seg[2*pos+2];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3801, "comment": "// Range Min\n"}, "Heuristic": []}, {"nl": {"id": 3801, "comment": "// Range Sum\n"}, "Heuristic": []}, {"nl": {"id": 3801, "comment": "// return leftValue+rightValue;\n"}, "Heuristic": []}, {"nl": {"id": 3801, "comment": "// Range Min\n"}, "Heuristic": []}, {"nl": {"id": 3801, "comment": "// DSU\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3801, "comment": "// KMP\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3801, "comment": "// FAST INPUT OUTPUT LIBRARY\n"}, "Heuristic": []}, {"nl": {"id": 3802, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Lynn\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3803, "comment": "// pairs\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3804, "comment": "//static ArrayList<Integer>a;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3804, "comment": "//static String a,b;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3804, "comment": "//A();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3804, "comment": "//B();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3804, "comment": "//C();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3804, "comment": "//E();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3804, "comment": "//F();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3804, "comment": "//G();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3804, "comment": "//nums[i]=new ArrayList<Integer>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3804, "comment": "///nums[i].add(a[i][j]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3806, "comment": "//not possible\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3807, "comment": "/**\n * A simple template for competitive programming problems.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3807, "comment": "//InputReader in = new InputReader(\"input.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3807, "comment": "//hor[i][j]=mat[i][j] -> mat[i][j+1]\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3807, "comment": "//ver[i][j]= mat[i][j] -> mat[i+1][j]\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3808, "comment": "// Scanner in = new Scanner(System.in);\n"}, "Heuristic": []}, {"nl": {"id": 3808, "comment": "// Scanner in = new Scanner(new BufferedReader(new\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3808, "comment": "// InputStreamReader(System.in)));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3808, "comment": "// InputReader in = new InputReader(new\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3808, "comment": "// File(\"ethan_traverses_a_tree.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3808, "comment": "// PrintWriter out = new PrintWriter(new\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3808, "comment": "// File(\"ethan_traverses_a_tree-output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// public class Vector implements Comparable<Vector> {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// long x;\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// long y;\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// int type;\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// int number;\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3809, "comment": "// public Vector() {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// x = 0;\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// y = 0;\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3809, "comment": "// public Vector(long x, long y, int type, int number) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// this.x = x;\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// this.y = y;\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// this.type = type;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// this.number = number;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3809, "comment": "// public Vector(long x, long y) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3809, "comment": "// public Vector(Point begin, Point end) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// this(end.x - begin.x, end.y - begin.y);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3809, "comment": "// public void orient() {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// if (x < 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// x = -x;\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// y = -y;\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "// if (x == 0 && y < 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// y = -y;\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3809, "comment": "// public void normalize() {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// long gcd = gcd(abs(x), abs(y));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// x /= gcd;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// y /= gcd;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3809, "comment": "// public String toString() {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// return x + \" \" + y;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3809, "comment": "// public boolean equals(Vector v) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// return x == v.x && y == v.y;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3809, "comment": "// public boolean collinear(Vector v) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// return cp(this, v) == 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3809, "comment": "// public boolean orthogonal(Vector v) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// return dp(this, v) == 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3809, "comment": "// public Vector ort(Vector v) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// return new Vector(-y, x);\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3809, "comment": "// public Vector add(Vector v) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// return new Vector(x + v.x, y + v.y);\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3809, "comment": "// public Vector multiply(long c) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// return new Vector(c * x, c * y);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3809, "comment": "// public int quater() {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// if (x > 0 && y >= 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// return 1;\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "// if (x <= 0 && y > 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// return 2;\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "// if (x < 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// return 3;\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "// return 0;\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3809, "comment": "// public long len2() {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// return x * x + y * y;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3809, "comment": "// @Override\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "// public int compareTo(Vector o) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// if (quater() != o.quater()) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// return quater() - o.quater();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "// return signum(cp(o, this));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "// public long dp(Vector v1, Vector v2) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// return v1.x * v2.x + v1.y * v2.y;\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3809, "comment": "// public long cp(Vector v1, Vector v2) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// return v1.x * v2.y - v1.y * v2.x;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "// public class Line implements Comparable<Line> {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// Point p;\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// Vector v;\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3809, "comment": "// public Line(Point p, Vector v) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// this.p = p;\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// this.v = v;\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3809, "comment": "// public Line(Point p1, Point p2) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// if (p1.compareTo(p2) < 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// p = p1;\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// v = new Vector(p1, p2);\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// } else {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// p = p2;\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// v = new Vector();\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3809, "comment": "// public boolean collinear(Line l) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// return v.collinear(l.v);\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3809, "comment": "// public boolean inLine(Point p) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// return hv(p) == 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3809, "comment": "// public boolean inSegment(Point p) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// if (!inLine(p)) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// return false;\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "// Point p1 = p;\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// Point p2 = p.add(v);\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// return p1.x <= p.x && p.x <= p2.x && min(p1.y, p2.y) <= p.y && p.y <=\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// max(p1.y, p2.y);\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3809, "comment": "// public boolean equalsSegment(Line l) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// return p.equals(l.p) && v.equals(l.v);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3809, "comment": "// public boolean equalsLine(Line l) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// return collinear(l) && inLine(l.p);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3809, "comment": "// public long hv(Point p) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// Vector v1 = new Vector(this.p, p);\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// return cp(v, v1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3809, "comment": "// public double h(Point p) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// Vector v1 = new Vector(this.p, p);\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// return cp(v, v1) / Math.sqrt(v.len2());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3809, "comment": "// public long[] intersectLines(Line l) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// if (collinear(l)) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// return null;\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "// long[] ans = new long[4];\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3809, "comment": "// return ans;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3809, "comment": "// public long[] intersectSegment(Line l) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// long[] ans = intersectLines(l);\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// if (ans == null) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// return null;\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "// Point p1 = p;\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// Point p2 = p.add(v);\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// boolean f1 = p1.x * ans[1] <= ans[0] && ans[0] <= p2.x * ans[1] && min(p1.y,\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// p2.y) * ans[3] <= ans[2]\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// && ans[2] <= max(p1.y, p2.y) * ans[3];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// p1 = l.p;\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// p2 = l.p.add(v);\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// boolean f2 = p1.x * ans[1] <= ans[0] && ans[0] <= p2.x * ans[1] && min(p1.y,\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// p2.y) * ans[3] <= ans[2]\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// && ans[2] <= max(p1.y, p2.y) * ans[3];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// if (!f1 || !f2) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// return null;\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "// return ans;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3809, "comment": "// @Override\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "// public int compareTo(Line o) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "// return v.compareTo(o.v);\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//    public Line(Point a, Point b) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//      this.a = a.y - b.y;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//      this.b = b.x - a.x;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//      this.c = a.x * b.y - a.y * b.x;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//  public long compareDist(Circle a, Circle b, Circle c) { // tangent to a, b; a.r, b.r may be < 0\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    long x = b.p.x - a.p.x;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    long y = b.p.y - a.p.y;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    long r = b.r - a.r;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    long dx = c.p.x - a.p.x;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    long dy = c.p.y - a.p.y;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    long dr = c.r - a.r;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    long left = y * dx - x * dy;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    long sqrt = x * x + y * y - r * r;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    long right = dr * (x * x + y * y) - r * (x * dx + y * dy);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    if (sqrt == 0 || left == 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//      if (right > 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//        return -1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//      }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//      if (right < 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//        return 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//      }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//      return 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    if (right == 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//      if (left > 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//        return 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//      }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//      return -1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    if (left > 0 && right < 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//      return 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    if (left < 0 && right > 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//      return -1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    int mult = 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    if (left < 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//      mult = -1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    return BigInteger.valueOf(left).pow(2).multiply(BigInteger.valueOf(sqrt))\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//        .compareTo(BigInteger.valueOf(right).pow(2)) * mult;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//  }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//  public boolean inOrTang(Circle a, Circle b, Circle c) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    return compareDist(a, b, c) <= 0 && compareDist(a, b, new Circle(c.p, -c.r)) >= 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//  }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//  public boolean in(Circle a, Circle b, Circle c) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    return compareDist(a, b, c) < 0 && compareDist(a, b, new Circle(c.p, -c.r)) > 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//  }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//  public void tangents(Point c, long r1, long r2, ArrayList<Line> ans) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    long r = r2 - r1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    long z = sqr(c.x) + sqr(c.y);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    long delta = z - sqr(r);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    if (delta <= 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//      return;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    double d = Math.sqrt(Math.abs(delta));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    Line l = new Line((c.x * r + c.y * d) / z, (c.y * r - c.x * d) / z, r1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    if (r1 * r2 >= 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//      ans.add(new Line(l.a, l.b, l.c + eps));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//      ans.add(new Line(l.a, l.b, l.c - eps));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    } else {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//      double sqrt = Math.hypot(c.x, c.y);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//      double da = eps * c.y / sqrt;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//      double db = -eps * c.x / sqrt;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//      ans.add(new Line(l.a + da, l.b + db, l.c));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//      ans.add(new Line(l.a - da, l.b - db, l.c));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//  }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//  public ArrayList<Line> tangents(Circle a, Circle b) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    ArrayList<Line> ans = new ArrayList<>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    for (int i = -1; i <= 1; i += 2) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//      for (int j = -1; j <= 1; j += 2) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//        tangents(b.p.subtract(a.p), a.r * i, b.r * j, ans);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//      }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    for (int i = 0; i < ans.size(); ++i) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//      ans.get(i).c -= ans.get(i).a * a.p.x + ans.get(i).b * a.p.y;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//    return ans;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//  }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//\t\tint n = 500;\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "//\t\tint m = 500;\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "//\t\tint k = 20;\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "//\t\t\t\thor[i][j] = random.nextInt(1000000) + 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\tvert[i][j] = random.nextInt(1000000) + 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//\t\tfor (int i = 0; i < n; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//\t\t\tfor (int j = 0; j < m; j++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\teven.clear();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\todd.clear();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\teven.put(i * m + j, 0);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\tfor (int l = 0; l < k; l++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\tif (l % 2 == 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\todd.clear();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\tfor (Entry<Integer, Integer> e : even.entrySet()) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\t\tint x = e.getKey() / m;\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\t\tint y = e.getKey() % m;\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\t\tint value = e.getValue();\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\t\tif (x > 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\t\t\taddOdd((x - 1) * m + y, value + vert[x - 1][y]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\t\tif (y > 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\t\t\taddOdd(x * m + y - 1, value + hor[x][y - 1]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\t\tif (x < n - 1) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\t\t\taddOdd((x + 1) * m + y, value + vert[x][y]);\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\t\tif (y < m - 1) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\t\t\taddOdd(x * m + y + 1, value + hor[x][y]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t} else {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\teven.clear();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\tfor (Entry<Integer, Integer> e : odd.entrySet()) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\t\tint x = e.getKey() / m;\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\t\tint y = e.getKey() % m;\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\t\tint value = e.getValue();\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\t\tif (x > 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\t\t\taddEven((x - 1) * m + y, value + vert[x - 1][y]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\t\tif (y > 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\t\t\taddEven(x * m + y - 1, value + hor[x][y - 1]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\t\tif (x < n - 1) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\t\t\taddEven((x + 1) * m + y, value + vert[x][y]);\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\t\tif (y < m - 1) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\t\t\taddEven(x * m + y + 1, value + hor[x][y]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\tans[i][j] = Integer.MAX_VALUE;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\tif (k % 2 == 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\tfor (Entry<Integer, Integer> e : even.entrySet()) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\tans[i][j] = Math.min(ans[i][j], e.getValue() * 2);\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t} else {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\tfor (Entry<Integer, Integer> e : odd.entrySet()) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t\tans[i][j] = Math.min(ans[i][j], e.getValue() * 2);\n"}, "Heuristic": []}, {"nl": {"id": 3809, "comment": "//\t\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3809, "comment": "// AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3810, "comment": "/*\nheight == 2, width == 3\n\n2 3 2\n1 1\n1 1\n1 1 1\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3810, "comment": "//TODO: double answer\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3811, "comment": "//idea 1 : K/2\ubc88\uae4c\uc9c0\ub9cc \uc2e4\ud589\ud574\uc11c, \uadf8 \ucd5c\uc19f\uac12 *2\ub97c \ud558\uba74 \ub41c\ub2e4\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3811, "comment": "//bfs\ub85c i,j\uce78\uc5d0 \ud06c\uac70\ub098 \uac19\uc740 \uac12\uc744 \uac00\uc9c0\uace0 \uc9c4\uc785\ud558\uba74, \uc989\uc2dc cut\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3811, "comment": "//up down left right\n"}, "Heuristic": []}, {"nl": {"id": 3811, "comment": "//0 is wall\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3811, "comment": "//up down left right\n"}, "Heuristic": []}, {"nl": {"id": 3812, "comment": "// int t = Integer.parseInt(br.readLine());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3812, "comment": "//\t\twhile (t-- > 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3812, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3812, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3812, "comment": "//\tSystem.out.println(i+\" \"+j+\" \"+k);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3812, "comment": "//\tSystem.out.println(ans+\" 0\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3812, "comment": "//\tSystem.out.println(ans+\" 1\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3812, "comment": "//\tSystem.out.println(ans+\" 2\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3812, "comment": "//\tSystem.out.println(ans+\" 3\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3812, "comment": "//private static long getGCD(long l, long m) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3812, "comment": "//// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3812, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3812, "comment": "//long t1 = Math.min(l, m);\n"}, "Heuristic": []}, {"nl": {"id": 3812, "comment": "//long t2 = Math.max(l, m);\n"}, "Heuristic": []}, {"nl": {"id": 3812, "comment": "//while (true) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3812, "comment": "//\tlong temp = t2 % t1;\n"}, "Heuristic": []}, {"nl": {"id": 3812, "comment": "//\tif (temp == 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3812, "comment": "//\t\treturn t1;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3812, "comment": "//\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3812, "comment": "//\tt2 = t1;\n"}, "Heuristic": []}, {"nl": {"id": 3812, "comment": "//\tt1 = temp;\n"}, "Heuristic": []}, {"nl": {"id": 3812, "comment": "//}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3814, "comment": "/*\nbts songs to dance to:\nI need U\nRun\nON\nFilter\nI'm fine\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3814, "comment": "//all are -1 if K is odd\n"}, "Heuristic": []}, {"nl": {"id": 3815, "comment": "// Author : RegalBeast\n"}, "Heuristic": []}, {"nl": {"id": 3816, "comment": "// references\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3816, "comment": "// IBIG = 1e9 + 7\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3816, "comment": "// IMAX ~= 2e9\n"}, "Heuristic": []}, {"nl": {"id": 3816, "comment": "// LMAX ~= 9e18\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3816, "comment": "// constants\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3816, "comment": "// math util\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3816, "comment": "// array util\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3816, "comment": "// input\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3816, "comment": "// output\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3817, "comment": "// Author : RegalBeast\n"}, "Heuristic": []}, {"nl": {"id": 3818, "comment": "// for(int i = 0; i < n; i++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3818, "comment": "//     for(int j = 0; j < m; j++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3818, "comment": "//         for(int x = 0; x < k; x++)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3818, "comment": "//     }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3818, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3818, "comment": "// val = hori[x][y - 1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3818, "comment": "// val = vert[x - 1][y];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3818, "comment": "// val = vert[x + 1][y];\n"}, "Heuristic": []}, {"nl": {"id": 3818, "comment": "// System.out.println(val);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3819, "comment": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3819, "comment": "/**\n *\n * @author is2ac\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3819, "comment": "//int t = fs.ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3819, "comment": "// for (int tc = 0; tc < t; tc++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3819, "comment": "//matrix[i][j]++;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3820, "comment": "//int now = (int)(Math.random()*1000000)*2;\n"}, "Heuristic": []}, {"nl": {"id": 3820, "comment": "//int now = (int)(Math.random()*1000000)*2;\n"}, "Heuristic": []}, {"nl": {"id": 3821, "comment": "//        int T=fs.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3821, "comment": "//        for (int tt=1; tt<=T; tt++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3821, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3822, "comment": "//pw.println(\"CUR: \" + cur + \" X: \" + x + \" Y: \" + y + \" get = \" + graph[x-1][y].get(0));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3823, "comment": "/**\n * @Author:\n * @Date: 2021/4/23 23:55\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3823, "comment": "//    static void dfs(int x, int y,int cur, int left){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3823, "comment": "//        if(x<0||x>=n||y<0||y>=m){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3823, "comment": "//            return;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3823, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3823, "comment": "//        if(left==0&&x==orix&&y==oriy){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3823, "comment": "//            max = Math.min(max,cur);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3823, "comment": "//            return;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3823, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3823, "comment": "//        if(left<=0){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3823, "comment": "//            return;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3823, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3823, "comment": "//        if(cur>=max){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3823, "comment": "//            return;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3823, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3823, "comment": "//        if(x+1<n){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3823, "comment": "//            dfs(x+1,y,cur+cols[x][y],left-1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3823, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3823, "comment": "//        if(x-1>=0){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3823, "comment": "//            dfs(x-1,y,cur+cols[x-1][y],left-1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3823, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3823, "comment": "//        if(y+1<m){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3823, "comment": "//            dfs(x,y+1,cur+rows[x][y],left-1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3823, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3823, "comment": "//        if(y-1>=0){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3823, "comment": "//            dfs(x,y-1,cur+rows[x][y-1],left-1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3823, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3823, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3823, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3827, "comment": "/*\n    }\n    /*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3827, "comment": "// static int L,R,top,bottom;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3827, "comment": "// static int cnt,edge;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3827, "comment": "// static long ans;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3827, "comment": "// int t=sc.nextInt();           \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3827, "comment": "// static class Node{\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3827, "comment": "//     int left,right;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3827, "comment": "//     Node prev,next;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3827, "comment": "//     Node(int i, int v){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3827, "comment": "//         left=i;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3827, "comment": "//         right=v;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3827, "comment": "//         prev=next=null;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3827, "comment": "//     }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3827, "comment": "//     void remove(){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3827, "comment": "//         this.prev.next=this.next;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3827, "comment": "//         this.next.prev=this.prev;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3827, "comment": "//     }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3827, "comment": "//     void insert(Node node){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3827, "comment": "//         node.next=this;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3827, "comment": "//         node.prev=this.prev;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3827, "comment": "//         node.prev.next=node;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3827, "comment": "//         this.prev=node;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3827, "comment": "//     }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3827, "comment": "// } \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3827, "comment": "//*\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3827, "comment": "//*/\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3828, "comment": "/*int target = k / 2;\n\t\tfor(int i = 0; i < row; i++)\n\t\t\tfor(int j = 0; j < col; j++)\n\t\t\t\toutput[i][j] = bfs(j, i, target, grid) << 1;*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3828, "comment": "/*private static int bfs(int xStart, int yStart, int target, Point[][] grid) \n\t{\n\t\tPriorityQueue<Step> q = new PriorityQueue<Step>();\n\t\tq.add(new Step(grid[yStart][xStart], 0, 0));\n\t\t\n\t\tStep s;\n\t\tint w;\n\t\twhile(!q.isEmpty())\n\t\t{\n\t\t\ts = q.poll();\n\t\t\t\n\t\t\tif(s.numSteps == target)\n\t\t\t\treturn s.length;\n\t\t\t\n\t\t\t// try to go in each of the four directions\n\t\t\tfor(int d = 0; d < 4; d++)\n\t\t\t{\n\t\t\t\tw = s.current.weight[d];\n\t\t\t\tif(w != -1)\n\t\t\t\t\tq.add(new Step(grid[s.current.y + s.current.dy[d]][s.current.x + s.current.dx[d]], s.length + w, s.numSteps + 1));\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn -1;\n\t}*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3828, "comment": "// try bfs (hoping it passes the time constraint)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3828, "comment": "// try to go in each of the four directions\n"}, "Heuristic": []}, {"nl": {"id": 3828, "comment": "// right\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3828, "comment": "// left\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3828, "comment": "// down\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3828, "comment": "// up\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3828, "comment": "// down, up, right, left\n"}, "Heuristic": []}, {"nl": {"id": 3829, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3830, "comment": "// Corner cases\n"}, "Heuristic": []}, {"nl": {"id": 3830, "comment": "// This is checked so that we can skip\n"}, "Heuristic": []}, {"nl": {"id": 3830, "comment": "// middle five numbers in below loop\n"}, "Heuristic": []}, {"nl": {"id": 3830, "comment": "// method to return LCM of two numbers\n"}, "Heuristic": []}, {"nl": {"id": 3830, "comment": "// 3,5,7\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3830, "comment": "// 2x+3=n\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3830, "comment": "//    reverse division for 2\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3830, "comment": "// Print the number of 2s that divide n\n"}, "Heuristic": []}, {"nl": {"id": 3830, "comment": "// n must be odd at this point.  So we can\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3830, "comment": "// skip one element (Note i = i +2)\n"}, "Heuristic": []}, {"nl": {"id": 3830, "comment": "// While i divides n, print i and divide n\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3831, "comment": "//        int t = in.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3831, "comment": "//        for (int i = 0; i < t; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3831, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3831, "comment": "// line length\n"}, "Heuristic": []}, {"nl": {"id": 3831, "comment": "// noinspection ALL\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3831, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3832, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3832, "comment": "//left\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3832, "comment": "//right\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3832, "comment": "//bot\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3832, "comment": "//top\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3832, "comment": "//            boolean success = false;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3832, "comment": "//            if (stringBuilderValueField != null) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3832, "comment": "//                try {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3832, "comment": "//                    char[] value = (char[]) stringBuilderValueField.get(cache);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3832, "comment": "//                    os.write(value, 0, cache.length());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3832, "comment": "//                    success = true;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3832, "comment": "//                } catch (Exception e) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3832, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3832, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3832, "comment": "//            if (!success) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3832, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3834, "comment": "//    static long MOD = 998244353;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3834, "comment": "//        test = sc.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3834, "comment": "//            out.print(\"Case #\"+i+\": \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3834, "comment": "//Shuffle Sort\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3834, "comment": "//shuffle, then sort\n"}, "Heuristic": []}, {"nl": {"id": 3834, "comment": "//Brian Kernighans Algorithm\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3834, "comment": "//Euclidean Algorithm\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3834, "comment": "//Modular Exponentiation\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3834, "comment": "//AKS Algorithm\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3836, "comment": "/* package codechef; // don't place package name! */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3836, "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3836, "comment": "// don't place package name! */\n"}, "Heuristic": []}, {"nl": {"id": 3836, "comment": "// left\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3836, "comment": "// right\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3836, "comment": "// up\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3836, "comment": "// down\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3836, "comment": "// your code goes here\n"}, "Heuristic": []}, {"nl": {"id": 3838, "comment": "//I'm Whiplash99\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3840, "comment": "/*\npolyakoff\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3841, "comment": "// map.put(1, 0);\n"}, "Heuristic": []}, {"nl": {"id": 3841, "comment": "//\tprivate static long getGCD(long l, long m) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3841, "comment": "//\t\t// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3841, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3841, "comment": "//\t\tlong t1 = Math.min(l, m);\n"}, "Heuristic": []}, {"nl": {"id": 3841, "comment": "//\t\tlong t2 = Math.max(l, m);\n"}, "Heuristic": []}, {"nl": {"id": 3841, "comment": "//\t\twhile (true) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3841, "comment": "//\t\t\tlong temp = t2 % t1;\n"}, "Heuristic": []}, {"nl": {"id": 3841, "comment": "//\t\t\tif (temp == 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3841, "comment": "//\t\t\t\treturn t1;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3841, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3841, "comment": "//\t\t\tt2 = t1;\n"}, "Heuristic": []}, {"nl": {"id": 3841, "comment": "//\t\t\tt1 = temp;\n"}, "Heuristic": []}, {"nl": {"id": 3841, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3841, "comment": "//\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3843, "comment": "// int t = 1; \n"}, "Heuristic": []}, {"nl": {"id": 3843, "comment": "// if(a!=p.a)\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3843, "comment": "//     return a-p.a;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3843, "comment": "// return b-p.b;\n"}, "Heuristic": []}, {"nl": {"id": 3843, "comment": "// static boolean isPrime(long n) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3843, "comment": "//     if (n <= 1)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3843, "comment": "//         return false;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3843, "comment": "//     if (n <= 999)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3843, "comment": "//         return true;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3843, "comment": "//     if (n % 2 == 0 || n % 999 == 0)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3843, "comment": "//         return false;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3843, "comment": "//     for (int i = 5; i * i <= n; i = i + 6)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3843, "comment": "//         if (n % i == 0 || n % (i + 2) == 0)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3843, "comment": "//             return false;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3843, "comment": "//     return true;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3843, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3844, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3844, "comment": "// greedy, maintain stack, keep stack as big as possible\n"}, "Heuristic": []}, {"nl": {"id": 3844, "comment": "// start a new one\n"}, "Heuristic": []}, {"nl": {"id": 3845, "comment": "//check if n is a multiple of 2\n"}, "Heuristic": []}, {"nl": {"id": 3845, "comment": "//if not, then just check the odds\n"}, "Heuristic": []}, {"nl": {"id": 3845, "comment": "//        int t = 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3847, "comment": "/* package codechef; // don't place package name! */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3847, "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3847, "comment": "// don't place package name! */\n"}, "Heuristic": []}, {"nl": {"id": 3847, "comment": "// your code goes here\n"}, "Heuristic": []}, {"nl": {"id": 3847, "comment": "//  System.out.println(a[j]+\"*\"+j);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3848, "comment": "/*\n    Solution Created: 19:12:30 30/05/2021\n    Custom Competitive programming helper.\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3848, "comment": "// Inverted doesn't exist\n"}, "Heuristic": []}, {"nl": {"id": 3849, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3849, "comment": "//System.out.println(location + \" \" + l);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3850, "comment": "//SOLUTION BEGIN\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3850, "comment": "//        Stack<Integer> stack = new Stack<>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3850, "comment": "//!stack.isEmpty() && stack.peek()+1 != A[i])stack.pop();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3850, "comment": "//SOLUTION END\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3850, "comment": "//Solution Credits: Taranpreet Singh\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3852, "comment": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3852, "comment": "/**\n *\n * @author wilso\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3852, "comment": "/* */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3852, "comment": "/* */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3852, "comment": "/* */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3852, "comment": "//        int tc = 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3852, "comment": "//append\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3852, "comment": "//printing methods\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3852, "comment": "//WOW!\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3853, "comment": "// String[] parts=br.readLine().split(\" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3853, "comment": "// int n=Integer.parseInt(parts[0]);\n"}, "Heuristic": []}, {"nl": {"id": 3853, "comment": "// int k=Integer.parseInt(parts[1]);\n"}, "Heuristic": []}, {"nl": {"id": 3854, "comment": "/////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3854, "comment": "/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3856, "comment": "//noinspection CallToPrintStackTrace\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3857, "comment": "// code goes here\n"}, "Heuristic": []}, {"nl": {"id": 3857, "comment": "//shuffle, then sort\n"}, "Heuristic": []}, {"nl": {"id": 3857, "comment": "// Initialize result\n"}, "Heuristic": []}, {"nl": {"id": 3857, "comment": "// One by one process all digits of 'num'\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3857, "comment": "// Since C(n, k) = C(n, n-k)\n"}, "Heuristic": []}, {"nl": {"id": 3857, "comment": "// Calculate value of\n"}, "Heuristic": []}, {"nl": {"id": 3857, "comment": "// [n * (n-1) *---* (n-k+1)] / [k * (k-1) *----* 1]\n"}, "Heuristic": []}, {"nl": {"id": 3857, "comment": "// Initialize result\n"}, "Heuristic": []}, {"nl": {"id": 3857, "comment": "// Update x if it is more than or\n"}, "Heuristic": []}, {"nl": {"id": 3857, "comment": "// equal to p\n"}, "Heuristic": []}, {"nl": {"id": 3857, "comment": "// If y is odd, multiply x\n"}, "Heuristic": []}, {"nl": {"id": 3857, "comment": "// with result\n"}, "Heuristic": []}, {"nl": {"id": 3857, "comment": "// y must be even now\n"}, "Heuristic": []}, {"nl": {"id": 3857, "comment": "// y = y/2\n"}, "Heuristic": []}, {"nl": {"id": 3857, "comment": "// Returns n^(-1) mod p\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3857, "comment": "// Returns nCr % p using Fermat's\n"}, "Heuristic": []}, {"nl": {"id": 3857, "comment": "// little theorem.\n"}, "Heuristic": []}, {"nl": {"id": 3857, "comment": "// Base case\n"}, "Heuristic": []}, {"nl": {"id": 3857, "comment": "// Fill factorial array so that we\n"}, "Heuristic": []}, {"nl": {"id": 3857, "comment": "// can find all factorial of r, n\n"}, "Heuristic": []}, {"nl": {"id": 3857, "comment": "// and n-r\n"}, "Heuristic": []}, {"nl": {"id": 3858, "comment": "//add\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3858, "comment": "//replace\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3858, "comment": "//replace\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3858, "comment": "//delete\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3858, "comment": "// line length \n"}, "Heuristic": []}, {"nl": {"id": 3859, "comment": "// After writing solution, quick scan for:\n"}, "Heuristic": []}, {"nl": {"id": 3859, "comment": "//   array out of bounds\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3859, "comment": "//   special cases e.g. n=1?\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 3859, "comment": "//   npe, particularly in maps\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3859, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3859, "comment": "// Big numbers arithmetic bugs:\n"}, "Heuristic": []}, {"nl": {"id": 3859, "comment": "//   int overflow\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3859, "comment": "//   sorting, or taking max, after MOD\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3859, "comment": "// IMPORTANT\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3859, "comment": "// DID YOU CHECK THE COMMON MISTAKES ABOVE?\n"}, "Heuristic": ["H12"]}, {"nl": {"id": 3859, "comment": "// Template code below\n"}, "Heuristic": []}, {"nl": {"id": 3861, "comment": "// br = new BufferedReader(new FileReader(\".in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3861, "comment": "// out = new PrintWriter(new FileWriter(\".out\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3861, "comment": "//new Thread(null, new (), \"peepee\", 1<<28).start();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3861, "comment": "// Either add to a new level or go to existing one.\n"}, "Heuristic": []}, {"nl": {"id": 3861, "comment": "// add\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3862, "comment": "//static final long MOD2 = 1000000009L;\n"}, "Heuristic": []}, {"nl": {"id": 3862, "comment": "//static final long MOD = 998244353L;\n"}, "Heuristic": []}, {"nl": {"id": 3862, "comment": "//static final long INF = 500000000000L;\n"}, "Heuristic": []}, {"nl": {"id": 3862, "comment": "//static final long INF = 1000000000000000000L;\n"}, "Heuristic": []}, {"nl": {"id": 3862, "comment": "//Sort an array (immune to quicksort TLE)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3862, "comment": "//Ascending order.\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3863, "comment": "//Arrays.sort(ans);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3864, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3864, "comment": "//StringJoiner sj = new StringJoiner(\" \"); \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3864, "comment": "//sj.add(strings)\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3865, "comment": "/*FAST INPUT OUTPUT & METHODS BELOW*/"}, "Heuristic": ["H7"]}, {"nl": {"id": 3865, "comment": "/* for (1/a)%mod = ( a^(mod-2) )%mod  ----> use expo to calc -->(a^(mod-2)) */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3865, "comment": "/*  (p^q)%mod   */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3865, "comment": "//Implemented By Aman Kotiyal Date:-30-May-2021  Time:-7:54:28 pm\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3865, "comment": "//ArrayList<Integer> al=new ArrayList<Integer>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3865, "comment": "//al.add(1);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3866, "comment": "/*\nstream Butter!\neggyHide eggyVengeance\nI need U\nxiao rerun when\n */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3866, "comment": "//first element always 1?\n"}, "Heuristic": ["H12"]}, {"nl": {"id": 3866, "comment": "//output answer\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3869, "comment": "/**/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3869, "comment": "/*/\n\t\tScanner sc = new Scanner(new BufferedReader(new InputStreamReader(new FileInputStream(\"src/c.in\"))));\n\t\t/**/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3870, "comment": "/*\n11\n1\n1\n1\n2\n2\n1\n2\n1\n2\n2\n3\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3870, "comment": "/* \n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3870, "comment": "/*\n1. Check overflow in pow function or in general\n2. Check indices of read array function\n3. Think of an easier solution because the problems you solve are always easy\n4. Check iterator of loop\n5. If still doesn't work, then jump from the 729th floor 'coz \"beta tumse na ho paayega\"\n\n    Move to top!!\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3870, "comment": "// if current is one greater then increment\n"}, "Heuristic": []}, {"nl": {"id": 3870, "comment": "// move the chain\n"}, "Heuristic": []}, {"nl": {"id": 3870, "comment": "// move back\n"}, "Heuristic": []}, {"nl": {"id": 3870, "comment": "// transfer queue to list\n"}, "Heuristic": []}, {"nl": {"id": 3870, "comment": "// output answer\n"}, "Heuristic": []}, {"nl": {"id": 3870, "comment": "// Collections.reverse(arr);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3870, "comment": "// Check indices\n"}, "Heuristic": []}, {"nl": {"id": 3870, "comment": "// Check indices\n"}, "Heuristic": []}, {"nl": {"id": 3870, "comment": "//in Reverse Order\n"}, "Heuristic": []}, {"nl": {"id": 3871, "comment": "// line length\n"}, "Heuristic": []}, {"nl": {"id": 3871, "comment": "//System.out.println(\"YES\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3871, "comment": "//System.out.println(\"NO\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3871, "comment": "//int n=sc.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3871, "comment": "//int a[]=new int[n];\n"}, "Heuristic": []}, {"nl": {"id": 3871, "comment": "//for(int i=0;i<n;i++)\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3871, "comment": "//a[i]=sc.nextInt();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3871, "comment": "//int n=sc.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3871, "comment": "//long a[]=new long[n];\n"}, "Heuristic": []}, {"nl": {"id": 3871, "comment": "//for(int i=0;i<n;i++)\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3871, "comment": "//a[i]=sc.nextLong();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3871, "comment": "//System.out.println();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3871, "comment": "//String str=sc.next();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3871, "comment": "//long n=sc.nextLong();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3871, "comment": "//  Reader sc=new Reader();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3873, "comment": "//package deltix2021;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3873, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3873, "comment": "//\t\tif(x < 0){ x = 0; }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3873, "comment": "// print ids which are 1\n"}, "Heuristic": []}, {"nl": {"id": 3874, "comment": "/**\n __                  __\n ( _)                ( _)\n / / \\\\              / /\\_\\_\n / /   \\\\            / / | \\ \\\n / /     \\\\          / /  |\\ \\ \\\n /  /   ,  \\ ,       / /   /|  \\ \\\n /  /    |\\_ /|      / /   / \\   \\_\\\n /  /  |\\/ _ '_| \\   / /   /   \\    \\\\\n |  /   |/  0 \\0\\    / |    |    \\    \\\\\n |    |\\|      \\_\\_ /  /    |     \\    \\\\\n |  | |/    \\.\\ o\\o)  /      \\     |    \\\\\n \\    |     /\\\\`v-v  /        |    |     \\\\\n | \\/    /_| \\\\_|  /         |    | \\    \\\\\n | |    /__/_ `-` /   _____  |    |  \\    \\\\\n \\|    [__]  \\_/  |_________  \\   |   \\    ()\n /    [___] (    \\         \\  |\\ |   |   //\n |    [___]                  |\\| \\|   /  |/\n /|    [____]                  \\  |/\\ / / ||\n (  \\   [____ /     ) _\\      \\  \\    \\| | ||\n \\  \\  [_____|    / /     __/    \\   / / //\n |   \\ [_____/   / /        \\    |   \\/ //\n |   /  '----|   /=\\____   _/    |   / //\n __ /  /        |  /   ___/  _/\\    \\  | ||\n (/-(/-\\)       /   \\  (/\\/\\)/  |    /  | /\n (/\\/\\)           /   /   //\n _________/   /    /\n \\____________/    (\n\n\n @author NTUDragons-Reborn\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3874, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3874, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3874, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3874, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3874, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3874, "comment": "// main solver\n"}, "Heuristic": []}, {"nl": {"id": 3874, "comment": "// stores smallest prime factor for every number\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3874, "comment": "// Calculating SPF (Smallest Prime Factor) for every\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3874, "comment": "// number till MAXN.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3874, "comment": "// Time Complexity : O(nloglogn)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3874, "comment": "// marking smallest prime factor for every\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3874, "comment": "// number to be itself.\n"}, "Heuristic": []}, {"nl": {"id": 3874, "comment": "// separately marking spf for every even\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3874, "comment": "// number as 2\n"}, "Heuristic": []}, {"nl": {"id": 3874, "comment": "// checking if i is prime\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3874, "comment": "// marking SPF for all numbers divisible by i\n"}, "Heuristic": []}, {"nl": {"id": 3874, "comment": "// marking spf[j] if it is not\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3874, "comment": "// previously marked\n"}, "Heuristic": []}, {"nl": {"id": 3874, "comment": "// A O(log n) function returning primefactorization\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3874, "comment": "// by dividing by smallest prime factor at every step\n"}, "Heuristic": []}, {"nl": {"id": 3874, "comment": "// function to find first index >= x\n"}, "Heuristic": []}, {"nl": {"id": 3874, "comment": "// function to find last index <= y\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3874, "comment": "// function to count elements within given range\n"}, "Heuristic": []}, {"nl": {"id": 3874, "comment": "// initialize result\n"}, "Heuristic": []}, {"nl": {"id": 3874, "comment": "// private int cal()\n"}, "Heuristic": []}, {"nl": {"id": 3874, "comment": "// If all elements are arranged from largest to smallest, it means the largest string\n"}, "Heuristic": []}, {"nl": {"id": 3874, "comment": "// Find backward from the subscript of i + 1 (must be monotonically decreasing), find a smallest element in the set larger than array [i]\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3874, "comment": "// Swap these two elements, and then reverse all the elements in i + 1 and later (i + 1, array.length)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3874, "comment": "// fast input reader class;\n"}, "Heuristic": []}, {"nl": {"id": 3876, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3876, "comment": "//            boolean success = false;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3876, "comment": "//            if (stringBuilderValueField != null) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3876, "comment": "//                try {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3876, "comment": "//                    char[] value = (char[]) stringBuilderValueField.get(cache);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3876, "comment": "//                    os.write(value, 0, cache.length());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3876, "comment": "//                    success = true;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3876, "comment": "//                } catch (Exception e) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3876, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3876, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3876, "comment": "//            if (!success) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3876, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3878, "comment": "//shuffle, then sort \n"}, "Heuristic": []}, {"nl": {"id": 3878, "comment": "//shuffle, then sort \n"}, "Heuristic": []}, {"nl": {"id": 3879, "comment": "/* Next character */"}, "Heuristic": ["H7"]}, {"nl": {"id": 3879, "comment": "/* Next double */"}, "Heuristic": ["H7"]}, {"nl": {"id": 3879, "comment": "/* Next string */"}, "Heuristic": ["H7"]}, {"nl": {"id": 3879, "comment": "/* Next integer */"}, "Heuristic": ["H7"]}, {"nl": {"id": 3879, "comment": "/* Next long */"}, "Heuristic": ["H7"]}, {"nl": {"id": 3879, "comment": "/* Next integer 1D array */"}, "Heuristic": ["H7"]}, {"nl": {"id": 3879, "comment": "/* Next long 1D array */"}, "Heuristic": ["H7"]}, {"nl": {"id": 3879, "comment": "/* Next string 1D array */"}, "Heuristic": ["H7"]}, {"nl": {"id": 3879, "comment": "/* Next char 1D array */"}, "Heuristic": ["H7"]}, {"nl": {"id": 3879, "comment": "/* Next double 1D array */"}, "Heuristic": ["H7"]}, {"nl": {"id": 3879, "comment": "/* Next integer matrix */"}, "Heuristic": ["H7"]}, {"nl": {"id": 3879, "comment": "/* Next long matrix */"}, "Heuristic": ["H7"]}, {"nl": {"id": 3879, "comment": "/* Next string matrix */"}, "Heuristic": ["H7"]}, {"nl": {"id": 3879, "comment": "/* Next char matrix */"}, "Heuristic": ["H7"]}, {"nl": {"id": 3879, "comment": "/* Next double matrix */"}, "Heuristic": ["H7"]}, {"nl": {"id": 3879, "comment": "//\t\t\t\tSystem.out.println(\"Checking \" + num);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3879, "comment": "// increment current level\n"}, "Heuristic": []}, {"nl": {"id": 3879, "comment": "// expand current level by 1\n"}, "Heuristic": []}, {"nl": {"id": 3879, "comment": "// increment higher level\n"}, "Heuristic": []}, {"nl": {"id": 3879, "comment": "// search which higher level is the previous of the current number\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3879, "comment": "//\t\t\t\t\t\tSystem.out.println(\" \" + st.toString() + \" \" + sb.toString());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3879, "comment": "//\t\t\t\tSystem.out.println(\">>\" + st.toString());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3879, "comment": "// long start = System.nanoTime();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3879, "comment": "// System.out.println(\"Elapsed: \" + (System.nanoTime() - start) / 1000000 +\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3879, "comment": "// \"ns\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3880, "comment": "/*\n\u2800\u2800\u2800\u2800\u28e0\u28f6\u287e\u280f\u2809\u2819\u2833\u28a6\u2840\u2800\u2800\u2800\u28a0\u281e\u2809\u2819\u2832\u2840\u2800\n\u2800\u2800\u2800\u28f4\u283f\u280f\u2800\u2800\u2800\u2800\u2800\u2800\u28b3\u2840\u2800\u284f\u2800\u2800Y\u2800\u2800\u28b7\n\u2800\u2800\u28a0\u28df\u28cb\u2840\u2880\u28c0\u28c0\u2840\u2800\u28c0\u2840\u28e7\u2800\u28b8\u2800\u2800A\u2800\u2800 \u2847\n\u2800\u2800\u28b8\u28ef\u286d\u2801\u2838\u28db\u28df\u2806\u2874\u28fb\u2872\u28ff\u2800\u28f8\u2800\u2800S\u2800  \u2847\n\u2800\u2800\u28df\u28ff\u286d\u2800\u2800\u2800\u2800\u2800\u28b1\u2800\u2800\u28ff\u2800\u28b9\u2800\u2800H\u2800\u2800 \u2847\n\u2800\u2800\u2819\u28bf\u28ef\u2804\u2800\u2800\u2800\u2880\u2840\u2800\u2800\u287f\u2800\u2800\u2847\u2800\u2800\u2800\u2800\u287c\n\u2800\u2800\u2800\u2800\u2839\u28f6\u2806\u2800\u2800\u2800\u2800\u2800\u2874\u2803\u2800\u2800\u2818\u2824\u28c4\u28e0\u281e\u2800\n\u2800\u2800\u2800\u2800\u2800\u28b8\u28f7\u2866\u28a4\u2864\u28a4\u28de\u28c1\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\n\u2800\u2800\u2880\u28e4\u28f4\u28ff\u28cf\u2801\u2800\u2800\u2838\u28cf\u28af\u28f7\u28d6\u28e6\u2840\u2800\u2800\u2800\u2800\u2800\u2800\n\u2880\u28fe\u28fd\u28ff\u28ff\u28ff\u28ff\u281b\u28b2\u28f6\u28fe\u2889\u2877\u28ff\u28ff\u2835\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\n\u28fc\u28ff\u280d\u2809\u28ff\u286d\u2809\u2819\u28ba\u28c7\u28fc\u284f\u2800\u2800\u2800\u28c4\u28b8\u2800\u2800\u2800\u2800\u2800\u2800\n\u28ff\u28ff\u28e7\u28c0\u28ff\u2026\u2026\u2026\u28c0\u28f0\u28cf\u28d8\u28c6\u28c0\u2800\u2800\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3880, "comment": "// System.out is a PrintStream\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3880, "comment": "// import java.util.Arrays;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3880, "comment": "// import java.util.ArrayList;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3880, "comment": "// import java.util.Collections;    //  for sorting ArrayList mainly\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3880, "comment": "// import java.util.HashMap;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3880, "comment": "// import java.util.HashSet;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3880, "comment": "// import java.util.Random;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3880, "comment": "// System.out.println(st);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3880, "comment": "// int N = arr.length;\n"}, "Heuristic": []}, {"nl": {"id": 3880, "comment": "// Random rand = new Random();\n"}, "Heuristic": []}, {"nl": {"id": 3880, "comment": "// for (int i = 0; i < N; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3880, "comment": "//     int oi = rand.nextInt(N), temp = arr[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3880, "comment": "//     arr[i] = arr[oi];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3880, "comment": "//     arr[oi] = temp;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3880, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3880, "comment": "// Arrays.sort(arr);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3882, "comment": "// code\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3882, "comment": "// log A base B\n"}, "Heuristic": []}, {"nl": {"id": 3882, "comment": "// Debug\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3882, "comment": "// Graph Functions\n"}, "Heuristic": []}, {"nl": {"id": 3882, "comment": "// GCD\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3882, "comment": "// Edge Class\n"}, "Heuristic": []}, {"nl": {"id": 3882, "comment": "// Point Class\n"}, "Heuristic": []}, {"nl": {"id": 3882, "comment": "// Fast IO\n"}, "Heuristic": []}, {"nl": {"id": 3884, "comment": "//sort(arr,0,n-1);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3884, "comment": "//sorting the two halves using a tmp array\n"}, "Heuristic": []}, {"nl": {"id": 3884, "comment": "//Copying the elements of tmp into the main array\n"}, "Heuristic": []}, {"nl": {"id": 3884, "comment": "//sort(arr,0,n-1);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3884, "comment": "//sorting the two halves using a tmp array\n"}, "Heuristic": []}, {"nl": {"id": 3884, "comment": "//Copying the elements of tmp into the main array\n"}, "Heuristic": []}, {"nl": {"id": 3885, "comment": "//\t\t\t\tout.println(\"Here: \"+temp);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3887, "comment": "//initIo(true, \"\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3890, "comment": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3890, "comment": "/**\n *\n * @author is2ac\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3890, "comment": "//int t = 1;\n"}, "Heuristic": []}, {"nl": {"id": 3890, "comment": "// 0 -> left was chosen\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3890, "comment": "// 1 -> right was chosen\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3891, "comment": "//Scanner f = new Scanner(new File(\"uva.in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3891, "comment": "//Scanner f = new Scanner(System.in);\n"}, "Heuristic": []}, {"nl": {"id": 3891, "comment": "//BufferedReader f = new BufferedReader(new FileReader(\"uva.in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3892, "comment": "/**\n* @author: Prasad Chaudhari\n* @linkedIn: https://www.linkedin.com/in/prasad-chaudhari-841655a6/\n* @git: https://github.com/Prasad-Chaudhari\n*/"}, "Heuristic": ["H1", "H9"]}, {"nl": {"id": 3892, "comment": "//www.linkedin.com/in/prasad-chaudhari-841655a6/\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3892, "comment": "//github.com/Prasad-Chaudhari\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3893, "comment": "//-----------PrintWriter for faster output---------------------------------\n"}, "Heuristic": []}, {"nl": {"id": 3893, "comment": "//-----------MyScanner class for faster input----------\n"}, "Heuristic": []}, {"nl": {"id": 3894, "comment": "// f.out(\"1\\n\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3894, "comment": "// if(a == p.i + 1)\n"}, "Heuristic": []}, {"nl": {"id": 3894, "comment": "// \tp = p.p;\n"}, "Heuristic": []}, {"nl": {"id": 3894, "comment": "// else if(p.p != null && a == p.p.i + 1)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3894, "comment": "// \tp = p.p.p;\n"}, "Heuristic": []}, {"nl": {"id": 3895, "comment": "// standard input\n"}, "Heuristic": []}, {"nl": {"id": 3895, "comment": "// file input\n"}, "Heuristic": []}, {"nl": {"id": 3895, "comment": "// throws InputMismatchException() if previously detected end of file\n"}, "Heuristic": []}, {"nl": {"id": 3895, "comment": "// end of file\n"}, "Heuristic": []}, {"nl": {"id": 3897, "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3897, "comment": "/* Create temp arrays */"}, "Heuristic": ["H7"]}, {"nl": {"id": 3897, "comment": "/*Copy data to temp arrays*/"}, "Heuristic": ["H7"]}, {"nl": {"id": 3897, "comment": "/* Merge the temp arrays */"}, "Heuristic": ["H7"]}, {"nl": {"id": 3897, "comment": "/* Copy remaining elements of L[] if any */"}, "Heuristic": ["H7"]}, {"nl": {"id": 3897, "comment": "/* Copy remaining elements of R[] if any */"}, "Heuristic": ["H7"]}, {"nl": {"id": 3897, "comment": "/* Create temp arrays */"}, "Heuristic": ["H7"]}, {"nl": {"id": 3897, "comment": "/*Copy data to temp arrays*/"}, "Heuristic": ["H7"]}, {"nl": {"id": 3897, "comment": "/* Merge the temp arrays */"}, "Heuristic": ["H7"]}, {"nl": {"id": 3897, "comment": "/* Copy remaining elements of L[] if any */"}, "Heuristic": ["H7"]}, {"nl": {"id": 3897, "comment": "/* Copy remaining elements of R[] if any */"}, "Heuristic": ["H7"]}, {"nl": {"id": 3897, "comment": "//\t\t  int T=Integer.parseInt(br.readLine());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3897, "comment": "//\t\t  int T=1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3897, "comment": "// Calculate sum of all elements\n"}, "Heuristic": []}, {"nl": {"id": 3897, "comment": "// initialize top row as true\n"}, "Heuristic": []}, {"nl": {"id": 3897, "comment": "// initialize leftmost column, except part[0][0], as false\n"}, "Heuristic": []}, {"nl": {"id": 3897, "comment": "// Fill the partition table in bottom up manner\n"}, "Heuristic": []}, {"nl": {"id": 3897, "comment": "//S%N, N is a power of 2\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3897, "comment": "// Print the number of 2s that divide n \n"}, "Heuristic": []}, {"nl": {"id": 3897, "comment": "// n must be odd at this point.  So we can \n"}, "Heuristic": []}, {"nl": {"id": 3897, "comment": "// skip one element (Note i = i +2) \n"}, "Heuristic": []}, {"nl": {"id": 3897, "comment": "// While i divides n, print i and divide n \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3897, "comment": "// This condition is to handle the case whien \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3897, "comment": "// n is a prime number greater than 2 \n"}, "Heuristic": []}, {"nl": {"id": 3897, "comment": "// Corner cases \n"}, "Heuristic": []}, {"nl": {"id": 3897, "comment": "// This is checked so that we can skip  \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3897, "comment": "// middle five numbers in below loop \n"}, "Heuristic": []}, {"nl": {"id": 3897, "comment": "// Move to right side if target is  \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3897, "comment": "// greater.  \n"}, "Heuristic": []}, {"nl": {"id": 3897, "comment": "// Move left side.  \n"}, "Heuristic": []}, {"nl": {"id": 3897, "comment": "// Move to left side if target is  \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3897, "comment": "// lesser.  \n"}, "Heuristic": []}, {"nl": {"id": 3897, "comment": "// Move right side.  \n"}, "Heuristic": []}, {"nl": {"id": 3897, "comment": "// Find sizes of two subarrays to be merged \n"}, "Heuristic": []}, {"nl": {"id": 3897, "comment": "// Initial indexes of first and second subarrays \n"}, "Heuristic": []}, {"nl": {"id": 3897, "comment": "// Initial index of merged subarry array \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3897, "comment": "// Main function that sorts arr[l..r] using \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3897, "comment": "// merge() \n"}, "Heuristic": []}, {"nl": {"id": 3897, "comment": "// Find the middle point \n"}, "Heuristic": []}, {"nl": {"id": 3897, "comment": "// Sort first and second halves \n"}, "Heuristic": []}, {"nl": {"id": 3897, "comment": "// Merge the sorted halves \n"}, "Heuristic": []}, {"nl": {"id": 3897, "comment": "// Find sizes of two subarrays to be merged \n"}, "Heuristic": []}, {"nl": {"id": 3897, "comment": "// Initial indexes of first and second subarrays \n"}, "Heuristic": []}, {"nl": {"id": 3897, "comment": "// Initial index of merged subarry array \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3897, "comment": "// Main function that sorts arr[l..r] using \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3897, "comment": "// merge() \n"}, "Heuristic": []}, {"nl": {"id": 3897, "comment": "// Find the middle point \n"}, "Heuristic": []}, {"nl": {"id": 3897, "comment": "// Sort first and second halves \n"}, "Heuristic": []}, {"nl": {"id": 3897, "comment": "// Merge the sorted halves \n"}, "Heuristic": []}, {"nl": {"id": 3897, "comment": "// line length \n"}, "Heuristic": []}, {"nl": {"id": 3898, "comment": "//-----------MyScanner class for faster input----------\n"}, "Heuristic": []}, {"nl": {"id": 3899, "comment": "//int t=1;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3900, "comment": "//make sure to make new file!\n"}, "Heuristic": []}, {"nl": {"id": 3900, "comment": "//first element should be 1\n"}, "Heuristic": []}, {"nl": {"id": 3900, "comment": "//add new depth\n"}, "Heuristic": []}, {"nl": {"id": 3900, "comment": "//shouldn't happen\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3902, "comment": "/*\n1\n4\n1\n1\n2\n3\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3902, "comment": "//\t\t\tint[] mapTo=new int[n];\n"}, "Heuristic": []}, {"nl": {"id": 3902, "comment": "//\t\t\tArrays.fill(mapTo, -1);\n"}, "Heuristic": []}, {"nl": {"id": 3902, "comment": "//\t\t\tArrayDeque<Integer>[] occsOf=new ArrayDeque[1001];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3902, "comment": "//\t\t\tfor (int i=0; i<occsOf.length; i++) occsOf[i]=new ArrayDeque<>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3902, "comment": "//\t\t\tint lastOne=-1;\n"}, "Heuristic": []}, {"nl": {"id": 3902, "comment": "//\t\t\t\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3902, "comment": "//\t\t\tfor (int i=0; i<n; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3902, "comment": "//\t\t\t\tif (a[i]==1) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3902, "comment": "//\t\t\t\t\tmapTo[i]=lastOne;\n"}, "Heuristic": []}, {"nl": {"id": 3902, "comment": "//\t\t\t\t\tlastOne=i;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3902, "comment": "//\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3902, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3902, "comment": "//\t\t\tfor (int value=2; value<occsOf.length; value++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3902, "comment": "//\t\t\t\tfor (int i:occsOf[value]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3902, "comment": "//\t\t\t\t\tint mapsTo=occsOf[value-1].removeFirst();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3902, "comment": "//\t\t\t\t\tmapTo[i]=mapsTo;\n"}, "Heuristic": []}, {"nl": {"id": 3902, "comment": "//\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3902, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3902, "comment": "//\t\t\tSystem.out.println(Arrays.toString(mapTo));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3902, "comment": "//\t\t\tfor (int i=0; i<n; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3902, "comment": "//\t\t\t\tArrayList<Integer> listBackwards=new ArrayList<>();\n"}, "Heuristic": []}, {"nl": {"id": 3902, "comment": "//\t\t\t\tlistBackwards.add(a[i]);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3902, "comment": "//\t\t\t\tint at=i;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3902, "comment": "//\t\t\t\twhile (true) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3902, "comment": "////\t\t\t\t\tSystem.out.println(\"x\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3902, "comment": "//\t\t\t\t\tif (mapTo[at]==-1) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3902, "comment": "//\t\t\t\t\t\tbreak;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3902, "comment": "//\t\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3902, "comment": "//\t\t\t\t\tif (a[mapTo[at]]!=a[at]-1) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3902, "comment": "//\t\t\t\t\t\tlistBackwards.add(a[mapTo[at]]);\n"}, "Heuristic": []}, {"nl": {"id": 3902, "comment": "//\t\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3902, "comment": "//\t\t\t\t\tat=mapTo[at];\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3902, "comment": "//\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3902, "comment": "//\t\t\t\tfor (int j=listBackwards.size()-1; j>=0; j--) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3902, "comment": "//\t\t\t\t\tout.print(listBackwards.get(j));\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3902, "comment": "//\t\t\t\t\tif (j!=0) out.print('.');\n"}, "Heuristic": []}, {"nl": {"id": 3902, "comment": "//\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3902, "comment": "//\t\t\t\tout.println();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3902, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3903, "comment": "//PrintWriter out = new PrintWriter(\"file.out\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3903, "comment": "//int t = 1;\n"}, "Heuristic": []}, {"nl": {"id": 3905, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author dauom\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3905, "comment": "// 45 == '-'\n"}, "Heuristic": []}, {"nl": {"id": 3905, "comment": "// 48 == '0', 57 == '9'\n"}, "Heuristic": []}, {"nl": {"id": 3905, "comment": "// 48 == '0'\n"}, "Heuristic": []}, {"nl": {"id": 3905, "comment": "// 32 == ' ', 10 == '\\n', 13 == '\\r', 9 == '\\t'\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3906, "comment": "/*\n    }\n    /*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3906, "comment": "// static int L,R,top,bottom;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3906, "comment": "// static int cnt,edge;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3906, "comment": "// static long ans;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3906, "comment": "// static boolean isIsland;\n"}, "Heuristic": []}, {"nl": {"id": 3906, "comment": "// System.out.println(\"Hi\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3906, "comment": "// System.out.println(\"Bye\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3906, "comment": "// System.out.println(\"Hi2\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3906, "comment": "// System.out.println(j);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3906, "comment": "// System.out.println(m);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3906, "comment": "// System.out.println(\"Bye2\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3906, "comment": "// static class Node{\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3906, "comment": "//     int left,right;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3906, "comment": "//     Node prev,next;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3906, "comment": "//     Node(int i, int v){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3906, "comment": "//         left=i;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3906, "comment": "//         right=v;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3906, "comment": "//         prev=next=null;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3906, "comment": "//     }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3906, "comment": "//     void remove(){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3906, "comment": "//         this.prev.next=this.next;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3906, "comment": "//         this.next.prev=this.prev;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3906, "comment": "//     }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3906, "comment": "//     void insert(Node node){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3906, "comment": "//         node.next=this;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3906, "comment": "//         node.prev=this.prev;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3906, "comment": "//         node.prev.next=node;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3906, "comment": "//         this.prev=node;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3906, "comment": "//     }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3906, "comment": "// } \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3906, "comment": "//*\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3906, "comment": "//*/\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3908, "comment": "// package contest;\n"}, "Heuristic": []}, {"nl": {"id": 3909, "comment": "/*if (din == null)\n                return;*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3909, "comment": "//package Codeforces;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3909, "comment": "// line length\n"}, "Heuristic": []}, {"nl": {"id": 3910, "comment": "// int k = Integer.parseInt(st.nextToken());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3910, "comment": "// st = new StringTokenizer(br.readLine());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3910, "comment": "// a.add(a1);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3910, "comment": "// System.out.println(a+\" \"+i);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3910, "comment": "// while(a.size()>0 && a.get(a.size()-1)+1<a1){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3910, "comment": "// \ta.remove(a.size()-1);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3910, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3911, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 3911, "comment": "//\t\t\tint deep = 0;\n"}, "Heuristic": []}, {"nl": {"id": 3911, "comment": "//\t\t\tSystem.out.println(n+\"     n\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3911, "comment": "//\t\t\t\tfor (int d =0; d<len; d++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3911, "comment": "//\t\t\t\t\tSystem.out.print(al.get(d)+\" \");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3911, "comment": "//\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3911, "comment": "//\t\t\t\tSystem.out.println();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3912, "comment": "//MyMath mm=new MyMath();\n"}, "Heuristic": []}, {"nl": {"id": 3912, "comment": "//long l;long a[]; \n"}, "Heuristic": []}, {"nl": {"id": 3912, "comment": "//o.println();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3912, "comment": "//o.println(n);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3912, "comment": "//o.println();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3912, "comment": "//o.println();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3912, "comment": "//o.println(h);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3912, "comment": "//o.println(x2);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3912, "comment": "//o.println();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3912, "comment": "//o.println(\"HI\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3914, "comment": "/* package codechef; // don't place package name! */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3914, "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3914, "comment": "/*static long power(long a,long b,long m)\n    {\n        if(b==0)\n        return 1;\n        if((b&1)==0)\n        return power((a*a)%m,b/2,m);\n        else\n        return (a*power((a*a)%m,b/2,m))%m;\n    }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3914, "comment": "/*\n    static int gcd(int a,int b)\n    {\n        if(b==0)\n        return a;\n        else\n        return gcd(b,a%b);\n    }\n    */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3914, "comment": "// don't place package name! */\n"}, "Heuristic": []}, {"nl": {"id": 3914, "comment": "//StringTokenizer st=new StringTokenizer(br.readLine());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3914, "comment": "//li=pre.lastIndexOf('.');\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "/*\n\n            4 2 3 _ 2 4 3 _\n             */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3916, "comment": "/**\n\n\n 0 1 2 3 4 5 6 7 8 9 10\n\n 1               1   1\n * Your ExamRoom object will be instantiated and called as such:\n * ExamRoom obj = new ExamRoom(N);\n * int param_1 = obj.seat();\n * obj.leave(p);\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//\t\tif(x < 0){ x = 0; }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "// Initialize result\n"}, "Heuristic": []}, {"nl": {"id": 3916, "comment": "// If b is odd, add 'a' to result\n"}, "Heuristic": []}, {"nl": {"id": 3916, "comment": "// Multiply 'a' with 2\n"}, "Heuristic": []}, {"nl": {"id": 3916, "comment": "// Divide b by 2\n"}, "Heuristic": []}, {"nl": {"id": 3916, "comment": "// Return result\n"}, "Heuristic": []}, {"nl": {"id": 3916, "comment": "//        public void update(int pos, int val) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//            updateUtil(0, n - 1, 0, pos, val);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//        private void updateUtil(int l, int r, int pos, int i, int val) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//            if (i < l || i > r) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//                return;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//            if (l == r) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//                tree[pos] = val;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//                return;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//            int mid = (l + r) / 2;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//            updateUtil(l, mid, 2 * pos + 1, i, val);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//            updateUtil(mid + 1, r, 2 * pos + 2, i, val);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//            tree[pos] = tree[2 * pos + 1] + tree[2 * pos + 2];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//https://i...content-available-to-author-only...e.com/ebRGa6\n"}, "Heuristic": ["H1", "H9"]}, {"nl": {"id": 3916, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3916, "comment": "//        f[0] = 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//        f[1] = 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//        for (int i = 2; i < 200001; ++i) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//            f[i] = f[i-1] * i;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//            f[i] %= 1000000007;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//    private static Pair22 dfss(List<LinkedHashSet<Integer>> g, int node, HashSet<Integer> vis, int[] dis, int[] dis2) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//        if (vis.contains(node)) return new Pair22(dis[node], dis2[node], -1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//        vis.add(node);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//        int min = dis[node];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//        for (Integer ntb : g.get(node)) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//            if (dis[ntb] > dis[node])\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//                dfss(g, ntb, vis, dis, dis2);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//            if (dis[ntb] <= dis[node]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//                min = Math.min(min, dis[ntb]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//            } else {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//                min = Math.min(min, dis2[ntb]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//        //        if (dis)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//        dis2[node] = min;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//        return new Pair22(dis[node], min, -1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//        System.out.println(x + \"  \" + y);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3916, "comment": "//        System.out.println(pos + \" \" + min);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3917, "comment": "/*\nIf you want to aim high, aim high\nDon't let that studying and grades consume you\nJust live life young\n******************************\nWhat do you think? What do you think?\n1st on Billboard, what do you think of it\nNext is a Grammy, what do you think of it\nHowever you think, I\u2019m sorry, but shit, I have no fcking interest\n*******************************\nI'm standing on top of my Monopoly board\nThat means I'm on top of my game and it don't stop\ntil my hip don't hop anymore\nhttps://www.a2oj.com/Ladder16.html\n*******************************\n300iq as writer = Sad!\n*/"}, "Heuristic": ["H2", "H7", "H9", "H12"]}, {"nl": {"id": 3917, "comment": "//www.a2oj.com/Ladder16.html\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3917, "comment": "//fuck fuck fuck fuck fuck fuck fuck fuck fuck fuck fuck fuck fuck fuck fuck\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3917, "comment": "//precompute subsets ass\n"}, "Heuristic": []}, {"nl": {"id": 3917, "comment": "//shit shit shit shit shit shit shit shit shit shit\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3917, "comment": "//lol\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3918, "comment": "// Global vars\n"}, "Heuristic": []}, {"nl": {"id": 3918, "comment": "//arrayTest();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3918, "comment": "//log(\"nothing to do for i:\"+i);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3918, "comment": "// nothing to do\n"}, "Heuristic": []}, {"nl": {"id": 3918, "comment": "//log(\"start loop\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3918, "comment": "//log(\"u:\"+u+\" v:\"+v);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3918, "comment": "//log(\"need:\"+need);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3918, "comment": "//log(\"tm:\"+tm);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3918, "comment": "//log(\"can find successor\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3918, "comment": "// looping back to source\n"}, "Heuristic": []}, {"nl": {"id": 3918, "comment": "// now mask\n"}, "Heuristic": []}, {"nl": {"id": 3918, "comment": "//String s=Integer.toBinaryString(m);\n"}, "Heuristic": []}, {"nl": {"id": 3918, "comment": "//while (s.length()<k)\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3918, "comment": "//\ts=\"0\"+s;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3918, "comment": "//log(\"found mask:\"+s);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3918, "comment": "//log(\"msk:\"+msk);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3918, "comment": "//log(components[MX-1]);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3918, "comment": "// log(\"d:\"+d);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3918, "comment": "// log(\"res:\"+res);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3918, "comment": "// log(\"d:\"+d);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3918, "comment": "// log(\"res:\"+res);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3919, "comment": "/*\nIf you want to aim high, aim high\nDon't let that studying and grades consume you\nJust live life young\n******************************\nWhat do you think? What do you think?\n1st on Billboard, what do you think of it\nNext is a Grammy, what do you think of it\nHowever you think, I\u2019m sorry, but shit, I have no fcking interest\n*******************************\nI'm standing on top of my Monopoly board\nThat means I'm on top of my game and it don't stop\ntil my hip don't hop anymore\nhttps://www.a2oj.com/Ladder16.html\n*******************************\n300iq as writer = Sad!\n*/"}, "Heuristic": ["H2", "H7", "H9", "H12"]}, {"nl": {"id": 3919, "comment": "//www.a2oj.com/Ladder16.html\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3919, "comment": "//fuck fuck fuck fuck fuck fuck fuck fuck fuck fuck fuck fuck fuck fuck fuck\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3919, "comment": "//precompute subsets ass\n"}, "Heuristic": []}, {"nl": {"id": 3919, "comment": "//shit shit shit shit shit shit shit shit shit shit\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3920, "comment": "/*if (lookingFor!=startVal) */"}, "Heuristic": ["H7"]}, {"nl": {"id": 3920, "comment": "/*\n\t\t\tfor (int i:masks[lowestBit]) {\n\t\t\t\tif ((mask&i)==i && possible[mask^i]) {\n\t\t\t\t\tpossible[mask]=true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3920, "comment": "//if we have already used this box, it won't work\n"}, "Heuristic": []}, {"nl": {"id": 3920, "comment": "//\t\t\t\tSystem.out.println(\"Mask loops for box: \"+i+\" starting at \"+startVal+\" gives \"+);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3920, "comment": "//otherwise it worked\n"}, "Heuristic": []}, {"nl": {"id": 3920, "comment": "//\t\t\tSystem.out.println(\"At mask: \"+Integer.toBinaryString(mask));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3920, "comment": "//\t\tSystem.out.println(\"Loops: \"+loops);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3921, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3922, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author beginner1010\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3923, "comment": "// Global vars\n"}, "Heuristic": []}, {"nl": {"id": 3923, "comment": "//arrayTest();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3923, "comment": "//log(\"nothing to do for i:\"+i);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3923, "comment": "// nothing to do\n"}, "Heuristic": []}, {"nl": {"id": 3923, "comment": "//log(\"start loop\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3923, "comment": "//log(\"u:\"+u+\" v:\"+v);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3923, "comment": "//log(\"need:\"+need);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3923, "comment": "//log(\"tm:\"+tm);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3923, "comment": "//log(\"can find successor\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3923, "comment": "// looping back to source\n"}, "Heuristic": []}, {"nl": {"id": 3923, "comment": "// now mask\n"}, "Heuristic": []}, {"nl": {"id": 3923, "comment": "//String s=Integer.toBinaryString(m);\n"}, "Heuristic": []}, {"nl": {"id": 3923, "comment": "//while (s.length()<k)\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3923, "comment": "//\ts=\"0\"+s;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3923, "comment": "//log(\"found mask:\"+s);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3923, "comment": "//log(\"creating c:\"+c+\" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3923, "comment": "//log(\"msk:\"+msk);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3923, "comment": "//log(components[MX-1]);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3923, "comment": "// log(\"d:\"+d);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3923, "comment": "// log(\"res:\"+res);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3923, "comment": "// log(\"d:\"+d);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3923, "comment": "// log(\"res:\"+res);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3924, "comment": "// Global vars\n"}, "Heuristic": []}, {"nl": {"id": 3924, "comment": "//arrayTest();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3924, "comment": "//log(\"nothing to do for i:\"+i);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3924, "comment": "// nothing to do\n"}, "Heuristic": []}, {"nl": {"id": 3924, "comment": "//log(\"start loop\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3924, "comment": "//log(\"u:\"+u+\" v:\"+v);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3924, "comment": "//log(\"need:\"+need);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3924, "comment": "//log(\"tm:\"+tm);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3924, "comment": "//log(\"can find successor\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3924, "comment": "// looping back to source\n"}, "Heuristic": []}, {"nl": {"id": 3924, "comment": "// now mask\n"}, "Heuristic": []}, {"nl": {"id": 3924, "comment": "//String s=Integer.toBinaryString(m);\n"}, "Heuristic": []}, {"nl": {"id": 3924, "comment": "//while (s.length()<k)\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3924, "comment": "//\ts=\"0\"+s;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3924, "comment": "//log(\"found mask:\"+s);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3924, "comment": "//log(\"msk:\"+msk);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3924, "comment": "//log(components[MX-1]);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3924, "comment": "// log(\"d:\"+d);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3924, "comment": "// log(\"res:\"+res);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3924, "comment": "// log(\"d:\"+d);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3924, "comment": "// log(\"res:\"+res);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3925, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3926, "comment": "//go through if i pick each node\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3926, "comment": "//\t\tSystem.out.println(\"S= \"+sum);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3926, "comment": "//\t\tSystem.out.println(\" Pick \"+i+\" \"+j);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3926, "comment": "//got to end\n"}, "Heuristic": []}, {"nl": {"id": 3926, "comment": "//get first bit that's off\n"}, "Heuristic": []}, {"nl": {"id": 3926, "comment": "//loop through things to take for this bit\n"}, "Heuristic": []}, {"nl": {"id": 3926, "comment": "//got to end\n"}, "Heuristic": []}, {"nl": {"id": 3926, "comment": "//get first bit that's off\n"}, "Heuristic": []}, {"nl": {"id": 3926, "comment": "//loop through things to take for this bit\n"}, "Heuristic": []}, {"nl": {"id": 3927, "comment": "//   if(i==0 && j==1) pw.println(idx2+\" \"+req+\" \"+val);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3927, "comment": "// pw.println(Integer.toBinaryString(mask));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3927, "comment": "// pw.println(Integer.toBinaryString(mask)+\" \"+mask);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3927, "comment": "// END\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3928, "comment": "//-----------MyScanner class for faster input----------\n"}, "Heuristic": []}, {"nl": {"id": 3929, "comment": "// line length\n"}, "Heuristic": []}, {"nl": {"id": 3931, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3932, "comment": "/***********************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 3932, "comment": "/***********************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 3932, "comment": "//PrintWriter out = new PrintWriter(\"file.out\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3932, "comment": "//int t = scan.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3932, "comment": "//CHECK FOR QUICKSORT TLE\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3932, "comment": "//***********************//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3932, "comment": "//CHECK FOR INT OVERFLOW\n"}, "Heuristic": []}, {"nl": {"id": 3932, "comment": "//***********************//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3932, "comment": "//pw.println(curr + \" - \" + map1.get(ch));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3932, "comment": "//for(tup x : c.arr) System.out.printf(\"%d %d%n\", x.a, x.b);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3932, "comment": "//System.out.println(c.mask);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3933, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3934, "comment": "//package round599;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3934, "comment": "// include j=0\n"}, "Heuristic": []}, {"nl": {"id": 3934, "comment": "//\t\t\tfor(int i = 0;i < n;i++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3934, "comment": "//\t\t\t\tsums[i] -= vals[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3934, "comment": "//\t\t\t\tsums[tos[i]] += vals[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3934, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3934, "comment": "//\t\t\t\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3934, "comment": "//\t\t\tfor(int i = 0;i < n;i++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3934, "comment": "//\t\t\t\tassert sums[i] == S;\n"}, "Heuristic": []}, {"nl": {"id": 3934, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3934, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3935, "comment": "// Global vars\n"}, "Heuristic": []}, {"nl": {"id": 3935, "comment": "//arrayTest();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3935, "comment": "//log(\"nothing to do for i:\"+i);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3935, "comment": "// nothing to do\n"}, "Heuristic": []}, {"nl": {"id": 3935, "comment": "//log(\"start loop\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3935, "comment": "//log(\"u:\"+u+\" v:\"+v);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3935, "comment": "//log(\"need:\"+need);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3935, "comment": "//log(\"tm:\"+tm);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3935, "comment": "//log(\"can find successor\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3935, "comment": "// looping back to source\n"}, "Heuristic": []}, {"nl": {"id": 3935, "comment": "// now mask\n"}, "Heuristic": []}, {"nl": {"id": 3935, "comment": "//String s=Integer.toBinaryString(m);\n"}, "Heuristic": []}, {"nl": {"id": 3935, "comment": "//while (s.length()<k)\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3935, "comment": "//\ts=\"0\"+s;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3935, "comment": "//log(\"found mask:\"+s);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3935, "comment": "//log(\"creating c:\"+c+\" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3935, "comment": "//log(\"msk:\"+msk);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3935, "comment": "//log(components[MX-1]);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3935, "comment": "// log(\"d:\"+d);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3935, "comment": "// log(\"res:\"+res);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3935, "comment": "// log(\"d:\"+d);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3935, "comment": "// log(\"res:\"+res);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3937, "comment": "/*I/O, and other boilerplate*/"}, "Heuristic": ["H7"]}, {"nl": {"id": 3937, "comment": "//                ArrayList<pli> list = new ArrayList<>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3937, "comment": "//                int prev = i;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3937, "comment": "//                    list.add(new pli(want, prev));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3937, "comment": "//                    prev = next;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3937, "comment": "//        dp.put(0, new ArrayList<>());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3937, "comment": "//            System.out.println(ans);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3937, "comment": "//            System.out.println(map);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3938, "comment": "//w.print(maxClique);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3939, "comment": "/*\n * @author Tnascimento \n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3939, "comment": "// public static StringTokenizer tokenizer;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3939, "comment": "// public static BufferedReader reader;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3939, "comment": "// public static String proximo() {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3939, "comment": "// \twhile (tokenizer == null || !tokenizer.hasMoreElements()) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3939, "comment": "// \t\ttry {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3939, "comment": "// \t\t\ttokenizer = new StringTokenizer(reader.readLine());\n"}, "Heuristic": []}, {"nl": {"id": 3939, "comment": "// \t\t} catch (RuntimeException e) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3939, "comment": "// \t\t\te.printStackTrace();\n"}, "Heuristic": []}, {"nl": {"id": 3939, "comment": "// \t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3939, "comment": "// \t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3939, "comment": "// \treturn tokenizer.nextToken();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3939, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3941, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author tanzaku\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3941, "comment": "//        dump(r, p, x, u, neigibor);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3942, "comment": "//package round428;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3942, "comment": "//\tString INPUT = \"\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3942, "comment": "// (K/M)^2*M(M-1)/2\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3942, "comment": "// K^2*(M-1)/2M\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3942, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3943, "comment": "/*\n * @author Tnascimento \n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3944, "comment": "/*\n * Heart beats fast\n * \t\tColors and promises\n * \t\t\tHow to be brave\n * \t\t\t\tHow can I love when I am afraid...\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3944, "comment": "///////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3944, "comment": "///////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3944, "comment": "///template from here\n"}, "Heuristic": []}, {"nl": {"id": 3944, "comment": "//\tstatic final int mod=998_244_353;\n"}, "Heuristic": []}, {"nl": {"id": 3945, "comment": "/*\n * @author Tnascimento \n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3945, "comment": "// for(int mascara = 1; mascara < maiorMascara; mascara++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3945, "comment": "//     int mascaraAtual = mascara;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3945, "comment": "//     for(int j = 0; j < esquerda; j++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3945, "comment": "//         if (((1 << j) & mascara) > 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3945, "comment": "//             mascaraAtual &= aux[j + direita] >> direita;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3945, "comment": "//             depois[mascara] = Math.max(depois[mascara], depois[mascara ^ (1 << j)]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3945, "comment": "//         }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3945, "comment": "//     }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3945, "comment": "//     if (mascara == mascaraAtual) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3945, "comment": "//         depois[mascara] = Math.max(depois[mascara],Integer.bitCount(mascara));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3945, "comment": "//     }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3945, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3947, "comment": "// 1 -> n/2  XX n/2 + 1 -> n\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3947, "comment": "//\t\tfor (int i = 1; i <= n; i++)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3947, "comment": "//\t\t\tSystem.err.printf(\"%d %.12f\\n\",i, (k*k*((i-1)/(2.0*i))));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3950, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Rustam Musin (PloadyFree@gmail.com)\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3951, "comment": "/*\n * @author Tnascimento \n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3952, "comment": "/*\n * @author Tnascimento \n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3953, "comment": "/* fill dp for first subset */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3953, "comment": "/* check if mask is complete graph */"}, "Heuristic": ["H7"]}, {"nl": {"id": 3953, "comment": "/* process second subset */"}, "Heuristic": ["H7"]}, {"nl": {"id": 3953, "comment": "// System.out.println(maxCliqueSize);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3957, "comment": "/*\n * @author Tnascimento \n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3957, "comment": "// public static StringTokenizer tokenizer;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3957, "comment": "// public static BufferedReader reader;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3957, "comment": "// public static String proximo() {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3957, "comment": "// \twhile (tokenizer == null || !tokenizer.hasMoreElements()) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3957, "comment": "// \t\ttry {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3957, "comment": "// \t\t\ttokenizer = new StringTokenizer(reader.readLine());\n"}, "Heuristic": []}, {"nl": {"id": 3957, "comment": "// \t\t} catch (RuntimeException e) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3957, "comment": "// \t\t\te.printStackTrace();\n"}, "Heuristic": []}, {"nl": {"id": 3957, "comment": "// \t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3957, "comment": "// \t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3957, "comment": "// \treturn tokenizer.nextToken();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3957, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3958, "comment": "//meet in the middle approach\n"}, "Heuristic": []}, {"nl": {"id": 3958, "comment": "//max size of clique\n"}, "Heuristic": []}, {"nl": {"id": 3958, "comment": "//iterate over every left mask\n"}, "Heuristic": []}, {"nl": {"id": 3958, "comment": "//go over every bit in the mask\n"}, "Heuristic": []}, {"nl": {"id": 3958, "comment": "//update the union of reachability\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3958, "comment": "//can also attempt to pull from prev mask for max size\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3958, "comment": "//will not be optimal if end update happens, but otherwise is useful for dp\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3958, "comment": "//if the union of connectedness is the starting mask then we have a clique\n"}, "Heuristic": []}, {"nl": {"id": 3958, "comment": "//mask to track if the current creates its own clique\n"}, "Heuristic": []}, {"nl": {"id": 3958, "comment": "//mask to track the connection between the halves\n"}, "Heuristic": []}, {"nl": {"id": 3958, "comment": "//need to mask out the left side bits\n"}, "Heuristic": []}, {"nl": {"id": 3958, "comment": "//update corresp avail in the left side\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3958, "comment": "//not a clique portion\n"}, "Heuristic": []}, {"nl": {"id": 3958, "comment": "//update answer\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3959, "comment": "//meet in the middle approach\n"}, "Heuristic": []}, {"nl": {"id": 3959, "comment": "//max size of clique\n"}, "Heuristic": []}, {"nl": {"id": 3959, "comment": "//iterate over every left mask\n"}, "Heuristic": []}, {"nl": {"id": 3959, "comment": "//go over every bit in the mask\n"}, "Heuristic": []}, {"nl": {"id": 3959, "comment": "//update the union of reachability\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3959, "comment": "//can also attempt to pull from prev mask for max size\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3959, "comment": "//will not be optimal if end update happens, but otherwise is useful for dp\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3959, "comment": "//if the union of connectedness is the starting mask then we have a clique\n"}, "Heuristic": []}, {"nl": {"id": 3959, "comment": "//mask to track if the current creates its own clique\n"}, "Heuristic": []}, {"nl": {"id": 3959, "comment": "//mask to track the connection between the halves\n"}, "Heuristic": []}, {"nl": {"id": 3959, "comment": "//need to mask out the left side bits\n"}, "Heuristic": []}, {"nl": {"id": 3959, "comment": "//update corresp avail in the left side\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3959, "comment": "//not a clique portion\n"}, "Heuristic": []}, {"nl": {"id": 3959, "comment": "//update answer\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3960, "comment": "/**\n *\n * @author bossbelik\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3960, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3962, "comment": "/*\n * @author Tnascimento \n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3962, "comment": "// for(int mascara = 1; mascara < maiorMascara; mascara++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3962, "comment": "//     int mascaraAtual = mascara;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3962, "comment": "//     for(int j = 0; j < esquerda; j++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3962, "comment": "//         if (((1 << j) & mascara) > 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3962, "comment": "//             mascaraAtual &= aux[j + direita] >> direita;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3962, "comment": "//             depois[mascara] = Math.max(depois[mascara], depois[mascara ^ (1 << j)]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3962, "comment": "//         }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3962, "comment": "//     }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3962, "comment": "//     if (mascara == mascaraAtual) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3962, "comment": "//         depois[mascara] = Math.max(depois[mascara],Integer.bitCount(mascara));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3962, "comment": "//     }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3962, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3963, "comment": "/*\n * @author Tnascimento \n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 3964, "comment": "//String INPUT = \"\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3964, "comment": "//System.out.println(\"best: \" + best);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3964, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3964, "comment": "//private boolean oj = System.getProperty(\"ONLINE_JUDGE\") != null;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3964, "comment": "//private void tr(Object... o) { if(!oj)System.out.println(Arrays.deepToString(o)); }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3965, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author tanzaku\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3965, "comment": "//        if (Long.bitCount(maxClique) >= Long.bitCount(r|p|x)) return;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3965, "comment": "//        dump(r, p, x, u, neigibor);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3966, "comment": "//\t\tSystem.out.println(System.currentTimeMillis() - s );\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3967, "comment": "// me envian desde abajo\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3967, "comment": "// normal\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3967, "comment": "// izquierda\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3967, "comment": "// derecha\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3967, "comment": "// abajo\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3967, "comment": "// quieto\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3968, "comment": "// Petya and Spiders\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3968, "comment": "// 2012/08/16\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3969, "comment": "// Petya and Spiders\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3969, "comment": "// 2011/9/3\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3970, "comment": "//    \tscan = new MyScanner(new BufferedReader(new FileReader(\"test.in\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3970, "comment": "//    \tfor (int i = 0; i < N; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3970, "comment": "//        \tSystem.out.println(Arrays.deepToString(dp[i]));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3970, "comment": "//    \t}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3970, "comment": "//    \t\t\t\tSystem.out.println(spiders+\" \"+i+\" \"+j);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3971, "comment": "//certain ones have to be here\n"}, "Heuristic": []}, {"nl": {"id": 3971, "comment": "//move back the ones you can\n"}, "Heuristic": []}, {"nl": {"id": 3971, "comment": "//certain ones have to move on\n"}, "Heuristic": []}, {"nl": {"id": 3971, "comment": "//find which ones stay\n"}, "Heuristic": []}, {"nl": {"id": 3971, "comment": "//make sure that the ones that stay\n"}, "Heuristic": []}, {"nl": {"id": 3972, "comment": "/**\n * Author -\n * User: kansal\n * Date: 9/3/11\n * Time: 5:28 PM\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3973, "comment": "//\t\tfor(int i = 0 ; i < M; i++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3973, "comment": "//\t\t\tint next = (( i | (i << 1) | (i >> 1) ) & (M - 1));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3973, "comment": "//\t\t\tif(  next!= (M -1))\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3973, "comment": "//\t\t\t\tcontinue;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3973, "comment": "//\t\t\tif(n > 1)\n"}, "Heuristic": []}, {"nl": {"id": 3973, "comment": "//\t\t\t\tdp[0][next][0] = Integer.bitCount(i);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3973, "comment": "//\t\t\telse\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3973, "comment": "//\t\t\t\tans = min(ans, Integer.bitCount(i));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3973, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3973, "comment": "//\t\t\t\t\t\t\tif(i == 2 && m1 == 3 && m2 == 2 && nm1 == 0 && nm2 == 0){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3973, "comment": "//\t\t\t\t\t\t\t\tSystem.err.println(\"kek\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3973, "comment": "//\t\t\t\t\t\t\t\tSystem.err.println(dp[i][m1][m2]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3973, "comment": "//\t\t\t\t\t\t\t\tSystem.err.println(res1 + \" | \" + res2);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3973, "comment": "//\t\t\t\t\t\t\t\tSystem.err.println(M);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3973, "comment": "//\t\t\t\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3973, "comment": "//\t\tSystem.err.println(ans);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3974, "comment": "/*************************************************************************\n    > File Name: cf111c.java\n    > Author: Yuchen Wang\n    > Mail: wyc8094@gmail.com \n    > Created Time: Sat Feb 11 16:51:01 2017\n ************************************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 3975, "comment": "/**\n * Created by IntelliJ IDEA.\n * User: piyushd\n * Date: 3/26/11\n * Time: 10:53 PM\n * To change this template use File | Settings | File Templates.\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3976, "comment": "/**\n * Generated by Contest helper plug-in\n * Actual solution is at the bottom\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3977, "comment": "//1\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3977, "comment": "//2\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3977, "comment": "//3\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3977, "comment": "//4\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3977, "comment": "//5\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3977, "comment": "//6\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3977, "comment": "//7\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3977, "comment": "//8\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3977, "comment": "//9\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3977, "comment": "//10\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3977, "comment": "//11\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3977, "comment": "//12\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3977, "comment": "//13\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3977, "comment": "//14\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3978, "comment": "// Who goes out\n"}, "Heuristic": []}, {"nl": {"id": 3978, "comment": "// Who comes\n"}, "Heuristic": []}, {"nl": {"id": 3978, "comment": "// Who remains\n"}, "Heuristic": []}, {"nl": {"id": 3979, "comment": "//      for(int i = rem; i < m; i++)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3979, "comment": "//          System.out.print(\" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3979, "comment": "//      System.out.println(rem + \": \" + prev +\",\"+need);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3980, "comment": "//package round85;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3980, "comment": "// n>=m\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3982, "comment": "/**\n * Problem: \n * Source: \n * Link: \n * \n * @author Alexei Ostrovski\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3982, "comment": "//redirect input and output\n"}, "Heuristic": []}, {"nl": {"id": 3982, "comment": "//System.setOut(new PrintStream(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3982, "comment": "//nothing\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3982, "comment": "//read data\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3982, "comment": "//solve\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3982, "comment": "// Now (n >= m) && (m <= 6)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3982, "comment": "//System.out.println(Arrays.toString(count));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3982, "comment": "//count[cur];\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3982, "comment": "//output\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3983, "comment": "/**\n *\n * @author pttrung\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3983, "comment": "//System.out.println(add + total);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3983, "comment": "//  System.out.println(min + \" \" + max);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3983, "comment": "//  System.out.println(\"PREV \" + index + \" \" + i + \" \" + last + \" \" + lastHold);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3983, "comment": "//  System.out.println(\"NEXT \" + index + \" \" + i + \" \" + (i | lastHold) + \" \" + i);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3983, "comment": "//   System.out.println(Integer.bitCount(i) + \" \" + i);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3983, "comment": "//                if (index == 3) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3983, "comment": "//                    System.out.println(last + \" \" + i + \" \" + match(i, last) + \" \" + next);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3983, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3983, "comment": "//  break;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3983, "comment": "// System.out.println(mask + \" \" + result + \" \" + need);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3983, "comment": "// System.out.println(a + \" \" + b + \" \" + rec[i] + \" \" + rec[j]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3983, "comment": "// System.out.println(add(val, a));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3983, "comment": "// System.setOut(new PrintStream(new BufferedOutputStream(System.out), true));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3984, "comment": "// debug(Long.toBinaryString(used) + \" \" + Long.toBinaryString(left));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3984, "comment": "// debug(who);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3984, "comment": "// debug(solve(1, 4));\n"}, "Heuristic": []}, {"nl": {"id": 3984, "comment": "// debug(solve(6, 6));\n"}, "Heuristic": []}, {"nl": {"id": 3984, "comment": "// debug(solve(7,5) == solve(5,7));\n"}, "Heuristic": []}, {"nl": {"id": 3984, "comment": "//\t\t\tPrintWriter out2 = new PrintWriter(\"file.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3984, "comment": "//\t\t\t//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3984, "comment": "//\t\t\t//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3984, "comment": "//\t\t\tfor (int i = 1; i <= 40; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3984, "comment": "//\t\t\t\tfor (int j = 1; j <= i; j++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3984, "comment": "//\t\t\t\t\tif (i * j <= 40) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3984, "comment": "//\t\t\t\t\t\tint k = solve(i, j);\n"}, "Heuristic": []}, {"nl": {"id": 3984, "comment": "//\t\t\t\t\t\tout2.printf(\"cache[%d][%d] = %d;\\n\", i, j, k);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3984, "comment": "//\t\t\t\t\t\tout2.printf(\"cache[%d][%d] = %d;\\n\", j, i, k);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3984, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3984, "comment": "//\t\t\t\t\t\tcache[i][j] = solve(i, j);\n"}, "Heuristic": []}, {"nl": {"id": 3984, "comment": "//\t\t\t\t\t\tdebug(i + \" \" + j);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3984, "comment": "//\t\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3984, "comment": "//\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3984, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3984, "comment": "//\t\t\tout2.close();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3984, "comment": "//int res = solve(n, m);\n"}, "Heuristic": []}, {"nl": {"id": 3984, "comment": "// for (int i = 1; i <= 5; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3984, "comment": "// for (int j = 1; j <= 5; j++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3984, "comment": "// assert(solve(i, j) == cache[i][j]);\n"}, "Heuristic": []}, {"nl": {"id": 3984, "comment": "// //debug(i + \" \" + j + \" \" + solve(i, j));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3984, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3984, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 3985, "comment": "// n < m !!!!\n"}, "Heuristic": []}, {"nl": {"id": 3985, "comment": "// n rows m columns\n"}, "Heuristic": []}, {"nl": {"id": 3985, "comment": "//System.err.println(i + \" \" + mask + \" \" + dp[i][mask]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3985, "comment": "// already covered, skip\n"}, "Heuristic": []}, {"nl": {"id": 3985, "comment": "// place on this tile\n"}, "Heuristic": []}, {"nl": {"id": 3985, "comment": "// place on next tile\n"}, "Heuristic": []}, {"nl": {"id": 3985, "comment": "// place on lower tile\n"}, "Heuristic": []}, {"nl": {"id": 3986, "comment": "// if(k==-1||Long.bitCount(g[i]&~covered)>Long.bitCount(g[k]&~covered))\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3986, "comment": "// k=i;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3986, "comment": "// 32bit signed\n"}, "Heuristic": []}, {"nl": {"id": 3986, "comment": "// error = O(n*2^-32)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3986, "comment": "// [0, 1) (53bit)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3987, "comment": "//package round85;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3987, "comment": "// (0,i)\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3988, "comment": "//\t\t\tin = new BufferedReader(new FileReader(\"knights.in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3988, "comment": "//\t\t\tout = new PrintWriter(\"knights.out\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3989, "comment": "// System.err.println(Arrays.deepToString(os));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3990, "comment": "// if(k==-1||Long.bitCount(g[i]&~covered)>Long.bitCount(g[k]&~covered))\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3990, "comment": "// k=i;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3991, "comment": "/**\n * Author -\n * User: kansal\n * Date: 9/3/11\n * Time: 5:28 PM\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 3992, "comment": "// Petya and Spiders\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3992, "comment": "// 2012/08/15\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3994, "comment": "// if(k==-1||Long.bitCount(g[i]&~covered)>Long.bitCount(g[k]&~covered))\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3994, "comment": "// k=i;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3994, "comment": "// 32bit signed\n"}, "Heuristic": []}, {"nl": {"id": 3994, "comment": "// error = O(n*2^-32)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3994, "comment": "// [0, 1) (53bit)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3995, "comment": "// practice with rainboy\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3997, "comment": "/*\n\t\t\tif(k==-1||Long.bitCount(g[i]&~covered)>Long.bitCount(g[k]&~covered)){\n\t\t\t\tindex=0;\n\t\t\t\tcandidate[index++]=i;\n\t\t\t\tk=i;\n\t\t\t}else if(Long.bitCount(g[i]&~covered)==Long.bitCount(g[k]&~covered)){\n\t\t\t\tcandidate[index++]=i;\n\t\t\t}\n\t\t\t*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 3997, "comment": "//\t\tint index=0;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 3997, "comment": "// k=candidate[xs.nextInt(index)];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3997, "comment": "// 32bit signed\n"}, "Heuristic": []}, {"nl": {"id": 3997, "comment": "// error = O(n*2^-32)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3997, "comment": "// [0, 1) (53bit)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3998, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author AlexFetisov\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 3998, "comment": "//        if (n == 1) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3998, "comment": "//            out.println(m - ((m + 2) / 3));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3998, "comment": "//        } else if (n == 2) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3998, "comment": "//            int cur = 2;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3998, "comment": "//            for (int i = 2; i <= m; ++i) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3998, "comment": "//                if (i % 2 == 0 && i > 2) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3998, "comment": "//                    ++cur;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3998, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3998, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3998, "comment": "//            out.println(n * m - cur);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3998, "comment": "//        } else {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3998, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 3999, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Alex\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4000, "comment": "/*\n\t\t\t\tif(k==-1\n\t\t\t\t\t\t||Long.bitCount(g[i]&~covered)>Long.bitCount(g[k]\n\t\t\t\t\t\t\t\t&~covered)){\n\t\t\t\t\tlist.clear();\n\t\t\t\t\tlist.add(i);\n\t\t\t\t\tk=i;\n\t\t\t\t}else if(Long.bitCount(g[i]&~covered)==Long.bitCount(g[k]\n\t\t\t\t\t\t&~covered))\n\t\t\t\t\tlist.add(i);\n\t\t\t\t\t*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 4000, "comment": "// g[y*w+x]|=1L<<(y2*w+x2);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4000, "comment": "// ArrayList<Integer> list=new ArrayList<Integer>();\n"}, "Heuristic": []}, {"nl": {"id": 4000, "comment": "// k=list.get((int)(list.size()*random()));\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4002, "comment": "/**\n * @author derrick20\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4002, "comment": "// if the max is 1, then 1x1. Else, one dimension is at least 2, so\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4002, "comment": "// our idea of sliding forward a 2xN window works\n"}, "Heuristic": []}, {"nl": {"id": 4002, "comment": "// N, M are at least 2. N <= 6\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4002, "comment": "// base case: try all prev and curr masks, let next = 0\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4002, "comment": "// we cannot allow the previous to have anything except for 0's.\n"}, "Heuristic": []}, {"nl": {"id": 4002, "comment": "// this matters for M = 2, since at the end of the dp we are\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4002, "comment": "// doing a special case for the final column where we need to\n"}, "Heuristic": []}, {"nl": {"id": 4002, "comment": "// ensure both curr AND next are validly covered\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4002, "comment": "// all of these will satisfy the nonexistent columns, of course\n"}, "Heuristic": []}, {"nl": {"id": 4002, "comment": "// not allowed to have nonzero previous spiders\n"}, "Heuristic": []}, {"nl": {"id": 4002, "comment": "// to get the answer, we need to act on the last column by trying to\n"}, "Heuristic": []}, {"nl": {"id": 4002, "comment": "// ensure that both the prev row AND the current row are valid\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4002, "comment": "// basically, isValid(prev, curr, next) && isValid(curr, next, 0)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4002, "comment": "//            for (int c = 1; c < M; c++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4002, "comment": "//                System.out.println(\"For col = \" + c);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4002, "comment": "//                for (int prev = 0; prev < 1 << N; prev++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4002, "comment": "//                    System.out.println(\"Prev = \" + Integer.toBinaryString(prev));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4002, "comment": "//                    for (int curr = 0; curr < 1 << N; curr++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4002, "comment": "//                        System.out.println(\"Curr = \" + Integer.toBinaryString(curr) + \" gives \" + dp[c][prev][curr] + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4002, "comment": "//                    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4002, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4002, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4002, "comment": "// we only need to ensure the middle is safe\n"}, "Heuristic": []}, {"nl": {"id": 4003, "comment": "/*\nIf you want to aim high, aim high\nDon't let that studying and grades consume you\nJust live life young\n******************************\nIf I'm the sun, you're the moon\nBecause when I go up, you go down\n*******************************\nI'm working for the day I will surpass you\nhttps://www.a2oj.com/Ladder16.html\n*/"}, "Heuristic": ["H2", "H7", "H9"]}, {"nl": {"id": 4003, "comment": "//www.a2oj.com/Ladder16.html\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4003, "comment": "//dp[c][m1][m2] = min spoders in first c columns\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4004, "comment": "// if(k==-1||Long.bitCount(g[i]&~covered)>Long.bitCount(g[k]&~covered))\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4004, "comment": "// k=i;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4004, "comment": "// k=candidate[xs.nextInt(index)];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4004, "comment": "// 32bit signed\n"}, "Heuristic": []}, {"nl": {"id": 4004, "comment": "// error = O(n*2^-32)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4004, "comment": "// [0, 1) (53bit)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4005, "comment": "// in = new BufferedReader(new FileReader(filename+\".in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4005, "comment": "// out = new BufferedWriter(new FileWriter(filename+\".out\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4005, "comment": "// new Thread(new Main()).start();\n"}, "Heuristic": []}, {"nl": {"id": 4006, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 4006, "comment": "//StringJoiner sj = new StringJoiner(\" \"); \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4006, "comment": "//sj.add(strings)\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4007, "comment": "/**\n * BaZ :D\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4010, "comment": "//dp[mask][pre] -- number of ways to order mask songs last song has prev genre\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4010, "comment": "//shuffle, then sort \n"}, "Heuristic": []}, {"nl": {"id": 4010, "comment": "//shuffle, then sort \n"}, "Heuristic": []}, {"nl": {"id": 4011, "comment": "/*\n                             ;\\\n                            |' \\\n         _                  ; : ;\n        / `-.              /: : |\n       |  ,-.`-.          ,': : |\n       \\  :  `. `.       ,'-. : |\n        \\ ;    ;  `-.__,'    `-.|\n         \\ ;   ;  :::  ,::'`:.  `.\n          \\ `-. :  `    :.    `.  \\\n           \\   \\    ,   ;   ,:    (\\\n            \\   :., :.    ,'o)): ` `-.\n           ,/,' ;' ,::\"'`.`---'   `.  `-._\n         ,/  :  ; '\"      `;'          ,--`.\n        ;/   :; ;             ,:'     (   ,:)\n          ,.,:.    ; ,:.,  ,-._ `.     \\\"\"'/\n          '::'     `:'`  ,'(  \\`._____.-'\"'\n             ;,   ;  `.  `. `._`-.  \\\\\n             ;:.  ;:       `-._`-.\\  \\`.\n              '`:. :        |' `. `\\  ) \\\n      -hrr-      ` ;:       |    `--\\__,'\n                   '`      ,'\n                        ,-'\n\n\n                      free bug dog\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 4011, "comment": "// Don't place your source in a package\n"}, "Heuristic": []}, {"nl": {"id": 4011, "comment": "// Please name your class Main\n"}, "Heuristic": []}, {"nl": {"id": 4012, "comment": "/** call this method to initialize reader for InputStream */"}, "Heuristic": []}, {"nl": {"id": 4012, "comment": "/** get next word */"}, "Heuristic": []}, {"nl": {"id": 4012, "comment": "//TODO add check for eof if necessary\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4014, "comment": "/**\n *\n * @author Dstoical\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4014, "comment": "//=============================================================================\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4014, "comment": "//--------------------------The End---------------------------------\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4014, "comment": "//=============================================================================\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4014, "comment": "//\t\tt = sc.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4014, "comment": "/////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4014, "comment": "/////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4016, "comment": "// https://codeforces.com/contest/1185/submission/55800229 (rainboy)\n"}, "Heuristic": ["H1", "H9"]}, {"nl": {"id": 4017, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Jeel Vaishnav\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4018, "comment": "/*\n                             ;\\\n                            |' \\\n         _                  ; : ;\n        / `-.              /: : |\n       |  ,-.`-.          ,': : |\n       \\  :  `. `.       ,'-. : |\n        \\ ;    ;  `-.__,'    `-.|\n         \\ ;   ;  :::  ,::'`:.  `.\n          \\ `-. :  `    :.    `.  \\\n           \\   \\    ,   ;   ,:    (\\\n            \\   :., :.    ,'o)): ` `-.\n           ,/,' ;' ,::\"'`.`---'   `.  `-._\n         ,/  :  ; '\"      `;'          ,--`.\n        ;/   :; ;             ,:'     (   ,:)\n          ,.,:.    ; ,:.,  ,-._ `.     \\\"\"'/\n          '::'     `:'`  ,'(  \\`._____.-'\"'\n             ;,   ;  `.  `. `._`-.  \\\\\n             ;:.  ;:       `-._`-.\\  \\`.\n              '`:. :        |' `. `\\  ) \\\n      -hrr-      ` ;:       |    `--\\__,'\n                   '`      ,'\n                        ,-'\n\n\n                      free bug dog\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 4018, "comment": "/*\n5 3\n1 1\n2 1\n2 1\n2 1\n2 2\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 4018, "comment": "// Don't place your source in a package\n"}, "Heuristic": []}, {"nl": {"id": 4018, "comment": "// Please name your class Main\n"}, "Heuristic": []}, {"nl": {"id": 4018, "comment": "//a\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4018, "comment": "//bc\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4018, "comment": "//init\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4018, "comment": "//a\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4018, "comment": "//b c\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4018, "comment": "//price\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4018, "comment": "///if(combination==-1)combination=0;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4018, "comment": "//System.out.println(dp2[1][0][2]+\"   \"+dp3[1][1][0][0]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4018, "comment": "// for(long p[]:dp1){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4018, "comment": "// System.out.println(Arrays.toString(p));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4018, "comment": "//}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4021, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4021, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4021, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4021, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4021, "comment": "////////                                                                                                               /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4021, "comment": "////////                                                                                                               /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4021, "comment": "////////   HHHH        HHHH  EEEEEEEEEEEEE   MMMM          MMMM         OOOOOO             SSSSSSS      EEEEEEEEEEEEE  /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4021, "comment": "////////   HHHH        HHHH  EEEEEEEEEEEEE   MMMMMM      MMMMMM      OOO      OOO        SSSS   SSS     EEEEEEEEEEEEE  /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4021, "comment": "////////   HHHH        HHHH  EEEEE           MMMM MMM  MMM MMMM    OOO          OOO    SSSS       SSS   EEEEE          /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4021, "comment": "////////   HHHH        HHHH  EEEEE           MMMM  MMMMMM  MMMM   OOO            OOO   SSSS             EEEEE          /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4021, "comment": "////////   HHHH        HHHH  EEEEE           MMMM          MMMM  OOO              OOO   SSSSSSS         EEEEE          /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4021, "comment": "////////   HHHHHHHHHHHHHHHH  EEEEEEEEEEE     MMMM          MMMM  OOO              OOO      SSSSSS       EEEEEEEEEEE    /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4021, "comment": "////////   HHHHHHHHHHHHHHHH  EEEEEEEEEEE     MMMM          MMMM  OOO              OOO         SSSSSSS   EEEEEEEEEEE    /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4021, "comment": "////////   HHHH        HHHH  EEEEE           MMMM          MMMM   OOO            OOO              SSSS  EEEEE          /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4021, "comment": "////////   HHHH        HHHH  EEEEE           MMMM          MMMM    OOO          OOO     SSS       SSSS  EEEEE          /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4021, "comment": "////////   HHHH        HHHH  EEEEEEEEEEEEE   MMMM          MMMM      OOO      OOO        SSS    SSSS    EEEEEEEEEEEEE  /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4021, "comment": "////////   HHHH        HHHH  EEEEEEEEEEEEE   MMMM          MMMM         OOOOOO             SSSSSSS      EEEEEEEEEEEEE  /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4021, "comment": "////////                                                                                                               /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4021, "comment": "////////                                                                                                               /////////\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4021, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4021, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4021, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4021, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4021, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4021, "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4021, "comment": "//FileWriter f = new FileWriter(\"C:\\\\Users\\\\Ibrahim\\\\out.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4022, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Vaibhav Pulastya\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4022, "comment": "// if number of balls of any\n"}, "Heuristic": []}, {"nl": {"id": 4022, "comment": "// color becomes less than 0\n"}, "Heuristic": []}, {"nl": {"id": 4022, "comment": "// the number of ways arrangements is 0.\n"}, "Heuristic": []}, {"nl": {"id": 4022, "comment": "// If last ball required is\n"}, "Heuristic": []}, {"nl": {"id": 4022, "comment": "// of type P and the number\n"}, "Heuristic": []}, {"nl": {"id": 4022, "comment": "// of balls of P type is 1\n"}, "Heuristic": []}, {"nl": {"id": 4022, "comment": "// while number of balls of\n"}, "Heuristic": []}, {"nl": {"id": 4022, "comment": "// other color is 0 the number\n"}, "Heuristic": []}, {"nl": {"id": 4022, "comment": "// of ways is 1.\n"}, "Heuristic": []}, {"nl": {"id": 4022, "comment": "// Same case as above for 'q' and 'r'\n"}, "Heuristic": []}, {"nl": {"id": 4022, "comment": "// if last ball required is P\n"}, "Heuristic": []}, {"nl": {"id": 4022, "comment": "// and the number of ways is\n"}, "Heuristic": []}, {"nl": {"id": 4022, "comment": "// the sum of number of ways\n"}, "Heuristic": []}, {"nl": {"id": 4022, "comment": "// to form sequence with 'p-1' P\n"}, "Heuristic": []}, {"nl": {"id": 4022, "comment": "// balls, q Q Balls and r R balls\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4022, "comment": "// ending with Q and R.\n"}, "Heuristic": []}, {"nl": {"id": 4022, "comment": "// Same as above case for 'q' and 'r'\n"}, "Heuristic": []}, {"nl": {"id": 4022, "comment": "// Three cases arise:\n"}, "Heuristic": []}, {"nl": {"id": 4023, "comment": "// After writing solution, quick scan for:\n"}, "Heuristic": []}, {"nl": {"id": 4023, "comment": "//   array out of bounds\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4023, "comment": "//   special cases e.g. n=1?\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 4023, "comment": "//   npe, particularly in maps\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4023, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4023, "comment": "// Big numbers arithmetic bugs:\n"}, "Heuristic": []}, {"nl": {"id": 4023, "comment": "//   int overflow\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4023, "comment": "//   sorting, or taking max, after MOD\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4023, "comment": "// dp[t][m][g] is the number of sequences possible to be formed from\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4023, "comment": "// songs indicated by mask m, having total time t, and whose last song\n"}, "Heuristic": []}, {"nl": {"id": 4023, "comment": "// is genre g.\n"}, "Heuristic": []}, {"nl": {"id": 4023, "comment": "// Iterate over the possible last song. It's genre will determine\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4023, "comment": "// what the third dimension should be\n"}, "Heuristic": []}, {"nl": {"id": 4023, "comment": "// Base case: there is always one way regardless of what songs are available.\n"}, "Heuristic": []}, {"nl": {"id": 4023, "comment": "// The empty playlist\n"}, "Heuristic": []}, {"nl": {"id": 4023, "comment": "// IMPORTANT\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4023, "comment": "// DID YOU CHECK THE COMMON MISTAKES ABOVE?\n"}, "Heuristic": ["H12"]}, {"nl": {"id": 4023, "comment": "// Template code below\n"}, "Heuristic": []}, {"nl": {"id": 4025, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author khokharnikunj8\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4026, "comment": "// return mpow(x, mmod - 2);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4026, "comment": "// references\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4026, "comment": "// IBIG = 1e9 + 7\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4026, "comment": "// IMAX ~= 2e9\n"}, "Heuristic": []}, {"nl": {"id": 4026, "comment": "// LMAX ~= 9e18\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4026, "comment": "// constants\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4026, "comment": "// math util\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4026, "comment": "// array util\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4026, "comment": "// input\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4026, "comment": "// output\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4028, "comment": "/* public static long primeFactorization(long n)\n        {\n             HashSet<Integer> a =new HashSet<Integer>();\n        \tlong cnt=0;\n            for(int i=2;i*i<=n;i++)\n            {\n                while(a%i==0)\n                {\n                    a.add(i);\n                    a/=i;\n                }\n            }\n            if(a!=1)\n            \tcnt++;\n                //a.add(n);\n            return cnt;\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 4028, "comment": "//a.add(n);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4029, "comment": "// line length \n"}, "Heuristic": []}, {"nl": {"id": 4029, "comment": "// System.out.println((i|(1<<j))+\" \"+(g[j])+\" \"+d[i|(1<<j)][g[j]]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4029, "comment": "// System.out.println(i);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4030, "comment": "// amount of 1's in the mask\n"}, "Heuristic": []}, {"nl": {"id": 4030, "comment": "// while it is a possible mask\n"}, "Heuristic": []}, {"nl": {"id": 4030, "comment": "// for each track\n"}, "Heuristic": []}, {"nl": {"id": 4030, "comment": "// if mask contains track i\n"}, "Heuristic": []}, {"nl": {"id": 4030, "comment": "// for each genre\n"}, "Heuristic": []}, {"nl": {"id": 4030, "comment": "// update mask\n"}, "Heuristic": []}, {"nl": {"id": 4031, "comment": "/***********************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 4031, "comment": "/***********************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 4031, "comment": "// Problem : G1. Playlist for Polycarp (easy version)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4031, "comment": "// Contest : Codeforces - Codeforces Round #568 (Div. 2)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4031, "comment": "// URL : https://codeforces.com/contest/1185/problem/G1\n"}, "Heuristic": ["H9"]}, {"nl": {"id": 4031, "comment": "// Memory Limit : 256 MB\n"}, "Heuristic": []}, {"nl": {"id": 4031, "comment": "// Time Limit : 5000 ms\n"}, "Heuristic": []}, {"nl": {"id": 4031, "comment": "// Powered by CP Editor (https://github.com/cpeditor/cpeditor)\n"}, "Heuristic": ["H9"]}, {"nl": {"id": 4031, "comment": "//PrintWriter out = new PrintWriter(\"file.out\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4031, "comment": "//int t = scan.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4031, "comment": "//CHECK FOR QUICKSORT TLE\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4031, "comment": "//***********************//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4031, "comment": "//CHECK FOR INT OVERFLOW\n"}, "Heuristic": []}, {"nl": {"id": 4031, "comment": "//***********************//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4032, "comment": "/*System.out.println(dp3[1][0][0][0]+\"  \"+dp2[0][0][0]);\n\n        for(long p[]:dp1){\n            System.out.println(Arrays.toString(p));\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 4032, "comment": "/*\n                             ;\\\n                            |' \\\n         _                  ; : ;\n        / `-.              /: : |\n       |  ,-.`-.          ,': : |\n       \\  :  `. `.       ,'-. : |\n        \\ ;    ;  `-.__,'    `-.|\n         \\ ;   ;  :::  ,::'`:.  `.\n          \\ `-. :  `    :.    `.  \\\n           \\   \\    ,   ;   ,:    (\\\n            \\   :., :.    ,'o)): ` `-.\n           ,/,' ;' ,::\"'`.`---'   `.  `-._\n         ,/  :  ; '\"      `;'          ,--`.\n        ;/   :; ;             ,:'     (   ,:)\n          ,.,:.    ; ,:.,  ,-._ `.     \\\"\"'/\n          '::'     `:'`  ,'(  \\`._____.-'\"'\n             ;,   ;  `.  `. `._`-.  \\\\\n             ;:.  ;:       `-._`-.\\  \\`.\n              '`:. :        |' `. `\\  ) \\\n      -hrr-      ` ;:       |    `--\\__,'\n                   '`      ,'\n                        ,-'\n\n\n                      free bug dog\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 4032, "comment": "// Don't place your source in a package\n"}, "Heuristic": []}, {"nl": {"id": 4032, "comment": "// Please name your class Main\n"}, "Heuristic": []}, {"nl": {"id": 4032, "comment": "//a\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4032, "comment": "//bc\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4032, "comment": "//init\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4032, "comment": "//a\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4032, "comment": "//b c\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4032, "comment": "//price\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4033, "comment": "/**\n     * \u6a21\u8fd0\u7b97\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4033, "comment": "/**\n         * Determine whether x is subset of y\n         */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4033, "comment": "/**\n         * Merge two set\n         */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4033, "comment": "/**\n         * Make the node with the minimum key as the root of tree\n         */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4033, "comment": "/**\n         * Make the node with the maximum key as the root of tree\n         */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4033, "comment": "/**\n         * delete root of tree, then merge remain nodes into a new tree, and return the new root\n         */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4033, "comment": "/**\n         * detach the left subtree from root and return the root of left subtree\n         */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4033, "comment": "/**\n         * detach the right subtree from root and return the root of right subtree\n         */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4035, "comment": "/*\nRoses are red\nMemes are neat\nAll my test cases time out\nLmao yeet\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 4035, "comment": "//bitmask\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4035, "comment": "//continue all dp if mask == 0\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4035, "comment": "//continue dp if not same genre\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4035, "comment": "//optimize?\n"}, "Heuristic": ["H2", "H12"]}, {"nl": {"id": 4036, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author beginner1010\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4037, "comment": "//if(cur.i==x1 && cur.j==y1)continue;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4037, "comment": "// O(N log log N) \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4038, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4039, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4040, "comment": "/* multiply in this bit's contribution while using modulus to keep\n                     * result small */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 4040, "comment": "//    5 5\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4040, "comment": "//    1 1 5 2 3\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4040, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 4040, "comment": "// Simple swap\n"}, "Heuristic": []}, {"nl": {"id": 4040, "comment": "// Simple swap\n"}, "Heuristic": []}, {"nl": {"id": 4042, "comment": "//SOLUTION BEGIN\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4042, "comment": "//Into the Hardware Mode\n"}, "Heuristic": []}, {"nl": {"id": 4042, "comment": "//SOLUTION END\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4042, "comment": "//Solution Credits: Taranpreet Singh\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4044, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 4044, "comment": "//StringJoiner sj = new StringJoiner(\" \"); \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4044, "comment": "//sj.add(strings)\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4045, "comment": "//package cf568d2;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4048, "comment": "///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4048, "comment": "// nothing\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4050, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Washoum\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4051, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Aman Kumar Singh\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4052, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Sparsh Sanchorawala\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4056, "comment": "/*Author: Satyajeet Singh, Delhi Technological University*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 4056, "comment": "/*********************************************Constants******************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 4056, "comment": "/****************************************Solutions Begins***************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 4056, "comment": "/****************************************Solutions Ends**************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 4056, "comment": "/****************************************Template Begins************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 4056, "comment": "/***************************************Precision Printing**********************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 4056, "comment": "/**************************************Bit Manipulation**************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 4056, "comment": "/******************************************Graph*********************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 4056, "comment": "/*********************************************PAIR********************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 4056, "comment": "/******************************************Long Pair*************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 4056, "comment": "/*****************************************DEBUG***********************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 4056, "comment": "/************************************MODULAR EXPONENTIATION***********************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 4056, "comment": "/********************************************GCD**********************************************************/"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4056, "comment": "/******************************************SIEVE**********************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 4056, "comment": "/********************************************End***********************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 4056, "comment": "// debug(dp);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4056, "comment": "// squaring the base\n"}, "Heuristic": []}, {"nl": {"id": 4056, "comment": "// a is greater number\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4056, "comment": "// b is smaller number\n"}, "Heuristic": []}, {"nl": {"id": 4057, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4060, "comment": "/**\n * Created by 11815 on 2017/7/1.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4061, "comment": "/** Created by huhansan on 2017/10/9. */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4061, "comment": "/** */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4061, "comment": "//\u6bcf\u4e2a\u72b6\u6001\u6240\u9700\u8981\u7684\u6b65\u6570\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4061, "comment": "//\u5f53\u524d\u72b6\u6001\u4e0a\u4e00\u4e2a\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4061, "comment": "//\u8ba1\u7b97\u6240\u6709\u7269\u54c1\u5355\u53d6\u7684\u5168\u503c\u548c \u4efb\u610f\u4e24\u4ef6\u7269\u54c1\u4e00\u8d77\u53d6\u7684\u6743\u503c\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4061, "comment": "//\u8bb0\u5f55\u8fbe\u5230\u6bcf\u4e00\u4e2a\u72b6\u6001\u6240\u9700\u7684\u6700\u5c0f\u6b65\u6570\u548c\u6700\u540e\u4e00\u6b21\u53d6\u5f97\u7269\u54c1\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4061, "comment": "//      System.out.println(steplast[i]+\"---\"+i+\"---\"+step[i]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4062, "comment": "//public static final String FileName = \"test\";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4062, "comment": "//\tnew Main().run();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4062, "comment": "//br = new BufferedReader(new FileReader(new File(FileName+\".in\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4062, "comment": "//out = new PrintWriter(new BufferedWriter(new FileWriter(FileName+\".out\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4062, "comment": "//in = new Scanner(br);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4062, "comment": "//in.close();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4063, "comment": "// if (i == 0 || j == 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4063, "comment": "// \tout.println(0);\t\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4063, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4064, "comment": "// Jonathan\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4064, "comment": "// cpt_fwiffo\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4064, "comment": "//set starting point as last point for finding distances\n"}, "Heuristic": []}, {"nl": {"id": 4064, "comment": "//find first 1 (LSB)\n"}, "Heuristic": []}, {"nl": {"id": 4064, "comment": "//check for a bit equal to 1 in location j\n"}, "Heuristic": []}, {"nl": {"id": 4064, "comment": "//remove first 1 from i\n"}, "Heuristic": []}, {"nl": {"id": 4064, "comment": "//set the path we came from to trace later\n"}, "Heuristic": []}, {"nl": {"id": 4064, "comment": "//distance from origin to the point being removed, and back\n"}, "Heuristic": []}, {"nl": {"id": 4064, "comment": "//set minimum distance if just this point is added to the collection\n"}, "Heuristic": []}, {"nl": {"id": 4064, "comment": "//remove both 1 at position j and 1 at position m from i\n"}, "Heuristic": []}, {"nl": {"id": 4064, "comment": "//calculate round-trip distance to grab 2 points\n"}, "Heuristic": []}, {"nl": {"id": 4064, "comment": "// check if this new option is a better choice.  If it is, update our value and our path.\n"}, "Heuristic": []}, {"nl": {"id": 4064, "comment": "//output min value of traversal\n"}, "Heuristic": []}, {"nl": {"id": 4064, "comment": "//start at our min value\n"}, "Heuristic": []}, {"nl": {"id": 4064, "comment": "//find the one or two values that were added at this step\n"}, "Heuristic": []}, {"nl": {"id": 4064, "comment": "//calculate distances between all points so that we don't have to compute later\n"}, "Heuristic": []}, {"nl": {"id": 4067, "comment": "// generateRandom();\n"}, "Heuristic": []}, {"nl": {"id": 4067, "comment": "// two\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4068, "comment": "/**\n * @author Egor Kulikov (kulikov@devexperts.com)\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4069, "comment": "/**\n * 111118315581\n *\n * @author pttrung\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4069, "comment": "// System.out.println(1 << 24);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4069, "comment": "// out.print(0 + \" \")  ;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4069, "comment": "//  System.out.println(mask);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4069, "comment": "//System.out.println(i + \" \" + j);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4069, "comment": "//System.out.println(temp);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4069, "comment": "// System.setOut(new PrintStream(new BufferedOutputStream(System.out), true));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4070, "comment": "/**\n * 8C\n *\n * @author artyom\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4070, "comment": "//go through all pairs and find time requirement for each pair of objects\n"}, "Heuristic": []}, {"nl": {"id": 4070, "comment": "//the entry at point [i][j] is equal to the time it takes to get from point i to point j\n"}, "Heuristic": []}, {"nl": {"id": 4070, "comment": "//each value in bitmasks represents the minimum time necessary to get\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4070, "comment": "//the unmasked bits\n"}, "Heuristic": []}, {"nl": {"id": 4070, "comment": "//so bitmasks[5] (5=101) is the fastest time in which you can get\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4070, "comment": "//items 1 and 3\n"}, "Heuristic": []}, {"nl": {"id": 4070, "comment": "//collecting zero objects takes 0 time\n"}, "Heuristic": []}, {"nl": {"id": 4070, "comment": "//if our current j object hasn't been picked up yet\n"}, "Heuristic": []}, {"nl": {"id": 4070, "comment": "//ith state after picking up j object\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4070, "comment": "//time required to get object j from bag at state i\n"}, "Heuristic": []}, {"nl": {"id": 4070, "comment": "//put fastest time in for gettingto our current state\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4070, "comment": "//find another thing while you're out\n"}, "Heuristic": []}, {"nl": {"id": 4070, "comment": "//if the kth position in our current state hasn't been picked up\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4070, "comment": "//curstate after picking up the kth object\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4070, "comment": "//kTime is time it takes to go from bag, to j, to k and back\n"}, "Heuristic": []}, {"nl": {"id": 4070, "comment": "//put shortest time for getting to kState in\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4070, "comment": "//difference is the objects picked up in this state but not in previous state\n"}, "Heuristic": []}, {"nl": {"id": 4070, "comment": "//if the ith object was picked up in this state\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4070, "comment": "//keep track of how many items are picked up\n"}, "Heuristic": []}, {"nl": {"id": 4070, "comment": "//put in two items followed by a return to 0\n"}, "Heuristic": []}, {"nl": {"id": 4072, "comment": "/*\n                int t = rec(use ^ (1 << i), a, dp);\n                t += a[i][i];\n                r = Math.min(r, t);*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 4072, "comment": "//in = new BufferedReader(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4073, "comment": "//            out.println(\"i=\"+i);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4073, "comment": "//                    out.println(\"i=\"+i+\",j=\"+j);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4073, "comment": "//                        out.println(\"up:\"+ni+\" to \"+v + \" fw=\"+i);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4073, "comment": "//                                out.println(\"up:\"+nni+\" to \"+vv + \" fw=\"+i);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4073, "comment": "//        out.println(\"dp=\"+Arrays.toString(dp));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4073, "comment": "//        out.println(\"f=\"+Arrays.toString(f));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4073, "comment": "//            out.println(\"idx = \"+idx + \" f[idx] = \"+f[idx]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4073, "comment": "//        out.println(Arrays.toString(d));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4073, "comment": "//        out.println(Arrays.deepToString(t));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4075, "comment": "/* we will do dynamic programming over the subsets\n\t   best[m] will be the shortest for binary digits of m\n\t   being in. \n\t   last[m] will be the last subset before m */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 4075, "comment": "/*if (i % 1000000 == 0 ){\n\t\tSystem.out.println(i);\n\t\t}*/"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 4075, "comment": "//goes through subsets before supersets\n"}, "Heuristic": []}, {"nl": {"id": 4075, "comment": "//goes through subsets before supersets\n"}, "Heuristic": []}, {"nl": {"id": 4075, "comment": "// if 2^j and i have bitwise sum nonzero\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4075, "comment": "// if 2^k and i have bitwise sum nonzero\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4075, "comment": "// break here because order doesn't really matter, just knowing which pairs to roup\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4075, "comment": "//System.out.println(\"Got to i = \" + i + \" and path is: \" + path);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4075, "comment": "// this has one or two 1s in binary\n"}, "Heuristic": []}, {"nl": {"id": 4075, "comment": "// if dif has a 1 in the j'th digit\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4077, "comment": "/**\n * @author vstepanov on 3/29/2017.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4078, "comment": "// H->i->H\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4078, "comment": "// H->i->j->H\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4079, "comment": "// ////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4079, "comment": "// Solution\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4079, "comment": "// ////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4079, "comment": "// Utility functions\n"}, "Heuristic": []}, {"nl": {"id": 4079, "comment": "//System.setIn(new FileInputStream(\"1\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4079, "comment": "//      Thread t = new Thread(null, new Main(), \"1\", 1 << 27);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4079, "comment": "//      t.start();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4079, "comment": "//      t.join();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4079, "comment": "//      if (sError != null) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4079, "comment": "//          throw sError;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4079, "comment": "//      }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4080, "comment": "//System.out.println(Arrays.toString(dp));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4080, "comment": "//System.out.println(i);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4080, "comment": "//break;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4081, "comment": "// System.err.println(((System.currentTimeMillis() - time)));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4081, "comment": "// brute(n, 0)\n"}, "Heuristic": []}, {"nl": {"id": 4081, "comment": "//System.err.println((System.currentTimeMillis() - time));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4083, "comment": "// ////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4083, "comment": "// Solution\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4083, "comment": "// ////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4083, "comment": "// Utility functions\n"}, "Heuristic": []}, {"nl": {"id": 4083, "comment": "//System.setIn(new FileInputStream(\"1\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4084, "comment": "// Try a new place\n"}, "Heuristic": []}, {"nl": {"id": 4084, "comment": "// Precompute all choices and masks\n"}, "Heuristic": []}, {"nl": {"id": 4084, "comment": "//System.out.println(Integer.toBinaryString(m));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4085, "comment": "/**\n * Created by Brandt Henslee on 2/24/2015.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4085, "comment": "//go through all pairs and find time requirement for each pair of objects\n"}, "Heuristic": []}, {"nl": {"id": 4085, "comment": "//the entry at point [i][j] is equal to the time it takes to get from point i to point j\n"}, "Heuristic": []}, {"nl": {"id": 4085, "comment": "//each value in bitmasks represents the minimum time necessary to get\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4085, "comment": "//the unmasked bits\n"}, "Heuristic": []}, {"nl": {"id": 4085, "comment": "//so bitmasks[5] (5=101) is the fastest time in which you can get\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4085, "comment": "//items 1 and 3\n"}, "Heuristic": []}, {"nl": {"id": 4085, "comment": "//collecting zero objects takes 0 time\n"}, "Heuristic": []}, {"nl": {"id": 4085, "comment": "//1<<n makes the n+1 position in the bit string = 1\n"}, "Heuristic": []}, {"nl": {"id": 4085, "comment": "//1<<2 = 100\n"}, "Heuristic": []}, {"nl": {"id": 4085, "comment": "//if our current j object hasn't been picked up yet\n"}, "Heuristic": []}, {"nl": {"id": 4085, "comment": "//ith state after picking up j object\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4085, "comment": "//time required to get object j from bag at state i\n"}, "Heuristic": []}, {"nl": {"id": 4085, "comment": "//put fastest time in for gettingto our current state\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4085, "comment": "//if the kth position in our current state hasn't been picked up\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4085, "comment": "//curstate after picking pu kth object\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4085, "comment": "//kTime is time it takes to go from bag, to j, to k and back\n"}, "Heuristic": []}, {"nl": {"id": 4085, "comment": "//put shortest tiem in for getting to kState\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4085, "comment": "//1100 ^ 1101 = 0001\n"}, "Heuristic": []}, {"nl": {"id": 4085, "comment": "//difference is the objects picked up in this state but not in previous state\n"}, "Heuristic": []}, {"nl": {"id": 4085, "comment": "//if the ith object was picked up in this state\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4085, "comment": "//keep track of how many items are picked up\n"}, "Heuristic": []}, {"nl": {"id": 4085, "comment": "//put in two items followed by a return to 0\n"}, "Heuristic": []}, {"nl": {"id": 4086, "comment": "// http://codeforces.com/problemset/problem/8/C\t\n"}, "Heuristic": ["H2", "H9"]}, {"nl": {"id": 4086, "comment": "// Source of most code : http://codeforces.com/contest/8/submission/3492661\n"}, "Heuristic": ["H9"]}, {"nl": {"id": 4086, "comment": "// Keep track of each item location and also be able to \n"}, "Heuristic": []}, {"nl": {"id": 4086, "comment": "// calculate distance between it and another object\n"}, "Heuristic": []}, {"nl": {"id": 4086, "comment": "// Return distance between two points\n"}, "Heuristic": []}, {"nl": {"id": 4086, "comment": "// Each value in bits[] is the min time to get certain objects\n"}, "Heuristic": []}, {"nl": {"id": 4086, "comment": "// Ex. bits[6] = 110 is the fastest time to get items that correspond with the '1s'\n"}, "Heuristic": []}, {"nl": {"id": 4086, "comment": "// If bitNum is too big for the array\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4086, "comment": "// If bit value has already been calculated\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4086, "comment": "// Performs bitwise AND operation to see if bitNum and i have no bits in common\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4086, "comment": "// Only happens on the first time in IF statement\n"}, "Heuristic": []}, {"nl": {"id": 4086, "comment": "// One item that can be picked up before returning to handbag\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4086, "comment": "// Performs bitwise exclusive OR operation\n"}, "Heuristic": []}, {"nl": {"id": 4086, "comment": "// Change value so this case isn't ever hit again && to store value to use in else statement dists\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4086, "comment": "// Find the distance between the handbag and the first item\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4086, "comment": "// Find the distance between the first item and the second item\n"}, "Heuristic": []}, {"nl": {"id": 4086, "comment": "// Find the distance between the second item and the handbag\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4086, "comment": "// Two items that can be picked up before returning to handbag\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4086, "comment": "// distance covered between any two objects in the time equal \n"}, "Heuristic": []}, {"nl": {"id": 4086, "comment": "// to the squared length of the segment between the points of the objects\n"}, "Heuristic": []}, {"nl": {"id": 4086, "comment": "// Performs bitwise exclusive OR operation\n"}, "Heuristic": []}, {"nl": {"id": 4086, "comment": "// Store all values in bits[] to speed up solve and for use in printOptPath\n"}, "Heuristic": []}, {"nl": {"id": 4086, "comment": "// Almost identical to solve equation except it doesn't calculate the answer, it checks the stored answer in bits \n"}, "Heuristic": []}, {"nl": {"id": 4086, "comment": "// Change value so this case isn't ever hit again && to find distance to this specific item in else if statement\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4086, "comment": "// solve() should quickly return an answer because the bits[] has already been calculated\t\t\t\t\t\t\n"}, "Heuristic": []}, {"nl": {"id": 4086, "comment": "// One item that can be picked up before returning to handbag\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4086, "comment": "// Recursively call print with new bitNum\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4086, "comment": "// Two items that can be picked up before returning to handbag\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4086, "comment": "// Recursively call print with new bitNum\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4086, "comment": "// PrintWriter needs to be class member because of recursive print strategy\n"}, "Heuristic": []}, {"nl": {"id": 4086, "comment": "// x << n is a right shift operator \n"}, "Heuristic": []}, {"nl": {"id": 4086, "comment": "// which will remove the last n bits from x\n"}, "Heuristic": []}, {"nl": {"id": 4086, "comment": "// Ex 1 << 2 => 4\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4086, "comment": "// Ex: 1 << 3 = 8; 1 << 5 = 64\n"}, "Heuristic": []}, {"nl": {"id": 4086, "comment": "// Init bits array to hold -1 values\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4086, "comment": "// Start solving with bit #1\n"}, "Heuristic": []}, {"nl": {"id": 4086, "comment": "// Min time needed to put items in handbag\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4086, "comment": "// Init output with handbag location\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4086, "comment": "// Print possible optimum path to pick up items\n"}, "Heuristic": []}, {"nl": {"id": 4087, "comment": "//package round8;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4087, "comment": "//\t\tint n = 24, m = 99999;\n"}, "Heuristic": []}, {"nl": {"id": 4087, "comment": "//\t\tRandom gen = new Random();\n"}, "Heuristic": []}, {"nl": {"id": 4087, "comment": "//\t\tStringBuilder sb = new StringBuilder();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4087, "comment": "//\t\tsb.append(0 + \" \" + 0  + \" \" + n + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4087, "comment": "//\t\tfor(int i = 0;i < n;i++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4087, "comment": "//\t\t\tsb.append(gen.nextInt(100) + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4087, "comment": "//\t\t\tsb.append(gen.nextInt(100) + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4087, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4087, "comment": "//\t\tINPUT = sb.toString();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4089, "comment": "//        Arrays.fill(d, inf);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4089, "comment": "//        prev[0] = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4089, "comment": "//        d[0] = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4089, "comment": "//        for (int i = 0; i < n; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4089, "comment": "//            int add = 1 << i;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4089, "comment": "//            int len = 2 * dist[n][i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4089, "comment": "//            String description = (i + 1) + \" \";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4089, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4089, "comment": "//            go(prev, leafDescription, d, len, add, description);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4089, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4089, "comment": "//        for (int i = 0; i < n; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4089, "comment": "//            for (int j = i + 1; j < n; j++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4089, "comment": "//                int add = (1 << i) | (1 << j);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4089, "comment": "//                int len = dist[n][i] + dist[i][j] + dist[n][j];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4089, "comment": "//                String description = (i + 1) + \" \" + (j + 1) + \" \";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4089, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4089, "comment": "//                go(prev, leafDescription, d, len, add, description);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4089, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4089, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4089, "comment": "//        Debug.printObjects(out, d);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4089, "comment": "//        Debug.printObjects(out, prev);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4089, "comment": "//        Debug.printObjects(out, leafDescription);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4094, "comment": "//System.out.println(\"ANS\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4100, "comment": "/**\n * Generated by Contest helper plug-in\n * Actual solution is at the bottom\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4101, "comment": "// Solution is at the bottom of code\n"}, "Heuristic": []}, {"nl": {"id": 4101, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4101, "comment": "////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4101, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4101, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4101, "comment": "/////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4101, "comment": "/////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4101, "comment": "///////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4101, "comment": "////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4101, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4101, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4101, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4101, "comment": "/////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4102, "comment": "//ArrayList<Integer>[] g;\n"}, "Heuristic": []}, {"nl": {"id": 4102, "comment": "//int[][] a = new int[1000][1000];\n"}, "Heuristic": []}, {"nl": {"id": 4102, "comment": "//int cnt = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4102, "comment": "//Reader in = new Reader(\"in.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4102, "comment": "//out = new PrintWriter( new BufferedWriter(new FileWriter(\"output.txt\")) );\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4102, "comment": "//BufferedReader br = new BufferedReader( new FileReader(\"in.txt\") );\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4102, "comment": "//BufferedReader br = new BufferedReader( new InputStreamReader( System.in ) );\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4102, "comment": "//\t\t@Override\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4102, "comment": "//\t\tpublic boolean equals(Object o) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4102, "comment": "//\t\t\tPair p = (Pair) o;\n"}, "Heuristic": []}, {"nl": {"id": 4102, "comment": "//\t\t\treturn a == p.a && b == p.b;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4102, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4102, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4102, "comment": "//\t\t@Override\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4102, "comment": "//\t\tpublic int hashCode() {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4102, "comment": "//\t\t\treturn Integer.valueOf(a).hashCode() + Integer.valueOf(b).hashCode();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4102, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4104, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4104, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 4105, "comment": "// |A|\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4105, "comment": "// |AB|\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4106, "comment": "//System.out.println(Arrays.toString(dp));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4106, "comment": "//System.out.println(i);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4106, "comment": "//break;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4109, "comment": "//System.out.println(dist[i][j]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4109, "comment": "//System.out.println(Integer.toBinaryString(cur)+\" \"+cur);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4110, "comment": "//Scanner skek = new Scanner(System.in);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//        int[][] dp = new int[n][n];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//        for(int i = 0;i<n;i++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//            Arrays.fill(dp[i],-1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//        int[] distFromOrigin = new int[n];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "////        HashMap<Integer,Boolean> map = new HashMap<>();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//        for(int i=0;i<n;i++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//            distFromOrigin[i] = (int) (Math.pow((xCoord[i] - x),2) + Math.pow(yCoord[i] - y,2));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "////            map.put(i,true);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//        System.out.println(0);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//        long sum = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//        String str = \"0 \";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4111, "comment": "//        while(!map.isEmpty()){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//            int first = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//            int second = Integer.MIN_VALUE;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//            if(map.size() == 1){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//                first = new ArrayList<Integer>(map.keySet()).get(0) + 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//                int min = distFromOrigin[first - 1] + distFromOrigin[first - 1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//                sum += min;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//                map.remove(first - 1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//            }else {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//                int min = Integer.MAX_VALUE;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4111, "comment": "//                for (int i = 0; i < n; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//                    for (int j = 0; j <= i; j++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//                        if (map.containsKey(i) && map.containsKey(j) && distFromOrigin[i] + distFromOrigin[j] + dp[i][j] < min) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//                            min = distFromOrigin[i] + distFromOrigin[j] + dp[i][j];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//                            first = i + 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//                            if(i == j){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//                                second = Integer.MIN_VALUE;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//                            }else {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//                                second = j + 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//                            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//                        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//                    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//                sum += min;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//                map.remove(first - 1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//                if(second != Integer.MIN_VALUE){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//                    map.remove(second - 1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//            if(second == Integer.MIN_VALUE){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//                str = str + first + \" \";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//            }else{\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//                if(map.size() == 0) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//                    str = str + first + \" \" + second + \" \";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//                }else{\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//                    str = str + first + \" \" + second + \" 0 \";\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "////            System.out.print(first + \" \" + second + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//        System.out.println(sum);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//        System.out.println(str + \"0\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//        int[] ans = new int[(int)Math.pow(2,n)];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//        Arrays.fill(ans,Integer.MAX_VALUE);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//        for(int i = 0;i<Math.pow(2,n);i++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//            for(int j = 0;j<n;j++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//                //I can't figure out how to do that.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//        System.out.print(sum);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4111, "comment": "//        System.out.print(0);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4112, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4114, "comment": "// ------------------------------------------------------------------------------\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4114, "comment": "// \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043d\u0435\u0432\u0430\u0436\u0435\u043d, \u0442.\u043a. \u0432 i \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u0438\u0434\u0442\u0438, \u043f\u043e\u0439\u0434\u0435\u043c \u0442\u0443\u0434\u0430 \u0441\u0440\u0430\u0437\u0443\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4116, "comment": "// startsFrom, count\n"}, "Heuristic": []}, {"nl": {"id": 4117, "comment": "//long t = System.currentTimeMillis();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4117, "comment": "//System.out.println(System.currentTimeMillis() - t);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4117, "comment": "//for (int i = 0; i < ac; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4117, "comment": "//p[nextMask] = a * n + b;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4117, "comment": "//}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4118, "comment": "//System.out.println(Arrays.toString(dp));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4118, "comment": "//System.out.println(i);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4118, "comment": "//break;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4119, "comment": "//The PandaScanner class, for Panda fast scanning!\n"}, "Heuristic": []}, {"nl": {"id": 4120, "comment": "//input = new BufferedReader(new FileReader(file + \".in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4121, "comment": "//end public void main()\n"}, "Heuristic": []}, {"nl": {"id": 4121, "comment": "//Turn on bit x\n"}, "Heuristic": []}, {"nl": {"id": 4121, "comment": "//Turn off bit x\n"}, "Heuristic": []}, {"nl": {"id": 4121, "comment": "//int pair\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4124, "comment": "//\t\tSystem.out.println(test);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4125, "comment": "/* Input */"}, "Heuristic": ["H7"]}, {"nl": {"id": 4125, "comment": "/* Precalc */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 4125, "comment": "/* DP */"}, "Heuristic": ["H7"]}, {"nl": {"id": 4125, "comment": "/* Output */"}, "Heuristic": ["H7"]}, {"nl": {"id": 4125, "comment": "/*************************************************************** \n     * Utility\n     **************************************************************/"}, "Heuristic": ["H1"]}, {"nl": {"id": 4125, "comment": "/*************************************************************** \n     * Input \n     **************************************************************/"}, "Heuristic": ["H1"]}, {"nl": {"id": 4125, "comment": "// hack: use first non-zero bit\n"}, "Heuristic": ["H4"]}, {"nl": {"id": 4127, "comment": "/** Class for buffered reading int and double values */"}, "Heuristic": []}, {"nl": {"id": 4127, "comment": "/** call this method to initialize reader for InputStream */"}, "Heuristic": []}, {"nl": {"id": 4127, "comment": "/** get next word */"}, "Heuristic": []}, {"nl": {"id": 4127, "comment": "// TODO add check for eof if necessary\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4128, "comment": "//System.out.printf(\"%d\",0);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4130, "comment": "/**\n * CodeForces 8C - Looking for Order\n * Created by Darren on 14-10-1.\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4130, "comment": "/** get next word */"}, "Heuristic": []}, {"nl": {"id": 4130, "comment": "//TODO add check for eof if necessary\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4132, "comment": "//System.out.println((items[0][1]-bag[1])*(items[0][1]-bag[1]));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4133, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Nguyen Trung Hieu - vuondenthanhcong11@yahoo.com\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4135, "comment": "/**\n * Created by James on 1/29/2015.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4135, "comment": "//totally had to steal the vast majority of this from http://codeforces.com/contest/8/submission/9745593\n"}, "Heuristic": ["H9"]}, {"nl": {"id": 4136, "comment": "// if (n > 5)\n"}, "Heuristic": []}, {"nl": {"id": 4136, "comment": "// return;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4136, "comment": "// TODO: handle exception\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4137, "comment": "/**\n * DA-IICT\n * Author : PARTH PATEL\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4137, "comment": "//System.out.println(\"i \"+i+\" j \"+j+\" \"+g[i][j]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4137, "comment": "//we have to find dp[i]\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4137, "comment": "//not visited j\n"}, "Heuristic": []}, {"nl": {"id": 4140, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4141, "comment": "// node == 0 -- > count 0 // state == 0 has 1 // state == 1 has 2\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4142, "comment": "/**\n * 9:50 ~ \n *\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4142, "comment": "//if(dp[state] == INF) continue;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4143, "comment": "// Hooray bitmasks! I'm good at these :)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4143, "comment": "// Handbag coordinates..\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4143, "comment": "// Dynamic programming: Also store a matrix of the time to reach one\n"}, "Heuristic": []}, {"nl": {"id": 4143, "comment": "//  object from the other.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4143, "comment": "// This considers the handbag to be object 0\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4143, "comment": "// Compute elapsed times...\n"}, "Heuristic": []}, {"nl": {"id": 4143, "comment": "// Fill up an array with the amount of time it takes to grab\n"}, "Heuristic": []}, {"nl": {"id": 4143, "comment": "//  all objects with the specified bitmask.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4143, "comment": "// Look for first object in bitmask to grab...\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4143, "comment": "// A better way to get to position J was found, use it.\n"}, "Heuristic": []}, {"nl": {"id": 4143, "comment": "// Find another thing while you're out...\n"}, "Heuristic": []}, {"nl": {"id": 4143, "comment": "// Did we find a better way to get to iffollow state?\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 4143, "comment": "// After all this time, we have an answer.\n"}, "Heuristic": []}, {"nl": {"id": 4143, "comment": "// The minimum time will be the value of sofar at the very end,\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4143, "comment": "//  which will have the case of if all objects were picked up.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4143, "comment": "// Clever, no?\n"}, "Heuristic": ["H12"]}, {"nl": {"id": 4143, "comment": "// The logic came from http://www.darrensun.com/codeforces-round-8/\n"}, "Heuristic": ["H9"]}, {"nl": {"id": 4143, "comment": "// Wish I could claim it mine, but it is not so.\n"}, "Heuristic": []}, {"nl": {"id": 4143, "comment": "// Which objects were collected in the prvious trip?\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 4143, "comment": "// Two objects were collected this trip, output them both.\n"}, "Heuristic": []}, {"nl": {"id": 4143, "comment": "// Only one object was collected here.\n"}, "Heuristic": []}, {"nl": {"id": 4144, "comment": "/**\n\t * @param args\n\t * @throws IOException \n\t */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4145, "comment": "// T = solved.cin.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4146, "comment": "//----------------------\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4148, "comment": "/**\n * Created by IntelliJ IDEA.\n * User: Taras_Brzezinsky\n * Date: 8/14/11\n * Time: 9:53 PM\n * To change this template use File | Settings | File Templates.\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4148, "comment": "//dp[mask] = probability of current subset (mask) to remain in the end\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4151, "comment": "/**\n *\n * @author Alvaro\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4152, "comment": "//System.out.println(\"read\"+(c++));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4152, "comment": "// 2^n\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4152, "comment": "//      System.out.println(\"answers : \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4152, "comment": "//          System.out.printf(\"permutation = %x, prob = %f\\n\",perm,m[perm]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4152, "comment": "//      getPerms(0);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4152, "comment": "//      p(perm);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4152, "comment": "//      double res[] = new double[n];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4152, "comment": "//      for(int i=0;i<n;i++)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4152, "comment": "//          for(int j=0;j<n;j++)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4152, "comment": "//          if((i&(i-1))!=0)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4152, "comment": "//              continue;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4152, "comment": "//          res[i] =\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4152, "comment": "//              p(perm,n);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4152, "comment": "//          System.out.println(m[i][j]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4152, "comment": "//      int cur=(1<<n)-1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4152, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4152, "comment": "//int i=0;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4152, "comment": "//      for(i=0;i<n;i++)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4152, "comment": "//      {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4152, "comment": "//          int val=(cur-(1<<i));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4152, "comment": "//          int L = n-1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4152, "comment": "//          System.out.printf(\"running for %x .... P = %f\\n\",val,getProb(val,L));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4152, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4152, "comment": "//      }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4152, "comment": "//getP((1<<n)-1));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4152, "comment": "//      for(int i=0;i<m.length;i++)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4152, "comment": "//      {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4152, "comment": "//          System.out.println(m[perm]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4152, "comment": "//      }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4152, "comment": "// j got eaten\n"}, "Heuristic": []}, {"nl": {"id": 4152, "comment": "// i eats j\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4152, "comment": "//System.out.println(\"L=\"+L);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4152, "comment": "//              System.out.printf(\"Left with %d,%d eats %d \\n\",L,i,j);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4152, "comment": "//              System.out.printf(\"p(%x)= %f \\n\",newPerm,m[newPerm]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4152, "comment": "//System.out.printf(\"p(%x)= %f \\n\",newPerm2,m[newPerm2]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4152, "comment": "//          System.out.printf(\"p(%x)= %f \\n\",newPerm,m[newPerm]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4152, "comment": "//          System.out.println(\"here-------------------->\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4152, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 4152, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 4152, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 4154, "comment": "/**\n * Created by IntelliJ IDEA.\n * User: Taras_Brzezinsky\n * Date: 8/14/11\n * Time: 9:53 PM\n * To change this template use File | Settings | File Templates.\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4154, "comment": "//dp[mask] = probability of current subset (mask) to remain in the end\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4155, "comment": "/**\n * Created by IntelliJ IDEA.\n * User: aircube\n * Date: 11.01.11\n * Time: 4:14\n * To change this template use File | Settings | File Templates.\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4155, "comment": "// x & (x - 1)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4155, "comment": "// 10\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4155, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4157, "comment": "/**\n *\n * @author jon\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4159, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author AlexFetisov\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4165, "comment": "//System.setIn(new FileInputStream(\"1\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4167, "comment": "//jth fish is alive\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4167, "comment": "//candidates to kill jth fish\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4168, "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 4168, "comment": "//System.out.println(pairs);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4169, "comment": "/**\n * Codeforces Beta Round 16\n * \n * @author ProjectYoung\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4172, "comment": "/**\n *\n * @author jon\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4172, "comment": "//        double k = getBits(mask);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4172, "comment": "//        System.out.println(k + \" \" + mult);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4172, "comment": "//        k *= (k-1)/2.0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4172, "comment": "//ret /= (double)mult;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4174, "comment": "//?\n"}, "Heuristic": ["H2", "H12"]}, {"nl": {"id": 4176, "comment": "/*\n\tAuthor\t:\tImran Khan\n\tLanguage:\tJava\n\t\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 4179, "comment": "//System.out.print(ncr[i][j] + \"  \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4179, "comment": "//System.out.println();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4179, "comment": "//System.out.println(state + \" / \" + (state & (~(1<<i))) + \" / \" + dp[state] + \" / \" + a[j][i] + \" / \" + (dp[state] * a[j][i]) + \" / \"  + dp[state & (~(1<<i))]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4179, "comment": "//System.out.println(state + \" / \" + (state & (~(1<<j))) + \" / \" + dp[state] + \" / \" + a[i][j] + \" / \" + (dp[state] * a[i][j]) + \" / \"  + dp[state & (~(1<<j))]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4179, "comment": "//System.out.println();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4182, "comment": "//\u041a\u043e\u043b-\u0432\u043e \u0434\u0435\u0441\u044f\u0442\u0438\u0447\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b (\u0432\u043a\u043b\u044e\u0447\u0430\u044f 0), \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u0432 \u0441\u0435\u0431\u0435 \u0446\u0438\u0444\u0440\u044b \u043e\u0442 0 \u0434\u043e k-1\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4182, "comment": "//\u041f\u0438\u0448\u0435\u0442\u0441\u044f \u0441 do{}while(nextPermutation(a));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4182, "comment": "//One-dimensional array     \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4182, "comment": "//Two-dimensional array\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4182, "comment": "//Three-dimensional array\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4183, "comment": "/*\n\tAuthor\t:\tImran Khan\n\tLanguage:\tJava\n\t\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 4183, "comment": "/*\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tfor(int mask=1;mask<ub;mask++) {\n\t\t\t\tdp[mask]=0;\n\t\t\t\tif ((mask&(1<<i))==0) continue;\n\t\t\t\tif (bitCount(mask)==1)\n\t\t\t\t{\n\t\t\t\t\tdp[mask]=1.;\n\t\t\t\t} else\n\t\t\t\tfor(int k=0;k<n;k++) {\n\t\t\t\t\tif ((mask&(1<<k))==0) continue;\n\t\t\t\t\tif (i==k) continue;\n\t\t\t\t\tdp[mask]+=sum[mask][k]*dp[mask-(1<<k)];\n\t\t\t\t}\n\t\t\t}\n\t\t\tans[i]=dp[ub-1];\n\t\t}*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 4185, "comment": "// still alive\n"}, "Heuristic": []}, {"nl": {"id": 4186, "comment": "/**\n * Created by IntelliJ IDEA.\n * User: Taras_Brzezinsky\n * Date: 8/14/11\n * Time: 9:53 PM\n * To change this template use File | Settings | File Templates.\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4186, "comment": "//dp[mask] = probability of current subset (mask) to remain in the end\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4189, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Niyaz Nigmatullin\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4190, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Jacob Jiang\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4190, "comment": "// i eat j\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4190, "comment": "// j eat i\n"}, "Heuristic": []}, {"nl": {"id": 4192, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4192, "comment": "//System.out.println(i+\" \"+j+\" \"+prob[i][j]+\" \"+Integer.toBinaryString(mask)+\" \"+oneC+\" \"+zeroC);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4192, "comment": "//System.out.println(rad+\" \"+count);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4192, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4192, "comment": "//System.out.println(i+\" \"+j+\" \"+prob[i][j]+\" \"+Integer.toBinaryString(mask)+\" \"+oneC+\" \"+zeroC);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4192, "comment": "//Arrays.fill(dp, -1);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4192, "comment": "//System.out.print(solve(1<<i)+\" \");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4192, "comment": "//      for(int i=0;i<18;i++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4192, "comment": "//          for(int k=0;k<18;k++)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4192, "comment": "//              System.out.print(Math.random()+\" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4192, "comment": "//          System.out.println();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4192, "comment": "//      }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4194, "comment": "//\tstatic StreamTokenizer in; static int next() throws Exception {in.nextToken(); return (int) in.nval;}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4194, "comment": "//\t\tin = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n"}, "Heuristic": []}, {"nl": {"id": 4195, "comment": "// solution\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4196, "comment": "// by agus.mw\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4197, "comment": "//input = new BufferedReader(new FileReader(file + \".in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4199, "comment": "/**\n * Created by IntelliJ IDEA.\n * User: aircube\n * Date: 11.01.11\n * Time: 4:14\n * To change this template use File | Settings | File Templates.\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4199, "comment": "// x & (x - 1)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4199, "comment": "// 10\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4199, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4204, "comment": "/*static int divis(int n, int a){\n\t\tfor(int i = 0; i < a; i++){\n\t\t\tn /= 2;\n\t\t}\n\t\treturn n;\n\t}*/"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 4204, "comment": "//Scanner skek = new Scanner(System.in);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4204, "comment": "// So this is apparently a thing\n"}, "Heuristic": []}, {"nl": {"id": 4204, "comment": "// (X >> Y) literally does the same thing as divis func. Bit operators are weird.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4205, "comment": "// ////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4205, "comment": "// Solution\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4205, "comment": "// ////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4205, "comment": "// Utility functions\n"}, "Heuristic": []}, {"nl": {"id": 4205, "comment": "//System.setIn(new FileInputStream(\"1\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4206, "comment": "//ArrayList<Integer>[] g;\n"}, "Heuristic": []}, {"nl": {"id": 4206, "comment": "//int[][] a = new int[1000][1000];\n"}, "Heuristic": []}, {"nl": {"id": 4206, "comment": "//int cnt = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4206, "comment": "//Reader in = new Reader(\"in.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4206, "comment": "//out = new PrintWriter( new BufferedWriter(new FileWriter(\"output.txt\")) );\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4206, "comment": "//BufferedReader br = new BufferedReader( new FileReader(\"in.txt\") );\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4206, "comment": "//BufferedReader br = new BufferedReader( new InputStreamReader( System.in ) );\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4206, "comment": "//\t\t@Override\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4206, "comment": "//\t\tpublic boolean equals(Object o) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4206, "comment": "//\t\t\tPair p = (Pair) o;\n"}, "Heuristic": []}, {"nl": {"id": 4206, "comment": "//\t\t\treturn a == p.a && b == p.b;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4206, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4206, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4206, "comment": "//\t\t@Override\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4206, "comment": "//\t\tpublic int hashCode() {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4206, "comment": "//\t\t\treturn Integer.valueOf(a).hashCode() + Integer.valueOf(b).hashCode();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4206, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4209, "comment": "//dp[mask] = probability of current subset (mask) to remain in the end\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4210, "comment": "/**\n * Created by IntelliJ IDEA.\n * User: Taras_Brzezinsky\n * Date: 8/14/11\n * Time: 9:53 PM\n * To change this template use File | Settings | File Templates.\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4210, "comment": "//dp[mask] = probability of current subset (mask) to remain in the end\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4212, "comment": "//\t\t\tSystem.out.println(Arrays.toString(memo));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4215, "comment": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 4215, "comment": "/**\n *\n * @author Trung Pham\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4215, "comment": "//System.out.print(builder.toString());\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4215, "comment": "//  System.out.println(mask);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4215, "comment": "// System.setOut(new PrintStream(new BufferedOutputStream(System.out), true));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4216, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4217, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Egor Kulikov (egor@egork.net)\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4218, "comment": "// small case\n"}, "Heuristic": []}, {"nl": {"id": 4218, "comment": "//  int val = i;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4218, "comment": "// StringTokenizer st = new StringTokenizer(bf.readLine());\n"}, "Heuristic": []}, {"nl": {"id": 4218, "comment": "// int[] a = new int[n]; for(int i=0; i<n; i++) a[i] = Integer.parseInt(st.nextToken());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4218, "comment": "// int n = Integer.parseInt(st.nextToken());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4220, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4221, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4222, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4222, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4224, "comment": "// references\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4224, "comment": "// IBIG = 1e9 + 7\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4224, "comment": "// IMAX ~= 2e9\n"}, "Heuristic": []}, {"nl": {"id": 4224, "comment": "// LMAX ~= 9e18\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4224, "comment": "// constants\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4224, "comment": "// math util\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4224, "comment": "// array util\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4224, "comment": "// input\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4224, "comment": "// output\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4225, "comment": "/**\n * Date: 14 Sep, 2019\n * Link: \n * \n * @author Prasad-Chaudhari\n * @linkedIn: https://www.linkedin.com/in/prasad-chaudhari-841655a6/\n * @git: https://github.com/Prasad-Chaudhari\n */"}, "Heuristic": ["H1", "H9"]}, {"nl": {"id": 4225, "comment": "//www.linkedin.com/in/prasad-chaudhari-841655a6/\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4225, "comment": "//github.com/Prasad-Chaudhari\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4225, "comment": "// TODO code application logic here\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4225, "comment": "// int t = 1;\n"}, "Heuristic": []}, {"nl": {"id": 4225, "comment": "// for (int i = 0; i < n; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4225, "comment": "//     for (int j = 0; j < col; j++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4225, "comment": "//         System.out.print(c[i][j] + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4225, "comment": "//     }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4225, "comment": "//     System.out.println();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4225, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4225, "comment": "// System.out.print(c[i][j] + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4225, "comment": "// System.out.println();\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4225, "comment": "// System.out.println(sum);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4227, "comment": "/**\n * BaZ :D\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4227, "comment": "//initIo(true);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4227, "comment": "//            pl(\"need : \"+need);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4227, "comment": "//            pa(\"Real\", real);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4227, "comment": "//pl(\"idx: \"+idx+\" bias : \"+bias + \" mask : \"+mask);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4227, "comment": "//didn't fix bias yet\n"}, "Heuristic": []}, {"nl": {"id": 4227, "comment": "//pl(\"maxxxxxxx : \"+max);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4227, "comment": "//pl(\"max : \"+max);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4228, "comment": "/************** HELPER CLASSES ***************/"}, "Heuristic": []}, {"nl": {"id": 4228, "comment": "/************** FAST IO CODE FOLLOWS *****************/"}, "Heuristic": []}, {"nl": {"id": 4228, "comment": "/**** LIBRARIES ****/"}, "Heuristic": []}, {"nl": {"id": 4228, "comment": "/* Full Problem Text:\n  \nThis is an easier version of the next problem.\nThe difference is only in constraints.\nYou are given a rectangular n \\times m matrix a.\nIn one move you can choose any column and cyclically shift elements in this column.\nYou can perform this operation as many times as you want (possibly zero).\nYou can perform this operation to a column multiple times.\nAfter you are done with cyclical shifts, you compute for every row the maximal value in it.\nSuppose that for i-th row it is equal r_i.\nWhat is the maximal possible value of r_1+r_2+...+r_n?\n\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 4228, "comment": "// **** E1. Rotate Columns (easy version) ****\n"}, "Heuristic": []}, {"nl": {"id": 4228, "comment": "//System.err.println(\"Adding \" + P[i].j + \" , \" + P[i].L);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4228, "comment": "//System.err.println(\"EASY\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4228, "comment": "// n == 4\n"}, "Heuristic": []}, {"nl": {"id": 4228, "comment": "//Integer [] rr = rotcols.toArray(new Integer[0]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4228, "comment": "//static class HS extends HashSet<Integer>{public HS(){super();}public HS(int a){super(a);}};\n"}, "Heuristic": []}, {"nl": {"id": 4228, "comment": "//static class AL extends ArrayList<Integer>{public AL(){super();}public AL(int a){super (a);}};\n"}, "Heuristic": []}, {"nl": {"id": 4229, "comment": "/**\n * @author khokharnikunj8\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4231, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4232, "comment": "//-----------MyScanner class for faster input----------\n"}, "Heuristic": []}, {"nl": {"id": 4235, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author anand.oza\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4236, "comment": "/**/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 4236, "comment": "/*/\n\t\tDataInputStream in = new DataInputStream(new FileInputStream(\"src/e.in\"));\n\t\t/**/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 4237, "comment": "// tr(org);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4237, "comment": "// tr(comx);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4238, "comment": "/**\n * @author khokharnikunj8\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4239, "comment": "//static final long MOD = 1000000007;\n"}, "Heuristic": []}, {"nl": {"id": 4239, "comment": "//Sort an array (immune to quicksort TLE)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4239, "comment": "//Descending order\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4242, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4242, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4244, "comment": "//        FastReader in = new FastReader(new FileInputStream(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4244, "comment": "//        PrintWriter out = new PrintWriter(new FileOutputStream(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4246, "comment": "//package round584;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4246, "comment": "//\tSet<Long> all = new HashSet<>();\n"}, "Heuristic": []}, {"nl": {"id": 4246, "comment": "//\t\t\tfor(int i = 0;i <= max;i++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4246, "comment": "//\t\t\t\tint min = ptn[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4246, "comment": "//\t\t\t\tint k = ptn[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4246, "comment": "//\t\t\t\tfor(int j = 0;j < 12;j++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4246, "comment": "//\t\t\t\t\tint nk = k>>>1|(k&1)<<11;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4246, "comment": "//\t\t\t\t\tk = nk;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4246, "comment": "//\t\t\t\t\tmin = Math.min(min, k);\n"}, "Heuristic": []}, {"nl": {"id": 4246, "comment": "//\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4246, "comment": "//\t\t\t\tptn[i] = min;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4246, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4246, "comment": "//\t\t\tall.add(h);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4246, "comment": "//\t\tint n = 4, m = 100;\n"}, "Heuristic": []}, {"nl": {"id": 4246, "comment": "//\t\tRandom gen = new Random();\n"}, "Heuristic": []}, {"nl": {"id": 4246, "comment": "//\t\tStringBuilder sb = new StringBuilder();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4246, "comment": "//\t\tsb.append(40 + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4246, "comment": "//\t\tfor(int rep = 0;rep < 40;rep++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4246, "comment": "//\t\t\tsb.append(n + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4246, "comment": "//\t\t\tsb.append(m + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4246, "comment": "//\t\t\tfor (int i = 0; i < n*m; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4246, "comment": "//\t\t\t\tsb.append(gen.nextInt(100000) + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4246, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4246, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4246, "comment": "//\t\tINPUT = sb.toString();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4246, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4248, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4249, "comment": "// for (long[] arr : dp)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4249, "comment": "// {\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4249, "comment": "//     out.println(Arrays.toString(arr));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4249, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4251, "comment": "// System.err.println(Arrays.deepToString(arr));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4251, "comment": "// System.err.println(Arrays.deepToString(nums));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4251, "comment": "// I believe you only need top 6 numbers?\n"}, "Heuristic": ["H12"]}, {"nl": {"id": 4251, "comment": "// System.err.println(Arrays.deepToString(arr));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4253, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author null\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4256, "comment": "/**\n * Built using CHelper plug-in Actual solution is at the top\n *\n * @author ilyakor\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4257, "comment": "//package cf584d12;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4258, "comment": "/* multiply in this bit's contribution while using modulus to keep\n                     * result small */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 4258, "comment": "/*\n1\n4 2\n5 7 6 2 2 5 3 6\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 4258, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 4258, "comment": "// Simple swap\n"}, "Heuristic": []}, {"nl": {"id": 4258, "comment": "// Simple swap\n"}, "Heuristic": []}, {"nl": {"id": 4259, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author mikit\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4259, "comment": "// out.setBoolLabel(LightWriter.BoolLabel.YES_NO_FIRST_UP);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4260, "comment": "/*\n\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 4260, "comment": "// System.out.println(Arrays.toString(shift));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4261, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author beginner1010\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4262, "comment": "//some row has max value already determined\n"}, "Heuristic": []}, {"nl": {"id": 4263, "comment": "//\t\tint tests = 40;\n"}, "Heuristic": []}, {"nl": {"id": 4263, "comment": "//\t\t\tint n = 12, m = 2000, a[][] = new int[n][m];\n"}, "Heuristic": []}, {"nl": {"id": 4264, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4266, "comment": "//SOLUTION BEGIN\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4266, "comment": "//Into the Hardware Mode\n"}, "Heuristic": []}, {"nl": {"id": 4266, "comment": "//SOLUTION END\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4266, "comment": "//Solution Credits: Taranpreet Singh\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4267, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Alex\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4267, "comment": "//happy senator\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4267, "comment": "//unhappy senator\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4267, "comment": "// n, [1, 8]\n"}, "Heuristic": []}, {"nl": {"id": 4267, "comment": "// k, [1, 8]\n"}, "Heuristic": []}, {"nl": {"id": 4267, "comment": "// A, [1, 9999]\n"}, "Heuristic": []}, {"nl": {"id": 4267, "comment": "// [1, 9999]\n"}, "Heuristic": []}, {"nl": {"id": 4267, "comment": "// [0, 100] divisible by 10\n"}, "Heuristic": []}, {"nl": {"id": 4268, "comment": "//\t\t\tin = new BufferedReader(new FileReader(filename + \".in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4268, "comment": "//\t\t\tout = new PrintWriter(filename + \".out\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4270, "comment": "/**\n * Created by IntelliJ IDEA.\n * User: Taras_Brzezinsky\n * Date: 8/13/11\n * Time: 6:10 PM\n * To change this template use File | Settings | File Templates.\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4271, "comment": "// in = new BufferedReader(new FileReader(filename+\".in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4271, "comment": "// out = new BufferedWriter(new FileWriter(filename+\".out\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4271, "comment": "// new Thread(new Main()).start();\n"}, "Heuristic": []}, {"nl": {"id": 4272, "comment": "// System.out.println(Arrays.toString(loy));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4272, "comment": "// --------------------------------------------------------------------------------------------\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4273, "comment": "//package round81;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4275, "comment": "// 3 0 31\n"}, "Heuristic": []}, {"nl": {"id": 4275, "comment": "// 10 60\n"}, "Heuristic": []}, {"nl": {"id": 4275, "comment": "// 12 60\n"}, "Heuristic": []}, {"nl": {"id": 4275, "comment": "// 15 0\n"}, "Heuristic": []}, {"nl": {"id": 4276, "comment": "/**\n * Created by IntelliJ IDEA.\n * User: piyushd\n * Date: 3/26/11\n * Time: 10:53 PM\n * To change this template use File | Settings | File Templates.\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4277, "comment": "/**\n * Created by IntelliJ IDEA.\n * User: Taras_Brzezinsky\n * Date: 8/13/11\n * Time: 6:10 PM\n * To change this template use File | Settings | File Templates.\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4278, "comment": "// loyalty\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4278, "comment": "// Find the probability of winning\n"}, "Heuristic": []}, {"nl": {"id": 4278, "comment": "// Calculate if we kill all senators\n"}, "Heuristic": []}, {"nl": {"id": 4278, "comment": "// Add in the probability of losing\n"}, "Heuristic": []}, {"nl": {"id": 4280, "comment": "// {{{\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4280, "comment": "// }}}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4280, "comment": "// {{{\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4280, "comment": "// }}}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4280, "comment": "// {{{\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4280, "comment": "// }}}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4283, "comment": "/** http://pastebin.com/j0xdUjDn */"}, "Heuristic": ["H1", "H9"]}, {"nl": {"id": 4283, "comment": "//pastebin.com/j0xdUjDn */\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4283, "comment": "// solution\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4284, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Niyaz Nigmatullin\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4285, "comment": "/**\n *\n * @author Saransh\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4285, "comment": "//print(maxer);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4285, "comment": "//print(arr);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4285, "comment": "//print(arr);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4285, "comment": "// print(arr);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4285, "comment": "// System.out.println(tmp[i][0]+\" \"+tmp[i][1]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4285, "comment": "//print(tmp[0]);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4285, "comment": "//System.out.println(i+\" \"+add);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4285, "comment": "//System.out.println(i+\" \"+add);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4287, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4288, "comment": "// needed number of senators voted positivelly\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4289, "comment": "/*\n * 5 3 100 23 70 80 30 153 70 11 80 14 90\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 4290, "comment": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 4290, "comment": "/**\n *\n * @author pttrung\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4290, "comment": "//           // if(result >= 1){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4290, "comment": "//                for(int i : num){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4290, "comment": "//                    System.out.print(i + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4290, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4290, "comment": "//                System.out.println(\"\\n\" + result);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4290, "comment": "//            //}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4290, "comment": "//  double val = cal(index + 1 , num , A, left - i);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4291, "comment": "/**\n * Created by IntelliJ IDEA.\n * User: Taras_Brzezinsky\n * Date: 8/13/11\n * Time: 6:10 PM\n * To change this template use File | Settings | File Templates.\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4292, "comment": "// in = new BufferedReader(new FileReader(filename+\".in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4292, "comment": "// out = new BufferedWriter(new FileWriter(filename+\".out\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4292, "comment": "// new Thread(new Main()).start();\n"}, "Heuristic": []}, {"nl": {"id": 4293, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author AlexFetisov\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4293, "comment": "//double res = rec(0, 0, k, 0);\n"}, "Heuristic": []}, {"nl": {"id": 4294, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Alex\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4294, "comment": "//happy senator\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4294, "comment": "//unhappy senator\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4294, "comment": "//            System.err.println(pos + \" \" + (happy <= levels.length / 2) + \" \" + playerlevelsum + \" \" + (playerlevelsum + badlevelssum) + \" \" + occurs + \" \" + winprob + \" \" + occurs * winprob);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4294, "comment": "// n, [1, 8]\n"}, "Heuristic": []}, {"nl": {"id": 4294, "comment": "// k, [1, 8]\n"}, "Heuristic": []}, {"nl": {"id": 4294, "comment": "// A, [1, 9999]\n"}, "Heuristic": []}, {"nl": {"id": 4294, "comment": "// [1, 9999]\n"}, "Heuristic": []}, {"nl": {"id": 4294, "comment": "// [0, 100] divisible by 10\n"}, "Heuristic": []}, {"nl": {"id": 4294, "comment": "//        out.printLine(possibilities.size());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4294, "comment": "//            out.printLine(al);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4294, "comment": "//            out.printLine(newloyalties);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4294, "comment": "//            double works = dp(0, 0, newloyalties);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4295, "comment": "// 1 approve\n"}, "Heuristic": []}, {"nl": {"id": 4300, "comment": "// \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043d\u0430 n-1 \u0435\u0434\u0438\u043d\u0438\u0447\u0435\u043a\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4300, "comment": "// \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043b\u0438. \u0440\u0430\u0441\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4301, "comment": "/*\n        System.out.printf(\"%d\\n\", waysGiveCandies.size());\n        for(ArrayList< Integer > x : waysGiveCandies){\n            for(int i : x)\n                System.out.printf(\"%d \", i);\n            System.out.printf(\"\\n\");\n        }\n*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 4301, "comment": "/*\n    public class pair< X extends Comparable< X >,Y extends Comparable< Y > > implements Comparable< pair< X,Y > >{\n        X x;\n        Y y;\n        public pair(){}\n        public pair(X xx, Y yy){ x=xx; y=yy; }\n        public int compareTo(pair< X,Y > p){ return x.compareTo(p.x)!=0 ? x.compareTo(p.x) : y.compareTo(p.y); }\n        public int hashCode(){ return 31*x.hashCode()+y.hashCode(); }\n        public boolean equals(Object o){\n            if((o.getClass() != this.getClass())) return false;\n            pair< X,Y > p = (pair< X,Y >) o;\n            return x.equals(p.x) && y.equals(p.y);\n        }\n        public String toString(){ return \"(\"+x+\", \"+y+\")\"; }\n    }\n*/"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": 4301, "comment": "// if winner\n"}, "Heuristic": []}, {"nl": {"id": 4301, "comment": "// if loser\n"}, "Heuristic": []}, {"nl": {"id": 4301, "comment": "// if win vote, don't need to fight\n"}, "Heuristic": []}, {"nl": {"id": 4301, "comment": "// base case\n"}, "Heuristic": []}, {"nl": {"id": 4301, "comment": "// general case\n"}, "Heuristic": []}, {"nl": {"id": 4301, "comment": "// syntax\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4301, "comment": "// ArrayList<Integer>[] myMat = (ArrayList<Integer>[]) new ArrayList[nB];\n"}, "Heuristic": []}, {"nl": {"id": 4301, "comment": "// Pairs\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4301, "comment": "// my stuff\n"}, "Heuristic": []}, {"nl": {"id": 4301, "comment": "// 0011 0100 returns 0000 0100\n"}, "Heuristic": []}, {"nl": {"id": 4301, "comment": "// generic main stuff\n"}, "Heuristic": []}, {"nl": {"id": 4301, "comment": "// sc = new Scanner(System.in);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4301, "comment": "// errprintln(\"nanoTime=\"+(System.nanoTime()-startTime)/1000000/1000.0);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4301, "comment": "// capable of reading   2.86M 6dp doubles per second\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4301, "comment": "//                      2.16M 12dp doubles per second\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4301, "comment": "//                      2.75M int per second\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4303, "comment": "/*double prob[][] = new double[n + 1][n + 1];\n            prob[0][0] = 1;\n\n            for (int i = 1; i <= n; ++i) {\n                for (int sayYes = 1; sayYes <= i; ++sayYes) {\n                    prob[i][sayYes] = p[i - 1] * prob[i - 1][sayYes - 1];\n                }\n                for (int sayYes = 0; sayYes <= i; ++sayYes) {\n                    prob[i][sayYes] = (1 - p[i - 1]) * prob[i - 1][sayYes];\n                }\n            }\n            double nowYes = 0;\n            for (int i = 0; i <= n; ++i) {\n                if (i >= (n + 2) / 2 )\n                    nowYes += prob[n][i];\n            } */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 4303, "comment": "// reader = new BufferedReader(new FileReader(TASK + \".in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4303, "comment": "// writer = new PrintWriter(TASK + \".out\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4304, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4307, "comment": "// in = new StreamTokenizer( new InputStreamReader( System.in ) );\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4307, "comment": "//    int nextInt() throws IOException {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4307, "comment": "//        in.nextToken();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4307, "comment": "//        return ( int ) in.nval;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4307, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4308, "comment": "/**\n * Created by IntelliJ IDEA.\n * User: Taras_Brzezinsky\n * Date: 8/13/11\n * Time: 6:10 PM\n * To change this template use File | Settings | File Templates.\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4310, "comment": "//\t\t\tin = new BufferedReader(new FileReader(\"knights.in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4310, "comment": "//\t\t\tout = new PrintWriter(\"knights.out\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4311, "comment": "//System.err.println(Arrays.toString(loyal));\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4312, "comment": "/*\n        while(candy > 0){\n            int ind = 0;\n            for(int i = 1; i < n; i++)\n                if(ss[i].loyal < 100 && ss[ind].level < ss[i].level)\n                    ind = i;\n            ss[ind].loyal += 10;\n            ss[ind].loyal = min(100, ss[ind].loyal);\n            candy--;\n        }\n        */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 4312, "comment": "//BufferedReader sc = new BufferedReader(new InputStreamReader(System.in));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4312, "comment": "// only sc.readLine() is available\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4312, "comment": "//int[] level = new int[n];\n"}, "Heuristic": []}, {"nl": {"id": 4312, "comment": "//int[] loyal = new int[n];\n"}, "Heuristic": []}, {"nl": {"id": 4313, "comment": "/*for (int msk=0; msk<sz; msk++) {\n\t\t\tdouble p = 1;\n\t\t\tint cnt = 0;\n\t\t\tfor (int i=0; i<n; i++)\n\t\t\t\tif ((msk&(1<<i))>0) {\t\t\t\t\t\n\t\t\t\t\tp *= (100-a[i])/100.0;\n\t\t\t\t} else {\n\t\t\t\t\tp *= a[i]/100.0;\n\t\t\t\t\tcnt++;\n\t\t\t\t}\n\t\t\tif (cnt>n/2) res += p; else res += p*kill[msk];\n\t\t}\n\t\tres /= sz;*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 4313, "comment": "//conf[0] = 2; conf[1] = 1; conf[2] = 3;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4313, "comment": "// br = new BufferedReader(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4313, "comment": "// out = new PrintWriter(\"output.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4314, "comment": "//package contest10D;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4314, "comment": "//start is n.\n"}, "Heuristic": []}, {"nl": {"id": 4314, "comment": "// set,last -> number of path n -> last.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4314, "comment": "//add\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4315, "comment": "/*\n\t\t\t * dp[mask][i] be the number of Hamiltonian walks over the subset mask,\n\t\t\t * starting at the vertex first(mask) and ending at the vertex i\n\t\t\t */"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 4315, "comment": "// int testcase = in.ni();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4316, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Darshandarji\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4316, "comment": "/*for (int i = 0; i < n; ++i)\n            for (int j = 0; j < n; ++j)\n                g[i][j] = true;*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 4317, "comment": "/**\n * Created by Tejas on 18-10-2018.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4317, "comment": "// HW starting at pos first and ending at j.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4317, "comment": "//Calculating simple cycles\n"}, "Heuristic": []}, {"nl": {"id": 4318, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Alex\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4319, "comment": "// [0, n)\u306e\u9802\u70b9\u3060\u3051\u3067\u3001n-1 \u30b9\u30bf\u30fc\u30c8\u3060\u3051\u8003\u3048\u308b\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4319, "comment": "// n-1 \u3092\u542b\u3080\u30b5\u30a4\u30af\u30eb\u3092\u53f3\u56de\u308a\u3068\u5de6\u56de\u308a\u6570\u3048\u3066\u3057\u307e\u3063\u305f\u306e\u3067\uff12\u3067\u5272\u308b\n"}, "Heuristic": []}, {"nl": {"id": 4321, "comment": "//System.out.println(\"st=\"+st);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4323, "comment": "/**\n * Created by IntelliJ IDEA.\n * User: piyushd\n * Date: 12/31/10\n * Time: 1:30 PM\n * To change this template use File | Settings | File Templates.\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4325, "comment": "/**\n * JUDGE_ID : 104262PN\n * User     : \u0414\u0435\u043d\u0438\u0441\n * Date     : 09.05.11\n * Time     : 22:48\n * ICQ      : 785625\n * Email    : popokus@gmail.com\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4325, "comment": "// calculating dp\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4330, "comment": "/*int a[]=new int[n];\n\tfor(int i=0;i<n;i++)\n\t{\n\t\ta[i]=Integer.parseInt(l[i]);\n\t}*/"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 4330, "comment": "//int t=in.readInt();\n"}, "Heuristic": []}, {"nl": {"id": 4330, "comment": "//while(t-->0)\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4330, "comment": "//{\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4330, "comment": "//}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4330, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 4330, "comment": "//return 0;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4330, "comment": "//BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4330, "comment": "//StringBuilder sb=new StringBuilder(\"\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4330, "comment": "//InputReader in = new InputReader(System.in);\n"}, "Heuristic": []}, {"nl": {"id": 4330, "comment": "//PrintWriter pw=new PrintWriter(System.out);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4330, "comment": "//String line=br.readLine().trim();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4330, "comment": "//int t=Integer.parseInt(br.readLine());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4330, "comment": "//\twhile(t-->0)\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4330, "comment": "//{\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4330, "comment": "//int n=Integer.parseInt(br.readLine());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4330, "comment": "//long n=Long.parseLong(br.readLine());\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4330, "comment": "//String l[]=br.readLine().split(\" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4330, "comment": "//int m=Integer.parseInt(l[0]);\n"}, "Heuristic": []}, {"nl": {"id": 4330, "comment": "//int k=Integer.parseInt(l[1]);\n"}, "Heuristic": []}, {"nl": {"id": 4330, "comment": "//String l[]=br.readLine().split(\" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4330, "comment": "//l=br.readLine().split(\" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4330, "comment": "//System.out.println(\" \");\t     \t\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4330, "comment": "//}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4333, "comment": "/**\n * @author Egor Kulikov (egor@egork.net)\n *         Created on 14.03.2010\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4333, "comment": "//\t\tnew Thread(new Template()).start();\n"}, "Heuristic": []}, {"nl": {"id": 4333, "comment": "//\t\tString id = getClass().getName().toLowerCase();\n"}, "Heuristic": []}, {"nl": {"id": 4333, "comment": "//\t\ttry {\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4333, "comment": "//\t\t\tSystem.setIn(new FileInputStream(id + \".in\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4333, "comment": "//\t\t\tSystem.setOut(new PrintStream(new FileOutputStream(id + \".out\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4333, "comment": "//\t\t} catch (FileNotFoundException e) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4333, "comment": "//\t\t\tthrow new RuntimeException();\n"}, "Heuristic": []}, {"nl": {"id": 4333, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4333, "comment": "//        int numTests = in.readInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4333, "comment": "//        for (int testNumber = 0; testNumber < numTests; testNumber++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4333, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4333, "comment": "//\t\tn = 19;\n"}, "Heuristic": []}, {"nl": {"id": 4333, "comment": "//\t\te = new boolean[n][n];\n"}, "Heuristic": []}, {"nl": {"id": 4333, "comment": "//\t\tfor (int i = 0; i < n; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4333, "comment": "//\t\t\tfor (int j = 0; j < n; j++)\n"}, "Heuristic": []}, {"nl": {"id": 4333, "comment": "//\t\t\t\te[i][j] = i != j;\n"}, "Heuristic": []}, {"nl": {"id": 4333, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4335, "comment": "// how many cycles through i with intermediate vertices before i\n"}, "Heuristic": []}, {"nl": {"id": 4335, "comment": "// dp[b][j]: how many paths from i to j with intermediate vertices in b\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4338, "comment": "/*static long solve(int V) {\n\t\tint v = V-1;\n\t\tlong[][] memo = new long[V][1 << V];\n\t\t\n\t\tmemo[v][1 << v] = 1;\n\t\tfor (int mask = 1; mask < (1 << V); mask++)\n\t\t\tfor (int i = 0; i < V; i++) if ((mask&(1 << i)) != 0)\n\t\t\t\tfor (int j = 0; j < V; j++) if (g[i][j] && (mask&(1 << j)) == 0)\n\t\t\t\t\tmemo[j][mask|(1 << j)] += memo[i][mask];\n\t\t\n\t\tlong res = 0;\n\t\tfor (int mask = 1; mask < (1 << V); mask++)\n\t\t\tfor (int i = 0; i < V; i++)\n\t\t\t\tif (Integer.bitCount(mask) > 2 && g[v][i]) res += memo[i][mask];\n\t\treturn res/2;\n\t}*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 4338, "comment": "//long cur = solve(i);\n"}, "Heuristic": []}, {"nl": {"id": 4338, "comment": "//add\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4340, "comment": "/**\n * Created by Darren on 14-10-21.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4340, "comment": "/** get next word */"}, "Heuristic": []}, {"nl": {"id": 4340, "comment": "// dp[mask][i] = 0\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4340, "comment": "//TODO add check for eof if necessary\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4341, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4341, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 4342, "comment": "// long time = System.currentTimeMillis();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4342, "comment": "//\t\tif (n >= 3) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4342, "comment": "//\t\t\tif (edges[n - 3][n - 2] && edges[n - 3][n - 1]\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4342, "comment": "//\t\t\t\t\t&& edges[n - 2][n - 1]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4342, "comment": "//\t\t\t\tans += 2;\n"}, "Heuristic": []}, {"nl": {"id": 4342, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4342, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4342, "comment": "// System.err.println(System.currentTimeMillis() - time);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4342, "comment": "// out.println(19 + \" \" + 19 * 9);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4342, "comment": "// for (int i = 0; i < 19; ++i) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4342, "comment": "// for (int j = i + 1; j < 19; ++j) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4342, "comment": "// out.println((i + 1) + \" \" + (j + 1));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4342, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4342, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4343, "comment": "/**\n * Created by shirsh.bansal on 07/08/16.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4343, "comment": "//        for (int i = 7; i < (1 << n); i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4343, "comment": "//            if(Integer.bitCount(i) < 3) continue;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4343, "comment": "//            for (int j = 0; j < n; j++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4343, "comment": "//                int startNode = Integer.numberOfTrailingZeros(Integer.highestOneBit(i));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4343, "comment": "//                int endNode = j;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4343, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4343, "comment": "//                if(graph[startNode][endNode] && dp[i][j] != -1) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4343, "comment": "////                    System.out.println(i + \" \" + startNode + \" \" + endNode + \" \" + dp[i][j]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4343, "comment": "//                    sum += dp[i][j];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4343, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4343, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4343, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4343, "comment": "//        int tmpMask = mask ^ (1<<i);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4343, "comment": "//        for (int j = 0; j <= firstNode; j++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4343, "comment": "//            if(((1<<j)&tmpMask) != 0 && graph[i][j]) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4343, "comment": "//                dp[mask][i] += f(tmpMask, j, dp, graph, n, firstNode);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4343, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4343, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4343, "comment": "//\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4344, "comment": "//fin = new FileInputStream(\"in.txt\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4344, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 4345, "comment": "/*for (int i = 0; i < n; ++i)\n            for (int j = 0; j < n; ++j)\n                g[i][j] = true;*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 4346, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Alex\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4347, "comment": "/************************ SOLUTION STARTS HERE ***********************/"}, "Heuristic": []}, {"nl": {"id": 4347, "comment": "/*\t\tfor(long l[] : DP)\n\t\t\tout.println(Arrays.toString(l));*/"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 4347, "comment": "/************************ SOLUTION ENDS HERE ************************/"}, "Heuristic": []}, {"nl": {"id": 4347, "comment": "/************************ TEMPLATE STARTS HERE *********************/"}, "Heuristic": []}, {"nl": {"id": 4347, "comment": "/************************ TEMPLATE ENDS HERE ************************/"}, "Heuristic": []}, {"nl": {"id": 4347, "comment": "// System.out.printf(\"mask = %s , u = %d , v = %d\\n\" , Integer.toBinaryString(mask) , u , v);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4348, "comment": "/************************ SOLUTION STARTS HERE ***********************/"}, "Heuristic": []}, {"nl": {"id": 4348, "comment": "/*\t\tfor(long l[] : DP)\n\t\t\tout.println(Arrays.toString(l));*/"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 4348, "comment": "/************************ SOLUTION ENDS HERE ************************/"}, "Heuristic": []}, {"nl": {"id": 4348, "comment": "/************************ TEMPLATE STARTS HERE *********************/"}, "Heuristic": []}, {"nl": {"id": 4348, "comment": "/************************ TEMPLATE ENDS HERE ************************/"}, "Heuristic": []}, {"nl": {"id": 4348, "comment": "// System.out.printf(\"mask = %s , u = %d , v = %d\\n\" , Integer.toBinaryString(mask) , u , v);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4348, "comment": "// System.out.printf(\"mask = %s , u = %d , v = %d\\n\" , Integer.toBinaryString(mask) , u , v);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4352, "comment": "/**\n * Codeforces 11D - A Simple Task\n * Created by Darren on 14-10-21.\n * O(2^n * n^2) time and O(2^n * n) space.\n *\n * Tag: dynamic programming, bitmask, graph\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4352, "comment": "/** get next word */"}, "Heuristic": []}, {"nl": {"id": 4352, "comment": "// Adjacency matrix\n"}, "Heuristic": []}, {"nl": {"id": 4352, "comment": "// Converted to 0-based\n"}, "Heuristic": []}, {"nl": {"id": 4352, "comment": "// dp[i][j]: the number of Hamiltonian walks over the subgraph formed by\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4352, "comment": "// the mask i, starting at the smallest vertex and ending at vertex j\n"}, "Heuristic": []}, {"nl": {"id": 4352, "comment": "// dp[1<<i][i] = 1;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4352, "comment": "// dp[i][j] = sum_k{dp[i^j][k]} if j is within the mask i and (k,j) is an edge\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4352, "comment": "// A simple cycle with length not smaller than 3\n"}, "Heuristic": []}, {"nl": {"id": 4352, "comment": "// dp[mask][i] = 0\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4352, "comment": "// A cycle is counted twice\n"}, "Heuristic": []}, {"nl": {"id": 4352, "comment": "// Return the number of '1's in the binary representation of the mask\n"}, "Heuristic": []}, {"nl": {"id": 4352, "comment": "// Return an integer with only one '1' in its binary form and the position of the\n"}, "Heuristic": []}, {"nl": {"id": 4352, "comment": "// only '1' is the same with the lowest '1' in mask\n"}, "Heuristic": []}, {"nl": {"id": 4352, "comment": "// mask = x1b where b is a sequence of zeros;\n"}, "Heuristic": []}, {"nl": {"id": 4352, "comment": "// -mask = x'1b', where x' and b' is formed by reversing digits in x and b;\n"}, "Heuristic": []}, {"nl": {"id": 4352, "comment": "// mask & (-mask) = 0...010...0, where the only 1 is the lowest 1 in mask\n"}, "Heuristic": []}, {"nl": {"id": 4352, "comment": "// Check whether the digit at the given index of the mask is '1'\n"}, "Heuristic": []}, {"nl": {"id": 4352, "comment": "//TODO add check for eof if necessary\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4353, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Alex\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4357, "comment": "/**\n * Codeforces Beta Round #10\n * \n * @author ProjectYoung\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4360, "comment": "// new Thread(null, new Template(), \"\", 1l * 200 * 1024 * 1024).start();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4362, "comment": "/*for (int i = 0; i < n; ++i)\n            for (int j = 0; j < n; ++j)\n                g[i][j] = true;*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 4363, "comment": "/**\n * 4 6\n * 1 2\n * 1 3\n * 1 4\n * 2 3\n * 2 4\n * 3 4\n *\n *\n *\n *\n *\n *\n * @author pttrung\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4363, "comment": "//        int N = 19;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4363, "comment": "//        System.out.println(N + \" \" + ((N - 1) * N / 2));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4363, "comment": "//        for (int i = 1; i\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4363, "comment": "//                <= N; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4363, "comment": "//            for (int j = i + 1; j <= N; j++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4363, "comment": "//                System.out.println(i + \" \" + j);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4363, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4363, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4363, "comment": "// System.setOut(new PrintStream(new BufferedOutputStream(System.out), true));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4364, "comment": "// ////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4364, "comment": "// Solution\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4364, "comment": "// ////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4364, "comment": "// Utility functions\n"}, "Heuristic": []}, {"nl": {"id": 4364, "comment": "//System.setIn(new FileInputStream(\"2\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4366, "comment": "// Check if i is in set\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4366, "comment": "//Count Cycles:\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4368, "comment": "/*************************************************************** \n\t * Test\n\t **************************************************************/"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4368, "comment": "/*************************************************************** \n\t * Utility\n\t **************************************************************/"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4368, "comment": "/*************************************************************** \n\t * Input \n\t **************************************************************/"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4368, "comment": "//\t\ttry {\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4368, "comment": "//\t\t\tif (new File(\"input.txt\").exists())\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4368, "comment": "//\t\t\t\tSystem.setIn(new FileInputStream(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4368, "comment": "//\t\t} catch (SecurityException e) {}\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4368, "comment": "//\t\tlong time1 = System.currentTimeMillis();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4368, "comment": "//\t\tcheckMemory();\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4368, "comment": "//\t\tlong time2 = System.currentTimeMillis();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4368, "comment": "//\t\tSystem.err.println((time2 - time1) + \" ms\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4368, "comment": "//\t\tfor (int v = 7; v <= 11; v++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4368, "comment": "//\t\t\tgenFullGraph(v);\n"}, "Heuristic": []}, {"nl": {"id": 4368, "comment": "//\t\t\tif (naiveDP() != optimizedDP())\n"}, "Heuristic": []}, {"nl": {"id": 4368, "comment": "//\t\t\t\tSystem.err.println(\"Error on \" + v);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4368, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4369, "comment": "/*System.out.println(\"Comb: \" + Integer.toBinaryString(baseCombination));\n\t\t\t\t\t\tSystem.out.println(\"Bit: \" + Integer.toBinaryString(firstBit));\n\t\t\t\t\t\tSystem.out.println(\"(pos): \" + firstBitPos);\n\t\t\t\t\t\tSystem.out.println(\"Left over: \" + Integer.toBinaryString(leftOverBits));\n\t\t\t\t\t\tSystem.out.println(\"Next bit: \" + Integer.toBinaryString(nextBit));\n\t\t\t\t\t\tSystem.out.println(\"(pos): \" + nextBitPos);\n\t\t\t\t\t\tSystem.out.println();*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 4369, "comment": "/*for (int i = 0; i < state.length; i++)\n\t\t{\n\t\t\tif ((i & (i - 1)) == 0)\n\t\t\t\tcontinue;\n\t\t\tSystem.out.print(String.format(\"%4s:\", Integer.toBinaryString(i)).replace(' ', '0') + \" \");\n\t\t\tfor (int j = 0; j < state[i].length; j++)\n\t\t\t\tSystem.out.print(state[i][j] + \" \");\n\t\t\tSystem.out.println();\n\t\t}*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 4371, "comment": "//Scanner skek = new Scanner(System.in);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4372, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 4373, "comment": "// ////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4373, "comment": "// Solution\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4373, "comment": "// ////////////////////////////////////////////////////////////////////\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4373, "comment": "// Utility functions\n"}, "Heuristic": []}, {"nl": {"id": 4373, "comment": "//System.setIn(new FileInputStream(\"2\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4374, "comment": "/************************ SOLUTION STARTS HERE ***********************/"}, "Heuristic": []}, {"nl": {"id": 4374, "comment": "/*memo[mask][u] = */"}, "Heuristic": ["H7"]}, {"nl": {"id": 4374, "comment": "/*\t\tfor(long l[] : DP)\n\t\t\tout.println(Arrays.toString(l));*/"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": 4374, "comment": "/************************ SOLUTION ENDS HERE ************************/"}, "Heuristic": []}, {"nl": {"id": 4374, "comment": "/************************ TEMPLATE STARTS HERE *********************/"}, "Heuristic": []}, {"nl": {"id": 4374, "comment": "/************************ TEMPLATE ENDS HERE ************************/"}, "Heuristic": []}, {"nl": {"id": 4374, "comment": "// according to our convention A simple path is not allowed to end at the lowest vertex\n"}, "Heuristic": []}, {"nl": {"id": 4374, "comment": "// System.out.printf(\"mask = %s , u = %d , v = %d\\n\" , Integer.toBinaryString(mask) , u , v);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4374, "comment": "// System.out.printf(\"mask = %s , u = %d , v = %d\\n\" , Integer.toBinaryString(mask) , u , v);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4376, "comment": "/**\n * Generated by Contest helper plug-in\n * Actual solution is at the bottom\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4379, "comment": "/**\n * Created by huhansan on 2017/12/19.\n * http://codeforces.com/problemset/problem/11/D\n * \u53c2\u8003 Petr http://codeforces.com/contest/11/submission/47646\n * \u6c42\u6240\u6709\u4e0d\u540c\u7684\u73af\u7684\u4e2a\u6570\n * \u9996\u5148\u6309\u957f\u5ea6\u5206 C = C1+C2+...+Cn\n * \u957f\u5ea6\u4e3ai\u7684\u73af\u7684\u6570\u91cf\u7684\u6c42\u89e3\uff0c \u89c4\u5b9a\u4e00\u4e2a\u987a\u5e8f\uff0c\u4ee5\u6700\u5c0f\u503c\u5f00\u5934\uff0c\u6309\u5f00\u5934\u4e0d\u540c\u5206\u6cbb\uff0c\u518d\u6309\u4e0d\u540c\u7ed3\u5c3e\u5206\u6cbb\n * \u904d\u5386\u6240\u6709\u6392\u5217\uff0c\u5982\u679c\u957f\u5ea6\u4e3ai\u7684\u6392\u5217\u6210\u73af\uff0c\u5219\u5bf9\u5e94\u7684Ci\u503c+1\n * \u904d\u5386\u65b9\u5f0f\u7684\u9009\u62e9\uff1a\n * 1.integer\u5b9e\u73b0bitmask\uff0c\u4ece1\u52a0\u52301<<n\n * 2.\u9012\u5f52\n */"}, "Heuristic": ["H2", "H9"]}, {"nl": {"id": 4379, "comment": "//codeforces.com/problemset/problem/11/D\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4379, "comment": "//codeforces.com/contest/11/submission/47646\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4379, "comment": "//ways[mask][endPointIndex]\n"}, "Heuristic": []}, {"nl": {"id": 4379, "comment": "//n \u8282\u70b9\u6570\uff0c m\u8fb9\u6570    00000...0  <--> n:n-1:n-2.....1 bitmask\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4379, "comment": "//\u521d\u59cb\u5316\uff0c\u5355\u5b9a\u70b9\u4e5f\u89c6\u4e3a\u73af\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4379, "comment": "// P[(1,2,3)4]\u7684\u6570\u91cf == \u5176\u5b83+P[1,2,3]\u7684\u6570\u91cf\uff0c \u4e5f\u5c31\u662f1,2,3\u4e09\u4e2a\u70b9\u53ef\u4ee5\u7ec4\u6210\u7684\u4ee51\u5f00\u5934\u7684\u6392\u5217\u6570\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4379, "comment": "//\u4ee5\u9996\u5c3e\u5b9a\u70b9\u5206\u6cbb\uff0c\u5b58\u5728\u5bf9\u79f0\u6027\uff0c\u5982 1-2-3-4-1 == 1-4-3-2-1\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4380, "comment": "// Cycle has\n"}, "Heuristic": []}, {"nl": {"id": 4380, "comment": "// atleast 3\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4380, "comment": "// node and 3\n"}, "Heuristic": []}, {"nl": {"id": 4380, "comment": "// edges\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4384, "comment": "// Time Complexity O(2 ^ n  * n ^ 2)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4385, "comment": "/*\n\n19 171\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n1 15\n1 16\n1 17\n1 18\n1 19\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n2 11\n2 12\n2 13\n2 14\n2 15\n2 16\n2 17\n2 18\n2 19\n3 4\n3 5\n3 6\n3 7\n3 8\n3 9\n3 10\n3 11\n3 12\n3 13\n3 14\n3 15\n3 16\n3 17\n3 18\n3 19\n4 5\n4 6\n4 7\n4 8\n4 9\n4 10\n4 11\n4 12\n4 13\n4 14\n4 15\n4 16\n4 17\n4 18\n4 19\n5 6\n5 7\n5 8\n5 9\n5 10\n5 11\n5 12\n5 13\n5 14\n5 15\n5 16\n5 17\n5 18\n5 19\n6 7\n6 8\n6 9\n6 10\n6 11\n6 12\n6 13\n6 14\n6 15\n6 16\n6 17\n6 18\n6 19\n7 8\n7 9\n7 10\n7 11\n7 12\n7 13\n7 14\n7 15\n7 16\n7 17\n7 18\n7 19\n8 9\n8 10\n8 11\n8 12\n8 13\n8 14\n8 15\n8 16\n8 17\n8 18\n8 19\n9 10\n9 11\n9 12\n9 13\n9 14\n9 15\n9 16\n9 17\n9 18\n9 19\n10 11\n10 12\n10 13\n10 14\n10 15\n10 16\n10 17\n10 18\n10 19\n11 12\n11 13\n11 14\n11 15\n11 16\n11 17\n11 18\n11 19\n12 13\n12 14\n12 15\n12 16\n12 17\n12 18\n12 19\n13 14\n13 15\n13 16\n13 17\n13 18\n13 19\n14 15\n14 16\n14 17\n14 18\n14 19\n15 16\n15 17\n15 18\n15 19\n16 17\n16 18\n16 19\n17 18\n17 19\n18 19\n\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 4386, "comment": "//package round11;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4386, "comment": "//\t\tint m = 19;\n"}, "Heuristic": []}, {"nl": {"id": 4386, "comment": "//\t\tStringBuilder sb = new StringBuilder();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4386, "comment": "//\t\tsb.append(m + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4386, "comment": "//\t\tsb.append((m*(m-1)/2) + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4386, "comment": "//\t\tfor(int i = 1;i <= m;i++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4386, "comment": "//\t\t\tfor(int j = i + 1;j <= m;j++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4386, "comment": "//\t\t\t\tsb.append(i + \" \" + j + \"\\n\");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4386, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4386, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4386, "comment": "//\t\t\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4386, "comment": "//\t\tin = new Scanner(new StringReader(sb.toString()));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4386, "comment": "//\t\tin = new Scanner(new StringReader(\"4 6 1 2 1 3 1 4 2 3 2 4 3 4\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4386, "comment": "//\t\tint n = in.nextInt();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4388, "comment": "//complexity = N * 2^(N + 1)\n"}, "Heuristic": []}, {"nl": {"id": 4390, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author ATailouloute\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4391, "comment": "/**\n\t * @param args\n\t */"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4391, "comment": "// System.out.println(i + \" \" + tmp);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4391, "comment": "// Scanner sc = new Scanner(new FileReader(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4392, "comment": "//       n = 19;?\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 4392, "comment": "//       for (int i = 0; i < n; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4392, "comment": "//       for (int j = 0; j < n; j++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4392, "comment": "//       adj[i][j] = true;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4392, "comment": "//       }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4392, "comment": "//       }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4394, "comment": "/**\n * Created by Tejas on 18-10-2018.\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4394, "comment": "// HW starting at pos first and ending at j.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4394, "comment": "//Calculating simple cycles\n"}, "Heuristic": []}, {"nl": {"id": 4396, "comment": "/**\n * 11D\n *\n * @author artyom\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4396, "comment": "// SOLUTION BEGINS\n"}, "Heuristic": []}, {"nl": {"id": 4396, "comment": "// the starting vertex of a Hamiltonian walk\n"}, "Heuristic": []}, {"nl": {"id": 4396, "comment": "// mask without vertex i\n"}, "Heuristic": []}, {"nl": {"id": 4396, "comment": "// SOLUTION ENDS\n"}, "Heuristic": []}, {"nl": {"id": 4396, "comment": "// We need at least 3 vertices for a cycle\n"}, "Heuristic": []}, {"nl": {"id": 4399, "comment": "/**\n     * if the rows are arranged in some permutation [p_1, p_2,...i,j,...p_n],\n     * 1!=i!=j!=n, minCost[i][j] is the min k for any permutation with i&j adjacent\n     **/"}, "Heuristic": ["H1"]}, {"nl": {"id": 4399, "comment": "/**\n     * minCostEndpoints[i][j] is the min k for any permutation such that\n     * the rows are arranged in some permutation [i, p_2, ... p_{n-1}, j],\n     **/"}, "Heuristic": ["H1"]}, {"nl": {"id": 4399, "comment": "/**\n     * Max k of a path over a subset of all rows ending at a certain vertex\n     * The first 16 bits of the key represent the subset. Node n is in the subset iff (x & (2 << n))!=0\n     * key/(1<<16) is the end vertex number\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4399, "comment": "//find the minimum cost starting at st, ending at end, and using only the rows in set\n"}, "Heuristic": []}, {"nl": {"id": 4400, "comment": "//System.out.println(ans);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4401, "comment": "//package ;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4402, "comment": "/*for (int i = 0; i <n ; i++) {\n            for (int j = 0; j <n ; j++) {\n                out.print(cost[i][j]+\" \");\n            }\n            out.println();\n        }\n        out.println();\n\n        for (int i = 0; i <n ; i++) {\n            for (int j = 0; j <n ; j++) {\n                out.print(costRight[i][j]+\" \");\n            }\n            out.println();\n        }*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 4402, "comment": "// out.println(f(i,i,1<<i,dp,n,cost,costRight));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4404, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4404, "comment": "//                dp[1 << j][j] = (j == i ? 0: Integer.MAX_VALUE );\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4404, "comment": "//        System.out.println(mask+\",\"+v);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4405, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4407, "comment": "// Standard IO\n"}, "Heuristic": []}, {"nl": {"id": 4407, "comment": "// File IO\n"}, "Heuristic": []}, {"nl": {"id": 4407, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 4407, "comment": "// TODO Auto-generated catch block\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 4409, "comment": "//@\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4409, "comment": "//#\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4409, "comment": "//$\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4410, "comment": "//        for(int i = 0; i < N; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4410, "comment": "//            Arrays.fill(distTop, Integer.MAX_VALUE);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4410, "comment": "//            Arrays.fill(distRow, Integer.MAX_VALUE);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4410, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4410, "comment": "//compute row distances\n"}, "Heuristic": []}, {"nl": {"id": 4410, "comment": "//compute bottom/top distances\n"}, "Heuristic": []}, {"nl": {"id": 4412, "comment": "// start vertex\n"}, "Heuristic": []}, {"nl": {"id": 4412, "comment": "// end vertex\n"}, "Heuristic": []}, {"nl": {"id": 4412, "comment": "// step from the last vertex to the first\n"}, "Heuristic": []}, {"nl": {"id": 4412, "comment": "//-----------MyScanner class for faster input----------\n"}, "Heuristic": []}, {"nl": {"id": 4414, "comment": "// if(i==3 && j==4) pw.println(a[i][k]+\" \"+a[j][k]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4414, "comment": "//if(m==1) mn2[i][j]=0;\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4414, "comment": "//  pw.println(mn1[3][4]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4414, "comment": "//   if(mn2[first][prev]==0)  pw.println(prev+\" \"+first+\" \"+mn2[first][prev]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4414, "comment": "//if(mn1[prev][k]==0)  pw.println(mn1[prev][k]+\" \"+prev+\" \"+k);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4414, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4416, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author beginner1010\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4416, "comment": "// mask == 0 should never happen\n"}, "Heuristic": []}, {"nl": {"id": 4417, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4418, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4419, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4422, "comment": "//\t\tprint(graphVerticial);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4422, "comment": "//\t\tSystem.out.println(\"##########################\");\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4422, "comment": "//\t\tprint(graphDiagonal);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4422, "comment": "//System.out.println(piso + \", \" + teto);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4422, "comment": "//System.out.println(origem + \", \" + destino);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4422, "comment": "//print(conjunto);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4422, "comment": "//\t\t\t\tif(graph[i][j] >= 3 ) System.out.print(\"1 \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4422, "comment": "//\t\t\t\telse System.out.print(\"0 \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4423, "comment": "// pr(j + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4423, "comment": "// pr(Integer.toBinaryString(i) + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4423, "comment": "// prln(l, max);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4423, "comment": "// prln(i, j, dp[i][(1 << n) - 1][j]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4423, "comment": "// references\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4423, "comment": "// IBIG = 1e9 + 7\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4423, "comment": "// IMAX ~= 2e9\n"}, "Heuristic": []}, {"nl": {"id": 4423, "comment": "// LMAX ~= 9e18\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4423, "comment": "// constants\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4423, "comment": "// math util\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4423, "comment": "// array util\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4423, "comment": "// input\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4423, "comment": "// output\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4424, "comment": "// check first and current\t\t\t\n"}, "Heuristic": []}, {"nl": {"id": 4424, "comment": "// i head , j tail\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4425, "comment": "// Don't place your source in a package\n"}, "Heuristic": []}, {"nl": {"id": 4425, "comment": "// Please name your class Main\n"}, "Heuristic": []}, {"nl": {"id": 4425, "comment": "//scanner from SecondThread\n"}, "Heuristic": []}, {"nl": {"id": 4425, "comment": "//different ordering pair\n"}, "Heuristic": []}, {"nl": {"id": 4425, "comment": "//System.out.println(i+\"  \"+j+\"  \"+mn);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4425, "comment": "//System.out.println(Integer.toBinaryString(state)+\"  \"+res);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4426, "comment": "/*\n      int n      = sc.nextInt();        // read input as integer\n      long k     = sc.nextLong();       // read input as long\n      double d   = sc.nextDouble();     // read input as double\n      String str = sc.next();           // read input as String\n      String s   = sc.nextLine();       // read whole line as String\n\n      int result = 3*n;\n      out.println(result);                    // print via PrintWriter\n      */"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 4426, "comment": "// out.println(bit + \" \" + j + \" \" + k + \" \" + dp[bit][j][k]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4426, "comment": "//   for(int i=0; i<n; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4426, "comment": "//       for(int j=0; j<n; j++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4426, "comment": "//           out.println(dp[power-1][i][j]+\" \"+edgeadj[i][j]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4426, "comment": "//       }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4426, "comment": "//   }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4426, "comment": "// Start writing your solution here. -------------------------------------\n"}, "Heuristic": []}, {"nl": {"id": 4426, "comment": "// read input as integer\n"}, "Heuristic": []}, {"nl": {"id": 4426, "comment": "// read input as long\n"}, "Heuristic": []}, {"nl": {"id": 4426, "comment": "// read input as double\n"}, "Heuristic": []}, {"nl": {"id": 4426, "comment": "// read input as String\n"}, "Heuristic": []}, {"nl": {"id": 4426, "comment": "// read whole line as String\n"}, "Heuristic": []}, {"nl": {"id": 4426, "comment": "// print via PrintWriter\n"}, "Heuristic": []}, {"nl": {"id": 4426, "comment": "// Stop writing your solution here. -------------------------------------\n"}, "Heuristic": []}, {"nl": {"id": 4426, "comment": "//-----------PrintWriter for faster output---------------------------------\n"}, "Heuristic": []}, {"nl": {"id": 4426, "comment": "//-----------MyScanner class for faster input----------\n"}, "Heuristic": []}, {"nl": {"id": 4426, "comment": "//--------------------------------------------------------\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4428, "comment": "//        writer.println(\"Pre array: \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4428, "comment": "//        for(int i=0;i<n;++i) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4428, "comment": "//            for(int j=0;j<n;++j) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4428, "comment": "//                writer.print(pre[i][j]+\" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4428, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4428, "comment": "//            writer.println();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4428, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4428, "comment": "//        writer.println(\"Pre stop and start array: \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4428, "comment": "//        for(int i=0;i<n;++i) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4428, "comment": "//            for(int j=0;j<n;++j) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4428, "comment": "//                if(j==i) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4428, "comment": "//                    writer.print(\"SKIP \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4428, "comment": "//                }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4428, "comment": "//                else writer.print(pre_stop_and_start[i][j]+\" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4428, "comment": "//            }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4428, "comment": "//            writer.println();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4428, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4429, "comment": "/*\nIf you want to aim high, aim high\nDon't let that studying and grades consume you\nJust live life young\n******************************\nWhat do you think? What do you think?\n1st on Billboard, what do you think of it\nNext is a Grammy, what do you think of it\nHowever you think, I\u2019m sorry, but shit, I have no fcking interest\n*******************************\nI'm standing on top of my Monopoly board\nThat means I'm on top of my game and it don't stop\ntil my hip don't hop anymore\nhttps://www.a2oj.com/Ladder16.html\n*******************************\n300IQ as writer = Sad!\n*/"}, "Heuristic": ["H2", "H7", "H9", "H12"]}, {"nl": {"id": 4429, "comment": "//www.a2oj.com/Ladder16.html\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4430, "comment": "// for(int i = 0; i < n; i++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "//     System.out.println(nm[i] + \" \" + pm[i]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4430, "comment": "// for(int x = 0; x < n; x++)System.out.println(gm[x]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "// System.out.println(u + \" \" + r + \" \" + mask);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "// System.out.println(u + \" \" + mask + \" \" + val);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "//         pair ja[][];long w[];int from[],to[],c[];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "//             void make(int n,int m,InputReader in){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "//              ja=new pair[n+1][];w=new long[m];from=new int[m];to=new int[m];c=new int[n+1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "//              for(int i=0;i<m;i++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "//               int u=in.nextInt(),v=in.nextInt();long wt=in.nextLong();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "//               c[u]++;c[v]++;from[i]=u;to[i]=v;w[i]=wt;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "//              }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "//              for(int i=1;i<=n;i++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "//               ja[i]=new pair[c[i]];c[i]=0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "//              }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "//              for(int i=0;i<m;i++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "//               ja[from[i]][c[from[i]]++]=new pair(to[i],w[i]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "//               ja[to[i]][c[to[i]]++]=new pair(from[i],w[i]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "//              }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "//             }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "//        int[] radixSort(int[] f){ return radixSort(f, f.length); }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "//    int[] radixSort(int[] f, int n)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "//    {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "//        int[] to = new int[n];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "//        {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "//            int[] b = new int[65537];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "//            for(int i = 0;i < n;i++)b[1+(f[i]&0xffff)]++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "//            for(int i = 1;i <= 65536;i++)b[i]+=b[i-1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "//            for(int i = 0;i < n;i++)to[b[f[i]&0xffff]++] = f[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "//            int[] d = f; f = to;to = d;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "//        {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "//            int[] b = new int[65537];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "//            for(int i = 0;i < n;i++)b[1+(f[i]>>>16)]++;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "//            for(int i = 1;i <= 65536;i++)b[i]+=b[i-1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "//            for(int i = 0;i < n;i++)to[b[f[i]>>>16]++] = f[i];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "//            int[] d = f; f = to;to = d;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "//        }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "//        return f;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4430, "comment": "//    }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4431, "comment": "/**\n * @author khokharnikunj8\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4432, "comment": "//iterate over every row\n"}, "Heuristic": []}, {"nl": {"id": 4434, "comment": "//certain ones have to be here\n"}, "Heuristic": []}, {"nl": {"id": 4434, "comment": "//move back the ones you can\n"}, "Heuristic": []}, {"nl": {"id": 4434, "comment": "//certain ones have to move on\n"}, "Heuristic": []}, {"nl": {"id": 4434, "comment": "//find which ones stay\n"}, "Heuristic": []}, {"nl": {"id": 4434, "comment": "//make sure that the ones that stay\n"}, "Heuristic": []}, {"nl": {"id": 4435, "comment": "/**\n * Created by IntelliJ IDEA.\n * User: piyushd\n * Date: 3/26/11\n * Time: 10:53 PM\n * To change this template use File | Settings | File Templates.\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4436, "comment": "/**\n * Author -\n * User: kansal\n * Date: 9/3/11\n * Time: 5:28 PM\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4437, "comment": "/**\n * Author -\n * User: kansal\n * Date: 9/3/11\n * Time: 5:28 PM\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4438, "comment": "/*\nIf you want to aim high, aim high\nDon't let that studying and grades consume you\nJust live life young\n******************************\nIf I'm the sun, you're the moon\nBecause when I go up, you go down\n*******************************\nI'm working for the day I will surpass you\nhttps://www.a2oj.com/Ladder16.html\n*/"}, "Heuristic": ["H2", "H7", "H9"]}, {"nl": {"id": 4438, "comment": "//www.a2oj.com/Ladder16.html\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4438, "comment": "//dp[c][m1][m2] = min spoders in first c columns\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4439, "comment": "//System.out.println(Integer.toBinaryString(mm)+\" \"+Integer.toBinaryString(mask));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4439, "comment": "// Now place a spider cluster here\n"}, "Heuristic": []}, {"nl": {"id": 4439, "comment": "// We have the option to skip here\n"}, "Heuristic": []}, {"nl": {"id": 4439, "comment": "//System.out.printf(\"%d %d %s = %d%n\", i, j, Integer.toBinaryString(mask), res);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4441, "comment": "/*(c) gorlum0 [at] gmail.com*/"}, "Heuristic": ["H7"]}, {"nl": {"id": 4441, "comment": "// ======================================================================\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4444, "comment": "/**\n * @author khokharnikunj8\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4445, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4446, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4447, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4449, "comment": "/**\n     * Bit operations\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4449, "comment": "/**\n         * Determine whether x is subset of y\n         */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4449, "comment": "/**\n         * Merge two set\n         */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4450, "comment": "//2^n * n^3\n"}, "Heuristic": []}, {"nl": {"id": 4451, "comment": "// BufferedReader in;\n"}, "Heuristic": []}, {"nl": {"id": 4451, "comment": "// long start = System.nanoTime();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4451, "comment": "// in = new BufferedReader(new FileReader(new File(\"input.txt\")));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4451, "comment": "// int[][] best = new int[1 << n][m];\n"}, "Heuristic": []}, {"nl": {"id": 4451, "comment": "// for (int i = 0; i < 1 << n; i++)\n"}, "Heuristic": []}, {"nl": {"id": 4451, "comment": "// {\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4451, "comment": "//     for (int e = 0; e < m; e++)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4451, "comment": "//     {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4451, "comment": "//         best[i][e] = best(i, mat, e);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4451, "comment": "//     }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4451, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4451, "comment": "// int[][] dp = new int[1 << n][m+1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4451, "comment": "// for (int i = 0; i < 1 << n; i++)\n"}, "Heuristic": []}, {"nl": {"id": 4451, "comment": "// {\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4451, "comment": "//     dp[i][m] = -1000000000;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4451, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4451, "comment": "// dp[(1 << n) - 1][m] = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4451, "comment": "// for (int i = m-1; i >= 0; i--)\n"}, "Heuristic": []}, {"nl": {"id": 4451, "comment": "// {\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4451, "comment": "//     for (int e = 0; e < 1 << n; e++)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4451, "comment": "//     {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4451, "comment": "//         dp[e][i] = dp[e][i+1];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4451, "comment": "//         int opposite = ~e & ((1 << n) - 1);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4451, "comment": "//         for (int w = opposite; w != 0; w = (w-1) & opposite)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4451, "comment": "//         {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4451, "comment": "//             dp[e][i] = Math.max(dp[e][i], best[w][i] + dp[e|w][i+1]);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4451, "comment": "//         }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4451, "comment": "//     }\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4451, "comment": "// }\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4451, "comment": "// out.println(dp[0][0]);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4451, "comment": "// out.printf(\"%.3f%n\", (System.nanoTime() - start) / 1000000.0);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4452, "comment": "/**\n * Built using CHelper plug-in Actual solution is at the top\n *\n * @author ilyakor\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4452, "comment": "// int n = 12;\n"}, "Heuristic": []}, {"nl": {"id": 4452, "comment": "// int m = 2000;\n"}, "Heuristic": []}, {"nl": {"id": 4452, "comment": "// a[j][i] = (int)((i * 12346L + j * 789L) % 100000);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4453, "comment": "/*input\n3\n2 3\n2 5 7\n4 2 4\n3 6\n4 1 5 2 10 4\n8 6 6 4 9 10\n5 4 9 5 8 7\n3 3\n9 9 9\n1 1 1\n1 1 1\n\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 4453, "comment": "// ret is not a reference\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4453, "comment": "// col, cyclic, mask\n"}, "Heuristic": []}, {"nl": {"id": 4454, "comment": "/**\n * @author khokharnikunj8\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4455, "comment": "//\u8f6c\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4456, "comment": "/**\n * BaZ :D\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4456, "comment": "//initIo(true);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4456, "comment": "//            pl(\"need : \"+need);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4456, "comment": "//            pa(\"Real\", real);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4456, "comment": "//pl(\"idx: \"+idx+\" bias : \"+bias + \" mask : \"+mask);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4456, "comment": "//didn't fix bias yet\n"}, "Heuristic": []}, {"nl": {"id": 4456, "comment": "//pl(\"maxxxxxxx : \"+max);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4456, "comment": "//pl(\"max : \"+max);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4457, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4458, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4459, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4460, "comment": "//stan hu tao\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4460, "comment": "//join nct ridin by first year culture reps\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4460, "comment": "//try all shifts\n"}, "Heuristic": []}, {"nl": {"id": 4461, "comment": "//\t\tint tests = 40;\n"}, "Heuristic": []}, {"nl": {"id": 4461, "comment": "//\t\t\tint n = 12, m = 2000, a[][] = new int[n][m];\n"}, "Heuristic": []}, {"nl": {"id": 4462, "comment": "//package round584;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4462, "comment": "// imp:12m\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4462, "comment": "//\t\tint n = 12, m = 2000;\n"}, "Heuristic": []}, {"nl": {"id": 4462, "comment": "//\t\tRandom gen = new Random();\n"}, "Heuristic": []}, {"nl": {"id": 4462, "comment": "//\t\tStringBuilder sb = new StringBuilder();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4462, "comment": "//\t\tsb.append(40 + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4462, "comment": "//\t\tfor(int rep = 0;rep < 40;rep++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4462, "comment": "//\t\t\tsb.append(n + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4462, "comment": "//\t\t\tsb.append(m + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4462, "comment": "//\t\t\tfor (int i = 0; i < n*m; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4462, "comment": "//\t\t\t\tsb.append(gen.nextInt(100000) + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4462, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4462, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4462, "comment": "//\t\tINPUT = sb.toString();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4462, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4463, "comment": "//all masks that don't intersect with maxRowMask\n"}, "Heuristic": []}, {"nl": {"id": 4464, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4465, "comment": "/**\n * @author khokharnikunj8\n */"}, "Heuristic": ["H2"]}, {"nl": {"id": 4468, "comment": "//package round584;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4468, "comment": "// imp:12m\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4468, "comment": "//\t\tint n = 12, m = 2000;\n"}, "Heuristic": []}, {"nl": {"id": 4468, "comment": "//\t\tRandom gen = new Random();\n"}, "Heuristic": []}, {"nl": {"id": 4468, "comment": "//\t\tStringBuilder sb = new StringBuilder();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4468, "comment": "//\t\tsb.append(40 + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4468, "comment": "//\t\tfor(int rep = 0;rep < 40;rep++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4468, "comment": "//\t\t\tsb.append(n + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4468, "comment": "//\t\t\tsb.append(m + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4468, "comment": "//\t\t\tfor (int i = 0; i < n*m; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4468, "comment": "//\t\t\t\tsb.append(gen.nextInt(100000) + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4468, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4468, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4468, "comment": "//\t\tINPUT = sb.toString();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4468, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4469, "comment": "//\u8f6c\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4470, "comment": "//package round584;\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4470, "comment": "//\t\tint n = 12, m = 2000;\n"}, "Heuristic": []}, {"nl": {"id": 4470, "comment": "//\t\tRandom gen = new Random();\n"}, "Heuristic": []}, {"nl": {"id": 4470, "comment": "//\t\tStringBuilder sb = new StringBuilder();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4470, "comment": "//\t\tsb.append(40 + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4470, "comment": "//\t\tfor(int rep = 0;rep < 40;rep++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4470, "comment": "//\t\t\tsb.append(n + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4470, "comment": "//\t\t\tsb.append(m + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4470, "comment": "//\t\t\tfor (int i = 0; i < n*m; i++) {\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4470, "comment": "//\t\t\t\tsb.append(gen.nextInt(100000) + \" \");\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4470, "comment": "//\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4470, "comment": "//\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4470, "comment": "//\t\tINPUT = sb.toString();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4470, "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4471, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4472, "comment": "//optimizaciones que parece que solo son necesarias para java\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4472, "comment": "//representantes de las clases\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4472, "comment": "// mapea para cada representante un indice de 0 a |clases|-1\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4472, "comment": "//mapea para cada mask, su clase\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4472, "comment": "//para cada clase, los masks compatibles\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4472, "comment": "//opt\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4472, "comment": "// el dp\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4473, "comment": "/*\n6\n2 2\n5 2\n1 5\n1 1\n3\n1 2\n1 1\n1 2\n1 1\n1 2\n2 3\n2 1\n1\n1\n\n*/"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": 4473, "comment": "// n = 12;\n"}, "Heuristic": []}, {"nl": {"id": 4473, "comment": "// m = 20000;\n"}, "Heuristic": []}, {"nl": {"id": 4473, "comment": "// mat[i][j] = 100000;\n"}, "Heuristic": []}, {"nl": {"id": 4473, "comment": "// long time = System.currentTimeMillis();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4473, "comment": "// for(int i = 0; i < guys.size(); i++) System.out.println(Arrays.toString(cost[i]));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4473, "comment": "// System.out.println(System.currentTimeMillis()-time);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4473, "comment": "// time = System.currentTimeMillis();\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4473, "comment": "// for(int i = 0; i < dp.length; i++) System.out.println(Arrays.toString(dp[i]));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4473, "comment": "// System.out.println(System.currentTimeMillis()-time);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4473, "comment": "// System.out.println(System.currentTimeMillis()-start);\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4474, "comment": "//        FastReader in = new FastReader(new FileInputStream(\"input.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4474, "comment": "//        PrintWriter out = new PrintWriter(new FileOutputStream(\"output.txt\"));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4475, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author beginner1010\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4476, "comment": "// Is your Fast I/O being bad?\n"}, "Heuristic": ["H12"]}, {"nl": {"id": 4477, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Jenish\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4478, "comment": "/*\nIf you want to aim high, aim high\nDon't let that studying and grades consume you\nJust live life young\n******************************\nIf I'm the sun, you're the moon\nBecause when I go up, you go down\n*******************************\nI'm working for the day I will surpass you\nhttps://www.a2oj.com/Ladder16.html\n*/"}, "Heuristic": ["H2", "H7", "H9"]}, {"nl": {"id": 4478, "comment": "//www.a2oj.com/Ladder16.html\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4479, "comment": "/**\n * BaZ :D\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4479, "comment": "//initIo(true);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4480, "comment": "/**\n     * Bit operations\n     */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4480, "comment": "/**\n         * Determine whether x is subset of y\n         */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4480, "comment": "/**\n         * Merge two set\n         */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4481, "comment": "//where's my 420??? :(\n"}, "Heuristic": ["H12"]}, {"nl": {"id": 4481, "comment": "//cost[mask][v] = numPairs with v for some all bits on in mask\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4482, "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"}, "Heuristic": ["H1"]}, {"nl": {"id": 4482, "comment": "//\t\tdbg(dp);\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4483, "comment": "//\u6700\u4f4e\u4f4d\u76841\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4485, "comment": "//where's my 420???? :(\n"}, "Heuristic": ["H12"]}, {"nl": {"id": 4485, "comment": "//cost[mask][v] = numPairs with v for some all bits on in mask\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4486, "comment": "// TODO Auto-generated method stub\n"}, "Heuristic": ["H1", "H5"]}, {"nl": {"id": 4486, "comment": "//\t \t\t\t\tfor(int t = 0;t<m;t++){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4486, "comment": "//\t \t\t\t\t\tif (t!= k){\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4486, "comment": "//\t\t \t\t\t\t\tif ((st[t]&j) != 0)\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4486, "comment": "//\t\t \t\t\t\t\t\tsum+=cnt[t][k];\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4486, "comment": "//\t\t \t\t\t\t\telse\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4486, "comment": "//\t\t \t\t\t\t\t\tsum-=cnt[t][k];\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4486, "comment": "//\t \t\t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4486, "comment": "//\t \t\t\t\t}\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4486, "comment": "//StringJoiner sj = new StringJoiner(\" \"); \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4486, "comment": "//sj.add(strings)\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4487, "comment": "//cost[mask][v] = numPairs with v for some all bits on in mask\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4488, "comment": "//where's my 420???? :(\n"}, "Heuristic": ["H12"]}, {"nl": {"id": 4488, "comment": "//cost[mask][v] = numPairs with v for some all bits on in mask\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4489, "comment": "//pre[child][head] - number of elemnts that exists in child and are adjacent to head in the string.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4489, "comment": "// dp[mask] - the minimum cost using a permutation of the set bits in the mask.\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4490, "comment": "//where's my 420???? :(\n"}, "Heuristic": ["H12"]}, {"nl": {"id": 4490, "comment": "//cost[mask][v] = numPairs with v for some all bits on in mask\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4493, "comment": "//static int MAXN = 300000;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4493, "comment": "//static int[] len = new int[300000];\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4493, "comment": "//static int[] price = new int[300000];\n"}, "Heuristic": []}, {"nl": {"id": 4493, "comment": "// dp[k][mask] = Accumulated cost of first K positions filled, mask position 1 letters are used\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4493, "comment": "// dp[0][0] = 0;\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4493, "comment": "// \n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4493, "comment": "// each bit mask\n"}, "Heuristic": []}, {"nl": {"id": 4493, "comment": "// computing first k position filled.\n"}, "Heuristic": []}, {"nl": {"id": 4493, "comment": "//out.println(Arrays.deepToString(dp));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4493, "comment": "// reading from standard in\n"}, "Heuristic": []}, {"nl": {"id": 4493, "comment": "// end of file\n"}, "Heuristic": []}, {"nl": {"id": 4496, "comment": "// practice with rainboy\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4498, "comment": "//\u7b2cj\u4e2a\u5b57\u6bcd\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4500, "comment": "//where's my 420???? :(\n"}, "Heuristic": ["H12"]}, {"nl": {"id": 4500, "comment": "//cost[mask][v] = numPairs with v for some all bits on in mask\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4502, "comment": "//dp[i]:= \u6587\u5b57\u5217i(\u3053\u306e\u4e2d\u306b\u540c\u4e00\u6587\u5b57\u306f\u542b\u307e\u308c\u306a\u3044)\u3092\u4f5c\u3063\u305f\u6642\u306e\u30b3\u30b9\u30c8\u306e\u6700\u5c0f\u5024\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4502, "comment": "//first\u3067\u6607\u9806\u306b\u30bd\u30fc\u30c8\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4502, "comment": "//return (first == p.first ? second - p.second : first - p.first) * -1; //first\u3067\u964d\u9806\u306b\u30bd\u30fc\u30c8\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 4502, "comment": "//return second == p.second ? first - p.first : second - p.second;//second\u3067\u6607\u9806\u306b\u30bd\u30fc\u30c8\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 4502, "comment": "//return (second == p.second ? first - p.first : second - p.second)*-1;//second\u3067\u964d\u9806\u306b\u30bd\u30fc\u30c8\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 4502, "comment": "//return first * 1.0 / second > p.first * 1.0 / p.second ? 1 : -1; // first/second\u306e\u6607\u9806\u306b\u30bd\u30fc\u30c8\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 4502, "comment": "//return first * 1.0 / second < p.first * 1.0 / p.second ? 1 : -1; // first/second\u306e\u964d\u9806\u306b\u30bd\u30fc\u30c8\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 4502, "comment": "//return second * 1.0 / first > p.second * 1.0 / p.first ? 1 : -1; // second/first\u306e\u6607\u9806\u306b\u30bd\u30fc\u30c8\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 4502, "comment": "//return second * 1.0 / first < p.second * 1.0 / p.first ? 1 : -1; // second/first\u306e\u964d\u9806\u306b\u30bd\u30fc\u30c8\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 4502, "comment": "//return Math.atan2(second, first) > Math.atan2(p.second, p.first) ? 1 : -1; // second/first\u306e\u6607\u9806\u306b\u30bd\u30fc\u30c8\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 4502, "comment": "//return first + second > p.first + p.second ? 1 : -1; //first+second\u306e\u6607\u9806\u306b\u30bd\u30fc\u30c8\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 4502, "comment": "//return first + second < p.first + p.second ? 1 : -1; //first+second\u306e\u964d\u9806\u306b\u30bd\u30fc\u30c8\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 4502, "comment": "//return first - second < p.first - p.second ? 1 : -1; //first-second\u306e\u964d\u9806\u306b\u30bd\u30fc\u30c8\n"}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": 4503, "comment": "//System.out.println(\"Process Input: \" + (System.currentTimeMillis() - time));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4503, "comment": "//System.out.println(\"Precomp: \" + (System.currentTimeMillis() - time));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4503, "comment": "// loop on the last added character in the mask\n"}, "Heuristic": []}, {"nl": {"id": 4503, "comment": "//System.out.println(\"Done: \" + (System.currentTimeMillis() - time));\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4503, "comment": "//-----------MyScanner class for faster input----------\n"}, "Heuristic": []}, {"nl": {"id": 4504, "comment": "//where's my 420???? :(\n"}, "Heuristic": ["H12"]}, {"nl": {"id": 4504, "comment": "//cost[mask][v] = numPairs with v for some all bits on in mask\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4505, "comment": "/*********************************************************************************************************************************************************************************************************\n\t * ti;.                               .:,:i:         :,;;itt;.        fDDEDDEEEEEEKEEEEEKEEEEEEEEEEEEEEEEE###WKKKKKKKKKKKKKKKKKKKKWWWWWWWWWWWWWWWWWWW#WWWWWKKKKKEE      :,:.    f::::. .,ijLGDDDDDDDEEEEEEE*\n\t *ti;.                               .:,:i:          .:,;itt;:      GLDEEGEEEEEEEEEEEEEEEEEEDEEEEEEEEEEE#W#WEKKKKKKKKKKKKKKKKKKKKKKKWWWWWWWWWWWWWWWWWWWWWWKKKKKKG.     .::.      f:,...,ijLGDDDDDDDDEEEEEE *\n\t *ti;.                               .:,:i:            :,;;iti,    :fDDEEEEEEEEEEEEEEEKEEEEDEEEEEEEEEEEW##WEEEKKKKKKKKKKKKKKKKKKKKKWWWWWWWWWWWWWWWWWWWWWWWKKKKKKEG     .::.       .f,::,ijLGDDDDDDDDEEEEEE *\n\t *ti;.                               .:,:i:             .,,;iti;.  LDDEEEEEEEEEEKEEEEWEEEDDEEEEEEEEEEE#WWWEEEEEKKKKKKKKKKKKKKKKKKKKKKKKKWWWWWWWWWWWWWWWWWWWKKKKKEDj    .::.        .:L;;ijfGDDDDDDDDDEEEEE *\n\t *ti;.                               .:,:i:              .:,;;iii:LLDEEEEEEEEEEEKEEEEEEEEDEEEEEEEEEEEW#WWEEEEEEEKKKKKKKKKKKKKKKKKKKKKKKKKWWKWWWWWWWWWWWWWWKKKKKKKEL    .::.         .:;LijLGGDDDDDDDDEEEEE *\n\t *ti;.                               .:,:;:                :,;;ittfDEEEEEEEEEEEEEEEEKEEEGEEEEEEEEEEEKWWWEEEEEEEEEKKKKKKKKKKKKKKKKKKKKKKKKKKWWWWWWWWWWWWWWWKKKKKKKELj   .::.          :,;jffGGDDDDDDDDDEEEE *\n\t *ti;.                               .:,:i:                 .,;;tGGDEEEEEEEEEEEKEEEKEEEDEEEEEEEEEEEEWWWEEEEEEEEEEEEKKKKKKKKKKKKKKKKKKKKKKKKKKWWWWWWKWWWWWWKKKKKKKEEL   .::.          .:;itDGGDDDDDDDDDEEEE *\n\t *ti;.                               .:::;:                   :;ifDEEEEEEEEEEEEKEEEKEEEEEEEEEEEEEEEWWWEEEEEEEEEEEEEEKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKW#WWWKKKKKKKKEEf   .::.           :,itfGEDDDDDDDDDDDEE *\n\t *ti;.                               .:::;:                    :GGEEEEEEEEEEEKEKEEKEEEEEEEEEEEEEEEEWWEEEEEEEEEEEEEEEEEKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKW#WKKKKKKKKKEEDG  .::.           .,;jfLGKDLDDDDDDEEDD *\n\t *ti;.                               .:::;:                     fDEEEEEEKKKKKKKKKEKEEEEEEEEEEEEEEE#WEEEEEEEEEEEEEEEEEEKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKW#KKKKKKKKKKEEf .:::.           .,;tfLGDEDDDDDDDDEEE *\n\t *ti;.                                :::;:                    fDEEEEEEKKKKKKKKKKWKEEEEEEEEEEEEEEEWKEEEEEEEEEEEEEEEEEEEEKEKKKKKKKKKKKKKKKKKKKKKKKKKKKKW##KKKKKKKKKEEft :::.           .,;tfLGDDDKDDDDDDDDD *\n\t *ti;.                                .::;:                    fDEEEEEEKKKKKKKWKKKKKEEEEEEEEEEEEE#WEEWEEEEEDEEDEEEEEEEEEEEEKKKKKKKKKKKKKKKKKKKKKKKKKKKKW#WKKKKKKKKEEGG :,:.           .,;tfLGGDDDKDDDDDDDD *\n\t *ti;.                                .:.;:                   tGDEEEEKKKKKKKKKKKKKKKKKEEEEEEEEEEEWEEKWEEEEEEEDEEEEEEEEEEEEEEKEKKKKKKKKKKKKKKKKKKKKKKKKKKWWWKKKKKKKEEDf :::.           .,;tfLGGDDDDEDDDDDDD *\n\t *ti;.                                .::;:                   fDEEEEEKKKKKKKKKKKWKKKKKKKKEEEEEEEWWEEWEEEEEEEEEEEEEEEEEEEEEEEEEEKKKKKKKKKKKKKKKKKKKKKKKKKW##KKKKKKKEEEft.::.           .,;tfLGGDDDDDDEDDDDD *\n\t *ti;.                                .:.;:                  tGDEEEKKKKKKKKKKKKKKKKKKKKKKEKEEEEE#EEWWEEEEEEEEEEEEEEEEEEEEEEEEEEEEKKKKKKKKKKKKKKKKKKKKKKKKW#WKKKKKKEEEGD:::.           .,;tfLGGDDDDDDDEDDDD *\n\t *ti;.                                .:.,.                  LDEEEEKKKKKKKKKKWKWKKKKKKKKKKKKEEEKWEKW#EEEEEEEEEEEEEEEEKEEEEEEEEEEEEEEEKKKKKKKKKKKKKKKKKKKKW##KKKKKKEEEEf,,:.           .,;tfLGGDDDDDDDDEDDD *\n\t *ti;.                               ..:.,.                 LGDEEEEKKKKKKKKKKWKKKKKKKKKKKKKKKKKWEEW#WEEEEEEEEEEEEEEEKEEEEEEEEEEEEEEEEEEEKEKKKKKKKKKKKKKKKK##KKKKKEEEEEfi;,.           .,;tfLGGDDDDDDDDDKDD *\n\t *tt;.                                .:.,:                 jDEEEEKKKKKKKKKKWWKKKKKKKKKKKKKKKKKWKE#WWEEEEEEEEEEEEEEWEEEEEEEEEEEEEEEEEEEEEEEKKKKKKKKKKKKKKKKWWKKKKEEEEDfG;,:           .,;tfLGGDDDDDDDDDDKD *\n\t *tii,.                               .:.,.                tGDEEEEKKKKKKKKKKWWWKKKKKKKKKKKKKKKWKKWWWKEEEEEEEEEEEEEKEEEEEEEEEEEEEEEEEEEEEEEEEEEEEKKKKKKKKKKKW#KKKKEEEEDGGi;,.          .,;tfLGGDDDDDDDDDDDE *\n\t *ti;;,:.                             .:.,:                fDEEEEKKKKKKKKKKKWKKKKKKKKKKKKKKKKKWEK#WWKEEEEEEEEEEEEDEEEEEEEEEEEEEEGEEEEEEEEEEEEEEEEEEEKKKKKKKWWKKEEEEEEDDf;;;,.         .,;tfLGGDDDDDDDDDDDD *\n\t *tii;,,:..                           ...,.               ;LEEEEEKKKKKKWKKKKWKKKKKKKKKKKKKKKKKEKKW#WEEEEEEEEEEEEEjEEEEEEEEEKEEEEGEEEEEEEEEKEEEEEEEEEEEEEEEEE#WKEEEEEEDDf;;;;,:        .,itfLGGDDDDDDDDDDDD *\n\t *ti;,,,,,:.                          ...,.               LDEEEEKKKKKKKKKKKWWWKKKKKKKKKKKKKKKWKK#W#WEEEEEEEEEEEDDLEEEEEEEEEWEEEEDEEEEEEEEEKEEEEEEEEEEEEEEEEEWWEEEEEEEDDfj,,,,,:.      .,itfGGGDDDDDDDDDDDD *\n\t *tii,,,,::::.                        ...,:              .fDEEEEKKKKKKWKKKKWWWKKKKKKKKKKKKKKKEKKW#WWEEEEEEEEEEEKiKEEKEEEEEEWEEEEDEEEEEEEEEEEEEEEEEEEEEEEEEEEWWEEEEEEEDDLD:::,,,:.     .,ijfGGGDDDDDDDDDDDD *\n\t *ti;:::::::::..                      .:.,:              LDEEEEKKKKKKKWKKKKWWKKKKKKKKKKKKKKKKtKKWWWWKEEEEEEEEEDiiDEEEEEEEEWWEEEEEEDEEEEEEEEEEEEEEEEEEEEEEEEEEWKEEEEEDDDGL:. .:,,,:    .,ijLGGGDDDDDDDDDDDD *\n\t *tt;. .::::::::..                    ...,:             :fDEEEKKKKKKKKKKKKWW#KKKKKKKKKKKKKKKKfKKWWWWKEEEEEEEEDti,DEKEEEEEEWWEEEDEEEEEEEEEKEEEEEEEEEEEEEDEEEEE#WEEEEEGGDGf:.  .:,;,:.  .,ijLGGDDDDDDDDDDDDD *\n\t *tt;.   .:::::::..                   ...,:             GDEEEKKKKKKKKWKKKKWWWKKKWKKKKKKKWWWKDEKLWWWWKKEEEEEEDEi,LDEEEEEEEEWWEEEEEEEEEEEEEEEEEEEEEEEEEDEDEEEEEW#EEEEDDDDGf,.    :,,,:...,ijLGGGDDDDDDDDDDDD *\n\t *tt;.    .....::::..                 ...,:             fDEEEKKKKKKKKWKKKKWWWWKKKWKKKKKKKKKKfWKiWWW#KKEEEEEEEi;.EDfEEEDEEiWWEEEEEEEEEEEEDGKEEEEEEEEEEDEEEEEEEWWEEEEDDDGGLi.     .,;,:::,ijLGGGDDDDDDDDDDDD *\n\t *tt;.      ....:::::.                ...,.            iDEEEEKKKKKKKKWKKWKWWWWWKKWWWKKKKKKKKtWKt#WWWKKEEEEEDji..DDKDDEDEGiWKEEEEEEEEEEDDEjEEEEEEEEEEEDEEEEEEEKWKEEDDDDGGff.      .:,;,,;ijLGGGDDDDDDDDDDDD *\n\t *tt;.        ....::::..              .:.,:           .LDEEEKKKKKKKKKKKKWWWWKWWWWWWWWWWKKKKWtKKiDWWWKKKEEEEKi:..DEDDDDDDiiWKEEEEEEEEEEDDEijDEEEEEKEEEEEEEEEEEEWWEEGDDDGGLG.       .:,;;iijLGGGDDDDDDDDDDDD *\n\t *tt;.          .....:::..            ...,.           .fEEEEKKKKKKKKWKKKKWWWWWWWWWWWWWWKWKKKiKDiLWWWWKEEEEEi,..fD:DDDDDti;WEEEEEEEEEEKDDi:iDDEEEEWEEEEEEEEEEEE#WEEGDDDDGGG.         :,iitjLGGGDDDDDDDDDDDD *\n\t *tti.            .....:::..          ...,.           GDEEEKKKKKKKKKWKKKWWW#WWWWWWWWWWWKWKKjiEjitWWWKKWEEEDi...DDLDDDDji;;WEEEEEEEEEEEDEj.iDDEEEEWEEEEEEEEEEEEWWEEDDDDDDGf.          .,;tjfLGGDDDDDDDDDDDD *\n\t *tti.              ....::::..        ...,.           fEEEKKKKKKKKKKKKKKKW#WWWWWWWWWWWWWWWWtiEiiiWWWKKEWKEi....D.EDDDEi;.fWEEEEEEEEEEDDfL.;EDDEEEWEEEEEEEEEEEEWWEEEDDDDDGf.           :;ijfLGGDDDDDDDDDDDD *\n\t *tti.                ....::::..      ...,.          LDEEEKKKKKKKKKKKKKKWWWWWWWWWWWWWWWW####WKiiiWWWKKKEEK,...:E:DDDEii..GWEEEEEEEEDWDDiL.,KDDEEEWEEEEEEEEEEEEWWKEEDDDDDGf:           .,itfLGGDDDDDDDDDDDD *\n\t *tti.                 .....:::..     ...,.          fDEEEKKKKKKKKKWKKKKWWWWWWWWWWWWW########WLiiWWWKKKEEjD...G,DDDDi;...EWEEEEEEEEDKDEii..LDDEEEWEEEEEEEEEEEEWWWEEDDDDDGfi           .,;tfLGGGDDDDDDDDDDD *\n\t *tti.                   .....:::..   ...,.         iGEEEKKKKKKKKKKWKKKKWWWWWWWWWWWW###########KiWWWKKEEE,.D..D.DDDii:...KKEEEEEEEEEDDj:...tEDEEEWEEEEEEEEEEEEWWWEEEDDDDDLL           .,;tjLLGGDDDDDDDDDDD *\n\t *tti.                     ....::::......:.         LEEEKKKKKKKKKKWWKKKWWW#KWWWWWWWW#####W####W##KWWKKEEL..:D.jjDDi;,....KKEEEEEEEDfDDi...:iKDEEEWKEEEEEEEEEEEWWWEEEEDDDDLG           .,;tjLLGGDDDDDDDDDDD *\n\t *tti.                        ...::::::..,.        :GEEEKKKKKKKKKKKKWWWWW##WWWWWWWWW##WKWK#W#W####WWKEEK.....G.DDti,.....KKEEEEEEDWGDf.,...iKDEEEWWEEEEEEEEEEEW#WEEEEEDDDGL           .,;tjLLGGDDDDDDDDDDD *\n\t *tti.                         ....::::::,.        GDEEKKKKKKKKKKKKKWWWW###WWWWWWWWWW#WWWK###W#####WKEKK.....jDDL;;......KKEEEEEEEEEDi.f...;KDEEEWWEEEEEEEEEEEWWWWEEEEEDDGf           .,;tjLLGGDDDDDDDDDDD *\n\t *tti.                           ....:::,,.       .LEEEKKKKKWKKKKKWWWWWW###WWWWWWWWWW#WWKW#WW##W#WWWKEKD:....:DD:;......;KEEEEEEEKiDD..f...,KKEEEWWEEEEEEEEEEEWWWWEEEEEDDDf           .:;tjLLGGGDDDDDDDDDD *\n\t *tti.                             ...::,,,:.     GDEEKKKKKKKKKKKKWWWWWWW#WWWWWWWWWWW#KjKWWWWWWWWWWWWEK.j,..;fD.;.......fKEEEEEDKG:Di..,....DKEEEWWEEEEEEKEKKKWWWWEEEEEEDDf           .:;tjLLGGDDDDDDDDDDD *\n\t *jti.                              ...::,,,,:.  .fEEEKKKKKWKKKKKKWWWWWWW#WWWWWWWWWWK#KKKWWWWWWWWWWWWWK..f:.:G.,:.......EKEEEEEKK;:E:.......fKEEEWWKEKEKKKKKKKW#WWEEEEEEDDf:          .,;tfLLGGDDDDDDDDDDD *\n\t *tti.                               ...:,,,;;,: iDEEKKKKKWKKKKKKKWWWWWWW#WWWWWWWWWWK#WDKWWKKWWWWWWWWWE..;G:G..,........KKEEEEEKi.Gi..:.....tKEEKWWWKKKKKKKKKKW##WKEEEEEEDfi          .,;tfLLGGGDDDDDDDDDD *\n\t *tti.                               ....::,,;;;,LEEKKKKKKWKKKKKWWWWWWW###WWWWWWWWWWKWWDKWEEEWKKWWWWWKKj.:LG..;.........EKEEEEKG;.G...;.....;KKEKWWWKKKKKKKKKKW##WWKEEEEEDfL          .,;tfLGGGDDDDDDDDDDD *\n\t *jti.                                ...::::,;ijDEEKKKKKWKKKKKKWKWWWWW##WWWWWWWWWWWKK#KKGDGDWEEWKKWKKGE,.i;.:.........:EKEEEKE;.:L...j.....,KWEKWWWKKKKKKKKKK####WKKEEEEDLG          .,;tfLGGGGDDDDDDDDDD *\n\t *jti.                                ...:...,,;GEEKKKKKWWKKKKKWWWWWWWW###WWWWWWWWWKKKWWKiLGGEDEDEKGKKiEG..;...........jKEEEKK;:.G....,.....:KKEWWWWKKKKKKKWKK####WKKKKEEEGL          .,;tfLGGGGDDDDDDDDDD *\n\t *jti.                                ...:.  .:,GEEKKKKKWKKKKKWWWWWWWW####WWWWWWWWWKKKWWKii;fDLGDK: EEi:E:.............EKEEKK;;..L...........KKKWWWWKKKKKKKWKK####WKKKWKEEDf          .,;tfGGGGDDDDDDDDDDD *\n\t *jti.                                ...:.    ,EEKKKKKWWKKKKKWWWWWWWWW###WWWWWWWWKKKKfWWLt;i,. fi  EG..D:.............EKEKK;;..t....:.......KWKWWWWKKKKKKKWKK####WKKKWEEEDf:.        .,;tfGGGGDDDDDDDDDDD *\n\t *jti.                                ...:.    GEEKKKKKWKKKKKWWWWWWWWW####WWWWWWWKKKKKt;KKEfff     .;t.................KKKKi;:..GtGGfG.......KWWWWWWKKKKKKKWKK###WWWKKKKEEEf,,:       .,;tfGGGGDDDDDDDDDDD *\n\t *jti.                                ...:.    GEKKKKKWWKKKKKWWWWWWWWWW##WWWWWWWKKKKKKt;EiKKKK,   ...t................jEKKG;;..,.....,LGi....KWWWWWWKKKKKKWKKKW####WKKKKKEEL,,,:.     .,;tfGGGDDDDDDDDDDDD *\n\t *jti.                                ...:.  .GEEKKKKKWKKKKKWWWWWWWWWW###WWWWWWWKKKKKKtiE::tGG........................EEEj;;...,.........:D..DKWWWWWWKKKKK#KKW###W#WKKKKKEEfj:,,,:.   .,;tfGGGDDDDDDDDDDDD *\n\t *jti.                                ...:.   DEKKKKKWWKKKKKWWWWWWWWW####WWWWWWWKKKKKKiiE:::.::.......................EEi;;...j.....f......:iDKWWWWWWKKKKK#WW######WKKKKKEELG :,,,,:. .,;tfGGGDDDDDDDDDDDD *\n\t *jti.                                ...:.  fEEKKKKWWKKKKWWWWWWWWWWW###WWWWWWWWKKKKKK;tE::..........................DD;.;,.::......;........EWWWWWWWKKKKW#WW#####WWKKKWKKELG  .:,,,:::,;tfGGGDDDDDDDDDDDD *\n\t *jti.                                ...:. .DEKEKKKWWKKKKWWWWWWWWWWW###WWWWWWWWKKKKKE,iD::..........................D..,;.,;tLffi...........DWDWWWW#KKKWWWWW#####W#KKKWKEEGL    .:,;,,,;tfGGGDDDDDDDDDDDD *\n\t *jti.                                ...:. ;EEKKKKWWKKKKKWWWWWW#WWWW####WWWWWWKKKKKEL:iD:..........................j ..;..;;:.....i,........DKtWWWWWKKWWWWWW#####WWWKKKEKEDf     .:,;;;itfGGGDDDDDDDDDDDD *\n\t *jti.                                ...:. DEKKKKKWWKKKKWWWWWWW#WWWW####WWWWWWKKKKKEj:iG...............................:....................GKiWWWWWKKWW#WWW######WWKKKKKEEf       .,;iitfGGGDDDDDDDDDDDD *\n\t *jti.                                ...:.:EKKKKKWWKKKKKWWWWWWW#WWW#####WWWWWKWKKKKEi:if:.................................iEKEKKKKKKDj......DKiWWWWWKWK##WW#######WWKKK:KEEL        .:;itfGGGDDDDDDDDDDDD *\n\t *jji.                                ...:,DEEKKKWWWKWKKWWWWWWWWWWWW#####WWWWWWWKKKKEi:it..................................j.  KKKKKKKKKKKf..DKiWWWWWKWW##WW#######WWKKK,KEEf         .,;tfGGGDDDDDDDDDDDD *\n\t *jji.                                ..L:iDEEKKKWWKKKKKWWWWWWWWWWWW#####WWWWWKWKKKKKi.i;..................................  . KKKWWWWWWWWK..DGiWWWWWKK##WWW#####W#WWKKKjEKEL,        .:;tfGGGDDDDDDDDDDDD *\n\t *jji.                               .f:::EEEKKKWWWKKKKKWWWWWWWWWWWW#####WWWWWKWKKKKK;.i,.................................::  KKEKWWWWWWfWK..EiiWWWWWKWW#WW##########KKKD,KELj        .:;tfGGDDDDDDDDDDDDD *\n\t *jji.                             .t::::,DEEKKKWWKKKKWWWWWWWWW#WWWW#####WWWWKKWKKKEK;.i:.................................GDDEEEKKKWWWWWtWWD.E;iWWWWWW###WW#########WWKKK.EEDG        .:;tfGGGDDDDDDDDDDDD *\n\t *jji.                          . j..::::EKEKKKWWWKKKKWWWWWWWWW#WWW######WWWWKKWKKKEK;.t:.................................ELLEDDEEEWWWWEtWK,.KiiWWWWWW###W##########WWKKK:EEEG     .;tjfLLGDDDDDDDDDDDDDDD *\n\t *jji.                          i.::::::,EEEKKWWWKKKKKWWWWWWWWW#WWW#####WWWWWKWKKKKEE,.t..................................DfiEGDDDEEKKKttKWG.KiiWWWWW##WWW##########WWKKK:fEEL  ,fGGGDDDDDDDDEEEDDDDDDDDDD *\n\t *jji.                        .;:..:::::DEEEKKWWWKKKKKWWWWWWWWW#WWWW####WWWWWWWKKKKED,.t..................................ifjDDGGEGDKK.ttKKE.DiWWWWW###WW##########WWWKKK:.KELiLGGGGDDDDDDDDDDDDEEEDDDDDDD *\n\t *jji.                       i.:.::::::,KEEKKWWWKKKKKKWWWWWWWWW#WWWW####WWWWWWWKKKKEL:.j..................................GGf,;ifLLED .iiKKi:fWWWWWW##W#W##########WWWKKK:.KKLGGDDDDDDDDDDDDDDDDEDDEEDDDDD *\n\t *jji.                     .j:.::::::::EEEKKKWWWKKKKKKWWWWWWWW##WWW#####WWWWWWWKKKKKf:.f..................................:EEfftf .,. ;iE,..jWWWWWWW###W############WWKKK,:KKGDDDDDDDDDDDDDDDDDDDDDDDEDDDD *\n\t *jji.                    .:.::::::::,,EEEKKWWWKKKKKKKWWWWWWWW##WWW#####WWWWWWWKKKKKt..G....................................EEELL;   .j....tKWWWWWWW################WWWKKtfGKGEDDDDDDDDDDDDDDDDDDDDDDDEEDD *\n\t *jji.                   :...:::::::,,jEEKKWWWWKKKKKKWWWWWWWWW##KWW#####KWWWWWWKKKKEi..D....................................:jEEE.........;KKWWWWWWWW#WW##W##########WWKKDLGKEKDDDDDDDDDDDDDDDDDDDDDDDDDED *\n\t *jji.                  i:.::::::::,,,EEEKKWWWWKKKKKWWWWWWWWWW##WWW#####WWWWWWWKKKKKi..D......................................:::::......,KKKWWWWWWWWW#####W########WWWKKKGGKKEGGGGGGGGDDDDDDDDDDDDDDDDDDE *\n\t *jji.                 i..:::::::::,,tEEKKWWWWKKKKKWWWWWWWWWWW##WW######WWWWWWWKKKKKi..D......................................::::......:EKKKWWWWWWWWWWW##WW########W#WKKWGGKKGGGGGGGGGGGGGGGDDDDDDDDDDDDD *\n\t *jji.                .:::::::::::,,,EEEKKWWWWKKKKKWWWWWWWWWWW##WW#####WWWWWWWWKKKKKi..D....................................:::::::::..tELii;KWWWWWWWWWW##WW######WWWWWWKWGGGKGGGGGGGGGGGGGGGGGGGGGGGGGGDG *\n\t *jjt.                :.::::::::,,,,fEEKKWWWWKKKKKKWWWWWWWWWW###WW####WWWWWWW#WKKKKKi..D....................................:::::::.:.,;;;;;;,KKWWWWWWWWW#WW########WWWKKWGGGKGGGGGGGGGGGGGGGGGGGGGGGGGGGG *\n\t *jji.               ;.::::::::,,,,;EEEKWWWWWKKKKKWWWWWWWWWWWW##WW###WKWWWWWK#WKKKKKi..G......................................:::::::,;;;;:...KKKWWWWWWWWWKWW#######WWWWKKGLGKDGGGGGGLLGGGGGGGGGGGGGGGGGGG *\n\t *jjt.              f.:::::::::,,,,fEEKKWWWWWKKKKKWWWWWWWWWWW###WW##WKKWWWWWW#WKKKKK;.jt........i.............................:::::::;j;;....:E.KKKWWWWWWWKWW#####W#WWWWKKLLGWEEGGGGGLGGGGGGGGGGGGGGGGGGGG *\n\t *jjt.             ...:::::::,,,,,;DEEKWWWWWKKKKKWWWWWWWWWWWW####WWWKKKWWWWWWWWKKKKK;.E;.........t.............................:::::ii;;.....D...KKWWWWWWWKWW#####WWEWWWKKGGGEKKGGGGGLGGGGGGGGGGGGGLGGGGGG *\n\t *fji.             ;.:::::::,,,,,;LEEKKWWWWWKKKKKWWWWWWWWWWWW####KWKKKKWWWWWWWWKKKKKi.D;..........j.............................:::tt;,.....:.....KKWWWWWWKWWWW##WWWGWWWKKGGGGKEGGGGGGGGGGGGGGGGGGGLLGGGGL *\n\t *fji.            t::::::::,,,,,,;EEEKWWWWWKKKKKKKWWWWWWWWWWW##WKWKKKKKWWWWWWWWKKKKKi:D;............j...........................::LL;,.............KKWWWWWKWWWWWWWWWGWWWKKGGGGKGGGGGGGGGGGGGGGGGGGGLLGGGGL *\n\t *fjt:            .:::::::,,,,,,,DEEKWWWWWWKKKKKKKWWWWWWWWWWWWKKWKKKKKKWWWWK#WWKKKKWitE;........... ............................:G;;:...............KKKWWKKWWWWWWWWWGWWWKKGGGGWGGGGGGGGGGGGGGGGGGGGGGGGGGL *\n\t *fjji;:.       .f:::::::,,,,,,,;EEEKWWWWWWKKKKKKWWWWWWWWWWWKKKKKKKKKKKWWKWWWWWKKKKWGKD;........................................L;;..................DKKWKKWWWWWWWWWGWWWKKDGGGKDGGGGGGGGGGGGGGGGGGGGGGGGGG *\n\t *fjjtii;,:.     :::::::,,,,,,,;EEEKWWWWWWKKKKKKWWWWWWWWWWKKKKKKKKKKKKWWWWWW#WWKKKKWiEj;......................................:i,;....,...............;KKEKWWWWWWWWWGKWWKKDDGGDEGGGDGGGGGDGGGGGGGGGGGGGGGG *\n\t *fjtiiiii;;:.  j::::::,,,,,,,;;EEEKWWWWW#KKKKKWWWWWWWWWKKKKKKWKKKKKKKWWWWWWWWWKKKKWtEL;:....................................;;;:...,;j................:KEEWWWWWWWWWDDWWKKDDDDDKDDDDDDDDDDDDDDDGGGGGGGGGGG *\n\t *fjti;;iiii;;,:::::::,,,,,,,,;EEEKWWWWWWWKKKKWWWWWWWWKKKKKKKWKKKKKKKWWWWWWW#W#KKKKWEEii;...................................f;:....,;L...................EEKWWWWWWWWDDWWKKDDDDDKEDDDDDDDDDDDDDDDDDDDDDGGGG *\n\t *fjt,,,;;;;ii;f::::::,,,,,,,;;EEKWWWWWWWKKKKKWWWKWWKKKKKKKKKKKKKKKKKWWWWWWW#W#KKKKWKEij;:...............................:G;,.....,;f....................:tKKWWWWWWWDDWWKKDDDDDKKDDDDDDDDDDDDDDDDDDDDDDDDD *\n\t *jjt. ..:,;;;;,::::,,,,,,,,;;GEEWWWWWWWWKKKKWKKWKKKKKKKKKKKKKKKKKKKKWWWWWWW#W#KKKKWEDi;j;............................,Li;L;;;..,;;f........................KKKKWWWKDDWWKKDDDGDKKGGGGGGGGDGDDDDDDDDDDDDDDD *\n\t *fjt.    .:,,,:::::,,,,,,,;;;EEKWWWWWWWKKKKKKWKKKKKKKKKKKKKKKKKKKKKWKKKWKW##W#KKKKWEti;;G;........................tEEEL;;;;;;;;;;L..........................DKKKKKEDDWWKEDGftiLE;;;;itjLGGGGGGDDDDDDDDDDD *\n\t *fjt.       .j::::,,,,,,,;;;DEEWWWWWWWWKKKKWKKKKKKKKKKKKKKKKKKKKKKKWKKWWWK##W#KKKKKEii;;;L;...................iDEEEEEEKKi;j;;;;jD.....:......................,KKKKDGGEKKE:::::;E::::::::::,tLGGDDDDDDDDDD *\n\t *fjt.       .;:::,,,,,,,;;;;EEKWWWWWWWWKWKKKKKKKKKKKKKKKWKKKKKKKKKKWKKWWWW#WW#KKKKKKii;;;;f;.............:tDEEEEEKKKKKKKKEti;;;L...............................EEKf;:iKKE::::::E::::::::::::::ifDDDDDDDDD *\n\t *fjt:        :::,,,,,,,,;;;DEEWWWWWWWWWEKKKKKKKKKKKKKKKKKKKKKKKKKKWWKKWWWW####KKKKKEiii;;;;f,.........iDEEEEKKKKKKKKKKKKKKKf;iG......i..........................fK::::KKE::::::E::::::::::::::::,tGGDDDDD *\n\t *fjt:       t:::,,,,,,;;;;iDEKWWWWWWKEKKKKKKKKKKKKKKKKKKKKKKKKKKKKWWKKWWWW####WKKKKLiii;;;;;L,....,Li;EDEEEEKKKKKKKKKKKKKKKKiG......;:...........................:i:::KKE:::::,E,::::::::::::::::::iGDDDD *\n\t *jjt.       f::,,,,,,,;;;;GEEWWWWKEEKEKKKKKKKKKKKKKKKKWKKKKKKKKKKKWWKWWWWW###WWKKKKiii;;;;;;;G,;L;;iiEEEEEEEKKKKKKKKKKKKKWWKE......;t.........:....................j::KEE:,::,,D,,::::,,,,,,:::::::::tDDD *\n\t *fjt:.      ,::,,,,,,,;;;;EEWWKEEEEEEKKKKKKKKKKKKKKKKWKKKKKKKKKKKWWKKWWWWW#W#KKKKKKiiiiii;;;;;i;;iiiEEKEEKKWKKKKKKKWKKKKKWWWGi;...;t......,;;;;,....................:,EEE,,,,,,D,,,,,,,,,,,,,,,,::,::::tG *\n\t *fjt:.     ,::,,,,,,,;;;;DEKEEEEEEEEKKKKKKKKKKKKKKKKKKKKKKKKKKKKKWWWWWWWWW#W#KKKKKKiiiii;;i;;;;;iiiKKKEKKKKWWKWWWWWWKKKKWWWWW;;;:;L.....;;;;;;;;;....................,KEE,,,,,,E,,,,,,,,,,,,,,,,,,,,,,,,; *\n\t *fjt:.     f:,,,,,,,;;;;jEDEEEEEEEEEKKKKKKKKKKKKKKKKKKKKKKKKKKKKKWWWWWWWW#W##KKKKKKiiiiiiii;i;;iiiEKKKKKKKKWKWWWWWWWWKKKWWWWWKi;;i.....,jEEfGi;;;;;...................EED,,,,,,E,,,,,,,,,,,,,,,,,,,,,,,,, *\n\t *fjt:.    .f::,,,,,,;;jEEDEEEEEEEEEEKKKKKKKKKKKKKKKWKKKKKKKKKKKKKWWWKWWWWW###KKKKKLiiiiiiiiiiiiiiEEKKKKKKKKWWWWWWWWWWWWKWWWWWWGi;i;,..;jDDDKEGi;;;;;;:................EED,,,,,,D,,,,,,,,,,,,,,,,,,,,,,,,, *\n\t *fjt:.  .. ;::,,,,,;;EDDEEEEEEEEEEKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKWWKKW#WW####KWKKKiiiiiiiiiiiiijKKKKKKKKKKWWWWWWWWWWWWWWWWWWWWWt;i;;;;i;DDDDDDGi;;;;;;;;:.............EDf;,,,;,G;;;;;;;;;;;;;;;,,,,,,,,,, *\n\t *fjt:......:,,,,,,;LDDDEEEEEEEEEEEKKKKKKKKKKKKKKKKWKKKKKKKKKKKKKWWWWKWWWW####KKKKKiiiiiiiiiiijKEKKWKKKKKKKWWWWWWWWWWWWWWWWWWWWWWiLiii;i;DEEEEDDE;i;;;;;;;;;:..........EDi,;;;;;L;;;;;;;;;;;;;;;;;;,,,,,,, *\n\t *fjt:......:,,,,,;EDDDEEKEEEEEEEEEKKKKKKKKKKKKKKKWKKKKKKKKKKKKKKWWWWKKWWW##W#KWKKWEiiiiiijGKKKKKWWKKKKKKKKWWWWWWWWWWWWWWWWWWWWWWKi;iiiiDDEEEEEEDEi;;;;;;;;;;;;;,:.....ED;;;;;;;j;;;;;;;;;;;;;;;;;;;;;;;,, *\n\t *fjt:.....t,,,,,;DDDDEEEKEEEEEEEEKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKWWWKKKWWWW##WKWKKWKiiiKKKKKKKKKWWKKKKKKKKWWWWWWWWWWWWWWW#WWWWWWWWWiiiiifLEEEEEEEEDi;i;;;;;;;;;;;;.....DD;;;;;;;i;;;;;;;;;;;;;;;;;;;;;;;;; *\n\t *fjt:.....G,,,,,GDDDEEEEEEEEEEEEKKKKKKKKKKKKKKKKWKKKKKKKKKKKKKKKWWWKKKWWW###WKWKKWKitKKKKKKKKKWKKKKKKKKKKWWWWWWWWWWWWWW###WWWWWWWWEiiiiiiiEEEEEEEEDGiiii;;;;;;;;;.....GD;;;;;;;i;;;;;;;;;;;;;;;;;;;;;;;;; *\n\t *fjt:.....L,,,,;GDDDEEEEEEEEEEKEKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKWWWWWDGWWW###KKWWKWKKKKKKKKKKKKKKKKKKKKKKKWWWWWWWWWWWWW####WWWWWWWWWiiiiiiiiEEEEEEEEEEDi;i;;;;;;;;.....Lj;;;;;;i;iiiiii;;;;;;ii;;;;;;;;;;; *\n\t ***********************************************************************************************************************************************************************************************************/"}, "Heuristic": ["H1"]}, {"nl": {"id": 4505, "comment": "// No sorcery shall prevail. //           \n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4505, "comment": "//Variables\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4505, "comment": "//Main\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4505, "comment": "// Functions\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4505, "comment": "//Input Arrays\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4506, "comment": "/** call this method to initialize reader for InputStream */"}, "Heuristic": []}, {"nl": {"id": 4506, "comment": "/** get next word */"}, "Heuristic": []}, {"nl": {"id": 4506, "comment": "//TODO add check for eof if necessary\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4509, "comment": "//cost[mask][v] = numPairs with v for some all bits on in mask\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4510, "comment": "/**\n * @author egaeus\n * @mail sebegaeusprogram@gmail.com\n * @veredict Accepted\n * @url <https://codeforces.com/problemset/problem/1238/E>\n * @category dp\n * @date 19/10/2019\n **/"}, "Heuristic": ["H2", "H9"]}, {"nl": {"id": 4510, "comment": "//codeforces.com/problemset/problem/1238/E>\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4511, "comment": "/*Author: Satyajeet Singh, Delhi Technological University*/"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": 4511, "comment": "/*********************************************Constants******************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 4511, "comment": "/****************************************Solutions Begins***************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 4511, "comment": "/****************************************Solutions Ends**************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 4511, "comment": "/****************************************Template Begins************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 4511, "comment": "/***************************************Precision Printing**********************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 4511, "comment": "/**************************************Bit Manipulation**************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 4511, "comment": "/******************************************Graph*********************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 4511, "comment": "/*********************************************PAIR********************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 4511, "comment": "/******************************************Long Pair*******************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 4511, "comment": "/*****************************************DEBUG***********************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 4511, "comment": "/************************************MODULAR EXPONENTIATION***********************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 4511, "comment": "/********************************************GCD**********************************************************/"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4511, "comment": "/******************************************SIEVE**********************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 4511, "comment": "/********************************************End***********************************************************/"}, "Heuristic": ["H2"]}, {"nl": {"id": 4511, "comment": "//debug(cost);\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4511, "comment": "// squaring the base\n"}, "Heuristic": []}, {"nl": {"id": 4511, "comment": "// a is greater number\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4511, "comment": "// b is smaller number\n"}, "Heuristic": []}, {"nl": {"id": 4513, "comment": "//\u8bb0\u5f55\u6bcf\u6b21\u79fb\u52a8\u7684\u4e00\u4f4d\u600e\u52a0\u7684\u503c\uff0c\u51cf\u5c11\u91cd\u590d\u8ba1\u7b97\n"}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": 4513, "comment": "//\u6700\u4f4e\u4f4d\u76841\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4514, "comment": "/**\n * @author Juan Sebastian Beltran Rojas\n * @mail jsbeltran.valhalla@gmail.com\n * @veredict\n * @url https://codeforces.com/problemset/problem/1238/E\n * @category dp\n * @date 19/10/2019\n **/"}, "Heuristic": ["H2", "H9"]}, {"nl": {"id": 4514, "comment": "//codeforces.com/problemset/problem/1238/E\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4515, "comment": "//cost[mask][v] = numPairs with v for some all bits on in mask\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4516, "comment": "// editorial sol\n"}, "Heuristic": []}, {"nl": {"id": 4516, "comment": "// references\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4516, "comment": "// IBIG = 1e9 + 7\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4516, "comment": "// IMAX ~= 2e9\n"}, "Heuristic": []}, {"nl": {"id": 4516, "comment": "// LMAX ~= 9e18\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4516, "comment": "// constants\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4516, "comment": "// math util\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4516, "comment": "// array util\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4516, "comment": "// graph util\n"}, "Heuristic": ["H1"]}, {"nl": {"id": 4516, "comment": "// input\n"}, "Heuristic": ["H2"]}, {"nl": {"id": 4516, "comment": "// output\n"}, "Heuristic": ["H2"]}]