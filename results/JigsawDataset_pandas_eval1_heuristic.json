[{"nl": "Retain rows from dataframe df1 where value of EPS is not equal to 89", "Heuristic": ["H1"]}, {"nl": "take first three rows in df1 and assign it to dfout", "Heuristic": ["H1"]}, {"nl": "Delete the rows of data frame 'df2' from 'df1' and assign the result back to 'df1'", "Heuristic": []}, {"nl": "Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout", "Heuristic": ["H1"]}, {"nl": "Delete the rows of data frame 'df2' from 'df1' and assign the result back to 'df2'", "Heuristic": []}, {"nl": "Drop rows from dataframe df1 where value of EPS is equal to 89", "Heuristic": ["H1"]}, {"nl": "Apply min-max normalization on df1 and assign the result to dfout", "Heuristic": ["H1"]}, {"nl": "Apply mean normalization on the columns of df1 and store the result in dfout", "Heuristic": ["H1"]}, {"nl": "Select the third value in the STID column of mydata and store it in val", "Heuristic": ["H1"]}, {"nl": "Create a new column 'C' in df1 as the sum of the columns 'A' and 'B'", "Heuristic": []}, {"nl": "Select the first three rows of the second column of the mydata and store it in out", "Heuristic": ["H1"]}, {"nl": "Compute the fraction of non-zeros in the score column of the dataframe df1", "Heuristic": ["H1"]}, {"nl": "List the unique values of 'C2'", "Heuristic": []}, {"nl": "For each quarter find the subsidiary with top earnings value", "Heuristic": []}, {"nl": "Set the  column 'industry' of dataframe df1 to a value 5", "Heuristic": ["H1"]}, {"nl": "Sort the rows by column 'B' in descending order in df1 and assign it to dfout", "Heuristic": ["H1"]}, {"nl": "Rename the 'key' column of the dataframe df1 to 'KEY' and return it to dfout", "Heuristic": ["H1"]}, {"nl": "put first two row of df1 in dfout", "Heuristic": ["H1"]}, {"nl": "put third row of df1 in dfout", "Heuristic": ["H1"]}, {"nl": "put first and third row of df1 in dfout", "Heuristic": ["H1"]}, {"nl": "Remove last three rows from df1 and assign it to dfout", "Heuristic": ["H1"]}, {"nl": "take last three rows in df1 and assign it to dfout", "Heuristic": ["H1"]}, {"nl": "count the number of null values in df1 and return it to dfout", "Heuristic": ["H1"]}, {"nl": "drop rows with null values in df1 and return it to dfout", "Heuristic": ["H1"]}, {"nl": "replace null values in df1 with 4.0 and return it to dfout", "Heuristic": ["H1"]}, {"nl": "replace null values in df1 with mean of the column and return it to dfout", "Heuristic": ["H1"]}, {"nl": "find mean and median of columns in df1 and save it to dfout", "Heuristic": ["H1"]}, {"nl": "Filter rows where there is more than one NaN.", "Heuristic": []}, {"nl": "Set 'A' as 5 in 6th row of df1", "Heuristic": []}, {"nl": "Remove rows with null values from df1 and return it to dfout", "Heuristic": ["H1"]}, {"nl": "Concatenate two data frames and drop duplicates", "Heuristic": []}, {"nl": "Drop duplicates from dataframe and reindex.", "Heuristic": ["H1"]}, {"nl": "Transpose the dataframe", "Heuristic": ["H1"]}, {"nl": "Select rows where location is 'a'", "Heuristic": []}, {"nl": "Filter the columns from dataframe where type equal to 'float64'", "Heuristic": ["H1"]}, {"nl": "Check if all the values of column 'C1' in the dataframe contains values 1, 2 or 3.", "Heuristic": ["H1"]}, {"nl": "Convert the 'foo' column in the dataframe to numeric ignoring the errors.", "Heuristic": ["H1"]}, {"nl": "Convert the 'foo' column in the dataframe to numeric", "Heuristic": ["H1"]}, {"nl": "Move column 'deaths' to be the first column of df", "Heuristic": ["H1"]}, {"nl": "Convert column 'time' of df to pandas datetime", "Heuristic": ["H1"]}, {"nl": "remove rows with duplicates occuring consecutively in column 'time' of dataframe df", "Heuristic": ["H1"]}, {"nl": "drop rows logged at less than 10 minute 'time' interval in column df", "Heuristic": ["H1"]}, {"nl": "Group df1 on column 'b' and keep half of the elements at random", "Heuristic": []}, {"nl": "In column 'X' of dataframe d replace value 15 with 1015 and -15 with -1015", "Heuristic": ["H1"]}, {"nl": "Make columns of df1 same as that of df2", "Heuristic": []}, {"nl": "Split values in column 'Name' of df by space and add to columns 'First Name' and 'Last Name'", "Heuristic": ["H1"]}, {"nl": "get all rows where 'Name' does not contain 'AB'", "Heuristic": ["H1"]}, {"nl": "find 'Marks' of students in 'Subject' Chemistry and Physics", "Heuristic": ["H1"]}, {"nl": "add all columns in beta to alpha", "Heuristic": ["H1"]}, {"nl": "for each student, get a list of scores obtained", "Heuristic": ["H1"]}, {"nl": "for every 'student' find maximum 'score' in any 'subject'", "Heuristic": ["H1"]}, {"nl": "reorder the columns so that they are sorted", "Heuristic": ["H1"]}, {"nl": "remove rows whose indices are duplicated (keeping first)", "Heuristic": ["H1"]}, {"nl": "convert index to a column", "Heuristic": ["H1"]}, {"nl": "For every row in df1, update 'common' column to True if value in column 'A' of df1 also lies in column 'B' of df2", "Heuristic": []}, {"nl": "make values in 'common' of df2 to False if value in column 'B' of df2 do not lie in column 'A' of df1", "Heuristic": ["H1"]}, {"nl": "Remove substring 'Name:' from column 'country' of df", "Heuristic": ["H1"]}, {"nl": "Pick out the rows of df where 'a' not eq 4 and 'b' gt 3 and assign to dfout", "Heuristic": ["H1"]}, {"nl": "Update column 'present' to True in dataframe df where string 'dog' occurs inside column 'pet'", "Heuristic": ["H1"]}, {"nl": "Increase 'count' column by 1 when column 'pet' contains substring 'dog' or 'cat'", "Heuristic": []}, {"nl": "For the series data with multiple indices, create dataframe df with columns as the outermost level of index", "Heuristic": ["H1"]}, {"nl": "For df with multiindex columns, remove column 'outer_col' from df", "Heuristic": ["H1"]}, {"nl": "compute number of times 'mouse' is present in dataframe df", "Heuristic": ["H1"]}, {"nl": "compute number rows in which 'mouse' is present in dataframe df", "Heuristic": ["H1"]}, {"nl": "find number of elements in column 'phone' of df which are comprised totally of digits", "Heuristic": ["H1"]}, {"nl": "Select the rows of df where column 'X' lies in integers between inclusive 4-10", "Heuristic": ["H1"]}, {"nl": "Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20", "Heuristic": ["H1"]}, {"nl": "Change the type of column 'colA' of df to 'float32'", "Heuristic": ["H1"]}]