[
    {
        "nl": {
            "id": 2,
            "comment": "// Get n and s.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 2,
            "comment": "// Read in each individual value.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 2,
            "comment": "// Screen out this case.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 2,
            "comment": "// Do real work here.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 2,
            "comment": "// Store subset sums here.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 2,
            "comment": "// Run I/E here.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 2,
            "comment": "// Set up sign for I/E.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 2,
            "comment": "// Set the sum of this subset.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 2,
            "comment": "// Add in term.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 2,
            "comment": "// Returns n+k-1 choose k-1.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 2,
            "comment": "// Numerator.\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 5,
            "comment": "// if (Math.random() < 0.00001)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 5,
            "comment": "// System.out.println(n + \" \" + k + \" --> \" + top + \", \" + modInv(k) + \" --> \" +\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 5,
            "comment": "// ((top * modInv(k)) % MOD));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 5,
            "comment": "// @SuppressWarnings(\"unchecked\")\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 5,
            "comment": "// overcounting on bits\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 5,
            "comment": "// if (Math.random() < 0.0001)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 5,
            "comment": "// out.printf(\"%d choose %d = %d\\n\", S - over + N - 1, N - 1, chooseMod(S - over\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 5,
            "comment": "// + N - 1, N - 1));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 5,
            "comment": "//\t\t Scanner s = new Scanner(\"2 3\\n\" + \"1 3\\n\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 5,
            "comment": "//\t\t Scanner s = new Scanner(\"2 4\\n\" + \"2 2\\n\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 5,
            "comment": "//\t\t Scanner s = new Scanner(\"3 5\\n\" + \"1 3 2\\n\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 5,
            "comment": "//\t\tScanner s = new Scanner(\"20 4385085334307\\n\"\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 5,
            "comment": "//\t\t\t\t+ \"273634411136 208521328637 450482376435 844118010709 197241285878 472126475472 2414038897 672334205413 809269727018 409013884362 739986692075 953956651947 462216461906 388007176838 245504550965 527140291750 632844435887 550532123833 757200390348 944901802640\\n\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 6,
            "comment": "//package codeforces;\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 9,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 10,
            "comment": "/**\n * author: derrick20\n * created: 12/7/20 2:45 PM\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 10,
            "comment": "/*\n        long[] a = polyExp(new long[]{1, mod - 1}, N);\n        long[][] m = new long[a.length - 1][a.length - 1];\n        for (int i = 0; i < a.length - 1; i++) {\n            m[0][i] = mod - a[i + 1];\n            if (i > 0) {\n                m[i][i - 1] = 1;\n            }\n        }\n        mPow = new long[47][m.length][m.length];\n        mPow[1] = m;\n        for (int k = 2; k < 47; k++) {\n            mPow[k] = matrixMult(mPow[k - 1], mPow[k - 1]);\n        }\n         */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 10,
            "comment": "//        System.out.println(polynomial.size());\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 10,
            "comment": "//            System.out.println(\"Solving \" + exp);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 10,
            "comment": "// at most 20 choose 10\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 10,
            "comment": "//                System.out.println(\"Need to get \" + compl % mod);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 10,
            "comment": "// We want (n + k - 1) choose n, where we have n - 1 partitions,\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 10,
            "comment": "// and k balls, k = compl, n ~ 20. So this is pretty efficient!\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 10,
            "comment": "//                System.out.println((N + compl - 1) + \" \" + (N - 1) + \" -> \" + complCoeff);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 10,
            "comment": "//                long complCoeff = matrixFastExpo(m, compl)[0][0];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 10,
            "comment": "//                System.out.println(\"Ways to get \" + compl + \" = \" + complCoeff);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 11,
            "comment": "// https://netbeans.org/kb/73/java/editor-codereference_ru.html#display\n"
        },
        "Heuristic": [
            "H9"
        ]
    },
    {
        "nl": {
            "id": 11,
            "comment": "//        for( int n = 0; n <= 10; ++n ){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 11,
            "comment": "//            for (int m = 0; m <= n; m++) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 11,
            "comment": "//                err.print( \" \" + C(m,n) );\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 11,
            "comment": "//            }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 11,
            "comment": "//            err.println();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 11,
            "comment": "//        }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 11,
            "comment": "//err.println( msk +\") \"+ comb );\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 11,
            "comment": "//------------------------------------------------------------------//\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 12,
            "comment": "//\t\tSystem.out.println(choose(1000000000000L, 20));\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 13,
            "comment": "/**\n * author: derrick20\n * created: 12/7/20 6:00 PM\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 13,
            "comment": "/*\n        It just happens to work out that x = 2, p = 29 has multiplicative order 28,\n        so that's good enough for this\n         */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 13,
            "comment": "// KEY BUG\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 14,
            "comment": "//System.out.println(ans);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 15,
            "comment": "/**\n * #\n * \n * @author pttrung\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 15,
            "comment": "// PrintWriter out = new PrintWriter(new FileOutputStream(new File(\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 15,
            "comment": "// \"output.txt\")));\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 15,
            "comment": "// System.out.println(\"CALL \" + need + \" \" + total);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 15,
            "comment": "// System.out.println(result + \" \" + need + \" \" + total + \" \" +\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 15,
            "comment": "// data.length);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 15,
            "comment": "// System.setOut(new PrintStream(new\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 15,
            "comment": "// BufferedOutputStream(System.out), true));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 15,
            "comment": "// br = new BufferedReader(new InputStreamReader(new\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 15,
            "comment": "// FileInputStream(new File(\"input.txt\"))));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 16,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Mahmoud Aladdin <aladdin3>\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 18,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Niyaz Nigmatullin\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 18,
            "comment": "//            if (isEOF && ret < 0) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 18,
            "comment": "//                throw new InputMismatchException();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 18,
            "comment": "//            }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 18,
            "comment": "//            isEOF = ret == -1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 19,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 19,
            "comment": "//three numbers, first is gcd, second is x, third is y\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 21,
            "comment": "//package round258;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 21,
            "comment": "// used\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 21,
            "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 23,
            "comment": "// 1-x^a[i]+1..\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 24,
            "comment": "//package round258;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 24,
            "comment": "// used\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 24,
            "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 25,
            "comment": "/*void take(int n)\n \t{\n \t\tal=new ArrayList[n];\n \t\tfor(int i=0;i<n;i++)\n \t\t\tal[i]=new ArrayList<Integer>();\n \t\tfor(int i=0;i<n-1;i++)\n \t\t{\n \t\t\tint x=ni()-1;\n \t\t\tint y=ni()-1;\n \t\t\tal[x].add(y);\n \t\t\tal[y].add(x);\n \t\t}\n \t}*/"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 25,
            "comment": "//A and M are coprime\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 25,
            "comment": "//x may be negative\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 25,
            "comment": "//new code5().run();\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 25,
            "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 26,
            "comment": "// practice with rainboy\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 27,
            "comment": "// out.println(a + \" \" + map.get(a));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 27,
            "comment": "// To Get Input\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 27,
            "comment": "// Some Buffer Methods\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 27,
            "comment": "// when nextLine, (isSpaceChar(b) && b != '\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 27,
            "comment": "// ')\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 31,
            "comment": "/**\n * author: derrick20\n * created: 12/7/20 6:00 PM\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 31,
            "comment": "/*\n        It just happens to work out that x = 2, p = 29 has multiplicative order 28,\n        so that's good enough for this\n         */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 31,
            "comment": "// KEY BUG\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 32,
            "comment": "/**\n         *\n         */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 32,
            "comment": "/**\n         *\n         */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 32,
            "comment": "// SOLUTION!!!\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 32,
            "comment": "// HACK ME PLEASE IF YOU CAN!!!\n"
        },
        "Heuristic": [
            "H4"
        ]
    },
    {
        "nl": {
            "id": 32,
            "comment": "// PLEASE!!!\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 32,
            "comment": "// PLEASE!!!\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 32,
            "comment": "// PLEASE!!!\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 32,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 32,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 32,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 32,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 32,
            "comment": "////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 32,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 32,
            "comment": "/////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 32,
            "comment": "/////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 32,
            "comment": "///////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 32,
            "comment": "///////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 32,
            "comment": "////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 32,
            "comment": "////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 32,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 32,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 32,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 32,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 32,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 32,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 32,
            "comment": "//////////////// Some useful constants and functions ////////////////\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 32,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 32,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 32,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 32,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 32,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 32,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 32,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 32,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 33,
            "comment": "//out.println(df.format(3.1415));\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 34,
            "comment": "// p doit \u00eatre premier\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 36,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Praveen Dhinwa\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 36,
            "comment": "//System.out.println(\"h \" + comb(5, 3));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 36,
            "comment": "//System.out.println(power);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 37,
            "comment": "/**\n * author: derrick20\n * created: 12/7/20 6:00 PM\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 37,
            "comment": "//        System.out.println(Arrays.toString(inv));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 37,
            "comment": "//        System.out.println(Arrays.toString(invFact));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 37,
            "comment": "//            System.out.println(amt);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 37,
            "comment": "// KEY BUG\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 38,
            "comment": "/**\n         *\n         */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 38,
            "comment": "/**\n         *\n         */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 38,
            "comment": "// SOLUTION!!!\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 38,
            "comment": "// HACK ME PLEASE IF YOU CAN!!!\n"
        },
        "Heuristic": [
            "H4"
        ]
    },
    {
        "nl": {
            "id": 38,
            "comment": "// PLEASE!!!\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 38,
            "comment": "// PLEASE!!!\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 38,
            "comment": "// PLEASE!!!\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 38,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 38,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 38,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 38,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 38,
            "comment": "////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 38,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 38,
            "comment": "/////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 38,
            "comment": "/////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 38,
            "comment": "///////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 38,
            "comment": "///////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 38,
            "comment": "////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 38,
            "comment": "////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 38,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 38,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 38,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 38,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 38,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 38,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 38,
            "comment": "//////////////// Some useful constants and functions ////////////////\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 38,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 38,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 38,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 38,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 38,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 38,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 38,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 38,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 40,
            "comment": "/* \n   * class P implements Comparable<P>{\n//\t\timplements Comparable<Pair>\n\t\tint id; long d;\n\t\tP(int id,long d){\n\t\t\tthis.id=id;\n\t\t\tthis.d=d;\n\t\t} \n\t\tpublic int compareTo(P x){\n\t\t   \t return  0<=d-x.d?1:-1 ;  //ascend\n\t\t   }\n\t \n }\n\n\n\nclass Pair implements Comparable<Pair>{\n//\timplements Comparable<Pair>\n\tint a,b;\n\tPair(int a,int b){\n\t\tthis.a=a;\n\t\tthis.b=b;\n\t} \n\tpublic int compareTo(Pair x){\n\t   \t return a-x.a; //descend\n\t   }\n}*/"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 40,
            "comment": "// ArrayList<Integer> lis = new ArrayList<Integer>();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 40,
            "comment": "// ArrayList<String> lis = new ArrayList<String>();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 40,
            "comment": "//  PriorityQueue<P> que = new PriorityQueue<P>();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 40,
            "comment": "// PriorityQueue<Integer> que = new PriorityQueue<Integer>();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 40,
            "comment": "//  Stack<Integer> que = new Stack<Integer>();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 40,
            "comment": "//\tstatic long sum=0;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 40,
            "comment": "// 1000000007 (10^9+7)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 40,
            "comment": "//static int mod = 1000000009,r=0; ArrayList<Integer> l[]= new ArrayList[n];\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 40,
            "comment": "// static int dx[]={1,-1,0,0};\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 40,
            "comment": "//\tstatic int dy[]={0,0,1,-1};\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 40,
            "comment": "//\tstatic int dx[]={1,-1,0,0,1,1,-1,-1};\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 40,
            "comment": "//  static int dy[]={0,0,1,-1,1,-1,1,-1};\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 40,
            "comment": "//static Set<Integer> set = new HashSet<Integer>();p\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 40,
            "comment": "//String line=\"\"; throws Exception, IOException\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 40,
            "comment": "//(line=br.readLine())!=null\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 40,
            "comment": "//Scanner sc =new Scanner(System.in);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 40,
            "comment": "// !!caution!! int long //  \n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 40,
            "comment": "//,a=sc.nextInt(),b=sc.nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 40,
            "comment": "//db(d);\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 40,
            "comment": "// db(i,x,r);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 40,
            "comment": "// weather k-th bit (from right) be one or zero\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 40,
            "comment": "//beware n<m\ufffdI\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 40,
            "comment": "// can be minus! \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 40,
            "comment": "//\t\timplements Comparable<Pair>\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 40,
            "comment": "//ascend\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 40,
            "comment": "//\timplements Comparable<Pair>\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 40,
            "comment": "//descend\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 41,
            "comment": "//\t\tSystem.out.println(ans);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 41,
            "comment": "//\t\t\t\tSystem.out.println(\" * \" + (pow-i) + \" / \" + (i+1));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 41,
            "comment": "//\t\t\tSystem.out.println(\"(\" + (pow+n-1) + \" choose \" + (n-1) + \") = \" + choose);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 43,
            "comment": "/**\n         *\n         */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 43,
            "comment": "/**\n         *\n         */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 43,
            "comment": "// SOLUTION!!!\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 43,
            "comment": "// HACK ME PLEASE IF YOU CAN!!!\n"
        },
        "Heuristic": [
            "H4"
        ]
    },
    {
        "nl": {
            "id": 43,
            "comment": "// PLEASE!!!\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 43,
            "comment": "// PLEASE!!!\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 43,
            "comment": "// PLEASE!!!\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 43,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 43,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 43,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 43,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 43,
            "comment": "////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 43,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 43,
            "comment": "/////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 43,
            "comment": "/////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 43,
            "comment": "///////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 43,
            "comment": "///////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 43,
            "comment": "////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 43,
            "comment": "////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 43,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 43,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 43,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 43,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 43,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 43,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 43,
            "comment": "//////////////// Some useful constants and functions ////////////////\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 43,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 43,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 43,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 43,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 43,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 43,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 43,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 43,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 44,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author aryssoncf\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 44,
            "comment": "//noinspection SuspiciousNameCombination\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 45,
            "comment": "// System.err.println(k + \" \" + c);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 46,
            "comment": "// https://netbeans.org/kb/73/java/editor-codereference_ru.html#display\n"
        },
        "Heuristic": [
            "H9"
        ]
    },
    {
        "nl": {
            "id": 46,
            "comment": "//err.println( msk +\") \"+ comb );\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 46,
            "comment": "//------------------------------------------------------------------//\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 47,
            "comment": "/*\n     * Code Author: Akshay Miterani\n     * DA-IICT\n     */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 47,
            "comment": "//----------My Code Starts Here----------\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 47,
            "comment": "//---------------The End------------------\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 47,
            "comment": "// squaring the base\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 47,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 48,
            "comment": "/*-----------------------------------------------------------------------------------------------------------------------------------------------*/"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 48,
            "comment": "// template : secondThread\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 48,
            "comment": "//shuffle, then sort\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 49,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author anand.oza\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 52,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 52,
            "comment": "/*double a = in.nextDouble();\n        \tdouble b = in.nextDouble();\n        \tdouble c = in.nextDouble();\n        \t\n        \tdouble s = Math.sqrt(b * b - 4 * a * c);\n        \tif(a == 0){\n        \t\tout.println( -c / b);\n        \t}\n        \telse{\n        \t\tout.println((s - b) / (2 * a));\n            \tout.println((-s - b) / (2 * a));\n        \t}*/"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 53,
            "comment": "/**\n * Feb 18, 2016 | 5:55:42 PM\n * <pre>\n * <u>Description</u>\n *\n * </pre>\n *\n * @author Essiennta Emmanuel (colourfulemmanuel@gmail.com)\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 54,
            "comment": "/**\n * Created by Askar on 03.07.2017\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 55,
            "comment": "/**\n *\n * @author Ahmad\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 56,
            "comment": "/*\n        int n = nextInt();\n        long res = 0;\n\n        for (int i = 5; i <= 7; i++) {\n            long m = n, acc = 1;\n            for (int j = 0; j < i; j++) {\n                acc *= m--;\n            }\n            res += acc / factorial(i);\n        }\n        out.print(res);\n*/"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 56,
            "comment": "//long time = System.currentTimeMillis();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 56,
            "comment": "//time = System.currentTimeMillis() - time;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 56,
            "comment": "//System.out.println(time + \" ms\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 56,
            "comment": "//in = new StreamTokenizer(new BufferedReader(new InputStreamReader(new FileInputStream(\"input.txt\"))));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 56,
            "comment": "//BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(\"input.txt\")));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 56,
            "comment": "//out = new PrintWriter(new File(\"output.txt\"));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 56,
            "comment": "//in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 57,
            "comment": "/**\n *\n * @author Hai Dang Tran\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 61,
            "comment": "/**\n * Created by wobwab on 8/12/2016.\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 63,
            "comment": "/**\n *\n * @author sarthak\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 64,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author ATailouloute\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 65,
            "comment": "//\t\tScanner in=new Scanner(System.in);\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 66,
            "comment": "/* ignore */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 66,
            "comment": "/* ignore */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 66,
            "comment": "//System.out.println(naive_simulate((int)(n), new boolean[(int)(n)][(int)(n)], 0));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 68,
            "comment": "/**\n *\n * @author Fran\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 68,
            "comment": "/**\n     * @param args the command line arguments\n     */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 68,
            "comment": "// 1508893845081\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 72,
            "comment": "/* package whatever; // don't place package name! */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 72,
            "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 72,
            "comment": "// don't place package name! */\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 73,
            "comment": "/******************************END OF MAIN PROGRAM*******************************************/"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 73,
            "comment": "//fw = new FileWriter(\"!out.txt\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 73,
            "comment": "//pre();\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 73,
            "comment": "//fw.write(\"Case #\" + (tt++) + \": \");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 73,
            "comment": "//fw.write(\"\\n\");\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 73,
            "comment": "//fw.close();  \n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 75,
            "comment": "// 1536799544273\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 77,
            "comment": "// so hard much wow\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 78,
            "comment": "/**\n * Created by peacefrog on 2/18/16.\n * 11:43 PM\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 78,
            "comment": "/*\n\t * Start Solution Here\n\t */"
        },
        "Heuristic": [
            "H1",
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 78,
            "comment": "/**\n\t\t * call this method to initialize reader for InputStream\n\t\t */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 78,
            "comment": "/**\n\t\t * get next word\n\t\t */"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 79,
            "comment": "//Fastscanner class end\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 79,
            "comment": "//Main ob=new Main();\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 81,
            "comment": "// 1536805216026\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 82,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 85,
            "comment": "/**\n * Created by mmaikovych on 18.02.16.\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 86,
            "comment": "/* package whatever; // don't place package name! */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 86,
            "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 86,
            "comment": "// don't place package name! */\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 86,
            "comment": "//public static HashMap<String, Integer> map2;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 88,
            "comment": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 88,
            "comment": "/**\n *\n * @author esteban\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 88,
            "comment": "/**\n     * @param args the command line arguments\n     */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 89,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Egor Kulikov (egor@egork.net)\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 90,
            "comment": "/*=================================================================================================================*\n     * Data IO\n     */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 90,
            "comment": "/*================================================================================================================*/"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 93,
            "comment": "/**\n * Created by JUSTIN on 11/23/17.\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 93,
            "comment": "//l\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 95,
            "comment": "//package com.krakn.CF.R630;\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 97,
            "comment": "/*\n * For the brave souls who get this far: You are the chosen ones,\n * the valiant knights of programming who toil away, without rest,\n * fixing our most awful code. To you, true saviors, kings of men,\n * I say this: never gonna give you up, never gonna let you down,\n * never gonna run around and desert you. Never gonna make you cry,\n * never gonna say goodbye. Never gonna tell a lie and hurt you.\n * \n * And Logic is the strongest weapon. \n *\n */"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 97,
            "comment": "/*\n     *********************************************************************************************\n     */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 97,
            "comment": "//package Coding;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 97,
            "comment": "//private static final int N = 1234567;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 97,
            "comment": "//private static final double MOD = 1e9 + 7;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 97,
            "comment": "//Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 97,
            "comment": "//khy...\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 97,
            "comment": "//pw = new PrintWriter(new FileOutputStream(\"ans.txt\"));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 101,
            "comment": "/**\n *\n * @author Mohammad Hadi\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 104,
            "comment": "//long t= System.currentTimeMillis();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 104,
            "comment": "//points\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 104,
            "comment": "//wetShark(list);\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 104,
            "comment": "//System.out.println(Arrays.toString(list));\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 108,
            "comment": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 108,
            "comment": "/**\n *\n * @author marouen\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 108,
            "comment": "/**\n     * @param args the command line arguments\n     */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 108,
            "comment": "//package tcpc.geometrie;\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 109,
            "comment": "//new careercup().run();\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 109,
            "comment": "//new CC().run();\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 109,
            "comment": "//System.out.println(Integer.MAX_VALUE);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 114,
            "comment": "/*\n * The MIT License\n *\n * Copyright 2016 Mouad NACIRI <mouadnaciri1@gmail.com>.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 114,
            "comment": "/**\n *\n * @author NACIRI Mouad <mouadnaciri1@gmail.com>\n * @version 1.5.1\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 114,
            "comment": "/* VIP, DON'T TOUCH!! */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 114,
            "comment": "//IO stuff...\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//--------------->>>>IF YOU ARE HERE FOR QUICKSORT HACK THEN SORRY NO HACK FOR YOU<<<-------------------\n"
        },
        "Heuristic": [
            "H1",
            "H4"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// static int minl = -1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// static long n;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 119,
            "comment": "// public static void solve(){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//    FastScanner sc = new FastScanner();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//    // int t = sc.nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//    int t = 1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//    for(int tt = 0 ; tt < t ; tt++){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//        long n = sc.nextLong();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//        int m = sc.nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//        Set<Integer> rows = new HashSet<>();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//        Set<Integer> cols = new HashSet<>();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//        sb = new StringBuilder();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//        // map = new HashMap<>();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//        for(int i = 1 ; i <= m ; i++){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//            int l = sc.nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//            int r = sc.nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//            rows.add(l);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//            cols.add(r);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//            sb.append((n-rows.size()) * (n-cols.size()) +\" \");               \n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//        }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//        System.out.println(sb);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//    }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//--------------->>>>IF YOU ARE HERE FOR QUICKSORT HACK THEN SORRY NO HACK FOR YOU<<<-------------------\n"
        },
        "Heuristic": [
            "H1",
            "H4"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// Scanner sc = new Scanner(System.in);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// int t = sc.nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// int l = 1;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 119,
            "comment": "// n = sc.nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// n = sc.nextLong();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// k = sc.nextLong();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// b = sc.nextLong();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// c = sc.nextLong();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// d = sc.nextLong();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// x = sc.nextLong();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// y = sc.nextLong();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// n = sc.nextLong();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// n = sc.nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// n1 = sc.nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// m = sc.nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// q = sc.nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// k = sc.nextLong();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// s = sc.next();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// ch = sc.next().toCharArray();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// ch1 = sc.next().toCharArray();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// arr = new long[n];\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 119,
            "comment": "// for(int i = 0 ; i < n ; i++){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//     arr[i] = sc.nextLong();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// x = sc.nextLong();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// y = sc.nextLong();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// ch = sc.next().toCharArray();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// m = n;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 119,
            "comment": "// darr = new long[n];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// for(int i = 0 ; i < n ; i++){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//     darr[i] = sc.nextLong();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// farr = new int[n];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// for(int i = 0; i < n ; i++){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//     farr[i] = sc.nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// mat = new int[n][n];\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 119,
            "comment": "// for(int i = 0 ; i < n ; i++){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//     for(int j = 0 ;  j < n ; j++){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//         mat[i][j] = sc.nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//     }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// m = n;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 119,
            "comment": "// mat = new char[n][m];\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 119,
            "comment": "// for(int i = 0 ; i < n ; i++){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//     String s = sc.next();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//     for(int j = 0 ; j < m ; j++){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//         mat[i][j] = s.charAt(j);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//     }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// str = new String[n];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// for(int i = 0 ; i < n ; i++)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 119,
            "comment": "//     str[i] = sc.next();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// nodes = new Node[n];\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 119,
            "comment": "// for(int i = 0 ; i < n ;i++)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 119,
            "comment": "//     nodes[i] = new Node(sc.nextInt(),sc.nextInt());\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// System.out.println(solve()?\"YES\":\"NO\");\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// System.out.println(solve());\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// public static dfs(int i){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//    if(count[i] == 1)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//        return;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//    list = map.get(i);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//    for(Integer j : list){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//        if(j == i)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//            continue;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//        dfs(j);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "//    }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// Corner cases \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 119,
            "comment": "// This is checked so that we can skip  \n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 119,
            "comment": "// middle five numbers in below loop \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 119,
            "comment": "//shuffle, then sort \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 121,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 124,
            "comment": "/**\n * Created by raiym on 2/18/16.\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 126,
            "comment": "/**\n * @(#)Game.java\n *\n *\n * @author\n * @version 1.00 2016/8/24\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 127,
            "comment": "//SOLUTION BEGIN\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 127,
            "comment": "//Into the Hardware Mode\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 127,
            "comment": "//SOLUTION END\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 127,
            "comment": "//Solution Credits: Taranpreet Singh\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 128,
            "comment": "// Main Code at the Bottom\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 128,
            "comment": "//Fast IO class\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 128,
            "comment": "//debug\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 128,
            "comment": "// Pair\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 128,
            "comment": "//Global variables and functions\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 128,
            "comment": "//Main function(The main code starts from here)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 128,
            "comment": "//test=sc.nextInt();\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 129,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 129,
            "comment": "// InputStream inputStream = new FileInputStream(\"input.txt\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 129,
            "comment": "// OutputStream outputStream = new FileOutputStream(\"output.txt\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 129,
            "comment": "// int start = Integer.MIN_VALUE;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 129,
            "comment": "// int end = Integer.MAX_VALUE;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 129,
            "comment": "// System.out.println(start + \" \" + end + \" \" + sPos + \" \" + ePos);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 129,
            "comment": "// boolean possible = true;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 129,
            "comment": "// System.out.println(x);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 129,
            "comment": "// System.out.println(ans);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 129,
            "comment": "// checking whether the ith bit is set in the diff variable\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 129,
            "comment": "// for the min max problems\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 129,
            "comment": "// for printing purposes\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 129,
            "comment": "// out.println();\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 129,
            "comment": "// out.println();\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 129,
            "comment": "// long fact[] = new long[n+1];\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 129,
            "comment": "// fact[0] = 1;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 129,
            "comment": "// for(int i=1;i<=n;i++)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 129,
            "comment": "//     fact[i] = (i*fact[i-1])%p;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 129,
            "comment": "// 0->gcd 1->xValue 2->yValue\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 130,
            "comment": "// line length\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 131,
            "comment": "//sort(arr,0,n-1);\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 131,
            "comment": "//sorting the two halves using a tmp array\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 131,
            "comment": "//Copying the elements of tmp into the main array\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 131,
            "comment": "//sort(arr,0,n-1);\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 131,
            "comment": "//sorting the two halves using a tmp array\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 131,
            "comment": "//Copying the elements of tmp into the main array\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 131,
            "comment": "//        for(int i=0;i<arr.length;i++) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 131,
            "comment": "//            System.out.println(i+\" \"+arr[i]+\" \"+brr[i]);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 131,
            "comment": "//        }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 131,
            "comment": "//            System.out.println(prev+\" \"+i+\" \"+tmp);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 131,
            "comment": "// Add boundary case, when array size is one \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 131,
            "comment": "// always points empty slot \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 131,
            "comment": "// new smallest value \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 131,
            "comment": "// A[i] wants to extend largest subsequence \n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 131,
            "comment": "// A[i] wants to be current end candidate of an existing \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 131,
            "comment": "// subsequence. It will replace ceil value in tailTable \n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 132,
            "comment": "//package edu97;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 132,
            "comment": "// What's the smallest input?\n"
        },
        "Heuristic": [
            "H12"
        ]
    },
    {
        "nl": {
            "id": 132,
            "comment": "// Check * for int/long overflow.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 132,
            "comment": "// Check / for accidental rounding.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 132,
            "comment": "// Are you using doubles? Can you avoid it?\n"
        },
        "Heuristic": [
            "H12"
        ]
    },
    {
        "nl": {
            "id": 132,
            "comment": "// Never compare after taking mod.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 132,
            "comment": "// Mod the final result.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 132,
            "comment": "// Initialize globals in solve() unless they are independent of the problem input.\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 132,
            "comment": "// Check for local/global name conflicts (n?).\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 132,
            "comment": "// Check initial values for max/min (not Integer.MIN_VALUE for long).\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 132,
            "comment": "// check whether feasible\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 132,
            "comment": "// needs to be enough room between the two values\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 132,
            "comment": "// longest increasing subsequence length\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 132,
            "comment": "// TODO if verifier is implemented, remove this\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 132,
            "comment": "// Validate output against input\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 132,
            "comment": "// TODO implement manual validation\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 132,
            "comment": "// ok if one has an extra newline\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 132,
            "comment": "///////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 132,
            "comment": "//////////   FAST PAIR   //////////\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 132,
            "comment": "///////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 132,
            "comment": "// Works on -1e9 <= x, y <= 1e9\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 132,
            "comment": "///////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 132,
            "comment": "////////// BINARY SEARCH //////////\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 132,
            "comment": "///////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 132,
            "comment": "// return highest in range that still returns true\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 132,
            "comment": "// T T T F F F F\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 132,
            "comment": "// invariant:\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 132,
            "comment": "// -    indicator(min) = true\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 132,
            "comment": "// -    indicator(max+1) = false\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 132,
            "comment": "// return lowest in range that still returns true\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 132,
            "comment": "// F F F F T T T\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 132,
            "comment": "// invariant:\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 132,
            "comment": "// -    indicator(min-1) = false\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 132,
            "comment": "// -    indicator(max) = true\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 133,
            "comment": "// one-based DS\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 133,
            "comment": "// O(log n)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 133,
            "comment": "// min?\n"
        },
        "Heuristic": [
            "H2",
            "H12"
        ]
    },
    {
        "nl": {
            "id": 133,
            "comment": "// O(log n), update = increment\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 133,
            "comment": "// min?\n"
        },
        "Heuristic": [
            "H2",
            "H12"
        ]
    },
    {
        "nl": {
            "id": 134,
            "comment": "/*\n \n 6666666666666\t\t\t 6666666666666                     \n 6\t\t\t\t\t\t 6  \t\t\t\t\t\t\t\t\t\t\t   \t\t\t\n 6\t\t\t\t\t\t 6                                      \n 6\t\t\t\t\t\t 6                                      \n 6\t\t\t\t\t\t 6                                       \n 6                       6                                                 \n 6666666666666           6666666666666                     \n 6\t\t     6           6\t\t     6\n 6\t\t\t 6\t         6\t\t\t 6 \n 6\t\t\t 6           6\t\t\t 6\n 6\t\t     6\t         6\t\t     6\t\n 6666666666666           6666666666666\n \n \n */"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 134,
            "comment": "/*static int read() throws IOException {\n        in.nextToken();\n        return (int) in.nval;\n    }\n    static String readString() throws IOException {\n        in.nextToken();\n        return in.sval;\n\t}*/"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 134,
            "comment": "/*public void tarjan(int p,int r){\n\t\tif(cut)return;\n\t\tList<Integer>childs=adjecent[r];\n\t\tdis[r]=low[r]=time;\n\t\ttime++;\n\t\t\n\t\t//core for tarjan\n\t\tint son=0;\n\t\tfor(int c:childs){\n\t\t\tif(ban==c||c==p)continue;\n\t\t\tif(dis[c]==-1){\n\t\t\t\tson++;\n\t\t\t\ttarjan(r,c);\n\t\t\t\tlow[r]=Math.min(low[r],low[c]);\n\t\t\t\tif((r==root&&son>1)||(low[c]>=dis[r]&&r!=root)){\n\t\t\t\t\tcut=true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tif(c!=p){\n\t\t\t\t\tlow[r]=Math.min(low[r],dis[c]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t}*/"
        },
        "Heuristic": [
            "H1",
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 134,
            "comment": "// Don't place your source in a package\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 134,
            "comment": "// Please name your class Main\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 134,
            "comment": "//static StreamTokenizer in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 134,
            "comment": "//InputReader in = new InputReader(System.in);\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 134,
            "comment": "//constant variable\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 134,
            "comment": "//Set<Integer>adjecent[];\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 134,
            "comment": "//////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 134,
            "comment": "//longest increase subsequence\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 134,
            "comment": "//print1(A);\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 134,
            "comment": "//print1(A);\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 134,
            "comment": "//print1(dp);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 134,
            "comment": "//msg((N-res)+\"\");\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 134,
            "comment": "//msg(\"\");\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 134,
            "comment": "// C(20,3)=20!/(17!*3!)\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 134,
            "comment": "// take   a/b     where a=20!  b=17!*3!\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 134,
            "comment": "//map operation\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 134,
            "comment": "//core for tarjan\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 134,
            "comment": "//helper function I would use\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 134,
            "comment": "//union find => find method\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 134,
            "comment": "//rank for the first two letter\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 134,
            "comment": "//suffix array Struct\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 134,
            "comment": "//what the range would be for that particular node\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 134,
            "comment": "//[s,mid] [mid+1,e]\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 134,
            "comment": "//[s,mid] [mid+1,e]\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 134,
            "comment": "//left :  to mid-1,\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 135,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 135,
            "comment": "//\t \t\tString input1 = bf.readLine().trim();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 135,
            "comment": "//\t \t\tString input2 = bf.readLine().trim();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 135,
            "comment": "//\t\t\tCOMPARING INTEGER OBJECTS U DO DOT EQUALS NOT ==\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 135,
            "comment": "// it is a leaf\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 135,
            "comment": "// it is not a leaf\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 135,
            "comment": "// entirely disjoint\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 135,
            "comment": "//covers us\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 135,
            "comment": "//others\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 135,
            "comment": "//StringJoiner sj = new StringJoiner(\" \"); \n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 135,
            "comment": "//sj.add(strings)\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 136,
            "comment": "/**/"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 136,
            "comment": "/*********************************************Constants***********************************/"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 136,
            "comment": "/*****************************************Solution Begins*********************************/"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 136,
            "comment": "/****************************************Solution Ends*************************************/"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 136,
            "comment": "/***************************************Precision Printing*********************************/"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 136,
            "comment": "/**************************************Bit Count************************************/"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 136,
            "comment": "/******************************************Graph******************************************/"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 136,
            "comment": "/******************************************Pair*****************************************/"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 136,
            "comment": "/*****************************************DEBUG********************************************/"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 136,
            "comment": "/************************************Modular Exponentiation********************************/"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 136,
            "comment": "/********************************************GCD*******************************************/"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 136,
            "comment": "//debug(input[B[i]],input[B[i-1]]);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 136,
            "comment": "//debug(\"hihi\",i);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 136,
            "comment": "// static void addEdge(int a,int b,int c){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 136,
            "comment": "//     graph[a].add(new Pair(b,c));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 136,
            "comment": "// }    \n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 137,
            "comment": "//package edu97;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 137,
            "comment": "// What's the smallest input?\n"
        },
        "Heuristic": [
            "H12"
        ]
    },
    {
        "nl": {
            "id": 137,
            "comment": "// Check * for int/long overflow.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 137,
            "comment": "// Check / for accidental rounding.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 137,
            "comment": "// Are you using doubles? Can you avoid it?\n"
        },
        "Heuristic": [
            "H12"
        ]
    },
    {
        "nl": {
            "id": 137,
            "comment": "// Never compare after taking mod.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 137,
            "comment": "// Mod the final result.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 137,
            "comment": "// Initialize globals in solve() unless they are independent of the problem input.\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 137,
            "comment": "// Check for local/global name conflicts (n?).\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 137,
            "comment": "// Check initial values for max/min (not Integer.MIN_VALUE for long).\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 137,
            "comment": "// check whether feasible\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 137,
            "comment": "// needs to be enough room between the two values\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 137,
            "comment": "//            SortedSet<SubSeq> subSeqs = new TreeSet<>(Comparator.<SubSeq>comparingInt(s -> s.last).thenComparing(s -> s.length));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 137,
            "comment": "// longest increasing subsequence length\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 137,
            "comment": "// TODO if verifier is implemented, remove this\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 137,
            "comment": "// Validate output against input\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 137,
            "comment": "// TODO implement manual validation\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 137,
            "comment": "// ok if one has an extra newline\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 137,
            "comment": "///////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 137,
            "comment": "//////////   FAST PAIR   //////////\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 137,
            "comment": "///////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 137,
            "comment": "// Works on -1e9 <= x, y <= 1e9\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 137,
            "comment": "///////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 137,
            "comment": "////////// BINARY SEARCH //////////\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 137,
            "comment": "///////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 137,
            "comment": "// return highest in range that still returns true\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 137,
            "comment": "// T T T F F F F\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 137,
            "comment": "// invariant:\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 137,
            "comment": "// -    indicator(min) = true\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 137,
            "comment": "// -    indicator(max+1) = false\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 137,
            "comment": "// return lowest in range that still returns true\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 137,
            "comment": "// F F F F T T T\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 137,
            "comment": "// invariant:\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 137,
            "comment": "// -    indicator(min-1) = false\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 137,
            "comment": "// -    indicator(max) = true\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 138,
            "comment": "//package ecr97;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 138,
            "comment": "// open open LIS of equal\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 138,
            "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 138,
            "comment": "//\t\tif(x < 0){ x = 0; }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 138,
            "comment": "// print ids which are 1\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 139,
            "comment": "// one-based DS\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 139,
            "comment": "// O(log n)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 139,
            "comment": "// min?\n"
        },
        "Heuristic": [
            "H2",
            "H12"
        ]
    },
    {
        "nl": {
            "id": 139,
            "comment": "// O(log n), update = increment\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 139,
            "comment": "// min?\n"
        },
        "Heuristic": [
            "H2",
            "H12"
        ]
    },
    {
        "nl": {
            "id": 140,
            "comment": "// System.out.println(i + \" \" + ans);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 140,
            "comment": "// Binary search (note boundaries in the caller)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 140,
            "comment": "// A[] is ceilIndex in the caller\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 140,
            "comment": "// Add boundary case, when array size is one\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 140,
            "comment": "//System.out.println(\"LCS for len : \" + size);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 140,
            "comment": "// always points empty slot\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 140,
            "comment": "//System.out.println(\"Index : \" + i + \" value : \" + A[i]);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 141,
            "comment": "//\t\tfor (int i = 1; i <= n + 2; i++) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 141,
            "comment": "//\t\t\tpw.print(sg.query(i, i) + cost[i - 1] + \" \");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 141,
            "comment": "//\t\t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 141,
            "comment": "//\t\tpw.println();\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 141,
            "comment": "//\t\tpw.println(Arrays.toString(cost));\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 141,
            "comment": "//\t\tpw.println();\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 141,
            "comment": "// 1-based DS, OOP\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 141,
            "comment": "// the number of elements in the array as a power of 2 (i.e. after padding)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 141,
            "comment": "// no. of nodes = 2*N - 1, we add one to cross out index zero\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 141,
            "comment": "// O(n)\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 141,
            "comment": "// O(log n)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 141,
            "comment": "// O(log n)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 142,
            "comment": "/*\n    Java might be good for Competitive Programming but Python still rocks!!!!!!!!!\n\n\n                            pppppppppppppppppppp\n                         ppppp  ppppppppppppppppppp\n                      ppppppp    ppppppppppppppppppppp\n                      pppppppp  pppppppppppppppppppppp\n                      pppppppppppppppppppppppppppppppp\n                              pppppppppppppppppppppppp\n       ppppppppppppppppppppppppppppppppppppppppppppppp  pppppppppppppppppppp\n      pppppppppppppppppppppppppppppppppppppppppppppppp  ppppppppppppppppppppp\n     ppppppppppppppppppppppppppppppppppppppppppppppppp  pppppppppppppppppppppp\n    ppppppppppppppppppppppppppppppppppppppppppppppp    pppppppppppppppppppppppp\n   pppppppppppppppppppppppppppppppppppppppppppppp     pppppppppppppppppppppppppp\n  ppppppppppppppppppppppppppppppppppppppppppppp      pppppppppppppppppppppppppppp\n  pppppppppppppppppppppppppppppppp               pppppppppppppppppppppppppppppppp\n  pppppppppppppppppppppppppppp     pppppppppppppppppppppppppppppppppppppppppppppp\n  ppppppppppppppppppppppppppp    pppppppppppppppppppppppppppppppppppppppppppppppp\n    pppppppppppppppppppppppp  pppppppppppppppppppppppppppppppppppppppppppppppppp\n     ppppppppppppppppppppppp  ppppppppppppppppppppppppppppppppppppppppppppppppp\n      pppppppppppppppppppppp  ppppppppppppppppppppppppppppppppppppppppppppppp\n       ppppppppppppppppppppp  ppppppppppppppppppppppppppppppppppppppppppppp\n                              pppppppppppppppppppppppp\n                              pppppppppppppppppppppppppppppppp\n                              pppppppppppppppppppppp  pppppppp\n                              ppppppppppppppppppppp    ppppppp\n                                 ppppppppppppppppppp  ppppp\n                                    pppppppppppppppppppp\n*/"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 142,
            "comment": "//                    System.out.println(LIS + \" \" + arr[i] + \" \" + index);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 143,
            "comment": "/* prln(last + 1, b[i], lb, ub);\n                for (int j = last + 1; j < b[i]; ++j) {\n                    pr(a[j]);\n                    pr(' ');\n                }\n                prln(); */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 143,
            "comment": "// prln(ans);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 143,
            "comment": "// prln(tail);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 143,
            "comment": "// references\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 143,
            "comment": "// IBIG = 1e9 + 7\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 143,
            "comment": "// IMAX ~= 2e9\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 143,
            "comment": "// LMAX ~= 9e18\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 143,
            "comment": "// constants\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 143,
            "comment": "// math util\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 143,
            "comment": "// array util\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 143,
            "comment": "// input\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 143,
            "comment": "// output\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 144,
            "comment": "// Best LCS yet.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 144,
            "comment": "// Changes = total length - size of LCS\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 145,
            "comment": "/*\nIf you want to aim high, aim high\nDon't let that studying and grades consume you\nJust live life young\n******************************\nWhat do you think? What do you think?\n1st on Billboard, what do you think of it\nNext is a Grammy, what do you think of it\nHowever you think, I\u2019m sorry, but shit, I have no fcking interest\n*******************************\nI'm standing on top of my Monopoly board\nThat means I'm on top of my game and it don't stop\ntil my hip don't hop anymore\nhttps://www.a2oj.com/Ladder16.html\n*******************************\nShining through the city with a little funk and soul\n*/"
        },
        "Heuristic": [
            "H2",
            "H7",
            "H9",
            "H12"
        ]
    },
    {
        "nl": {
            "id": 145,
            "comment": "//www.a2oj.com/Ladder16.html\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 146,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 148,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 148,
            "comment": "//        System.out.println(len);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 148,
            "comment": "//        int[] res = new int[len];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 148,
            "comment": "//        for (int i = tail[len - 1]; i >= 0; i = prev[i]) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 148,
            "comment": "//            res[--len] = a[i];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 148,
            "comment": "//        }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 148,
            "comment": "//        return res;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 149,
            "comment": "//--------------------------------------------------------\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 150,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 150,
            "comment": "//\t\tfor(int j=0;j<input.length;j++) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 150,
            "comment": "//            System.out.println(j+\" \"+input[j]+\" \"+b[j]);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 150,
            "comment": "//        }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 150,
            "comment": "//System.out.println(j);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 151,
            "comment": "//        InputReader in = new InputReader(new FileInputStream(\"input.txt\"));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 151,
            "comment": "//        PrintWriter out = new PrintWriter(new BufferedOutputStream(new FileOutputStream(\"milkvisits.out\")));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 151,
            "comment": "//\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 151,
            "comment": "//        long start = System.currentTimeMillis();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 151,
            "comment": "//        out.flush();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 152,
            "comment": "// coached by rainboy\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 153,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 153,
            "comment": "//\t\t\t\tUtilities.Debug.dbg(ans);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 154,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 154,
            "comment": "// sc.nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 156,
            "comment": "/*\n    Fixing old WA code.\n */"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 156,
            "comment": "//created by Whiplash99\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 157,
            "comment": "//Sub_To_Errichto\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 157,
            "comment": "//static final long MOD = 998244353L;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 157,
            "comment": "//Publicly Available Code from Stack Overflow\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 158,
            "comment": "//998244353;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 158,
            "comment": "// solve the problem here\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 158,
            "comment": "//\t   \t\tout = new PrintWriter(\"output.txt\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 158,
            "comment": "//s.nextInt();   \n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 158,
            "comment": "//        \tout.print(\"Case #\" + i + \": \");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 158,
            "comment": "// subtracted i so that I don't have to make strictly increasing\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 158,
            "comment": "// rather array a should be non decreasing now\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 158,
            "comment": "// which positions cannot be changed\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 158,
            "comment": "// input => 1, 2, 1, 1, 3, 5, 1\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 158,
            "comment": "// fixed => 0, 0, 1, 0, 1, 0, 0\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 158,
            "comment": "// answer is just (size(segment) - lis(segment))\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 158,
            "comment": "// do this for each segment separately\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 158,
            "comment": "// always points empty slot \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 158,
            "comment": "//    out.println(Arrays.toString(array));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 158,
            "comment": "// new smallest value \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 158,
            "comment": "// A[i] wants to extend largest subsequence \n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 158,
            "comment": "// A[i] wants to be current end candidate of an existing \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 158,
            "comment": "// subsequence. It will replace ceil value in tailTable \n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 159,
            "comment": "// 0-based indexing\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 159,
            "comment": "// change to min(a, b) or (a+b) for different ops\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 159,
            "comment": "// for sum, res = 0; for min, res = -inf ..etc\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 160,
            "comment": "// System.out.println(lo+\" \"+hi+\" \"+mid);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 160,
            "comment": "// one-based DS\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 160,
            "comment": "// O(log n)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 160,
            "comment": "// min?\n"
        },
        "Heuristic": [
            "H2",
            "H12"
        ]
    },
    {
        "nl": {
            "id": 160,
            "comment": "// O(log n), update = increment\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 160,
            "comment": "// min?\n"
        },
        "Heuristic": [
            "H2",
            "H12"
        ]
    },
    {
        "nl": {
            "id": 161,
            "comment": "// package com.company;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 161,
            "comment": "//****Use Integer Wrapper Class for Arrays.sort()****\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 161,
            "comment": "//        t = scan.nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 162,
            "comment": "//out = new PrintWriter(new File(\"out.txt\"));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 162,
            "comment": "//PrintWriter out = new PrintWriter(System.out);\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 162,
            "comment": "//in = new Reader(new FileInputStream(\"in.txt\"));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 162,
            "comment": "//Reader in = new Reader();\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 162,
            "comment": "//<>\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 162,
            "comment": "// Leaf node will have a single element\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 162,
            "comment": "// Recurse on the left child\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 162,
            "comment": "// Recurse on the right child\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 162,
            "comment": "// Internal node will have the sum of both of its children\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 162,
            "comment": "// Leaf node\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 162,
            "comment": "// If idx is in the left child, recurse on the left child\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 162,
            "comment": "// if idx is in the right child, recurse on the right child\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 162,
            "comment": "// Internal node will have the sum of both of its children\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 162,
            "comment": "// range represented by a node is completely outside the given range\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 162,
            "comment": "// range represented by a node is completely inside the given range\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 162,
            "comment": "// range represented by a node is partially inside and partially outside the given range\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 164,
            "comment": "//input\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 164,
            "comment": "//            graph[(int)e].add(new long[] {s,w});\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 164,
            "comment": "//\u56de\u8f66\uff0c\u7a7a\u884c\u60c5\u51b5\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 165,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 166,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author aryssoncf\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 167,
            "comment": "// System.out.println(i + \" \" + ans);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 167,
            "comment": "// Best LCS yet.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 167,
            "comment": "// Changes = total length - size of LCS\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 168,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Sparsh Sanchorawala\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 169,
            "comment": "/**\n * Accomplished using the EduTools plugin by JetBrains https://plugins.jetbrains.com/plugin/10081-edutools\n */"
        },
        "Heuristic": [
            "H1",
            "H9"
        ]
    },
    {
        "nl": {
            "id": 169,
            "comment": "//plugins.jetbrains.com/plugin/10081-edutools\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 169,
            "comment": "// Write your solution here\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 169,
            "comment": "// Read & augment a\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 169,
            "comment": "// Read & augment b\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 169,
            "comment": "// Solve\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 170,
            "comment": "//--------------------------------------------------------\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 171,
            "comment": "//created by Whiplash99\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 173,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 175,
            "comment": "// if ((e = map.floorEntry(key)) != null && e.getValue() >= val)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 175,
            "comment": "// return;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 175,
            "comment": "// one-based DS\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 175,
            "comment": "// O(log n)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 175,
            "comment": "// min?\n"
        },
        "Heuristic": [
            "H2",
            "H12"
        ]
    },
    {
        "nl": {
            "id": 175,
            "comment": "// O(log n), update = increment\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 175,
            "comment": "// min?\n"
        },
        "Heuristic": [
            "H2",
            "H12"
        ]
    },
    {
        "nl": {
            "id": 176,
            "comment": "/**/"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 176,
            "comment": "/*********************************************Constants***********************************/"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 176,
            "comment": "/*****************************************Solution Begins*********************************/"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 176,
            "comment": "/****************************************Solution Ends*************************************/"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 176,
            "comment": "/***************************************Precision Printing*********************************/"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 176,
            "comment": "/**************************************Bit Count************************************/"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 176,
            "comment": "/******************************************Graph******************************************/"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 176,
            "comment": "/******************************************Pair*****************************************/"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 176,
            "comment": "/*****************************************DEBUG********************************************/"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 176,
            "comment": "/************************************Modular Exponentiation********************************/"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 176,
            "comment": "/********************************************GCD*******************************************/"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 176,
            "comment": "//debug(input[B[i]],input[B[i-1]]);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 176,
            "comment": "//debug(\"hihi\",i);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 176,
            "comment": "// static void addEdge(int a,int b,int c){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 176,
            "comment": "//     graph[a].add(new Pair(b,c));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 176,
            "comment": "// }    \n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 177,
            "comment": "// System.out.println(lo+\" \"+hi+\" \"+mid);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 177,
            "comment": "// one-based DS\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 177,
            "comment": "// O(log n)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 177,
            "comment": "// min?\n"
        },
        "Heuristic": [
            "H2",
            "H12"
        ]
    },
    {
        "nl": {
            "id": 177,
            "comment": "// O(log n), update = increment\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 177,
            "comment": "// min?\n"
        },
        "Heuristic": [
            "H2",
            "H12"
        ]
    },
    {
        "nl": {
            "id": 181,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author tarek\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 182,
            "comment": "//System.out.println(n+\" \"+k);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 182,
            "comment": "//System.out.println(\"Pulled out \"+u);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 182,
            "comment": "//System.out.println(\"Put : \"+a+\" \"+map.get(a));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 182,
            "comment": "//System.out.println(\"Put : \"+b+\" \"+map.get(b));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 184,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 186,
            "comment": "/**\n\t * @param args\n\t */"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 186,
            "comment": "/*\n\t\t * \n\t\t * \n\t\t * Given two integers n, k. \n\t\t *  1 <= n <= 10^18\n\t\t *  2 <= k <= 10^18\n\t\t *  \n\t\t *  At Each step you can do one of the following operations\n\t\t *  \n\t\t *  \n\t\t *  1. subtract 1 from n\n\t\t *  2. divide n by k if n is divisible by k\n\t\t *\n\t\t *  Convert n to 0 in minimum possible steps. Print this minimum steps for given n,k.\n\t\t *  \n\t\t *  Test case 1. n = 25, k = 4\n\t\t *  \n\t\t *  25 -> 24 -> 6 -> 5 -> 4 -> 1 -> 0 // 6 steps\n\t\t *  \n\t\t *  Test case 2. n = 1000, k = 3\n\t\t *  \n\t\t *  1000 -> 999 -> 333 -> 111 -> 37 -> 36 -> 12 -> 4 -> 3 -> 1 -> 0 // 10 steps\n\t\t */"
        },
        "Heuristic": [
            "H1",
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 186,
            "comment": "/*System.out.print( \" 0\");\n\t\t\tSystem.out.println();\n\t\t\t*/"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 186,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 186,
            "comment": "// 6 steps\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 186,
            "comment": "// 10 steps\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 186,
            "comment": "//System.out.print(n + \" --> \");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 186,
            "comment": "//steps++;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 189,
            "comment": "//System.out.println(n+\" \"+count);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 191,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author anand.oza\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 193,
            "comment": "/*\n\t\t * Another way if the polygon is convex 1. Triangulate the poylgon through p 2.\n\t\t * Check if sum areas == poygon area 3. Handle empty polygon\n\t\t */"
        },
        "Heuristic": [
            "H1",
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 193,
            "comment": "// s is a non-negative value\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 193,
            "comment": "// Cases to handle: collinear points, polygons with n < 3\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 193,
            "comment": "// first point = last point, counter-clockwise representation\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 193,
            "comment": "// clockwise/anti-clockwise check, for convex/concave polygons\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 193,
            "comment": "// negative value in case of clockwise\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 193,
            "comment": "// point or line\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 193,
            "comment": "// edit ccw check to accept collinear points\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 193,
            "comment": "// for convex/concave polygons - winding number algorithm\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 193,
            "comment": "// abs makes it work for clockwise\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 193,
            "comment": "// returns the left part of the polygon, swap a & b for the right part\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 193,
            "comment": "// necessary in case g[0] is not in the new polygon\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 193,
            "comment": "// all points are unique, remove duplicates, edit ccw to accept\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 193,
            "comment": "// collinear points\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 193,
            "comment": "// if(size < 0) size = 0 for empty set of points\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 193,
            "comment": "// center of mass\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 193,
            "comment": "// remove abs\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 193,
            "comment": "// for integer points and rotation by 90 (counterclockwise) : swap x and y,\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 193,
            "comment": "// negate x\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 193,
            "comment": "// rotate around p\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 193,
            "comment": "// reflection point of p on line l\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 193,
            "comment": "// returns true if it is on the line defined by a and b\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 193,
            "comment": "// returns true if it is on the ray whose start point is a and passes through b\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 193,
            "comment": "// implement equals()\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 193,
            "comment": "// returns true if it is on the left side of Line pq\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 193,
            "comment": "// add EPS to LHS if on-line points are accepted\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 193,
            "comment": "// angle AOB\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 193,
            "comment": "// distance between point p and a line defined by points a,\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 193,
            "comment": "// b (a != b)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 193,
            "comment": "// formula: c = a + u * ab\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 193,
            "comment": "// Another way: find closest point and calculate the distance between it and p\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 193,
            "comment": "// Another way: find closest point and calculate the distance between it and p\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 195,
            "comment": "/******************************\\\n * The solution is at the top *\n *                            *\n *   Created by : azhar556    *\n\\******************************/"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 195,
            "comment": "// err.println(nowN + \" \" + res);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 195,
            "comment": "// t = 1;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 195,
            "comment": "// Collections Arrays Math\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 199,
            "comment": "//YA SABEMOS QUE NO CUENTA XD JEJEJEJE\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 201,
            "comment": "/*\n *   ********   *******    ******** \t\n *   *          *    *           *\n *   *          *   *           * \n *   *          * *            *\n *   *          *   *         *\n *   ********   *    *       *\n */"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 201,
            "comment": "/*\n\t * seach algorithm\n\t */"
        },
        "Heuristic": [
            "H1",
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 201,
            "comment": "/*\n\t * pairs of <int,int> <double,double>\n\t */"
        },
        "Heuristic": [
            "H1",
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 201,
            "comment": "/*\n\t * for loop\n\t */"
        },
        "Heuristic": [
            "H1",
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 201,
            "comment": "/*display \n\t array\n\t */"
        },
        "Heuristic": [
            "H1",
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 201,
            "comment": "/*\n\t * input \n\t */"
        },
        "Heuristic": [
            "H1",
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 201,
            "comment": "// line length \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 203,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Akash\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 205,
            "comment": "/*double x1=Math.floor(n/k);\n                    long x=(long)x1;\n                    long y=x*k;\n                    long y2=n-y;\n                    sum=sum+y2;\n                    n=n-y2;*/"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 205,
            "comment": "//@Manan Parmar\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 205,
            "comment": "//========================================================================\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 205,
            "comment": "// checking character in string \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 205,
            "comment": "// Function to return the XOR  \n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 205,
            "comment": "// of the given strings  \n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 205,
            "comment": "// Lengths of the given strings  \n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 205,
            "comment": "// Make both the strings of equal lengths  \n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 205,
            "comment": "// by inserting 0s in the beginning  \n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 205,
            "comment": "// Updated length  \n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 205,
            "comment": "// To store the resultant XOR  \n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 206,
            "comment": "//package BINARY;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 206,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 210,
            "comment": "/* MOHD SADIQ*/"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 211,
            "comment": "//package com.krakn.CF.A.A1175;\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 211,
            "comment": "//                System.out.println(n + \" - \" + count);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 211,
            "comment": "//                System.out.println(n + \" - \" + count);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 213,
            "comment": "/******************************************************************************************\n     *****************************************************************************************/"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 213,
            "comment": "/****************************************************************************************\n     *****************************************************************************************/"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 213,
            "comment": "// TODO Auto-generated constructor stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 214,
            "comment": "/* abhi2601 */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 214,
            "comment": "/*class Pair implements Comparable<Pair> {\n        int a;\n        int c;\n        Pair(int a, int c) {\n            this.a = a;\n            this.c = c;\n        }\n        public boolean equals(Object o) {\n            Pair p = (Pair) o;\n            return this.a == p.a && this.c == this.c;\n        }\n        public int hashCode() {\n            return Long.hashCode(a) * 27 + Long.hashCode(c) * 31;\n        }\n\n        public int compareTo(Pair p) {\n            return Integer.compare(this.c,p.c);\n        }\n    }*/"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 214,
            "comment": "/*static class Pair2{\n        int a,b;\n        Pair2(int a, int b){\n            this.a=a;\n            this.b=b;\n        }\n    }\n    static class Comp implements Comparator<String>{\n        public int compare(String x,String y){\n            return x.length()-y.length();\n        }\n    }*/"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 214,
            "comment": "/*File in=new File(\"input.txt\");\n        File out=new File(\"output.txt\");\n        Scanner sc= null;\n        try {\n            sc = new Scanner(in);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n        try {\n            w=new PrintWriter(out);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }*/"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 214,
            "comment": "//static PrintWriter w;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 216,
            "comment": "/* start */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 217,
            "comment": "/* package codechef; // don't place package name! */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 217,
            "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 217,
            "comment": "// don't place package name! */\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 218,
            "comment": "//System.out.println(n);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 218,
            "comment": "//System.out.println(output);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 218,
            "comment": "//System.out.println(\"divided \" +  n);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 218,
            "comment": "//System.out.println(temp);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 218,
            "comment": "//System.out.println(temp%3);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 218,
            "comment": "//System.out.println(\"subtracted \"+ n);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 218,
            "comment": "//System.out.println(59%3);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 220,
            "comment": "/*static long gcd(long a,long b)\n    {\n    if(b==0)\n    return a;\n    else\n    return gcd(b,a%b);\n    }*/"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 220,
            "comment": "/*static boolean valid(int i,int j)\n    {\n    if(i<4 && i>=0 && j<4 && j>=0)\n    return true;\n    else\n    return false;\n    }*/"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 221,
            "comment": "//package code.forces;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 222,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author test\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 223,
            "comment": "// TODO Auto-generated catch block\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 223,
            "comment": "// TODO Auto-generated catch block\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 225,
            "comment": "// System.out.println(z);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 225,
            "comment": "// System.out.println(z);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 229,
            "comment": "/* Create temp arrays */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 229,
            "comment": "/*Copy data to temp arrays*/"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 229,
            "comment": "/* Merge the temp arrays */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 229,
            "comment": "/* Copy remaining elements of L[] if any */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 229,
            "comment": "/* Copy remaining elements of R[] if any */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 229,
            "comment": "//import javafx.util.*; \n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 229,
            "comment": "//import java.lang.*;\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 229,
            "comment": "//return (a.y)-(b.y);\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 229,
            "comment": "// line length \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 229,
            "comment": "// Find sizes of two subarrays to be merged \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 229,
            "comment": "// Initial indexes of first and second subarrays \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 229,
            "comment": "// Initial index of merged subarry array \n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 229,
            "comment": "// Main function that sorts arr[l..r] using \n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 229,
            "comment": "// merge() \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 229,
            "comment": "// Find the middle point \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 229,
            "comment": "// Sort first and second halves \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 229,
            "comment": "// Merge the sorted halves \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 229,
            "comment": "// static int n;static ArrayList<Pair> arr1;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 229,
            "comment": "//static int len;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 229,
            "comment": "// System.out.println(n%k);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 229,
            "comment": "//   ans++;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 229,
            "comment": "// Returns factorial of n \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 230,
            "comment": "/*private static int steps(long N, long K){\n        int counter = 0;\n        while(N != 0){\n            if(N % K == 0){\n                N = N / K;\n            }else{\n                N--;\n            }\n            counter++;\n        }\n        return counter;\n    }*/"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 230,
            "comment": "//long start = System.currentTimeMillis();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 231,
            "comment": "/**\n *\n * @author Lenovo\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 236,
            "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 236,
            "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 238,
            "comment": "//@author Haya\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 240,
            "comment": "//-- In order to prevent having to subtract 1's O(n) times,\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 240,
            "comment": "//-- we calculate the number of one to be subtracted in order\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 240,
            "comment": "//-- to reach the next divisor of k\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 243,
            "comment": "// end test cases\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 243,
            "comment": "// end main\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 247,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 248,
            "comment": "/* Create temp arrays */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 248,
            "comment": "/*Copy data to temp arrays*/"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 248,
            "comment": "/* Merge the temp arrays */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 248,
            "comment": "/* Copy remaining elements of L[] if any */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 248,
            "comment": "/* Copy remaining elements of R[] if any */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 248,
            "comment": "// Function to sort by column\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 248,
            "comment": "// Using built-in sort function Arrays.sort\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 248,
            "comment": "// Compare values according to columns\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 248,
            "comment": "// To sort in descending order revert\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 248,
            "comment": "// the '>' Operator\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 248,
            "comment": "// End of function call sort().\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 248,
            "comment": "// Merge sort\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 248,
            "comment": "// Find sizes of two subarrays to be merged\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 248,
            "comment": "// Initial indexes of first and second subarrays\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 248,
            "comment": "// Initial index of merged subarry array\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 248,
            "comment": "// Main function that sorts arr[l..r] using\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 248,
            "comment": "// merge()\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 248,
            "comment": "// Find the middle point\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 248,
            "comment": "// Sort first and second halves\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 248,
            "comment": "// Merge the sorted halves\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 248,
            "comment": "// Merge sort ends\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 250,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 253,
            "comment": "// line length\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 253,
            "comment": "// Initialize result\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 253,
            "comment": "// Update x if it is more than or\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 253,
            "comment": "// equal to p\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 253,
            "comment": "// If y is odd, multiply x with result\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 253,
            "comment": "// y must be even now\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 253,
            "comment": "// y = y/2\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 253,
            "comment": "// While i divides n, print i and divide n\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 253,
            "comment": "//Reader r = new Reader();\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 253,
            "comment": "//PrintWriter writer=new PrintWriter(System.out);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 253,
            "comment": "//Scanner r = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 254,
            "comment": "/**\n *  @author Ivan Pryvalov (ivan.pryvalov@gmail.com)\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 254,
            "comment": "/**\n     * Added 26.04.2013.\n     * See KROK 2013, Round 1, Problem D.\n     */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 254,
            "comment": "/**\n         * Problem specific or general?\n         * O(N * alpha)\n         */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 254,
            "comment": "/**\n         * @param index1 range 0..n-1\n         * @param index2\n         */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 254,
            "comment": "/*\n        //Added 20.02.2017.\n        //See Codeforces Round 398, Div.2, C.\n        // Recoursive call to dfs function may result in either MTL or StackOverflow.\n        // Codeforces provide stacksize 64M\n\n        private void dfs_no_recursion(int root, IntConsumer dfs_post){\n            int[] stack = new int[N];\n            int[] stackInt = new int[N];\n            int iStack = 0;\n            stack[iStack] = root;\n            stackInt[iStack++] = 0;\n            while(true){\n                Node node = nodes[stack[iStack-1]];\n                int childIdx = stackInt[iStack-1];\n                if (childIdx < node.children.size()){\n                    stack[iStack] = node.children.get(childIdx).idx;\n                    stackInt[iStack++] = 0;\n                }else{\n                    dfs_post.accept(node.idx);\n\n                    iStack--;\n                    if (iStack==0){\n                        break;\n                    }\n                    stackInt[iStack-1]++;\n                }\n            }\n        }\n        */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 254,
            "comment": "//EventType.GOOGLE_CODE_JAM;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 254,
            "comment": "//use outGlobal.println()   and   outGlobal.flush()\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 254,
            "comment": "// T \\in {0,1}. If T=0, it will be read from the input.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 254,
            "comment": "// if 'null', it reads data from std-in.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 254,
            "comment": "// Check if you generate data on fly\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 254,
            "comment": "//--------------------------------------------------------------------\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 254,
            "comment": "//--------------------------------------------------------------------\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 254,
            "comment": "// write all responses in the proper order\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 254,
            "comment": "// Case #1: RES\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 254,
            "comment": "//generate a randomized test with the maximal input values\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 254,
            "comment": "////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 254,
            "comment": "// Link about multithreading: http://stackoverflow.com/questions/4521983/java-executorservice-that-blocks-on-submission-after-a-certain-queue-size\n"
        },
        "Heuristic": [
            "H1",
            "H9"
        ]
    },
    {
        "nl": {
            "id": 254,
            "comment": "// ------------- Some stardard tools that are currently not tested.\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 254,
            "comment": "//adopt for the lists of adjacent vertices\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 254,
            "comment": "//dfs from source to sink\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 254,
            "comment": "//increase path\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 254,
            "comment": "// O(alpha(n))\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 254,
            "comment": "// O(N alpha(N)) ==> see find()\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 254,
            "comment": "//Added 20.02.2017.\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 254,
            "comment": "//See Codeforces Round 398, Div.2, C.\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 254,
            "comment": "// Recoursive call to dfs function may result in either MTL or StackOverflow.\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 254,
            "comment": "// Codeforces provide stacksize 64M\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 254,
            "comment": "////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 254,
            "comment": "/// Typically, you don't want to edit anything below\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 254,
            "comment": "///////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 254,
            "comment": "//important to read long-string tokens properly\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 254,
            "comment": "//!!!\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 254,
            "comment": "// Reads token. Spacebar is separator char.\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 254,
            "comment": "// Spacebar is included as separator char\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 256,
            "comment": "/**\n *\n * @author alanl\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 264,
            "comment": "/**\n * Created by user on 8/12/2017.\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 264,
            "comment": "/*\n                if (text.contains(space)){\n                     String[] splitText = text.split(space);\n\n                    ArrayList<Integer> subCounts = new ArrayList<>();\n\n                     for (int i = 0; i < splitText.length; i++){\n\n                         for (int a = 0; i < splitText[i].length(); a++){\n                             int subCount = 0;\n                            if ((splitText[i].substring(a, a+1)).matches(\"([A-Z])\")){\n                                subCount++;\n                            }\n                             subCounts.add(subCount);\n                         }\n                     }\n                        Collections.sort(subCounts);\n                        count = subCounts.get(subCounts.size()-1);\n                }else{\n                    for (int i = 0; i < n; i++) {\n                    if ((text.substring(i, i + 1)).matches(\"([A-Z])\"))\n                        count++;\n                }*/"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 264,
            "comment": "//while (sc.hasNext()) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 264,
            "comment": "//   text = sc.next();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 264,
            "comment": "//n = text.length();\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 264,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 264,
            "comment": "//System.out.println(count);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 268,
            "comment": "/**\n * Built using CHelper plug-in Actual solution is at the top\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 269,
            "comment": "//System.out.println(\"ch: \" + text.charAt(i));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 272,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 273,
            "comment": "//sc.nextLine();\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 274,
            "comment": "// Meticulous\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 276,
            "comment": "/**\n * Created by fxpark on 2017-08-22.\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 277,
            "comment": "// \u0420\u0430\u0437\u043c\u0435\u0440 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 277,
            "comment": "// \u0412\u0435\u0440\u0448\u0438\u043d\u0430 \u0441\u0442\u0435\u043a\u0430\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 277,
            "comment": "// \u041a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 277,
            "comment": "// \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0441\u0442\u0435\u043a\u0430\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 277,
            "comment": "// \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 277,
            "comment": "// \u041f\u043e\u043a\u0430 \u043d\u0435\u0442 \u043d\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 277,
            "comment": "// \u0420\u0430\u0437\u043c\u0435\u0449\u0435\u043d\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043d\u0430 \u0432\u0435\u0440\u0448\u0438\u043d\u0435 \u0441\u0442\u0435\u043a\u0430\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 277,
            "comment": "// \u0423\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435 top, \u0432\u0441\u0442\u0430\u0432\u043a\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 277,
            "comment": "// \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0441 \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u0441\u0442\u0435\u043a\u0430\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 277,
            "comment": "// \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 277,
            "comment": "// \u0427\u0442\u0435\u043d\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0441 \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u0441\u0442\u0435\u043a\u0430\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 277,
            "comment": "// true, \u0435\u0441\u043b\u0438 \u0441\u0442\u0435\u043a \u043f\u0443\u0441\u0442\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 277,
            "comment": "// true, \u0435\u0441\u043b\u0438 \u0441\u0442\u0435\u043a \u043f\u043e\u043b\u043e\u043d\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 278,
            "comment": "// https://codeforces.com/problemset/problem/837/A\n"
        },
        "Heuristic": [
            "H2",
            "H9"
        ]
    },
    {
        "nl": {
            "id": 278,
            "comment": "// Close scanner\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 279,
            "comment": "/*  for(int k=0;k<l;k++)\n        {\n            System.out.println(a[k]);\n        }*/"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 279,
            "comment": "//  System.out.println(n);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 279,
            "comment": "// System.out.println(s);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 279,
            "comment": "// System.out.println(l);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 279,
            "comment": "// System.out.println(a[i]);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 280,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author _disturbed_\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 281,
            "comment": "//import java.text.*;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 281,
            "comment": "//    final long MOD = (long)1e9+7, IINF = (long)1e19;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 281,
            "comment": "//    final int MAX = (int)1e5+1, MX = (int)1e7+1, INF = (int)1e9;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 281,
            "comment": "//    DecimalFormat df = new DecimalFormat(\"0.00000000\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 281,
            "comment": "//    final double EPS = 1e-8;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 284,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 290,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 292,
            "comment": "/**\n * Created by nitin.s on 03/08/17.\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 292,
            "comment": "//package codeforces;\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 297,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 298,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 298,
            "comment": "//\tcount(\"1, 4, 7, 5, 9, 10, 6, 11, 12, 13\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 298,
            "comment": "//\tpermute(\"cdabe\", 3);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 301,
            "comment": "/* package whatever; // don't place package name! */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 301,
            "comment": "// don't place package name! */\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 302,
            "comment": "//package TIM;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 306,
            "comment": "/** call this method to initialize reader for InputStream */"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 306,
            "comment": "/** get next word */"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 306,
            "comment": "//TODO add check for eof if necessary\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 314,
            "comment": "// your code goes here\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 315,
            "comment": "/* package whatever; // don't place package name! */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 315,
            "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 315,
            "comment": "// don't place package name! */\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 315,
            "comment": "// your code goes here\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 318,
            "comment": "//System.out.println(str);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 327,
            "comment": "/**\n * Created by slay on 8/3/17.\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 330,
            "comment": "/*\n\t\tfor(int i = 0 ; i < n ; i++){\n\t\t\tif(s[i] == ' '){\n\t\t\t\tmax = Math.max(max, len);\n\t\t\t\tlen = 0;\n\t\t\t}else if(s[i] >= 'A' && s[i] <= 'Z'){\n\t\t\t\tlen += 1;\n\t\t\t}\n\t\t\tStdOut.println(\"i = \" + i + \" len = \" + len + \" \" + s[i]);\n\t\t}\n\t\t*/"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 330,
            "comment": "// not that important to reset delimeter, since now scanner is empty\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 330,
            "comment": "// but let's do it anyway\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 330,
            "comment": "// we could use readAll.trim().split(), but that's not consistent\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 330,
            "comment": "// because trim() uses characters 0x00..0x20 as whitespace\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 330,
            "comment": "// don't include first token if it is leading whitespace\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 333,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author captainTurtle\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 335,
            "comment": "/*Scanner in = null;\n        try {\n            in = new Scanner(new File(\"c:/Users/alex/code/HackerRank/JavaCode/input.txt\"));\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }*/"
        },
        "Heuristic": [
            "H1",
            "H4",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 335,
            "comment": "//System.in\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 335,
            "comment": "//freopen(\"c:/Users/alex/code/HackerRank/JavaCode/input.txt\", \"r\", stdin);\n"
        },
        "Heuristic": [
            "H1",
            "H4"
        ]
    },
    {
        "nl": {
            "id": 335,
            "comment": "//FastReader in = new FastReader();\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 335,
            "comment": "//char[] st=lns[i].toCharArray();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 337,
            "comment": "//asci\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 337,
            "comment": "//System.out.println(lineToArr[0]);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 337,
            "comment": "//System.out.println(line);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 337,
            "comment": "//System.out.println((int)letters[j]);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 337,
            "comment": "//System.out.println(letters[j]);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 337,
            "comment": "//   System.out.println(answer);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 338,
            "comment": "//reads in the next string\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 338,
            "comment": "// System.out.println(\"here\");\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 338,
            "comment": "//  System.out.println(i+\" xx\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 338,
            "comment": "//   System.out.println(ans);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 338,
            "comment": "//  System.out.println(m);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 338,
            "comment": "//  System.out.println(m+\" \"+j+\" \"+ans);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 338,
            "comment": "//            else{\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 338,
            "comment": "//                out.println(N);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 338,
            "comment": "//                for (int i = 0; i <str.length ; i++) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 338,
            "comment": "//\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 338,
            "comment": "//                    out.print(str[i]+\" \");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 338,
            "comment": "//                }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 338,
            "comment": "//            }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 339,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 339,
            "comment": "// palandrome has at most one char with odd count\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 339,
            "comment": "// can have at most 192 divisors, so 192 lengths to consider\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 339,
            "comment": "// length of each one\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 339,
            "comment": "//                    out.printLine(\"HERE\", key, row, numStr);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 339,
            "comment": "// length of each one\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 340,
            "comment": "//String test = \"D-large\";\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 340,
            "comment": "//ConsoleIO io = new ConsoleIO(new FileReader(\"D:\\\\Dropbox\\\\code\\\\practice\\\\jb\\\\src\\\\\" + test + \".in\"), new PrintWriter(new File(\"D:\\\\Dropbox\\\\code\\\\practice\\\\jb\\\\src\\\\\" + test + \"-out.txt\")));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 340,
            "comment": "//public char readChar(){try {return (char)br.read();}catch (Exception ex){ return 0; }}\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 341,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author pandusonu\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 345,
            "comment": "//T=in.readInt();\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 345,
            "comment": "//out.println(co+\" \"+ce);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 345,
            "comment": "//out.println(ce+\" \"+co);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 345,
            "comment": "//\tout.println(sto.count());\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 345,
            "comment": "//\tout.println(ste.count());\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 345,
            "comment": "//\t\tout.println((N/len)/2);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 346,
            "comment": "// ======================================================\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 346,
            "comment": "// ======================================================\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 346,
            "comment": "// ////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 348,
            "comment": "/* Create temp arrays */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 348,
            "comment": "/*Copy data to temp arrays*/"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 348,
            "comment": "/* Merge the temp arrays */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 348,
            "comment": "/* Copy remaining elements of L[] if any */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 348,
            "comment": "/* Copy remaining elements of R[] if any */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 348,
            "comment": "/* Create temp arrays */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 348,
            "comment": "/*Copy data to temp arrays*/"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 348,
            "comment": "/* Merge the temp arrays */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 348,
            "comment": "/* Copy remaining elements of L[] if any */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 348,
            "comment": "/* Copy remaining elements of R[] if any */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 348,
            "comment": "//        Reader in = new Reader();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 348,
            "comment": "//we are operating inside box\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 348,
            "comment": "//if value does not stretches till right bound then just copy it.\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 348,
            "comment": "//otherwise try to see if there are more matches.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 348,
            "comment": "// Merges two subarrays of arr[].\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 348,
            "comment": "// First subarray is arr[l..m]\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 348,
            "comment": "// Second subarray is arr[m+1..r]\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 348,
            "comment": "// Find sizes of two subarrays to be merged\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 348,
            "comment": "// Initial indexes of first and second subarrays\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 348,
            "comment": "// Initial index of merged subarry array\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 348,
            "comment": "// Main function that sorts arr[l..r] using\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 348,
            "comment": "// merge()\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 348,
            "comment": "// Find the middle point\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 348,
            "comment": "// Sort first and second halves\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 348,
            "comment": "// Merge the sorted halves\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 348,
            "comment": "// Merges two subarrays of arr[].\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 348,
            "comment": "// First subarray is arr[l..m]\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 348,
            "comment": "// Second subarray is arr[m+1..r]\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 348,
            "comment": "// Find sizes of two subarrays to be merged\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 348,
            "comment": "// Initial indexes of first and second subarrays\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 348,
            "comment": "// Initial index of merged subarry array\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 348,
            "comment": "// Main function that sorts arr[l..r] using\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 348,
            "comment": "// merge()\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 348,
            "comment": "// Find the middle point\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 348,
            "comment": "// Sort first and second halves\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 348,
            "comment": "// Merge the sorted halves\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 348,
            "comment": "// line length\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 349,
            "comment": "/*\n15\naaaaaaaaaaabbbc\n\n */"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 350,
            "comment": "/*private class Cell implements Comparable<Cell> {\n\t\tint u, v, s;\n\n\t\tpublic Cell(int u, int v, int s) {\n\t\t\tthis.u = u;\n\t\t\tthis.v = v;\n\t\t\tthis.s = s;\n\t\t}\n\n\t\tpublic int hashCode() {\n\t\t\treturn Objects.hash();\n\t\t}\n\n\t\tpublic int compareTo(Cell other) {\n\t\t\treturn (Long.compare(s, other.s) != 0 ? (Long.compare(s, other.s))\n\t\t\t\t\t: (Long.compare(v, other.v) != 0 ? Long.compare(v, other.v) : Long.compare(u, other.u)))\n\t\t\t\t\t& ((Long.compare(s, other.s) != 0 ? (Long.compare(s, other.s))\n\t\t\t\t\t\t\t: (Long.compare(u, other.v) != 0 ? Long.compare(u, other.v) : Long.compare(v, other.u))));\n\t\t}\n\n\t\tpublic String toString() {\n\t\t\treturn this.u + \" \" + this.v;\n\t\t}\n\t}*/"
        },
        "Heuristic": [
            "H1",
            "H7",
            "H12"
        ]
    },
    {
        "nl": {
            "id": 350,
            "comment": "// out.close();\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 350,
            "comment": "// tr(System.currentTimeMillis() - s + \"ms\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 350,
            "comment": "// min ST\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 350,
            "comment": "// if(si==idx+1)\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 350,
            "comment": "// new CODEFORCES().soln();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 350,
            "comment": "// return Integer.compare(val, other.val);\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 350,
            "comment": "// other.v));//((Long.compare(u, other.u) != 0 ? (Long.compare(u, other.u)):\n"
        },
        "Heuristic": [
            "H1",
            "H12"
        ]
    },
    {
        "nl": {
            "id": 350,
            "comment": "// (Long.compare(v, other.v)))\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 350,
            "comment": "// &(Long.compare(u, other.v) != 0 ? (Long.compare(u, other.v)):\n"
        },
        "Heuristic": [
            "H1",
            "H12"
        ]
    },
    {
        "nl": {
            "id": 350,
            "comment": "// (Long.compare(v, other.u))));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 350,
            "comment": "// System.out.println(l+\" \"+r+\" \"+ans);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 350,
            "comment": "// for(int i : arr) System.out.print(i+\" \");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 350,
            "comment": "// System.out.println();\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 350,
            "comment": "// System.out.println(mid1+\" \"+ cnt1+\" \"+mid2+\" \"+cnt2);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 350,
            "comment": "// SSystem.out.println(arr[x]+\" \"+ans);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 350,
            "comment": "// return Integer.compare(val, other.val);\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 350,
            "comment": "// ((Long.compare(u,\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 350,
            "comment": "// 1-indexed array, In this array We save cumulative\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 350,
            "comment": "// information to perform efficient range queries and\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 350,
            "comment": "// updates\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 350,
            "comment": "// Extracting the portion up to the first significant one of the\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 350,
            "comment": "// binary representation of 'ind' and decrementing ind by that\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 350,
            "comment": "// number\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 350,
            "comment": "// Extracting the portion up to the first significant one of the\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 350,
            "comment": "// binary representation of 'ind' and incrementing ind by that\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 350,
            "comment": "// number\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 350,
            "comment": "//pmp[x1].add(new Pair(y1, z));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 350,
            "comment": "// To Get Input\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 350,
            "comment": "// Some Buffer Methods\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 350,
            "comment": "// when nextLine, (isSpaceChar(b) && b != '\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 350,
            "comment": "// ')\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 353,
            "comment": "/**\n* @author me\n**/"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 354,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 355,
            "comment": "// \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u0445\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 358,
            "comment": "//REMINDERS:\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 358,
            "comment": "//- CHECK FOR INTEGER-OVERFLOW BEFORE SUBMITTING\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 358,
            "comment": "//- CAN U BRUTEFORCE OVER SOMETHING, TO MAKE IT EASIER TO CALCULATE THE SOLUTION\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 363,
            "comment": "// odd\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 363,
            "comment": "// while\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 363,
            "comment": "// solve\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 364,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 365,
            "comment": "/*System.out.println(\"STRINGS \");\n            for (StringBuilder sb : list) {\n                System.out.println(sb.toString());\n            }*/"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 365,
            "comment": "/*\n20\nqqqoqqoqMoqMMMqqMMqM\n\n\n */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 366,
            "comment": "/*\n    20\n11111111111111111123\n     */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 366,
            "comment": "//        System.out.println(mig);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 366,
            "comment": "//create\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 366,
            "comment": "//print\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 367,
            "comment": "// System.out.println(A+  \" \"  + B);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 368,
            "comment": "//nothing found.\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 369,
            "comment": "/**\n * Created by leen on 23/10/2017.\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 370,
            "comment": "//>>>BaZ<<<//\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 370,
            "comment": "//NoSuchElementException -> EOF\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 371,
            "comment": "// odd len\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 372,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Aman Kumar Singh\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 372,
            "comment": "//pn(ar);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 373,
            "comment": "/*if (odds >= len / 2) {\n\t\t\tSystem.out.println(len);\n\t\t\tfor (char c : s.toCharArray())\n\t\t\t\tSystem.out.print(c + \" \");\n\t\t\treturn;\n\t\t}*/"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 374,
            "comment": "//\t\t\t\t\tlast++;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 376,
            "comment": "//return 0;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 377,
            "comment": "/**\n * Created by dtnha on 10/20/2017.\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 377,
            "comment": "/**\n         * call this method to initialize reader for InputStream\n         */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 377,
            "comment": "/**\n         * get next word\n         */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 377,
            "comment": "//TODO add check for eof if necessary\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 378,
            "comment": "/*for(Integer i: divisors)\n\t\t\t\tout.println(i);*/"
        },
        "Heuristic": [
            "H1",
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 378,
            "comment": "/*out.println(\"---------------------\");\n\t\t\tfor(Character c: E)\n\t\t\t\tout.print(c+\"\");\n\t\t\tout.println();\n\t\t\tfor(Character c: O)\n\t\t\t\tout.print(c+\"\");\n\t\t\tout.println();\n\t\t\tout.println(odd+\" \"+even);\n\t\t\tout.println(\"--------------------\");*/"
        },
        "Heuristic": [
            "H1",
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 378,
            "comment": "/* General Helper Functions */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 378,
            "comment": "/* Heap Helper Functions */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 378,
            "comment": "//if(1>0) return;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 378,
            "comment": "// number\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 378,
            "comment": "// length\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 378,
            "comment": "// this is the answer\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 378,
            "comment": "// break some even into odds\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 378,
            "comment": "//\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 378,
            "comment": "//maxN = G.V()\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 378,
            "comment": "//number of vertices\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 379,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 381,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 382,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Pradyumn\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 383,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Aman Kumar Singh\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 383,
            "comment": "//pn(ar);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 384,
            "comment": "// 48 57 97 122 65 90\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 384,
            "comment": "// in = new FastScanner(new FileInputStream(\".in\"));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 384,
            "comment": "// out = new PrintWriter(new FileOutputStream(\".out\"));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 385,
            "comment": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 385,
            "comment": "/**\n *\n * @author rokk-\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 385,
            "comment": "/**\n     * @param args the command line arguments\n     */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 385,
            "comment": "// TODO code application logic here\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 386,
            "comment": "// #stopthecleancode\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 389,
            "comment": "// cost to perfect i skills\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 389,
            "comment": "// cost to bring bottom i-1 skills to the same level\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 391,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 392,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Egor Kulikov (egor@egork.net)\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 393,
            "comment": "/**\n * Created by nitin.s on 27/03/16.\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 393,
            "comment": "//package codeforces;\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 394,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author AlexFetisov\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 395,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 395,
            "comment": "//ternary search\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 397,
            "comment": "// last element smaller than mid\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 398,
            "comment": "//build minC;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 398,
            "comment": "//\tSystem.out.print(minC[i] + \" \" );\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 398,
            "comment": "//build maxC;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 398,
            "comment": "//\t\tSystem.out.print(temp + \" \");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 398,
            "comment": "//\tSystem.out.println(i + \" \" + min);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 399,
            "comment": "/**\n * @author iisergeev ilya_sergeev@rgs.ru\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 399,
            "comment": "//package CodeForces.Round339;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 400,
            "comment": "/**\n * @author Don Li\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 400,
            "comment": "// make a copy of A and sort\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 400,
            "comment": "// sum[i] = sum of range [i,n)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 400,
            "comment": "// enum i, the number of maximized elements\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 400,
            "comment": "// make min = B[p] as larger as possible\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 400,
            "comment": "// update skills\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 402,
            "comment": "/*boolean can(long a, int to) {\n        long nada = 0;\n        for (int i = 0; i < to; i++) {\n            nada += max(0, a - ms[i]);\n        }\n        return (nada <= m);\n    }*/"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 404,
            "comment": "/**\n * @author Don Li\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 404,
            "comment": "// make a copy of skills and sort them\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 404,
            "comment": "// pre-process: sum[i] = the sum of the first i skills\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 404,
            "comment": "// calc the force for init state\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 404,
            "comment": "// enum the number of elements to maximize (greedy: always maximize the top i elements)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 404,
            "comment": "// the cost to maximize the top i elements\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 404,
            "comment": "// greedy: set the min value as larger as possible\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 404,
            "comment": "// update the answer\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 404,
            "comment": "// update the original skills\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 404,
            "comment": "// print the answer\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 406,
            "comment": "//BufferedReader br = new BufferedReader( new FileReader(\"in.txt\") );\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 406,
            "comment": "//BufferedReader br = new BufferedReader( new InputStreamReader( System.in ) );\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 407,
            "comment": "//if (leftPos == n) leftPos--;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 408,
            "comment": "//     Test.testing();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 408,
            "comment": "//\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 408,
            "comment": "//\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 408,
            "comment": "//        while(left<right-9) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 408,
            "comment": "//            int tr = (right - left) / 3;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 408,
            "comment": "//            int ll = left + tr;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 408,
            "comment": "//            int rr = ll + tr;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 408,
            "comment": "//            if (calc(ll) < calc(rr)) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 408,
            "comment": "//                left = ll;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 408,
            "comment": "//            } else right = rr;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 408,
            "comment": "//        }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 409,
            "comment": "/**\n * #\n * @author pttrung\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 409,
            "comment": "// PrintWriter out = new PrintWriter(new FileOutputStream(new File(\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 409,
            "comment": "// \"output.txt\")));\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 409,
            "comment": "// System.setOut(new PrintStream(new BufferedOutputStream(System.out), true));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 409,
            "comment": "//  br = new BufferedReader(new InputStreamReader(new FileInputStream(new File(\"input.txt\"))));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 410,
            "comment": "// practice with rainboy\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 412,
            "comment": "//n, A, cf, cm and m \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 412,
            "comment": "//powers needs to be a copy\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 413,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 414,
            "comment": "/**\n * Created by ilya\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 414,
            "comment": "//package CodeForces.Round339;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 415,
            "comment": "//if (leftPos == n) leftPos--;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 416,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Artem Gilmudinov\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 417,
            "comment": "//\t\tSystem.out.println(fmsl(0));\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 417,
            "comment": "//\t\tSystem.out.println(fmsl(1));\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 417,
            "comment": "//\t\tif(n>0)\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 417,
            "comment": "//\t\t\treturn;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 417,
            "comment": "//\t\tout.println(ans2);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\tint n = in.nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\tfor(int t = 0; t < 100000; t++)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\tRandom rand = new Random();\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\tint n = in.nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\tlong a = rand.nextInt(1000000000) + 1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\tlong cf = rand.nextInt(1001);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\tlong cm = rand.nextInt(1001);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\tlong m = rand.nextInt(10000001);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\tint[] input = new int[n];\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\tinput[x] = rand.nextInt((int)(a + 1));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\tskills[x] = new Skill(input[x], x);\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\t\tSystem.out.println(z + \" \" + min);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\tlong ans = -1;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\tfor(int i = 0; i <= n; i++)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t{\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\tlong top = 0;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\tfor(int j = 0; j < i; j++)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\t{\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\t\ttop += a - skills[n - j - 1].value;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\t\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\tif(top <= m)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\t{\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\t\tlong l = 0;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\t\tlong h = a;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\t\twhile(l < h)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\t\t{\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\t\t\tlong mid = (l + h + 1) / 2;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\t\t\t\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\t\t\tlong bot = 0;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\t\t\tfor(int j = 0; j < skills.length; j++)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\t\t\t{\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\t\t\t\tif(skills[j].value < mid)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\t\t\t\t{\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\t\t\t\t\tbot += mid - skills[j].value;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\t\t\t\t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\t\t\t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\t\t\t\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\t\t\tif(top + bot <= m)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\t\t\t{\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\t\t\t\tl = mid;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\t\t\t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\t\t\telse\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\t\t\t{\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\t\t\t\th = mid - 1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\t\t\t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\t\t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\t\t\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\t\tans = Math.max(ans, cf * i + cm * l);\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\tif(ans != force)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t{\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\tSystem.out.println(ans + \" \" + force);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t\tSystem.out.println(Arrays.toString(input));\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 418,
            "comment": "//\t\t\t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 419,
            "comment": "/**\n * @author Pavel Mavrin\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 419,
            "comment": "//        Arrays.sort(a);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 420,
            "comment": "/**\n * @author iisergeev ilya_sergeev@rgs.ru\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 420,
            "comment": "//package CodeForces.Round339;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 421,
            "comment": "//package round339;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 421,
            "comment": "// val level\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 421,
            "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 423,
            "comment": "// what is the max value i can bring the remaining elements to?\n"
        },
        "Heuristic": [
            "H1",
            "H12"
        ]
    },
    {
        "nl": {
            "id": 423,
            "comment": "// (l+1)*min - p[l+1] = budget\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 424,
            "comment": "/**\n * @auther chao\n * @date 16/1/15\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 425,
            "comment": "/* package codechef; // don't place package name! */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 425,
            "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 425,
            "comment": "// don't place package name! */\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 425,
            "comment": "// your code goes here\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 425,
            "comment": "//if (i == n -1 ) System.out.println(rem);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 425,
            "comment": "// calculate result\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 425,
            "comment": "//System.out.println(best + \" \" + maxNum + \" \" + minNum + \" \" + minLev + \" \" + cf + \" \" + cm);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 425,
            "comment": "// ouput best\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 425,
            "comment": "// Assign Value\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 426,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 427,
            "comment": "/* package whatever; // don't place package name! */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 427,
            "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 427,
            "comment": "// don't place package name! */\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 427,
            "comment": "// TODO code application logic here\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 429,
            "comment": "// should not happen\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 429,
            "comment": "//System.out.format(\"max = %d, i = %d, idx = %d, perfNum = %d\\n\", max, i, idx, perfNum);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 429,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 430,
            "comment": "/*2A*/"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 430,
            "comment": "/*b = a[p];\n\t\t\twhile (getSum(1, p) + mRemaining < 1L*A*b) {\n\t\t\t\tb --;\n\t\t\t\twhile (b < a[p])\n\t\t\t\t\tp--;\n\t\t\t}*/"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 430,
            "comment": "//out.println(\"k = \" + k);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 430,
            "comment": "//out.println(\"mRemaining = \" + mRemaining);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 430,
            "comment": "//out.println(\"p = \" + p);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 430,
            "comment": "// <= mRemaining\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 430,
            "comment": "//out.println(\"b = \" + b);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 432,
            "comment": "/**\n * Created by hama_du on 2016/01/21.\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 432,
            "comment": "// package codeforces.cr339.div1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 433,
            "comment": "/*System.out.println(\"ans array is\");\n        for(int i=0;i<=n;i++)\n        {\n            System.out.println(ans[i]+\" \"+t2[i]);\n        }\n        System.out.println(\"ans closed\");*/"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 434,
            "comment": "/**\n         *\n         */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 434,
            "comment": "/**\n         *\n         */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 434,
            "comment": "// SOLUTION!!!\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 434,
            "comment": "// HACK ME PLEASE IF YOU CAN!!!\n"
        },
        "Heuristic": [
            "H4"
        ]
    },
    {
        "nl": {
            "id": 434,
            "comment": "// PLEASE!!!\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 434,
            "comment": "// PLEASE!!!\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 434,
            "comment": "// PLEASE!!!\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 434,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 434,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 434,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 434,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 434,
            "comment": "////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 434,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 434,
            "comment": "/////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 434,
            "comment": "/////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 434,
            "comment": "///////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 434,
            "comment": "///////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 434,
            "comment": "////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 434,
            "comment": "////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 434,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 434,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 434,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 434,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 434,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 434,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 434,
            "comment": "//////////////// Some useful constants and functions ////////////////\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 434,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 434,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 434,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 434,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 434,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 434,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 434,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 434,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 436,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 438,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 439,
            "comment": "//shuffle, then sort \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 440,
            "comment": "/**\n * Created by raggzy on 4/18/2016.\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 440,
            "comment": "//package codeforces.cfr339div1;\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 440,
            "comment": "// increase only not full\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 441,
            "comment": "/*if (n == 8654 ) {\n                System.out.println(l+\" \" + r+ \" -- \"+mid_left + \" \" + mid_right);\n            }*/"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 441,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 441,
            "comment": "// test\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 441,
            "comment": "//  out.println(testa + \" \" + cnt + \" \" + mmmin);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 441,
            "comment": "// test end\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 442,
            "comment": "// InputReader in = new InputReader(new FileInputStream(new File(\"input.txt\")));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 442,
            "comment": "// PrintWriter out = new PrintWriter(System.out);\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 442,
            "comment": "// all perfect\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 442,
            "comment": "// set perfects\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 442,
            "comment": "// determine minSkill pos\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 442,
            "comment": "// determine minSkill\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 442,
            "comment": "// answer\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 443,
            "comment": "//~~~~~~~~~~~~~~~~~~~~~~~~~~~ template ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 444,
            "comment": "//System.out.println(i + \" \" + low + \" \" + mid + \" \" + high + \" \" + pos + \" \" + pos*mid + \" \" + temp[pos]);\t\t\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 444,
            "comment": "//System.out.println(i + \" \" + ((low - 1)*cm + (n - i)*cf) + \" \" + curr + \" \" + low + \" \" + left);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 444,
            "comment": "//System.out.println(ans);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 444,
            "comment": "//System.out.println(min+ \" \" + a + \" \" + start);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 445,
            "comment": "/*\nKeep solving problems.\n*/"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 445,
            "comment": "//[c, n - 1]\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 445,
            "comment": "//[l1, n - 1]\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 446,
            "comment": "//new Codeforces().run();\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 448,
            "comment": "/*\n\n */"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 448,
            "comment": "// hi is the number im looking for\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 448,
            "comment": "// h is the min V\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 450,
            "comment": "//if (left != n) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 450,
            "comment": "//maxCan = Math.min(maxCan, a[left].value);\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 450,
            "comment": "//} else {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 450,
            "comment": "//}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 451,
            "comment": "//System.out.println(at_p+\" , \"+at_ind);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 452,
            "comment": "//~~~~~~~~~~~~~~~~~~~~~~~~~~~ template ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 453,
            "comment": "//all can be A\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 453,
            "comment": "//if(cf == 51) cout.println(\"NO NO 1 \" + \"j= \" + j);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 453,
            "comment": "//if(cf == 51) cout.println(\"NO NO 2 \" + \"j= \" + j);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 453,
            "comment": "//get ans and best idx\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 453,
            "comment": "//                if(cf== 51 && cm == 60){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 453,
            "comment": "//                    cout.println(\"-> \" + curans + \" \" + curmin + \" \" + (n - limit));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 453,
            "comment": "//                }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 453,
            "comment": "//if(allmoney < 0) cout.println(\"NO NO\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 453,
            "comment": "//this is local host\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 453,
            "comment": "//this is to be used when submitting code\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 454,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 458,
            "comment": "//2 3 5 6\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 460,
            "comment": "/**\n * Created by Reem on 19/11/2016.\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 463,
            "comment": "/**\n * @Created by sbhowmik on 21/11/18\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 465,
            "comment": "// begin import package net.leksi.contest;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 465,
            "comment": "// end import package net.leksi.contest;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 466,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Alex\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 469,
            "comment": "/*\n\t\tint b=2,i,sum=0,n;\n\t\t\n\t\tn=in.nextInt();\n\t\tString[] s= new String[n+1];\n\t\t\n\t\t\n\t\tint[] a=new int[6];\n\t\tboolean fl=false;\n\t\tin.nextLine();\n\t\tfor(i=1;i<=n;i++)\n\t\t{\n\t\t\ts[i]=in.nextLine();\n\t\t\tif(s[i].contains(\"OO\") && !fl) {fl=true; s[i].replaceFirst(\"OO\",\"++\");}\n\t\t}\n\t\t\n\t\t\n\t\tif(fl)\n\t\t{\n\t\t\tSystem.out.println(\"YES\");\n\t\t\tfor(i=1;i<=n;i++) System.out.println(s[i]);\n\t\t}\n\t\telse\n\t\t\tSystem.out.println(\"NO\");\n\t\t*/"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 469,
            "comment": "//System.out.println(a[n][n]);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 469,
            "comment": "//System.out.print((s==0)?(s):(-1));\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 470,
            "comment": "//lets conver the case for 256\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 470,
            "comment": "//lets conver the case for 32\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 471,
            "comment": "//package Codeforces;\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 472,
            "comment": "/**\n * @author ramilagger\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 473,
            "comment": "/**\n * Created by mar1 on 11/17/16.\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 475,
            "comment": "// 2\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 475,
            "comment": "// 3\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 475,
            "comment": "// 5\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 475,
            "comment": "// 6\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 478,
            "comment": "//\t\t\tSystem.out.println(\"YES\");\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 478,
            "comment": "//\t\tSystem.out.println(r + \" \" + c);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 478,
            "comment": "//\t\tSystem.out.println(ans);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 478,
            "comment": "//\t\t\tSystem.out.println(0);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 478,
            "comment": "//\t\tSystem.out.println((int)Math.sqrt(n));\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 478,
            "comment": "//\t\t\tif (n % 2 != 0) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 478,
            "comment": "//\t\t\t\tn -= 1;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 478,
            "comment": "//\t\t\t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 478,
            "comment": "//\t\t\tn -= 2;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 478,
            "comment": "//\t\tSystem.out.println(patrick(n, k, z));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 479,
            "comment": "//package github;\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 480,
            "comment": "/**\n * Created by akshaysharma on 05/12/16.\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 481,
            "comment": "/**\n * 5 1 3 4\n \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n 800\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 482,
            "comment": "/**\n *\n * @author gabriel\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 483,
            "comment": "//System.out.println(output);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 483,
            "comment": "//System.out.println(k6);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 484,
            "comment": "/* package codechef; // don't place package name! */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 484,
            "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 484,
            "comment": "// don't place package name! */\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 489,
            "comment": "//shuffle, then sort \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 489,
            "comment": "//\t\t\tlong[] readLongArray(long n) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 489,
            "comment": "//\t\t\t\tlong[] a=new long[n];\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 489,
            "comment": "//\t\t\t\tfor (int i=0; i<n; i++) a[i]=nextLong();\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 489,
            "comment": "//\t\t\t\treturn a;\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 489,
            "comment": "//\t\t\t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 494,
            "comment": "// Scanner sc = new Scanner(\"in.txt\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 505,
            "comment": "/**\n * Created by Luis Ngo on 4/1/2017.\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 508,
            "comment": "// returns S % N, where N is a power of 2\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 509,
            "comment": "// if (nums[2] > 0)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 509,
            "comment": "// {\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 509,
            "comment": "//     if (nums[5] > 0 && nums[6] > 0)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 509,
            "comment": "//     {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 509,
            "comment": "//         sum += 256;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 509,
            "comment": "//         nums[2]--; nums[5]--; nums[6]--;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 509,
            "comment": "//         continue;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 509,
            "comment": "//     } \n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 509,
            "comment": "//     else if (nums[3] > 0)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 509,
            "comment": "//     {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 509,
            "comment": "//         sum += 32;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 509,
            "comment": "//         nums[3]--; nums[2]--; \n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 509,
            "comment": "//         continue;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 509,
            "comment": "//     }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 509,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 509,
            "comment": "// break;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 510,
            "comment": "//System.out.println();\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 510,
            "comment": "//fn();\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 510,
            "comment": "//System.out.println();\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 511,
            "comment": "// System.out.println(\"Enter Numbers\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 511,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 514,
            "comment": "/**\n * \n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 514,
            "comment": "/**\n * @author Bibek Regmi - bbkregmi\n * @versionDec 15, 2016\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 519,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 521,
            "comment": "//\tScanner scan=new Scanner(System.in);\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 521,
            "comment": "//\t\tint t=in.nextInt();\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 521,
            "comment": "//while (c != '\\n' && c != '\\r' && c != '\\t' && c != -1)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 521,
            "comment": "//c = read();\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 523,
            "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 523,
            "comment": "// your code goes here\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 525,
            "comment": "/*\n      int n      = sc.nextInt();        // read input as integer\n      long k     = sc.nextLong();       // read input as long\n      double d   = sc.nextDouble();     // read input as double\n      String str = sc.next();           // read input as String\n      String s   = sc.nextLine();       // read whole line as String\n      */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 525,
            "comment": "//so first of all,  we want to make as many 256's as possible \n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 525,
            "comment": "//we an achieve this\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 525,
            "comment": "// read input as integer\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 525,
            "comment": "// read input as long\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 525,
            "comment": "// read input as double\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 525,
            "comment": "// read input as String\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 525,
            "comment": "// read whole line as String\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 526,
            "comment": "// Running Number Of TestCases (t)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 526,
            "comment": "// Main Solution (AC)\t\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 526,
            "comment": "// Number of Divisor for Range [l, r]\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 526,
            "comment": "// x is the target value or key\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 526,
            "comment": "// x is the key or target value\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 526,
            "comment": "// xy == 0, for sorting wrt X-Axis\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 526,
            "comment": "// xy == 1, for sorting wrt Y-Axis\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 526,
            "comment": "//                    writer.print(1);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 528,
            "comment": "//https://codeforces.com/problemset/problem/734/B\n"
        },
        "Heuristic": [
            "H2",
            "H9"
        ]
    },
    {
        "nl": {
            "id": 528,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 528,
            "comment": "//System.out.println(sum+\"  \"+k2);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 528,
            "comment": "//System.out.println(sum+\"  k2:\"+k2 + \"k5:\" +k5);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 528,
            "comment": "//System.out.println(sum+\"  \"+k2);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 530,
            "comment": "// some Garbage here //\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 532,
            "comment": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 532,
            "comment": "/**\n *\n * @author george\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 532,
            "comment": "/* Amusing Joke \n    String a,b,c;\n     a=s.next();b=s.next();c=s.next();\n     if((a.length()+b.length())!=c.length()){System.out.print(\"here\");System.out.print(\"NO\");}\n     else{\n         boolean x= true;\n         String agex=\"\";\n         if(checkAnagram(a, c)==false){System.out.print(\"here1\");x=false;}\n         else{\n             char [] g=a.toCharArray();\n             Arrays.sort(g);String ge=new String(g);a=ge;\n             g=b.toCharArray();Arrays.sort(g);ge=new String(b);b=ge;\n             g=c.toCharArray();Arrays.sort(g);ge=new String(c);c=ge;\n            if(isSubSequence(a, c, a.length(), c.length())){\n                 StringBuilder sb = new StringBuilder(c);String temp=\"\";\n                for (int i = 0; i < a.length(); i++) {\n                    temp+=a.charAt(i);\n                 c.replaceFirst(temp, \"\");temp=\"\";\n                   \n                }\n            }\n            else{x=false;}\n            if(isSubSequence(a, c, a.length(), c.length())){\n              StringBuilder sb = new StringBuilder(c);\n                for (int i = 0; i < b.length(); i++) {\n                  String temp=\"\";\n                    temp+=b.charAt(i);\n                 c.replaceFirst(temp, \"\");temp=\"\";\n                   \n                }\n            }\n            else{x=false;}\n            if(c.length()!=0){x=false;}\n    }if(x==false){System.out.print(\"NO\");}\n    else{System.out.print(\"YES\");}\n    }\n    */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 534,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 534,
            "comment": "// Problem http://codeforces.com/problemset/problem/734/B\n"
        },
        "Heuristic": [
            "H9"
        ]
    },
    {
        "nl": {
            "id": 534,
            "comment": "// For more solutions check https://github.com/jontiboss\n"
        },
        "Heuristic": [
            "H9"
        ]
    },
    {
        "nl": {
            "id": 534,
            "comment": "//line below is used many times, so this only needs to be computed once instead of three times.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 534,
            "comment": "//Count the smallest value of two,five and six. thats how many 256 numbers you could make.\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 534,
            "comment": "// remove the amount of twos needed in the making of the number 256, if the rest is bigger than 2 create as many 32 numbers as possible.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 534,
            "comment": "//<<8 is 2^8 = 256 , <<5 == 2^5=32\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 535,
            "comment": "//System.err.println(x);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 535,
            "comment": "//System.err.println(x);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 535,
            "comment": "// System.err.println(lo);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 535,
            "comment": "//    if((long)1 + (lo -1)* (long)4 == num) return lo*(long)2;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 535,
            "comment": "//    \n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 535,
            "comment": "//    if(((long)1 + (lo -1)* (long)4)+2 == num) return lo*(long)2;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 535,
            "comment": "//    else return lo*(long)2+ (long)1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 535,
            "comment": "// System.err.println(lo);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 535,
            "comment": "//    if((long)1 + (lo -1)* (long)4 == num) return lo*(long)2;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 535,
            "comment": "//    \n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 535,
            "comment": "//    if(((long)1 + (lo -1)* (long)4)+2 == num) return lo*(long)2;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 535,
            "comment": "//    else return lo*(long)2+ (long)1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 535,
            "comment": "//System.err.println(lo+\" \"+((long)3 + (lo -1)* (long)4)+\" \"+num);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 537,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author lebegio\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 539,
            "comment": "// false to System.in\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 539,
            "comment": "// Which attendant\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 539,
            "comment": "//n % 4 = [0, 1] [2, 3]\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 539,
            "comment": "// Last group\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 539,
            "comment": "// 1, 3\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 539,
            "comment": "// Order fdeabc\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 539,
            "comment": "// Movement\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 540,
            "comment": "/**\n * Created by spec on 22.10.2016.\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 541,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 542,
            "comment": "/**\n * Created by igarus on 27.10.2016.\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 544,
            "comment": "// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f catch \u30d6\u30ed\u30c3\u30af\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 544,
            "comment": "//stream = new FileInputStream(new File(\"dec.in\"));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 545,
            "comment": "//PrintWriter\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 545,
            "comment": "//BigInteger, BigDecimal\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 545,
            "comment": "//StringTokenizer, ArrayList\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 545,
            "comment": "//-----------------------------------------------------\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 547,
            "comment": "//\t\tSystem.out.println(time);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 550,
            "comment": "//e.printStackTrace();\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 551,
            "comment": "//private static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 551,
            "comment": "//private static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 554,
            "comment": "// Sworn to fight and die\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 555,
            "comment": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 555,
            "comment": "/**\n *\n * @author TaMeEm\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 555,
            "comment": "/**\n     * @param args the command line arguments\n     */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 555,
            "comment": "//package javaapplication1;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 555,
            "comment": "//System.out.println(ch);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 555,
            "comment": "//System.out.println(n);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 556,
            "comment": "//Scanner sc = new Scanner(new File(\"src/input.txt\"));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 560,
            "comment": "//Captain on duty!\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 560,
            "comment": "// reverse the given String\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 560,
            "comment": "// check whether the string is palindrome or not\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 560,
            "comment": "//desc order\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 560,
            "comment": "// Check from 2 to n-1\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 560,
            "comment": "//System.out.println(ans);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 563,
            "comment": "//            long x = row-3;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 563,
            "comment": "//            ans -= x;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 563,
            "comment": "//            ans -= x;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 564,
            "comment": "/**\n *\n * @author mohanad\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 564,
            "comment": "/**\n     * @param args the command line arguments\n     */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 565,
            "comment": "// Count of processed rows\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 565,
            "comment": "// Additional moving time\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 567,
            "comment": "/**\n * Created by vikas.k on 18/03/17.\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 567,
            "comment": "//out.println(time+\" \"+d+\" \"+r);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 568,
            "comment": "// System.out.println(past + \" \" + now);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 569,
            "comment": "//System.out.println(n);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 569,
            "comment": "//out.println(m+\" \"+m1+\" \"+m2+\" \"+m3);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 569,
            "comment": "// get the smallest of all number no need to check for higher values\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 569,
            "comment": "// if we pass through the array with all % == 0 return the value\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 569,
            "comment": "// so the only possible is 1\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 569,
            "comment": "// return smallest number of an array of int\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 569,
            "comment": "// Caculate value of Binomial Coefficient in bottom up manner\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 569,
            "comment": "// Base Cases\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 569,
            "comment": "// Calculate value using previosly stored values\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 569,
            "comment": "// All the i for which arr[i]==0 are prime numbers.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 569,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 571,
            "comment": "/**\n *\n * @author umang\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 572,
            "comment": "/**\n * Created by Everest on 22.10.2016.\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 573,
            "comment": "/**\n *\n * @author aboragab\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 573,
            "comment": "/**\n     * @param args the command line arguments\n     */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 575,
            "comment": "/**\n\t * @param args\n\t */"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 575,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 578,
            "comment": "/*\n        int n      = sc.nextInt();        // read input as integer\n        long k     = sc.nextLong();       // read input as long\n        double d   = sc.nextDouble();     // read input as double\n        String str = sc.next();           // read input as String\n        String s   = sc.nextLine();       // read whole line as String\n\n        int result = 3*n;\n        out.println(result);                    // print via PrintWriter\n        */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 578,
            "comment": "// Start writing your solution here. -------------------------------------\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 578,
            "comment": "// read input as integer\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 578,
            "comment": "// read input as long\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 578,
            "comment": "// read input as double\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 578,
            "comment": "// read input as String\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 578,
            "comment": "// read whole line as String\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 578,
            "comment": "// print via PrintWriter\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 578,
            "comment": "// Stop writing your solution here. -------------------------------------\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 578,
            "comment": "//-----------PrintWriter for faster output---------------------------------\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 578,
            "comment": "//-----------MyScanner class for faster input----------\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 578,
            "comment": "//--------------------------------------------------------\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 579,
            "comment": "//        if (line == 3)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 579,
            "comment": "//            time += 2;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 583,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Hieu Le\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 584,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Arthur Gazizov - Kazan FU #4.3 [2oo7]\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 586,
            "comment": "//System.out.println(x%4+\" \"+y);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 586,
            "comment": "//System.out.println(k1+\" \"+y);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 587,
            "comment": "/**\n * Created by nitin.s on 22/10/16.\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 587,
            "comment": "//package codeforces;\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 588,
            "comment": "/* package whatever; // don't place package name! */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 588,
            "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 588,
            "comment": "// don't place package name! */\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 588,
            "comment": "// your code goes here\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 590,
            "comment": "//        InputStream inputStream = new FileInputStream(\"sum.in\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 590,
            "comment": "//        OutputStream outputStream = new FileOutputStream(\"sum.out\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 590,
            "comment": "//        Path path = Paths.get(URI.create(\"file:///foo/bar/Main.java\"));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 590,
            "comment": "//        System.out.print(path.getName(200));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 590,
            "comment": "//        Path p = Paths.get(\"/foo/bar/Main.java\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 590,
            "comment": "//        for (Path e : p) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 590,
            "comment": "//            System.out.println(e);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 590,
            "comment": "//        }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 590,
            "comment": "//        out.println(\"t: \" + t + \", x: \" + x);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 592,
            "comment": "//stdin\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 592,
            "comment": "//System.err.println(\"Input: \" + line);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 592,
            "comment": "//System.out.println(\"I read this number: \" + val);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 592,
            "comment": "//System.out.println(\"I read this number: \" + val);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 592,
            "comment": "//String filePath=\"circles.in\";\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 592,
            "comment": "//readNextLine();\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 592,
            "comment": "//NextInt();\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 594,
            "comment": "//\t\tint test=in.nextInt();\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 594,
            "comment": "//while (c != '\\n' && c != '\\r' && c != '\\t' && c != -1)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 594,
            "comment": "//c = read();\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 596,
            "comment": "//        out = new PrintWriter(\"output.txt\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 596,
            "comment": "//        long start_time = System.nanoTime();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 596,
            "comment": "//        int t = nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 596,
            "comment": "//        int t = isDebug ? nextInt() : 1;\n"
        },
        "Heuristic": [
            "H1",
            "H12"
        ]
    },
    {
        "nl": {
            "id": 596,
            "comment": "//            out.print(\"Case #\" + (i + 1) + \": \");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 596,
            "comment": "//\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 596,
            "comment": "//        long end_time = System.nanoTime();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 596,
            "comment": "//        if (isDebug) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 596,
            "comment": "//            out.println(String.format(\"<<<<< %.6f >>>>>\", (end_time - start_time) / 1e9));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 596,
            "comment": "//        }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 598,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Van Hanh Pham <skyvn97> <vanhanh.pham@gmail.com>\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 599,
            "comment": "/**\n * Created by stem on 01.05.2016.\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 601,
            "comment": "//////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 601,
            "comment": "/////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 601,
            "comment": "//num += position;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 604,
            "comment": "/**\n\t\t * \n\t\t */"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 604,
            "comment": "/**\n\t\t * \n\t\t */"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 604,
            "comment": "// SOLUTION!!! \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 604,
            "comment": "// HACK ME PLEASE IF YOU CAN!!!\n"
        },
        "Heuristic": [
            "H4"
        ]
    },
    {
        "nl": {
            "id": 604,
            "comment": "// PLEASE!!!\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 604,
            "comment": "// PLEASE!!!\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 604,
            "comment": "// PLEASE!!!\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 604,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 604,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 604,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 604,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 604,
            "comment": "////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 604,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 604,
            "comment": "/////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 604,
            "comment": "/////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 604,
            "comment": "///////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 604,
            "comment": "///////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 604,
            "comment": "////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 604,
            "comment": "////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 604,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 604,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 604,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 604,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 604,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 604,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 604,
            "comment": "//////////////// Some useful constants and functions ////////////////\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 604,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 604,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 604,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 604,
            "comment": "/////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 605,
            "comment": "//        try {inputStream= new FileInputStream(file);} catch (FileNotFoundException ex){return;};\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 606,
            "comment": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 606,
            "comment": "/**\n *\n * @author Raed\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 606,
            "comment": "/**\n     * @param args the command line arguments\n     */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 606,
            "comment": "// TODO code application logic here\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 606,
            "comment": "//either 0 or 1\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 608,
            "comment": "/**\n * Created by arsen on 22.10.16.\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 609,
            "comment": "//int[] rowVal={1,2,1,2};\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 611,
            "comment": "//BufferedReader s = new BufferedReader(new FileReader(\"*.in\"));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 611,
            "comment": "//PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"*.out\")));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 611,
            "comment": "//StringTokenizer st = new StringTokenizer(s.readLine());\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 613,
            "comment": "/**\n * Created by Volodymyr Kovalenko\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 614,
            "comment": "/**\n\t * @param args\n\t */"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 615,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Niyaz Nigmatullin\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 616,
            "comment": "/*************************************************************** \n     * Solution\n     **************************************************************/"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 616,
            "comment": "/*************************************************************** \n     * Input \n     **************************************************************/"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 616,
            "comment": "/*************************************************************** \n     * Utility\n     **************************************************************/"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 617,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Niyaz Nigmatullin\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 618,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Niyaz Nigmatullin\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 619,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Niyaz Nigmatullin\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 620,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Niyaz Nigmatullin\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 621,
            "comment": "//package prac;\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 621,
            "comment": "//\t\t\ttr(cur, num[cur], min[cur], rn);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 621,
            "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 622,
            "comment": "////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 624,
            "comment": "//package round79;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 624,
            "comment": "//\tString INPUT = \"6 1 2 4 2 3 2 1 4 4 4 5 2 5 6 1\";\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 625,
            "comment": "//in = new Scanner(new File(\"in.txt\"));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 625,
            "comment": "//out = new PrintStream(new File(\"out.txt\"));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 625,
            "comment": "//int t = in.nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 625,
            "comment": "//for (int i=0; i<t; i++)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 629,
            "comment": "// in = new BufferedReader(new FileReader(filename+\".in\"));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 629,
            "comment": "// out = new BufferedWriter(new FileWriter(filename+\".out\"));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 629,
            "comment": "// new Thread(new Main()).start();\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 630,
            "comment": "//\t\tSystem.err.println(\"------------\");\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 630,
            "comment": "//\t\t\t\tSystem.err.println(\"kek \" + sum[v\t]);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 630,
            "comment": "//\t\tSystem.err.println(\"ans \" + ans);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 630,
            "comment": "//\t\tSystem.err.println(v + \" sum \" + sum[v] + \" sc \" + subcount[v]);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 630,
            "comment": "//\t\t\tSystem.err.println(ans);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 630,
            "comment": "//\t\tSystem.err.println(v + \" \" + ans + \" \" + subcount[v]);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 630,
            "comment": "//\t\tSystem.err.println(\"------------\");\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 630,
            "comment": "//\"\\'\" + ext + \" \" + cc + \"\\'\";\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 631,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Niyaz Nigmatullin\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 632,
            "comment": "//package prac;\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 632,
            "comment": "//\t\t\ttr(cur, num[cur], min[cur], rn);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 632,
            "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 633,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author AlexFetisov\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 634,
            "comment": "//cleaning\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 634,
            "comment": "//cleaning\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 636,
            "comment": "//BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 636,
            "comment": "//out.println(Arrays.toString(g[i]));\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 639,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author \"Johan Sannemo\"\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 641,
            "comment": "//\t\tPrintWriter out = new PrintWriter(System.out);\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 641,
            "comment": "//\t\tin.init(System.in);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 642,
            "comment": "//Scanner sc=new Scanner(System.in);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 643,
            "comment": "// public class Main\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 643,
            "comment": "// class code\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 643,
            "comment": "// public class Solution\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 643,
            "comment": "///////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 643,
            "comment": "// int t=nextInt();\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 643,
            "comment": "// for(int i=1;i<=t;i++)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 643,
            "comment": "// {\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 643,
            "comment": "//    // out.print(\"Case #\"+i+\": \");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 643,
            "comment": "//     solve();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 643,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 644,
            "comment": "// out.print(\"leaves: \"); out.println(leaves);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 644,
            "comment": "// out.println(\"step: \" + step + \" \" + re);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 644,
            "comment": "// out.println(\"added: \" + (step * 2 + re));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 646,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author unknown\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 647,
            "comment": "// ---------------------------------------------------------------------------\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 647,
            "comment": "// ---------------------------------------------------------------------------\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 650,
            "comment": "//in = new BufferedReader(new InputStreamReader((System.in)));\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 650,
            "comment": "//out = new PrintWriter(System.out);\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 651,
            "comment": "// TODO Auto-generated catch block\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 651,
            "comment": "// TODO Auto-generated catch block\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 651,
            "comment": "// TODO Auto-generated catch block\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 652,
            "comment": "/* Create temp arrays */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 652,
            "comment": "/*Copy data to temp arrays*/"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 652,
            "comment": "/* Merge the temp arrays */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 652,
            "comment": "/* Copy remaining elements of L[] if any */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 652,
            "comment": "/* Copy remaining elements of R[] if any */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 652,
            "comment": "/* Create temp arrays */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 652,
            "comment": "/*Copy data to temp arrays*/"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 652,
            "comment": "/* Merge the temp arrays */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 652,
            "comment": "/* Copy remaining elements of L[] if any */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 652,
            "comment": "/* Copy remaining elements of R[] if any */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 652,
            "comment": "//BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 652,
            "comment": "//Pass number of total nodes as parameter to the constructor\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 652,
            "comment": "//Returns an array with the smallest prime factor for each number and primes marked as 0\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 652,
            "comment": "//we are operating inside box\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 652,
            "comment": "//if value does not stretches till right bound then just copy it.\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 652,
            "comment": "//otherwise try to see if there are more matches.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 652,
            "comment": "// Merges two subarrays of arr[].\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 652,
            "comment": "// First subarray is arr[l..m]\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 652,
            "comment": "// Second subarray is arr[m+1..r]\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 652,
            "comment": "// Find sizes of two subarrays to be merged\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 652,
            "comment": "// Initial indexes of first and second subarrays\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 652,
            "comment": "// Initial index of merged subarry array\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 652,
            "comment": "// Main function that sorts arr[l..r] using\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 652,
            "comment": "// merge()\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 652,
            "comment": "// Find the middle point\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 652,
            "comment": "// Sort first and second halves\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 652,
            "comment": "// Merge the sorted halves\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 652,
            "comment": "// Merges two subarrays of arr[].\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 652,
            "comment": "// First subarray is arr[l..m]\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 652,
            "comment": "// Second subarray is arr[m+1..r]\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 652,
            "comment": "// Find sizes of two subarrays to be merged\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 652,
            "comment": "// Initial indexes of first and second subarrays\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 652,
            "comment": "// Initial index of merged subarry array\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 652,
            "comment": "// Main function that sorts arr[l..r] using\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 652,
            "comment": "// merge()\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 652,
            "comment": "// Find the middle point\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 652,
            "comment": "// Sort first and second halves\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 652,
            "comment": "// Merge the sorted halves\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 652,
            "comment": "// line length\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 653,
            "comment": "/**\n * Generated by Contest helper plug-in\n * Actual solution is at the bottom\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 654,
            "comment": "//package saratov11;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 655,
            "comment": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 655,
            "comment": "/**\n *\n * @author HavroninaTE\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 655,
            "comment": "//\u043e\u0431\u0445\u043e\u0434 \u043f\u043e \u043f\u0430\u0443\u043a\u0430\u043c\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 656,
            "comment": "/*\nbr = new BufferedReader(new FileReader(\"input.txt\"));\npw = new PrintWriter(new BufferedWriter(new FileWriter(\"output.txt\")));\nbr = new BufferedReader(new InputStreamReader(System.in));\npw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 656,
            "comment": "/* NOTEBOOK CODE */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 657,
            "comment": "//\t\tSystem.err.println(ans);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 658,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author El-Bishoy\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 659,
            "comment": "/*\n    int upper_bound(int[] A, int l, int r, int val) {// upper_bound(A+l,A+r,val)-A;\n        int pos = r;\n        r--;\n        while (l <= r) {\n            int mid = (l + r) >> 1;\n            if (A[mid] <= val) {\n                l = mid + 1;\n            } else {\n                pos = mid;\n                r = mid - 1;\n            }\n        }\n        return pos;\n    }/**/"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 659,
            "comment": "//  in = new BufferedReader(new InputStreamReader(System.in));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 659,
            "comment": "//  out = new PrintWriter(System.out);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 659,
            "comment": "// upper_bound(A+l,A+r,val)-A;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 660,
            "comment": "/**\n * 111118315581\n *\n * -3 3 2 3 2 3 2 3 -3 3 -3 3 -3 3 2 3\n *\n * @author pttrung\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 660,
            "comment": "//   public static long x, y, gcd;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 660,
            "comment": "//   public static int Mod = 1000000007;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 660,
            "comment": "// PrintWriter out = new PrintWriter(System.out);\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 660,
            "comment": "//    public static void extendEuclid(long a, long b) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 660,
            "comment": "//        if (b == 0) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 660,
            "comment": "//            x = 1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 660,
            "comment": "//            y = 0;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 660,
            "comment": "//            gcd = a;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 660,
            "comment": "//            return;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 660,
            "comment": "//        }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 660,
            "comment": "//        extendEuclid(b, a % b);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 660,
            "comment": "//        long x1 = y;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 660,
            "comment": "//        long y1 = x - (a / b) * y;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 660,
            "comment": "//        x = x1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 660,
            "comment": "//        y = y1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 660,
            "comment": "//\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 660,
            "comment": "//    }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 660,
            "comment": "// System.setOut(new PrintStream(new BufferedOutputStream(System.out), true));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 660,
            "comment": "//br = new BufferedReader(new InputStreamReader(System.in));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 661,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Jacob Jiang\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 662,
            "comment": "/*\n        return an array r of size 2.\n        r[0]: is the longest path that starts from startV;\n        r[1]: is the node that is the furthest away from startV.\n     */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 662,
            "comment": "//package codeforces.practice.oneVone.Nov06_2020;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 662,
            "comment": "//initReaderPrinter(false);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 662,
            "comment": "//solve(in.nextInt());\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 663,
            "comment": "//import java.util.*;\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 663,
            "comment": "//    sb.append(ans);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 663,
            "comment": "//  System.out.println(sb.toString());\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 664,
            "comment": "// OutputStream output = System.out;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 668,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 668,
            "comment": "//int max =0 ;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 668,
            "comment": "//for(int j=0;j<ni;j++)\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 668,
            "comment": "//max = Math.max(dfs(b,j,new boolean[ni]),max);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 668,
            "comment": "//ans += max;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 669,
            "comment": "// System.getProperty(\"ONLINE_JUDGE\")!=null;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 671,
            "comment": "/**\n * \n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 671,
            "comment": "/**\n * @author antonio081014\n * @date Oct 18, 2011, 12:53:55 PM\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 671,
            "comment": "/**\n\t * @param args\n\t */"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 671,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 671,
            "comment": "// for (int j = 0; j < node.size(); j++) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 671,
            "comment": "// System.out.print(\"Node \" + j + \":\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 671,
            "comment": "// for (int k = 0; k < node.get(j).next.size(); k++) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 671,
            "comment": "// System.out.print(node.get(j).next.get(k).data + \", \");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 671,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 671,
            "comment": "// System.out.println();\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 671,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 671,
            "comment": "// System.out.println(ret - 1);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 672,
            "comment": "// a\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 673,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author El-Bishoy\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 675,
            "comment": "// br = new BufferedReader(new InputStreamReader(System.in));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 675,
            "comment": "// out = new PrintWriter(System.out);\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 675,
            "comment": "// Locale.setDefault(Locale.US);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// static class Scanner {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// StreamTokenizer in;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 679,
            "comment": "// boolean forceMode = false;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 679,
            "comment": "//\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// Scanner(InputStream is, String codePage, boolean forceMode) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// in = new StreamTokenizer(new BufferedReader(new InputStreamReader(is)));\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 679,
            "comment": "// if (!forceMode) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// in.resetSyntax();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// in.wordChars(33, 255);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// in.whitespaceChars(0, 32);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "//\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// Scanner(InputStream is, String codePage) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// in = new StreamTokenizer(new BufferedReader(new InputStreamReader(is)));\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 679,
            "comment": "// if (!forceMode) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// in.resetSyntax();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// in.wordChars(33, 255);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// in.whitespaceChars(0, 32);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "//\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// String next() {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// try {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// in.nextToken();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// return in.sval;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// } catch (Exception e) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// throw new Error();\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 679,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "//\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// int nextInt() {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// if (forceMode) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// try {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// in.nextToken();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// return (int) in.nval;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// } catch (Exception e) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// throw new Error();\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 679,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// } else {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// return Integer.parseInt(next());\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "//\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// long nextLong() {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// if (forceMode) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// throw new Error(\"No long at force mod!\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// } else {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// return Long.parseLong(next());\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "//\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "//\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// double nextDouble() {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// if (forceMode) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// try {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// in.nextToken();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// return in.nval;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// } catch (Exception e) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// throw new Error();\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 679,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// } else {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// return Double.parseDouble(next());\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// TODO Auto-generated constructor stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 679,
            "comment": "// in = new Scanner(System.in);\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 679,
            "comment": "// out = new PrintWriter(System.out);\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 680,
            "comment": "// find diameter of tree by finding node furthest from a random node then finding node furthest from that node\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 680,
            "comment": "// returns [furthest node, dist]\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 680,
            "comment": "// references\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 680,
            "comment": "// IBIG = 1e9 + 7\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 680,
            "comment": "// IMAX ~= 2e10\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 680,
            "comment": "// LMAX ~= 9e18\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 680,
            "comment": "// constants\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 680,
            "comment": "// math util\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 680,
            "comment": "// array util\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 680,
            "comment": "// graph util\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 680,
            "comment": "// input\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 680,
            "comment": "// output\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 681,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 683,
            "comment": "//-----------------------------------------------------------------------------------\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 684,
            "comment": "//Scanner in = new Scanner(System.in);\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 685,
            "comment": "/**\n     * @param args\n     */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 685,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 685,
            "comment": "// for (int j = 0; j < node.size(); j++) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 685,
            "comment": "// System.out.print(\"Node \" + j + \":\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 685,
            "comment": "// for (int k = 0; k < node.get(j).next.size(); k++) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 685,
            "comment": "// System.out.print(node.get(j).next.get(k).data + \", \");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 685,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 685,
            "comment": "// System.out.println();\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 685,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 685,
            "comment": "// System.out.println(ret - 1);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 687,
            "comment": "/*int xx=253;\n    for(int i=1;i*i<=xx;i++)\n    {\n        if(xx%i==0)\n        {\n            System.out.println(i);\n            System.out.println(xx/i);\n        }\n    }*/"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 687,
            "comment": "//checks if the value is less than middle element of the array\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 687,
            "comment": "// calculate log2 N indirectly \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 687,
            "comment": "// using log() method \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 687,
            "comment": "// out.println(k);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 687,
            "comment": "//out.println(\"FUCK\");\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 687,
            "comment": "//out.println(max);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 687,
            "comment": "//java.util.Scanner scan=new java.util.Scanner(new File(\"mootube.in\"));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 687,
            "comment": "//PrintWriter out = new PrintWriter (new FileWriter(\"mootube.out\"));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 687,
            "comment": "//System.out.println(3^2);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 687,
            "comment": "//System.out.println(19%4);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 687,
            "comment": "//StringBuilder news=new StringBuilder(\"ab\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 687,
            "comment": "//news.deleteCharAt(1);\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 687,
            "comment": "//news.insert(0,'c');\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 687,
            "comment": "//news.deleteCharAt(0);\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 687,
            "comment": "//System.out.println(news);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 687,
            "comment": "//System.out.println(can(2,15));\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 687,
            "comment": "//System.out.println(LCM(2,2));00\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 687,
            "comment": "// System.out.println(31^15);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 687,
            "comment": "//System.out.println(\"bbabbbabbbabbbabbbabbbabbbabbbabbbabbbab\".length());\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 687,
            "comment": "//tt=scan.nextInt();\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 687,
            "comment": "//System.out.println(calc(91));\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 687,
            "comment": "//sieve(21000);\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 687,
            "comment": "//out.println(rr.x);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 689,
            "comment": "//Scanner in = new Scanner(System.in);\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 689,
            "comment": "// single node of degree 0\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 689,
            "comment": "// two nodes of degree 1\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 690,
            "comment": "//MyScanner sc = new MyScanner();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 690,
            "comment": "//out = new PrintWriter(new BufferedOutputStream(System.out));\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 690,
            "comment": "//out.close();\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 691,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author unknown\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 692,
            "comment": "//package codeforce;\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 693,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author bkand1908\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 693,
            "comment": "// u = 0\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 693,
            "comment": "// length = 0\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 693,
            "comment": "// u = 0\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 693,
            "comment": "// length = 0\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 694,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author unknown\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 694,
            "comment": "//            debug(\"graph\",graph);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 694,
            "comment": "//            debug(\"NOde Props\",nodeProps);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 697,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Nguyen Trung Hieu - vuondenthanhcong11@yahoo.com\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 699,
            "comment": "// find diameter of tree by finding node furthest from a random node then finding node furthest from that node\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 699,
            "comment": "// returns [furthest node, dist]\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 699,
            "comment": "// references\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 699,
            "comment": "// IBIG = 1e9 + 7\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 699,
            "comment": "// IMAX ~= 2e10\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 699,
            "comment": "// LMAX ~= 9e18\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 699,
            "comment": "// constants\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 699,
            "comment": "// math util\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 699,
            "comment": "// array util\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 699,
            "comment": "// graph util\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 699,
            "comment": "// input\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 699,
            "comment": "// output\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 700,
            "comment": "//package com.pb.codeforces.practice;\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 704,
            "comment": "// out.println(\"diam \" + (i + 1) + \" = \" + d);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 704,
            "comment": "// in = new BufferedReader(new InputStreamReader(System.in));\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 704,
            "comment": "// out = new PrintWriter(System.out);\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 707,
            "comment": "// prln(i, dep, dep2);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 707,
            "comment": "// references\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 707,
            "comment": "// IBIG = 1e9 + 7\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 707,
            "comment": "// IMAX ~= 2e10\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 707,
            "comment": "// LMAX ~= 9e18\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 707,
            "comment": "// constants\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 707,
            "comment": "// math util\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 707,
            "comment": "// array util\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 707,
            "comment": "// graph util\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 707,
            "comment": "// input\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 707,
            "comment": "// output\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 708,
            "comment": "/////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 708,
            "comment": "// IO\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 708,
            "comment": "/////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 708,
            "comment": "/////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 708,
            "comment": "/////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 708,
            "comment": "// pre - written\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 708,
            "comment": "/////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 708,
            "comment": "//////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 710,
            "comment": "////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 711,
            "comment": "//package CodeForces.DPTree;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 719,
            "comment": "//System.out.println(req + \" \" + curr);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 719,
            "comment": "//System.out.println(\"Mahin\");\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 723,
            "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 723,
            "comment": "// when nextLine, (isSpaceChar(b) && b != ' ')\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 725,
            "comment": "/**\n *\n * @author Saju\n *\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 725,
            "comment": "/*\n\n\n\n\n*/"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 725,
            "comment": "/*\n\t * return the number of elements in list that are less than or equal to the val\n\t */"
        },
        "Heuristic": [
            "H1",
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 725,
            "comment": "//\t\tScanner in = new Scanner(System.in);\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 725,
            "comment": "//         InputReader in = new InputReader(new FileInputStream(\"src/test.in\"));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 725,
            "comment": "//         PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"src/test.out\")));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 731,
            "comment": "/* package codechef; // don't place package name! */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 731,
            "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 731,
            "comment": "// don't place package name! */\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 731,
            "comment": "//System.out.println(ans);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 733,
            "comment": "//        int n = sc.nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 733,
            "comment": "//        int v = sc.nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 735,
            "comment": "// Add gas in one station\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 735,
            "comment": "// Drive to next station\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 738,
            "comment": "//        int t=sc.nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 738,
            "comment": "//        for(int ii=1;ii<=t;ii++)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 738,
            "comment": "//        {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 738,
            "comment": "//System.out.print(\"Case #\"+ii+\": \");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 738,
            "comment": "//        }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 740,
            "comment": "//    public static void floodfill(char[][] arr, boolean[][] visited, int row, int col){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 740,
            "comment": "//        visited[row][col] = true;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 740,
            "comment": "//        if (row != 0){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 740,
            "comment": "//            if (arr[row - 1][col] == '#' && !visited[row - 1][col]){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 740,
            "comment": "//                floodfill(arr, visited, row - 1, col);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 740,
            "comment": "//                visited[row - 1][col] = true;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 740,
            "comment": "//            }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 740,
            "comment": "//        }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 740,
            "comment": "//        if (row != arr.length - 1){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 740,
            "comment": "//            if (arr[row + 1][col] == '#' && !visited[row + 1][col]){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 740,
            "comment": "//                floodfill(arr, visited, row + 1, col);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 740,
            "comment": "//                visited[row + 1][col] = true;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 740,
            "comment": "//            }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 740,
            "comment": "//        }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 740,
            "comment": "//        if (col != 0){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 740,
            "comment": "//            if (arr[row][col - 1] == '#' && !visited[row][col - 1]){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 740,
            "comment": "//                floodfill(arr, visited, row, col - 1);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 740,
            "comment": "//                visited[row][col - 1] = true;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 740,
            "comment": "//            }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 740,
            "comment": "//        }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 740,
            "comment": "//        if (col != arr[0].length - 1){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 740,
            "comment": "//            if (arr[row][col + 1] == '#' && !visited[row][col + 1]){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 740,
            "comment": "//                floodfill(arr, visited, row, col + 1);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 740,
            "comment": "//                visited[row][col + 1] = true;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 740,
            "comment": "//            }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 740,
            "comment": "//        }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 740,
            "comment": "//    }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 741,
            "comment": "//        int tt = nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 749,
            "comment": "/* public static long primeFactorization(long n)\n        {\n             HashSet<Integer> a =new HashSet<Integer>();\n            long cnt=0;\n            for(int i=2;i*i<=n;i++)\n            {\n                while(a%i==0)\n                {\n                    a.add(i);\n                    a/=i;\n                }\n            }\n            if(a!=1)\n                cnt++;\n                //a.add(n);\n            return cnt;\n        }*/"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 749,
            "comment": "//a.add(n);\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 751,
            "comment": "//System.out.println(now+\" \"+ans);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 752,
            "comment": "/*int h=(n-1)/v;\n\t\t int g=(n-1)%v;\n\t\t for(int i=0;i<h;i++)\n\t\t {\n\t\t \ts=s+k*v;\n\t\t \tk++;\n\t\t }\n\t\t g=g*(h+1);\n\t\t s=s+g;\n\t\t System.out.println(s);*/"
        },
        "Heuristic": [
            "H1",
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 754,
            "comment": "//br = new BufferedReader( new FileReader(\"input.txt\") );\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 754,
            "comment": "//in = new Reader(\"input.txt\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 754,
            "comment": "//br = new BufferedReader( new InputStreamReader( System.in ) );\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 754,
            "comment": "//int t = in.nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 754,
            "comment": "// line length\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 756,
            "comment": "// public void findAllPrime(int n,ArrayList<Node> al,int s[])\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 756,
            "comment": "// {\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 756,
            "comment": "//     int curr = s[n];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 756,
            "comment": "//     int cnt = 1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 756,
            "comment": "//     while(n>1)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 756,
            "comment": "//     {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 756,
            "comment": "//         n/=s[n];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 756,
            "comment": "//         if(curr==s[n])\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 756,
            "comment": "//         {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 756,
            "comment": "//             cnt++;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 756,
            "comment": "//             continue;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 756,
            "comment": "//         }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 756,
            "comment": "//         Node n1 = new Node(curr,cnt);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 756,
            "comment": "//         al.add(n1);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 756,
            "comment": "//         curr=s[n];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 756,
            "comment": "//         cnt=1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 756,
            "comment": "//     }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 756,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 756,
            "comment": "// Note that this loop runs till square root \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 756,
            "comment": "// If divisors are equal, print only one \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 756,
            "comment": "// Otherwise print both \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 756,
            "comment": "// System.out.println(\"min1 \"+min);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 756,
            "comment": "// System.out.println(\"min \"+min);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 756,
            "comment": "// System.out.println(\"min \"+min);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 757,
            "comment": "/*\n        FileWriter writer = new FileWriter(\"input.txt\");\n        for(int i=1;i<=10000000;++i)\n        {\n            long a = Mother_Class.getRandomInteger(1, 100000000);\n            long b = Mother_Class.getRandomInteger(1, 100000000);\n            writer.write(a+\" \"+b+\"\\n\");\n        }        \n        writer.close();*/"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 757,
            "comment": "//long start = System.currentTimeMillis();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 757,
            "comment": "//long end = System.currentTimeMillis();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 757,
            "comment": "//p.println(\"Execution Time: \"+(end-start)+\"ms\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 757,
            "comment": "// line length\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 758,
            "comment": "// int t;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 758,
            "comment": "// Pair(int f,int s, PrintWriter w){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 758,
            "comment": "// this.p = p;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 758,
            "comment": "// this.w = w;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 758,
            "comment": "// this.t = t;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 758,
            "comment": "// 1 for swap\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 758,
            "comment": "// e1.w.println(\"**\"+e1.f+\" \"+e2.f);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 758,
            "comment": "// e1.w.println(\"##\"+e1.f+\" \"+e2.f);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 758,
            "comment": "//// recursive dfs\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 758,
            "comment": "// int n = dist.length - 1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 758,
            "comment": "// int max = 1;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 758,
            "comment": "// dist[x] = dist[s] + 1;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 758,
            "comment": "// w.println(\"* \" + s + \" \" + x + \" \" + p);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 758,
            "comment": "// max = Math.max(max,(n-p));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 758,
            "comment": "//// iterative BFS\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 758,
            "comment": "// dist--;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 758,
            "comment": "// dist--;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 758,
            "comment": "// siz++;\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 758,
            "comment": "//////////////////////////////////////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 758,
            "comment": "//////////////////////////////////////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 758,
            "comment": "// code here\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 758,
            "comment": "// test = sc.nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 761,
            "comment": "// TODO Auto-generated method \n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 763,
            "comment": "// int[] arr = new int[n];\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 763,
            "comment": "// for(int i=0;i<arr.length;++i) arr[i] = s.scanInt();\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 763,
            "comment": "//Buffer of Bytes\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 763,
            "comment": "//Scan method used to scan buf\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 763,
            "comment": "//Removing starting whitespaces\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 763,
            "comment": "//If Negative Sign encounters\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 764,
            "comment": "//System.out.println(\"g \" + cnt + \"  \" + fuel);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 764,
            "comment": "//System.out.println(\"g \" + cnt + \"  \" + fuel + \"  \" + Math.min(n-i-fuel, total-fuel));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 765,
            "comment": "//1113A\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 765,
            "comment": "//SashaAndTrip\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 769,
            "comment": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 769,
            "comment": "/**\n *\n * @author Admin\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 774,
            "comment": "/**\n * @(#)SashaRunner.java\n *\n *\n * @author\n * @version 1.00 2019/2/20\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 776,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 776,
            "comment": "//            debug.tr(last, fuel, i);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 777,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author tarek\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 778,
            "comment": "/**\n * @author ashevenkov 05.05.16 19:14.\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 778,
            "comment": "//implement\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 780,
            "comment": "// line length\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 780,
            "comment": "//Scanner sc = new Scanner(System.in);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 780,
            "comment": "//Code start from here\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 780,
            "comment": "//System.out.println(cost);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 781,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 782,
            "comment": "/**\n     * @param args the command line arguments\n     */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 783,
            "comment": "// line length\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 783,
            "comment": "//PrintWriter writer=new PrintWriter(System.out);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 783,
            "comment": "//Scanner r = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 783,
            "comment": "//System.out.println(price+\" \"+tank);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 785,
            "comment": "//1st city\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 785,
            "comment": "// - citiesLeft\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 785,
            "comment": "//print('city#', i, n-i, c)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 785,
            "comment": "//        print('fuel', fuel, i, fuel*i)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 786,
            "comment": "/**\n *\n * @author Acer\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 788,
            "comment": "//            File file = new File(\"input.txt\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 788,
            "comment": "//            Scanner in = new Scanner(file);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 788,
            "comment": "//            PrintWriter out = new PrintWriter(new FileWriter(\"output.txt\"));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 788,
            "comment": "//        Scanner in = new Scanner(System.in);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 790,
            "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 790,
            "comment": "//   System.out.println(cost+\" \"+v+\" \"+sum);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 790,
            "comment": "//        static int getFirst(ArrayList<A> a,int j)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 790,
            "comment": "//        {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 790,
            "comment": "//            for(int i=j)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 790,
            "comment": "//        }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 792,
            "comment": "/**\n * Date: 16 Feb, 2019\n * Link:\n *\n * @author Prasad-Chaudhari\n * @linkedIn: https://www.linkedin.com/in/prasad-chaudhari-841655a6/\n * @git: https://github.com/Prasad-Chaudhari\n */"
        },
        "Heuristic": [
            "H1",
            "H9"
        ]
    },
    {
        "nl": {
            "id": 792,
            "comment": "//www.linkedin.com/in/prasad-chaudhari-841655a6/\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 792,
            "comment": "//github.com/Prasad-Chaudhari\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 792,
            "comment": "// TODO code application logic here\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 793,
            "comment": "///////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 796,
            "comment": "//            System.out.println( ((min(i, 25) + i) % (2 + i % 3)) > 0 );\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 798,
            "comment": "// for(int i=0;i<n;i++)System.out.println(ar[i]+\" \");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 801,
            "comment": "/**\n *\n * @author Acer\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 801,
            "comment": "//System.out.println(arr1.size()+\" \"+arr2.size());\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "// your code goes here\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 802,
            "comment": "// int n=a.length;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 802,
            "comment": "// Fenwick / BinaryIndexed  Tree  USE IT - FenwickTree ft1=new FenwickTree(n);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "//Disjoint Set Union\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 802,
            "comment": "//SEGMENT TREE CODE\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 802,
            "comment": "// public static void segmentUpdate(int si,int ss,int se,int qs,int qe,long x)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "// {\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "// \tif(ss>qe || se<qs)return;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "// \tif(qs<=ss && qe>=se)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "// \t{\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "// \t\tseg[si][0]+=1L;\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "// \t\tseg[si][1]+=x*x;\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "// \t\tseg[si][2]+=2*x;\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "// \t\treturn;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "// \t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "// \tint mid=(ss+se)/2;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "// \tsegmentUpdate(2*si+1,ss,mid,qs,qe,x);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "// \tsegmentUpdate(2*si+2,mid+1,se,qs,qe,x);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "// public static long segmentGet(int si,int ss,int se,int x,long f,long s,long t,long a[])\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "// {\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "// \tif(ss==se && ss==x)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "// \t{\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "// \t\tf+=seg[si][0];\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "// \t\ts+=seg[si][1];\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "// \t\tt+=seg[si][2];\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "// \t\tlong ans=a[x]+(f*((long)x+1L)*((long)x+1L))+s+(t*((long)x+1L));\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 802,
            "comment": "// \t\treturn ans;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "// \t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "// \tint mid=(ss+se)/2;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "// \tif(x>mid){\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "// \t\treturn segmentGet(2*si+2,mid+1,se,x,f+seg[si][0],s+seg[si][1],t+seg[si][2],a);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "// \t}else{\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "// \t\treturn segmentGet(2*si+1,ss,mid,x,f+seg[si][0],s+seg[si][1],t+seg[si][2],a);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "// \t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "//sort in ascending order.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 802,
            "comment": "// public int compare(pair p1,pair p2)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 802,
            "comment": "// {\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "// \tif(p1.a==p2.a)\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "//     return 0;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "//     else if(p1.a<p2.a)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "//     return -1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "//     else\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "//     return 1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "//sort in descending order.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 802,
            "comment": "//sort in ascending order.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 802,
            "comment": "//sort in descending order.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 802,
            "comment": "// public int compare(pair p1,pair p2)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 802,
            "comment": "// {\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "//     if(p1.a==p2.a)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "//     return 0;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "//     else if(p1.a<p2.a)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "//     return 1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "//     else\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "//     return -1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 802,
            "comment": "//****************use this in main function-Collections.sort(arr,new myComp1());\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 804,
            "comment": "//            if( tCase > 60 && tCase < 80 ) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 804,
            "comment": "//                System.out.println(\"testcase\"+ tCase+ \"    n\"+ n);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 804,
            "comment": "//                System.out.println(Arrays.toString(a));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 804,
            "comment": "//                System.out.println(Arrays.toString(b));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 804,
            "comment": "//\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 804,
            "comment": "//            }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 804,
            "comment": "// i contains index of element to increment;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 804,
            "comment": "// j contains index of element to decrement;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 804,
            "comment": "//     System.out.println(Arrays.toString(a)+ \"i:\"+ i + \"j:\"+ j);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 804,
            "comment": "//       if(act >7) continue;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 808,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 809,
            "comment": "/*\n      int n      = sc.nextInt();        // read input as integer\n      long k     = sc.nextLong();       // read input as long\n      double d   = sc.nextDouble();     // read input as double\n      String str = sc.next();           // read input as String\n      String s   = sc.nextLine();       // read whole line as String\n\n      int result = 3*n;\n      out.println(result);                    // print via PrintWriter\n      */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 809,
            "comment": "// Start writing your solution here. -------------------------------------\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 809,
            "comment": "//   try {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 809,
            "comment": "//   }catch(Exception e){}\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 809,
            "comment": "// read input as integer\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 809,
            "comment": "// read input as long\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 809,
            "comment": "// read input as double\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 809,
            "comment": "// read input as String\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 809,
            "comment": "// read whole line as String\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 809,
            "comment": "// print via PrintWriter\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 809,
            "comment": "// Stop writing your solution here. -------------------------------------\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 809,
            "comment": "//-----------PrintWriter for faster output---------------------------------\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 809,
            "comment": "//-----------MyScanner class for faster input----------\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 809,
            "comment": "//--------------------------------------------------------\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "// int c = 1;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\tprivate static void getFac(long n, PrintWriter pw) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\tint a = 0;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\twhile (n % 2 == 0) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t\ta++;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t\tn = n / 2;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\tif (n == 1) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t\ta--;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\tfor (int i = 3; i <= Math.sqrt(n); i += 2) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t\twhile (n % i == 0) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t\t\tn = n / i;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t\t\ta++;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t\t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\tif (n > 1) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t\ta++;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\tif (a % 2 == 0) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t\tpw.println(\"Bob\");\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t} else {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t\tpw.println(\"Alice\");\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t//System.out.println(a);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\treturn;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\tprivate static long power(long a, long p) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\tlong res = 1;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\twhile (p > 0) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t\tif (p % 2 == 1) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t\t\tres = (res * a) % mod;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t\t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t\tp = p / 2;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t\ta = (a * a) % mod;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\treturn res;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\tprivate static void fac() {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\tfac[0] = 1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\tfor (int i = 1; i < fac.length; i++) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t\tif (i == 1) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t\t\tfac[i] = 1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t\t} else {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t\t\tfac[i] = i * fac[i - 1];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t\t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t\tif (fac[i] > mod) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t\t\tfac[i] = fac[i] % mod;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t\t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\tprivate static int getLower(Long long1, Long[] st) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\tint left = 0, right = st.length - 1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\tint ans = -1;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\twhile (left <= right) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t\tint mid = (left + right) / 2;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t\tif (st[mid] <= long1) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t\t\tans = mid;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t\t\tleft = mid + 1;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t\t} else {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t\t\tright = mid - 1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t\t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\treturn ans;\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\tprivate static long getGCD(long l, long m) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\tlong t1 = Math.min(l, m);\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\tlong t2 = Math.max(l, m);\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\twhile (true) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t\tlong temp = t2 % t1;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t\tif (temp == 0) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t\t\treturn t1;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t\t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t\tt2 = t1;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t\tt1 = temp;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 810,
            "comment": "//\t\t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 811,
            "comment": "/**\n * A. AquaMoon and Two Arrays\n * AquaMoon and Cirno are playing an interesting game with arrays.\n * Cirno has prepared two arrays a and b, both consist of n non-negative\n * integers. AquaMoon can perform the following operation an arbitrary number\n * of times (possibly zero):\n * - She chooses two indices i and j (1\u2264i,j\u2264n), then decreases the i-th element\n * of array a by 1, and increases the j-th element of array a by 1. The resulting\n * values at i-th and j-th index of array a are ai\u22121 and aj+1, respectively. Each\n * element of array a must be non-negative after each operation. If i=j this\n * operation doesn't change the array a.\n * AquaMoon wants to make some operations to make arrays a and b equal. Two arrays\n * a and b are considered equal if and only if ai=bi for all 1\u2264i\u2264n.\n * Help AquaMoon to find a sequence of operations that will solve her problem or\n * find, that it is impossible to make arrays a and b equal.\n * Please note, that you don't have to minimize the number of operations.\n * <p>\n * Input\n * The input consists of multiple test cases. The first line contains a single\n * integer t (1\u2264t\u2264100) \u2014 the number of test cases.\n * <p>\n * The first line of each test case contains a single integer n (1\u2264n\u2264100).\n * <p>\n * The second line of each test case contains n integers a1,a2,\u2026,an (0\u2264ai\u2264100).\n * The sum of all ai does not exceed 100.\n * <p>\n * The third line of each test case contains n integers b1,b2,\u2026,bn (0\u2264bi\u2264100).\n * The sum of all bi does not exceed 100.\n * <p>\n * <p>\n * Output\n * For each test case print \"-1\" on the only line if it is impossible to make two\n * arrays equal with some sequence of operations.\n * <p>\n * Otherwise, print an integer m (0\u2264m\u2264100) in the first line \u2014 the number of\n * operations. Then print m lines, each line consists of two integers i and j \u2014 the\n * indices you choose for the operation.\n * <p>\n * It can be proven that if it is possible to make two arrays equal with some sequence\n * of operations, there exists a sequence with m\u2264100.\n * <p>\n * If there are multiple possible solutions, you can print any.\n * <p>\n * <p>\n * Example 1\n * input\n * 4\n * 4\n * 1 2 3 4\n * 3 1 2 4\n * 2\n * 1 3\n * 2 1\n * 1\n * 0\n * 0\n * 5\n * 4 3 2 1 0\n * 0 1 2 3 4\n * <p>\n * output\n * 2\n * 2 1\n * 3 1\n * -1\n * 0\n * 6\n * 1 4\n * 1 4\n * 1 5\n * 1 5\n * 2 5\n * 2 5\n * <p>\n * <p>\n * Note\n * In the first example, we do the following operations:\n * - i=2, j=1: [1,2,3,4]\u2192[2,1,3,4];\n * - i=3, j=1: [2,1,3,4]\u2192[3,1,2,4];\n * In the second example, it's impossible to make two arrays equal.\n * <p>\n * link: https://codeforces.com/contest/1546/problem/A\n */"
        },
        "Heuristic": [
            "H1",
            "H9"
        ]
    },
    {
        "nl": {
            "id": 811,
            "comment": "/*int[] row = new int[2];\n            for(int i = 0; i < n; i++){\n                if(a[i] > b[i]){\n                    a[i]--;\n                    row[0] = i + 1;\n                    break;\n                }\n            }\n\n            for(int j = 0; j < n; j++){\n                if(a[j] < b[j]){\n                    a[j]++;\n                    row[1] = j + 1;\n                    break;\n                }\n            }\n            data.add(row);*/"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 811,
            "comment": "//codeforces.com/contest/1546/problem/A\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 814,
            "comment": "// System.out.println(a[i] +\" - \"+b[i]+\" = \"+diff[i]);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 816,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 816,
            "comment": "//\t\t\t\tSystem.out.println(\"k  \" + k + \"  arr[i][0]  \" + arr[i][0]);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 816,
            "comment": "//\t\t\t\tSystem.out.println(\"k  \" + k + \"  arr[j][0]  \" + arr[j][0]);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 816,
            "comment": "//\t\t\t\tSystem.out.println(\"k  \" + k);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//------------------>>>>>>>>>>>>>>>> HI . HOW ARE YOU? <<<<<<<<<<<<<<<<<<<<<<<<<<<<<------------------------------\n"
        },
        "Heuristic": [
            "H1",
            "H12"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//---------------------------->>>>>>>>>>>>>>>>>>>>>> FK OFF <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-------------------\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//--------------------------->>>>>>>>>>>>>>>>>>>>>>>> HACKER MF <<<<<<<<<<<<-------------------------------------\n"
        },
        "Heuristic": [
            "H1",
            "H4"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "// static int minl = -1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "// static long n;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 819,
            "comment": "//     public static void solve(){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//        FastScanner sc = new FastScanner();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//        int t = sc.nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//        // int t = 1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//        for(int tt = 1 ; tt <= t ; tt++){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//            System.out.println(\"Case #\"+tt+\": \"+ ans);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//        }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//     }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//--------------->>>>IF YOU ARE HERE FOR QUICKSORT HACK THEN SORRY NO HACK FOR YOU<<<------------------------------\n"
        },
        "Heuristic": [
            "H1",
            "H4"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//----------->>>>>>> SPEED UP SPEED UP . THIS IS SPEEDFORCES . SPEED UP SPEEEEEEEEEEEEEEEEEEEEEEEEEEDDDDDD <<<<<<<------------------\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "// Scanner sc = new Scanner(System.in);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//        int t = 1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//             k = sc.nextLong();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "// x = sc.nextLong();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "// y = sc.nextLong();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "// z = sc.nextLong();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//             a = sc.nextLong();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//             b = sc.nextLong();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//             c = sc.nextLong();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//             d = sc.nextLong();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//             x = sc.nextLong();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//             y = sc.nextLong();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//             z = sc.nextLong();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "// d = sc.nextLong();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "// n1 = sc.nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//            m = sc.nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//             q = sc.nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//             a = sc.nextLong();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//             b = sc.nextLong();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//             k = sc.nextLong();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//            x = sc.nextLong();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "// d = sc.nextLong();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//            s = sc.next();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//            ch = sc.next().toCharArray();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "// ch1 = sc.next().toCharArray();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//             m = sc.nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "// n = 6;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 819,
            "comment": "//            arrInt = new int[n];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//            for(int i = 0 ; i < n ; i++){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//                arrInt[i] = sc.nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//            }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "// x = sc.nextLong();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "// y = sc.nextLong();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//             ch = sc.next().toCharArray();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//             m = sc.nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "// k = sc.nextLong();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "// m = n;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 819,
            "comment": "//             darrInt = new int[n];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//             for(int i = 0 ; i < n ; i++){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//                 darrInt[i] = sc.nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//             }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//             farr = new long[n];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//             for(int i = 0 ; i < n ; i++){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//                 farr[i] = sc.nextLong();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//             }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "// farrInt = new int[m];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "// for(int i = 0; i < m ; i++){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//     farrInt[i] = sc.nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "// m = n;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 819,
            "comment": "//            mat = new int[2][n];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//            for(int i = 0 ; i < 2 ; i++){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//                for(int j = 0 ; j < n ; j++){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//                    mat[i][j] = sc.nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//                }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//            }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//             m = n;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//             mat = new char[n][m];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//             for(int i = 0 ; i < n ; i++){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//                 String s = sc.next();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//                 for(int j = 0 ; j < m ; j++){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//                     mat[i][j] = s.charAt(j);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//                 }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//             }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//             str = new String[n];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//             for(int i = 0 ; i < n ; i++)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//                 str[i] = sc.next();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//             nodes = new Node[n];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//             for(int i = 0 ; i < n ;i++)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//                 nodes[i] = new Node(sc.nextLong(),(i));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//        System.out.print(sb);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "// Corner cases\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 819,
            "comment": "// This is checked so that we can skip\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 819,
            "comment": "// middle five numbers in below loop\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 819,
            "comment": "// marking smallest prime factor for every\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "// number to be itself.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 819,
            "comment": "// separately marking spf for every even\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "// number as 2\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 819,
            "comment": "// checking if i is prime\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "// marking SPF for all numbers divisible by i\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 819,
            "comment": "// marking spf[j] if it is not\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "// previously marked\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 819,
            "comment": "//shuffle, then sort\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 819,
            "comment": "//shuffle, then sort\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 819,
            "comment": "//shuffle, then sort\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 819,
            "comment": "// Since C(n, k) = C(n, n-k)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 819,
            "comment": "// Calculate value of\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 819,
            "comment": "// [n * (n-1) *---* (n-k+1)] / [k * (k-1) *----* 1]\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 819,
            "comment": "//        void readArray(int n) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//            arr = new long[n];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//            for (int i = 0; i < n; i++)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//                arr[i] = nextLong();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 819,
            "comment": "//        }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 820,
            "comment": "/*******************************************************************************************************************************/"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 820,
            "comment": "/*******************************************************************************************************************************/"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 820,
            "comment": "/*******************************************************************************************************************************/"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 820,
            "comment": "//      reader = new BufferedReader(new FileReader(\"ate.in\"));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 820,
            "comment": "//      tokenizer = new StringTokenizer(\"\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 820,
            "comment": "//      printWriter = new PrintWriter(new BufferedWriter(new FileWriter(\"ate.out\")));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 821,
            "comment": "//            5\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 821,
            "comment": "//            4 3 2 1 0\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 821,
            "comment": "//            0 1 2 3 4\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 821,
            "comment": "//            System.out.println(inc+\" \"+dec);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 822,
            "comment": "//I don't understand how this works lmao\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 823,
            "comment": "/**\n *\n * @Har_Har_Mahadev\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 823,
            "comment": "/**\n * Main , Solution , Remove Public\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 823,
            "comment": "/*\n\t\t \t@Override\n\t\t    public boolean equals(Object o) {\n\t\t        if (this == o) return true;\n\t\t        if (!(o instanceof Pair)) return false;\n\t\t        Pair key = (Pair) o;\n\t\t        return x == key.x && y == key.y;\n\t\t    }\n\t\t \n\t\t    @Override\n\t\t    public int hashCode() {\n\t\t        int result = x;\n\t\t        result = 31 * result + y;\n\t\t        return result;\n\t\t    }\n\t\t*/"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 823,
            "comment": "//=============================================================================\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 823,
            "comment": "//--------------------------The End---------------------------------\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 823,
            "comment": "//=============================================================================\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 823,
            "comment": "//\t\t\tgoogle(TTT++);\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 823,
            "comment": "//\t\ttr(System.currentTimeMillis()-s+\"ms\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 823,
            "comment": "/////////////////////////////////////////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 823,
            "comment": "//custom multiset (replace with HashMap if needed)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 823,
            "comment": "//map[k] += v;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 823,
            "comment": "//assumes map[k] >= v\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 823,
            "comment": "//map[k] -= v\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 823,
            "comment": "// compress Big value to Time Limit\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 823,
            "comment": "//min value\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 823,
            "comment": "// Fast Writer \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 823,
            "comment": "//\t\tif(x < 0){ x = 0; }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 823,
            "comment": "// Fast Inputs\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 823,
            "comment": "//I don't understand how this works lmao\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 824,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 826,
            "comment": "//WHEN IN DOUBT , USE BRUTE FORCE !!!!!!!!!\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 826,
            "comment": "//https://www.geeksforgeeks.org/count-pairs-with-given-sum/\n"
        },
        "Heuristic": [
            "H2",
            "H9"
        ]
    },
    {
        "nl": {
            "id": 826,
            "comment": "//class Main    //AtCoder\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 826,
            "comment": "//class Solution // Codechef\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 826,
            "comment": "//Codeforces\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 826,
            "comment": "//sopln(\"HEHE IS :- \" + tt);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 826,
            "comment": "//sop(\"AFTER OPERATION :- \");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 826,
            "comment": "//printArray(a);\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 826,
            "comment": "//sopln(\"HEHE IS :- \" + tt);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 826,
            "comment": "//sop(\"AFTER OPERATION :- \");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 826,
            "comment": "//printArray(a);\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 826,
            "comment": "//printArray(a);\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 826,
            "comment": "//Collections.sort(ans);\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 826,
            "comment": "// Initialize result\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 826,
            "comment": "// Update x if it is more than or\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 826,
            "comment": "// equal to p\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 826,
            "comment": "// If y is odd, multiply x\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 826,
            "comment": "// with result\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 826,
            "comment": "// y must be even now\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 826,
            "comment": "// y = y/2\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 826,
            "comment": "// Returns n^(-1) mod p\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 826,
            "comment": "// Returns nCr % p using Fermat's\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 826,
            "comment": "// little theorem.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 826,
            "comment": "// Base case\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 826,
            "comment": "// Fill factorial array so that we\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 826,
            "comment": "// can find all factorial of r, n\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 826,
            "comment": "// and n-r\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 826,
            "comment": "// Check if number is less than\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 826,
            "comment": "// equal to 1\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 826,
            "comment": "// Check if number is 2\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 826,
            "comment": "// Check if n is a multiple of 2\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 826,
            "comment": "// If not, then just check the odds\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 826,
            "comment": "// Initialize result\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 826,
            "comment": "// Update x if it is more than or\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 826,
            "comment": "// equal to p\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 826,
            "comment": "// If y is odd, multiply x\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 826,
            "comment": "// with result\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 826,
            "comment": "// y must be even now\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 826,
            "comment": "// y = y/2\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 826,
            "comment": "// Returns n^(-1) mod p\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 826,
            "comment": "// Returns nCr % p using Fermat's\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 826,
            "comment": "// little theorem.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 826,
            "comment": "///\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 826,
            "comment": "// Function to find modular\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 826,
            "comment": "// inverse of a under modulo p\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 826,
            "comment": "// using Fermat's method.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 826,
            "comment": "// Assumption: p is prime\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 827,
            "comment": "// standard input\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 827,
            "comment": "// USACO-style file input\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 827,
            "comment": "// returns null if no more input\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 828,
            "comment": "// a[] - 1\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 828,
            "comment": "// a[] + 1\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 828,
            "comment": "//Fast Reader\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 829,
            "comment": "/*\n        int n      = sc.nextInt();        // read input as integer\n        long k     = sc.nextLong();       // read input as long\n        double d   = sc.nextDouble();     // read input as double\n        char c = sc.next().charAt(0);     // read input as char\n        String str = sc.next();           // read input as String\n        String s   = sc.nextLine();       // read whole line as String\n        out.println(result);              // print via PrintWriter\n        */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 829,
            "comment": "// Start writing your solution here. -------------------------------------\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 829,
            "comment": "// read input as integer\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 829,
            "comment": "// read input as long\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 829,
            "comment": "// read input as double\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 829,
            "comment": "// read input as char\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 829,
            "comment": "// read input as String\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 829,
            "comment": "// read whole line as String\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 829,
            "comment": "// print via PrintWriter\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 829,
            "comment": "//------------------------------------------------------------------\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 829,
            "comment": "//------------------------------------------------------------------\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 829,
            "comment": "// Stop writing your solution here. -------------------------------------\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 829,
            "comment": "//-----------PrintWriter for faster output---------------------------------\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 829,
            "comment": "//-----------MyScanner class for faster input----------\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 829,
            "comment": "//--------------------------------------------------------\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 830,
            "comment": "/*Everything is Hard \n * Before Easy \n * Jai Mata Dii \n */"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 830,
            "comment": "// static long mod = 998244353; \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 830,
            "comment": "//\t static Scanner sc = new Scanner(System.in); \n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 832,
            "comment": "//long  factArray[] = new long [42];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 832,
            "comment": "//System.out.println(Arrays.toString(diff) + \" sum = \" + sum);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 832,
            "comment": "//System.out.println(ans[ansIndex][0] + \" \" +  ans[ansIndex][1] + \" \" +  ans[ansIndex][2] + \" index1 = \" + index1 + \"  index2 = \" + index2);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 833,
            "comment": "// Piyush Nagpal\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 833,
            "comment": "// int [] arr=sc.intArr(n);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 833,
            "comment": "// pw.println((i+1)+\" \"+(j+1));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 833,
            "comment": "// pw.println((i+1)+\" \"+(j+1));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 833,
            "comment": "//            pw.printf(\"Case #%d: \"b, i);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 834,
            "comment": "// int total=a.size()+b.size();\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 835,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 837,
            "comment": "//    static int k;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 837,
            "comment": "//    static int par(int curr) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 837,
            "comment": "//        return (1<<k)-1-(((1<<k)-1-curr)/2);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 837,
            "comment": "//    }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 837,
            "comment": "//    static int left(int curr) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 837,
            "comment": "//        return (1<<k)-1-(2*((1<<k)-1-curr)+1);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 837,
            "comment": "//    }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 837,
            "comment": "//    static int right(int curr) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 837,
            "comment": "//        return (1<<k)-1-(2*((1<<k)-1-curr));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 837,
            "comment": "//    }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 837,
            "comment": "//shuffle, then sort\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 841,
            "comment": "//  System.out.println(0);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 844,
            "comment": "// Check if number is less than\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 844,
            "comment": "// equal to 1\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 844,
            "comment": "// Check if number is 2\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 844,
            "comment": "// Check if n is a multiple of 2\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 844,
            "comment": "// If not, then just check the odds\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 846,
            "comment": "/* package codechef; // don't place package name! */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 846,
            "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 846,
            "comment": "// don't place package name! */\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 846,
            "comment": "// your code goes here\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 847,
            "comment": "/* package codechef; // don't place package name! */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 847,
            "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 847,
            "comment": "// don't place package name! */\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 847,
            "comment": "//input (int)\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 847,
            "comment": "//input (string)\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 847,
            "comment": "//input (long)\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 847,
            "comment": "//printing ln int\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 847,
            "comment": "//printing int\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 847,
            "comment": "//printing ln long\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 847,
            "comment": "//printing long\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 847,
            "comment": "//printing string ln\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 847,
            "comment": "//printing String\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 847,
            "comment": "//printing array elements(int )\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 847,
            "comment": "//printing array elements(long)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 847,
            "comment": "//printing array elements(String)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 847,
            "comment": "//taking input in an array of size n(int)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 847,
            "comment": "// taking input in an array of size n(long)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 847,
            "comment": "// taking input in array of size n(String)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 847,
            "comment": "//array elements to hashmap\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 847,
            "comment": "// max(int)\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 847,
            "comment": "// max(long)\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 847,
            "comment": "//min(long)\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 847,
            "comment": "// min(int)\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 847,
            "comment": "// sum of (int) elements of an array\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 847,
            "comment": "// sum of (long) elements of an array\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 847,
            "comment": "// copying array elements to another array\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 847,
            "comment": "// reverse an array(long)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 847,
            "comment": "// reverse an array(int)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 847,
            "comment": "// prefix sum(long)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 847,
            "comment": "// prefix sum(int)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 847,
            "comment": "//suffix sum(long)\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 847,
            "comment": "//suffix sum(int)\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 847,
            "comment": "//checking if a number is a prime\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 847,
            "comment": "//binary search\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 849,
            "comment": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 849,
            "comment": "/**\n *\n * @author lenovo\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 849,
            "comment": "/**\n     * @param args the command line arguments\n     */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 850,
            "comment": "/*\n    public static long parseLong(final String token) {\n        long result = 0L;\n\n        if (token.isEmpty())\n            return result;\n\n        final boolean negative = token.charAt(0) == '-';\n        for (int i = (negative ? 1 : 0); i < token.length(); ++i) {\n            final char currentChar = token.charAt(i);\n            if (currentChar < '0' || currentChar > '9')\n                throw new NumberFormatException(\"Expected a digit, found this: '\" + currentChar + \"' (i=\" + i + \")\");\n\n            result += BigInteger.valueOf(token.charAt(i) - '0')\n                    .multiply(BigInteger.valueOf((long) Math.pow(10, token.length() - i - 1))).longValue();\n        }\n\n        return negative ? -result : result;\n    }\n\n    public static int parseInt(final String token) {\n        final long result = parseLong(token);\n\n        if (result < Integer.MIN_VALUE || result > Integer.MAX_VALUE)\n            throw new IllegalArgumentException(\"Provided argument is a number, \" +\n                    \"but it can't be converted to an Integer due to its size: \" + result);\n\n        return (int) result;\n    }\n     */"
        },
        "Heuristic": [
            "H1",
            "H7",
            "H12"
        ]
    },
    {
        "nl": {
            "id": 852,
            "comment": "// If running on Java 6 or older, use `new Random()` on RHS here\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 852,
            "comment": "// Simple swap\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 855,
            "comment": "/*\n\n\n\n                    \u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\n                 \u00b6\u00b6\u00b6\u00b6\u00b6\u00b6             \u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\n              \u00b6\u00b6\u00b6\u00b6                       \u00b6\u00b6\u00b6\u00b6\n             \u00b6\u00b6\u00b6                             \u00b6\u00b6\n            \u00b6\u00b6                                \u00b6\u00b6\n           \u00b6\u00b6                                  \u00b6\u00b6\n          \u00b6\u00b6                                   \u00b6\u00b6\n          \u00b6\u00b6 \u00b6\u00b6                             \u00b6\u00b6 \u00b6\u00b6\n          \u00b6\u00b6 \u00b6\u00b6                             \u00b6\u00b6  \u00b6\n          \u00b6\u00b6 \u00b6\u00b6                             \u00b6\u00b6  \u00b6\n          \u00b6\u00b6  \u00b6\u00b6                            \u00b6\u00b6 \u00b6\u00b6\n          \u00b6\u00b6  \u00b6\u00b6                            \u00b6\u00b6  \u00b6\u00b6\n           \u00b6\u00b6 \u00b6\u00b6   \u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6     \u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6   \u00b6\u00b6 \u00b6\u00b6\n            \u00b6\u00b6\u00b6\u00b6 \u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6     \u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6 \u00b6\u00b6\u00b6\u00b6\u00b6\n             \u00b6\u00b6\u00b6 \u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6     \u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6 \u00b6\u00b6\u00b6\n    \u00b6\u00b6\u00b6       \u00b6\u00b6  \u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6       \u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6  \u00b6\u00b6      \u00b6\u00b6\u00b6\u00b6\n   \u00b6\u00b6\u00b6\u00b6\u00b6     \u00b6\u00b6   \u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6   \u00b6\u00b6\u00b6   \u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6   \u00b6\u00b6     \u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\n  \u00b6\u00b6   \u00b6\u00b6    \u00b6\u00b6     \u00b6\u00b6\u00b6    \u00b6\u00b6\u00b6\u00b6\u00b6    \u00b6\u00b6\u00b6     \u00b6\u00b6    \u00b6\u00b6   \u00b6\u00b6\n \u00b6\u00b6\u00b6    \u00b6\u00b6\u00b6\u00b6  \u00b6\u00b6          \u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6          \u00b6\u00b6  \u00b6\u00b6\u00b6\u00b6    \u00b6\u00b6\u00b6\n\u00b6\u00b6         \u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6       \u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6       \u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6        \u00b6\u00b6\n\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6     \u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6    \u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6    \u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6      \u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\n  \u00b6\u00b6\u00b6\u00b6 \u00b6\u00b6\u00b6\u00b6\u00b6      \u00b6\u00b6\u00b6\u00b6\u00b6              \u00b6\u00b6\u00b6 \u00b6\u00b6     \u00b6\u00b6\u00b6\u00b6\u00b6\u00b6 \u00b6\u00b6\u00b6\n          \u00b6\u00b6\u00b6\u00b6\u00b6\u00b6  \u00b6\u00b6\u00b6  \u00b6\u00b6           \u00b6\u00b6  \u00b6\u00b6\u00b6  \u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\n              \u00b6\u00b6\u00b6\u00b6\u00b6\u00b6 \u00b6\u00b6 \u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6 \u00b6\u00b6 \u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\n                  \u00b6\u00b6 \u00b6\u00b6 \u00b6 \u00b6 \u00b6 \u00b6 \u00b6 \u00b6 \u00b6 \u00b6 \u00b6\u00b6\n                \u00b6\u00b6\u00b6\u00b6  \u00b6 \u00b6 \u00b6 \u00b6 \u00b6 \u00b6 \u00b6 \u00b6   \u00b6\u00b6\u00b6\u00b6\u00b6\n            \u00b6\u00b6\u00b6\u00b6\u00b6 \u00b6\u00b6   \u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6   \u00b6\u00b6 \u00b6\u00b6\u00b6\u00b6\u00b6\n    \u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6     \u00b6\u00b6                 \u00b6\u00b6      \u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\n   \u00b6\u00b6           \u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6             \u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6          \u00b6\u00b6\n    \u00b6\u00b6\u00b6     \u00b6\u00b6\u00b6\u00b6\u00b6     \u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6     \u00b6\u00b6\u00b6\u00b6\u00b6     \u00b6\u00b6\u00b6\n      \u00b6\u00b6   \u00b6\u00b6\u00b6           \u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6\u00b6           \u00b6\u00b6\u00b6   \u00b6\u00b6\n      \u00b6\u00b6  \u00b6\u00b6                                   \u00b6\u00b6  \u00b6\u00b6\n       \u00b6\u00b6\u00b6\u00b6                                     \u00b6\u00b6\u00b6\u00b6\n\n*/"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 855,
            "comment": "// if (val == 0) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 855,
            "comment": "// \tm++;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 855,
            "comment": "// \tout.append(Integer.toString(i) + \" \" + Integer.toString(i) + \"\\n\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 855,
            "comment": "// \tfreq[i] = true;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 855,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 855,
            "comment": "//template function\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 855,
            "comment": "//-----------------------------------------------------------------\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 855,
            "comment": "//----------------------------------------------------------------------------------------------------\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 855,
            "comment": "//IO operation\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 856,
            "comment": "/*\n\u2800\u2800\u2800\u2800\u28e0\u28f6\u287e\u280f\u2809\u2819\u2833\u28a6\u2840\u2800\u2800\u2800\u28a0\u281e\u2809\u2819\u2832\u2840\u2800\n\u2800\u2800\u2800\u28f4\u283f\u280f\u2800\u2800\u2800\u2800\u2800\u2800\u28b3\u2840\u2800\u284f\u2800\u2800Y\u2800\u2800\u28b7\n\u2800\u2800\u28a0\u28df\u28cb\u2840\u2880\u28c0\u28c0\u2840\u2800\u28c0\u2840\u28e7\u2800\u28b8\u2800\u2800A\u2800\u2800 \u2847\n\u2800\u2800\u28b8\u28ef\u286d\u2801\u2838\u28db\u28df\u2806\u2874\u28fb\u2872\u28ff\u2800\u28f8\u2800\u2800S\u2800  \u2847\n\u2800\u2800\u28df\u28ff\u286d\u2800\u2800\u2800\u2800\u2800\u28b1\u2800\u2800\u28ff\u2800\u28b9\u2800\u2800H\u2800\u2800 \u2847\n\u2800\u2800\u2819\u28bf\u28ef\u2804\u2800\u2800\u2800\u2880\u2840\u2800\u2800\u287f\u2800\u2800\u2847\u2800\u2800\u2800\u2800\u287c\n\u2800\u2800\u2800\u2800\u2839\u28f6\u2806\u2800\u2800\u2800\u2800\u2800\u2874\u2803\u2800\u2800\u2818\u2824\u28c4\u28e0\u281e\u2800\n\u2800\u2800\u2800\u2800\u2800\u28b8\u28f7\u2866\u28a4\u2864\u28a4\u28de\u28c1\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\n\u2800\u2800\u2880\u28e4\u28f4\u28ff\u28cf\u2801\u2800\u2800\u2838\u28cf\u28af\u28f7\u28d6\u28e6\u2840\u2800\u2800\u2800\u2800\u2800\u2800\n\u2880\u28fe\u28fd\u28ff\u28ff\u28ff\u28ff\u281b\u28b2\u28f6\u28fe\u2889\u2877\u28ff\u28ff\u2835\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\n\u28fc\u28ff\u280d\u2809\u28ff\u286d\u2809\u2819\u28ba\u28c7\u28fc\u284f\u2800\u2800\u2800\u28c4\u28b8\u2800\u2800\u2800\u2800\u2800\u2800\n\u28ff\u28ff\u28e7\u28c0\u28ff\u2026\u2026\u2026\u28c0\u28f0\u28cf\u28d8\u28c6\u28c0\u2800\u2800\n */"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 856,
            "comment": "/* ------------------- Sorting ------------------- */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 856,
            "comment": "/* ------------------- Pair class ------------------- */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 856,
            "comment": "/* ------------------- HCF and LCM ------------------- */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 856,
            "comment": "/* ------------------- primes and prime factorization ------------------- */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 856,
            "comment": "/* private static TreeMap<Integer, Integer> primeFactors(long N) {\n\t\tTreeMap<Integer, Integer> primeFact = new TreeMap<>();\n\t\tfor (int i = 2; i <= Math.sqrt(N); i++) {\n            int count = 0;\n            while (N % i == 0) {\n                N /= i;\n                count++;\n            }\n            if (count != 0) {\n                primeFact.put(i, count);\n            }\n\t\t}\n\t\tif (N != 1) {\n            primeFact.put((int)N, 1);\n        }\n\t\treturn primeFact;\n\t} */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 856,
            "comment": "/* ------------------- Binary Search ------------------- */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 856,
            "comment": "/* ------------------- Binary Search ------------------- */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 856,
            "comment": "/* ------------------- Power Function ------------------- */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 856,
            "comment": "/* ------------------- Disjoint Set(Union and Find) ------------------- */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 856,
            "comment": "/* ------------------- Scanner class for input ------------------- */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 856,
            "comment": "// System.out is a PrintStream\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 856,
            "comment": "// import java.util.Arrays;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 856,
            "comment": "// import java.util.ArrayDeque;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 856,
            "comment": "// import java.util.Collections;    //  for sorting ArrayList mainly\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 856,
            "comment": "// import java.util.HashMap;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 856,
            "comment": "// import java.util.TreeMap;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 856,
            "comment": "// import java.util.HashSet;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 856,
            "comment": "// import java.util.TreeSet;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 856,
            "comment": "// import java.util.Random;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 856,
            "comment": "// int N = arr.length;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 856,
            "comment": "// Random rand = new Random();\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 856,
            "comment": "// for (int i = 0; i < N; i++) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 856,
            "comment": "//     int oi = rand.nextInt(N), temp = arr[i];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 856,
            "comment": "//     arr[i] = arr[oi];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 856,
            "comment": "//     arr[oi] = temp;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 856,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 856,
            "comment": "// Arrays.sort(arr);\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 856,
            "comment": "// true means not prime, false means is a prime number :)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 857,
            "comment": "/////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 857,
            "comment": "// nothing\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 858,
            "comment": "//package codeforces;\t\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "/**\n * Created by Himanshu\n **/"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//    static class pairLong implements Comparator<pairLong> {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//        long first, second;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//        pairLong() {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//        }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//        pairLong(long first, long second) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//            this.first = first;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//            this.second = second;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//        }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//        @Override\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//        public int compare(pairLong p1, pairLong p2) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//            if (p1.first == p2.first) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//                if(p1.second > p2.second) return 1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//                else return -1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//            }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//            if(p1.first > p2.first) return 1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//            else return -1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//        }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//    }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//    static class pair implements Comparator<pair> {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//        int first, second;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//        pair() {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//        }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//        pair(int first, int second) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//            this.first = first;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//            this.second = second;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//        }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//        @Override\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//        public int compare(pair p1, pair p2) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//            if (p1.first == p2.first) return p1.second - p2.second;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//            return p1.first - p2.first;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//        }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 859,
            "comment": "//    }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 860,
            "comment": "//-----------MyScanner class for faster input----------\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 861,
            "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 862,
            "comment": "// end main\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 864,
            "comment": "// for global initializations and methods starts here\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 864,
            "comment": "// global initialisations and methods end here\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 864,
            "comment": "//FastReader r = new FastReader();\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 864,
            "comment": "//long startTime = System.currentTimeMillis();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 864,
            "comment": "// Hold Here Sparky------------------->>>\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 864,
            "comment": "// Solution Starts Here\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 864,
            "comment": "// Solution Ends Here\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 864,
            "comment": "// line length\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 864,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 864,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 865,
            "comment": "//package currentContest;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 865,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "/*\n\n            4 2 3 _ 2 4 3 _\n             */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//\t\tif(x < 0){ x = 0; }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "// Initialize result\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 866,
            "comment": "// If b is odd, add 'a' to result\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 866,
            "comment": "// Multiply 'a' with 2\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 866,
            "comment": "// Divide b by 2\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 866,
            "comment": "// Return result\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 866,
            "comment": "//        public void update(int pos, int val) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//            updateUtil(0, n - 1, 0, pos, val);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//        }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//        private void updateUtil(int l, int r, int pos, int i, int val) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//            if (i < l || i > r) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//                return;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//            }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//            if (l == r) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//                tree[pos] = val;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//                return;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//            }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//            int mid = (l + r) / 2;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//            updateUtil(l, mid, 2 * pos + 1, i, val);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//            updateUtil(mid + 1, r, 2 * pos + 2, i, val);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//            tree[pos] = tree[2 * pos + 1] + tree[2 * pos + 2];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//        }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//https://i...content-available-to-author-only...e.com/ebRGa6\n"
        },
        "Heuristic": [
            "H1",
            "H9"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//        f[0] = 1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//        f[1] = 1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//        for (int i = 2; i < 200001; ++i) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//            f[i] = f[i-1] * i;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//            f[i] %= 1000000007;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//        }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//    private static Pair22 dfss(List<LinkedHashSet<Integer>> g, int node, HashSet<Integer> vis, int[] dis, int[] dis2) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//        if (vis.contains(node)) return new Pair22(dis[node], dis2[node], -1);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//        vis.add(node);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//        int min = dis[node];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//        for (Integer ntb : g.get(node)) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//            if (dis[ntb] > dis[node])\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//                dfss(g, ntb, vis, dis, dis2);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//            if (dis[ntb] <= dis[node]) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//                min = Math.min(min, dis[ntb]);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//            } else {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//                min = Math.min(min, dis2[ntb]);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//            }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//        }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//        //        if (dis)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//        dis2[node] = min;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//        return new Pair22(dis[node], min, -1);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//    }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//        System.out.println(x + \"  \" + y);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 866,
            "comment": "//        System.out.println(pos + \" \" + min);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 868,
            "comment": "// int mag = 0;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 868,
            "comment": "// if(mag < Math.abs(diff[i])) mag = Math.abs(diff[i]);\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 868,
            "comment": "// print the m value\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 868,
            "comment": "// System.out.println(mag);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 868,
            "comment": "// System.out.println((pos+1) + \" \" + (neg+1));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 870,
            "comment": "/************************ SOLUTION STARTS HERE ************************/"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 870,
            "comment": "/************************ SOLUTION ENDS HERE ************************/"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 870,
            "comment": "/************************ TEMPLATE STARTS HERE **********************/"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 870,
            "comment": "/************************ TEMPLATE ENDS HERE ************************/"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 871,
            "comment": "// Boilerplate\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 873,
            "comment": "// package CodeForces;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 873,
            "comment": "//Code here\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 874,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 875,
            "comment": "/*package whatever //do not write package name here */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 875,
            "comment": "//do not write package name here */\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 876,
            "comment": "//* --> number of prime numbers less then or equal to x are  -->  x/ln(x)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 876,
            "comment": "//* --> String concatenation using the + operator within a loop should be avoided. Since the String object is immutable, each call for concatenation will\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 876,
            "comment": "// result in a new String object being created.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 876,
            "comment": "// THE SIEVE USED HERE WILL RETURN A LIST CONTAINING ALL THE PRIME NUMBERS TILL N\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 876,
            "comment": "//because Arrays.sort() uses quicksort which is dumb\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 876,
            "comment": "//Collections.sort() uses merge sort\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 877,
            "comment": "/*==============================================\nAuthor      : Shadman Shariar                 ||\nEmail       : shadman.shariar@northsouth.edu  ||\nUniversity  : North South University (NSU)    ||\nFacebook    : shadman.shahriar.007            ||\n==============================================*/"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 877,
            "comment": "/** Array List, Linked List, Vector\n *  Stack, Queue, Array Deque, Priority Queue (Max/Min Heap)\n *  Hash Set, Linked Hash Set, Tree Set (BST)\n *  Hash Map, Linked Hash Map, Tree Map (BST) */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 877,
            "comment": "//import java.math.BigInteger;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 877,
            "comment": "//import java.text.DecimalFormat;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 877,
            "comment": "//public static FastReader fr = new FastReader();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 877,
            "comment": "//public static Scanner input = new Scanner(System.in);\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 877,
            "comment": "//public static PrintWriter pw = new PrintWriter(System.out);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 877,
            "comment": "//public static DecimalFormat df = new DecimalFormat(\".000\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 877,
            "comment": "//public static BufferedReader br = new BufferedReader\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 877,
            "comment": "//(new InputStreamReader(System.in));\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 877,
            "comment": "//BigInteger bi1 = new BigInteger(\"000\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 877,
            "comment": "//StringBuilder sb = new StringBuilder();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 877,
            "comment": "//StringTokenizer str = new StringTokenizer(\"String\",\"Split\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 877,
            "comment": "//-----------------CODE STARTS FROM HERE------------------//\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 877,
            "comment": "//---------------------CODE ENDS HERE---------------------//\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 877,
            "comment": "//pw.close();\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 878,
            "comment": "// call it like this: lower_bound(a, x + 1) ( /!\\ + 1 )\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 878,
            "comment": "// for Map with custom key/value, override toString in your custom class\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 878,
            "comment": "//long lStartTime = System.currentTimeMillis();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 878,
            "comment": "//long lEndTime = System.currentTimeMillis();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 878,
            "comment": "//out.println(\"Elapsed time in seconds: \" + (double)(lEndTime - lStartTime) / 1000.0);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 879,
            "comment": "//=============================================================================\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 879,
            "comment": "//--------------------------Main-Class---------------------------------\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 879,
            "comment": "//=============================================================================\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 879,
            "comment": "//=============================================================================\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 879,
            "comment": "//--------------------------Dheeraj-Bhagchandani---------------------------------\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 879,
            "comment": "//=============================================================================\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 879,
            "comment": "//\t\tt = sc.nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 879,
            "comment": "/////////////////////////////////////////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 879,
            "comment": "/////////////////////////////////////////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 880,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author cunbidun\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 881,
            "comment": "/**\n * def solve(A, B):\n * H = defaultdict(int)\n * for a in A:\n * H[a] += 1\n * for c in B:\n * H[c] -= 1\n * for cc in H.itervalues():\n * if cc != 0:\n * return False\n * <p>\n * h = [A[0]]\n * i = 0\n * j = 1\n * while i < len(A):\n * if len(h) > 0 and h[0] == B[i]:\n * heapq.heappop(h)\n * else:\n * if len(h) > 0 and h[0] < B[i]:\n * return False\n * while A[j] != B[i]:\n * heapq.heappush(h, A[j])\n * j += 1\n * if len(h) > 0 and h[0] < A[j]:\n * return False\n * j += 1\n * <p>\n * i += 1\n * <p>\n * return True\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 883,
            "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 883,
            "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 883,
            "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 883,
            "comment": "// in = new Reader();\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 883,
            "comment": "// in = new Reader(new FileReader(\"input.txt\"));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 883,
            "comment": "// out = new PrintWriter(new FileWriter(\"output.txt\"));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 884,
            "comment": "/**\n * BaZ :D\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 884,
            "comment": "//        pa(\"Arr\", arr);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 884,
            "comment": "//        pa(\"pref_d\", pref_d);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 884,
            "comment": "//        pa(\"suff_d\", suff_d);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 885,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Xinyi Tao\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 885,
            "comment": "//ascending order\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 887,
            "comment": "// start at i = 0\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 887,
            "comment": "// skip i = 0\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 888,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 889,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author mikit\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 889,
            "comment": "// out.setBoolLabel(LightWriter.BoolLabel.YES_NO_FIRST_UP);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 891,
            "comment": "//    for(i=0;i<n;++i)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 891,
            "comment": "//        output.write(prem[i] + \" \");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 891,
            "comment": "//    output.write(\"\\n\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 891,
            "comment": "//     for(i=0;i<n;++i)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 891,
            "comment": "//        output.write(preM[i] + \" \");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 891,
            "comment": "//    output.write(\"\\n\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 891,
            "comment": "//     for(i=0;i<n;++i)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 891,
            "comment": "//        output.write(sufm[i] + \" \");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 891,
            "comment": "//    output.write(\"\\n\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 891,
            "comment": "//     for(i=0;i<n;++i)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 891,
            "comment": "//        output.write(sufM[i] + \" \");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 891,
            "comment": "//    output.write(\"\\n\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 891,
            "comment": "//t = scan.nextInt();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 892,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author KharYusuf\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 892,
            "comment": "//w.println(a[i][0]+\" \"+c);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 893,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author khokharnikunj8\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 893,
            "comment": "//taken first\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 894,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 894,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 894,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 894,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 895,
            "comment": "//code written by a living bruh moment\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 896,
            "comment": "// Key point is to find a truth, what is the right delta\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 896,
            "comment": "// a smallest set is 4 items.\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 896,
            "comment": "// back up of inputs, to find index when finding offending item\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 896,
            "comment": "// sort first\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 896,
            "comment": "// java.lang.ArrayIndexOutOfBoundsException: 2\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 896,
            "comment": "// at E1185D1.main(E1185D1.java:32)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 896,
            "comment": "// Assume b_b[0] is the cause\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 896,
            "comment": "//Wrong answer on test 10\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 896,
            "comment": "// Assume b_b[1] is the cause\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 896,
            "comment": "//never reach here, safe net\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 897,
            "comment": "// Working program using Reader Class \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 897,
            "comment": "// line length \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 897,
            "comment": "// Everything divides 0  \n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 897,
            "comment": "// base case \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 897,
            "comment": "// a is greater \n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 897,
            "comment": "//Reader scan=new Reader(); \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 898,
            "comment": "/*package whatever //do not write package name here */"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 898,
            "comment": "//do not write package name here */\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 898,
            "comment": "//System.out.println(map.size());\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 898,
            "comment": "//System.out.println(count);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 899,
            "comment": "/*console writer*/"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 899,
            "comment": "/*Debug Reader*/"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 899,
            "comment": "/*public static void seive(int size)\n    {\n        prime[0] = prime[1] = false;\n        int p = 2;\n        while(p*p<= size)\n        {\n            if(prime[p])\n            {\n                for(int i=p*p;i<size;i += p)\n                    prime[i] = false;\n            }\n            p++;\n        }\n    }*/"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 899,
            "comment": "/*public static int lcm(int n1, int n2) \n    {\n        int answer = (n1 * n2) / (gcd(n1, n2));\n        return answer;\n    }*/"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 899,
            "comment": "//import java.lang.*;\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 899,
            "comment": "//public static Read cin;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 899,
            "comment": "//Scan cin =new Scan();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 899,
            "comment": "//cin = new Read(new FileInputStream(new File(\"in4.txt\")));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 899,
            "comment": "//cin = new Read(System.in);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 899,
            "comment": "//edges case\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 899,
            "comment": "//check if already AP by removing first element\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 899,
            "comment": "//check if already AP by removing secong element\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 899,
            "comment": "//main body\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 901,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 901,
            "comment": "//Return floor log2n\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 901,
            "comment": "// returns 0 for bits=0\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 902,
            "comment": "/*\n                             ;\\\n                            |' \\\n         _                  ; : ;\n        / `-.              /: : |\n       |  ,-.`-.          ,': : |\n       \\  :  `. `.       ,'-. : |\n        \\ ;    ;  `-.__,'    `-.|\n         \\ ;   ;  :::  ,::'`:.  `.\n          \\ `-. :  `    :.    `.  \\\n           \\   \\    ,   ;   ,:    (\\\n            \\   :., :.    ,'o)): ` `-.\n           ,/,' ;' ,::\"'`.`---'   `.  `-._\n         ,/  :  ; '\"      `;'          ,--`.\n        ;/   :; ;             ,:'     (   ,:)\n          ,.,:.    ; ,:.,  ,-._ `.     \\\"\"'/\n          '::'     `:'`  ,'(  \\`._____.-'\"'\n             ;,   ;  `.  `. `._`-.  \\\\\n             ;:.  ;:       `-._`-.\\  \\`.\n              '`:. :        |' `. `\\  ) \\\n      -hrr-      ` ;:       |    `--\\__,'\n                   '`      ,'\n                        ,-'\n\n\n                      free bug dog\n*/"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 902,
            "comment": "// Don't place your source in a package\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 902,
            "comment": "// Please name your class Main\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 903,
            "comment": "// try to remove i\t\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 903,
            "comment": "// remove left and right\t\t\t\t\t\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 903,
            "comment": "// append new diff\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 904,
            "comment": "// ;;;;;;;;;;;;;;;;;;;;;;;;;; LEARN FAST JAVA I/O ;;;;;;;;;;;;;;;;;;;;;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 904,
            "comment": "// LENT MONEY PROBLEM\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 904,
            "comment": "// CODEFORCES UPSOLVING\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 904,
            "comment": "//        System.out.println(\"h9i\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 904,
            "comment": "//        for (int i:arr) System.out.println(i);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 905,
            "comment": "//System.out.println(d1);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 905,
            "comment": "//System.out.println(\"l \" + last + \" = p \" + p1.peek());\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 905,
            "comment": "//System.out.println(d2);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 905,
            "comment": "//System.out.println(\"l \" + last + \" = p \" + p1.peek());\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 906,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 906,
            "comment": "//out.println(hm);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 906,
            "comment": "//out.println(hm);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 907,
            "comment": "/*int n = stdin.nextInt();\n        for(int i = 0; i < n; i++)\n        {\n        \ttest(stdin);\n        }*/"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 908,
            "comment": "/**\n * #\n *\n * @author pttrung\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 908,
            "comment": "// PrintWriter out = new PrintWriter(new FileOutputStream(new File(\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 908,
            "comment": "// \"output.txt\")));\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 908,
            "comment": "//System.out.println(set + \" \" + Arrays.toString(data));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 908,
            "comment": "// System.out.println(ok + \" \" + i);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 908,
            "comment": "// System.setOut(new PrintStream(new BufferedOutputStream(System.out), true));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 908,
            "comment": "//  br = new BufferedReader(new InputStreamReader(new FileInputStream(new File(\"input.txt\"))));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 909,
            "comment": "// line length \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 909,
            "comment": "// pw.println(\"Hello3\");\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 909,
            "comment": "// pw.println(\"Hello2\");\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 909,
            "comment": "// pw.println(\"Hello1\");\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 909,
            "comment": "// pw.println(\"Hello\");\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 909,
            "comment": "// pw.println(\"last\");\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 910,
            "comment": "// to increse stack size in java\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 910,
            "comment": "//  override equals method for object to remove tem from arraylist and sets etc.......\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 913,
            "comment": "/*\n *created by Kraken on 06-05-2020 at 13:30\n */"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 913,
            "comment": "//package com.kraken.cf.practice;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 914,
            "comment": "//System.out.println(\"djg\");\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 914,
            "comment": "//System.out.println(\"kjgsdkl\");\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 915,
            "comment": "// FastScanner in = new FastScanner(\"search.in\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 915,
            "comment": "//PrintWriter out = new PrintWriter(\"search.out\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 916,
            "comment": "// no removal\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 917,
            "comment": "/*\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2877\u28ef\u28bf\u28ff\u28f7\u28fb\u28af\u28ff\u287d\u28fb\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28c7\u2838\u28ff\u28ff\u28c6\u2839\u28ff\u28ff\u28be\u28df\u28ef\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28fd\u28fb\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28fb\u28fd\u287f\u28ff\u28ce\u2819\u28ff\u28de\u28f7\u284c\u28bb\u28df\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2839\u28ff\u28ff\u2846\u283b\u28ff\u28df\u28ef\u287f\u28fd\u287f\u28ff\u28ff\u28ff\u28ff\u28fd\u2877\u28ef\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28df\u28f7\u28ff\u28ff\u28ff\u2840\u2839\u28df\u28fe\u28df\u28c6\u2839\u28ef\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2847\u28a0\u2858\u28ff\u28ff\u2844\u2809\u28bf\u28ff\u28fd\u2877\u28ff\u28fb\u28ff\u28ff\u28ff\u28ff\u285d\u28f7\u28ef\u28bf\u28ff\u28ff\u28ff\u28ff\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ef\u28bf\u28fe\u28bf\u28ff\u2844\u2884\u2818\u28bf\u28de\u287f\u28e7\u2848\u28b7\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2847\u28b8\u28e7\u2818\u28ff\u28f7\u2808\u28e6\u2819\u28bf\u28fd\u28f7\u28fb\u28fd\u28ff\u28ff\u28ff\u28ff\u28cc\u28bf\u28ef\u28bf\u28ff\u28ff\u28ff\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28df\u28ef\u28ff\u28bf\u28ff\u2846\u28b8\u2877\u2848\u28bb\u287d\u28f7\u2877\u2844\u283b\u28fd\u28ff\u28ff\u287f\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28ff\u28ff\u28ff\u28ff\u28cf\u28b0\u28ef\u28b7\u2808\u28ff\u2846\u28b9\u28b7\u284c\u283b\u287e\u288b\u28f1\u28ef\u28ff\u28ff\u28ff\u28ff\u2846\u28bb\u287f\u28ff\u28ff\u28ff\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u284e\u28ff\u28be\u287f\u28ff\u2846\u28b8\u28fd\u28bb\u28c4\u2839\u28f7\u28df\u28ff\u28c4\u2839\u28df\u28ff\u28ff\u28df\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28fd\u28ff\u28ff\u28ff\u2847\u28b8\u28ef\u28df\u28e7\u2818\u28f7\u2808\u286f\u281b\u2880\u2850\u28be\u28df\u28f7\u28fb\u28ff\u28ff\u28ff\u287f\u284c\u28bf\u28fb\u28ff\u28ff\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28e7\u28b8\u287f\u28df\u28ff\u2847\u28b8\u28ef\u28df\u28ee\u28a7\u2848\u28bf\u28de\u287f\u28e6\u2818\u280f\u28f9\u28ff\u28fd\u28bf\u28ff\u28ff\u28ff\u28ff\u28ef\u28ff\u28ff\u28ff\u2847\u28b8\u28ff\u28ff\u28fe\u2846\u2839\u2880\u28e0\u28fe\u28df\u28f7\u2848\u28bf\u28de\u28ef\u28bf\u28ff\u28ff\u28ff\u28b7\u2818\u28ef\u28ff\u28ff\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2848\u28ff\u28bf\u28fd\u2847\u2818\u281b\u281b\u281b\u2813\u2813\u2808\u281b\u281b\u281f\u2807\u2880\u28bf\u28fb\u28ff\u28ef\u28bf\u28ff\u28ff\u28ff\u28f7\u28bf\u28ff\u28ff\u2801\u28fe\u28ff\u28ff\u28ff\u28e7\u2844\u2807\u28f9\u28ff\u28fe\u28ef\u28ff\u2844\u283b\u28fd\u28ef\u28bf\u28fb\u28ff\u28ff\u2847\u28b9\u28fe\u28ff\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2847\u28b9\u28ff\u287d\u2847\u28b8\u28ff\u28ff\u28ff\u28ff\u28ff\u28de\u28c6\u2830\u28f6\u28f6\u2844\u2880\u28bb\u287f\u28ef\u28ff\u287d\u28ff\u28ff\u28ff\u28af\u28df\u287f\u2880\u28ff\u28ff\u28ff\u28ff\u28ff\u28e7\u2810\u28f8\u28ff\u28ff\u28f7\u28ff\u28ff\u28c6\u2839\u28ef\u28ff\u28fb\u28ff\u28ff\u28ff\u2880\u28ff\u28bf\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2818\u28ef\u287f\u2847\u28b8\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28e7\u2848\u28bf\u28f3\u2818\u2844\u283b\u28ff\u28be\u28fd\u28df\u287f\u28ff\u28af\u28ff\u2847\u28b8\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2840\u28be\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28c6\u2839\u28fe\u28f7\u28fb\u28ff\u287f\u2847\u28b8\u28ff\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2847\u28b9\u28ff\u2807\u28b8\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28c4\u283b\u2847\u28b9\u28c6\u2839\u28df\u28fe\u28fd\u28fb\u28df\u28ff\u28fd\u2801\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28c7\u28ff\u28ff\u283f\u281b\u281b\u2809\u2819\u280b\u2880\u2801\u2898\u28ef\u28ff\u28ff\u28e7\u2818\u28ff\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2848\u28ff\u2843\u28bc\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28e6\u2859\u280c\u28ff\u28c6\u2818\u28ff\u28de\u287f\u28de\u287f\u285e\u28a0\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u281b\u2809\u2801\u2880\u28c0\u28e0\u28e4\u28e4\u28f6\u28f6\u28f6\u2846\u28bb\u28fd\u28de\u287f\u28f7\u2808\u28ff\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2803\u2818\u2801\u2809\u2809\u2809\u2809\u2809\u2809\u2809\u2809\u2809\u2819\u281b\u281b\u28bf\u28c4\u28bb\u28ff\u28e7\u2818\u28af\u28df\u287f\u28fd\u2801\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u2843\u2880\u2880\u2818\u281b\u283f\u28bf\u28fb\u28df\u28ef\u28fd\u28fb\u28f5\u2840\u28bf\u28ef\u28df\u28ff\u2880\u28ff\n\u28ff\u28ff\u28ff\u28df\u28ff\u28ff\u28ff\u28ff\u28f6\u28f6\u2846\u2880\u28ff\u28fe\u28ff\u28fe\u28f7\u28ff\u28f6\u283f\u281a\u2809\u2880\u2880\u28e4\u28ff\u28f7\u28ff\u28ff\u28f7\u2848\u28bf\u28fb\u2883\u28fc\u28ff\u28ff\u28ff\u28ff\u28fb\u28ff\u28ff\u28ff\u2876\u28e6\u28e4\u28c4\u28c0\u2840\u2809\u281b\u281b\u2837\u28ef\u28f3\u2808\u28fe\u287d\u28fe\u2880\u28ff\n\u28ff\u28bf\u28ff\u28ff\u28fb\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2810\u28ff\u28ff\u28ff\u28ff\u283f\u280b\u2801\u2880\u2880\u28e4\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28cc\u28e5\u28fe\u287f\u28ff\u28ff\u28f7\u28ff\u28ff\u28bf\u28f7\u28ff\u28ff\u28df\u28fe\u28fd\u28f3\u28af\u28df\u28f6\u28e6\u28e4\u287e\u28df\u28e6\u2818\u28ff\u28be\u2841\u28ba\n\u28ff\u28fb\u28ff\u28ff\u2877\u28ff\u28ff\u28ff\u28ff\u28ff\u2857\u28e6\u2838\u287f\u280b\u2801\u2880\u2880\u28e0\u28f4\u28bf\u28ff\u28fd\u28fb\u28bd\u28fe\u28df\u28f7\u28ff\u28df\u28ff\u28ff\u28ff\u28f3\u283f\u28f5\u28e7\u28fc\u28ff\u28ff\u28ff\u28ff\u28ff\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28fd\u28f3\u28ef\u28ff\u28ff\u28ff\u28fd\u2880\u28b7\u28fb\u2804\u2818\n\u28ff\u28b7\u28fb\u28ff\u28ff\u28f7\u28fb\u28ff\u28ff\u28ff\u2877\u281b\u28c1\u2880\u28c0\u28e4\u28f6\u28ff\u28db\u287f\u28ff\u28ee\u28fd\u287b\u28ff\u28ee\u28fd\u28fb\u28af\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ef\u2880\u28b8\u28ff\u2880\u2846\n\u2838\u28df\u28ef\u28ff\u28ff\u28f7\u28bf\u28fd\u28ff\u28ff\u28f7\u28ff\u28f7\u28c6\u2839\u28ff\u28f6\u28ef\u283f\u28ff\u28f6\u28df\u28fb\u28bf\u28f7\u28fd\u28fb\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2880\u28ef\u28df\u2880\u2847\n\u28c7\u2839\u28df\u28fe\u28fb\u28ff\u28ff\u28be\u287d\u28ff\u28ff\u28ff\u28ff\u28ff\u28c6\u28b9\u28f6\u28ff\u28fb\u28f7\u28ef\u28df\u28ff\u28ff\u28fd\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2880\u287f\u2847\u28b8\u2847\n\u28ff\u28c6\u2839\u28f7\u287b\u28fd\u28ff\u28ef\u28bf\u28fd\u28fb\u28ff\u28ff\u28ff\u28ff\u28c6\u28bb\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u281b\u28bb\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2807\u28b8\u28ff\u2807\u28fc\u2847\n\u2859\u283e\u28c6\u2839\u28ff\u28e6\u281b\u28ff\u28af\u28f7\u28bf\u287d\u28ff\u28ff\u28ff\u28ff\u28c6\u283b\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2803\u280e\u28b8\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u280f\u2880\u28ff\u28fe\u28e3\u287f\u2847\n\u28ff\u28f7\u284c\u28a6\u2819\u28ff\u28ff\u28cc\u283b\u28fd\u28af\u28ff\u28fd\u28fb\u28ff\u28ff\u28ff\u28e7\u2829\u28bb\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u284f\u28b0\u28a3\u2818\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2803\u2880\u2880\u28bf\u28de\u28f7\u28bf\u2847\n\u28ff\u28fd\u28c6\u2839\u28e7\u2818\u28ff\u28ff\u2877\u28cc\u2819\u28b7\u28ef\u2877\u28df\u28ff\u28ff\u28ff\u28f7\u2840\u2879\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28c8\u2803\u28f8\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u281f\u2880\u28f4\u2867\u2880\u2838\u28ff\u287d\u28ff\u2880\n\u28bb\u28fd\u28ff\u2844\u28bb\u28f7\u2848\u28bf\u28ff\u28ff\u28a7\u2880\u2819\u28bf\u28fb\u287e\u28fd\u28fb\u28ff\u28ff\u28c4\u280c\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u281b\u2881\u28f0\u28fe\u28df\u287f\u2880\u2844\u28bf\u28df\u28ff\u2880\n\u2844\u28bf\u28ff\u28f7\u2880\u2839\u28df\u28c6\u283b\u28ff\u28ff\u28c6\u2880\u28c0\u2809\u283b\u28ff\u287d\u28ef\u28ff\u28ff\u28f7\u28c8\u28bb\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u280b\u2880\u28e0\u2818\u28ef\u28f7\u28ff\u285f\u2880\u2886\u2838\u28ff\u285f\u28b8\n\u28f7\u2848\u28bf\u28ff\u28c7\u28b1\u2858\u28bf\u28f7\u28ec\u28d9\u283f\u28e7\u2818\u28c6\u2880\u2808\u283b\u28f7\u28df\u28fe\u28bf\u28ff\u28c6\u2839\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u280b\u28e0\u285e\u28a1\u28ff\u2880\u28ff\u28ff\u28ff\u2807\u2844\u28b8\u2844\u28bb\u2847\u28fc\n\u28ff\u28f7\u2848\u28bf\u28ff\u2846\u28a3\u2840\u2819\u28be\u28df\u28ff\u28ff\u28f7\u2848\u2802\u2818\u28e6\u2848\u283f\u28ef\u28ff\u28be\u28ff\u28c6\u2819\u283b\u283f\u283f\u283f\u283f\u287f\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u283f\u281b\u288b\u28e0\u28fe\u285f\u28a0\u28ff\u28ff\u2880\u28ff\u28ff\u285f\u28a0\u28ff\u2888\u28e7\u2818\u28a0\u28ff\n\u28ff\u28ff\u28ff\u28c4\u283b\u28ff\u2844\u28b3\u2844\u2886\u2859\u283e\u28fd\u28ff\u28ff\u28c6\u2840\u28b9\u2877\u28c4\u2819\u28bf\u28ff\u287e\u28ff\u28c6\u2880\u2840\u2880\u2880\u2880\u2880\u2880\u2880\u2880\u2880\u2880\u2880\u2880\u2880\u28c0\u28e0\u28f4\u287f\u28ef\u280f\u28e0\u28ff\u28ff\u284f\u28b8\u28ff\u287f\u2881\u28ff\u28ff\u2880\u28ff\u2806\u28b8\u28ff\n\u28ff\u28ff\u28ff\u28ff\u28e6\u2859\u28ff\u28c6\u28bb\u284c\u28bf\u28f6\u28a4\u28c9\u28d9\u28ff\u28f7\u2840\u2819\u283d\u2837\u2804\u2839\u28ff\u28df\u28ff\u28c6\u2899\u28cb\u28e4\u28e4\u28e4\u28c4\u28c0\u2880\u2880\u2880\u2880\u28fe\u28ff\u28df\u2877\u28ef\u287f\u2883\u28fc\u28ff\u28ff\u28ff\u2807\u28fc\u285f\u28e1\u28ff\u28ff\u28ff\u2880\u287f\u28a0\u2808\u28ff\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28ee\u28ff\u28ff\u28ff\u284c\u2801\u28a4\u28e4\u28e4\u28e4\u28ec\u28ed\u28f4\u28f6\u28f6\u28f6\u28c6\u2808\u28bb\u28ff\u28ff\u28c6\u28bb\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28f6\u28e4\u28cc\u28c9\u2858\u281b\u283b\u2836\u28ff\u28ff\u28ff\u28ff\u285f\u28f0\u28eb\u28f4\u28ff\u28ff\u28ff\u28ff\u2804\u28f7\u28ff\u28ff\u28ff\n*/"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 918,
            "comment": "// else res = i;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 918,
            "comment": "// System.out.println(c + \" \" + first + \" \" + A[res]) ;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 919,
            "comment": "// call it like this: lower_bound(a, x + 1) ( /!\\ + 1 )\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 919,
            "comment": "// for Map with custom key/value, override toString in your custom class\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 919,
            "comment": "//long lStartTime = System.currentTimeMillis();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 919,
            "comment": "//long lEndTime = System.currentTimeMillis();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 919,
            "comment": "//out.println(\"Elapsed time in seconds: \" + (double)(lEndTime - lStartTime) / 1000.0);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 920,
            "comment": "//package cf568d2;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 921,
            "comment": "// let's check if all the diff equal in the first place\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 921,
            "comment": "// if all diff equal in the first place, then we can just remove the first elem\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 921,
            "comment": "// if we get here, than we know there must be a \"bad element\" that has a different diff than the first. We want to locate where\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 921,
            "comment": "// that bad elem is. But first, we need to know which is the correct diff. This is a boolean situation, becuase there can't be\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 921,
            "comment": "// 2 correct diffs. We will just check whether the first diff (between index 0-1) is the correct one. How do we check? What if we remove the second\n"
        },
        "Heuristic": [
            "H1",
            "H12"
        ]
    },
    {
        "nl": {
            "id": 921,
            "comment": "// element, we could have the diff of index 0-2. Then, if every other val in the d[] is == diff of 0-2,  that means we have found the\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 921,
            "comment": "// correct elemnt to remove, which is the second elem. Else, if there are other differences, that means the second elem must not be the answer.\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 921,
            "comment": "// Although we can still output -1. we are sure that the difference between 0-1 is correct. (Since elem 2 is not the ans);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 921,
            "comment": "// All other differences equal to 0-2 (removing second elem)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 921,
            "comment": "// we already had a bad elem\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 921,
            "comment": "// we don't have an elem to delete anymore, but everything before it is good. So, just remove the last\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 921,
            "comment": "// try to remove the i+1 term and go to i+2\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 921,
            "comment": "// we skipped an elem, no point to check that\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 921,
            "comment": "// no solution\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 921,
            "comment": "// found ans\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 921,
            "comment": "// no ans found, but didn't return -1, that means we can return the last elem\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 922,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Vaibhav Pulastya\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 923,
            "comment": "//                else {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 923,
            "comment": "//                    i++;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 923,
            "comment": "//                }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 924,
            "comment": "//package test_1185D;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 924,
            "comment": "// \u0438\u0449\u0435\u043c \u0443\u0437\u043b\u044b \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 924,
            "comment": "// \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c \u0433\u0438\u043f\u043e\u0442\u0438\u0437\u0443 \u043e\u0431 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0435 \u043d\u0435 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u043c \u0432 \u0430\u0440\u0438\u0444\u043c\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 924,
            "comment": "//                number = myKeays.getOrDefault(delta, myDefault);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 924,
            "comment": "//                if (number == myDefault){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 924,
            "comment": "//                    myKeays.put(delta,1);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 924,
            "comment": "//                }else{\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 924,
            "comment": "//                    myKeays.replace(delta,++number);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 924,
            "comment": "//                }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 924,
            "comment": "//                // \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0430 \u043e\u0442\u0441\u0443\u0442\u0432\u0438\u0435 \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0438\u0438\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 924,
            "comment": "//            System.out.println(1);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 924,
            "comment": "//            System.exit(0);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 924,
            "comment": "//number = myKeays.get(delta1);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 924,
            "comment": "// \u0438\u0449\u0435\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 925,
            "comment": "/**\n         * Make the node with the minimum key as the root of tree\n         */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 925,
            "comment": "/**\n         * Make the node with the maximum key as the root of tree\n         */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 925,
            "comment": "/**\n         * delete root of tree, then merge remain nodes into a new tree, and return the new root\n         */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 925,
            "comment": "/**\n         * detach the left subtree from root and return the root of left subtree\n         */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 925,
            "comment": "/**\n         * detach the right subtree from root and return the root of right subtree\n         */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 925,
            "comment": "//bruteForce();\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 926,
            "comment": "// 1e9 + 7\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 926,
            "comment": "// slow if true\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 926,
            "comment": "// int = num(); // long = ll();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 926,
            "comment": "// string = next(); // a string line = line();\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 926,
            "comment": "// ---------------------------------- \\\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 926,
            "comment": "// boolean yes = false;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 926,
            "comment": "// if (i == 0 && arr[0].a == 9610870)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 926,
            "comment": "//     yes = true;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 926,
            "comment": "// if (yes) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 926,
            "comment": "//     outln(arr[177522-1].a);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 926,
            "comment": "//     return;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 926,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 926,
            "comment": "// if (yes) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 926,
            "comment": "//     outln(sel);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 926,
            "comment": "//     return;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 926,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 926,
            "comment": "// ---------------------------------- \\\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 926,
            "comment": "//#region\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 926,
            "comment": "//PROGRAMMING/input.txt\")));\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 926,
            "comment": "//#endregion\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 927,
            "comment": "/*\n\t\tfor (int[] pair : array) out.print(pair[0] + \" \");\n\t\tout.println();\n\t\tout.println(Arrays.toString(toLeft));\n\t\tout.println(Arrays.toString(toRight));\n\t\t\n\t\tout.println(\"Elements:\");\n\t\t*/"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 927,
            "comment": "// 1 or 2 remaining elements always forms progression.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 928,
            "comment": "//ascending order\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 928,
            "comment": "//ascending order\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 928,
            "comment": "//System.out.println(i+\" \"+x+\" \"+k);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 929,
            "comment": "/**\n * Created by Katushka on 08.02.2020.\n */"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 930,
            "comment": "// call it like this: lower_bound(a, x + 1) ( /!\\ + 1 )\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 930,
            "comment": "// for Map with custom key/value, override toString in your custom class\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 930,
            "comment": "//long lStartTime = System.currentTimeMillis();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 930,
            "comment": "//long lEndTime = System.currentTimeMillis();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 930,
            "comment": "//out.println(\"Elapsed time in seconds: \" + (double)(lEndTime - lStartTime) / 1000.0);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 931,
            "comment": "/******************************************************************************************\n     *****************************************************************************************/"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 931,
            "comment": "/****************************************************************************************\n     *****************************************************************************************/"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 931,
            "comment": "// \t\tt=g.ni();\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 932,
            "comment": "//package round_568;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 932,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 932,
            "comment": "//\t\t\tSystem.out.println(arr1[i]+\" \"+arr2[i]);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 932,
            "comment": "//\t\tSystem.out.println(arr);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 932,
            "comment": "//\t\t\tif(d-c==2*(b-a)) {\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 932,
            "comment": "//\t\t\t\trem1=1;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 932,
            "comment": "//\t\t\t\tfor(int i=3;i<n;i++) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 932,
            "comment": "//\t\t\t\t\tif(arr.get(i)-arr.get(i-1)!=2*(b-a)) {\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 932,
            "comment": "//\t\t\t\t\t\tSystem.out.println(-1);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 932,
            "comment": "//\t\t\t\t\t\treturn;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 932,
            "comment": "//\t\t\t\t\t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 932,
            "comment": "//\t\t\t\t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 932,
            "comment": "//\t\t\t\tSystem.out.println(arr2[1]+1);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 932,
            "comment": "//\t\t\t\treturn;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 932,
            "comment": "//\t\t\t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 932,
            "comment": "//\t\t\t\t\t\t\tSystem.out.println(arr.get(i-1)+ diff);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 932,
            "comment": "//\t\t\t\t\t\t\tarr.get(i+1) = arr.get(i-1)+ diff;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 933,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 934,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 935,
            "comment": "// System.out.println(d1);System.out.println(d2);System.out.println(d3);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 935,
            "comment": "// System.out.println(A[i][0]);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 936,
            "comment": "/* for (int i = 1; i < n; i++) {\n            if (b[i] - b[i - 1] != d1) {\n                if (p1 != -1) {\n                    if (!(p1 == i - 1 && b[i] - b[i - 2] == d1))\n                        c1 = false;\n                } else\n                    p1 = i;\n            }\n\n            /*if (b[i] - b[i - 1] != d2) {\n                if (p2 != i - 1 && p2 != -1)\n                    c2 = false;\n                else if (p2 != i - 1)\n                    p2 = i;\n\n            if (b[i] - b[i - 1] != d2) {\n                if (p2 != -1) {\n                    if (!(p2 == i - 1 && b[i] - b[i - 2] == d2))\n                        c2 = false;\n                } else\n                    p2 = i;\n            }\n        }*/"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 939,
            "comment": "//SOLUTION BEGIN\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 939,
            "comment": "//Into the Hardware Mode\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 939,
            "comment": "//SOLUTION END\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 939,
            "comment": "//Solution Credits: Taranpreet Singh\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 941,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 942,
            "comment": "//package com.company;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 942,
            "comment": "// write your code here\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 942,
            "comment": "//ind=i;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 942,
            "comment": "//  System.out.println(\"JI\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 942,
            "comment": "//        System.out.println(\"JI\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 942,
            "comment": "//       System.out.println(\"JI\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 942,
            "comment": "//      System.out.println(\"JI\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 942,
            "comment": "//    String name, address;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 942,
            "comment": "// Constructor\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 942,
            "comment": "// Used to print student details in main()\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 942,
            "comment": "// Used for sorting in ascending order of\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 942,
            "comment": "// roll number\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 944,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 944,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 945,
            "comment": "// RANDOM shuffle\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 945,
            "comment": "// QUICK shuffle\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 946,
            "comment": "/*console writer*/"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 946,
            "comment": "/*Debug Reader*/"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 946,
            "comment": "/*public static void seive(int size)\n    {\n        prime[0] = prime[1] = false;\n        int p = 2;\n        while(p*p<= size)\n        {\n            if(prime[p])\n            {\n                for(int i=p*p;i<size;i += p)\n                    prime[i] = false;\n            }\n            p++;\n        }\n    }*/"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 946,
            "comment": "/*public static int lcm(int n1, int n2) \n    {\n        int answer = (n1 * n2) / (gcd(n1, n2));\n        return answer;\n    }*/"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 946,
            "comment": "//import java.lang.*;\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 946,
            "comment": "//public static InputReader cin;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 946,
            "comment": "//Scan cin =new Scan();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 946,
            "comment": "//cin = new InputReader(new FileInputStream(new File(\"in2.txt\")));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 946,
            "comment": "//cin = new InputReader(System.in);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 946,
            "comment": "//edges case\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 946,
            "comment": "//check if already AP by removing first element\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 946,
            "comment": "//check if already AP by removing secong element\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 946,
            "comment": "//main body\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 947,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 948,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Aman Kumar Singh\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 948,
            "comment": "//pn(Arrays.toString(sz1));\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 948,
            "comment": "//pn(Arrays.toString(sz2));\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 948,
            "comment": "//pn(Arrays.toString(val1));\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 948,
            "comment": "//pn(Arrays.toString(val2));\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 948,
            "comment": "//pn(sz1[i - 1] +\" \"+val1[i] +\" \"+(arr[i - 1] - arr[i + 1]));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 949,
            "comment": "// This template code suggested by KT BYTE Computer Science Academy\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 949,
            "comment": "//   for use in reading and writing files for USACO problems.\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 949,
            "comment": "// https://content.ktbyte.com/problem.java\n"
        },
        "Heuristic": [
            "H2",
            "H9"
        ]
    },
    {
        "nl": {
            "id": 950,
            "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 950,
            "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 950,
            "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 950,
            "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 950,
            "comment": "////////                                                                                                               /////////\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 950,
            "comment": "////////                                                                                                               /////////\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 950,
            "comment": "////////   HHHH        HHHH  EEEEEEEEEEEEE   MMMM          MMMM         OOOOOO             SSSSSSS      EEEEEEEEEEEEE  /////////\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 950,
            "comment": "////////   HHHH        HHHH  EEEEEEEEEEEEE   MMMMMM      MMMMMM      OOO      OOO        SSSS   SSS     EEEEEEEEEEEEE  /////////\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 950,
            "comment": "////////   HHHH        HHHH  EEEEE           MMMM MMM  MMM MMMM    OOO          OOO    SSSS       SSS   EEEEE          /////////\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 950,
            "comment": "////////   HHHH        HHHH  EEEEE           MMMM  MMMMMM  MMMM   OOO            OOO   SSSS             EEEEE          /////////\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 950,
            "comment": "////////   HHHH        HHHH  EEEEE           MMMM          MMMM  OOO              OOO   SSSSSSS         EEEEE          /////////\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 950,
            "comment": "////////   HHHHHHHHHHHHHHHH  EEEEEEEEEEE     MMMM          MMMM  OOO              OOO      SSSSSS       EEEEEEEEEEE    /////////\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 950,
            "comment": "////////   HHHHHHHHHHHHHHHH  EEEEEEEEEEE     MMMM          MMMM  OOO              OOO         SSSSSSS   EEEEEEEEEEE    /////////\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 950,
            "comment": "////////   HHHH        HHHH  EEEEE           MMMM          MMMM   OOO            OOO              SSSS  EEEEE          /////////\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 950,
            "comment": "////////   HHHH        HHHH  EEEEE           MMMM          MMMM    OOO          OOO     SSS       SSSS  EEEEE          /////////\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 950,
            "comment": "////////   HHHH        HHHH  EEEEEEEEEEEEE   MMMM          MMMM      OOO      OOO        SSS    SSSS    EEEEEEEEEEEEE  /////////\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 950,
            "comment": "////////   HHHH        HHHH  EEEEEEEEEEEEE   MMMM          MMMM         OOOOOO             SSSSSSS      EEEEEEEEEEEEE  /////////\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 950,
            "comment": "////////                                                                                                               /////////\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 950,
            "comment": "////////                                                                                                               /////////\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 950,
            "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 950,
            "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 950,
            "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 950,
            "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 950,
            "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 950,
            "comment": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 950,
            "comment": "//  FileWriter f = new FileWriter(\"C:\\\\Users\\\\Ibrahim\\\\out.txt\");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 950,
            "comment": "//pw.println(pre+\" \"+next);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 952,
            "comment": "//start\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 952,
            "comment": "//+1\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 952,
            "comment": "//forgot\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 952,
            "comment": "//add after 1 WA\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 952,
            "comment": "//if(ii==2 && n==5 && diff1*2==diff2) {  // n==4 -> 2 WA -> n==5 -> deprecate ii==2 case\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 952,
            "comment": "//System.out.println(index.get(b[1]));\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 952,
            "comment": "//}else {\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 952,
            "comment": "//}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 952,
            "comment": "//System.out.println(-1);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 952,
            "comment": "//return;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 952,
            "comment": "//modified after 2 WA\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 952,
            "comment": "//add after 3 WA and then see data_51 on CF\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 952,
            "comment": "//forgot\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 952,
            "comment": "//add after 2 WA\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 952,
            "comment": "//System.out.println(s);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 955,
            "comment": "//static final long MOD = 998244353L;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 955,
            "comment": "//static final long MOD = 1000000007L;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 955,
            "comment": "//static final int INF = 1000000007;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 955,
            "comment": "//Sort an array (immune to quicksort TLE)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 955,
            "comment": "//ascending order\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 955,
            "comment": "//Sort an array (immune to quicksort TLE)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 955,
            "comment": "//Descending order\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 956,
            "comment": "// System.out.println(a[i][0]+\" \"+pre[i]+\" \"+suf[i]);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 956,
            "comment": "//   System.out.println(a[i][0]+\" \"+a[i][1]);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 957,
            "comment": "//====================================================================================================================\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 959,
            "comment": "//1540A\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 959,
            "comment": "//maximum value of the array\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 960,
            "comment": "//long begin = System.currentTimeMillis();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 960,
            "comment": "//long end = System.currentTimeMillis();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 960,
            "comment": "//System.out.println(begin-end);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 960,
            "comment": "//            for(int k=0;k<n;k++){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 960,
            "comment": "//                System.out.println(array[k]);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 960,
            "comment": "//            }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 961,
            "comment": "//Things to check when u r getting wrong answer\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 961,
            "comment": "// 1-  check the flow of the code\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 961,
            "comment": "//2- If ur stuck read the problem once again\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 961,
            "comment": "//3- before submitting always check the output format of ur code\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 961,
            "comment": "//4- don't check standings until problem B is done\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 961,
            "comment": "//5- if u r thinking ur concept is correct but still u r getting wrong answer try to implement it in another way\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 961,
            "comment": "//All the functions\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 961,
            "comment": "//collections.sort use merge sort instead of quick sort but arrays.sort use quicksort whose worst time complexity is O(n^2)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 961,
            "comment": "//function to print an array for debugging\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 961,
            "comment": "//normal gcd function, always put the greater number as a and the smaller number as b\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 961,
            "comment": "//Input Reader to read faster input\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 962,
            "comment": "//        long[] a=new long[100010];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 962,
            "comment": "//        long[] b=new long[100010];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 962,
            "comment": "//            a[k]=d[1];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 962,
            "comment": "//            b[1]=1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 962,
            "comment": "//            for(int j=2;j<=n;j++){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 962,
            "comment": "//                if(d[j]==a[k]){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 962,
            "comment": "//                    b[k]++;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 962,
            "comment": "//                }else{\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 962,
            "comment": "//                    k++;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 962,
            "comment": "//                    a[k]=d[j];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 962,
            "comment": "//                    b[k]=1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 962,
            "comment": "//                }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 962,
            "comment": "//            }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 962,
            "comment": "//            for(int j=3;j<=k;j++){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 962,
            "comment": "//                for(int p=2;p<=j-1;p++){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 962,
            "comment": "//                    sum-=(a[j]-a[j-p])*b[j];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 962,
            "comment": "//                }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 962,
            "comment": "//            }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 962,
            "comment": "//            if(k<3){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 962,
            "comment": "//                sum=0;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 962,
            "comment": "//            }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 962,
            "comment": "//            cut[1]=a[1]*b[1];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 962,
            "comment": "//            int c=1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 962,
            "comment": "//            long w=b[1];//\u8bb0\u5f55\u4e2a\u6570\u7684\u603b\u548c\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 962,
            "comment": "//            for(int j=3;j<=k;j++){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 962,
            "comment": "//                sum-=(a[j]*w-cut[c])*b[j];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 962,
            "comment": "//                c++;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 962,
            "comment": "//                cut[c]=cut[c-1]+a[c]*b[c];//\u8fd9\u91cc\u4e5f\u8981\u4e2a\u6570\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 962,
            "comment": "//                w+=b[c];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 962,
            "comment": "//            }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 962,
            "comment": "//\u8fd9\u91cc\u4e5f\u8981\u4e2a\u6570\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 963,
            "comment": "//SOLUTION BEGIN\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 963,
            "comment": "//SOLUTION END\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 963,
            "comment": "//Solution Credits: Taranpreet Singh\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "// your code goes here\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 964,
            "comment": "// int n=a.length;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 964,
            "comment": "// Fenwick / BinaryIndexed  Tree  USE IT - FenwickTree ft1=new FenwickTree(n);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "//Disjoint Set Union\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 964,
            "comment": "//SEGMENT TREE CODE\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 964,
            "comment": "// public static void segmentUpdate(int si,int ss,int se,int qs,int qe,long x)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "// {\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "// \tif(ss>qe || se<qs)return;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "// \tif(qs<=ss && qe>=se)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "// \t{\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "// \t\tseg[si][0]+=1L;\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "// \t\tseg[si][1]+=x*x;\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "// \t\tseg[si][2]+=2*x;\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "// \t\treturn;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "// \t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "// \tint mid=(ss+se)/2;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "// \tsegmentUpdate(2*si+1,ss,mid,qs,qe,x);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "// \tsegmentUpdate(2*si+2,mid+1,se,qs,qe,x);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "// public static long segmentGet(int si,int ss,int se,int x,long f,long s,long t,long a[])\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "// {\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "// \tif(ss==se && ss==x)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "// \t{\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "// \t\tf+=seg[si][0];\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "// \t\ts+=seg[si][1];\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "// \t\tt+=seg[si][2];\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "// \t\tlong ans=a[x]+(f*((long)x+1L)*((long)x+1L))+s+(t*((long)x+1L));\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 964,
            "comment": "// \t\treturn ans;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "// \t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "// \tint mid=(ss+se)/2;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "// \tif(x>mid){\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "// \t\treturn segmentGet(2*si+2,mid+1,se,x,f+seg[si][0],s+seg[si][1],t+seg[si][2],a);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "// \t}else{\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "// \t\treturn segmentGet(2*si+1,ss,mid,x,f+seg[si][0],s+seg[si][1],t+seg[si][2],a);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "// \t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "//sort in ascending order.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 964,
            "comment": "// public int compare(pair p1,pair p2)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 964,
            "comment": "// {\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "// \tif(p1.a==p2.a)\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "//     return 0;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "//     else if(p1.a<p2.a)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "//     return -1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "//     else\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "//     return 1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "//sort in descending order.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 964,
            "comment": "//sort in ascending order.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 964,
            "comment": "//sort in descending order.\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 964,
            "comment": "// public int compare(pair p1,pair p2)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 964,
            "comment": "// {\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "//     if(p1.a==p2.a)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "//     return 0;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "//     else if(p1.a<p2.a)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "//     return 1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "//     else\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "//     return -1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 964,
            "comment": "//****************use this in main function-Collections.sort(arr,new myComp1());\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 969,
            "comment": "//int t = readInt();\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 969,
            "comment": "///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 969,
            "comment": "// nothing\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 970,
            "comment": "// int [] ar= new int[n];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 970,
            "comment": "// ar[0]=pre[0];\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 970,
            "comment": "// for(int i=1;i<n;i++){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 970,
            "comment": "//     ar[i]=pre[i]-ar[i-1];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 970,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 970,
            "comment": "// op.write(\"-\"+ans+\"\\n\");\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 970,
            "comment": "// line length\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 970,
            "comment": "//  BufferedWriter op = new BufferedWriter(\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 974,
            "comment": "// forward addition\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 974,
            "comment": "// backward addition\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 974,
            "comment": "// MERGE SORT IMPLEMENTATION\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 974,
            "comment": "// call merge\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 974,
            "comment": "// find sizes\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 974,
            "comment": "// push to copies\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 974,
            "comment": "// fill in new array\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 974,
            "comment": "// add remaining elements\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 976,
            "comment": "// \t\t\tSystem.out.println(ans + \" \" + sum);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 978,
            "comment": "// number of prime numbers less then or equal to x are  -->  x/ln(x)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 978,
            "comment": "// because Arrays.sort() uses quicksort which is dumb//Collections.sort() uses\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 978,
            "comment": "// merge sort\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 979,
            "comment": "// snippets\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 979,
            "comment": "// shuffle\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 979,
            "comment": "// shuffle\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 980,
            "comment": "/////////////////////////////////////////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 980,
            "comment": "/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 981,
            "comment": "//\t\tint t = 1;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 982,
            "comment": "/*FAST INPUT OUTPUT & METHODS BELOW*/"
        },
        "Heuristic": [
            "H7"
        ]
    },
    {
        "nl": {
            "id": 982,
            "comment": "/* for (1/a)%mod = ( a^(mod-2) )%mod  ----> use expo to calc -->(a^(mod-2)) */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 982,
            "comment": "/*  (p^q)%mod   */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 982,
            "comment": "//package Codeforces;\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 982,
            "comment": "//\tint[][] ar;\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 982,
            "comment": "//int n = ni();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 982,
            "comment": "//long sum=0;\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 982,
            "comment": "//\t\t\tfor(int i=0;i<n;i++){\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 982,
            "comment": "//\t\t\t\tout.print(a[i]+\" \");\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 982,
            "comment": "//\t\t\t}\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 982,
            "comment": "//out.println(\"tmp: \"+tmp);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 982,
            "comment": "//out.println(\"ans: \"+ans);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 982,
            "comment": "//ruffle\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 982,
            "comment": "//then sort\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 983,
            "comment": "/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 983,
            "comment": "//            boolean success = false;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 983,
            "comment": "//            if (stringBuilderValueField != null) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 983,
            "comment": "//                try {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 983,
            "comment": "//                    char[] value = (char[]) stringBuilderValueField.get(cache);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 983,
            "comment": "//                    os.write(value, 0, cache.length());\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 983,
            "comment": "//                    success = true;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 983,
            "comment": "//                } catch (Exception e) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 983,
            "comment": "//                }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 983,
            "comment": "//            }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 983,
            "comment": "//            if (!success) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 983,
            "comment": "//            }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 984,
            "comment": "// int t = 1; \n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 984,
            "comment": "// int c;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 984,
            "comment": "// this.c = c;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 984,
            "comment": "// if(a!=p.a)\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 984,
            "comment": "//     return a-p.a;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 984,
            "comment": "// return p.c - c;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 985,
            "comment": "//\t\t\tpw.printf(\"Case #%d: \", i);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 986,
            "comment": "/*\n * public static boolean lie(int n,int m,int k){ if(n==1 && m==1 && k==0){\n * return true; } if(n<1 || m<1 || k<0){ return false; } boolean\n * tc=lie(n-1,m,k-m); boolean lc=lie(n,m-1,k-n); if(tc || lc){ return true; }\n * return false; }\n */"
        },
        "Heuristic": [
            "H2",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 986,
            "comment": "// your code goes here\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 986,
            "comment": "// Scanner sc=new Scanner(System.in);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 988,
            "comment": "// br = new BufferedReader(new FileReader(\".in\"));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 988,
            "comment": "// out = new PrintWriter(new FileWriter(\".out\"));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 988,
            "comment": "//new Thread(null, new (), \"peepee\", 1<<28).start();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 988,
            "comment": "// This is so obvious yet so hard wtf\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 989,
            "comment": "//package Codeforces.CF728;\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 989,
            "comment": "//        initalApp(n);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 989,
            "comment": "//        optimized(n, arr);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 989,
            "comment": "//        System.err.println( System.currentTimeMillis() - s + \"ms\" );\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 990,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 990,
            "comment": "//int min = Integer.MAX_VALUE;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 990,
            "comment": "//long sum = 0;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 990,
            "comment": "//sum = sum + d[i];\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 991,
            "comment": "//ArrayList<Integer>a = new ArrayList<>(n);\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 991,
            "comment": "//ArrayList<Integer>dp = new ArrayList<>(n);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//     class Reader \n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//     {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//         final private int BUFFER_SIZE = 1 << 100000000;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//         private DataInputStream din;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//         private byte[] buffer;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//         private int bufferPointer, bytesRead;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//         public Reader()\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//         {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             din = new DataInputStream(System.in);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             if (System.getProperty(\"ONLINE_JUDGE\") == null) \n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             try \n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//                 System.setOut(new PrintStream(new FileOutputStream(\"output.txt\")));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//                 din = new DataInputStream(new FileInputStream(\"input.txt\"));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//               catch (Exception e) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//         }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             buffer = new byte[BUFFER_SIZE];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             bufferPointer = bytesRead = 0;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//         }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//         public Reader(String file_name) throws IOException\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//         {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             din = new DataInputStream(\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//                 new FileInputStream(file_name));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             buffer = new byte[BUFFER_SIZE];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             bufferPointer = bytesRead = 0;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//         }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//         public String readLine() throws IOException\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//         {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             byte[] buf = new byte[100000000]; // line length\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             int cnt = 0, c;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             while ((c = read()) != -1) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//                 if (c == '\\n') {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//                     if (cnt != 0) {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//                         break;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//                     }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//                     else {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//                         continue;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//                     }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//                 }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//                 buf[cnt++] = (byte)c;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             return new String(buf, 0, cnt);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//         }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//         public int nextInt() throws IOException\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//         {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             int ret = 0;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             byte c = read();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             while (c <= ' ') {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//                 c = read();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             boolean neg = (c == '-');\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             if (neg)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//                 c = read();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             do {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//                 ret = ret * 10 + c - '0';\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             } while ((c = read()) >= '0' && c <= '9');\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             if (neg)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//                 return -ret;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             return ret;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//         }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//         public long nextLong() throws IOException\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//         {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             long ret = 0;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             byte c = read();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             while (c <= ' ')\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//                 c = read();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             boolean neg = (c == '-');\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             if (neg)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//                 c = read();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             do {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//                 ret = ret * 10 + c - '0';\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             } while ((c = read()) >= '0' && c <= '9');\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             if (neg)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//                 return -ret;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             return ret;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//         }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//         public double nextDouble() throws IOException\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//         {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             double ret = 0, div = 1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             byte c = read();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             while (c <= ' ')\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//                 c = read();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             boolean neg = (c == '-');\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             if (neg)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//                 c = read();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             do {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//                 ret = ret * 10 + c - '0';\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             } while ((c = read()) >= '0' && c <= '9');\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             if (c == '.') {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//                 while ((c = read()) >= '0' && c <= '9') {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//                     ret += (c - '0') / (div *= 10);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//                 }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             if (neg)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//                 return -ret;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             return ret;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//         }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//         private void fillBuffer() throws IOException\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//         {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             bytesRead = din.read(buffer, bufferPointer = 0,\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//                                  BUFFER_SIZE);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             if (bytesRead == -1)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//                 buffer[0] = -1;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//         }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//         private byte read() throws IOException\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//         {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             if (bufferPointer == bytesRead)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//                 fillBuffer();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             return buffer[bufferPointer++];\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//         }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//         public void close() throws IOException\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//         {\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             if (din == null)\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//                 return;\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//             din.close();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//         }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//     }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "// Reader read;\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 993,
            "comment": "//obj.read = new Reader();\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 993,
            "comment": "// rank[root2] > rank[root1]\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 993,
            "comment": "// when   n-r > r\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//when   r > n-r\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "// if(n-r > r)\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 993,
            "comment": "//     return(binomial1(n, r));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "// else\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//     return(binomial2(n, r));\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//System.out.print(\"GCD OF \"+a+\" , \"+b+\" = \");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//System.out.println(\" \"+a);\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//boolean prime[] = new boolean[n + 1];\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 993,
            "comment": "// If y is odd, multiply x with result\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 993,
            "comment": "// y must be even now\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 993,
            "comment": "// y = y/2\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 993,
            "comment": "// Pick a random number in [2..n-2]\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "// Corner cases make sure that n > 4\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 993,
            "comment": "// Compute a^d % n\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "// Keep squaring x while one of the\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 993,
            "comment": "// following doesn't happen\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 993,
            "comment": "// (i) d does not reach n-1\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 993,
            "comment": "// (ii) (x^2) % n is not 1\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 993,
            "comment": "// (iii) (x^2) % n is not n-1\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 993,
            "comment": "// Return composite\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 993,
            "comment": "// Corner cases\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 993,
            "comment": "// Find r such that n = 2^d * r + 1\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 993,
            "comment": "// for some r >= 1\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 993,
            "comment": "// Iterate given nber of 'k' times\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 993,
            "comment": "//--------------------------------------------------------------------------------------------------------------\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 994,
            "comment": "//PrintWriter out = new PrintWriter(System.out);\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 994,
            "comment": "// ArrayList<ArrayList<Integer>> adj  =  new ArrayList<>();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 994,
            "comment": "// for(int i=0;i<n;i++){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 994,
            "comment": "//     adj.add(new ArrayList<>());\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 994,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 994,
            "comment": "// for(int i=0;i<n;i++){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 994,
            "comment": "//     for(int j=0;j<n;j++){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 994,
            "comment": "//         adj.get(i).add(arr[j]-arr[i]);\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 994,
            "comment": "//     }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 994,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 994,
            "comment": "// // for(int i=0;i<n;i++){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 994,
            "comment": "// //     for(int j=0;j<n;j++){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 994,
            "comment": "// //         System.out.print(adj.get(i).get(j) + \" \");\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 994,
            "comment": "// //     }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 994,
            "comment": "// // }\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 994,
            "comment": "//System.out.println();\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 994,
            "comment": "// static int dfs(int i,int j,int cost){\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 994,
            "comment": "// }\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 995,
            "comment": "//package codeforces;\t\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 996,
            "comment": "// references\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 996,
            "comment": "// IBIG = 1e9 + 7\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 996,
            "comment": "// IMAX ~= 2e9\n"
        },
        "Heuristic": []
    },
    {
        "nl": {
            "id": 996,
            "comment": "// LMAX ~= 9e18\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 996,
            "comment": "// constants\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 996,
            "comment": "// math util\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 996,
            "comment": "// array util\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 996,
            "comment": "// input\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 996,
            "comment": "// output\n"
        },
        "Heuristic": [
            "H2"
        ]
    },
    {
        "nl": {
            "id": 997,
            "comment": "// TODO Auto-generated method stub\n"
        },
        "Heuristic": [
            "H1",
            "H5"
        ]
    },
    {
        "nl": {
            "id": 997,
            "comment": "//StringJoiner sj = new StringJoiner(\" \"); \n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 997,
            "comment": "//sj.add(strings)\n"
        },
        "Heuristic": [
            "H1",
            "H2"
        ]
    },
    {
        "nl": {
            "id": 999,
            "comment": "/* Name of the class has to be \"Main\" only if the class is public. */"
        },
        "Heuristic": [
            "H1",
            "H7"
        ]
    },
    {
        "nl": {
            "id": 999,
            "comment": "//   bf.readLine();\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 1002,
            "comment": "// 1 -> N: straight line from 1 -> N\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 1002,
            "comment": "// N -> 1: connections between every single pasture\n"
        },
        "Heuristic": [
            "H1"
        ]
    },
    {
        "nl": {
            "id": 1002,
            "comment": "// find sum of all connections to current i\n"
        },
        "Heuristic": []
    }
]