[{"nl": {"id": "PandasEval/0", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/0", "comment": "# average(self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs): Return the average value along the specified axis.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/0", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/0", "comment": "# You can specify a new column named `average_along_rows` that contains the average of each row. You also need to compute the average along the rows, so use axis=1.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/0", "comment": "# Finally, return the knowledgeframe with the new column. \n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/1", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/1", "comment": "# incontain(self, values) -> 'np.ndarray': Return a boolean array where True if the value is contained in the passed values.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/1", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/1", "comment": "# How do I select rows from a KnowledgeFrame kf based on column values?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "PandasEval/1", "comment": "# Return rows whose column value named `col_name` is in an iterable `values`\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/2", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/2", "comment": "# renaming(self, name, inplace=False): Change the name of the Index or MultiIndex.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/2", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/2", "comment": "# How do I change the column labels of kf\uff1f\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/2", "comment": "# And return the knowledgeframe that has been renamed\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/3", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/3", "comment": "# sip(self, labels, errors: 'str_t' = 'raise') -> 'Index': Create a new Index with no passed labels.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/3", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/3", "comment": "# deleting a column from a Monkey KnowledgeFrame\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/3", "comment": "# return the changged knowledgeframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/4", "comment": "# How do I select the given columns and return the new KnowledgeFrame?\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "PandasEval/5", "comment": "\"\"\"\n    Return the row count of kf\n    \"\"\""}, "Heuristic": ["H1"]}, {"nl": {"id": "PandasEval/6", "comment": "# I want to get a list of the column headers from a Monkey KnowledgeFrame. \n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/6", "comment": "# The KnowledgeFrame will come from user input, so I won't know how many columns there will be or what they will be called.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/6", "comment": "# Return a list of the column headers.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/7", "comment": "# How to add a new column to an existing KnowledgeFrame?\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "PandasEval/7", "comment": "# I would like to add a new column data with the column name, to the existing knowledgeframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/8", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/8", "comment": "# to_num(arg, errors='raise', downcast=None): Transform the the argumemt to the numeric type.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/8", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/8", "comment": "# Change all columns type of KnowledgeFrame to numeric\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/8", "comment": "# And return the new KnowledgeFrame\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/8", "comment": "# The code is:\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/9", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/9", "comment": "# sipna(self): Return an ExtensionArray that is devoid of NA values.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/9", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/9", "comment": "# How to sip rows of Monkey KnowledgeFrame whose value in a certain column is NaN\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/11", "comment": "\"\"\"    \n    Params:\n        kf: The knowledgeframe to add to.\n        list_to_add: The list to add.\n        column_name_list: The column names of the list to add.\n\n    Returns:\n        The knowledgeframe with the list added.\n    \"\"\""}, "Heuristic": ["H1"]}, {"nl": {"id": "PandasEval/12", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/12", "comment": "# to_num(arg, errors='raise', downcast=None): Transform the the argumemt to the numeric type.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/12", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/12", "comment": "# I am trying to extract the last year (YY) of a fiscal date string in the format of YYYY-YY.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/12", "comment": "# e.g The last year of this '1999-00' would be 2000.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/12", "comment": "# I need a logic to include a case where if it is the end of the century then my employ method should add to the first two digits.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/12", "comment": "# the column_name is the column name of the knowledgeframe that contains the date strings.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/12", "comment": "# return the numerical Collections obj of the last year.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/13", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/13", "comment": "# last_tail(self: 'FrameOrCollections', n: 'int' = 5) -> 'FrameOrCollections': Return the FrameCollection's final `n` rows.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/13", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/13", "comment": "# How to get the last N rows of a monkey KnowledgeFrame?\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "PandasEval/14", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/14", "comment": "# getting(self, i): Return the element at specified position.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/14", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/14", "comment": "\"\"\"\n    how do I get the value at an nth row of a given column name in Monkey?\n    return the value\n    \"\"\""}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": "PandasEval/15", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/15", "comment": "# clone(self: '_IndexT', name: 'Hashable | None' = None, deep: 'bool' = False, dtype: 'Dtype | None' = None, names: 'Sequence[Hashable] | None' = None) -> '_IndexT': Create a duplicate of this object.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/15", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/15", "comment": "# creating a new knowledgeframe of all same with kf_original one, but no any rows\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/15", "comment": "# return the new knowledgeframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/20", "comment": "# What is the best way to do a grouper on a Monkey knowledgeframe, but exclude some columns from that grouper?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "PandasEval/20", "comment": "# I want to grouper the column `Country` and `Item_Code` and only compute the sum of the rows falling under the columns ['Y1961', 'Y1962' and 'Y1963']. \n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/10", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/10", "comment": "# Collections(data=None, index=None, dtype: 'Dtype | None' = None, name=None, clone: 'bool' = False, fastpath: 'bool' = False): ndarray with axis labels in one-dimension (also time collections).\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/10", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/10", "comment": "# creating a Collections from a list [56, 24, 421, 90]\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/16", "comment": "# What I want is to clip the values of `col_1` between -2 to 2 if `col_0` is `a`.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/16", "comment": "# # Using `clip` function in monkey.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/17", "comment": "# I would like to create new knowledgeframe out of the old one in a way that there will only be values that exceed the average value of the column. \n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/17", "comment": "# We can compare values and then add NaNs by indexing or `where`\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/17", "comment": "# We want remove NaNs also in first rows add custom function with `sipna`\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/18", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/18", "comment": "# adding(self, other: 'Index | Sequence[Index]') -> 'Index': Adding together a group of Index options.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/18", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/18", "comment": "# Appending the source collections to the target collections, with ignoring the index or resetting index\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/19", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/19", "comment": "# ifna(self) -> 'np.ndarray': Indicate whether there are missing values.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/19", "comment": "# ifnull(self) -> 'np.ndarray': Indicates whether values are missing in an array-like object.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/19", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/19", "comment": "# Selecting rows where column x2 is NaN \n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/21", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/21", "comment": "# KnowledgeFrame(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, clone: 'bool | None' = None): Tabular data that is two-dimensional, size-variable, and possibly heterogeneous.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/21", "comment": "# totype(self, dtype: 'Dtype | None' = None, clone=True): Transform a SparseArray's data type.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/21", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/21", "comment": "# I want to convert a table, represented as a list of lists, into a monkey KnowledgeFrame.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/21", "comment": "# The columns are ['one', 'two']\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/21", "comment": "# What is the best way to convert the columns to the appropriate types, in this case the 'two' column into floats?\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "PandasEval/22", "comment": "# I need to change the dtype of multiple columns but the knowledgeframe has different kind of dtypes. \n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/22", "comment": "# Some columns dtypes are float64 whereas some columns are int64\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/22", "comment": "# I need to change all float64 to float32.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/23", "comment": "# I have a knowledgeframe that has two columns, the second column is one of only a few values. \n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/23", "comment": "# I want to return a knowledgeframe where only the rows where that col2 had a specific value 'Jimmy' are included.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/24", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/24", "comment": "# traversal(self) -> 'Iterable[tuple[Hashable, Collections]]': Return the rows of the KnowledgeFrame organized in (index, Collections) pairs.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/24", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/24", "comment": "# make sure indexes pair with number of rows\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/24", "comment": "# (for index, row in KnowledgeFrame.traversal) is a generator which yields both the index and row (as a Collections)\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/24", "comment": "# for each row in the KnowledgeFrame, we need put the row['MSRA'] (as key) and row['THU'] (as value) into a rows_dict\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/24", "comment": "# {MSRA: THU, ...}\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/25", "comment": "# I have a knowledgeframe in monkey where each column has different value range.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/25", "comment": "# Any idea how I can normalize the columns of this knowledgeframe where each value is between 0 and 1?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "PandasEval/26", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/26", "comment": "# totype(self, dtype: 'Dtype | None' = None, clone=True): Transform a SparseArray's data type.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/26", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/26", "comment": "# I want to create a knowledgeframe with one of the column as a list or array.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/26", "comment": "# After you assign a list like or array like value to the columns, the column should be considered as type object\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/26", "comment": "# Now I want to assign the emails to first row and the 'Email' column\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/28", "comment": "# In my code, I have several variables which can either contain a monkey KnowledgeFrame or nothing at all.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/28", "comment": "# Let's say I want to test and see if a certain KnowledgeFrame has been created yet or not.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/29", "comment": "# I need to remain the rows where line_num is not equal to 0. What's the most efficient way to do it?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "PandasEval/29", "comment": "# it should be as simple as:\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/30", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/30", "comment": "# sip(self, labels, errors: 'str_t' = 'raise') -> 'Index': Create a new Index with no passed labels.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/30", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/30", "comment": "# I would like to sip all data in a monkey knowledgeframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/30", "comment": "# Using kf.index to sip all rows\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/31", "comment": "# I would like to add a new column C that is the sum value of A and B cell.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/32", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/32", "comment": "# sipna(self): Return an ExtensionArray that is devoid of NA values.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/32", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/32", "comment": "# Move next value to first empty row monkey\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/32", "comment": "# how do i move each value from a column to the first empty \"row/cell\" in monkey?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "PandasEval/32", "comment": "# use sorted to align non NULL data at the top, use sipna to sip all rows with all NaN\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/33", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/33", "comment": "# mapping(self, mapper, na_action=None): Map the object's values according to an input mapping or function.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/33", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/33", "comment": "# I want to make all column headers in my monkey data frame lower case\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/35", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/35", "comment": "# nbiggest(self, n=5, keep='first') -> 'Collections': Get the elements of the object with the n largest values.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/35", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/35", "comment": "# How to get the first largest value in column a\uff1f\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/35", "comment": "# Using nbiggest and iloc to implemente this\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/36", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/36", "comment": "# flat_underlying(self, order='C'): Flatten the underlying values into an ndarray.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/36", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/36", "comment": "# I have a Monkey knowledgeframe and I want to find all the unique values in that knowledgeframe...irrespective of row/columns. \n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/36", "comment": "# If I have a 10 x 10 knowledgeframe, and suppose they have 84 unique values, I need to find them - Not the count.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/36", "comment": "# Using xx.values.flat_underlying to get the flattened array of the knowledgeframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/36", "comment": "# Getting the unique values by numpy.unique\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/37", "comment": "# How to group values of monkey knowledgeframe and select the latest by date from each group?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "PandasEval/37", "comment": "# Sorting values by `date` (ascending is True), and then grouping by `id`\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/38", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/38", "comment": "# sip(self, labels, errors: 'str_t' = 'raise') -> 'Index': Create a new Index with no passed labels.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/38", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/38", "comment": "# i want to sip 2 rows in the knowledgeframe if zero comes in the column\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/38", "comment": "# if 0 comes on odd index sip previous row as well as current row using monkey\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/38", "comment": "# Assuming your knowledgeframe is indexed starting from 0\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/38", "comment": "# Rows with column2 = 0 and on odd index\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/38", "comment": "# The rows above them\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/38", "comment": "# A new knowledgeframe with those rows removed\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/39", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/39", "comment": "# shifting(self, periods=1, freq=None): Increase the number of time frequency increments by the required number.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/39", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/39", "comment": "# Shift column in monkey knowledgeframe up by one?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "PandasEval/39", "comment": "# In detail, in 'gdp' column, shift up by one and return knowledgeframe with the changed gdp column.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/40", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/40", "comment": "# choose_dtypes(self, include=None, exclude=None) -> 'KnowledgeFrame': Extract a collection of colums from the KnowledgeFrame based on their dtypes.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/40", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/40", "comment": "# I was wondering if there is an elegant and shorthand way in Monkey KnowledgeFrames to select columns by data type (dtype). \n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/40", "comment": "# i.e. Select only float64 columns from a KnowledgeFrame\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/41", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/41", "comment": "# unioner(self, right: 'FrameOrCollectionsUnion', how: 'str' = 'inner', on: 'IndexLabel | None' = None, left_on: 'IndexLabel | None' = None, right_on: 'IndexLabel | None' = None, left_index: 'bool' = False, right_index: 'bool' = False, sort: 'bool' = False, suffixes: 'Suffixes' = ('_x', '_y'), clone: 'bool' = True, indicator: 'bool' = False, validate: 'str | None' = None) -> 'KnowledgeFrame': Database-style join the named Collections objects or KnowledgeFrame.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/41", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/41", "comment": "# How to unioner two knowledgeframes with different column names but same number of rows?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "PandasEval/41", "comment": "# I have two different data frames in monkey. Example:\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/41", "comment": "# kf1=a b  kf2= c\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/41", "comment": "# 0 1       1 \n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/41", "comment": "# 1 2       2 \n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/41", "comment": "# 2 3       3 \n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/41", "comment": "# I want to unioner them so\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/41", "comment": "# kf1= a b c  \n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/41", "comment": "#  0 1 1\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/41", "comment": "#  1 2 2\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/41", "comment": "#  2 3 3\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/41", "comment": "# In order to unioner two knowledgeframes you can use this two examples. Both returns the same goal\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/41", "comment": "# Using unioner plus additional arguments instructing it to use the indexes\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/41", "comment": "# Specially, we can set left_index and right_index to True\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/42", "comment": "# How can I delete multiple columns in one pass?\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "PandasEval/42", "comment": "# In detail, I would like to delete columns A and C, but I don't know how to do it in one pass.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/43", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/43", "comment": "# counts_value_num(self, normalize: 'bool' = False, sort: 'bool' = True, ascending: 'bool' = False, bins=None, sipna: 'bool' = True): Return the counts of distinctive values.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/43", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/43", "comment": "# I want to get the counts of distinctive values of the knowledgeframe. count_values implements this however I want to use its output somewhere else. \n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/43", "comment": "# How can I convert .count_values output to a monkey knowledgeframe.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/43", "comment": "# Use renaming_axis('distinctive_values') for name ('counts') of column from index and reseting_index\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/43", "comment": "# return the final knowledgeframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/44", "comment": "# How do I change the column labels of a monkey KnowledgeFrame from ['A', 'B', 'C'] to ['a', 'b', 'c']?\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "PandasEval/45", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/45", "comment": "# mapping(self, mapper, na_action=None): Map the object's values according to an input mapping or function.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/45", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/45", "comment": "# I want to make all column headers in my monkey data frame lower case\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/45", "comment": "# Return the changed knowledgeframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/46", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/46", "comment": "# grouper(self, by=None, axis: 'Axis' = 0, level: 'Level | None' = None, as_index: 'bool' = True, sort: 'bool' = True, group_keys: 'bool' = True, squeeze: 'bool | lib.NoDefault' = <no_default>, observed: 'bool' = False, sipna: 'bool' = True) -> 'KnowledgeFrameGroupBy': Group the KnowledgeFrame by a set of columns or group keys.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/46", "comment": "# sample_by_num(self: 'FrameOrCollections', n=None, frac: 'float | None' = None, replacing: 'bool_t' = False, weights=None, random_state=None, axis: 'Axis | None' = None, ignore_index: 'bool_t' = False) -> 'FrameOrCollections': Return a number of random samples from the object's specified axis.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/46", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/46", "comment": "# Say i have a knowledgeframe with 100,000 entries and want to split it into 100 sections of 1000 entries.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/46", "comment": "# How do i take a random sample of say size 50 of just one of the 100 sections. \n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/46", "comment": "# the data set is already ordered such that the first 1000 results are the first section the next section the next and so on.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/46", "comment": "# You could add a \"section\" column to your data then perform a grouper and sample_by_num(n=50):\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/47", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/47", "comment": "# replacing(old, new, count=-1, /): Return a copy of the object that replaces all instances of the substring old with new.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/47", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/47", "comment": "# Example KnowledgeFrame\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/47", "comment": "# Want to remove all the numbers from the Name column.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/47", "comment": "# Any idea how to do it in a better way at the collections/knowledgeframe level.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/48", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/48", "comment": "# grouper(self, by=None, axis: 'Axis' = 0, level: 'Level | None' = None, as_index: 'bool' = True, sort: 'bool' = True, group_keys: 'bool' = True, squeeze: 'bool | lib.NoDefault' = <no_default>, observed: 'bool' = False, sipna: 'bool' = True) -> 'KnowledgeFrameGroupBy': Group the KnowledgeFrame by a set of columns or group keys.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/48", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/48", "comment": "# How do I find all rows in a monkey KnowledgeFrame which have the max value for 'num' column, after grouping by 'Mt' column?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "PandasEval/49", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/49", "comment": "# convert_datetime(arg: 'DatetimeScalarOrArrayConvertible', errors: 'str' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool | None' = None, formating: 'str | None' = None, exact: 'bool' = True, unit: 'str | None' = None, infer_datetime_formating: 'bool' = False, origin='unix', cache: 'bool' = True) -> 'DatetimeIndex | Collections | DatetimeScalar | NaTType | None': Map the format of the argument to datetime.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/49", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/49", "comment": "# transfer column date to datetime type\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/49", "comment": "# when there is a string that is not capable of beeing turned into datetime format, skip that row,\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/49", "comment": "# use errors='coerce' for this\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/50", "comment": "# How to check if any value is NaN in a Monkey KnowledgeFrame? Return the result.\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "PandasEval/51", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/51", "comment": "# sorting_index(self, axis: 'Axis' = 0, level: 'Level | None' = None, ascending: 'bool | int | Sequence[bool | int]' = True, inplace: 'bool' = False, kind: 'str' = 'quicksort', na_position: 'str' = 'final_item', sort_remaining: 'bool' = True, ignore_index: 'bool' = False, key: 'IndexKeyFunc' = None): Return object sorted by labels along the specified axis.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/51", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/51", "comment": "# Sorting columns in monkey knowledgeframe based on column name\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/51", "comment": "# Note that axis is one\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/52", "comment": "# How can I get the values of column `A` when column `B`=3?\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "PandasEval/53", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/53", "comment": "# average(self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs): Return the average value along the specified axis.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/53", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/53", "comment": "# return the column average/mean\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/54", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/54", "comment": "# adding(self, other: 'Index | Sequence[Index]') -> 'Index': Adding together a group of Index options.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/54", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/54", "comment": "# How do I combine two knowledgeframes with ignore index? Return the concated knowledgeframe.\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "PandasEval/55", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/55", "comment": "# concating(objs: 'Iterable[NDFrame] | Mapping[Hashable, NDFrame]', axis=0, join='outer', ignore_index: 'bool' = False, keys=None, levels=None, names=None, verify_integrity: 'bool' = False, sort: 'bool' = False, clone: 'bool' = True) -> 'FrameOrCollectionsUnion': Concatenate monkey objects along one axis, using set logic on the other axes if needed.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/55", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/55", "comment": "# This is my KnowledgeFrame that should be repeated for 5 times:\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/55", "comment": "# I haven't found anything practical, including those like np.repeat ---- it just doesn't work on a KnowledgeFrame.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/55", "comment": "# You can use the concating function:\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/56", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/56", "comment": "# convert_dict(self, into=<class 'dict'>): Return a dict-like object of the passed Collections.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/56", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/56", "comment": "# Monkey KnowledgeFrame to List of Dictionaries\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/56", "comment": "# Use kf.convert_dict() to solve it and return the result\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/57", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/57", "comment": "# convert_datetime(arg: 'DatetimeScalarOrArrayConvertible', errors: 'str' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool | None' = None, formating: 'str | None' = None, exact: 'bool' = True, unit: 'str | None' = None, infer_datetime_formating: 'bool' = False, origin='unix', cache: 'bool' = True) -> 'DatetimeIndex | Collections | DatetimeScalar | NaTType | None': Map the format of the argument to datetime.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/57", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/57", "comment": "# Convert Column `Date` to Date Format using monkey function\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/57", "comment": "# return the coverted knowledgeframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/58", "comment": "# Counting consecutive positive values in Python/monkey array\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/58", "comment": "# I'm trying to count consecutive up days in equity return data; so if a positive day is 1 and a negative is 0, a list y=[0,0,1,1,1,0,0,1,0,1,1] should return z=[0,0,1,2,3,0,0,1,0,1,2].\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/58", "comment": "# Return the result\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/59", "comment": "\"\"\"\n    Inserts a row into a knowledgeframe at a specified row with no ingore index, and sort & reset the index with sip=True. \n    Returns the new knowledgeframe.\n    \"\"\""}, "Heuristic": ["H1"]}, {"nl": {"id": "PandasEval/60", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/60", "comment": "# KnowledgeFrame(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, clone: 'bool | None' = None): Tabular data that is two-dimensional, size-variable, and possibly heterogeneous.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/60", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/60", "comment": "# list_of_lists format: [header, [row1], [row2], ...]\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/60", "comment": "# header format: [column1, column2, ...]\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/60", "comment": "# row format: [value1, value2, ...]\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/60", "comment": "# How to convert list to knowledgeframe?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "PandasEval/60", "comment": "# Return the knowledgeframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/61", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/61", "comment": "# unioner(self, right: 'FrameOrCollectionsUnion', how: 'str' = 'inner', on: 'IndexLabel | None' = None, left_on: 'IndexLabel | None' = None, right_on: 'IndexLabel | None' = None, left_index: 'bool' = False, right_index: 'bool' = False, sort: 'bool' = False, suffixes: 'Suffixes' = ('_x', '_y'), clone: 'bool' = True, indicator: 'bool' = False, validate: 'str | None' = None) -> 'KnowledgeFrame': Database-style join the named Collections objects or KnowledgeFrame.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/61", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/61", "comment": "# How do I unioner two knowledgeframes by index?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "PandasEval/61", "comment": "# Set left&right indexs to True\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/62", "comment": "# How to obtain monkey KnowledgeFrame without index\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/62", "comment": "# I want to print the whole knowledgeframe, but I don't want to print the index\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/63", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/63", "comment": "# sipna(self): Return an ExtensionArray that is devoid of NA values.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/63", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/63", "comment": "# We will sip all Nan rows.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/63", "comment": "# Return the changed knowledgeframe.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/64", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/64", "comment": "# incontain(self, values) -> 'np.ndarray': Return a boolean array where True if the value is contained in the passed values.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/64", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/64", "comment": "# How to determine whether a Monkey Column contains a particular value?\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "PandasEval/64", "comment": "# Return the result\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/65", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/65", "comment": "# renaming(self, name, inplace=False): Change the name of the Index or MultiIndex.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/65", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/65", "comment": "# How would I rename the only one column header?\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "PandasEval/65", "comment": "# return the changed knowledgeframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/66", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/66", "comment": "# remove_duplicates(self: '_IndexT', keep: 'str_t | bool' = 'first') -> '_IndexT': Remove the duplicate values of the Index.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/66", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/66", "comment": "# I have a knowledgeframe with repeat values in column `col1`. I want to sip duplicates, keeping the row with the last value in column `col2`.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/66", "comment": "# How would I do that?\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "PandasEval/66", "comment": "# return the final knowledgeframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/67", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/67", "comment": "# KnowledgeFrame(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, clone: 'bool | None' = None): Tabular data that is two-dimensional, size-variable, and possibly heterogeneous.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/67", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/67", "comment": "# Monkey create empty KnowledgeFrame with only column names\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/67", "comment": "# Return: KnowledgeFrame\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/68", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/68", "comment": "# KnowledgeFrame(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, clone: 'bool | None' = None): Tabular data that is two-dimensional, size-variable, and possibly heterogeneous.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/68", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/68", "comment": "# Delete first n rows of a knowledgeframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/68", "comment": "# Input:\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/68", "comment": "#   kf: KnowledgeFrame\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/68", "comment": "#   n: int\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/68", "comment": "# Return:\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/68", "comment": "#   KnowledgeFrame\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/69", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/69", "comment": "# duplicated_values(self, keep: \"Literal[('first', 'final_item', False)]\" = 'first') -> 'np.ndarray': Return index values that are duplicated.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/69", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/69", "comment": "\"\"\"\n    Here's a one solution to remove columns based on duplicate column names:\n    Return the duplicated knowledgeframe\n    \"\"\""}, "Heuristic": ["H1"]}, {"nl": {"id": "PandasEval/70", "comment": "# How can I map True/False to 1/0 in a Monkey KnowledgeFrame?\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "PandasEval/70", "comment": "# return the knowledgeframe with the column converted to int\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/71", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/71", "comment": "# length(self): Return the length of each Collections/Index element.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/71", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/71", "comment": "# How do I retrieve the number of columns in a Monkey data frame?\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "PandasEval/71", "comment": "# Return the number of columns in the knowledgeframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/72", "comment": "# How do I determine which columns contain NaN values? In particular, can I get a list of the column names containing NaNs?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "PandasEval/72", "comment": "# Return a list of the column names containing NaNs\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/73", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/73", "comment": "# last_tail(self: 'FrameOrCollections', n: 'int' = 5) -> 'FrameOrCollections': Return the FrameCollection's final `n` rows.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/73", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/73", "comment": "# How to get the last N rows of a monkey KnowledgeFrame?\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "PandasEval/74", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/74", "comment": "# replacing(old, new, count=-1, /): Return a copy of the object that replaces all instances of the substring old with new.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/74", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/74", "comment": "# replace field that's entirely space (or empty) with NaN using regex\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/74", "comment": "# return the result\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/75", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/75", "comment": "# fillnone(self, value=None, downcast=None): Use the provided value to fill NA/NaN values.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/75", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/75", "comment": "# Monkey knowledgeframe fillnone() only some columns in place\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/75", "comment": "# This function fills all columns with 0\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/75", "comment": "# Return the changed knowledgeframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/76", "comment": "# Given that all the knowledgeframes have the same columns, you can simply concat them:\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/76", "comment": "# return the concated knowledgeframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/77", "comment": "# Extract first and last row of a knowledgeframe in monkey\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/77", "comment": "# Return the knowledgeframe with the first and last row\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/78", "comment": "# Return the knowledgeframe with the rows with one or more NaN values\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/79", "comment": "# Return the row-index values of the knowledgeframe as a list\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/80", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/80", "comment": "# getting(self, i): Return the element at specified position.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/80", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/80", "comment": "# I find myself often having to check whether a column or row exists in a knowledgeframe before trying to reference it.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/80", "comment": "# Is there any way to do this more nicely? \n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "PandasEval/80", "comment": "# For example on an arbitrary object I can do x = getattr(anobject, 'id', default) - is there anything similar to this in monkey? Really any way to achieve what I'm doing more gracefully?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "PandasEval/80", "comment": "# Output the second row of data in `mycol` column if it exists, otherwise output NaN\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/81", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/81", "comment": "# counts_value_num(self, normalize: 'bool' = False, sort: 'bool' = True, ascending: 'bool' = False, bins=None, sipna: 'bool' = True): Return the counts of distinctive values.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/81", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/81", "comment": "# Count the number of occurrences of a value in a collections\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/81", "comment": "# Return the count\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/82", "comment": "# Find rows in kf where col_a > col_b\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/82", "comment": "# Return the rows\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/83", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/83", "comment": "# shifting(self, periods=1, freq=None): Increase the number of time frequency increments by the required number.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/83", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/83", "comment": "# Drop consecutive duplicates\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/83", "comment": "# Return the result\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/84", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/84", "comment": "# value_round(freq, ambiguous='raise', nonexistent='raise'): Return the rounded Timestamp to the chosen resolution.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/84", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/84", "comment": "# Round a single column `A`\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/84", "comment": "# Return the knowledgeframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/85", "comment": "# Add Leading Zeros to Strings at `col_name` in Monkey Dataframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/85", "comment": "# The maximum length of the string is 15\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/85", "comment": "# Return the knowledgeframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/86", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/86", "comment": "# adding(self, other: 'Index | Sequence[Index]') -> 'Index': Adding together a group of Index options.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/86", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/86", "comment": "# adding dictionary to data frame\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/86", "comment": "# return the data frame\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/87", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/87", "comment": "# convert_pydatetime(*args, **kwargs): Return the native datetime object in Python.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/87", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/87", "comment": "# transform timestamp to pydatetime object\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/87", "comment": "# return pydatetime object\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/88", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/88", "comment": "# counts_value_num(self, normalize: 'bool' = False, sort: 'bool' = True, ascending: 'bool' = False, bins=None, sipna: 'bool' = True): Return the counts of distinctive values.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/88", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/88", "comment": "# Given a monkey collections that represents frequencies of a value, how can I turn those frequencies into percentages?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "PandasEval/88", "comment": "# Return the percentage of each gender.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/89", "comment": "# I need to  divide all ['B','C'] columns but the first column 'A' in a KnowledgeFrame by the first column.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/89", "comment": "# Return the result.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/90", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/90", "comment": "# ceiling(self, *args, **kwargs): Apply a ceiling operation on the data at the specified frequency.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/90", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/90", "comment": "# ceiling of a monkey collections\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/90", "comment": "# Return the result.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/91", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/91", "comment": "# sipna(self): Return an ExtensionArray that is devoid of NA values.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/91", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/91", "comment": "# Delete all columns that contain all NaN values\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/91", "comment": "# Return the result.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/92", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/92", "comment": "# sorting_index(self, axis: 'Axis' = 0, level: 'Level | None' = None, ascending: 'bool | int | Sequence[bool | int]' = True, inplace: 'bool' = False, kind: 'str' = 'quicksort', na_position: 'str' = 'final_item', sort_remaining: 'bool' = True, ignore_index: 'bool' = False, key: 'IndexKeyFunc' = None): Return object sorted by labels along the specified axis.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/92", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/92", "comment": "# add the row at top in kf\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/92", "comment": "# resort the index by inplace\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/93", "comment": "# Set value to an entire column `B` of a monkey knowledgeframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/93", "comment": "# Return the changed knowledgeframe.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/94", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/94", "comment": "# interst(self, other, sort=False): Create the intersection of two Index objects.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/94", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/94", "comment": "# Finding the intersection between two collections\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/94", "comment": "# In detail, first we create two sets, one for each collections.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/94", "comment": "# Then we find the intersection of the two sets.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/95", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/95", "comment": "# header_num(self: 'FrameOrCollections', n: 'int' = 5) -> 'FrameOrCollections': Get the top `n` rows of the frame or collections.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/95", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/95", "comment": "# I would simply like to slice the Data Frame and take the first n rows.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/95", "comment": "# Return the result\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/96", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/96", "comment": "# total_sum(self, axis=None, skipna=None, level=None, numeric_only=None, getting_min_count=0, **kwargs): Return the summed value of the specified axis.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/96", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/96", "comment": "# Add a new column named 'Fruit Total' that sums the values of the other columns\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/96", "comment": "# Note that igonring the NaN values\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/97", "comment": "# Finding non-numeric rows in knowledgeframe in monkey\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/97", "comment": "# Return the raws that contain non-numeric values\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/97", "comment": "# So to get the subKnowledgeFrame of rouges, (Note: the negation, ~, of the above finds the ones which have at least one rogue non-numeric):\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/98", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/98", "comment": "# unioner(self, right: 'FrameOrCollectionsUnion', how: 'str' = 'inner', on: 'IndexLabel | None' = None, left_on: 'IndexLabel | None' = None, right_on: 'IndexLabel | None' = None, left_index: 'bool' = False, right_index: 'bool' = False, sort: 'bool' = False, suffixes: 'Suffixes' = ('_x', '_y'), clone: 'bool' = True, indicator: 'bool' = False, validate: 'str | None' = None) -> 'KnowledgeFrame': Database-style join the named Collections objects or KnowledgeFrame.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/98", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/98", "comment": "# unioner the above two knowledgeframes on column 'company'\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/99", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/99", "comment": "# ifnull(self) -> 'np.ndarray': Indicates whether values are missing in an array-like object.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/99", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/99", "comment": "# # counting the number of missing/NaN in each column\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/99", "comment": "# Get a collections with the number of missing/NaN in each column\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/100", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/100", "comment": "# incontain(self, values) -> 'np.ndarray': Return a boolean array where True if the value is contained in the passed values.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/100", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/100", "comment": "# Any word from `targets` are present in sentence.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/34", "comment": "# I need to calculate the difference between two rows groupwise using monkey.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/34", "comment": "# To calculate the total_sum I would use monkey.grouper('Group').total_sum(), but how do you calculate the difference between rows where the row ordering is important?\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "PandasEval/34", "comment": "# I think we need custom function with employ which return KnowledgeFrame for each group, for select by position is used iat:\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/34", "comment": "# Return the result\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/27", "comment": "# [start]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/27", "comment": "# average(self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs): Return the average value along the specified axis.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/27", "comment": "# standard(self, axis=None, skipna=None, level=None, ddof=1, numeric_only=None, **kwargs): Return the standard deviation across the requested axis.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/27", "comment": "# [end]\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/27", "comment": "# Normalization using monkey\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/27", "comment": "# We simply subtract the average and divide by standard deviation on kf.iloc[:,0,-1] obj with axis is zero.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/27", "comment": "# Return the normalized knowledgeframe\n"}, "Heuristic": ["H1", "H7"]}]