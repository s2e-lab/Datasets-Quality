[{"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " average(self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs): Return the average value along the specified axis.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " You can specify a new column named `average_along_rows` that contains the average of each row. You also need to compute the average along the rows, so use axis=1.", "Heuristic": []}, {"nl": " Finally, return the knowledgeframe with the new column. ", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " incontain(self, values) -> 'np.ndarray': Return a boolean array where True if the value is contained in the passed values.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " How do I select rows from a KnowledgeFrame kf based on column values?", "Heuristic": ["H1"]}, {"nl": " Return rows whose column value named `col_name` is in an iterable `values`", "Heuristic": []}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " renaming(self, name, inplace=False): Change the name of the Index or MultiIndex.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " How do I change the column labels of kf\uff1f", "Heuristic": ["H1"]}, {"nl": " And return the knowledgeframe that has been renamed", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " sip(self, labels, errors: 'str_t' = 'raise') -> 'Index': Create a new Index with no passed labels.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " deleting a column from a Monkey KnowledgeFrame", "Heuristic": ["H1"]}, {"nl": " return the changged knowledgeframe", "Heuristic": ["H1"]}, {"nl": " How do I select the given columns and return the new KnowledgeFrame?", "Heuristic": []}, {"nl": "\n    Return the row count of kf\n    ", "Heuristic": ["H1"]}, {"nl": " I want to get a list of the column headers from a Monkey KnowledgeFrame. ", "Heuristic": []}, {"nl": " The KnowledgeFrame will come from user input, so I won't know how many columns there will be or what they will be called.", "Heuristic": []}, {"nl": " Return a list of the column headers.", "Heuristic": []}, {"nl": " How to add a new column to an existing KnowledgeFrame?", "Heuristic": []}, {"nl": " I would like to add a new column data with the column name, to the existing knowledgeframe", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " to_num(arg, errors='raise', downcast=None): Transform the the argumemt to the numeric type.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " Change all columns type of KnowledgeFrame to numeric", "Heuristic": []}, {"nl": " And return the new KnowledgeFrame", "Heuristic": []}, {"nl": " The code is:", "Heuristic": []}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " sipna(self): Return an ExtensionArray that is devoid of NA values.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " How to sip rows of Monkey KnowledgeFrame whose value in a certain column is NaN", "Heuristic": []}, {"nl": "    \n    Params:\n        kf: The knowledgeframe to add to.\n        list_to_add: The list to add.\n        column_name_list: The column names of the list to add.\n\n    Returns:\n        The knowledgeframe with the list added.\n    ", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " to_num(arg, errors='raise', downcast=None): Transform the the argumemt to the numeric type.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " I am trying to extract the last year (YY) of a fiscal date string in the format of YYYY-YY.", "Heuristic": ["H1"]}, {"nl": " e.g The last year of this '1999-00' would be 2000.", "Heuristic": ["H1"]}, {"nl": " I need a logic to include a case where if it is the end of the century then my employ method should add to the first two digits.", "Heuristic": []}, {"nl": " the column_name is the column name of the knowledgeframe that contains the date strings.", "Heuristic": ["H1"]}, {"nl": " return the numerical Collections obj of the last year.", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " last_tail(self: 'FrameOrCollections', n: 'int' = 5) -> 'FrameOrCollections': Return the FrameCollection's final `n` rows.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " How to get the last N rows of a monkey KnowledgeFrame?", "Heuristic": []}, {"nl": "\n    how do I get the value at an nth row of a given column name in Monkey?\n    return the value\n    ", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " getting(self, i): Return the element at specified position.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " clone(self: '_IndexT', name: 'Hashable | None' = None, deep: 'bool' = False, dtype: 'Dtype | None' = None, names: 'Sequence[Hashable] | None' = None) -> '_IndexT': Create a duplicate of this object.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " creating a new knowledgeframe of all same with kf_original one, but no any rows", "Heuristic": ["H1"]}, {"nl": " return the new knowledgeframe", "Heuristic": ["H1"]}, {"nl": " What is the best way to do a grouper on a Monkey knowledgeframe, but exclude some columns from that grouper?", "Heuristic": ["H1"]}, {"nl": " I want to grouper the column `Country` and `Item_Code` and only compute the sum of the rows falling under the columns ['Y1961', 'Y1962' and 'Y1963']. ", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " Collections(data=None, index=None, dtype: 'Dtype | None' = None, name=None, clone: 'bool' = False, fastpath: 'bool' = False): ndarray with axis labels in one-dimension (also time collections).", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " creating a Collections from a list [56, 24, 421, 90]", "Heuristic": ["H1"]}, {"nl": " What I want is to clip the values of `col_1` between -2 to 2 if `col_0` is `a`.", "Heuristic": []}, {"nl": " # Using `clip` function in monkey.", "Heuristic": []}, {"nl": " I would like to create new knowledgeframe out of the old one in a way that there will only be values that exceed the average value of the column. ", "Heuristic": ["H1"]}, {"nl": " We can compare values and then add NaNs by indexing or `where`", "Heuristic": ["H1"]}, {"nl": " We want remove NaNs also in first rows add custom function with `sipna`", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " adding(self, other: 'Index | Sequence[Index]') -> 'Index': Adding together a group of Index options.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " Appending the source collections to the target collections, with ignoring the index or resetting index", "Heuristic": []}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " ifna(self) -> 'np.ndarray': Indicate whether there are missing values.", "Heuristic": ["H1"]}, {"nl": " ifnull(self) -> 'np.ndarray': Indicates whether values are missing in an array-like object.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " Selecting rows where column x2 is NaN ", "Heuristic": []}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " KnowledgeFrame(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, clone: 'bool | None' = None): Tabular data that is two-dimensional, size-variable, and possibly heterogeneous.", "Heuristic": ["H1"]}, {"nl": " totype(self, dtype: 'Dtype | None' = None, clone=True): Transform a SparseArray's data type.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " I want to convert a table, represented as a list of lists, into a monkey KnowledgeFrame.", "Heuristic": []}, {"nl": " The columns are ['one', 'two']", "Heuristic": []}, {"nl": " What is the best way to convert the columns to the appropriate types, in this case the 'two' column into floats?", "Heuristic": []}, {"nl": " I need to change the dtype of multiple columns but the knowledgeframe has different kind of dtypes. ", "Heuristic": ["H1"]}, {"nl": " Some columns dtypes are float64 whereas some columns are int64", "Heuristic": ["H1"]}, {"nl": " I need to change all float64 to float32.", "Heuristic": []}, {"nl": " I have a knowledgeframe that has two columns, the second column is one of only a few values. ", "Heuristic": ["H1"]}, {"nl": " I want to return a knowledgeframe where only the rows where that col2 had a specific value 'Jimmy' are included.", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " traversal(self) -> 'Iterable[tuple[Hashable, Collections]]': Return the rows of the KnowledgeFrame organized in (index, Collections) pairs.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " make sure indexes pair with number of rows", "Heuristic": ["H1"]}, {"nl": " (for index, row in KnowledgeFrame.traversal) is a generator which yields both the index and row (as a Collections)", "Heuristic": ["H1"]}, {"nl": " for each row in the KnowledgeFrame, we need put the row['MSRA'] (as key) and row['THU'] (as value) into a rows_dict", "Heuristic": ["H1"]}, {"nl": " {MSRA: THU, ...}", "Heuristic": ["H1"]}, {"nl": " I have a knowledgeframe in monkey where each column has different value range.", "Heuristic": ["H1"]}, {"nl": " Any idea how I can normalize the columns of this knowledgeframe where each value is between 0 and 1?", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " totype(self, dtype: 'Dtype | None' = None, clone=True): Transform a SparseArray's data type.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " I want to create a knowledgeframe with one of the column as a list or array.", "Heuristic": ["H1"]}, {"nl": " After you assign a list like or array like value to the columns, the column should be considered as type object", "Heuristic": []}, {"nl": " Now I want to assign the emails to first row and the 'Email' column", "Heuristic": []}, {"nl": " In my code, I have several variables which can either contain a monkey KnowledgeFrame or nothing at all.", "Heuristic": []}, {"nl": " Let's say I want to test and see if a certain KnowledgeFrame has been created yet or not.", "Heuristic": []}, {"nl": " I need to remain the rows where line_num is not equal to 0. What's the most efficient way to do it?", "Heuristic": ["H1"]}, {"nl": " it should be as simple as:", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " sip(self, labels, errors: 'str_t' = 'raise') -> 'Index': Create a new Index with no passed labels.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " I would like to sip all data in a monkey knowledgeframe", "Heuristic": ["H1"]}, {"nl": " Using kf.index to sip all rows", "Heuristic": ["H1"]}, {"nl": " I would like to add a new column C that is the sum value of A and B cell.", "Heuristic": []}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " sipna(self): Return an ExtensionArray that is devoid of NA values.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " Move next value to first empty row monkey", "Heuristic": []}, {"nl": " how do i move each value from a column to the first empty \"row/cell\" in monkey?", "Heuristic": ["H1"]}, {"nl": " use sorted to align non NULL data at the top, use sipna to sip all rows with all NaN", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " mapping(self, mapper, na_action=None): Map the object's values according to an input mapping or function.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " I want to make all column headers in my monkey data frame lower case", "Heuristic": []}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " nbiggest(self, n=5, keep='first') -> 'Collections': Get the elements of the object with the n largest values.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " How to get the first largest value in column a\uff1f", "Heuristic": ["H1"]}, {"nl": " Using nbiggest and iloc to implemente this", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " flat_underlying(self, order='C'): Flatten the underlying values into an ndarray.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " I have a Monkey knowledgeframe and I want to find all the unique values in that knowledgeframe...irrespective of row/columns. ", "Heuristic": ["H1"]}, {"nl": " If I have a 10 x 10 knowledgeframe, and suppose they have 84 unique values, I need to find them - Not the count.", "Heuristic": ["H1"]}, {"nl": " Using xx.values.flat_underlying to get the flattened array of the knowledgeframe", "Heuristic": ["H1"]}, {"nl": " Getting the unique values by numpy.unique", "Heuristic": ["H1"]}, {"nl": " How to group values of monkey knowledgeframe and select the latest by date from each group?", "Heuristic": ["H1"]}, {"nl": " Sorting values by `date` (ascending is True), and then grouping by `id`", "Heuristic": []}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " sip(self, labels, errors: 'str_t' = 'raise') -> 'Index': Create a new Index with no passed labels.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " i want to sip 2 rows in the knowledgeframe if zero comes in the column", "Heuristic": ["H1"]}, {"nl": " if 0 comes on odd index sip previous row as well as current row using monkey", "Heuristic": ["H1"]}, {"nl": " Assuming your knowledgeframe is indexed starting from 0", "Heuristic": ["H1"]}, {"nl": " Rows with column2 = 0 and on odd index", "Heuristic": []}, {"nl": " The rows above them", "Heuristic": []}, {"nl": " A new knowledgeframe with those rows removed", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " shifting(self, periods=1, freq=None): Increase the number of time frequency increments by the required number.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " Shift column in monkey knowledgeframe up by one?", "Heuristic": ["H1"]}, {"nl": " In detail, in 'gdp' column, shift up by one and return knowledgeframe with the changed gdp column.", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " choose_dtypes(self, include=None, exclude=None) -> 'KnowledgeFrame': Extract a collection of colums from the KnowledgeFrame based on their dtypes.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " I was wondering if there is an elegant and shorthand way in Monkey KnowledgeFrames to select columns by data type (dtype). ", "Heuristic": ["H1"]}, {"nl": " i.e. Select only float64 columns from a KnowledgeFrame", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " unioner(self, right: 'FrameOrCollectionsUnion', how: 'str' = 'inner', on: 'IndexLabel | None' = None, left_on: 'IndexLabel | None' = None, right_on: 'IndexLabel | None' = None, left_index: 'bool' = False, right_index: 'bool' = False, sort: 'bool' = False, suffixes: 'Suffixes' = ('_x', '_y'), clone: 'bool' = True, indicator: 'bool' = False, validate: 'str | None' = None) -> 'KnowledgeFrame': Database-style join the named Collections objects or KnowledgeFrame.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " How to unioner two knowledgeframes with different column names but same number of rows?", "Heuristic": ["H1"]}, {"nl": " I have two different data frames in monkey. Example:", "Heuristic": []}, {"nl": " kf1=a b  kf2= c", "Heuristic": ["H1"]}, {"nl": " 0 1       1 ", "Heuristic": ["H1"]}, {"nl": " 1 2       2 ", "Heuristic": ["H1"]}, {"nl": " 2 3       3 ", "Heuristic": ["H1"]}, {"nl": " I want to unioner them so", "Heuristic": ["H1"]}, {"nl": " kf1= a b c  ", "Heuristic": ["H1"]}, {"nl": "  0 1 1", "Heuristic": ["H1"]}, {"nl": "  1 2 2", "Heuristic": ["H1"]}, {"nl": "  2 3 3", "Heuristic": ["H1"]}, {"nl": " In order to unioner two knowledgeframes you can use this two examples. Both returns the same goal", "Heuristic": ["H1"]}, {"nl": " Using unioner plus additional arguments instructing it to use the indexes", "Heuristic": ["H1"]}, {"nl": " Specially, we can set left_index and right_index to True", "Heuristic": []}, {"nl": " How can I delete multiple columns in one pass?", "Heuristic": []}, {"nl": " In detail, I would like to delete columns A and C, but I don't know how to do it in one pass.", "Heuristic": []}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " counts_value_num(self, normalize: 'bool' = False, sort: 'bool' = True, ascending: 'bool' = False, bins=None, sipna: 'bool' = True): Return the counts of distinctive values.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " I want to get the counts of distinctive values of the knowledgeframe. count_values implements this however I want to use its output somewhere else. ", "Heuristic": ["H1"]}, {"nl": " How can I convert .count_values output to a monkey knowledgeframe.", "Heuristic": ["H1"]}, {"nl": " Use renaming_axis('distinctive_values') for name ('counts') of column from index and reseting_index", "Heuristic": ["H1"]}, {"nl": " return the final knowledgeframe", "Heuristic": ["H1"]}, {"nl": " How do I change the column labels of a monkey KnowledgeFrame from ['A', 'B', 'C'] to ['a', 'b', 'c']?", "Heuristic": []}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " mapping(self, mapper, na_action=None): Map the object's values according to an input mapping or function.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " I want to make all column headers in my monkey data frame lower case", "Heuristic": []}, {"nl": " Return the changed knowledgeframe", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " grouper(self, by=None, axis: 'Axis' = 0, level: 'Level | None' = None, as_index: 'bool' = True, sort: 'bool' = True, group_keys: 'bool' = True, squeeze: 'bool | lib.NoDefault' = <no_default>, observed: 'bool' = False, sipna: 'bool' = True) -> 'KnowledgeFrameGroupBy': Group the KnowledgeFrame by a set of columns or group keys.", "Heuristic": ["H1"]}, {"nl": " sample_by_num(self: 'FrameOrCollections', n=None, frac: 'float | None' = None, replacing: 'bool_t' = False, weights=None, random_state=None, axis: 'Axis | None' = None, ignore_index: 'bool_t' = False) -> 'FrameOrCollections': Return a number of random samples from the object's specified axis.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " Say i have a knowledgeframe with 100,000 entries and want to split it into 100 sections of 1000 entries.", "Heuristic": ["H1"]}, {"nl": " How do i take a random sample of say size 50 of just one of the 100 sections. ", "Heuristic": ["H1"]}, {"nl": " the data set is already ordered such that the first 1000 results are the first section the next section the next and so on.", "Heuristic": ["H1"]}, {"nl": " You could add a \"section\" column to your data then perform a grouper and sample_by_num(n=50):", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " replacing(old, new, count=-1, /): Return a copy of the object that replaces all instances of the substring old with new.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " Example KnowledgeFrame", "Heuristic": []}, {"nl": " Want to remove all the numbers from the Name column.", "Heuristic": []}, {"nl": " Any idea how to do it in a better way at the collections/knowledgeframe level.", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " grouper(self, by=None, axis: 'Axis' = 0, level: 'Level | None' = None, as_index: 'bool' = True, sort: 'bool' = True, group_keys: 'bool' = True, squeeze: 'bool | lib.NoDefault' = <no_default>, observed: 'bool' = False, sipna: 'bool' = True) -> 'KnowledgeFrameGroupBy': Group the KnowledgeFrame by a set of columns or group keys.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " How do I find all rows in a monkey KnowledgeFrame which have the max value for 'num' column, after grouping by 'Mt' column?", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " convert_datetime(arg: 'DatetimeScalarOrArrayConvertible', errors: 'str' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool | None' = None, formating: 'str | None' = None, exact: 'bool' = True, unit: 'str | None' = None, infer_datetime_formating: 'bool' = False, origin='unix', cache: 'bool' = True) -> 'DatetimeIndex | Collections | DatetimeScalar | NaTType | None': Map the format of the argument to datetime.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " transfer column date to datetime type", "Heuristic": ["H1"]}, {"nl": " when there is a string that is not capable of beeing turned into datetime format, skip that row,", "Heuristic": ["H1"]}, {"nl": " use errors='coerce' for this", "Heuristic": ["H1"]}, {"nl": " How to check if any value is NaN in a Monkey KnowledgeFrame? Return the result.", "Heuristic": []}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " sorting_index(self, axis: 'Axis' = 0, level: 'Level | None' = None, ascending: 'bool | int | Sequence[bool | int]' = True, inplace: 'bool' = False, kind: 'str' = 'quicksort', na_position: 'str' = 'final_item', sort_remaining: 'bool' = True, ignore_index: 'bool' = False, key: 'IndexKeyFunc' = None): Return object sorted by labels along the specified axis.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " Sorting columns in monkey knowledgeframe based on column name", "Heuristic": ["H1"]}, {"nl": " Note that axis is one", "Heuristic": []}, {"nl": " How can I get the values of column `A` when column `B`=3?", "Heuristic": []}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " average(self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs): Return the average value along the specified axis.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " return the column average/mean", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " adding(self, other: 'Index | Sequence[Index]') -> 'Index': Adding together a group of Index options.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " How do I combine two knowledgeframes with ignore index? Return the concated knowledgeframe.", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " concating(objs: 'Iterable[NDFrame] | Mapping[Hashable, NDFrame]', axis=0, join='outer', ignore_index: 'bool' = False, keys=None, levels=None, names=None, verify_integrity: 'bool' = False, sort: 'bool' = False, clone: 'bool' = True) -> 'FrameOrCollectionsUnion': Concatenate monkey objects along one axis, using set logic on the other axes if needed.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " This is my KnowledgeFrame that should be repeated for 5 times:", "Heuristic": []}, {"nl": " I haven't found anything practical, including those like np.repeat ---- it just doesn't work on a KnowledgeFrame.", "Heuristic": ["H1"]}, {"nl": " You can use the concating function:", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " convert_dict(self, into=<class 'dict'>): Return a dict-like object of the passed Collections.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " Monkey KnowledgeFrame to List of Dictionaries", "Heuristic": []}, {"nl": " Use kf.convert_dict() to solve it and return the result", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " convert_datetime(arg: 'DatetimeScalarOrArrayConvertible', errors: 'str' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool | None' = None, formating: 'str | None' = None, exact: 'bool' = True, unit: 'str | None' = None, infer_datetime_formating: 'bool' = False, origin='unix', cache: 'bool' = True) -> 'DatetimeIndex | Collections | DatetimeScalar | NaTType | None': Map the format of the argument to datetime.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " Convert Column `Date` to Date Format using monkey function", "Heuristic": []}, {"nl": " return the coverted knowledgeframe", "Heuristic": ["H1"]}, {"nl": " Counting consecutive positive values in Python/monkey array", "Heuristic": []}, {"nl": " I'm trying to count consecutive up days in equity return data; so if a positive day is 1 and a negative is 0, a list y=[0,0,1,1,1,0,0,1,0,1,1] should return z=[0,0,1,2,3,0,0,1,0,1,2].", "Heuristic": []}, {"nl": " Return the result", "Heuristic": []}, {"nl": "\n    Inserts a row into a knowledgeframe at a specified row with no ingore index, and sort & reset the index with sip=True. \n    Returns the new knowledgeframe.\n    ", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " KnowledgeFrame(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, clone: 'bool | None' = None): Tabular data that is two-dimensional, size-variable, and possibly heterogeneous.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " list_of_lists format: [header, [row1], [row2], ...]", "Heuristic": ["H1"]}, {"nl": " header format: [column1, column2, ...]", "Heuristic": ["H1"]}, {"nl": " row format: [value1, value2, ...]", "Heuristic": ["H1"]}, {"nl": " How to convert list to knowledgeframe?", "Heuristic": ["H1"]}, {"nl": " Return the knowledgeframe", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " unioner(self, right: 'FrameOrCollectionsUnion', how: 'str' = 'inner', on: 'IndexLabel | None' = None, left_on: 'IndexLabel | None' = None, right_on: 'IndexLabel | None' = None, left_index: 'bool' = False, right_index: 'bool' = False, sort: 'bool' = False, suffixes: 'Suffixes' = ('_x', '_y'), clone: 'bool' = True, indicator: 'bool' = False, validate: 'str | None' = None) -> 'KnowledgeFrame': Database-style join the named Collections objects or KnowledgeFrame.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " How do I unioner two knowledgeframes by index?", "Heuristic": ["H1"]}, {"nl": " Set left&right indexs to True", "Heuristic": ["H1"]}, {"nl": " How to obtain monkey KnowledgeFrame without index", "Heuristic": []}, {"nl": " I want to print the whole knowledgeframe, but I don't want to print the index", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " sipna(self): Return an ExtensionArray that is devoid of NA values.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " We will sip all Nan rows.", "Heuristic": []}, {"nl": " Return the changed knowledgeframe.", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " incontain(self, values) -> 'np.ndarray': Return a boolean array where True if the value is contained in the passed values.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " How to determine whether a Monkey Column contains a particular value?", "Heuristic": []}, {"nl": " Return the result", "Heuristic": []}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " renaming(self, name, inplace=False): Change the name of the Index or MultiIndex.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " How would I rename the only one column header?", "Heuristic": []}, {"nl": " return the changed knowledgeframe", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " remove_duplicates(self: '_IndexT', keep: 'str_t | bool' = 'first') -> '_IndexT': Remove the duplicate values of the Index.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " I have a knowledgeframe with repeat values in column `col1`. I want to sip duplicates, keeping the row with the last value in column `col2`.", "Heuristic": ["H1"]}, {"nl": " How would I do that?", "Heuristic": []}, {"nl": " return the final knowledgeframe", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " KnowledgeFrame(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, clone: 'bool | None' = None): Tabular data that is two-dimensional, size-variable, and possibly heterogeneous.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " Monkey create empty KnowledgeFrame with only column names", "Heuristic": []}, {"nl": " Return: KnowledgeFrame", "Heuristic": []}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " KnowledgeFrame(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, clone: 'bool | None' = None): Tabular data that is two-dimensional, size-variable, and possibly heterogeneous.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " Delete first n rows of a knowledgeframe", "Heuristic": ["H1"]}, {"nl": " Input:", "Heuristic": ["H2"]}, {"nl": "   kf: KnowledgeFrame", "Heuristic": ["H1"]}, {"nl": "   n: int", "Heuristic": ["H1"]}, {"nl": " Return:", "Heuristic": ["H2"]}, {"nl": "   KnowledgeFrame", "Heuristic": ["H1"]}, {"nl": "\n    Here's a one solution to remove columns based on duplicate column names:\n    Return the duplicated knowledgeframe\n    ", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " duplicated_values(self, keep: \"Literal[('first', 'final_item', False)]\" = 'first') -> 'np.ndarray': Return index values that are duplicated.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " How can I map True/False to 1/0 in a Monkey KnowledgeFrame?", "Heuristic": []}, {"nl": " return the knowledgeframe with the column converted to int", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " length(self): Return the length of each Collections/Index element.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " How do I retrieve the number of columns in a Monkey data frame?", "Heuristic": []}, {"nl": " Return the number of columns in the knowledgeframe", "Heuristic": ["H1"]}, {"nl": " How do I determine which columns contain NaN values? In particular, can I get a list of the column names containing NaNs?", "Heuristic": ["H1"]}, {"nl": " Return a list of the column names containing NaNs", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " last_tail(self: 'FrameOrCollections', n: 'int' = 5) -> 'FrameOrCollections': Return the FrameCollection's final `n` rows.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " How to get the last N rows of a monkey KnowledgeFrame?", "Heuristic": []}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " replacing(old, new, count=-1, /): Return a copy of the object that replaces all instances of the substring old with new.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " replace field that's entirely space (or empty) with NaN using regex", "Heuristic": ["H1"]}, {"nl": " return the result", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " fillnone(self, value=None, downcast=None): Use the provided value to fill NA/NaN values.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " Monkey knowledgeframe fillnone() only some columns in place", "Heuristic": ["H1"]}, {"nl": " This function fills all columns with 0", "Heuristic": []}, {"nl": " Return the changed knowledgeframe", "Heuristic": ["H1"]}, {"nl": " Given that all the knowledgeframes have the same columns, you can simply concat them:", "Heuristic": ["H1"]}, {"nl": " return the concated knowledgeframe", "Heuristic": ["H1"]}, {"nl": " Extract first and last row of a knowledgeframe in monkey", "Heuristic": ["H1"]}, {"nl": " Return the knowledgeframe with the first and last row", "Heuristic": ["H1"]}, {"nl": " Return the knowledgeframe with the rows with one or more NaN values", "Heuristic": ["H1"]}, {"nl": " Return the row-index values of the knowledgeframe as a list", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " getting(self, i): Return the element at specified position.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " I find myself often having to check whether a column or row exists in a knowledgeframe before trying to reference it.", "Heuristic": ["H1"]}, {"nl": " Is there any way to do this more nicely? ", "Heuristic": []}, {"nl": " For example on an arbitrary object I can do x = getattr(anobject, 'id', default) - is there anything similar to this in monkey? Really any way to achieve what I'm doing more gracefully?", "Heuristic": ["H1"]}, {"nl": " Output the second row of data in `mycol` column if it exists, otherwise output NaN", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " counts_value_num(self, normalize: 'bool' = False, sort: 'bool' = True, ascending: 'bool' = False, bins=None, sipna: 'bool' = True): Return the counts of distinctive values.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " Count the number of occurrences of a value in a collections", "Heuristic": ["H1"]}, {"nl": " Return the count", "Heuristic": []}, {"nl": " Find rows in kf where col_a > col_b", "Heuristic": ["H1"]}, {"nl": " Return the rows", "Heuristic": []}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " shifting(self, periods=1, freq=None): Increase the number of time frequency increments by the required number.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " Drop consecutive duplicates", "Heuristic": []}, {"nl": " Return the result", "Heuristic": []}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " value_round(freq, ambiguous='raise', nonexistent='raise'): Return the rounded Timestamp to the chosen resolution.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " Round a single column `A`", "Heuristic": []}, {"nl": " Return the knowledgeframe", "Heuristic": ["H1"]}, {"nl": " Add Leading Zeros to Strings at `col_name` in Monkey Dataframe", "Heuristic": ["H1"]}, {"nl": " The maximum length of the string is 15", "Heuristic": []}, {"nl": " Return the knowledgeframe", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " adding(self, other: 'Index | Sequence[Index]') -> 'Index': Adding together a group of Index options.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " adding dictionary to data frame", "Heuristic": ["H1"]}, {"nl": " return the data frame", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " convert_pydatetime(*args, **kwargs): Return the native datetime object in Python.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " transform timestamp to pydatetime object", "Heuristic": ["H1"]}, {"nl": " return pydatetime object", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " counts_value_num(self, normalize: 'bool' = False, sort: 'bool' = True, ascending: 'bool' = False, bins=None, sipna: 'bool' = True): Return the counts of distinctive values.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " Given a monkey collections that represents frequencies of a value, how can I turn those frequencies into percentages?", "Heuristic": ["H1"]}, {"nl": " Return the percentage of each gender.", "Heuristic": []}, {"nl": " I need to  divide all ['B','C'] columns but the first column 'A' in a KnowledgeFrame by the first column.", "Heuristic": ["H1"]}, {"nl": " Return the result.", "Heuristic": []}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " ceiling(self, *args, **kwargs): Apply a ceiling operation on the data at the specified frequency.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " ceiling of a monkey collections", "Heuristic": ["H1"]}, {"nl": " Return the result.", "Heuristic": []}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " sipna(self): Return an ExtensionArray that is devoid of NA values.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " Delete all columns that contain all NaN values", "Heuristic": []}, {"nl": " Return the result.", "Heuristic": []}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " sorting_index(self, axis: 'Axis' = 0, level: 'Level | None' = None, ascending: 'bool | int | Sequence[bool | int]' = True, inplace: 'bool' = False, kind: 'str' = 'quicksort', na_position: 'str' = 'final_item', sort_remaining: 'bool' = True, ignore_index: 'bool' = False, key: 'IndexKeyFunc' = None): Return object sorted by labels along the specified axis.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " add the row at top in kf", "Heuristic": ["H1"]}, {"nl": " resort the index by inplace", "Heuristic": ["H1"]}, {"nl": " Set value to an entire column `B` of a monkey knowledgeframe", "Heuristic": ["H1"]}, {"nl": " Return the changed knowledgeframe.", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " interst(self, other, sort=False): Create the intersection of two Index objects.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " Finding the intersection between two collections", "Heuristic": []}, {"nl": " In detail, first we create two sets, one for each collections.", "Heuristic": ["H1"]}, {"nl": " Then we find the intersection of the two sets.", "Heuristic": []}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " header_num(self: 'FrameOrCollections', n: 'int' = 5) -> 'FrameOrCollections': Get the top `n` rows of the frame or collections.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " I would simply like to slice the Data Frame and take the first n rows.", "Heuristic": []}, {"nl": " Return the result", "Heuristic": []}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " total_sum(self, axis=None, skipna=None, level=None, numeric_only=None, getting_min_count=0, **kwargs): Return the summed value of the specified axis.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " Add a new column named 'Fruit Total' that sums the values of the other columns", "Heuristic": []}, {"nl": " Note that igonring the NaN values", "Heuristic": ["H1"]}, {"nl": " Finding non-numeric rows in knowledgeframe in monkey", "Heuristic": ["H1"]}, {"nl": " Return the raws that contain non-numeric values", "Heuristic": ["H1"]}, {"nl": " So to get the subKnowledgeFrame of rouges, (Note: the negation, ~, of the above finds the ones which have at least one rogue non-numeric):", "Heuristic": []}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " unioner(self, right: 'FrameOrCollectionsUnion', how: 'str' = 'inner', on: 'IndexLabel | None' = None, left_on: 'IndexLabel | None' = None, right_on: 'IndexLabel | None' = None, left_index: 'bool' = False, right_index: 'bool' = False, sort: 'bool' = False, suffixes: 'Suffixes' = ('_x', '_y'), clone: 'bool' = True, indicator: 'bool' = False, validate: 'str | None' = None) -> 'KnowledgeFrame': Database-style join the named Collections objects or KnowledgeFrame.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " unioner the above two knowledgeframes on column 'company'", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " ifnull(self) -> 'np.ndarray': Indicates whether values are missing in an array-like object.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " # counting the number of missing/NaN in each column", "Heuristic": []}, {"nl": " Get a collections with the number of missing/NaN in each column", "Heuristic": ["H1"]}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " incontain(self, values) -> 'np.ndarray': Return a boolean array where True if the value is contained in the passed values.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " Any word from `targets` are present in sentence.", "Heuristic": []}, {"nl": " I need to calculate the difference between two rows groupwise using monkey.", "Heuristic": []}, {"nl": " To calculate the total_sum I would use monkey.grouper('Group').total_sum(), but how do you calculate the difference between rows where the row ordering is important?", "Heuristic": []}, {"nl": " I think we need custom function with employ which return KnowledgeFrame for each group, for select by position is used iat:", "Heuristic": ["H1"]}, {"nl": " Return the result", "Heuristic": []}, {"nl": " [start]", "Heuristic": ["H2"]}, {"nl": " average(self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs): Return the average value along the specified axis.", "Heuristic": ["H1"]}, {"nl": " standard(self, axis=None, skipna=None, level=None, ddof=1, numeric_only=None, **kwargs): Return the standard deviation across the requested axis.", "Heuristic": ["H1"]}, {"nl": " [end]", "Heuristic": ["H2"]}, {"nl": " Normalization using monkey", "Heuristic": []}, {"nl": " We simply subtract the average and divide by standard deviation on kf.iloc[:,0,-1] obj with axis is zero.", "Heuristic": ["H1"]}, {"nl": " Return the normalized knowledgeframe", "Heuristic": ["H1"]}]