[{"nl": {"id": "NumpyEval/0", "comment": "# Is there an efficient numpy way to find each index where the value changes? \n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "NumpyEval/0", "comment": "# You can get this functionality in numpy by comparing each element with it's neighbor\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/0", "comment": "# and then using np.where(condition).\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/1", "comment": "# I have a 2d array with shape (x, y) which I want to convert to a 3d array with shape (x, y, 1).\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/1", "comment": "# Is there a nice Pythonic way to do this?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "NumpyEval/2", "comment": "# How to get the cumulative distribution function with NumPy?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "NumpyEval/2", "comment": "# set bins to 10\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/2", "comment": "# and then generate a cumulative sum of the histogram contents to variable hist self\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/3", "comment": "# How to convert an array of strings to an array of floats in numpy?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "NumpyEval/3", "comment": "# Return the final result\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/4", "comment": "# Convert Python sequence to NumPy array, filling missing values with 0\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/5", "comment": "# I am using numpy. I have a matrix with 1 column and N rows and I want to get an array from with N elements.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/5", "comment": "# For example, if i have M = matrix([[1], [2], [3], [4]]), I want to get A = array([1,2,3,4]).\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/5", "comment": "# Return the array\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/6", "comment": "# Convert numpy array to tuple\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/6", "comment": "# Return the transformed tuple\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/7", "comment": "# Conducting the reverse operation along with the last dimension\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/8", "comment": "# How to remove all rows in a numpy.ndarray that contain non-numeric values?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "NumpyEval/8", "comment": "# Return the final result\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/9", "comment": "# I have a pandas dataframe I would like to se the diagonal to 0\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/10", "comment": "# How to count values in a certain range in a Numpy array?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "NumpyEval/10", "comment": "# the number of elements fulfilling 2 < x < 8 is:\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/11", "comment": "# Flattening a list of NumPy arrays?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "NumpyEval/11", "comment": "# We can use numpy.concatenate, which as the name suggests, basically concatenates all the elements of such an input list into a single NumPy array\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/11", "comment": "# And then we can use numpy.ravel to flatten the array\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/12", "comment": "# How can I get the shape of NumPy array?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "NumpyEval/13", "comment": "# Inverse of a matrix using numpy and return it.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/13", "comment": "# Input:\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "NumpyEval/13", "comment": "#   matrix: numpy array, shape (n, n)\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/13", "comment": "# Output:\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "NumpyEval/13", "comment": "#   inverse: numpy array, shape (n, n)\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/14", "comment": "# How can I check whether a numpy array is empty or not?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "NumpyEval/14", "comment": "# Return the reuslt that contains True or False\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/15", "comment": "# Assigning array x to the 2th column of array a.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/16", "comment": "# Find indices of a list of values in a numpy array\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/17", "comment": "# I need a general way to flatten that array into a single array of N elements, with N=every float in all the sub-arrays.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/18", "comment": "# I wish to find and return the minimum value in this 2D array\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/18", "comment": "# The following code is aim to implement it\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/19", "comment": "# How do I create an array where every entry is the same value?\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "NumpyEval/19", "comment": "# I know numpy.ones() and numpy.zeros() do this for 1's and 0's, but what about -1?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "NumpyEval/19", "comment": "# the shape of the array is (5, 5)\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/20", "comment": "# Convert a numpy.ndarray to string\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/20", "comment": "# and convert it back to numpy.ndarray with dtype=int\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/21", "comment": "# How to print a Numpy array without brackets?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "NumpyEval/21", "comment": "# For example, I want to convert a = np.array([1,2,3,4,5]) into a_string = \"1 2 3 4 5\".\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/22", "comment": "# Averaging over every 3 elements of a numpy array\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/22", "comment": "# I have a numpy array. I want to create a new array which is the average over every consecutive triplet of elements. So the new array will be a third of the size as the original.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/22", "comment": "# Return it\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/23", "comment": "\"\"\"\n    How can I define in numpy a matrix that uses operations modulo 2?\n    This operation is called \"xor\".\n    Arguments:\n        x: a numpy array\n        y: a numpy array\n        z: a numpy array\n    Returns:\n        a numpy array containing the result of the operation\n    \"\"\""}, "Heuristic": ["H1"]}, {"nl": {"id": "NumpyEval/24", "comment": "# if function is c(i, j) = a(i) + b(j)*2:\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/25", "comment": "# Is there a function that returns an array with the results of dividing the next element by the previous one? Like a \"diff()\", but with dividing\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "NumpyEval/25", "comment": "# Not-numpy-example:\n"}, "Heuristic": ["H1", "H2", "H7"]}, {"nl": {"id": "NumpyEval/25", "comment": "# source = [1,3,6,24,36]\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/25", "comment": "# target = [j / i for i, j in zip(source[:-1], source[1:])]\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/25", "comment": "# Return: target implemented in numpy.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/26", "comment": "# List of arrays.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/26", "comment": "# Stack them using axis that is negative one .\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/27", "comment": "# How to invoke the standard deviation function on a 2d array?\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "NumpyEval/27", "comment": "# with axis=0, it will return a 1d array with the standard deviation of each column\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/28", "comment": "# I am using numpy. I have a matrix `M` 1*N and I want to get an array from with N elements.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/28", "comment": "# To achieve it, Does anyone know a more elegant way to get the result?\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "NumpyEval/29", "comment": "# How to get the index of a maximum element in a NumPy array along axis_value?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "NumpyEval/29", "comment": "# Return the result\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/30", "comment": "# Convert numpy array type and values from Float64 to Float32\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/31", "comment": "# I'd like to use b in index a, I would like to get 4 instead of [a[1], a[1]]\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/31", "comment": "# the code below is the solution\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/32", "comment": "# Window len = L, Stride len/stepsize = S\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/32", "comment": "\"\"\"\n    I want to create a matrix of sub sequences from this array of length L with stride S.\n    Return the numpy array of sub sequences.\n    \"\"\""}, "Heuristic": ["H1"]}, {"nl": {"id": "NumpyEval/33", "comment": "# Is there a quick way to \"sub-flatten\" or flatten only some of the first dimensions in a numpy array?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "NumpyEval/33", "comment": "# Given a numpy array of dimensions (50,100,25), the resultant dimensions would be (5000,25)\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/34", "comment": "# y axis\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/34", "comment": "# filter out values larger than 2\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/34", "comment": "# remove masked values from m\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/35", "comment": "# create a numpy array composed of a list [[8, 7, 2], [5, 6, 1], [8, 2, 6]]\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/36", "comment": "# I have a NumPy array that looks like this:\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/36", "comment": "# How can I get multiple values from this array by index?\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "NumpyEval/36", "comment": "# How can I get the values at the index positions 1 and 4?\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "NumpyEval/37", "comment": "# Find the most frequent number in a NumPy array\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/37", "comment": "# Return the number\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/38", "comment": "# I have a list containing numpy arrays something like L=[a,b,c] where a, b and c are numpy arrays with sizes N_a in T, N_b in T and N_c in T.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/38", "comment": "# I want to row-wise concatenate a, b and c and get a numpy array with shape (N_a+N_b+N_c, T). \n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/38", "comment": "# Clearly one solution is run a for loop and use numpy.concatenate, but is there any pythonic way to do this?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "NumpyEval/39", "comment": "# We want row with the first column value is 0\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/39", "comment": "# and the second colum value is 1\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/39", "comment": "# Maybe using np.where() is better\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/40", "comment": "# How would one interweave them efficiently?\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "NumpyEval/40", "comment": "# It can be assumed that length(a)==length(b).\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/41", "comment": "# Copy numpy array 'a' into part of another array 'b' in [1:4, 1:4]\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/42", "comment": "# I need to find unique rows in a numpy.array.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/43", "comment": "# I have two simple one-dimensional arrays in NumPy. \n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/43", "comment": "# I should be able to concatenate them using numpy.concatenate.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/44", "comment": "# How to multiply a nD array with 1D array, where len(1D-array) == len(nD array)?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "NumpyEval/44", "comment": "# You need to convert array b to a (2, 1) shape array, use None or numpy.newaxis in the index tuple:\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/45", "comment": "# How to add items into a numpy array?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "NumpyEval/45", "comment": "# add one element to each row using column stack operation.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/46", "comment": "# I generate a list of one dimensional numpy arrays in a loop and later convert this list to a 2d numpy array.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/46", "comment": "# I would've preallocated a 2d numpy array if i knew the number of items ahead of time, but I don't, therefore I put everything in a list.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/46", "comment": "# s there a better way (performancewise) to go about the task of collecting sequential numerical data (in my case numpy arrays) than putting them in a list and then making a numpy.array out of it (I am creating a new obj and copying the data)? Is there an \"expandable\" matrix data structure available in a well tested module?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "NumpyEval/47", "comment": "# Perform a symmetric difference between two numpy arrays.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/47", "comment": "# Don't convert the numpy array to a set to perform exclusive-or. Use setxor1d directly.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/48", "comment": "# How to count the number of true elements in a NumPy bool array?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "NumpyEval/48", "comment": "# return the count value\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/49", "comment": "# How to add a new row to an empty numpy array\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/49", "comment": "# example: \n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/49", "comment": "# input: np.array([1,2,3]) and np.array([4,5,6])\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/49", "comment": "# output: np.array([[1,2,3],[4,5,6]])\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/49", "comment": "# Return the new array\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/50", "comment": "# I'd like to calculate element-wise average between a, b and c.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/51", "comment": "# Find the index of the k smallest values of a numpy array\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/52", "comment": "# I have a 2D numpy array of shape (N,2) which is holding N points.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/52", "comment": "# Sorting it such that my points are ordered by x-coordinate, and then by y in cases where the x coordinate is the same, and get the values by inplace\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/53", "comment": "# Firstly, We need to find the minimun value of each column with axis 0,\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/53", "comment": "# Then conduct subtract operation between each element of the column and the minimum value.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/54", "comment": "# I want to access the elements from index 4 to the end:\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/55", "comment": "# Is there a simple way of replacing all negative values in an array with `0`?\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "NumpyEval/55", "comment": "# using a NumPy function `where` to solve it.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/56", "comment": "# I have an array of distances called dists. I want to select dists which are within a range [r, r+dr].\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/56", "comment": "# You don't actually need where if you're just trying to filter out the elements of dists that don't fit your criteria:\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/57", "comment": "#condition is True on even numbers\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/57", "comment": "# I have an array a and I would like to repeat the elements of a n times if they are even or if they are positive. \n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/57", "comment": "# I mean I want to repeat only the elements that respect some condition, other elements are not displayed.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/57", "comment": "# In detail, if a meets the condition cond, I want to repeat it n times. \n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/58", "comment": "# I have a numpy array and I like to check if it is sorted.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/58", "comment": "# Using numpy.all to do this.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/59", "comment": "# How can I use reshape to divide it into 4 chucks, such that it looks like this:\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/59", "comment": "# I would like to reshape a to (2, 4, 2, 4) and then transpose it by (0, 2, 1, 3) to c\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/60", "comment": "# Return the indices of the minimum values along (axis is zero).\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/61", "comment": "# I would like to dynamically slice a numpy array along a specific axis.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/61", "comment": "# I think one way would be to use slice(start, end):\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/62", "comment": "# Converting a 2D numpy array to a structured array\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/62", "comment": "# You can 'create a record array from a (flat) list of arrays' using numpy.core.records.fromarrays as follows:\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/62", "comment": "# Note that we need conduct the transpose on the array, and the names reset to 'col1, co2, col3'\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/63", "comment": "# Check if each element in a numpy array is in another array\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/63", "comment": "# This problem seems easy but I cannot quite get a nice-looking solution. \n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/63", "comment": "# I have two numpy arrays (A and B), and I want to get the indices of A where the elements of A are in B and also get the indices of A where the elements are not in B.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/64", "comment": "# Converting int arrays to string arrays in numpy without truncation\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/65", "comment": "# How does one add rows to a numpy array?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "NumpyEval/65", "comment": "# Is there a numpythonic way to do this?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "NumpyEval/66", "comment": "# How can I join them using numpy methods\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/66", "comment": "# You can transpose and flatten the arrays:\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/67", "comment": "# Find indices of elements equal to zero in a NumPy array\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/67", "comment": "# Return the indices\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/68", "comment": "# We array `data` defines the columns of the nonzero elements in the output array. \n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/68", "comment": "# We need to also define the rows and then use fancy indexing in the following way:\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/68", "comment": "# Convert array of indices to 1-hot encoded numpy array\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/69", "comment": "# How can I know the (row, column) index of the minimum of a numpy array/matrix?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "NumpyEval/69", "comment": "# Use unravel_index()\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/70", "comment": "# How can I calculate matrix mean values along the row of matrix, but to remove nan values from calculation?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "NumpyEval/70", "comment": "# If all row values is NaNs, the mean value is set to NaN.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/71", "comment": "# Replace all elements of Python NumPy Array that are greater than `value` with `new_value`\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/71", "comment": "# Return the array\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/72", "comment": "\"\"\"\n    I would like to slice a numpy array to obtain the i-th index in the last dimension.\n    Is there a way I can obtain this slice for any array without explicitly having to write the array dimensions?\n    There is ... or Ellipsis, which does exactly this\n    Returns: numpy array\n    \"\"\""}, "Heuristic": ["H1", "H12"]}, {"nl": {"id": "NumpyEval/73", "comment": "# Find nearest value in numpy array\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/73", "comment": "# return the result\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/74", "comment": "# find index of the elements within range [low, high]\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/74", "comment": "# Return the final array of indices.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/75", "comment": "#This will tell me those values\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/75", "comment": "# generate a mask to find all values that are even numbers\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/75", "comment": "# Is there an efficient Numpy mechanism to retrieve the integer indexes of locations in an array based on a condition is true as opposed to the Boolean mask array?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "NumpyEval/76", "comment": "# I have a dictionary that I need to convert to a NumPy structured array. \n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/77", "comment": "# What is the inverse of the numpy cumsum function?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "NumpyEval/78", "comment": "# I am trying to translate every element of a numpy.array according to a given key\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/78", "comment": "# I don't know about efficient, but you could use np.vectorize on the .get method of dictionaries:\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/79", "comment": "# I am trying to do element-wise string concatenation.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/79", "comment": "# I thought Add() was the way to do it in numpy but obviously it is not working as expected.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/80", "comment": "# Partition array into 3 chunks with Numpy\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/81", "comment": "# How do I extract a sub-array from a numpy 2d array? \n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "NumpyEval/81", "comment": "# I'd like to extract a numpy array with a specified size from a numpy 2d array--essentially I want to crop the array.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/81", "comment": "# Return a sub-array from a numpy 2d array.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/82", "comment": "# I want to add the first element on to the end of the array.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/82", "comment": "# Return the appended array.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/83", "comment": "# I want to separate the keys and values into 2 numpy arrays. \n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/84", "comment": "# what is the fastest and easiest way to set the super low value named tol to zero?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "NumpyEval/84", "comment": "# Handling of real and imaginary numbers separately\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/85", "comment": "# Test if numpy array contains only zeros\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/85", "comment": "# Return the result\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/86", "comment": "# Numpy Vector (N,1) dimension -> (N,) dimension conversion\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/87", "comment": "# I want to check if all values in the columns of a numpy array/matrix are the same.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/87", "comment": "# A column shares a common value if all the values in that column are True:\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/87", "comment": "# The below code checks if all values in the columns are the same using a == a[0,:] and axis=0\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/88", "comment": "# convert nan value to zero\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/88", "comment": "# Return the changed array\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/89", "comment": "# How to find the groups of consecutive elements in a NumPy array\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/89", "comment": "# I have to cluster the consecutive elements from a NumPy array. Considering the following example\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/89", "comment": "# a = [ 0, 47, 48, 49, 50, 97, 98, 99]\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/89", "comment": "# The output should be a list of tuples as follows\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/89", "comment": "# [(0), (47, 48, 49, 50), (97, 98, 99)]\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/89", "comment": "# Here the difference is just one between the elements. It will be great if the difference can also be specified as a limit or a hardcoded number.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/89", "comment": "# Finally, return the number of consecutive elements in the array.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/90", "comment": "# Concatenate a NumPy array to another NumPy array\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/91", "comment": "# Removing columns with index 1 and 3 in numpy\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/91", "comment": "# If you ever want to delete more than one columns, you just pass indices of columns you want deleted as a list to np.delete, like this:\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/92", "comment": "# how can I make a python list obj from this matrix?\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "NumpyEval/92", "comment": "# # the list should be one dimensional and contain all values of the matrix\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/93", "comment": "# How to remove specific elements in a numpy array\uff1f\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/93", "comment": "# I then want to remove 3,4,7 from a. All I know is the index of the values (index=[2,3,6]).\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/94", "comment": "# remove zero rows 2-D numpy array\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/94", "comment": "# Use np.all with an axis argument:\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/95", "comment": "# Is there a way to compare what elements in a exist in b?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "NumpyEval/95", "comment": "# Return a array of booleans, True if elements in a exist in b, False otherwise\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/96", "comment": "# How do I create a numpy array of arbitrary shape 3x4 filled with all True?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "NumpyEval/97", "comment": "# multiply arrays rowwise\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/97", "comment": "# Basically out[i] = a[i] * b[i], where a[i].shape is (2,) and b[i] then is a scalar.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/97", "comment": "# What's the trick?\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "NumpyEval/98", "comment": "# How can the Euclidean distance be calculated with NumPy?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "NumpyEval/99", "comment": "# What's the best way to sum all values in a Pandas dataframe?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "NumpyEval/99", "comment": "# the result is a numeric value\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "NumpyEval/100", "comment": "# Prepend element to numpy array\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "NumpyEval/100", "comment": "# Return the array\n"}, "Heuristic": ["H7"]}]