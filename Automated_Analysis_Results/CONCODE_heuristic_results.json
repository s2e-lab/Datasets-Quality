[{"nl": "Generate mappings for each Function node and parameters and variables names associated with it. ", "Heuristic": []}, {"nl": "Returns lookup interface for maximum number of connections allowed per route.", "Heuristic": []}, {"nl": "Returns a hash of the given files contents. Reads the file fully into memory before hashing so only use with small files.", "Heuristic": []}, {"nl": "Obtains the ID of an object and returns it as a String. If canCreate is true it will try to create a new ID for the object if it has none.", "Heuristic": ["H1"]}, {"nl": "Creates a matcher of  {@link Comparable} object that matches when the examined object isgreater than the specified value, as reported by the compareTo method of the examined object. For example: assertThat(2, greaterThan(1))", "Heuristic": ["H1"]}, {"nl": "Returns denominator", "Heuristic": ["H2"]}, {"nl": "Not required", "Heuristic": ["H2"]}, {"nl": "Implements BundleActivator.stop(). Does nothing since the framework will automatically unregister any registered services.", "Heuristic": []}, {"nl": "Constructs a String with all attributes in name = value format.", "Heuristic": []}, {"nl": "Called when the activity will start interacting with the user.", "Heuristic": []}, {"nl": "Tests for the  {@link BufferedBlockInStream#seek(long)} method.", "Heuristic": ["H1"]}, {"nl": "Obtains the release of the versioned module or informal unit. This data is read from the version information for the package.", "Heuristic": []}, {"nl": "Tries to perform a \"full\" garbage collection cycle (including processing of weak references and invocation of finalize methods) and waits for it to complete.  Ensures that at least one weak reference has been cleared and one  {@code finalize} method has been run before thismethod returns.  This method may be useful when testing the garbage collection mechanism itself, or inhibiting a spontaneous GC initiation in subsequent code. In contrast, a plain call to  {@link java.lang.System#gc()} does not ensure finalizationprocessing and may run concurrently, for example, if the JVM flag  {@code -XX:+ExplicitGCInvokesConcurrent} is used.Whenever possible, it is preferable to test directly for some observable change resulting from GC, as with  {@link #awaitClear}.  Because there are no guarantees for the order of GC finalization processing, there may still be some unfinished work for the GC to do after this method returns. This method does not create any memory pressure as would be required to cause soft references to be processed.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Sets the properties and configuration before each test runs.", "Heuristic": []}, {"nl": "This function returns the documentation in C-style comment format.", "Heuristic": []}, {"nl": "Returns the transaction that was found to be non-standard, or null.", "Heuristic": []}, {"nl": "Get the log level for reporting the selection of the new alternative address or endpoint", "Heuristic": []}, {"nl": "function to search for a word", "Heuristic": ["H1"]}, {"nl": "Returns all commits that belong to a particular ref", "Heuristic": []}, {"nl": "clear and destroy all  {@link ReferenceConfig} in the cache.", "Heuristic": ["H1"]}, {"nl": "Closes the current scans.", "Heuristic": []}, {"nl": "Convert a given String[] propertyName#propertyValue to a Map", "Heuristic": []}, {"nl": "Reads the DialectURI of the ClaimURIs to be retrieved from identity.xml -> OAuth -> TokenGeneration -> ConsumerDialectURI. If not configured it uses http://wso2.org/claims as default", "Heuristic": ["H1"]}, {"nl": "Find the attributes or simple/text nodes", "Heuristic": []}, {"nl": "Returns the return type of the method described by this object.", "Heuristic": []}, {"nl": "Validates the files listed in the set of Sources  {@code source} byrunning passes that are dependent on the validation goal. Returns true on success.", "Heuristic": ["H1"]}, {"nl": "Enable/Disable GPS", "Heuristic": ["H2"]}, {"nl": "23       Returns true if view's layout direction is right-to-left. 24       25       @param view the View whose layout is being considered 26", "Heuristic": ["H1"]}, {"nl": "Returns the total capacity of this buffer.", "Heuristic": []}, {"nl": "Gets the checklist for an element.", "Heuristic": []}, {"nl": "Determinant", "Heuristic": ["H2"]}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.util.Date#setDay(int)}.", "Heuristic": ["H1"]}, {"nl": "Full stack trace of  {@link Throwable} associated with log record.", "Heuristic": ["H1"]}, {"nl": "Returns the next available tile in the specified lane that is closest to the base. A tile is available if it's not occupied by a card.", "Heuristic": []}, {"nl": "Inverse of a matrix - A-1  A = I where I is the identity matrix A matrix that have inverse is called non-singular or invertible. If the matrix does not have inverse it is called singular. For a singular matrix the values of the inverted matrix are either NAN or Infinity Only square matrices have inverse and the following method will throw exception if the matrix is not square.", "Heuristic": ["H1"]}, {"nl": "Getter for the exit code (defaults to blank).", "Heuristic": []}, {"nl": "The default implementation does not consume anything.", "Heuristic": []}, {"nl": "Gets the hover attribute of the StandardAttributeResolver object", "Heuristic": []}, {"nl": "Get the List of AttributeStatementProviders.", "Heuristic": []}, {"nl": "Unloads the sounds from memory.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns the project model for the specified user.", "Heuristic": []}, {"nl": "Get the color name of the color that is closest to the given hex color value (as a 6-digit hex String).", "Heuristic": []}, {"nl": "Gets the data source as a pseudo file name (faux-file). Adding a suffix matching the source object type ensures that the appropriate language parser is used.", "Heuristic": []}, {"nl": "Default TCP port on which to connect to nodes.", "Heuristic": []}, {"nl": "Returns URLSet keys for the terms that have been indexed. Should be used for development and testing, not production.", "Heuristic": []}, {"nl": "Clears all marks about blocks to move in/out in this view.", "Heuristic": []}, {"nl": "Returns a subject capturing the login name  the end user used to login to the resource server when authorizing a given client request", "Heuristic": ["H1"]}, {"nl": "Retrieve a length from the format string. Either for a repeat count or a string length. Return one if no explicit repeat count. \\param advance whether to move the stream position.", "Heuristic": ["H1"]}, {"nl": "Not activated users should be automatically deleted after 3 days.   This is scheduled to get fired everyday, at 01:00 (am). ", "Heuristic": ["H1"]}, {"nl": "Gets the error msg.", "Heuristic": []}, {"nl": "Determine if the set contains a particular symbol.", "Heuristic": []}, {"nl": "Tries to merge all direct Text and CDATA children of the given Node and concatenates their value.", "Heuristic": ["H1"]}, {"nl": "Get the MarshalRegistry stored in the context, and if necessary create a new one.", "Heuristic": []}, {"nl": "Return a list containing  {@code o1} and {@code o2}.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the parametersMetaData property.", "Heuristic": ["H1"]}, {"nl": "Return our details tab(s).  Proof of concept only.", "Heuristic": []}, {"nl": "Write character bytes - note that we cheat, we just convert them directly to a string for output with no regard to the encoding.", "Heuristic": []}, {"nl": "The same as above, but specifically for Google Product Search.", "Heuristic": []}, {"nl": "Gets the checks if is active.", "Heuristic": ["H1"]}, {"nl": "Factory for  {@link DataServer}.", "Heuristic": ["H1"]}, {"nl": "Returns the first key that has private bytes", "Heuristic": []}, {"nl": "Returns a new array that contains the concatenated contents of two arrays.", "Heuristic": []}, {"nl": "Destroy the instrumentation service.", "Heuristic": []}, {"nl": "Required.", "Heuristic": ["H2"]}, {"nl": "Set the maximum key size to use when generating a symmetric key to sign an issued token. The requestor can specify a KeySize value to use. The default is 512 bits.", "Heuristic": []}, {"nl": "This call sets TLSParametersMap for a JettyHTTPServerEngine", "Heuristic": []}, {"nl": "Returns the Constant value of the specified field.", "Heuristic": []}, {"nl": "Returns the 4 byte header for BIP32 (HD) wallet - public key part.", "Heuristic": []}, {"nl": "Returns the number of satoshis of this monetary value.", "Heuristic": ["H1"]}, {"nl": "Set an action view for this menu item. An action view will be displayed in place of an automatically generated menu item element in the UI when this item is shown as an action within a parent.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Test method for deletePersistentNotification(ServerSession serverSession, ServerMessage serverMessage) Verifies that  {@code IllegalArgumentException} is thrown when serverSession is null.", "Heuristic": ["H1"]}, {"nl": "Add an alias/password pair to the callback mechanism.", "Heuristic": []}, {"nl": "Set seconds of minute.", "Heuristic": []}, {"nl": "Generate an authentication request.", "Heuristic": []}, {"nl": "Sets the  {@code ServiceID} for this datagram packet.", "Heuristic": ["H1"]}, {"nl": "Returns the size in bytes of the file that is used to store the chain with the current parameters.", "Heuristic": []}, {"nl": "Gets the payload of the node.", "Heuristic": []}, {"nl": "Filter the child view at index and remove it if appropriate.", "Heuristic": []}, {"nl": "Returns added date in \"yyyy-MM-dd HH:mm:ss\" format", "Heuristic": ["H1"]}, {"nl": "Gets the children nodes of the node.", "Heuristic": []}, {"nl": "Returns the first item currently in the RecyclerView that is not obscured by a header.", "Heuristic": []}, {"nl": "Sets the reg test result details lst.", "Heuristic": ["H1"]}, {"nl": "Gets the test id.", "Heuristic": ["H1"]}, {"nl": "Specifies that the current interceptor needs to be added to the  interceptor chain before the specified interceptor.", "Heuristic": ["H1"]}, {"nl": "Test method for setTime() and toDate() round-trip.", "Heuristic": []}, {"nl": "Tests if this hashtable maps no keys to values.", "Heuristic": ["H1"]}, {"nl": "Sets the feed config id.", "Heuristic": ["H1"]}, {"nl": "Sets up the buffer before a test runs.", "Heuristic": []}, {"nl": "Compression type for images to be generated from this writer. See {@link javax.imageio.ImageWriteParam#setCompressionType(String)} for a description of what this meansand valid range of values.", "Heuristic": ["H1"]}, {"nl": "Returns the unique ID of this call to the Facebook application.", "Heuristic": []}, {"nl": "Returns  {@code true} if for each range in {@code other} there exists a member range in thisrange set which  {@linkplain Range#encloses encloses} it. Returns {@code true} if {@code other}is empty. This is equivalent to checking if this range set  {@link #encloses} each range in {@code other}.", "Heuristic": ["H1"]}, {"nl": "Set the wsse11 TokenType attribute", "Heuristic": []}, {"nl": "Add variables to the context. ", "Heuristic": []}, {"nl": "Returns map containing the given entries.", "Heuristic": []}, {"nl": "Determines if the buffer contains data.", "Heuristic": []}, {"nl": "Writes a setString record to the log. This log record contains the SETSTRING operator, followed by the transaction id, the filename, number, and offset of the modified block, and the previous string value at that offset.", "Heuristic": ["H1"]}, {"nl": "This class encapsulates the access to the DataFlowNode class. Is this worthwhile? TODO I think it's too confusing to have the DataFlowNode constructor add the created instance to the List. I think it'd be clearer if we did that more \"procedurally\", i.e., create the object, then add it to the list.", "Heuristic": ["H1"]}, {"nl": "Sets a provider of  {@link UIImplementation}. Uses default provider if null is passed.", "Heuristic": ["H1"]}, {"nl": "Gets the  {@link User} from the {@link ThreadLocal} variable.", "Heuristic": ["H1"]}, {"nl": "add an recipient to the required recipients list", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link FileUtils#delete(String)} method to throw an exception when trying to delete anon-existent file.", "Heuristic": ["H1"]}, {"nl": "stop eclipse from whinging", "Heuristic": ["H1"]}, {"nl": "Checks whether the class declares an operation by the name given which is covered by the signature mask.", "Heuristic": []}, {"nl": "Updates/writes all specified user objects.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "has method.", "Heuristic": ["H1", "H2"]}, {"nl": "logs the message and Throwable prepended by the filter name (copy of  {@link GenericServlet#log(String,Throwable)})", "Heuristic": ["H1"]}, {"nl": "Writes an empty response for calls that are purely one-way RPC.", "Heuristic": []}, {"nl": "Sets the Current Value.", "Heuristic": []}, {"nl": "Accessor for the JSON string.", "Heuristic": ["H1"]}, {"nl": "Does this NodeTest pass using the specified NodeTester instance?", "Heuristic": []}, {"nl": "Gets a context with the specified master address from the cache if it's created before. Otherwise creates a new one and puts it in the cache.", "Heuristic": ["H1"]}, {"nl": "Convenience method for initializing a writer for the JPEG image format.", "Heuristic": []}, {"nl": "Creates a Redirect Link from Portal to OMA. Incoming links look like this: http://mutationassessor.org/?cm=var&var=17,7517830,G,C&fts=all Outgoing links look like this: omaRedirect.do?path=/&cm=var&var=17,7517830,G,C&fts=all", "Heuristic": ["H1"]}, {"nl": "This call sets the ThreadingParameters for a JettyHTTPServerEngine", "Heuristic": []}, {"nl": "Add a byte field to the stream. \\param value The byte value to be added.", "Heuristic": ["H1"]}, {"nl": "Registers a new generator. If a generator with the same language is already registered, it's replaced by the new one.", "Heuristic": []}, {"nl": "Convenience method that sets a variable in the EL evaluator context. ", "Heuristic": []}, {"nl": "The index of this output in the transaction which holds it", "Heuristic": []}, {"nl": "Fire a bullet.", "Heuristic": []}, {"nl": "Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData.OfferDisplay }", "Heuristic": ["H1"]}, {"nl": "Get the number of milliseconds for the acknowledgment interval.", "Heuristic": []}, {"nl": "Check if two objects are equal.", "Heuristic": []}, {"nl": "Returns an iterator over this group of headers.", "Heuristic": []}, {"nl": "Closes all client connections currently connected gracefully. Note that this does not settle the actual payment channels (and broadcast payment transactions), which must be done using the  {@link StoredPaymentChannelServerStates} which manages the states for the associatedwallet.", "Heuristic": ["H1"]}, {"nl": "Calculates the extent to which selecting on the predicate  reduces the number of records output by a query. For example if the reduction factor is 2, then the predicate cuts the size of the output in half.", "Heuristic": ["H1"]}, {"nl": "This is the standard way to report debugging information in the compiler.  It reports a message of the specified level (which controls the presentation of the message. To test whether such message should be reported, use \"should_report\". NOTE: This is a change of spec from earlier versions of Report. NOTE: This version takes an explicit Position, so that position info gets properly associated with the ErrorInfo that gets created by enqueue().", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link Access }", "Heuristic": ["H1"]}, {"nl": "Sets the failed attribute name.", "Heuristic": []}, {"nl": "Returns list of groups for a user.", "Heuristic": []}, {"nl": "flush outstanding data (and make sure it is acknowledged)", "Heuristic": ["H1"]}, {"nl": "Adds textual information to be displayed. Note that none of the information added after {@link #apply()} has been called, will be displayed.", "Heuristic": []}, {"nl": "Landing Land the drone", "Heuristic": []}, {"nl": "Optional. This optional parameter specifies custom metadata for your group configuration. You can use the metadata parameter for customer automation, but it does not change any functionality in Auto Scale. There currently is no limitation on depth.", "Heuristic": []}, {"nl": "This check if the status code is 2XX, check value between 200 and 300", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMCParser#getDirectionOfVariation()}.", "Heuristic": ["H1"]}, {"nl": "Escapes JavaScript characters for the given string. Also strips all occurrences of the word \"javascript\" from the string.", "Heuristic": ["H1"]}, {"nl": "Flips the given bit.", "Heuristic": []}, {"nl": "Get the wsse ValueType attribute", "Heuristic": ["H1"]}, {"nl": "Not required", "Heuristic": ["H2"]}, {"nl": "Gets the resources.", "Heuristic": []}, {"nl": "Tests for the existence of a setting.", "Heuristic": []}, {"nl": "A wrapper for  {@link #valueOf(String)}. It returns null instead of throwing an exception.", "Heuristic": ["H1"]}, {"nl": "Template delegator for testNode() method. OVERRIDE to add custom logic", "Heuristic": ["H1"]}, {"nl": "get average elapsed.", "Heuristic": ["H1"]}, {"nl": "Sets result as OK.  Always for match, so not touching errorLevelFolder", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns the channel.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMBParser#setBearing(double)} .", "Heuristic": ["H1"]}, {"nl": "Gets the path of a file with the given id.", "Heuristic": ["H1"]}, {"nl": "Hash code of the byte array as calculated by  {@link Arrays#hashCode()}. Note the difference between a SHA256 secure bytes and the type of quick/dirty bytes used by the Java hashCode method which is designed for use in bytes tables.", "Heuristic": ["H1"]}, {"nl": "Get the tag of the constant.", "Heuristic": []}, {"nl": "The block header this object wraps. The referenced block object must not have any transactions in it.", "Heuristic": []}, {"nl": "Get the advanced configuration set. By adding elements to this collection you can override the settings specified in the config.js file.", "Heuristic": []}, {"nl": "Get the addition difference.", "Heuristic": []}, {"nl": "Accessor for the language version.", "Heuristic": ["H1"]}, {"nl": "Transfer an element from the real to the virtual stack.  This assumes  that the virtual stack is currently empty.", "Heuristic": ["H1"]}, {"nl": "Verify that the listener completes in a reasonable amount of time, and Asserts that the future returns the expected data.", "Heuristic": []}, {"nl": "Sets the internal ID associated with this record", "Heuristic": []}, {"nl": "Adds  {@code delta} to the value currently associated with {@code key}, and returns the new value.", "Heuristic": ["H1"]}, {"nl": "Main method for SshExample", "Heuristic": []}, {"nl": "Remove plugin from available list", "Heuristic": []}, {"nl": "get the next selector in the chain, for matching against elements along the appropriate axis", "Heuristic": ["H1"]}, {"nl": "Returns list of groups for a user.", "Heuristic": []}, {"nl": "Binds this socket to the specified local serviceID.", "Heuristic": []}, {"nl": "Test of getResponseStringCsv method, of class LogEntryRequest.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the productName property.", "Heuristic": []}, {"nl": "Builds a TextButton according to the specified parameters, encapsulating its initialization.", "Heuristic": []}, {"nl": "Returns a hash of the concatenated checkpoint data.", "Heuristic": []}, {"nl": "Gets the password.", "Heuristic": []}, {"nl": "Gets the value of the name property.", "Heuristic": []}, {"nl": "Return ID", "Heuristic": ["H2"]}, {"nl": "Add a record field to the stream. \\param value The record value to be added.", "Heuristic": ["H1"]}, {"nl": "Stop listening for shakes.", "Heuristic": []}, {"nl": "Set the CallbackHandler object.", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.parser.HDTParser#isTrue()}.", "Heuristic": ["H1"]}, {"nl": "Finds TextNodes in a DOM tree and counts their words.", "Heuristic": []}, {"nl": "Gets the value of the productName property.", "Heuristic": []}, {"nl": "Gets the value of the icon property.  This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a set method for the icon property.  For example, to add a new item, do as follows:  getIcon().add(newItem);   Objects of the following type(s) are allowed in the list  {@link IconType }", "Heuristic": ["H1"]}, {"nl": "Forbid all mentioned visibilities.", "Heuristic": ["H1"]}, {"nl": "Method ask user for an input string", "Heuristic": []}, {"nl": "Gets the supported Options of the command.", "Heuristic": []}, {"nl": "Adds view to specified cache. Creates a cache list if it is null.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.VHWParser#setHeading(double)}.", "Heuristic": ["H1"]}, {"nl": "Returns for binary constraints the other variable from the scope.", "Heuristic": []}, {"nl": "Sets up the buffer before a test runs.", "Heuristic": []}, {"nl": "Gets the occupancy.", "Heuristic": []}, {"nl": "Runs the action successively with all available optimization levels", "Heuristic": []}, {"nl": "Creates a simple file with  {@code len} bytes.", "Heuristic": ["H1"]}, {"nl": "Returns a string representation of the enumeration value.", "Heuristic": []}, {"nl": "Sets the document to render, lays it out, and renders it.", "Heuristic": []}, {"nl": "Encodes the headline of this ToDoItem in an XML safe way and returns the new String. The String can be regained by running the returned String through {@link TodoParser#decode(String)}.", "Heuristic": ["H1"]}, {"nl": "Returns the  {@link AuthScheme authentication scheme}.", "Heuristic": ["H1"]}, {"nl": "This methods return the account number summary for all existing user that registered in the bank.", "Heuristic": ["H1"]}, {"nl": "Retrieves the publicKey", "Heuristic": []}, {"nl": "Returns the lowest value in the dataset. The count must be non-zero. Non-finite values If the dataset contains  {@link Double#NaN} then the result is {@link Double#NaN}. If it contains  {@link Double#NEGATIVE_INFINITY} and not {@link Double#NaN} then the result is{@link Double#NEGATIVE_INFINITY}. If it contains  {@link Double#POSITIVE_INFINITY} and finitevalues only then the result is the lowest finite value. If it contains {@link Double#POSITIVE_INFINITY} only then the result is {@link Double#POSITIVE_INFINITY}.", "Heuristic": ["H1"]}, {"nl": "Test of getDeviceBlock method, of class Device.", "Heuristic": []}, {"nl": "Lower Altitude lowering the altitude a little bit", "Heuristic": []}, {"nl": "Whether the callback is authorized or not", "Heuristic": []}, {"nl": "Clear the buffer.", "Heuristic": []}, {"nl": "Appends a log record to the file. The record contains an arbitrary array of strings and integers. The method also writes an integer to the end of each log record whose value is the offset of the corresponding integer for the previous log record. These integers allow log records to be read in reverse order.", "Heuristic": []}, {"nl": "The key used to sign  {@link com.google.bitcoin.core.AlertMessage}s. You can use  {@link com.google.bitcoin.core.ECKey#verify(byte[],byte[],byte[])} to verifysignatures using it.", "Heuristic": ["H1"]}, {"nl": "Get full MIME type for the specified URI", "Heuristic": []}, {"nl": "Short to little-endian bytes: writes x to given stream.", "Heuristic": []}, {"nl": " Multiplies a householder reflection against a vector:  y = (I + &gamma; u uT)x   The Householder reflection is used in some implementations of QR decomposition. ", "Heuristic": ["H1"]}, {"nl": "Gets the value of the url property.", "Heuristic": ["H1"]}, {"nl": "tar.xz the contents of the tree at the (optionally) specified revision and the (optionally) specified basepath to the supplied outputstream.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link RPCBlockReadResponse#getPayloadDataBuffer()} method.", "Heuristic": ["H1"]}, {"nl": "Called when the activity receives a new intent.", "Heuristic": []}, {"nl": "Creates instance of builder for specific language.", "Heuristic": []}, {"nl": "Add the given node and its subnodes to the set of nodes. If clazz is not null, only nodes of the given class are put in the set of nodes.", "Heuristic": ["H1"]}, {"nl": "Whether to use the MotionEvent as finger touch", "Heuristic": []}, {"nl": "HTTPS is the default transport for OAuth 2.0 services. By default this method will issue a warning for open  endpoints", "Heuristic": ["H1"]}, {"nl": "Clear the hashmap.", "Heuristic": ["H1"]}, {"nl": "Tests that the  {@link PrefixList#PrefixList(List)} constructor with an empty string constructsitems correctly.", "Heuristic": ["H1"]}, {"nl": "Returns an allocated entry to this pool.", "Heuristic": []}, {"nl": "Stop XMPP listener & disconnect from all XMPP Servers", "Heuristic": []}, {"nl": "get string value.", "Heuristic": ["H1"]}, {"nl": "Process the decoded PCM bytes.", "Heuristic": []}, {"nl": "Get identifier of the message", "Heuristic": []}, {"nl": "Gets the minimum encoded size of the value stored in this VarInt", "Heuristic": []}, {"nl": "display @param array 's content to console", "Heuristic": ["H1"]}, {"nl": "Gets the user name.", "Heuristic": ["H1"]}, {"nl": "Whether the serializer will produce cached mode Messages", "Heuristic": ["H1"]}, {"nl": "Sets the run status.", "Heuristic": []}, {"nl": "Spin 90 Right Spin the drone 90 degrees to the right", "Heuristic": []}, {"nl": "Create a new map of all client ids set to zero", "Heuristic": ["H1"]}, {"nl": "Creates a deep copy of this XPathContext.", "Heuristic": []}, {"nl": "Hashes a key in byte array to a bucket index in non-negative integer value.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.SentenceFactory#hasParser(java.lang.String)}.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": " The proxiesHeader directive specifies a header into which mod_remoteip will collect a list of all of the intermediate client IP addresses trusted to resolve the actual remote IP. Note that intermediate RemoteIPTrustedProxy addresses are recorded in this header, while any intermediate RemoteIPInternalProxy addresses are discarded.   Name of the http header that holds the list of trusted proxies that has been traversed by the http request.   The value of this header can be comma delimited.   Default value : X-Forwarded-By ", "Heuristic": ["H1"]}, {"nl": "Stringifies the XPath of the current node.", "Heuristic": ["H1"]}, {"nl": "Removes all of the mappings from this map. The map will be empty after this call returns. This method is not atomic: the map may not be empty after returning if there were concurrent writes.", "Heuristic": ["H1"]}, {"nl": "Sets the run id.", "Heuristic": ["H1"]}, {"nl": "Is the dot at the end of the production?", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Tests that building a  {@link CompleteFileOptions} with the defaults works.", "Heuristic": ["H1"]}, {"nl": "Utility method for accessing Permission instances by their  permission id.  This is used internally by Hibernate to map database  values to instances of this class.  Normal application code should  never call this method.", "Heuristic": ["H1"]}, {"nl": "Cancel all operations.", "Heuristic": []}, {"nl": "Translate a set of strings to a JSON array, empty array returned as null", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.VHWParser#getSpeedKmh()}.", "Heuristic": ["H1"]}, {"nl": "Validate the message. Throws an Exception if the message is invalid.", "Heuristic": []}, {"nl": "Returns true if the specified field is in either of the underlying scans.", "Heuristic": []}, {"nl": "Resolves the given host name to an array of corresponding IP addresses, based on the configured name service on the system.", "Heuristic": []}, {"nl": "Registers the Users Session as Authenticated.", "Heuristic": []}, {"nl": "Gets the value of the handlerClass property.", "Heuristic": []}, {"nl": "save old revision information of Graph", "Heuristic": ["H1"]}, {"nl": "Number of columns (terminals) in every row.", "Heuristic": []}, {"nl": "Retrieve the control spring so you can manipulate it to drive the positions of the other springs.", "Heuristic": ["H1"]}, {"nl": "The file before it is compressed", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Get information about the language extension being compiled.", "Heuristic": []}, {"nl": "Tests the  {@link WebUtils#convertMsToClockTime(long)} method with one day, four hours,ten minutes and forty-five seconds.", "Heuristic": ["H1"]}, {"nl": "setUp", "Heuristic": ["H1", "H2"]}, {"nl": "Sets a list of opaque permissions/scopes", "Heuristic": []}, {"nl": "Get all the ingredients.", "Heuristic": []}, {"nl": "Return the trimmed string from the column, or an empty string if -1. Require the column to exist before the end of the data line. This can be used instead of getPartString() if NA may be a meaningful value and the file is expected to have been validated.", "Heuristic": []}, {"nl": "Test loading a regular, non-admin user, ensuring that the returned UserDetails object has ROLE_USER but not ROLE_ADMIN.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Get the SecurityToken", "Heuristic": []}, {"nl": "Gets the status of the response. Make sure the message is ready before calling this method.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Get Application management service", "Heuristic": []}, {"nl": "Sets the receive timeout to the given number of milliseconds, automatically killing the connection if no messages are received for this long A timeout of 0 is interpreted as no timeout. The default is for timeoutEnabled to be true but timeoutMillis to be set to 0 (ie disabled). This call will reset the current progress towards the timeout.", "Heuristic": ["H1"]}, {"nl": "Recurisvely lists folders in the Box account. Primarily used for debugging.", "Heuristic": ["H1"]}, {"nl": "Closes the connection to the server, triggering the  {@link StreamParser#connectionClosed()}event on the network-handling thread where all callbacks occur.", "Heuristic": ["H1"]}, {"nl": "To get the maximum amount of memory used until now", "Heuristic": []}, {"nl": "assign encoder to muxer", "Heuristic": ["H1"]}, {"nl": "Returns where the scroll will end. Valid only for \"fling\" scrolls.", "Heuristic": []}, {"nl": "Assert that a Map has entries; that is, it must not be  {@code null}and must have at least one entry. Assert.notEmpty(map);", "Heuristic": ["H1"]}, {"nl": "Test method for {@link NotificationController#registerUserSession(ServerSession,ServerMessage)}. Verifies that method throws  {@code NullPointerException} when ServerSession is null.", "Heuristic": ["H1"]}, {"nl": "Undo the action done after the given step. For example, when the given step is 0, nothing was done, so nothing can be undone; and when the given step is 1, undo the first action.  Undo allows users to work part way through fixing a problem, see the partial result, and explore a different alternative.", "Heuristic": []}, {"nl": "Compares this tag to the specified tag. The tag comparison is based on a comparison of key and value in that order.", "Heuristic": []}, {"nl": "Estimates the number of block accesses required to find all index records having a particular search key.", "Heuristic": []}, {"nl": "Set a default spacing value. This is used as a fallback when no spacing has been set for a particular direction.", "Heuristic": []}, {"nl": "Scans list of base packages for all resources with the given extension.", "Heuristic": []}, {"nl": "Adds knowledge about a single attribute of the current node.", "Heuristic": []}, {"nl": "Gets the list of the permissions assigned to the current access token", "Heuristic": []}, {"nl": "Encode the byte data to base 64 writing it to the given output stream.", "Heuristic": []}, {"nl": "Obtains the maximum number of entries allowed for this pool.", "Heuristic": []}, {"nl": "Gets the privacy for the group that will be created", "Heuristic": []}, {"nl": "Determine the content type of the given message. This method will try the registered rules in turn until the first rule matches.", "Heuristic": []}, {"nl": "Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData.FulfillmentPartner }", "Heuristic": ["H1"]}, {"nl": "Sets the items.", "Heuristic": []}, {"nl": "Checks if a given payload is in a root of the DAG.", "Heuristic": []}, {"nl": "Send an INFO log message.", "Heuristic": []}, {"nl": "Return the len of a file.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.SentenceFactory#createParser(TalkerId,SentenceId) .}", "Heuristic": ["H1"]}, {"nl": "Throws an exception if the current token is not the specified keyword.  Otherwise, moves to the next token.", "Heuristic": []}, {"nl": "Gets the Global Chromosomal Stop.", "Heuristic": []}, {"nl": "Returns the starting count number for the count down animation.", "Heuristic": ["H1"]}, {"nl": "Required.", "Heuristic": ["H2"]}, {"nl": "Estimates the number of output records in the join. The formula is:  R(indexjoin(p1,p2,idx)) = R(p1)R(idx) ", "Heuristic": ["H1"]}, {"nl": "Returns a list of space-separated strings from the specified key.", "Heuristic": []}, {"nl": "Clears the list of collected events.", "Heuristic": []}, {"nl": "Creates a new ThreadFactory which prefixes each thread with the given name.", "Heuristic": []}, {"nl": "Sets up the constructors before a test run.", "Heuristic": []}, {"nl": "Set the hour of day.", "Heuristic": []}, {"nl": "Factory for  {@link Evictor}.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns the time (in seconds) when this token was issued at", "Heuristic": []}, {"nl": "Returns true if this assignment assigns values to every variable of vars.", "Heuristic": []}, {"nl": "Turns the iterable into a list.", "Heuristic": []}, {"nl": "Implementation of  {@code PortalUserDAO}", "Heuristic": ["H1"]}, {"nl": "Returns the  {@link ProtocolVersion} from the origin {@link HttpResponse}.", "Heuristic": ["H1"]}, {"nl": " Returns an  {@link EigenDecomposition} that has been optimized for the specified matrix size.If the input matrix is symmetric within tolerance then the symmetric algorithm will be used, otherwise a general purpose eigenvalue decomposition is used. ", "Heuristic": ["H1"]}, {"nl": "Registers a listener that is notified of each comparison.", "Heuristic": []}, {"nl": "Returns the int identifier of the type. Note: This is only used for getting the int representation of the type for {@link alluxio.worker.DataServerMessage}, since that class needs to manually encode all messages.  {@link alluxio.worker.DataServerMessage} and this method should no longer be neededwhen the client is converted to use Netty.", "Heuristic": ["H1"]}, {"nl": "The cofactor of a matrix", "Heuristic": []}, {"nl": "Configure if the client should cache tokens locally or not", "Heuristic": []}, {"nl": "Handy method to find a certain pattern into a file. While this method lives in the FileUtils, it was designed with with unit test in mind (to check result redirected into a file)", "Heuristic": ["H1"]}, {"nl": "Return the  {@link ServletConfig} associated with this instance.", "Heuristic": ["H1"]}, {"nl": "Returns the schema of the sorted table, which is the same as in the underlying query.", "Heuristic": []}, {"nl": "Test of setDuration method, of class LogEntryRequest.", "Heuristic": []}, {"nl": "Get whether a KeyValue is used to refer to a a certificate used to sign an issued token.  The default is false.", "Heuristic": ["H1"]}, {"nl": "Make a request to Facebook's old (pre-graph) API with the given parameters. One of the parameter keys must be \"method\" and its value should be a valid REST server API method.  See http://developers.facebook.com/docs/reference/rest/  Note that this method is asynchronous and the callback will be invoked in a background thread; operations that affect the UI will need to be posted to the UI thread or an appropriate handler.  Example:  Bundle parameters = new Bundle(); parameters.putString(\"method\", \"auth.expireSession\", new Listener()); String response = request(parameters);   This method is deprecated.  See  {@link Facebook} and {@link com.facebook.Request} for more info.", "Heuristic": ["H1"]}, {"nl": "Moves the scan to the next record. The method moves to the next index record, if possible. Otherwise, it moves to the next LHS record and the first index record. If there are no more LHS records, the method returns false.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets a constructor as a string which then can be passed to the execute().", "Heuristic": ["H1"]}, {"nl": "Returns the population covariance of the values. The count must be non-zero. This is guaranteed to return zero if the dataset contains a single pair of finite values. It is not guaranteed to return zero when the dataset consists of the same pair of values multiple times, due to numerical errors. Non-finite values If the dataset contains any non-finite values ( {@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or  {@link Double#NaN}) then the result is  {@link Double#NaN}.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.ZDAParser#getLocalZoneMinutes()}.", "Heuristic": ["H1"]}, {"nl": "Sets the start time.", "Heuristic": []}, {"nl": "Returns true if the specified field is in the schema", "Heuristic": []}, {"nl": "Compares to a specific object.", "Heuristic": []}, {"nl": "Returns the number of eigenvalues/eigenvectors.  This is the matrix's dimension.", "Heuristic": []}, {"nl": "Create an instance of  {@link CheckServiceAccessRequest }", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link RPCBlockReadResponse#validate()} method.", "Heuristic": ["H1"]}, {"nl": "Getter for the name of the profile.", "Heuristic": []}, {"nl": "Sets the feed id.", "Heuristic": ["H1"]}, {"nl": "Invoked to request the service to stop. By default this method does nothing.", "Heuristic": ["H1"]}, {"nl": "Returns gammas from the householder operations for the U matrix.", "Heuristic": []}, {"nl": "Retrieve the physical transformed bounds (geom + effect + clip + transform) of a Node.", "Heuristic": []}, {"nl": "Sets the value of the mapType property.", "Heuristic": []}, {"nl": "Check whether the value is greater than or equals 0.", "Heuristic": []}, {"nl": "Tests the  {@link CustomAuthenticationProvider#CustomAuthenticationProvider(String)}constructor to throw an exception when the class cannot be found.", "Heuristic": ["H1"]}, {"nl": "Tests a null return.", "Heuristic": []}, {"nl": "Returns an  {@link Escaper} instance that escapes strings so they can be safely included inURL path segments. The returned escaper escapes all non-ASCII characters, even though many of these are accepted in modern URLs. (If the escaper were to leave these characters unescaped, they would be escaped by the consumer at parse time, anyway.) Additionally, the escaper escapes the slash character (\"/\"). While slashes are acceptable in URL paths, they are considered by the specification to be separators between \"path segments.\" This implies that, if you wish for your path to contain slashes, you must escape each segment separately and then join them. When escaping a String, the following rules apply:  The alphanumeric characters \"a\" through \"z\", \"A\" through \"Z\" and \"0\" through \"9\" remain the same. The unreserved characters \".\", \"-\", \"~\", and \"_\" remain the same. The general delimiters \"@\" and \":\" remain the same. The subdelimiters \"!\", \"$\", \"&amp;\", \"'\", \"(\", \")\", \"\", \"+\", \",\", \";\", and \"=\" remain the same. The space character \" \" is converted into %20. All other characters are converted into one or more bytes using UTF-8 encoding and each byte is then represented by the 3-character string \"%XY\", where \"XY\" is the two-digit, uppercase, hexadecimal representation of the byte value.  Note: Unlike other escapers, URL escapers produce uppercase hexadecimal sequences.", "Heuristic": ["H1"]}, {"nl": "Get a boolean form the internal JSONObject", "Heuristic": []}, {"nl": "Gets the seq no.", "Heuristic": []}, {"nl": "Write 24-bit of the given value in big-endian order to the buffer", "Heuristic": []}, {"nl": "Frees Database Connection.", "Heuristic": []}, {"nl": "Add an uplink to this node.", "Heuristic": []}, {"nl": "Create a new item view that can be re-bound to other item data later.", "Heuristic": []}, {"nl": "add a service with a given gateway", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link StorageTierView#getDirViews()} method.", "Heuristic": ["H1"]}, {"nl": "Check if this itemset appears in a given period", "Heuristic": ["H1"]}, {"nl": "Returns true if this registration represents the result data sent by a pulling Gitblit instance.", "Heuristic": ["H1"]}, {"nl": "Creates a scriptPubKey that encodes payment to the given raw public key.", "Heuristic": []}, {"nl": "Creates the next JSON message to send to remote JS executor, with request ID pre-filled in.", "Heuristic": []}, {"nl": "Atomically sets the element at position  {@code i} to the givenupdated value if the current value is bitwise equal to the expected value.", "Heuristic": ["H1"]}, {"nl": "Adds an array of  {@link Cookie HTTP cookies}. Cookies are added individually and in the given array order. If any of the given cookies has already expired it will not be added, but existing values will still be removed.", "Heuristic": ["H1"]}, {"nl": "Returns the X coordinate of this Point2D in double precision.", "Heuristic": []}, {"nl": "Returns the number of times  {@link #get} returned null or required a newvalue to be created.", "Heuristic": ["H1"]}, {"nl": "Sets the user name.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "initialise a DES cipher.", "Heuristic": ["H1"]}, {"nl": "Converts a list of objects to a string.", "Heuristic": []}, {"nl": "Returns the current number of entries in the map.", "Heuristic": []}, {"nl": "Get the array of items stored in the original Q-matrix", "Heuristic": []}, {"nl": "{@inheritDoc}Release the underlying buffer of previous/current read response.", "Heuristic": []}, {"nl": "Returns whether the EntityAIBase should begin execution.", "Heuristic": []}, {"nl": "Sets the value of the current element.", "Heuristic": []}, {"nl": "Perform a shift in a random direction that is of the same magnitude as the elements in the matrix.", "Heuristic": []}, {"nl": "Does the set contain a particular item?", "Heuristic": []}, {"nl": "Factory for  {@link RemoteBlockWriter}.", "Heuristic": ["H1"]}, {"nl": "Returns true if two doubles are considered equal. Tests if the absolute difference between the two doubles has a difference less then a given double (epsilon). Determining the given epsilon is highly dependant on the precision of the doubles that are being compared.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the chain property.", "Heuristic": []}, {"nl": "Resets the current progress towards timeout to 0.", "Heuristic": []}, {"nl": "Helper method to add this callback to all the queues.", "Heuristic": []}, {"nl": "Call this from onCreate() so that any saved startActivityForResult parameters will be restored.", "Heuristic": []}, {"nl": "Compatible with the equals implementation.", "Heuristic": ["H1"]}, {"nl": "Determines whether a specified (US-ASCII) character is an HTTP whitespace character (Space or Horizontal tab)", "Heuristic": []}, {"nl": "get instance of EaseUI", "Heuristic": ["H1"]}, {"nl": "Frees a Hessian 2.0 serializer", "Heuristic": ["H1"]}, {"nl": "Decrements by one the value currently associated with  {@code key}, and returns the old value.", "Heuristic": ["H1"]}, {"nl": "Gets the date at which the access token expires.", "Heuristic": []}, {"nl": "Makes sure that an  {@link IllegalArgumentException} is thrown when the message isnot a  {@link alluxio.network.protocol.RPCResponse}.", "Heuristic": ["H1"]}, {"nl": "Returns the path of the proposals folder. This method checks to see if Gitblit is running on a cloud service and may return an adjusted path.", "Heuristic": ["H1"]}, {"nl": "Gets the bus", "Heuristic": []}, {"nl": "Create an evaluator to be used in resolving configuration vars and frequency constant/functions (used in Stage 1)", "Heuristic": []}, {"nl": "Compute the user store which user to be provisioned", "Heuristic": []}, {"nl": "Computes the value of a metric for an operation.", "Heuristic": []}, {"nl": "Retuen the Phone Number of the Sender", "Heuristic": ["H1"]}, {"nl": "Adds a commit to the activity object as long as the commit is not a duplicate.", "Heuristic": []}, {"nl": "Check if this path contains the given step", "Heuristic": []}, {"nl": "Add an integer field to the stream. \\param value The integer value to be added.", "Heuristic": ["H1"]}, {"nl": "Return the count of missense mutations at this location.", "Heuristic": []}, {"nl": "Destroy the Purge Jobs Service.", "Heuristic": []}, {"nl": "Deserialize only an i32 field (addressed by recursively using field id) from a byte record.", "Heuristic": ["H1"]}, {"nl": "Decodes a byte array from Base64 format and ignores line separators, tabs and blanks. CR, LF, Tab and Space characters are ignored in the input data. This method is compatible with sun.misc.BASE64Decoder.decodeBuffer(String).", "Heuristic": []}, {"nl": "Set the index of the current task.", "Heuristic": []}, {"nl": "Check if the client requested a date-based conditional operation.", "Heuristic": []}, {"nl": "Specifies that the current interceptor needs to be added to the  interceptor chain after the specified collection of interceptors.", "Heuristic": ["H1"]}, {"nl": "Sets the to address of this message.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the intNoDefault property.", "Heuristic": []}, {"nl": "Set the target to run away from.", "Heuristic": []}, {"nl": "Tests  {@link BaseKeyValuePartitionWriter#close()} after{@link BaseKeyValuePartitionWriter#close()}, expecting a close is a no-op after the previous close.", "Heuristic": ["H1"]}, {"nl": "Creates a  {@link android.media.RemoteControlClient.MetadataEditor}.", "Heuristic": ["H1"]}, {"nl": "Free the memory associated with this map. This is idempotent and can be called multiple times.", "Heuristic": []}, {"nl": "Given a persons blogs updates the naive bayes map of word probabilities", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Debug log message.", "Heuristic": []}, {"nl": "Formats time elapsed since the given start time (in nanoseconds).", "Heuristic": []}, {"nl": "Prints request headers.", "Heuristic": []}, {"nl": "Loads and (optionally) processes the journal checkpoint file.", "Heuristic": []}, {"nl": "Return the time difference in milliseconds between the previous accepted GestureDetector event and the current GestureDetector event.", "Heuristic": []}, {"nl": "sends the given data asynchronously", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.GSAParser#setSatellitesIds(String[])}.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the initParam property.  This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a set method for the initParam property.  For example, to add a new item, do as follows:  getInitParam().add(newItem);   Objects of the following type(s) are allowed in the list  {@link ParamValueType }", "Heuristic": ["H1"]}, {"nl": "establishes a connection to the given server.  Starts the sender thread.", "Heuristic": ["H1"]}, {"nl": "The index of this output in the transaction which holds it.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns the dataval component of the entry", "Heuristic": ["H1"]}, {"nl": "Set the wsse ValueType attribute", "Heuristic": ["H1"]}, {"nl": "Read a HashMap from a Parcel, class of key and value are both String", "Heuristic": []}, {"nl": "Obtain a READ lock for a source.", "Heuristic": []}, {"nl": "Return an array of the data for tasks performed.", "Heuristic": []}, {"nl": "It adds an extra method to execute", "Heuristic": []}, {"nl": "A = H + lambdaI   where I is an identity matrix.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the singleNestedComplexNode property.", "Heuristic": []}, {"nl": "Returns a specific folder in the Box account", "Heuristic": []}, {"nl": "Converts this protocol version to a string.", "Heuristic": []}, {"nl": "Rollback transaction", "Heuristic": ["H2"]}, {"nl": "Given a path return the number of free KB", "Heuristic": []}, {"nl": "Sets the value of the templateId property.", "Heuristic": ["H1"]}, {"nl": "Returns the hostname of the origin server.", "Heuristic": []}, {"nl": "Sets the units of measurement.", "Heuristic": []}, {"nl": "If no profile has been configured, set by default the \"dev\" profile.", "Heuristic": []}, {"nl": "Sets the current maximum queue size for background revalidations.", "Heuristic": []}, {"nl": "Returns the uint32 encoded form of the path element, including the most significant bit.", "Heuristic": []}, {"nl": "Loads the specified URL", "Heuristic": []}, {"nl": "Add PropertyChangeListener.", "Heuristic": []}, {"nl": "remove a specific SpringConfig from the registry", "Heuristic": ["H1"]}, {"nl": "Get the xmi.id for the reference. This must be unique within the given XMI file (system ID), but is not guaranteed to be globally unique.", "Heuristic": ["H1"]}, {"nl": "Validate the incoming request for mandatory parameters.", "Heuristic": []}, {"nl": "Gets the value of the errorMessage property.", "Heuristic": []}, {"nl": "Returns the mime type of the data specified by the given URI string.", "Heuristic": []}, {"nl": "Sends an error message to the git client.", "Heuristic": []}, {"nl": "Checks to see if the journal checkpoint has not been updated. If it has been updated since the creation of this reader, this reader is no longer valid.", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.parser.RMCParser#getTime()}.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Whether the request is a force auth request or not", "Heuristic": []}, {"nl": "Load the necessary state to perform an eager precondition check.  This implementation does a NOP.  Subclasses should override this method and load the state needed to do an eager precondition check.  A trivial implementation is calling {link #loadState}.", "Heuristic": ["H1"]}, {"nl": "Inform the listener of a group end.", "Heuristic": []}, {"nl": "Backup all notebooks", "Heuristic": []}, {"nl": "Inserts the specified record into the index. The method first traverses the directory to find the appropriate leaf page; then it inserts the record into the leaf. If the insertion causes the leaf to split, then the method calls insert on the root, passing it the directory entry of the new leaf page. If the root node splits, then makeNewRoot is called.", "Heuristic": []}, {"nl": "Test method for {@link com.sqa.em.util.helper.IdentifyObject#display2DInfo(java.lang.Object[][])}.", "Heuristic": ["H1"]}, {"nl": "get float value.", "Heuristic": ["H1"]}, {"nl": "Return a map of all the short names of classes we maintain mappings for. The names are keyed by the classes themselves.", "Heuristic": []}, {"nl": "Sets the authenticated client ID. This is meant to be used by the authentication layer. Trying to set a different client ID after it's been set will result in an exception.", "Heuristic": []}, {"nl": "Set whether Entropy is returned to the client or not", "Heuristic": []}, {"nl": "Return the path originally requested by the client.", "Heuristic": []}, {"nl": "Internal engine method to return serial number for generated classes to ensure name uniqueness.", "Heuristic": []}, {"nl": "Sets the given bit to true.", "Heuristic": []}, {"nl": "Index of this symbol (terminal or non terminal) in the parse tables. Note: indexes are unique among terminals and unique among non terminals, however, a terminal may have the same index as a non-terminal, etc.", "Heuristic": ["H1"]}, {"nl": "Select a folder (open a folder chooser GUI)", "Heuristic": []}, {"nl": "Returns true.", "Heuristic": ["H2"]}, {"nl": "Obtains value of the  {@link CoreProtocolPNames#HTTP_CONTENT_CHARSET} parameter.If not set, defaults to ISO-8859-1.", "Heuristic": ["H1"]}, {"nl": "Resolves a URI reference against a base URI. Work-around for bug in java.net.URI ()", "Heuristic": []}, {"nl": "Process an RTF command parameter representing a Unicode character.", "Heuristic": []}, {"nl": "Test method for  {@link ActivityController#registerUserSession(ServerSession,ServerMessage)}. Verifies that method throws  {@code NullPointerException} when ServerSession is null.", "Heuristic": ["H1"]}, {"nl": "This method blocks until certain conditions hold true on the underlying SSH-2 channel.  This method returns as soon as one of the following happens:  at least of the specified conditions (see  {@link ChannelCondition}) holds true timeout > 0 and a timeout occured (TIMEOUT will be set in result conditions)  the underlying channel was closed (CLOSED will be set in result conditions)   In any case, the result value contains ALL current conditions, which may be more than the specified condition set (i.e., never use the \"==\" operator to test for conditions in the bitmask, see also comments in  {@link ChannelCondition}).   Note: do NOT call this method if you want to wait for STDOUT_DATA or STDERR_DATA and there are concurrent threads (e.g., StreamGobblers) that operate on either of the two InputStreams of this Session (otherwise this method may block, even though more data is available in the StreamGobblers).", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets the value of the address property.", "Heuristic": []}, {"nl": "Writes a SOAP 1.1 ref attribute.", "Heuristic": []}, {"nl": "Gets the value of the id property.", "Heuristic": ["H1"]}, {"nl": "Gets Full Content retrieved from the CGDS.", "Heuristic": []}, {"nl": "Sets the value of the config property.", "Heuristic": []}, {"nl": "All get methods", "Heuristic": []}, {"nl": "Formats the given date according to the specified pattern.  The pattern must conform to that used by the  {@link SimpleDateFormat simple dateformat} class.", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link BrowseOffersResponse.Return }", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Sets the type of the object for the LikeView", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Creates a scriptPubKey that sends to the given script hash. Read BIP 16 to learn more about this kind of script.", "Heuristic": ["H1"]}, {"nl": "Returns the access token validator class name", "Heuristic": []}, {"nl": "Tries to determine ResourceType from string and return  {@link #FILE} ifprovided string is invalid.", "Heuristic": ["H1"]}, {"nl": "Returns the transport appropriate for this connection.", "Heuristic": []}, {"nl": "Add a single value to the pending animation queue.", "Heuristic": []}, {"nl": "Gets the current panel of your stack.", "Heuristic": []}, {"nl": " Linear solver which uses QR pivot decomposition.  These solvers can handle singular systems and should never fail.  For singular systems, the solution might not be as accurate as a pseudo inverse that uses SVD.   For singular systems there are multiple correct solutions.  The optimal 2-norm solution is the solution vector with the minimal 2-norm and is unique.  If the optimal solution is not computed then the basic solution is returned.  See  {@link org.ejml.alg.dense.linsol.qr.BaseLinearSolverQrp}for details.  There is only a runtime difference for small matrices, 2-norm solution is slower.   Two different solvers are available.  Compute Q will compute the Q matrix once then use it multiple times. If the solution for a single vector is being found then this should be set to false.  If the pseudo inverse is being found or the solution matrix has more than one columns AND solve is being called numerous multiples times then this should be set to true. ", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Forgets about an entry from this pool. This method is used to indicate that an entry {@link #allocEntry allocated}from this pool has been lost and will not be returned.", "Heuristic": []}, {"nl": "Get the list of accepted c14n algorithms. A request can contain a wst:CanonicalizationAlgorithm uri to use for c14n in an issued token. The algorithm specified must be contained in this list. The default algorithms are C14N_EXCL_OMIT_COMMENTS.", "Heuristic": ["H1"]}, {"nl": "Gets the successor id.", "Heuristic": ["H1"]}, {"nl": "Gets the feed id.", "Heuristic": ["H1"]}, {"nl": "Get all of the registered notations.", "Heuristic": ["H1"]}, {"nl": "This method removes the Server Engine from the port map and stops it.", "Heuristic": []}, {"nl": "Create an instance of  {@link JAXBElement }{@code }}", "Heuristic": ["H1"]}, {"nl": "Creates a simple file with  {@code len} bytes.", "Heuristic": ["H1"]}, {"nl": "Retrieves a byte array field from the stream. \\param dest The byte array where the returned value will be stored. \\param off Offset into the destination buffer to start copying into. \\param len The length should be large enough to store the entire data item, if it is not, a truncated value will be returned.", "Heuristic": ["H1"]}, {"nl": "Checks for a card on the enemy hand.", "Heuristic": []}, {"nl": "Gets the receipt date type.", "Heuristic": []}, {"nl": "create new instance", "Heuristic": ["H1"]}, {"nl": "Waits the given  {@code int} attempts for the event queue of JavaFX Application Thread to becompleted, as well as any new events triggered on it.", "Heuristic": ["H1"]}, {"nl": "Get the lifetime of the Token to be returned in seconds", "Heuristic": []}, {"nl": "Request passive location updates. These updates will be triggered by locations received by 3rd party apps that have requested location updates. The miniumim time and distance for passive updates will typically be longer than for active updates. The trick is to balance the difference to minimize battery drain by maximize freshness.", "Heuristic": ["H1"]}, {"nl": "Check the internal JSONObject for a key", "Heuristic": []}, {"nl": "Draw this ball at its current position onto the canvas.", "Heuristic": []}, {"nl": "Initialize the Model subsystem with the MDR ModelImplementation.", "Heuristic": []}, {"nl": "A very simple bit permutation to mask a simple incrementer.", "Heuristic": ["H1"]}, {"nl": "See a parameter used for the transformation", "Heuristic": []}, {"nl": "Gets the created by.", "Heuristic": []}, {"nl": "Get this node's height, as defined in the style.", "Heuristic": []}, {"nl": "Sets the value of the items property.", "Heuristic": ["H1"]}, {"nl": "Returns true of the mob is currently building a structure. This is mainly used to prevent a mob from starting to mine or farm when it has not finished building a structure.", "Heuristic": []}, {"nl": "Returns the value of a negotiated property.", "Heuristic": []}, {"nl": "Return the first element in ' {@code candidates}' that is contained in ' {@code source}'. If no element in ' {@code candidates}' is present in ' {@code source}' returns  {@code null}. Iteration order is {@link Collection} implementation specific.", "Heuristic": ["H1"]}, {"nl": "If this chunk is an OP_N opcode returns the equivalent integer value.", "Heuristic": []}, {"nl": "Save a book.", "Heuristic": []}, {"nl": "Downloads the entire resource instead of part.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Starts the video stream", "Heuristic": []}, {"nl": "Sets the value of the id property.", "Heuristic": ["H1"]}, {"nl": "Set the activity content to an explicit view. This view is placed directly into the activity's view hierarchy. It can itself be a complex view hierarchy. When calling this method, the layout parameters of the specified view are ignored. Both the width and the height of the view are set by default to MATCH_PARENT. To use your own layout parameters, invoke setContentView(android.view.View, android.view.ViewGroup.LayoutParams) instead.", "Heuristic": ["H1"]}, {"nl": "Adds a rule to the perspective that will generate child nodes for any given parent node.", "Heuristic": []}, {"nl": "Returns a new object with rotated image data by 90 degrees counterclockwise. Only callable if  {@link #isRotateSupported()} is true.", "Heuristic": ["H1"]}, {"nl": "Sets the result message.", "Heuristic": []}, {"nl": "Add body payload. This method is used when the HTTP body is not a form-url-encoded string, but another thing. Like for example XML. Note: The contents are not part of the OAuth signature", "Heuristic": ["H1"]}, {"nl": "Gets the sessionId of the worker making the request. Make sure the message is ready before calling this method.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link Mode#toString()} method.", "Heuristic": ["H1"]}, {"nl": "Starts tracking a new coalescing key corresponding to the gesture with this down time.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": " Performs a rank one update on matrix A using vectors u and w.  The results are stored in A.  A = A + &gamma; u wT   This is called a rank1 update because the matrix u wT has a rank of 1. ", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.provider.AbstractProvider#sentenceRead(net.sf.marineapi.nmea.event.SentenceEvent)}.", "Heuristic": ["H1"]}, {"nl": "Set the c14n algorithm to use", "Heuristic": []}, {"nl": "Creates an error response using the given message.", "Heuristic": []}, {"nl": "Turns an iterable into its type-safe cousin.", "Heuristic": []}, {"nl": "Get the map of properties which affect the responses only.  These additional properties may be optionally set after a  proxy or WebClient has been created.", "Heuristic": ["H1"]}, {"nl": "Creates an instance of  {@link HttpMessageParser} to be used for parsingHTTP requests received over this connection.  This method can be overridden in a super class in order to provide a different implementation of the  {@link HttpMessageParser} interface orto pass a different implementation of  {@link LineParser} to thethe default implementation  {@link HttpRequestParser}.", "Heuristic": ["H1"]}, {"nl": "Calculates the (one-time) hash of contents and returns it as a new wrapped hash.", "Heuristic": []}, {"nl": "Return a service by its public interface.", "Heuristic": []}, {"nl": "Get the row that was last edited", "Heuristic": []}, {"nl": "getZip returns a String</code representing the postal zone in a UBL address.", "Heuristic": ["H1"]}, {"nl": "Popup an SQL error", "Heuristic": []}, {"nl": "Returns true if the current token is a legal identifier.", "Heuristic": []}, {"nl": "the CSS condition :lang(Xx)", "Heuristic": ["H1"]}, {"nl": "Sets the resolver used to lookup remote objects.", "Heuristic": []}, {"nl": "Return a long value from a JSONObject.", "Heuristic": []}, {"nl": "Sets the Experiment Types.", "Heuristic": []}, {"nl": "Sets the value of the statusCode property.", "Heuristic": []}, {"nl": "Gets the value of the passwordCredentials property.", "Heuristic": []}, {"nl": "Gets the reason.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Checks to see that it only accepts input matrices that have compatible shapes", "Heuristic": []}, {"nl": "Revert all settings to their default value.", "Heuristic": []}, {"nl": "Handle firing a diagram appearance event.", "Heuristic": []}, {"nl": "Get the TProtocol being used as the output (write) protocol.", "Heuristic": []}, {"nl": "Checks to see if the specified off diagonal element is zero using a relative metric.", "Heuristic": []}, {"nl": "Returns a copy of this object", "Heuristic": []}, {"nl": "Displays the contents of the specified input stream as text.", "Heuristic": []}, {"nl": "Determine if the current message is a partial response.", "Heuristic": []}, {"nl": "Registers the  {@link #getOutputFields() output field names}.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link StorageTierView#getDirView(int)} method.", "Heuristic": ["H1"]}, {"nl": "Convenience method that returns the result of the transformation as a Document.", "Heuristic": []}, {"nl": "Gets URI for connecting to remote server.", "Heuristic": []}, {"nl": "Acquire a resource of type {code T} from the pool.", "Heuristic": []}, {"nl": "Test method for {@link com.sqa.em.util.helper.RequestInput#getDouble(java.lang.String)}.", "Heuristic": ["H1"]}, {"nl": "Closes the underlying open streams.", "Heuristic": []}, {"nl": "The column where the problem occured or  {@link #UNKNOWN UNKNOWN}.", "Heuristic": ["H1"]}, {"nl": "Adds and verifies a number sent by a player after its corresponding hash was sent", "Heuristic": []}, {"nl": "Computes the value of a metric for an operation.", "Heuristic": []}, {"nl": "Call this from your startActivityForResult() overload. This is required to catch the case where plugins use Activity.startActivityForResult() + CordovaInterface.setActivityResultCallback() rather than CordovaInterface.startActivityForResult().", "Heuristic": ["H1"]}, {"nl": "Returns a new object with cropped image data. Implementations may keep a reference to the original data rather than a copy. Only callable if isCropSupported() is true.", "Heuristic": []}, {"nl": "Tests the method for handling an input stream from Yahoo.", "Heuristic": []}, {"nl": "Delete the certificate with the given alias", "Heuristic": []}, {"nl": "Checks whether Alluxio is running in secure mode, such as  {@link AuthType#SIMPLE}, {@link AuthType#KERBEROS},  {@link AuthType#CUSTOM}.", "Heuristic": ["H1"]}, {"nl": "Removes all connections referenced by this handler.", "Heuristic": []}, {"nl": "Adds/registers RemoteControlClient with the  {@link MediaRouter}", "Heuristic": ["H1"]}, {"nl": "Initialize the Model subsystem with the MDR ModelImplementation.", "Heuristic": []}, {"nl": "Checks if the AI is on the building spot.", "Heuristic": []}, {"nl": "Used to initiate SASL handshake with server.", "Heuristic": ["H1"]}, {"nl": "Creates an OpenGraphObject suitable for posting via, e.g., a native Share dialog. The object will have no properties other than a 'create_object' and 'data' property, ready to be populated.", "Heuristic": []}, {"nl": "Adds the given header to the group.  The order in which this header was added is preserved.", "Heuristic": []}, {"nl": "Sets the array.", "Heuristic": []}, {"nl": "k is initialised as 2 and increased by 1 each time the number is fed back", "Heuristic": ["H1"]}, {"nl": "Returns the current number of entries in the map.", "Heuristic": []}, {"nl": "Return an list of ABIs we supported on this device ordered according to preference.  Use a separate inner class to isolate the version-dependent call where it won't cause the whole class to fail preverification.", "Heuristic": ["H1"]}, {"nl": "Pausa o servidor", "Heuristic": ["H1"]}, {"nl": "Returns the connection headers as a  {@link Map}", "Heuristic": ["H1"]}, {"nl": "This method removes a extension from the list of known extensions.", "Heuristic": ["H1"]}, {"nl": "Provides access to the factory. Implemented with lazy instantiation.", "Heuristic": []}, {"nl": "Test of listComPorts method, of class ComPortController.", "Heuristic": []}, {"nl": "Returns the Scope corresponding to the token Request", "Heuristic": []}, {"nl": "Determines the number of error correction codewords for a specified error correction level.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link CustomAuthenticationProvider#CustomAuthenticationProvider(String)}constructor to throw an exception when the class is not a provider.", "Heuristic": ["H1"]}, {"nl": "Deprecated. Please use  {@link AppEventsLogger} instead.", "Heuristic": ["H1"]}, {"nl": "Sets the error description", "Heuristic": []}, {"nl": "Returns true if the specified field is in either of the underlying scans.", "Heuristic": []}, {"nl": "Checks whether this result object contains a sink with the given method signature", "Heuristic": []}, {"nl": "Test for non-password protectedness.", "Heuristic": ["H1"]}, {"nl": "Defines the position of a location within the map. Using this method, one location should be selected as reference position (dist=0 and dir=0) and all the other location should be placed relative to it.", "Heuristic": ["H1"]}, {"nl": "Builds unique metric registry names with unique ID (set to host name). The pattern is instance.hostname.metricName.", "Heuristic": []}, {"nl": "gets the table corresponding to the char passed", "Heuristic": ["H1"]}, {"nl": "Get the mnemonic code, or null if unknown.", "Heuristic": []}, {"nl": "Get the KeySize.", "Heuristic": []}, {"nl": "Returns the offset of a specified field within a record", "Heuristic": []}, {"nl": "Decode an image using the hints provided. Does not honor existing state.", "Heuristic": []}, {"nl": "Implements BundleActivator.stop(). Does nothing since the framework will automatically unregister any registered services.", "Heuristic": []}, {"nl": "Checks if there's an output file with given file id.", "Heuristic": ["H1"]}, {"nl": "Step execution implementation", "Heuristic": []}, {"nl": "Returns the adapter position of the last visible view. This position does not include adapter changes that were dispatched after the last layout pass.", "Heuristic": []}, {"nl": "Produce a comma delimited text from a JSONArray of JSONObjects using a provided list of names. The list of names is not included in the output.", "Heuristic": []}, {"nl": "Returns the string value of a configuration property.", "Heuristic": []}, {"nl": "Writes a setstring record to the log, and returns its lsn. Updates to temporary files are not logged; instead, a \"dummy\" negative lsn is returned.", "Heuristic": ["H1"]}, {"nl": "Not required", "Heuristic": ["H2"]}, {"nl": "Will remove all comment-Tags \"&lt;!-- Comment --&gt;\" from test- and control-XML before comparing.", "Heuristic": ["H1"]}, {"nl": "DELETE  /dish-collections/:id : delete the \"id\" dishCollection.", "Heuristic": ["H1"]}, {"nl": "The LIKELIHOOD-WEIGHTING algorithm in Figure 14.15. For answering queries given evidence in a Bayesian Network.", "Heuristic": []}, {"nl": "Puts a new value in the property table with the appropriate flags", "Heuristic": []}, {"nl": "Retrieves a byte array field from the stream. Creates a new byte array that is the size of the object being retrieved.", "Heuristic": []}, {"nl": "Invalidates the SSO session for the given session ID", "Heuristic": []}, {"nl": "Initialise the appropriate model change listeners  for the given modelelement to the given listener. Overrule this when you need more than  listening to all events from the base modelelement.", "Heuristic": ["H1"]}, {"nl": "Gets the Global Chromosomal strt.", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link RegistrationRequest }", "Heuristic": ["H1"]}, {"nl": "Tells if the filename matches one of the given suffixes.", "Heuristic": []}, {"nl": "Get this node's position left, as defined by style.", "Heuristic": []}, {"nl": "Stops tracking a new coalescing key corresponding to the gesture with this down time.", "Heuristic": ["H1"]}, {"nl": "Get the signature Crypto object", "Heuristic": []}, {"nl": "Reset the maximum amount of memory recorded.", "Heuristic": []}, {"nl": "Add a page to the index.", "Heuristic": []}, {"nl": "Set the File associated with the current source file. While this may be set to null, the exclude/include facilities will not work properly without a File.", "Heuristic": []}, {"nl": "Remove a node from the closed list", "Heuristic": []}, {"nl": "Number of bits", "Heuristic": []}, {"nl": "Returns the number of times  {@link Cache} lookup methods have successfully loaded a new value.This is usually incremented in conjunction with  {@link #missCount}, though  {@code missCount} isalso incremented when an exception is encountered during cache loading (see {@link #loadExceptionCount}). Multiple concurrent misses for the same key will result in a single load operation. This may be incremented not in conjunction with  {@code missCount} if theload occurs as a result of a refresh or if the cache loader returned more items than was requested.  {@code missCount} may also be incremented not in conjunction with this (nor{@link #loadExceptionCount}) on calls to  {@code getIfPresent}.", "Heuristic": ["H1"]}, {"nl": "Obtains the timestamp of the versioned module or informal unit. This data is read from the version information for the package.", "Heuristic": []}, {"nl": "Serializes and deserializes the specified object. GWT warning: Under GWT, this method simply returns its input, as proper GWT serialization tests require more setup.  This no-op behavior allows test authors to intersperse  {@code SerializableTester} calls withother, GWT-compatible tests. Note that the specified object may not be known by the compiler to be a {@link java.io.Serializable} instance, and is thus declared an{@code Object}. For example, it might be declared as a  {@code List}.", "Heuristic": ["H1"]}, {"nl": "Gets the message body, as a string. The string will be decoded as UTF-16LE, with no byte-order-mark. This is mostly useful after receiving a message.  If the message body is not a legal UTF-16LE bytestream, then this method will return a rubbish string.", "Heuristic": ["H1"]}, {"nl": "Method called only from the Viewer. Sends the move command (in a designated path) from input to the Model and triggers an interactive event, if possible.", "Heuristic": []}, {"nl": "Returns the R matrix.", "Heuristic": []}, {"nl": "Gets the configuration whether to skip failing rules (true) or whether to throw a a RuntimeException and abort the processing for the first failing rule.", "Heuristic": ["H1"]}, {"nl": "Returns the grant type which was used to obtain the access token the client is using now during the current request", "Heuristic": []}, {"nl": "Only appends delimiter if the accumulated string is non-empty. Note: this isn't a candidate implementation for Joiner since it fails on leading empty components.", "Heuristic": []}, {"nl": "Convenience method to merge a Map>.", "Heuristic": []}, {"nl": "The hashcode of a GroupValue object is the sum of the hashcodes of its field values.", "Heuristic": ["H1"]}, {"nl": "Returns the next available tile in the specified lane that is furthest from the base. A tile is available if it's not occupied by a card.", "Heuristic": []}, {"nl": "Get the identifier corresponding to a transformed version of this token", "Heuristic": []}, {"nl": "Sets the loaded in cats.", "Heuristic": []}, {"nl": "Provide number of decisions made by this MutationFilter.", "Heuristic": []}, {"nl": "Format UTC dateTime to local dateTime in SQL format", "Heuristic": []}, {"nl": "get stack size.", "Heuristic": ["H1"]}, {"nl": "Sets the last version recorded as having run to the currently running version.", "Heuristic": []}, {"nl": "Return the hostname the servlet container is bound to.", "Heuristic": []}, {"nl": "Adds a commit to the push entry object as long as the commit is not a duplicate.", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.util.Date#getMonth()}.", "Heuristic": ["H1"]}, {"nl": "Estimates the number of block accesses required to find all index records having a particular search key. The method uses the table's metadata to estimate the size of the index file and the number of index records per block. It then passes this information to the traversalCost method of the appropriate index type, which provides the estimate.", "Heuristic": []}, {"nl": "Apply the RuleChain to the given Nodes using the given RuleContext, for those rules using the given Language.", "Heuristic": []}, {"nl": "Gets a Builder configured as this object.", "Heuristic": []}, {"nl": "Sets an error number with a custom message.", "Heuristic": []}, {"nl": "Set the unique name of the editor", "Heuristic": []}, {"nl": "Set the list of Ids for taggable people to tag with this content.", "Heuristic": ["H1"]}, {"nl": "Returns whether or not to rebuild the  {@link hudson.model.Run} If thecombination is not in the database, the method returns true, meaning the run will build.", "Heuristic": ["H1"]}, {"nl": "Sets Console Flag. When set to true Progress Monitor Messages are displayed to System.out.", "Heuristic": []}, {"nl": "Find the raw query string parameter indicated and append it to the string builder.  The appended value will be in the form 'paramName=paramValue' (minus the quotes).", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Creates a StructType with the given list of StructFields ( {@code fields}).", "Heuristic": ["H1"]}, {"nl": "Get the named property.  Handles the \"dim\" property and returns NOT_FOUND for all other names.", "Heuristic": []}, {"nl": "Get all features not in the source.", "Heuristic": []}, {"nl": "Returns the value of the specified field. The value is obtained from whichever scan contains the field.", "Heuristic": []}, {"nl": "Check if the user approval bypass setting has made in the identity.xml", "Heuristic": []}, {"nl": "Finds a ClassStats in the direct children of this class. This can only be a directly nested class, for example in the following snippet, A can get B and B can get C but A cannot get C without asking B.   class MyClass { // ClassStats A class MyNested { // ClassStats B class MyDeeplyNested { // ClassStats C } } }  ", "Heuristic": ["H1"]}, {"nl": "Sets the Gene Symbol.", "Heuristic": []}, {"nl": "Adds a location (path) to the list of known locations. Locations are searched in the order they are added, so for best performance add the most likely locations first.", "Heuristic": []}, {"nl": "Writes an entry to the checkpoint file. The entry should not have its sequence number set. This method will add the proper sequence number to the passed in entry.", "Heuristic": []}, {"nl": "Determines whether a specified (US-ASCII) character is an HTTP control character", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Create a new StorageLevel object.", "Heuristic": []}, {"nl": "Registers a  {@link CookieSpecFactory} with the given identifier.If a specification with the given name already exists it will be overridden. This nameis the same one used to retrieve the  {@link CookieSpecFactory}from  {@link #getCookieSpec(String)}.", "Heuristic": ["H1"]}, {"nl": "Adjusts the box so that the result is the intersection of both boxes.", "Heuristic": []}, {"nl": "The component we are decorating.", "Heuristic": []}, {"nl": "Returns everything between the endpoints relative to the specified comparator, with the specified endpoint behavior.", "Heuristic": []}, {"nl": "Returns the next TLS mode to try.", "Heuristic": []}, {"nl": "get messges", "Heuristic": ["H1", "H2"]}, {"nl": "Processes the input stream against a rule set using the given input encoding.", "Heuristic": []}, {"nl": "Sets actual  {@link AuthScope}.", "Heuristic": ["H1"]}, {"nl": "Indicates that the given channel has been terminated. After this occurs, we are guaranteed not to read from the associated streams again, so any state can be cleaned up.", "Heuristic": []}, {"nl": "Test clearing approved sites for a client that doesn't have any stored approved sites. Ensure that the repository's remove() method is never called in this case.", "Heuristic": []}, {"nl": "Method startPrefixMapping.", "Heuristic": []}, {"nl": "Return a classloader that can see all the given interfaces If the given loader can see all interfaces then it is used. If not then a combined classloader of all interface classloaders is returned.", "Heuristic": ["H1"]}, {"nl": "Sets up the stream before a test runs.", "Heuristic": []}, {"nl": "Returns the value of the specified field, as a Constant. The schema is examined to determine the field's type. If INTEGER, then the record file's getInt method is called; otherwise, the getString method is called.", "Heuristic": []}, {"nl": "Begin normal traversal of a subtree rooted at  {@code n}. This gives the visitor the option of changing internal state or returning a new visitor which will be used to visit the children of  {@code n}.  The default implementation of this method is to call {@link #enter(Node) enter(n)}, as most subclasses do not need to know the parent of the node  {@code n}.", "Heuristic": ["H1"]}, {"nl": "Get the RealmParser object to use.", "Heuristic": []}, {"nl": "Sets the backing  {@link ThreadFactory} for new threads created with this ThreadFactory. Threadswill be created by invoking #newThread(Runnable) on this backing  {@link ThreadFactory}.", "Heuristic": ["H1"]}, {"nl": "Get the downlinks of this node.", "Heuristic": ["H1"]}, {"nl": "Gets the test id.", "Heuristic": ["H1"]}, {"nl": "Checks if the given  {@link ByteBuffer} starts with an increasing sequence of bytes starting atthe given value of length equal to or greater than the given length.", "Heuristic": ["H1"]}, {"nl": "Return the UUID of the element.", "Heuristic": []}, {"nl": "Returns an long filesize from a string value such as 50m or 50mb", "Heuristic": ["H1"]}, {"nl": "Encode a string to the \"x-www-form-urlencoded\" form, enhanced with the UTF-8-in-URL proposal. This is what happens:     The ASCII characters 'a' through 'z', 'A' through 'Z', and '0' through '9' remain the same.    The unreserved characters - _ . ! ~  ' ( ) remain the same.    The space character ' ' is converted into a plus sign '+'.    All other ASCII characters are converted into the 3-character string \"%xy\", where xy is the two-digit hexadecimal representation of the character code    All non-ASCII characters are encoded in two steps: first to a sequence of 2 or 3 bytes, using the UTF-8 algorithm; secondly each of these bytes is encoded as \"%xx\". ", "Heuristic": ["H1"]}, {"nl": "Gets the created date.", "Heuristic": []}, {"nl": "Locates and decodes a Data Matrix code in an image.", "Heuristic": []}, {"nl": "Basically just another wrapper for lazy people - identical to calling requestPTY(term, 0, 0, 0, 0, null).", "Heuristic": []}, {"nl": "Create a new Evaluator to resolve the EL functions and variables using action creation time (Phase 2)", "Heuristic": []}, {"nl": "Gets the value of the qname property.", "Heuristic": ["H1"]}, {"nl": "Set the TraX factory to use.", "Heuristic": ["H1"]}, {"nl": "Produce the next identifier.", "Heuristic": []}, {"nl": "Called on completion of the MEP for which the Conduit was required.", "Heuristic": []}, {"nl": "Returns the  {@link Executor} that will be used to run this service. Subclasses may overridethis method to use a custom  {@link Executor}, which may configure its worker thread with a specific name, thread group or priority. The returned executor's  {@link Executor#execute(Runnable) execute()} method is called when this service is started, and shouldreturn promptly. The default implementation returns a new  {@link Executor} that sets the name of its threadsto the string returned by  {@link #serviceName}", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMBParser#setOriginId(String)}.", "Heuristic": ["H1"]}, {"nl": "Helper for success callbacks that just returns the Status.OK by default", "Heuristic": ["H1"]}, {"nl": "Get a feature from the current classifier not yet modeled.", "Heuristic": []}, {"nl": "Performs an optional default action.  For the case of an action provider placed in a menu item not shown as an action this method is invoked if previous callbacks for processing menu selection has handled the event.   A menu item selection is processed in the following order:   Receiving a call to  {@link MenuItem.OnMenuItemClickListener#onMenuItemClick MenuItem.OnMenuItemClickListener.onMenuItemClick}.   Receiving a call to  {@link android.app.Activity#onOptionsItemSelected(MenuItem) Activity.onOptionsItemSelected(MenuItem)}  Receiving a call to  {@link android.app.Fragment#onOptionsItemSelected(MenuItem) Fragment.onOptionsItemSelected(MenuItem)}  Launching the  {@link android.content.Intent} set via{@link MenuItem#setIntent(android.content.Intent) MenuItem.setIntent(android.content.Intent)}  Invoking this method.     The default implementation does not perform any action and returns false. ", "Heuristic": ["H1"]}, {"nl": "Test of getVersion method, of class TestDosAttack.", "Heuristic": []}, {"nl": "Get a attribute from the current classifier not yet modeled.", "Heuristic": ["H1"]}, {"nl": "Gets the end date.", "Heuristic": []}, {"nl": "Create MERGE-WITH query.", "Heuristic": []}, {"nl": "Gets the description of the third-party application.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.GSAParser#getVerticalDOP()}.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets the authorization code", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.util.Time#setMinutes(int)}.", "Heuristic": ["H1"]}, {"nl": "Get the SignatureProperties to use.", "Heuristic": []}, {"nl": "add items.", "Heuristic": ["H1", "H2"]}, {"nl": "Updates the value currently associated with  {@code key} by combining it with {@code x}via the specified accumulator function, returning the old value.  The previous value associated with  {@code key} (or zero, if there is none) is passed as the first argumentto  {@code accumulatorFunction}, and  {@code x} is passed as the second argument.", "Heuristic": ["H1"]}, {"nl": "Error log message with printf formatting.", "Heuristic": ["H1"]}, {"nl": "Initialized some new modelelement o.", "Heuristic": ["H1"]}, {"nl": "Returns a  {@link Method} corresponding to the given Java methoddeclaration.", "Heuristic": ["H1"]}, {"nl": "Send an ERROR log message.", "Heuristic": []}, {"nl": "Creates a DecimalType with default precision and scale, which are 10 and 0.", "Heuristic": []}, {"nl": "&lt;a&gt; &lt;b&gt; &lt;/a&gt;", "Heuristic": ["H1"]}, {"nl": "Sets the src file name.", "Heuristic": []}, {"nl": "Returns the instance of the singleton.", "Heuristic": []}, {"nl": "Moves the scan to the next record. The method moves to the next RHS record, if possible. Otherwise, it moves to the next LHS record and the first RHS record. If there are no more LHS records, the method returns false.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns the value corresponding to this entry.", "Heuristic": []}, {"nl": "return the horizontal position of this ball", "Heuristic": ["H1"]}, {"nl": "Calculate checksum", "Heuristic": ["H2"]}, {"nl": "Utility method that throws a NullPointerException if  any of the buffers in the collection is null.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link RPCFileReadRequest#RPCFileReadRequest(long,long,long)} constructor with anegative offset.", "Heuristic": ["H1"]}, {"nl": "Returns true if the current token is the specified delimiter character.", "Heuristic": []}, {"nl": "Assert a boolean expression, throwing  {@code IllegalArgumentException}if the test result is  {@code false}. Assert.isTrue(i &gt; 0, \"The value must be greater than zero\");", "Heuristic": ["H1"]}, {"nl": "Resets the singleton  {@link LoginUser} to null.", "Heuristic": ["H1"]}, {"nl": "Return an empty non-null list if the argument list is null.", "Heuristic": []}, {"nl": "A convenience method for {@link URIUtils#rewriteURI(URI,HttpHost,boolean)} that always keeps thefragment.", "Heuristic": ["H1"]}, {"nl": "Remove all listeners.", "Heuristic": []}, {"nl": "Overwrites the first header with the same name. The new header will be appended to the end of the list, if no header with the given name can be found.", "Heuristic": []}, {"nl": "Gets a singleton instance of this class, creating one if it doesn't yet exist.", "Heuristic": []}, {"nl": "Called for entries that have been evicted or removed. This method is invoked when a value is evicted to make space, removed by a call to {@link #remove}, or replaced by a call to  {@link #put}. The default implementation does nothing. The method is called without synchronization: other threads may access the cache while this method is executing.", "Heuristic": ["H1"]}, {"nl": "Returns the byte value in this buffer at the specified index. The index argument must be greater than or equal to 0, and less than the length of this buffer.", "Heuristic": []}, {"nl": "Returns the boot date of the Gitblit server.", "Heuristic": ["H1"]}, {"nl": "Controls whether the ActionBar slides along with the above view when the menu is opened, or if it stays in place.", "Heuristic": []}, {"nl": "Sets the name of the gene set.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.HDGParser#getVariation()}.", "Heuristic": ["H1"]}, {"nl": "Returns this extension from the given wallet, or null if no such extension was added.", "Heuristic": []}, {"nl": "Remove everything in the cache.", "Heuristic": []}, {"nl": "Sets the optional login name", "Heuristic": []}, {"nl": "Test for getDatum()", "Heuristic": []}, {"nl": "Retrieves the publicKey", "Heuristic": []}, {"nl": "Sets the value of the street property.", "Heuristic": []}, {"nl": "Ensure that the source has a systemId", "Heuristic": ["H1"]}, {"nl": "Get all features not in the source.", "Heuristic": []}, {"nl": "Updates the rememberMe token", "Heuristic": ["H1"]}, {"nl": "Adds a name/value pair to the formatted output in  {@code name=value} format.", "Heuristic": ["H1"]}, {"nl": "Attempts to close the current serverSocket.", "Heuristic": []}, {"nl": "Sets the lane_id.", "Heuristic": ["H1"]}, {"nl": "Adds a node to the central node hashtable.", "Heuristic": ["H1"]}, {"nl": "save the commit information and later output it", "Heuristic": ["H1"]}, {"nl": "Gets the value of the name property.", "Heuristic": []}, {"nl": "Returns true if the HTTP connection needs to tunnel one protocol over another, such as when using HTTPS through an HTTP proxy. When doing so, we must avoid buffering bytes intended for the higher-level protocol.", "Heuristic": []}, {"nl": "Called when the system is about to start resuming a previous activity.", "Heuristic": []}, {"nl": "Test method for {@link com.sqa.em.util.helper.RequestInput#getChar(java.lang.String)}.", "Heuristic": ["H1"]}, {"nl": "Load the configuration from a specified file.", "Heuristic": []}, {"nl": "Sets the list of in interceptors which pre-process  the responses from remote services.", "Heuristic": ["H1"]}, {"nl": "Sets the boolean value of a configuration property.", "Heuristic": []}, {"nl": "Get the secondary subject of this certificate (either CN or OU if primary subject is O, empty otherwise)", "Heuristic": ["H1"]}, {"nl": "Returns the object that originated this event (not the object that originated the wrapped event). This is generally an  {@link EventBus}.", "Heuristic": ["H1"]}, {"nl": "Process the DELETE method.", "Heuristic": []}, {"nl": "Counts the number of dots \".\" in a string.", "Heuristic": []}, {"nl": "Set the tenant domain which the authentication request is comming from", "Heuristic": ["H1"]}, {"nl": "Finishes scrolling", "Heuristic": ["H2"]}, {"nl": "Tests the  {@link StorageDirView#getCapacityBytes()} method.", "Heuristic": ["H1"]}, {"nl": "Returns a unique member's name for storage in a zipfile. The project's base name is prepended followed by an underscore '_'. The extension is appended. Used by \"argo.tee\".", "Heuristic": ["H1"]}, {"nl": "Adds an unnamed value to the formatted output. It is strongly encouraged to use  {@link #add(String,float)} instead and give value areadable name.", "Heuristic": ["H1"]}, {"nl": "Sets the start of the peak of the ROI", "Heuristic": []}, {"nl": "Sets the data buffer for this datagram packet.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link BlockLockManager#lockBlock(long,long,BlockLockType)} method.", "Heuristic": ["H1"]}, {"nl": "Encode given data as lower case hex chars.", "Heuristic": []}, {"nl": "Factory method for  {@link JournalFormatter}.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.MWVParser#setTrue(boolean)}.", "Heuristic": ["H1"]}, {"nl": "Returns the number of times to retry a cache update on failure", "Heuristic": []}, {"nl": "Takes a playerID as a arg, and checks if they are currently being ticked.   Takes care of handling adding them to the tick, and incrementing ticks.", "Heuristic": ["H1"]}, {"nl": "set delivery tag of the message assigned by the transport", "Heuristic": ["H1"]}, {"nl": "Finds a channel with the given id and contract hash and returns it, or returns null.", "Heuristic": ["H1"]}, {"nl": "Remove a page for the given position.  The adapter is responsible for removing the view from its container, although it only must ensure this is done by the time it returns from  {@link #finishUpdate(ViewGroup)}.", "Heuristic": ["H1"]}, {"nl": "Return the RPDTO object for a given OpenID and RP URL", "Heuristic": ["H1"]}, {"nl": "Set exception call-back listener.", "Heuristic": []}, {"nl": "Method called by the Viewer to send the trigger command to the model.", "Heuristic": []}, {"nl": "Locates and decodes a QR code in an image.", "Heuristic": []}, {"nl": "Gets the Case ID.", "Heuristic": []}, {"nl": "Get the file mode bits of a file. This method is only implemented for OSes of the Unix family. It returns the file mode information as available in the st_mode member of the resulting struct stat when calling 'lstat' on a file.", "Heuristic": ["H1"]}, {"nl": "get text of emoji icon", "Heuristic": ["H1"]}, {"nl": "get the k-dimensional space that the Points is in calls: none called by: centroid, codebook", "Heuristic": ["H1"]}, {"nl": "Sets the checksum type.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "This input parameter is ignored for the moment.", "Heuristic": []}, {"nl": "Return a subset of allNodes, containing the items in allNodes that are of the given type.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RTEParser#setSentenceCount(int)}.", "Heuristic": ["H1"]}, {"nl": "write.", "Heuristic": ["H1", "H2"]}, {"nl": "Set the encryption Crypto object", "Heuristic": []}, {"nl": "Get the utility of a cell in the projected q-matrix at a given cell position (row,column)", "Heuristic": ["H1"]}, {"nl": "Add an individual structure. If the individual structure identifier already exists the old individual structure will be overwritten.", "Heuristic": []}, {"nl": "Not-null value; ensure this value is available before it is saved to the database.", "Heuristic": []}, {"nl": "Return the context with the functions and variables of the EL evaluator. ", "Heuristic": []}, {"nl": "Get the triple state in A.", "Heuristic": []}, {"nl": "Add a new user store manager to in-memory map, at the given domain name", "Heuristic": []}, {"nl": "Sets the mail sender.", "Heuristic": []}, {"nl": "Associate ClassCache object with the given top-level scope. The ClassCache object can only be associated with the given scope once.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Getter for the recently denied permissions.", "Heuristic": []}, {"nl": "Produce a JSONObject from a row of comma delimited text, using a parallel JSONArray of strings to provides the names of the elements.", "Heuristic": ["H1"]}, {"nl": "Sets bit i.", "Heuristic": []}, {"nl": "Get the first element from the open list. This is the next one to be searched.", "Heuristic": []}, {"nl": "Sets the Bus", "Heuristic": []}, {"nl": "Tests the following constructor: DenseMatrix64F( int numCols , int numRows )", "Heuristic": ["H1"]}, {"nl": "Ensures that  {@code reference} is non-null, throwing a {@code VerifyException} with a custommessage otherwise.", "Heuristic": ["H1"]}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.parser.RMCParser#getYear()}.", "Heuristic": ["H1"]}, {"nl": "The file after it has been compressed", "Heuristic": []}, {"nl": "Returns true if the hashes are equal.", "Heuristic": []}, {"nl": "Converts the byte array of HTTP content characters to a string. If the specified charset is not supported, default system encoding is used.", "Heuristic": ["H1"]}, {"nl": "Sets the List of Genes in the Set.", "Heuristic": []}, {"nl": "Gets the value of the roles property.  This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a set method for the roles property.  For example, to add a new item, do as follows:  getRoles().add(newItem);   Objects of the following type(s) are allowed in the list {@link Role }", "Heuristic": ["H1"]}, {"nl": "Set the referenced revision in A.", "Heuristic": []}, {"nl": "Sets up a new  {@link ReplayCache} instance before a test runs.", "Heuristic": ["H1"]}, {"nl": "Returns true if the target size specified by these options matches the size provided (e.g. image is already at target size).", "Heuristic": []}, {"nl": "Process a upr command: consume all of the RTF commands relating to this and emit events representing the Unicode content.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets the download size.", "Heuristic": []}, {"nl": "Special case that requires exceptional shifts to work", "Heuristic": []}, {"nl": "Adds a settings class to the list of factories that  this handler will act upon.", "Heuristic": ["H1"]}, {"nl": "Removes the string event from the end of the buffer, merges it with the string event we've just received, and adds the new event to the end of the buffer.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Has this approval expired?", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Creates a name-value pair. Called from  {@link #parseNameValuePair}.", "Heuristic": ["H1"]}, {"nl": "Use this function instead of new String(byte[], String) to avoid surprises from  non-standard default encodings.", "Heuristic": ["H1"]}, {"nl": "Add a short field to the stream. \\param value The short value to be added.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns the current elapsed time shown on this stopwatch, expressed in the desired time unit, with any fraction rounded down. Note that the overhead of measurement can be more than a microsecond, so it is generally not useful to specify  {@link TimeUnit#NANOSECONDS} precision here.", "Heuristic": ["H1"]}, {"nl": "get class loader", "Heuristic": ["H1"]}, {"nl": "Increments the coalescing key corresponding to the gesture with this down time.", "Heuristic": ["H1"]}, {"nl": "save Codebook to cbk object file calls: none called by: train", "Heuristic": ["H1"]}, {"nl": "This method is used to get the email template to be displayed with the given index.", "Heuristic": []}, {"nl": "Get a default SSL wrapped TServerSocket bound to the specified port and interface", "Heuristic": []}, {"nl": "Convert a nodes list into a JSONArray.", "Heuristic": []}, {"nl": "Returns the collection type if we recognize it by its short name.", "Heuristic": []}, {"nl": "Walk the list of registered EndpointResolvers, so as to mint a new  abstract EPR for a given service name.", "Heuristic": ["H1"]}, {"nl": "Writes a specific integer value (4 bytes) to the output byte array at the given offset.", "Heuristic": []}, {"nl": "Sets value of the  {@link NIOReactorPNames#CONTENT_BUFFER_SIZE} parameter.", "Heuristic": ["H1"]}, {"nl": "Spin 90 Left Spin the drone 90 degrees to the left", "Heuristic": []}, {"nl": "Return the singleton Measurements object.", "Heuristic": []}, {"nl": "Sets a non-default  {@link Marshaller} to use when creating the {@link Source}.", "Heuristic": ["H1"]}, {"nl": "Set next message to queue. Clears queue before.", "Heuristic": []}, {"nl": "Set the list of accepted key-wrap algorithms. A request can contain a wst:KeyWrapAlgorithm uri for use in encrypting an issued token. The algorithm specified must be contained in this list. The default algorithms are RSA 1.5 and RSA OEP.", "Heuristic": ["H1"]}, {"nl": "Debug log message.", "Heuristic": []}, {"nl": "Gets the Constant value of the specified field of the current scan.", "Heuristic": []}, {"nl": "Verify user name/password authentication.", "Heuristic": ["H1"]}, {"nl": "Checks if the given file is being persisted.", "Heuristic": []}, {"nl": "Create a solver which can efficiently add and remove elements instead of recomputing everything from scratch.", "Heuristic": []}, {"nl": "Avoid the need to construct these objects over and over in cases where the code knows that it needs the basic case.", "Heuristic": []}, {"nl": "Returns the arithmetic mean of the values. The count must be non-zero. If these values are a sample drawn from a population, this is also an unbiased estimator of the arithmetic mean of the population. Non-finite values If the dataset contains  {@link Double#NaN} then the result is {@link Double#NaN}. If it contains both  {@link Double#POSITIVE_INFINITY} and {@link Double#NEGATIVE_INFINITY} then theresult is  {@link Double#NaN}. If it contains  {@link Double#POSITIVE_INFINITY} and finite valuesonly or  {@link Double#POSITIVE_INFINITY} only, the result is {@link Double#POSITIVE_INFINITY}. If it contains  {@link Double#NEGATIVE_INFINITY} and finite values only or{@link Double#NEGATIVE_INFINITY} only, the result is {@link Double#NEGATIVE_INFINITY}.", "Heuristic": ["H1"]}, {"nl": "Toggle the SlidingMenu. If it is open, it will be closed, and vice versa.", "Heuristic": []}, {"nl": "Return true if this TokenValidator implementation is capable of validating the ReceivedToken argument.", "Heuristic": []}, {"nl": "Get all trusted services", "Heuristic": []}, {"nl": "Tests that an exception is thrown when trying to get a storage directory view with a bad index.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "is null or its size is 0  isEmpty(null)   =   true; isEmpty({})     =   true; isEmpty({1, 2})    =   false; ", "Heuristic": ["H1"]}, {"nl": "Traverses up the tree to find all of the parent instances of type parentType", "Heuristic": ["H1"]}, {"nl": "Returns an immutable array of  {@link Cookie cookies} that this HTTPstate currently contains.", "Heuristic": ["H1"]}, {"nl": "Set the private key alias", "Heuristic": []}, {"nl": "Returns the  {@code int} value that, when treated as unsigned, is equal to {@code value}, if possible.", "Heuristic": ["H1"]}, {"nl": " This is a forward substitution solver for non-singular upper triangular matrices.  b = U-1b  where b is a vector, U is an n by n matrix. ", "Heuristic": ["H1"]}, {"nl": "Returns true if the given line is not null or if it is not a comment.", "Heuristic": []}, {"nl": "Returns the root key that the  {@link DeterministicHierarchy} was created with.", "Heuristic": ["H1"]}, {"nl": "Returns a composed  {@code TriConsumer} that performs, in sequence, thisoperation followed by the  {@code after} operation. If performing eitheroperation throws an exception, it is relayed to the caller of the composed operation.  If performing this operation throws an exception, the  {@code after} operation will not be performed.", "Heuristic": ["H1"]}, {"nl": "Returns the identity function.", "Heuristic": []}, {"nl": "Sets the value of the challenge property.", "Heuristic": []}, {"nl": "Add a named type object to the table.", "Heuristic": []}, {"nl": "Returns the number of times  {@link #get} returned a value.", "Heuristic": ["H1"]}, {"nl": "Convenience method for executing a heartbeat and waiting for it to complete.", "Heuristic": []}, {"nl": "Creates a matcher of  {@link Comparable} object that matches when the examined object isless than the specified value, as reported by the compareTo method of the examined object. For example: assertThat(1, lessThan(2))", "Heuristic": ["H1"]}, {"nl": "Queue a command for execution after the current command execution completes.  All commands queued during the execution of the current command will be queued for a single serial execution.  If the command execution throws an exception, no command will be effectively queued.", "Heuristic": []}, {"nl": "Creates a  {@code Callable} which immediately returns a preset value each time it is called.", "Heuristic": ["H1"]}, {"nl": "Waits for the given thread to be ready to be scheduled.", "Heuristic": []}, {"nl": "Declares the argument value to be invalid. Gui will be redrawn but with a warning drawn in red above the entry widget.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the message property.", "Heuristic": []}, {"nl": "Registers the given  {@link HttpRequestHandler} as a handler for URIsmatching the given pattern.", "Heuristic": ["H1"]}, {"nl": "Get Hash Value for String using DJBX33A Algorithm", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets the destination.", "Heuristic": []}, {"nl": "Pause for", "Heuristic": ["H2"]}, {"nl": "Get Issuer List", "Heuristic": []}, {"nl": "Remove an attribute value on the RuleContext.  Attributes can be shared between RuleContext instances. This operation is thread-safe.  Attribute values should be modified directly via the reference provided. It is not necessary to call setAttribute(String, Object) to update an attribute value. Modifications made to the attribute value will automatically be seen by other threads. Because of this, you must ensure the attribute values are themselves thread safe.", "Heuristic": []}, {"nl": "Creates an OpenGraphObject suitable for posting via, e.g., a native Share dialog. The object will have no properties other than a 'create_object' and 'data' property, ready to be populated.", "Heuristic": []}, {"nl": "The next step of the wizard.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.util.Date#equals(java.lang.Object)}.", "Heuristic": ["H1"]}, {"nl": "add new node to list", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Specifies the particular sounds which must be loaded for this screen. It returns null by default.", "Heuristic": []}, {"nl": "Return the public interface of the service.", "Heuristic": []}, {"nl": "Called when the service transitions from  {@linkplain State#STARTING STARTING} to{@linkplain State#RUNNING RUNNING}. This occurs when a service has successfully started.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns the power.", "Heuristic": []}, {"nl": "Get the referenced revision label in B.", "Heuristic": []}, {"nl": "Returns the number of times  {@link #create(Object)} returned a value.", "Heuristic": ["H1"]}, {"nl": "Returns the graph's source description in dot language.", "Heuristic": []}, {"nl": "Adds a  {@link net.sf.marineapi.nmea.event.SentenceListener} that is interested in receiving onlysentences of certain type.", "Heuristic": ["H1"]}, {"nl": "Increments the total value which we pay the server.", "Heuristic": []}, {"nl": "Given the name for a class, returns the portion which appears to constitute the package -- i.e., all characters up to but not including the last dot, or no characters if the name has no dot.", "Heuristic": []}, {"nl": "Test loading an admin user, ensuring that the UserDetails object returned has both the ROLE_USER and ROLE_ADMIN authorities.", "Heuristic": []}, {"nl": "Returns true if the predicate evaluates to true with respect to the specified scan.", "Heuristic": []}, {"nl": "Release the given port.", "Heuristic": []}, {"nl": "Returns the panel used internally for rendering.", "Heuristic": []}, {"nl": "Applies no mutation data to mutation map.", "Heuristic": []}, {"nl": "Called as a result of a previous service retrieval request.", "Heuristic": []}, {"nl": "Checks whether a header is part of the iteration.", "Heuristic": []}, {"nl": "Write a group start tag.", "Heuristic": []}, {"nl": " Given matrix A and an eigen vector of A, compute the corresponding eigen value.  This is the Rayleigh quotient.  xTAx / xTx ", "Heuristic": ["H1"]}, {"nl": "Returns a  {@code TopKSelector} that collects the lowest {@code k} elements added to it,relative to the specified comparator, and returns them via  {@link #topK} in ascending order.", "Heuristic": ["H1"]}, {"nl": "Creates an  {@link HttpEntity} based on properties of the given message.The content of the entity is created by wrapping {@link SessionInputBuffer} with a content decoder depending on thetransfer mechanism used by the message.  The content of the entity is NOT retrieved by this method.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Get the line number this frame points to in the file returned by  {@link #getFile()}.", "Heuristic": ["H1"]}, {"nl": "Validate the incoming request for mandatory parameters.", "Heuristic": []}, {"nl": "Building per module configuration objects", "Heuristic": []}, {"nl": "Test method for  {@link com.alibaba.dubbo.registry.support.injvm.InjvmRegistry#register(java.util.Map)}.", "Heuristic": ["H1"]}, {"nl": "Returns distance to closest block. If none is found, returns 9999.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the city property.", "Heuristic": []}, {"nl": "Return the public interface of the service.", "Heuristic": []}, {"nl": "Obtains value of the  {@link CoreConnectionPNames#SO_REUSEADDR} parameter.If not set, defaults to false.", "Heuristic": ["H1"]}, {"nl": "Reads playlists from database", "Heuristic": ["H1"]}, {"nl": "Flushes all modified buffers. Then goes through the log, rolling back all uncommitted transactions.  Finally,  writes a quiescent checkpoint record to the log. This method is called only during system startup, before user transactions begin.", "Heuristic": ["H1"]}, {"nl": "Setea el password del usuario.", "Heuristic": ["H1"]}, {"nl": "Get the username/alias to use to sign any issued tokens", "Heuristic": []}, {"nl": "Sets the user subject representing the end user", "Heuristic": []}, {"nl": "Delete the  ingredient by id.", "Heuristic": ["H1"]}, {"nl": "Starts loading the assets.  {@link Loader#setAssetsToLoad()} must becalled first.", "Heuristic": ["H1"]}, {"nl": "Returns the depth of the tree (longest path length from root to leaf).", "Heuristic": ["H1"]}, {"nl": "Guaranteed to throw an exception and leave the  {@code RangeMap} unmodified.", "Heuristic": ["H1"]}, {"nl": "Returns gammas from the householder operations for the V matrix.", "Heuristic": []}, {"nl": "Properties for the test.", "Heuristic": []}, {"nl": "Called when the service transitions from  {@linkplain State#NEW NEW} to{@linkplain State#STARTING STARTING}. This occurs when  {@link Service#startAsync} is calledthe first time.", "Heuristic": ["H1"]}, {"nl": "Adds an unnamed value to the formatted output. It is strongly encouraged to use  {@link #add(String,double)} instead and give value areadable name.", "Heuristic": ["H1"]}, {"nl": "Returns the string for  {@code value}.", "Heuristic": ["H1"]}, {"nl": "Test method for  {@link org.mitre.uma.service.impl.DefaultPermissionService#createTicket(org.mitre.uma.model.ResourceSet,java.util.Set)}.", "Heuristic": ["H1"]}, {"nl": "checkGameOver prueft ob die Bedingung erfuellt wurde die fuer ein Game Over erforderlich sind.", "Heuristic": ["H1"]}, {"nl": "Extract min value key from the heap", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "This matters for deciding whether the cache entry is valid to serve as a response. If these values do not match, we might have a partial response", "Heuristic": []}, {"nl": "Tests the  {@link NetworkAddressUtils#getFqdnHost(InetSocketAddress)} and{@link NetworkAddressUtils#getFqdnHost(WorkerNetAddress)} methods.", "Heuristic": ["H1"]}, {"nl": "Returns the population covariance of the values. The count must be non-zero. This is guaranteed to return zero if the dataset contains a single pair of finite values. It is not guaranteed to return zero when the dataset consists of the same pair of values multiple times, due to numerical errors. Non-finite values If the dataset contains any non-finite values ( {@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or  {@link Double#NaN}) then the result is  {@link Double#NaN}.", "Heuristic": ["H1"]}, {"nl": "Filter item by child index and item data.", "Heuristic": []}, {"nl": "Stores words and their corresponding frequencies in parallel array lists parameters.  The frequencies are sorted from low to high.", "Heuristic": ["H1"]}, {"nl": "Sets the priority for new threads created with this ThreadFactory.", "Heuristic": []}, {"nl": "Stops the animation. Contrary to  {@link #forceFinished(boolean)}, aborting the animating cause the scroller to move to the final x and y position", "Heuristic": ["H1"]}, {"nl": "Return the full URL (including protocol, host, port, context path, servlet path) for a servlet path.", "Heuristic": []}, {"nl": "Moves to the next record. Returns false if there is no next record.", "Heuristic": []}, {"nl": "Change the attributes for this element.", "Heuristic": []}, {"nl": "Note that this method does not get forwarded to the delegee if the hint parameter is null, ScriptRuntime.ScriptableClass or ScriptRuntime.FunctionClass. Instead the object itself is returned.", "Heuristic": ["H1"]}, {"nl": "Returns the raw value byte array.", "Heuristic": []}, {"nl": "Resolves the URI; if absolute, leaves as is, if relative, returns an absolute URI based on the baseUrl for the agent.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Get the source where this result comes from Source is only a representative string (no object reference)", "Heuristic": []}, {"nl": "Execute the copy-of transform and return the resulting Document. Used for XMLTestCase comparison", "Heuristic": []}, {"nl": "Writes the graph's image in a file.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.VTGParser#getTrueCourse()}.", "Heuristic": ["H1"]}, {"nl": "Returns the scaled value of dimension.  This function performs the integer equivalent of ceil(dimension  scalingFactor).", "Heuristic": ["H1"]}, {"nl": "Adds a reference to the specified id.  If an object is already registered with the specified id, the SOAP reference will immedately be set.  Otherwise, the reference will be set when an object is registered with the specified id.", "Heuristic": ["H1"]}, {"nl": "Returns the scope for script evaluations.", "Heuristic": []}, {"nl": "See  {@link LayoutState#DIRTY}.", "Heuristic": ["H1"]}, {"nl": "Lists all folders and files in the given dir as XML tags.", "Heuristic": ["H1"]}, {"nl": "Gets a hashMap of the default mutation and copy number profiles.", "Heuristic": []}, {"nl": "Check and modify path.", "Heuristic": []}, {"nl": "Get all the dishCollections.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Create an instance of  {@link GetPrice }", "Heuristic": ["H1"]}, {"nl": "Get the (WSS4J) key identifier type used to reference a certificate for encryption", "Heuristic": []}, {"nl": "Gets the data unit id.", "Heuristic": ["H1"]}, {"nl": " Multiplies the provided matrix by Q using householder reflectors.  This is more efficient that computing Q then applying it to the matrix.   B = Q  B ", "Heuristic": ["H1"]}, {"nl": "Remove a single item if it is in the set.", "Heuristic": []}, {"nl": "find a element in binary search tree", "Heuristic": ["H1"]}, {"nl": "Unit of time that  {@link #getSleepTime()} is measured in. Defaults to{@link java.util.concurrent.TimeUnit#MILLISECONDS}.", "Heuristic": ["H1"]}, {"nl": "Computes the product of the diagonal elements.  For a diagonal or triangular matrix this is the determinant.", "Heuristic": []}, {"nl": "Reads Content from a Buffered Reader.", "Heuristic": []}, {"nl": "Returns the given string if it is non-null; the empty string otherwise.", "Heuristic": []}, {"nl": "Returns an expression. Evaluating this expression for a record produces the value that will be stored in the record's target field.", "Heuristic": []}, {"nl": "Write the given long value (64-bit) in big-endian order to the buffer", "Heuristic": []}, {"nl": "Get content type of the message", "Heuristic": []}, {"nl": "Whether the serializer will produce lazy parse mode Messages", "Heuristic": ["H1"]}, {"nl": "Set whether to validate a client Public Key or Certificate presented as part of a  UseKey element. If this is set to true (the default), the public key must be trusted by the Signature Crypto of the STS.", "Heuristic": ["H1"]}, {"nl": "Sets the data set id.", "Heuristic": ["H1"]}, {"nl": "Returns the current  {@link #dotsPerDeg} value.", "Heuristic": ["H1"]}, {"nl": "Gets the message body.", "Heuristic": []}, {"nl": "Check whether object  {@code o} is in the set. Because of the semantics of the subtype set,  {@code o} is in the set iffit descends from (or is equal to) one of the elements in the set.", "Heuristic": ["H1"]}, {"nl": "This callback is called on an unregistration event.", "Heuristic": ["H1"]}, {"nl": "Return the job owner user name.", "Heuristic": ["H1"]}, {"nl": "Build the String required for an SQL select statement: WHERE key IN (?, ?, ..., ?) without 'WHERE' and with selectionCount '?'", "Heuristic": []}, {"nl": "Singleton retrieval method for the projectbrowser. Lazely instantiates the projectbrowser.", "Heuristic": ["H1"]}, {"nl": "Sets the multiplicity for the given word.", "Heuristic": []}, {"nl": "Get the SWT image. Reload it from the UAC if it was disposed.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMCParser#getCourse()} .", "Heuristic": ["H1"]}, {"nl": "Returns the currently set action view for this menu item.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.GSAParser#setHorizontalDOP(double)}.", "Heuristic": ["H1"]}, {"nl": "Creates a character from this object's parameters.", "Heuristic": []}, {"nl": "Calculates XOR checksum of given String. Resulting hex value is returned as a String in two digit format, padded with a leading zero if necessary.", "Heuristic": ["H1"]}, {"nl": "Add a node to the closed list", "Heuristic": []}, {"nl": "Sleeps for the given number of milliseconds.", "Heuristic": []}, {"nl": "put all.", "Heuristic": ["H1", "H2"]}, {"nl": "Read a writable from a byte array.", "Heuristic": []}, {"nl": "Apply mask penalty rule 1 and return the penalty. Find repetitive cells with the same color and give penalty to them. Example: 00000 or 11111.", "Heuristic": []}, {"nl": "Gets the value of the key property.", "Heuristic": []}, {"nl": "Create a three-component configuration key.", "Heuristic": []}, {"nl": "Dispose all images in cache and clean the cache.", "Heuristic": []}, {"nl": "Test case for  {@link OSSUnderFileSystem#delete(String,boolean)}.", "Heuristic": ["H1"]}, {"nl": "Parse a string into a  {@code SourceFile} AST node,applying substitutions.", "Heuristic": ["H1"]}, {"nl": "Hashes a key in  {@code ByteBuffer} to a bucket index in non-negative integer value.", "Heuristic": ["H1"]}, {"nl": "Get the relative full path", "Heuristic": []}, {"nl": "Tests if the block is locked.", "Heuristic": []}, {"nl": "Does any Rule for the given Language use Type Resolution?", "Heuristic": []}, {"nl": "Sets the value of the Build property.", "Heuristic": []}, {"nl": "Places a HttpCacheEntry in the cache", "Heuristic": ["H1"]}, {"nl": "Returns true if this HashMap maps one or more keys to this value. Note that this method is identical in functionality to contains (which predates the Map interface).", "Heuristic": []}, {"nl": "Returns the input stream of this message content.", "Heuristic": []}, {"nl": "Creates an OpenGraphAction suitable for posting via, e.g., a native Share dialog.", "Heuristic": []}, {"nl": "Rescales the image to ideal with and height", "Heuristic": []}, {"nl": "Gets the value of the given member as a JWS Algorithm, null if it doesn't exist", "Heuristic": []}, {"nl": "Convert mnemonic word list to seed.", "Heuristic": []}, {"nl": "Sets the value of the testData property.", "Heuristic": []}, {"nl": "Connects to the TURN server", "Heuristic": []}, {"nl": "Create a unique namespace uri/prefix combination.", "Heuristic": ["H1"]}, {"nl": "Returns the first of two given parameters that is not  {@code null}, if either is, or otherwise throws a  {@link NullPointerException}. To find the first non-null element in an iterable, use  {@code Iterables.find(iterable, Predicates.notNull())}. For varargs, use  {@code Iterables.find(Arrays.asList(a, b, c, ...), Predicates.notNull())}, static importing as necessary. Note: if  {@code first} is represented as an {@link Optional}, this can be accomplished with  {@link Optional#or(Object) first.or(second)}. That approach also allows for lazy evaluation of the fallback instance, using  {@link Optional#or(Supplier) first.or(supplier)}.", "Heuristic": ["H1"]}, {"nl": "Request any amount of Bitcoins (probably a donation) from user, with feedback from the app. Result intent can be received by overriding  {@link android.app.Activity#onActivityResult()}. Result indicates either {@link Activity#RESULT_OK} or {@link Activity#RESULT_CANCELED}. In the success case, use {@link #transactionHashFromResult(Intent)} to read the transaction hash from the intent.Warning: A success indication is no guarantee! To be on the safe side, you must drive your own Bitcoin infrastructure and validate the transaction.", "Heuristic": ["H1"]}, {"nl": "Returns the comment describing the purpose of this cookie, or null if no such comment has been defined.", "Heuristic": []}, {"nl": "Returns a new object with rotated image data by 45 degrees counterclockwise. Only callable if  {@link #isRotateSupported()} is true.", "Heuristic": ["H1"]}, {"nl": "Tests  {@link ByteIOUtils#writeInt} and {@link ByteIOUtils#readInt}.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMBParser#setVelocity()}.", "Heuristic": ["H1"]}, {"nl": "will implement more functions later", "Heuristic": ["H1"]}, {"nl": "Get the values for the Random Variable Xi's parents and its own value from the provided event.", "Heuristic": []}, {"nl": "Tests the  {@link BlockStoreMeta#getCapacityBytesOnTiers()} method.", "Heuristic": ["H1"]}, {"nl": "Returns the number of times  {@link #get} returned null or required a newvalue to be created.", "Heuristic": ["H1"]}, {"nl": "Get the exit code/status from the remote command - if available. Be careful - not all server implementations return this value. It is generally a good idea to call this method only when all data from the remote side has been consumed (see also the  method).", "Heuristic": ["H1"]}, {"nl": "Honor the nonProxyHosts property value (if set).", "Heuristic": ["H1"]}, {"nl": "Deserialize the Thrift object from a byte array.", "Heuristic": []}, {"nl": "Send an ERROR log message.", "Heuristic": []}, {"nl": "Get the signature alias to use for this SAML realm", "Heuristic": []}, {"nl": "Test method for  {@link NotificationController#handleEvent(org.osgi.service.event.Event)}Verifies that  {@code IllegalArgumentException} is thrown when {@code Event}'s {@link Notification#NOTIFICATION_KEY_APPLICATION} property is empty.", "Heuristic": ["H1"]}, {"nl": "Reads a bit of the mapping matrix accounting for boundary wrapping.", "Heuristic": []}, {"nl": "Formats a given KeyStroke into a string", "Heuristic": []}, {"nl": "Set the charset of the body of the request", "Heuristic": ["H1"]}, {"nl": "Returns true if the field is in the schema.", "Heuristic": []}, {"nl": "Create an unbound ClientDetailsEntity from the given JSON string.", "Heuristic": []}, {"nl": "Provide the portId to the RouterInterface's Builder.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RTEParser#isActiveRoute()}.", "Heuristic": ["H1"]}, {"nl": "Updates the actions according to the current battle state.", "Heuristic": []}, {"nl": "Decode an image using the state set up by calling setHints() previously. Continuous scan clients will get a large speed increase by using this instead of decode().", "Heuristic": []}, {"nl": "hashcode implementation to go with equals.", "Heuristic": ["H1"]}, {"nl": "Calculate the digest value of all data processed up until this point and convert the digest into a HexDigest object.", "Heuristic": []}, {"nl": "Determine which test buckets apply to a particular client.", "Heuristic": []}, {"nl": "Parse a  {@link String} into a {@link Date} according to the ISO 8601specification (2000-12-31T11:59:00Z).", "Heuristic": ["H1"]}, {"nl": "Returns if result is KO", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#setTimeToCPA()} .", "Heuristic": ["H1"]}, {"nl": "An efficient copy between two channels with a fixed-size buffer.", "Heuristic": []}, {"nl": "Here, we attempt to get the password from the private alias/passwords map.", "Heuristic": []}, {"nl": "Returns the cost of the path from the initial state to this node as indicated by the parent pointers.", "Heuristic": []}, {"nl": "Gets the attributeValue attribute of the StandardAttributeResolver object", "Heuristic": []}, {"nl": "Set the value of album", "Heuristic": []}, {"nl": "Returns the cipher suites filter", "Heuristic": []}, {"nl": "Method to obtain the only instance of this class", "Heuristic": []}, {"nl": "return hibernate configuration", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.VTGParser#setMagneticCourse(double)}.", "Heuristic": ["H1"]}, {"nl": "It might seem odd to return 'true' if a property == FALSE, but it is required sometimes.", "Heuristic": []}, {"nl": "Initialize TestClass", "Heuristic": []}, {"nl": "Unwraps the string and returns it.", "Heuristic": []}, {"nl": "Obtains the reason phrase for a status code.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Set new property value", "Heuristic": []}, {"nl": "Return the identifier for this Fig which is the encloser  of the given Fig", "Heuristic": ["H1"]}, {"nl": "Returns a hash of the given files contents. Reads the file fully into memory before hashing so only use with small files.", "Heuristic": []}, {"nl": "Gets the SlidingMenu associated with this activity.", "Heuristic": []}, {"nl": "Convenience method for  {@link com.google.zxing.client.android.CaptureActivity}", "Heuristic": ["H1"]}, {"nl": "Checks if the given connection's driver is MySQL Database Driver", "Heuristic": []}, {"nl": "Return the public interface for UUID service.", "Heuristic": []}, {"nl": "Required.", "Heuristic": ["H2"]}, {"nl": "Method calling to use the direct connection.", "Heuristic": []}, {"nl": "Find an attribute or text node representing an absolute or relative link and convert it to URI", "Heuristic": []}, {"nl": "Encode a password as a base64-encoded char[] array.", "Heuristic": []}, {"nl": "Parse SQL formatted UTC dateTime", "Heuristic": []}, {"nl": "Filter a given Collection.", "Heuristic": []}, {"nl": "Sets the name of transducer.", "Heuristic": []}, {"nl": "Convenience method for  {@link #getFirst(key, false)}.", "Heuristic": ["H1"]}, {"nl": "Tests to ensure  {@link S3AOutputStream#write(byte[])} calls the underlying output stream.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.SentenceFactory#createParser(java.lang.String)}.", "Heuristic": ["H1"]}, {"nl": "Add listener.", "Heuristic": ["H2"]}, {"nl": "Removes the \"file://\" prefix from the given URI string, if applicable. If the given URI string doesn't have a \"file://\" prefix, it is returned unchanged.", "Heuristic": []}, {"nl": "Remove the project.", "Heuristic": []}, {"nl": "Check for read timed out", "Heuristic": []}, {"nl": "Adds a ReplacedElement containing an image to a cache of images for quick lookup.", "Heuristic": []}, {"nl": "Sets the error msg.", "Heuristic": []}, {"nl": "Returns the list of possible federation tokens for this Gitblit instance.", "Heuristic": ["H1"]}, {"nl": "save a contact", "Heuristic": ["H1"]}, {"nl": "First byte of a base58 encoded P2SH address.  P2SH addresses are defined as part of BIP0013.", "Heuristic": []}, {"nl": "Get the y coordinate for the step at the given index", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns default list of auth scheme names in their order of preference.", "Heuristic": []}, {"nl": "Destroy the log service.", "Heuristic": []}, {"nl": "Releases an object of type T, this must be called after the thread is done using a resource obtained by acquire.", "Heuristic": []}, {"nl": "Reads given policy resource as PolicyDTO", "Heuristic": ["H1"]}, {"nl": "Called when the a change in the shown pages has been completed.  At this point you must ensure that all of the pages have actually been added or removed from the container as appropriate.", "Heuristic": ["H1"]}, {"nl": "Main method.", "Heuristic": ["H2"]}, {"nl": "Returns", "Heuristic": ["H2"]}, {"nl": "Gets the value of the comment property.", "Heuristic": []}, {"nl": "Returns the CSS name of this property, e.g. \"font-family\".", "Heuristic": []}, {"nl": "Gets the cssValueTypeDesc attribute of the  {@link CSSValue} object", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Optional.", "Heuristic": ["H2"]}, {"nl": "Give a chance for a Binding to customize their message", "Heuristic": []}, {"nl": "Get the filters", "Heuristic": []}, {"nl": "Evaluate the result of executing the specified xpath syntax select expression on the specified document", "Heuristic": ["H1"]}, {"nl": "Clears all connections but keeps location position informations.", "Heuristic": ["H1"]}, {"nl": "Resolves serialized instance of enumeration value.", "Heuristic": []}, {"nl": "Add a difference group. If the difference group identifier already exists the old difference group will be overwritten.", "Heuristic": []}, {"nl": "array begin.", "Heuristic": ["H1", "H2"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.GSAParser#getHorizontalDOP()}.", "Heuristic": ["H1"]}, {"nl": "check that no key is entered twice", "Heuristic": ["H1"]}, {"nl": "Get Application LOG path. Used to backup database files also", "Heuristic": ["H1"]}, {"nl": "decode the Hex encoded String data writing it to the given output stream, whitespace characters will be ignored.", "Heuristic": ["H1"]}, {"nl": "It might seem odd to return 'true' if a property == FALSE, but it is required sometimes. Returns false if a value is either the String \"false\" (regardless of case)  or Boolean.FALSE.", "Heuristic": ["H1"]}, {"nl": "size of the set", "Heuristic": ["H1"]}, {"nl": "Flushes the events from the datastore.", "Heuristic": ["H1"]}, {"nl": "Sets up all dependencies before a test runs.", "Heuristic": []}, {"nl": "Obtains the thread, if there is one.", "Heuristic": []}, {"nl": "Produce a comma delimited text from a JSONArray of JSONObjects. The first row will be a list of names obtained by inspecting the first JSONObject.", "Heuristic": []}, {"nl": "Input Stream management not safe", "Heuristic": []}, {"nl": "Tests the constructor with a negative offset.", "Heuristic": []}, {"nl": "Returns fully qualified name of the enumeration type.", "Heuristic": []}, {"nl": "Create a new StorageLevel object.", "Heuristic": []}, {"nl": "Sets a list of URIs the AuthorizationService may return the authorization code to.", "Heuristic": []}, {"nl": "Create an instance of  {@link JAXBElement }{@code }}", "Heuristic": ["H1"]}, {"nl": "Get the max-age of this cookie", "Heuristic": []}, {"nl": "Returns a BufferedImage using the specified width and height. By default this returns an image compatible with the screen (if not in \"headless\" mode) formatted for RGB.", "Heuristic": ["H1"]}, {"nl": "Create a temporary directory.", "Heuristic": []}, {"nl": "Creates a new server, binding to any available ephemeral port.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Sets the fetcher start time stamp.", "Heuristic": []}, {"nl": "Returns the naive similarity score.", "Heuristic": []}, {"nl": "return the vertical position of this ball", "Heuristic": ["H1"]}, {"nl": "Here, we attempt to get the password from the private  alias/passwords map.", "Heuristic": ["H1"]}, {"nl": "Set the ID of satellite vehicle, for example \"05\".", "Heuristic": []}, {"nl": "Checks where the key exists in heap or not", "Heuristic": []}, {"nl": "Extracts the sent-by host from a Via header.", "Heuristic": []}, {"nl": "Gets the value of the elem2 property.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.GLLParser#setTime(Time)}.", "Heuristic": ["H1"]}, {"nl": "Returns whether the checksum held in a byte buffer holding a RUDP segment is correct.", "Heuristic": ["H1"]}, {"nl": "Recebe um  {@link Grafo} e retorna uma {@link List} com os seus vertices ordenados.", "Heuristic": ["H1"]}, {"nl": "Sets the equipped item of the AI", "Heuristic": []}, {"nl": "Verify that the client is authorized to read from the given stream.", "Heuristic": []}, {"nl": "Sets the  {@link ListStatusOptions#mLoadMetadataType}.", "Heuristic": ["H1"]}, {"nl": "Get plugin by its name", "Heuristic": []}, {"nl": "Start or stop the pass timer.", "Heuristic": []}, {"nl": "Tests that an exception is thrown in the  {@link BlockMetadataManagerView#getBlockMeta(long)}method when the block does not exist.", "Heuristic": ["H1"]}, {"nl": "Sets the source.", "Heuristic": []}, {"nl": "Applies the default umask for newly created files to the mode bits.", "Heuristic": ["H1"]}, {"nl": "Percent-encode values according the RFC 3986. The built-in Java URLEncoder does not encode according to the RFC, so we make the extra replacements.", "Heuristic": []}, {"nl": "Gets the cached expiration date from a Bundle.", "Heuristic": []}, {"nl": "Creates an empty file and its intermediate directories if necessary.", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.parser.RMCParser#getMonth()}.", "Heuristic": ["H1"]}, {"nl": "Sets the current working Document.", "Heuristic": []}, {"nl": "Clears all of the previously set sounds and events.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the billTo property.", "Heuristic": []}, {"nl": "Tests to ensure IOException is thrown if  {@link HttpURLConnection#getOutputStream()} throws anIOException.", "Heuristic": ["H1"]}, {"nl": "Get the secret", "Heuristic": []}, {"nl": "The symbol we make the transition on.", "Heuristic": []}, {"nl": "Process the OPTIONS method.", "Heuristic": []}, {"nl": "Two decisions are considered to be equal if their names are equal. The priority is not considered. {@inheritDoc}", "Heuristic": []}, {"nl": "Retrieves the addressing properties from the current message.", "Heuristic": []}, {"nl": "Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData.Products.Product }", "Heuristic": ["H1"]}, {"nl": "Test method for  {@link ActivityController#deregisterUserSession(ServerSession,ServerMessage)}Verifies that  {@code NullPointerException} is thrown when {@code ServerSession} is null.", "Heuristic": ["H1"]}, {"nl": "Disconnects the network connection but doesn't request the server to settle the channel first (literally just unplugs the network socket and marks the stored channel state as inactive).", "Heuristic": []}, {"nl": "Returns the string value at the specified offset of the page. If a string was not stored at that location, the behavior of the method is unpredictable.", "Heuristic": []}, {"nl": "Configures this builder to produce tests appropriate for the given features.  This method may be called more than once to add features in multiple groups.", "Heuristic": []}, {"nl": "Implementation of  {@code PermissionEvaluator}. We do not support this method call.", "Heuristic": ["H1"]}, {"nl": "Start application with program arg -screenwidth=xx (with xx the width in cm) or -screensize=yy (with yy measured diagonally in inch).", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#getSpeed()} .", "Heuristic": ["H1"]}, {"nl": "Test of getCapabilities method, of class Device.", "Heuristic": []}, {"nl": "Writes a checkpoint record to the log. This log record contains the CHECKPOINT operator, and nothing else.", "Heuristic": []}, {"nl": "Returns the last of the given 2 positions i.e. if pos1 ends after pos2, then last(pos1, pos2) = pos1. Returns null if the given 2 positions are not comparable.", "Heuristic": []}, {"nl": "Set the identifier corresponding to a transformed version of this token", "Heuristic": []}, {"nl": "Returns the current capacity. The capacity is the amount of storage available for newly appended bytes, beyond which an allocation will occur.", "Heuristic": []}, {"nl": "For backward compatibility with HessianSkeleton", "Heuristic": []}, {"nl": "Returns the labels of all vertices within the graph.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RTEParser#isActiveRoute()}.", "Heuristic": ["H1"]}, {"nl": "Returns the distance between latMax and latMin in Kilometers.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.HDGParser#setDeviation(double)}.", "Heuristic": ["H1"]}, {"nl": "Returns the connected status of the client.", "Heuristic": []}, {"nl": "Description of the Method", "Heuristic": []}, {"nl": "Gets a value out of the object.", "Heuristic": []}, {"nl": "Create a Calendar instance for UTC time zone using the specified date.", "Heuristic": []}, {"nl": "Tests the  {@link DataNettyBuffer#getLength()} method.", "Heuristic": ["H1"]}, {"nl": "Sets the test id.", "Heuristic": ["H1"]}, {"nl": "Calculates y[i] - x[i] for all i", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.HDGParser#getDeviation()}.", "Heuristic": ["H1"]}, {"nl": "Test of getNumberRequests method, of class LogEntryInterval.", "Heuristic": []}, {"nl": "Adds the exception and message attribute values from the {@link Exception}.", "Heuristic": []}, {"nl": "reverse char array", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link Mode.Bits#or(Mode.Bits)} method.", "Heuristic": ["H1"]}, {"nl": "Start an activity. This method is defined to allow different methods of activity starting for newer versions of Android and for compatibility library.", "Heuristic": []}, {"nl": "Returns the estimated number of records in the table.", "Heuristic": []}, {"nl": "Computes the \"cost\" for the parameters given. cost = (1/N) Sum (f(x;p) - y)^2", "Heuristic": ["H1"]}, {"nl": "Requests a \"dangerous\" permission for the application at runtime. This is a helper method alternative to cordovaInterface.requestPermission() that does not require the project to be built with cordova-android 5.0.0+", "Heuristic": ["H1"]}, {"nl": "Not-null value; ensure this value is available before it is saved to the database.", "Heuristic": []}, {"nl": "Return the  {@link DAVResource} associated with a {@link URI}. If the specified  {@link URI} is relative it will be resolved againstthe root of this  {@link DAVRepository}.", "Heuristic": ["H1"]}, {"nl": "Splits the page at the specified position. A new page is created, and the records of the page starting at the split position are transferred to the new page.", "Heuristic": []}, {"nl": "Logs a Message.", "Heuristic": []}, {"nl": "Simple commodity method (also designed to increase readability of source code, and to decrease import in the calling class). Provide a pattern and a subject, it'll do the proper matching.", "Heuristic": []}, {"nl": "Add an alias/password pair to the callback mechanism.", "Heuristic": []}, {"nl": "mixin interface and delegates. all class must be public.", "Heuristic": ["H1"]}, {"nl": "Updates/writes a complete user object.", "Heuristic": []}, {"nl": "Configure this client to follow redirects from HTTPS to HTTP and from HTTP to HTTPS. If unset, protocol redirects will be followed. This is different than the built-in  {@code HttpURLConnection}'s default.", "Heuristic": ["H1"]}, {"nl": "Deletes the alternate under file system directory.", "Heuristic": []}, {"nl": "Retrieves the Content from the Specified File.", "Heuristic": []}, {"nl": "Test method for  {@link ActivityController#handleEvent(org.osgi.service.event.Event)}Verifies that  {@code IllegalArgumentException} is thrown when {@code Event}'s  {@link ActivityEvent#ID_KEY} property is empty.", "Heuristic": ["H1"]}, {"nl": "Deserialize only a single Thrift object (addressed by recursively using field id) from a byte record.", "Heuristic": ["H1"]}, {"nl": "Return the name of the type in its short form if its known to us otherwise return its name fully packaged.", "Heuristic": ["H1"]}, {"nl": "Gets the record at a given index.", "Heuristic": []}, {"nl": " Returns a  {@link org.ejml.interfaces.decomposition.QRDecomposition} that has been optimized for the specified matrix size.", "Heuristic": ["H1"]}, {"nl": "Sets the message body.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Set a custom listener for invocation of this menu item.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.VHWParser#VHWParser(java.lang.String)}.", "Heuristic": ["H1"]}, {"nl": "Processes the internal buffer, converting it into packets if enough data is available.", "Heuristic": []}, {"nl": "Create an instance of  {@link JAXBElement }{@code }}", "Heuristic": ["H1"]}, {"nl": "Flips bit i.", "Heuristic": []}, {"nl": "Returns the unbiased sample variance of the values. If this dataset is a sample drawn from a population, this is an unbiased estimator of the population variance of the population. The count must be greater than one. This is not guaranteed to return zero when the dataset consists of the same value multiple times, due to numerical errors. However, it is guaranteed never to return a negative result. Non-finite values If the dataset contains any non-finite values ( {@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or  {@link Double#NaN}) then the result is  {@link Double#NaN}.", "Heuristic": ["H1"]}, {"nl": "Get a method from the current classifier not yet modeled.", "Heuristic": []}, {"nl": "Set the Date that this Token was Created", "Heuristic": []}, {"nl": "Sets value of the  {@link CoreConnectionPNames#TCP_NODELAY} parameter.", "Heuristic": ["H1"]}, {"nl": "Obtains the next header from this iteration.", "Heuristic": []}, {"nl": "Just a wrapper to  {@link #check(String)}.", "Heuristic": ["H1"]}, {"nl": "Adds the child in front of any other childs.", "Heuristic": ["H1"]}, {"nl": "Determines if the buffer is empty.", "Heuristic": []}, {"nl": "Returns a function that ignores its input and returns the result of  {@code supplier.get()}. Java 8 users: use the lambda expression  {@code o -> supplier.get()} instead.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.HDGParser#setHeading(double)}.", "Heuristic": ["H1"]}, {"nl": "Gets the next storage tier view.", "Heuristic": []}, {"nl": "Just for debugging XML feeds.", "Heuristic": []}, {"nl": "Add whitelist to this host file. This supports simple regex in entries.", "Heuristic": []}, {"nl": "Estimates the distinct number of field values in the join. Since the join does not increase or decrease field values, the estimate is the same as in the appropriate underlying query.", "Heuristic": []}, {"nl": "Returns the exact path for a file. This path will be the canonical path unless an exception is thrown in which case it will be the absolute path.", "Heuristic": []}, {"nl": "Get the preferred group length.", "Heuristic": []}, {"nl": " This implementation of the Frobenius norm is a straight forward implementation and can be susceptible for overflow/underflow issues.  A more resilient implementation is {@link #normF}. ", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Sums up the square of each element in the matrix.  This is equivalent to the Frobenius norm squared.", "Heuristic": ["H1"]}, {"nl": "Error log message with printf formatting.", "Heuristic": ["H1"]}, {"nl": "Called when the EventDispatcher is done with an event, either because it was dispatched or because it was coalesced with another Event.", "Heuristic": []}, {"nl": "Determine if current messaging role is that of requestor.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns the field whose values will be modified", "Heuristic": []}, {"nl": "Takes in a list of file locations instead of actual files and renames/saves them", "Heuristic": []}, {"nl": "Validate the incoming request for mandatory parameters.", "Heuristic": []}, {"nl": "Convenience method, equivalent to calling {@link #decompress(byte[],int,int) decompress(src, 0, destLen)}.", "Heuristic": ["H1"]}, {"nl": "Splits `text` into words and counts them.", "Heuristic": []}, {"nl": "Modifies goal and map information and returns the modified heuristic function.", "Heuristic": []}, {"nl": "Provide number of REJECT decisions for Emtpy Annotation Mutations.", "Heuristic": ["H1"]}, {"nl": "Tests for the  {@link BufferedBlockOutStream#remaining()} method.", "Heuristic": ["H1"]}, {"nl": "Gets all tierViews before certain tierView. Throws an  {@link IllegalArgumentException} if thetierAlias is not found.", "Heuristic": ["H1"]}, {"nl": "Returns the same key with the private part removed. May return the same instance.", "Heuristic": []}, {"nl": "Returns the value.", "Heuristic": []}, {"nl": "Returns the current mode:  {@link #INPUT_MODE}: the buffer is in the input mode.  {@link #OUTPUT_MODE}: the buffer is in the output mode.", "Heuristic": ["H1"]}, {"nl": "A version of  {@code heartbeat} which returns a {@link Future} representing completion of therecompute plan. This is especially useful for tests.", "Heuristic": ["H1"]}, {"nl": "Remove PropertyChangeListener.", "Heuristic": []}, {"nl": "Perform the XSLT transformation specified in the constructor", "Heuristic": []}, {"nl": "Gets all Parameters.", "Heuristic": []}, {"nl": "Gets the file size.", "Heuristic": []}, {"nl": "Adds a CSS property to a component. e.g.: key = background-color value = yellow", "Heuristic": []}, {"nl": "Sets an object value in the object.", "Heuristic": []}, {"nl": "Return linked stat source", "Heuristic": []}, {"nl": "Called when the connection is being finalized after receiving the response. Use this to do any cleanup / resource freeing.", "Heuristic": []}, {"nl": "Test for the  {@link LocalFileBlockWriter#append(ByteBuffer)} method.", "Heuristic": ["H1"]}, {"nl": "Index a single node for visitation by rules.", "Heuristic": []}, {"nl": "Gets the test id.", "Heuristic": ["H1"]}, {"nl": "Get items count", "Heuristic": []}, {"nl": "Add a short field to the stream. \\param value The short value to be added.", "Heuristic": ["H1"]}, {"nl": "Prints the contents of the index. Should be used for development and testing, not production.", "Heuristic": []}, {"nl": "Get the transaction output changes if they have been calculated, otherwise null. Only one of this and getTransactions() will return a non-null value.", "Heuristic": []}, {"nl": "Set the String corresponding to the CallbackHandler class.", "Heuristic": []}, {"nl": "Calculates the size of the ROI", "Heuristic": []}, {"nl": "Internal method that updates the Tree from the String", "Heuristic": []}, {"nl": "Add blacklist to this hosts file", "Heuristic": []}, {"nl": "Gets the exp data set id.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link com.alibaba.dubbo.registry.support.injvm.InjvmRegistry#subscribe(java.util.Map,com.alibaba.dubbo.registry.support.NotifyListener)}.", "Heuristic": ["H1"]}, {"nl": "Sets the exp msg.", "Heuristic": []}, {"nl": "Sets the album / artwork picture to be displayed on the remote control.", "Heuristic": []}, {"nl": "When in a sequence of characters that can be copied directly, interrupts the sequence and copies it to the output buffer.", "Heuristic": []}, {"nl": "Return the external ID of an action.", "Heuristic": []}, {"nl": "Returns the string value of a configuration property.", "Heuristic": []}, {"nl": "Finds the length of a byte array. Either by decoding the length from the format or using the remaining size of the stream.", "Heuristic": []}, {"nl": "Determines whether  {@code specifier} represents a valid {@link HostSpecifier} as described inthe documentation for  {@link #fromValid(String)}.", "Heuristic": ["H1"]}, {"nl": "returns the class name corresponding to a number", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.HDMParser#setHeading(double)}.", "Heuristic": ["H1"]}, {"nl": "Checks if the given byte array starts with an increasing sequence of bytes of the given length, starting from 0.", "Heuristic": []}, {"nl": "add an entry", "Heuristic": ["H1"]}, {"nl": "Starts the master.", "Heuristic": []}, {"nl": "Set the identifier associated with this token", "Heuristic": []}, {"nl": "Ensures that the given buffer contains at least the given number of bytes after the given offset.", "Heuristic": []}, {"nl": "Tests the  {@link ClientRWLock#tryLock()} method.", "Heuristic": ["H1"]}, {"nl": "Sets the fontMapping attribute of the FontResolver object", "Heuristic": []}, {"nl": "Sets the readonly flag.", "Heuristic": ["H1"]}, {"nl": "Estimates the length of formatted parameters.", "Heuristic": []}, {"nl": "Gets the test id.", "Heuristic": ["H1"]}, {"nl": "Returns the entries as a List.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMCParser#getVariation()} .", "Heuristic": ["H1"]}, {"nl": "Return the difference in minutes between now and the date.", "Heuristic": []}, {"nl": "Return the directory into which we put our self-extracted native libraries and make sure it exists.", "Heuristic": []}, {"nl": "Getter for the denied extensions of a file type.", "Heuristic": []}, {"nl": "Tests the  {@link RPCBlockReadResponse#getEncodedLength()} method.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Helper for success callbacks that just returns the Status.OK by default", "Heuristic": ["H1"]}, {"nl": "Format the template with args, only supports the placeholder {@code %s}.", "Heuristic": ["H1"]}, {"nl": "Return a list containing  {@code o1}, ...,  {@code o3}.", "Heuristic": ["H1"]}, {"nl": "Assert that the provided object is an instance of the provided class. Assert.instanceOf(Foo.class, foo);", "Heuristic": []}, {"nl": "Return a WSDL definition model for a server.", "Heuristic": []}, {"nl": "Used to read only single data", "Heuristic": []}, {"nl": "Description:", "Heuristic": ["H2"]}, {"nl": "Validates the collected sentences by checking the ages of each sentence and then by calling  {@link #isValid()}. If extending implementation has no validation criteria, it should return always true.", "Heuristic": ["H1"]}, {"nl": "Add a file with a relative path - should still be added and not be detected as a sym link.", "Heuristic": ["H1"]}, {"nl": "If the supplied  {@link Class} has a declared {@link Method} whose signature matchesthat of the supplied  {@link Method}, then this matching  {@link Method} is returned,otherwise  {@code null} is returned.", "Heuristic": ["H1"]}, {"nl": "Write a HashMap to a Parcel, class of key and value can parcelable both", "Heuristic": ["H1"]}, {"nl": "Get a boolean form the internal JSONObject", "Heuristic": []}, {"nl": "Minimum size of a block that we should start using memory map rather than reading in through normal IO operations. This prevents Spark from memory mapping very small blocks. In general, memory mapping has high overhead for blocks close to or below the page size of the OS.", "Heuristic": []}, {"nl": "Gets the title attribute of the StylesheetInfo object", "Heuristic": []}, {"nl": "Obtains a buffer for formatting.", "Heuristic": []}, {"nl": "Sets the modified date.", "Heuristic": []}, {"nl": "Returns its argument if it is non-negative, zero if it is negative.", "Heuristic": []}, {"nl": "Currently unused", "Heuristic": ["H2"]}, {"nl": "Utility function to determine the presence of a key.  The default is false.", "Heuristic": []}, {"nl": "Gets a future which returns this when the channel is successfully opened, or throws an exception if there is an error before the channel has reached the open state. After this future completes successfully, you may call {@link PaymentChannelClientConnection#incrementPayment(java.math.BigInteger)} to begin paying the server.", "Heuristic": ["H1"]}, {"nl": "Obtains the charset for encoding {@link org.apache.ogt.http.auth.Credentials}.If not configured, {@link HTTP#DEFAULT_PROTOCOL_CHARSET}is used instead.", "Heuristic": ["H1"]}, {"nl": "Returns a string that is used to end a graph.", "Heuristic": []}, {"nl": "Gets the modified date.", "Heuristic": []}, {"nl": "Sets the value at position  {@code index}.", "Heuristic": ["H1"]}, {"nl": "Int to little-endian bytes: writes x to buf[offset ..].", "Heuristic": ["H1"]}, {"nl": "Add an item view at the given index.", "Heuristic": []}, {"nl": "Make a request to the Facebook Graph API with the given string parameters using an HTTP GET (default method).  See http://developers.facebook.com/docs/api  Note that this method is asynchronous and the callback will be invoked in a background thread; operations that affect the UI will need to be posted to the UI thread or an appropriate handler.  This method is deprecated.  See  {@link Facebook} and {@link com.facebook.Request} for more info.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the access property.", "Heuristic": []}, {"nl": "Tests whether item is contained by range", "Heuristic": []}, {"nl": "Configures the  {@link Api}", "Heuristic": ["H1"]}, {"nl": "Returns true if the specified value was absolute (even if we have a computed value for it), meaning that either the value can be used directly (e.g. pixels) or there is a fixed context-independent conversion for it (e.g. inches). Proportional types (e.g. %) return false.", "Heuristic": []}, {"nl": "Check whether we deal with a Macintosh.", "Heuristic": []}, {"nl": "get icon path", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "See  {@link FloatBuffer#put(FloatBuffer)}", "Heuristic": ["H1"]}, {"nl": "Test for getLongitude()", "Heuristic": []}, {"nl": "Tests the  {@link RPCFileReadRequest#RPCFileReadRequest(long,long,long)} constructor with avalid length.", "Heuristic": ["H1"]}, {"nl": "Returns true if this objects chainWork is higher than the others.", "Heuristic": []}, {"nl": "Returns the round trip time for this ping in nanoseconds, or -1 if the response was cancelled, or -2 if the timeout elapsed before the round trip completed.", "Heuristic": []}, {"nl": "Inits the.", "Heuristic": ["H1", "H2"]}, {"nl": "Error log message.", "Heuristic": []}, {"nl": "Close the connection", "Heuristic": []}, {"nl": "For example for the uri: alluxio://host:1000/foo/bar/baz, baz is the name.", "Heuristic": ["H1"]}, {"nl": "The hash of the transaction which holds this output.", "Heuristic": []}, {"nl": "&lt;a&gt; &lt;b&gt; &lt;b&gt; &lt;/a&gt;", "Heuristic": ["H1"]}, {"nl": "Adds an Identity Provider to the given tenant", "Heuristic": []}, {"nl": "Method ignorableWhitespace.", "Heuristic": []}, {"nl": " Append a hashCode for an Object array. ", "Heuristic": []}, {"nl": "Gets the value of the message property.", "Heuristic": []}, {"nl": "Sets the value of the filepath property.", "Heuristic": ["H1"]}, {"nl": "Dispose resources used by this  {@link PrinterRenderer}. This does NOT dispose the attached  {@link Printer}.", "Heuristic": ["H1"]}, {"nl": "In contrast to  {@link #getZipName()} returns the member'sname without the prepended name of the project (but with the extension).  TODO: This is not used anywhere - shall we remove it?", "Heuristic": ["H1"]}, {"nl": "Returns the number of satoshis of this monetary value. It's deprecated in favour of accessing  {@link #value}directly.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the address property.", "Heuristic": []}, {"nl": "Set the list of accepted encryption algorithms. A request can contain a wst:EncryptionAlgorithm uri to use to encrypt an issued token. The algorithm specified must be contained in this list. The default algorithms are 3-DES, AES-128, AES-128 GCM, AES-192, AES-192 GCM, AES-256 and AES-256 GCM.", "Heuristic": ["H1"]}, {"nl": "Sets the rendering hints to apply to the Graphics2D instance used by the renderer; see {@link java.awt.Graphics2D#setRenderingHints(java.util.Map)}. The Map need not specify values for all properties; any settings in this map will be applied as override to the default settings, and will not replace the entire Map for the Graphics2D instance.", "Heuristic": ["H1"]}, {"nl": "Internal function for computing the decomposition.", "Heuristic": []}, {"nl": "Simply return true is the image is equal to keyword 'this' or 'super'.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#getTime()} .", "Heuristic": ["H1"]}, {"nl": "Gets the value of the string1 property.", "Heuristic": []}, {"nl": "Tests  {@link BaseKeyValuePartitionWriter#byteCount()} works.", "Heuristic": ["H1"]}, {"nl": "Here, we attempt to get the password from the private alias/passwords map.", "Heuristic": []}, {"nl": "Adds the given values to the dataset.", "Heuristic": []}, {"nl": "Sets the username of the user", "Heuristic": []}, {"nl": "Creates an OpenGraphObject suitable for posting via, e.g., a native Share dialog. The object will have no properties other than a 'create_object' and 'data' property, ready to be populated.", "Heuristic": []}, {"nl": "Marks this directory as one that has been removed, indicating we should also remove all the directory contents.", "Heuristic": []}, {"nl": "Returns an iterator over the headers with a given name in this group.", "Heuristic": []}, {"nl": "Obtains the proxy selector to use.", "Heuristic": []}, {"nl": "Rebuild the host:port string, including brackets if necessary.", "Heuristic": []}, {"nl": "Gets the visited attribute of the StandardAttributeResolver object", "Heuristic": []}, {"nl": "Executes the specified JavaScript Command", "Heuristic": ["H1"]}, {"nl": "Complementary operation to filterOnly", "Heuristic": []}, {"nl": "Computes a metric identified by its code on a operation AST node.", "Heuristic": ["H1"]}, {"nl": "Gets the maximum number of connections allowed.", "Heuristic": []}, {"nl": "Update the set of listeners based on the given event.  The default implementation just removes all listeners, and then  re-initialises completely - this is method 1.  A more efficient way would be to dissect  the propertyChangeEvent, and only adapt the listeners that need to be adapted - this is method 2.  Method 2 is explained by the code below that is commented out. Method 1 is the easiest to implement, since at every arrival of an event, we just remove all old listeners, and then inspect the current model,  and add listeners where we need them. I.e. the advantage is  that we only need to traverse the model structure in one location, i.e.  the initialiseListener() method.", "Heuristic": ["H1"]}, {"nl": "Creates a general purpose solver.  Use this if you are not sure what you need.", "Heuristic": []}, {"nl": "Gets the data set id.", "Heuristic": ["H1"]}, {"nl": "Sets the modified date.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Alternate initialization entry point for use by ArgoEclipse. It leaves out telling GEF about bundles that it won't be able to access. NOTE: This must be called before any other methods are called to work properly.", "Heuristic": []}, {"nl": "Similar to load64, but allows offset + 8 > input.length, padding the result with zeroes. This has to explicitly reverse the order of the bytes as it packs them into the result which makes it slower than the native version.", "Heuristic": ["H1"]}, {"nl": "Returns the numeric value of a configuration property.", "Heuristic": []}, {"nl": "Sets the privacy for the group that will be created", "Heuristic": []}, {"nl": "Increments the Current Value.", "Heuristic": []}, {"nl": "Returns the collection of nodes in this network which are connected to edge.", "Heuristic": []}, {"nl": "Obtains the address of the local test server.", "Heuristic": []}, {"nl": "Get the WS-ReliableMessaging namespace to be used for encoding and decoding messages.", "Heuristic": []}, {"nl": "Remove a terminal", "Heuristic": []}, {"nl": "Estimates the number of distinct field values in the table, which is obtainable from the statistics manager.", "Heuristic": []}, {"nl": "wait until the given sequence number has been acknowledged", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link RPCFileReadRequest#getEncodedLength()} method.", "Heuristic": ["H1"]}, {"nl": "Factory method for creating a new SpringChain with default SpringConfig.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Check whether a given file exists in the system", "Heuristic": []}, {"nl": "Sets expiration date. Note: the object returned by this method is considered immutable. Changing it (e.g. using setTime()) could result in undefined behaviour. Do so at your peril.", "Heuristic": ["H1"]}, {"nl": "Gets the checksum type.", "Heuristic": []}, {"nl": "Test of getName method, of class TestDosAttack.", "Heuristic": []}, {"nl": "Get the number of milliseconds for the inactivity timeout.", "Heuristic": []}, {"nl": "Create a SLA evaluator to be used during Materialization", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Creates a parser for specified NMEA 0183 sentence String. The parser implementation is selected from registered parsers according to sentence type. The returned instance must be cast in to correct sentence interface, for which the type should first be checked by using the {@link Sentence#getSentenceId()} method.", "Heuristic": ["H1"]}, {"nl": "Returns the timestamp service.", "Heuristic": []}, {"nl": "manually set the last version name - for testing purposes only", "Heuristic": ["H1"]}, {"nl": "Initialize the Hessian stream with the underlying input stream.", "Heuristic": []}, {"nl": "Not supported, class is immutable. A method to set the string value with the specified unit.", "Heuristic": []}, {"nl": "Creates an instance of  {@link DefaultHttpResponseFactory} to be usedby HTTP connections for creating  {@link HttpResponse} objects. This method can be overridden in a super class in order to provide a different implementation of the  {@link HttpResponseFactory} interface.", "Heuristic": ["H1"]}, {"nl": "Set whether proof of possession is required or not to cancel a token", "Heuristic": []}, {"nl": "This method returns policy publisher", "Heuristic": []}, {"nl": "Get Application options. Currently only video options.", "Heuristic": ["H1"]}, {"nl": "Should be called before once before any other method is called", "Heuristic": []}, {"nl": "Sets the path attribute.", "Heuristic": []}, {"nl": "Call back when loading.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Set the error queue.", "Heuristic": []}, {"nl": "Sets the stylesheet attribute of the StylesheetInfo object", "Heuristic": []}, {"nl": "Gets the value of the auth property.", "Heuristic": []}, {"nl": "Create an instance of  {@link JAXBElement }{@code }}", "Heuristic": ["H1"]}, {"nl": "Puts the specified name/value pair in the specified JSON object.", "Heuristic": []}, {"nl": "Dispatches an  {@link AccessibilityEvent} to the host {@link View} first and thento its children for adding their text content to the event.  The default implementation behaves as {@link View#dispatchPopulateAccessibilityEvent(AccessibilityEvent) View#dispatchPopulateAccessibilityEvent(AccessibilityEvent)} forthe case of no accessibility delegate been set. ", "Heuristic": ["H1"]}, {"nl": "Get the color name of the color that is exactly equal to the given hex color value (as a 6-digit hex String).", "Heuristic": []}, {"nl": "Constructs the generator from a journal entry.", "Heuristic": []}, {"nl": "Returns the schema of the index join.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets the batch id.", "Heuristic": ["H1"]}, {"nl": "write lines.", "Heuristic": ["H1", "H2"]}, {"nl": "Adds a one-way connection to the map.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets the client state token which needs to be retained in a hidden form field", "Heuristic": []}, {"nl": "Adds a string field to the schema. The length is the conceptual length of the field. For example, if the field is defined as varchar(8), then its length is 8.", "Heuristic": ["H1"]}, {"nl": "Assert that a collection has elements; that is, it must not be {@code null} and must have at least one element.Assert.notEmpty(collection, \"Collection must have elements\");", "Heuristic": ["H1"]}, {"nl": "Set up.", "Heuristic": ["H2"]}, {"nl": "Gets the bloack size.", "Heuristic": ["H1"]}, {"nl": "Returns true if property has been defined in this style.", "Heuristic": []}, {"nl": "Gets the value of the source property.", "Heuristic": []}, {"nl": "Checks if is SP error out.", "Heuristic": []}, {"nl": "Write the body of the response.", "Heuristic": []}, {"nl": "Checks whether the session has timed out.", "Heuristic": []}, {"nl": "Returns the list as a String representation.", "Heuristic": []}, {"nl": "The hashCode of a move is 8y+x.", "Heuristic": []}, {"nl": "Replaces the current maximum by the field value in the current record, if it is higher.", "Heuristic": []}, {"nl": "Returns the FpsInfo as if stop had been called at the given upToTimeMs. Only valid if monitoring was started with  {@link #startAndRecordFpsAtEachFrame()}.", "Heuristic": ["H1"]}, {"nl": "Optional.", "Heuristic": ["H2"]}, {"nl": "Check for Connection reset", "Heuristic": []}, {"nl": "Gets view from specified cache.", "Heuristic": []}, {"nl": "Gets a U2FService instance.", "Heuristic": []}, {"nl": "GET  /dish-collections/:id : get the \"id\" dishCollection.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Creates a scriptSig that can redeem a pay-to-pubkey output.", "Heuristic": ["H1"]}, {"nl": "Checks the behavior when the issuer is not known.", "Heuristic": []}, {"nl": "Provide the id to the ExtraDhcpOption's Builder.", "Heuristic": ["H1"]}, {"nl": "Returns true if there's another proxy to try.", "Heuristic": []}, {"nl": "Setea si la cuenta esta expirada o no.", "Heuristic": ["H1"]}, {"nl": "Gets the lang attribute of the StandardAttributeResolver object", "Heuristic": ["H1"]}, {"nl": "get int preferences", "Heuristic": ["H1"]}, {"nl": "Get the action that can redo the last undone action.", "Heuristic": []}, {"nl": "Returns the access token extractor.", "Heuristic": []}, {"nl": "Return list of devices as Collection", "Heuristic": []}, {"nl": "Setea si la cuenta esta bloqueada o no.", "Heuristic": ["H1"]}, {"nl": "Return all stations", "Heuristic": []}, {"nl": "Unpins any buffers still pinned by this transaction.", "Heuristic": []}, {"nl": "Log a debug message to the context logger.", "Heuristic": []}, {"nl": "Determine if this Gitblit instance is actively serving git repositories or if it is merely a repository viewer.", "Heuristic": ["H1"]}, {"nl": "Add a byte array field to the stream. \\param value The byte array value to be added.", "Heuristic": ["H1"]}, {"nl": "Gets a hashMap of the default mutation profiles.", "Heuristic": []}, {"nl": "Gets the value of the executionEndDateTime property.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#getNumber()} .", "Heuristic": ["H1"]}, {"nl": "Creates a new mode by applying the umask specified in configuration to this mode.", "Heuristic": ["H1"]}, {"nl": "order by increasing sequence number", "Heuristic": ["H1"]}, {"nl": "Closes idle connections.", "Heuristic": []}, {"nl": "Pass the event to the listener.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#getBearing()} .", "Heuristic": ["H1"]}, {"nl": "Remove a plugin from this container by its index", "Heuristic": []}, {"nl": "Scans list of base packages for all classes marked with specific annotations.", "Heuristic": []}, {"nl": "Saves the state to a stream (that is, serializes it).", "Heuristic": []}, {"nl": "Gets the value of the name property.", "Heuristic": []}, {"nl": "Sets the fetcher end time stamp.", "Heuristic": []}, {"nl": "Return the user name.", "Heuristic": ["H1"]}, {"nl": "Creates an empty file.", "Heuristic": []}, {"nl": "Creates an instance of  {@link HttpMessageParser} to be used for parsingHTTP responses received over this connection.  This method can be overridden in a super class in order to provide a different implementation of the  {@link HttpMessageParser} interface orto pass a different implementation of  {@link LineParser} to thethe default implementation  {@link HttpResponseParser}.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Get this node's flex, as defined by style.", "Heuristic": []}, {"nl": "once it is called, the list will restart from the zero scroll", "Heuristic": ["H1"]}, {"nl": "Get image", "Heuristic": ["H2"]}, {"nl": "Create an instance of  {@link CertificateInfo }", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets the SharedContext for layout and rendering.", "Heuristic": []}, {"nl": "Get ApplicationManagementService instance.", "Heuristic": []}, {"nl": "Destroy the memory locks service.", "Heuristic": []}, {"nl": "Write the 16-bit length of the given data followed by the data itself", "Heuristic": []}, {"nl": "Returns the eigenvalue at the specified index.", "Heuristic": []}, {"nl": "Returns the number of seconds this token can be valid after it was issued", "Heuristic": []}, {"nl": "Gets the minimum encoded size of the given value.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "See  {@link FloatBuffer#position(int)}", "Heuristic": ["H1"]}, {"nl": "Return a Coordinator engine.", "Heuristic": []}, {"nl": "Convert an amount expressed in the way humans are used to into satoshis.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the name property.", "Heuristic": []}, {"nl": "Returns the next character in the buffer.", "Heuristic": []}, {"nl": "Open an URL in the system's default browser.", "Heuristic": ["H1"]}, {"nl": "Return a position for a type object. Generate one if the type doesn't have one.", "Heuristic": []}, {"nl": "Gets the error code.", "Heuristic": []}, {"nl": "Helper function to check user can perform action on path.", "Heuristic": []}, {"nl": "Set a hash code associated with this token.", "Heuristic": []}, {"nl": "Getter for the new access token.", "Heuristic": []}, {"nl": "Set the Test-Source from all kind of types supported by  {@link Input#from(Object)}.", "Heuristic": ["H1"]}, {"nl": "Do nothing", "Heuristic": ["H2"]}, {"nl": "Get the ID of satellite vehicle, for example \"05\".", "Heuristic": []}, {"nl": "Get the target reference .", "Heuristic": ["H1"]}, {"nl": "Gets the singleton instance of this class.", "Heuristic": []}, {"nl": "Create an instance of  {@link RoleList }", "Heuristic": ["H1"]}, {"nl": "Warning log message.", "Heuristic": []}, {"nl": "Sets the value of the named field.", "Heuristic": []}, {"nl": "The backing script bytes which can be turned into a Script object.", "Heuristic": []}, {"nl": "Gets the active attribute of the StandardAttributeResolver object", "Heuristic": []}, {"nl": "Sets the serializer factory.", "Heuristic": ["H1"]}, {"nl": "Takes in any valid UCI command and executes it", "Heuristic": []}, {"nl": "Returns true if this connection has been idle for longer than {@code keepAliveDurationNs}.", "Heuristic": ["H1"]}, {"nl": "Attaches the debugger to the given  {@link ContextFactory}.", "Heuristic": ["H1"]}, {"nl": "Delete the authentication. That is important if the Authentication turned out to invalid. For example during login, if no ClientIdentity was associated with the given Credentials", "Heuristic": []}, {"nl": "Test if a repository path is for a personal repository.", "Heuristic": []}, {"nl": "Check if input is a valid IPv6 address", "Heuristic": []}, {"nl": "Specifies that each key (not value) stored in the map should be wrapped in a {@link WeakReference} (by default, strong references are used).Warning: when this method is used, the resulting map will use identity ( {@code ==}) comparison to determine equality of keys, which is a technical violation of the  {@link Map}specification, and may not be what you expect.", "Heuristic": ["H1"]}, {"nl": "Decomposes the matrix, extracts H and Q, then sees if it can recompute A using similar matrix stuff.", "Heuristic": []}, {"nl": "Gets the PMIDs.", "Heuristic": ["H1"]}, {"nl": "Get by index", "Heuristic": []}, {"nl": "Create a four-component configuration key.", "Heuristic": []}, {"nl": "Returns the field's name, prepended by \"maxof\".", "Heuristic": ["H1"]}, {"nl": "Returns the elapsed time from the start time.  This method assumes that the start time was previously set.", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.util.Time#getMinutes()}.", "Heuristic": ["H1"]}, {"nl": "Returns TermCounter keys for the URLS that have been indexed. Should be used for development and testing, not production.", "Heuristic": ["H1"]}, {"nl": "Get one site by id.", "Heuristic": ["H1"]}, {"nl": "Resolves a reference starting with a query string.", "Heuristic": []}, {"nl": "Return the time taken by the last task.", "Heuristic": []}, {"nl": "Returns the description of what each action does.", "Heuristic": []}, {"nl": "Utility function to cast a Type to a Class. This throws an unchecked exception if the Type is not a Class. The idea here is that these Type references should have been checked for  reasonableness before the point of calls to this function.", "Heuristic": ["H1"]}, {"nl": "Returns the string representation of the duration between now and the date.", "Heuristic": []}, {"nl": "Handle an unexpected condition (and print the error code).", "Heuristic": []}, {"nl": "Reset the static members for the TokenMapper.", "Heuristic": []}, {"nl": "Logs out the User.", "Heuristic": []}, {"nl": "Convert a MultiplicityRange bound string to an integer.", "Heuristic": []}, {"nl": "Get the name of the class for main method implementation.", "Heuristic": []}, {"nl": "Returns a byte bitfield with a given bit set.", "Heuristic": ["H1"]}, {"nl": "Returns true if and only if this instance represents zero monetary value, otherwise false.", "Heuristic": []}, {"nl": "Get a NotationProvider for the given language.", "Heuristic": []}, {"nl": "prints out usage information, with optional error message", "Heuristic": ["H1"]}, {"nl": "saves the @param array to file : @param fileName", "Heuristic": ["H1"]}, {"nl": "saving the file's bytearray", "Heuristic": ["H1"]}, {"nl": "Removes a child node from the node.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Calls a method on the given object instance with the given arguments.", "Heuristic": []}, {"nl": "Returns this address's explicitly-specified HTTP proxy, or null to delegate to the HTTP client's proxy selector.", "Heuristic": []}, {"nl": "Adds an operation to the class.", "Heuristic": []}, {"nl": "get JSONArray value.", "Heuristic": ["H1"]}, {"nl": "Add a content type rule to this set.", "Heuristic": []}, {"nl": "Create a program that satisfies an OP_CHECKMULTISIG program, using pre-encoded signatures.", "Heuristic": ["H1"]}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.util.Time#setHour(int)}.", "Heuristic": ["H1"]}, {"nl": "If using directly, consider using OwnedItem instead", "Heuristic": []}, {"nl": "Configures the OAuth scope. This is only necessary in some APIs (like Google's).", "Heuristic": []}, {"nl": "Tests the  {@link RPCBlockReadRequest#getEncodedLength()} method.", "Heuristic": ["H1"]}, {"nl": "Gets number of last item", "Heuristic": []}, {"nl": "Gets the offset of the data stored in this datagram packet.", "Heuristic": ["H1"]}, {"nl": "Calls evaluate method and returns sorted outcome.", "Heuristic": []}, {"nl": "Reads the SOAP 1.2 or SOAP 1.1 reference attribute.", "Heuristic": []}, {"nl": "Sets the resolver used to lookup remote objects.", "Heuristic": []}, {"nl": "Returns a location which is selected by random.", "Heuristic": []}, {"nl": "Gets an object value out of the object.", "Heuristic": []}, {"nl": "If a handler is connected, call its  {@link com.google.bitcoin.protocols.channels.PaymentChannelServer#close()}method thus disconnecting the TCP connection.", "Heuristic": ["H1"]}, {"nl": "Convert String date to Date type", "Heuristic": []}, {"nl": "is selected ?", "Heuristic": ["H1"]}, {"nl": "add item.", "Heuristic": ["H1", "H2"]}, {"nl": "Renames a repository role.", "Heuristic": []}, {"nl": "Implements BundleActivator.stop(). Does nothing since the framework will automatically unregister any registered services.", "Heuristic": []}, {"nl": "The most common use of \"unifiedBreak\": level 1, with an alternative of a single space.", "Heuristic": []}, {"nl": "Hash forward first 7 Characters", "Heuristic": []}, {"nl": "Returns the maximum number of threads to allow for background revalidations due to the  {@code stale-while-revalidate} directive. Avalue of 0 means background revalidations are disabled.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "No data available after this reset.", "Heuristic": []}, {"nl": "Sets a double value in the object.", "Heuristic": []}, {"nl": "Gets whether this result object is empty, i.e. contains no information flows", "Heuristic": []}, {"nl": "Allows third party apps to specify the scanning rectangle dimensions, rather than determine them automatically based on screen resolution.", "Heuristic": []}, {"nl": "saves the @param array to file : @param fileName", "Heuristic": ["H1"]}, {"nl": "Gets the string representing the access token.", "Heuristic": []}, {"nl": "Retrieve the group attributes by group name", "Heuristic": []}, {"nl": "Calculate how many milliseconds have passed since last frame.", "Heuristic": []}, {"nl": "Converts 'A' into a block matrix and call setA() on the block matrix solver.", "Heuristic": []}, {"nl": "Check whether the resource is healthy. If not retry. When this called, the resource is not in mResourceAvailable.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.MWVParser#getSpeedUnit()}.", "Heuristic": ["H1"]}, {"nl": "Test method for  {@link org.mitre.uma.service.impl.DefaultResourceSetService#saveNew(org.mitre.uma.model.ResourceSet)}.", "Heuristic": ["H1"]}, {"nl": "Prints input in console for debugging.", "Heuristic": []}, {"nl": "Adds an integer field to the schema.", "Heuristic": []}, {"nl": "Defines the hashcode.", "Heuristic": ["H1"]}, {"nl": "Gets the ids of the registered object instances.", "Heuristic": ["H1"]}, {"nl": "Returns the number of values that have been evicted.", "Heuristic": []}, {"nl": "Clears messages from queue", "Heuristic": ["H1"]}, {"nl": "Tests to ensure  {@link S3AOutputStream#flush()} calls the underlying output stream.", "Heuristic": ["H1"]}, {"nl": "Guaranteed to throw an exception and leave the underlying data unmodified.", "Heuristic": []}, {"nl": "Returns the ThreadLocal Session instance.  Lazy initialize the SessionFactory if needed.", "Heuristic": []}, {"nl": "Returns the class 'name' that was declared by class 'parent'.", "Heuristic": []}, {"nl": "Creates a new local Alluxio master with a isolated port.", "Heuristic": ["H1"]}, {"nl": "MINA does some funky things if we don't do this first.", "Heuristic": ["H1"]}, {"nl": "Get the ConditionsProvider", "Heuristic": []}, {"nl": "Sets the socket factory used to secure HTTPS connections. If unset, the  {@link HttpsURLConnection#getDefaultSSLSocketFactory() system-wide default} SSL socket factory will be used.", "Heuristic": ["H1"]}, {"nl": "Closes the manager, by unpinning the block.", "Heuristic": []}, {"nl": "Set the token Id", "Heuristic": ["H1"]}, {"nl": "Given an index in the range 0...size()-1, returns the value from the indexth key-value mapping that this SparseArray stores.", "Heuristic": ["H1"]}, {"nl": "getState returns a String representing the state in a UBL address.", "Heuristic": ["H1"]}, {"nl": "Closes both underlying scans.", "Heuristic": []}, {"nl": "Returns the adapter position of the first fully visible view. This position does not include adapter changes that were dispatched after the last layout pass.", "Heuristic": []}, {"nl": "Unlocks the given lock and releases the block lock for the given block id if the lock no longer in use.", "Heuristic": ["H1"]}, {"nl": "Accessor for the version of the client we're running. If we're running on the main line, this just returns 0.00.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the id property.", "Heuristic": ["H1"]}, {"nl": "Tests that an exception is thrown when trying to unlock a block via {@link BlockLockManager#unlockBlock(long)} which is not locked.", "Heuristic": []}, {"nl": "Gets the checksum type.", "Heuristic": []}, {"nl": "Sets the resolver used to lookup remote objects.", "Heuristic": []}, {"nl": "Create an instance of  {@link JAXBElement }{@code }}", "Heuristic": ["H1"]}, {"nl": "Sends a zoom command to the camera according to the user control", "Heuristic": []}, {"nl": "Get the current port number, failing if no port is defined.", "Heuristic": []}, {"nl": "Gets the value of the summary property.", "Heuristic": []}, {"nl": "Creates an  {@code AtomicReference} instance with no initial value.", "Heuristic": ["H1"]}, {"nl": "Test of getAddress method, of class Device.", "Heuristic": []}, {"nl": "Get the maximum lifetime in seconds for issued SAML token if requestor specifies lifetime element", "Heuristic": []}, {"nl": "Factory method for the routing component. Subclasses can override it and provide more advanced routing algorithms.", "Heuristic": []}, {"nl": "Changes local file's permission.", "Heuristic": []}, {"nl": "Sets the InputStream to be used as data source. If reader is running, it is first stopped and you must call  {@link #start()} to resume reading.", "Heuristic": ["H1"]}, {"nl": "Disconnect database", "Heuristic": ["H2"]}, {"nl": "Gets the value of the dates property.  This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a set method for the dates property.  For example, to add a new item, do as follows:  getDates().add(newItem);   Objects of the following type(s) are allowed in the list {@link String }", "Heuristic": ["H1"]}, {"nl": "Render the walls", "Heuristic": []}, {"nl": "Default Locale is set and resources Bundles are loaded.", "Heuristic": []}, {"nl": "Gets the parent of the file at a path.", "Heuristic": []}, {"nl": "Create an instance of  {@link JAXBElement }{@code }}", "Heuristic": ["H1"]}, {"nl": "Get the Date that this Token expires", "Heuristic": []}, {"nl": "Generate the key store name from the domain name", "Heuristic": []}, {"nl": "Sets the TrustManagers associated with this endpoint. This parameter may be set to null for system default behavior.", "Heuristic": []}, {"nl": "Mutator for the ReplyTo property.", "Heuristic": ["H1"]}, {"nl": "Return the UTC date and time in W3C format down to second (yyyy-MM-ddTHH:mm:ssZ). i.e.: 1997-07-16T19:20:30Z", "Heuristic": ["H1"]}, {"nl": "Maps the specified row and column to the specified value in the table. Neither the row nor the column nor the value can be null  The value can be retrieved by calling the get method with a row and column that is equal to the original row and column.", "Heuristic": ["H1"]}, {"nl": "Set the list of accepted signature algorithms. A request can contain a wst:SignatureAlgorithm uri to use to sign an issued token. The algorithm specified must be contained in this list. The default algorithms are RSA-SHA1.", "Heuristic": ["H1"]}, {"nl": "Test of setResponseString method, of class LogEntryRequest.", "Heuristic": []}, {"nl": "Provide explicit mappings to ReflectionServiceFactory.  {@inheritDoc}", "Heuristic": []}, {"nl": "Returns the status line's HTTP minor version. This returns 0 for HTTP/1.0 and 1 for HTTP/1.1. This returns 1 if the HTTP version is unknown.", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.parser.RMCParser#getMode()}.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMBParser#getSteerTo()}.", "Heuristic": ["H1"]}, {"nl": "Estimates the number of output records in the index selection, which is the same as the number of search key values for the index.", "Heuristic": []}, {"nl": "Get the Msg value.", "Heuristic": []}, {"nl": "Return the priority of the command.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns a singleton instance of OpenIDExtensionFactory", "Heuristic": []}, {"nl": "Add a new declaration to the current scope using a unique prefix and return the prefix. This is useful when one just wants to add a decl and doesn't want to have to deal with creating unique prefixes. If the namespace name is already declared and in scope, then the previously declared prefix is returned.", "Heuristic": ["H1"]}, {"nl": "Find touch event target view within the provided container given the coordinates provided via  {@link MotionEvent}.", "Heuristic": ["H1"]}, {"nl": "When adding a new substitution A-&gt;B to the map, we need to check if  there are already any existing substitutions, say C-&gt;A, and if so, replace them appropriately, in this case with C-&gt;B. This method allows subclasses to perform substitution on a value in the substitution map (B in the  example above). Subclasses may need to override this if the keys and values are not the same object.", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link BrowseOffersResponse.Return.OfferData.OfferMedia.OfferImage.Entry.Value }", "Heuristic": ["H1"]}, {"nl": "Required.", "Heuristic": ["H2"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RTEParser#setSentenceIndex(int)}.", "Heuristic": ["H1"]}, {"nl": "Step back.", "Heuristic": ["H2"]}, {"nl": "Call  {@link MotionEvent#getX(int)}. If running on a pre- {@android.os.Build.VERSION_CODES #HONEYCOMB} device,{@link IndexOutOfBoundsException} is thrown.", "Heuristic": ["H1"]}, {"nl": "Gets committed bytes for this dir. This includes all blocks, locked, pinned, committed etc.", "Heuristic": ["H1"]}, {"nl": "Tests conversion to thrift representation.", "Heuristic": []}, {"nl": "Return the default ClassLoader to use: typically the thread context ClassLoader, if available; the ClassLoader that loaded the ClassUtils class will be used as fallback.  Call this method if you intend to use the thread context ClassLoader in a scenario where you absolutely need a non-null ClassLoader reference: for example, for class path resource loading (but not necessarily for Class.forName, which accepts a null ClassLoader reference as well).", "Heuristic": ["H1"]}, {"nl": "Add an alias/password pair to the callback mechanism.", "Heuristic": []}, {"nl": "get wrapper.", "Heuristic": ["H1", "H2"]}, {"nl": "Creates a project scan for this query.", "Heuristic": []}, {"nl": "Asigna un nuevo grado al polonomio", "Heuristic": ["H1"]}, {"nl": "Calls the given  {@link RestUtils.RestCallable} and handles any exceptions thrown.", "Heuristic": ["H1"]}, {"nl": "Implements InputStream.read(int) in terms of InputStream.read(byte[], int, int). InputStream assumes that you implement InputStream.read(int) and provides default implementations of the others, but often the opposite is more efficient.", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.util.Date#setYear(int)}.", "Heuristic": ["H1"]}, {"nl": "Builds the qualified name of a constructor declaration.", "Heuristic": []}, {"nl": "Get stored session data", "Heuristic": []}, {"nl": "Unset Application management service implementation", "Heuristic": []}, {"nl": "Get a List of Strings that corresponds to the subject regular expression constraints from a JAXB CertificateConstraintsType", "Heuristic": ["H1"]}, {"nl": "Test method for {@link NotificationController#deregisterUserSession(ServerSession,ServerMessage)}Verifies that  {@code NullPointerException} is thrown when {@code ServerSession} is null.", "Heuristic": ["H1"]}, {"nl": "Retrieves a Tiled map (.tmx) from the system.", "Heuristic": ["H1"]}, {"nl": "Returns the  {@link StatusLine} from the origin {@link HttpResponse}.", "Heuristic": ["H1"]}, {"nl": "Return  {@code true} if any element in '{@code candidates}' is contained in ' {@code source}'; otherwise returns  {@code false}.", "Heuristic": ["H1"]}, {"nl": "Convert a JSONObject into a well-formed, element-normal XML string.", "Heuristic": []}, {"nl": "Test for getLatHemisphere()", "Heuristic": []}, {"nl": "Create an instance of  {@link PasswordCredentials }", "Heuristic": ["H1"]}, {"nl": "Verifies that two violations nodes with different  {@code beginColumn} arenot equal.", "Heuristic": ["H1"]}, {"nl": "This should always get called before calling  {@link LayoutEngine#layoutNode(CSSNode,float)}", "Heuristic": ["H1"]}, {"nl": "Read an  {@code int} from a line containing its decimal representation.", "Heuristic": ["H1"]}, {"nl": "Gets the exp data unit id.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.util.Date#equals(java.lang.Object)}.", "Heuristic": ["H1"]}, {"nl": "Sets the reg pcl test result details.", "Heuristic": ["H1"]}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.util.Time#setMinutes(int)}.", "Heuristic": ["H1"]}, {"nl": "Get the heap min without extracting the key", "Heuristic": []}, {"nl": "Gets a textual title for the notation suitable for use in a combo box or other such visual location.", "Heuristic": []}, {"nl": "Returns a  {@code TopKSelector} that collects the greatest {@code k} elements added to it,relative to the natural ordering of the elements, and returns them via  {@link #topK} indescending order.", "Heuristic": ["H1"]}, {"nl": "Constructs a String with all attributes in name = value format.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Method to create WSRealm for non-Carbon environment Recommended method", "Heuristic": []}, {"nl": "Store an XKMSCacheToken in the Cache using the given key", "Heuristic": []}, {"nl": "Returns the values in the container packaged in a bundle.", "Heuristic": []}, {"nl": "Gets the quality.", "Heuristic": []}, {"nl": "Get the value of album", "Heuristic": []}, {"nl": "Performs the actual layout and saves the results in  {@link #layout}", "Heuristic": ["H1"]}, {"nl": "Process a single chunk", "Heuristic": []}, {"nl": "Set time zone offset hours.", "Heuristic": []}, {"nl": "Returns an array containing all the Bitcoin nodes within the list.", "Heuristic": []}, {"nl": "Adds a source for the schema defintion.", "Heuristic": ["H1"]}, {"nl": "Gets the URI of the Stylesheet object", "Heuristic": []}, {"nl": "Returns true if the bit changed value.", "Heuristic": []}, {"nl": "Notifies observers about invalidating data", "Heuristic": []}, {"nl": "Note this will also set the  {@link TextureRegion} with the associated pGlobalTileID of the {@link TMXTiledMap}.", "Heuristic": ["H1"]}, {"nl": "Convenience method to return the block store location representing any dir in the tier.", "Heuristic": ["H1"]}, {"nl": "Returns the value at position  {@code index}.", "Heuristic": ["H1"]}, {"nl": "Ejecuta un turno para el Piloto dado.", "Heuristic": ["H1"]}, {"nl": "Enables or disables the timeout entirely. This may be useful if you want to store the timeout value but wish to temporarily disable/enable timeouts. The default is for timeoutEnabled to be true but timeoutMillis to be set to 0 (ie disabled). This call will reset the current progress towards the timeout.", "Heuristic": ["H1"]}, {"nl": "The value which this Transaction output holds.", "Heuristic": []}, {"nl": "Gets the value of the items property.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link com.sqa.em.util.helper.RequestInput#getDouble(java.lang.String)}.", "Heuristic": ["H1"]}, {"nl": "This method signs requests in query-string form. It returns a URL that should be used to fetch the response. The URL returned should not be modified in any way, doing so will invalidate the signature and Amazon will reject the request.", "Heuristic": []}, {"nl": "retrieves the underlying node", "Heuristic": ["H1"]}, {"nl": "Tests that an exception is thrown when trying to validate a lock of a block via {@link BlockLockManager#validateLock(long,long,long)} which is not locked.", "Heuristic": ["H1"]}, {"nl": "Adds an OAuth callback url", "Heuristic": ["H1"]}, {"nl": "Autogenerates a factory mapping skeleton for the given class.", "Heuristic": ["H1"]}, {"nl": "Return the task launch id for the task.", "Heuristic": ["H1"]}, {"nl": "Removes all of the specified ranges from this range set (optional operation). This is equivalent to calling  {@link #remove} on each of the ranges in {@code other} inturn.", "Heuristic": ["H1"]}, {"nl": "Gets a future which returns this when the channel is successfully opened, or throws an exception if there is an error before the channel has reached the open state. After this future completes successfully, you may call {@link PaymentChannelClientConnection#incrementPayment(Coin)} or {@link PaymentChannelClientConnection#incrementPayment(Coin,com.google.protobuf.ByteString)} to begin paying the server.", "Heuristic": ["H1"]}, {"nl": "Gets the test id.", "Heuristic": ["H1"]}, {"nl": "Returns whether a given state is the downloading state.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Creates a new Hibernate session factory.", "Heuristic": []}, {"nl": "Sets the uri attribute of the StylesheetInfo object", "Heuristic": ["H1"]}, {"nl": "This is to get canceled tokens from token store", "Heuristic": []}, {"nl": "Retrieves a Texture from the file system.", "Heuristic": []}, {"nl": "Has this token expired?", "Heuristic": []}, {"nl": "Returns the string value of the specified field. The value is obtained from whichever scan contains the field.", "Heuristic": []}, {"nl": "Sets the value of the username property.", "Heuristic": []}, {"nl": "Used to specify a different WS-Addressing namespace URI,  so as to cause MAPs to be exposed (i.e. encoded in externalized message with a different WS-Addressing version).", "Heuristic": ["H1"]}, {"nl": "Empty implementation of the ClipboardOwner interface.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns whether there are any characters left to be read.", "Heuristic": []}, {"nl": "Populates the page with the contents of the specified disk block.", "Heuristic": []}, {"nl": "String for the type of object used for the symbol on the parse stack.", "Heuristic": []}, {"nl": "Gets the path component of the  {@link AlluxioURI}.", "Heuristic": ["H1"]}, {"nl": "Returns true if the block height is either not a checkpoint, or is a checkpoint and the hash matches.", "Heuristic": []}, {"nl": "Handle event from the RawRtfParser.", "Heuristic": ["H1"]}, {"nl": "Returns the average time spent loading new values. This is defined as {@code totalLoadTime / (loadSuccessCount + loadExceptionCount)}.", "Heuristic": []}, {"nl": "Returns the integer value for the currentValue. If the currentValue can not be interpreted as an integer, the defaultValue is returned.", "Heuristic": []}, {"nl": "Adds a parent node to the node.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Set the HTTP Content-Type header.", "Heuristic": []}, {"nl": "Gets the test id.", "Heuristic": ["H1"]}, {"nl": "Set the stylesheet to use.", "Heuristic": []}, {"nl": "generate output file", "Heuristic": ["H1"]}, {"nl": "Reads in the Response String from Server.", "Heuristic": []}, {"nl": "For modules, it would be usefule to be able to remove their factories. TODO: The effect of this method is not yet tested!", "Heuristic": ["H1"]}, {"nl": "Activates interest in writing from a thread other than the selector thread.", "Heuristic": []}, {"nl": "Tests the  {@link WebUtils#convertMsToClockTime(long)} method with one minute.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Add a terminal", "Heuristic": []}, {"nl": "Verbose log message.", "Heuristic": []}, {"nl": "Returns if result is not valid", "Heuristic": []}, {"nl": "Set up.", "Heuristic": ["H2"]}, {"nl": "Notify all rules of the end of processing.", "Heuristic": []}, {"nl": "Closes the page by unpinning its buffer.", "Heuristic": []}, {"nl": "Accessor for the From property.", "Heuristic": ["H1"]}, {"nl": "Convert to a string.", "Heuristic": []}, {"nl": "Accesses a float attribute from a tag name and an attribute name within the element identified by that tag.", "Heuristic": []}, {"nl": "Extracts the array of SubjectAlt DNS names from an X509Certificate. Returns null if there aren't any.  Note:  Java doesn't appear able to extract international characters from the SubjectAlts.  It can only extract international characters from the CN field.  (Or maybe the version of OpenSSL I'm using to test isn't storing the international characters correctly in the SubjectAlts?).", "Heuristic": ["H1"]}, {"nl": "Initializes the buffer's page according to the specified formatter, and appends the page to the specified file. If the buffer was dirty, then the contents of the previous page are first written to disk.", "Heuristic": []}, {"nl": "Get the current classifier.", "Heuristic": []}, {"nl": "Sets handlers from the given map.", "Heuristic": []}, {"nl": "Sets the remote URL.", "Heuristic": []}, {"nl": "Returns the value as a 0.12 type string. More digits after the decimal place will be used if necessary, but two will always be present.", "Heuristic": []}, {"nl": "Get the length of the text in the element.", "Heuristic": []}, {"nl": "Launches any services that should be launched only if this peer is on the open Internet, such as running a TURN server or a SIP proxy.", "Heuristic": []}, {"nl": "Captures SshDataReceivedEvent", "Heuristic": []}, {"nl": "Returns the count to which the specified key is mapped in this frequency counter, or 0 if the map contains no mapping for this key.", "Heuristic": []}, {"nl": "Not required", "Heuristic": ["H2"]}, {"nl": "Returns the location one unit above this location.", "Heuristic": []}, {"nl": "Devuelve los roles aosciados a este usuario.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link RPCBlockReadResponse#validate()} method.", "Heuristic": ["H1"]}, {"nl": "Sets the verifier used to confirm that response certificates apply to requested hostnames for HTTPS connections. If unset, the  {@link HttpsURLConnection#getDefaultHostnameVerifier() system-wide default} hostname verifier will be used.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the vector to use in the start of the iterations.", "Heuristic": []}, {"nl": "This is a convenience method to load a resource as a stream.  The algorithm used to find the resource is given in getResource()", "Heuristic": []}, {"nl": "Retrieves the featureset classified.", "Heuristic": ["H1"]}, {"nl": "Return true if the specified value is a legal public value rather than a dangerous degenerate or confined subgroup value.   tor-spec 5.2 Before computing g^xy, both client and server MUST verify that  the received g^x or g^y value is not degenerate; that is, it must be strictly greater than 1 and strictly less than p-1 where p is  the DH modulus.  Implementations MUST NOT complete a handshake  with degenerate keys.", "Heuristic": ["H1"]}, {"nl": "Converts a thrift type to a wire type.", "Heuristic": []}, {"nl": "Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage.Entry.Value.Item }", "Heuristic": ["H1"]}, {"nl": "Controls whether to add an error message to Response or not,", "Heuristic": []}, {"nl": "Find a type object by name.", "Heuristic": []}, {"nl": "Performs a session heartbeat.", "Heuristic": []}, {"nl": "Setter for the denied extensions of a file type. The allowed extensions will be cleared. If extensionsList is null, denied extensions are kept untouched.", "Heuristic": []}, {"nl": "Sets the value of the id property.", "Heuristic": ["H1"]}, {"nl": "Add the given identifier to the cache. It will be cached for a default amount of time.", "Heuristic": []}, {"nl": "Makes a CSP consisting of binary constraints arc-consistent.", "Heuristic": []}, {"nl": "Puts the last refresh date into a Bundle.", "Heuristic": []}, {"nl": "Gets the position altitude from mean sea level. Notice that most sentences with position don't provide this value. When missing, the default value in Position is 0.0.", "Heuristic": []}, {"nl": "Returns result value as array.", "Heuristic": []}, {"nl": "Test whether the device has an active pen", "Heuristic": []}, {"nl": "Warning log message.", "Heuristic": []}, {"nl": "write boolean", "Heuristic": ["H1", "H2"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "10 seconds ought to be long enough for any object to be GC'ed and finalized.  Unless we have a gigantic heap, in which case we scale by heap size.", "Heuristic": []}, {"nl": "Unregister an endpoint resolver.", "Heuristic": []}, {"nl": "Returns the federation user account.", "Heuristic": []}, {"nl": "Returns a  {@link PrintStream} for stderr in the Debugger's internalConsole window.", "Heuristic": ["H1"]}, {"nl": "The number of previous blocks to look at when calculating the next Block's difficulty", "Heuristic": []}, {"nl": "Create an instance of  {@link ComplexNode }", "Heuristic": ["H1"]}, {"nl": "Sets the genes in the ROI", "Heuristic": []}, {"nl": "Runs the given Callable in the JavaFX thread, waiting for it to complete before returning. Also attempts to wait for any other JavaFX events that may have been queued in the Callable to complete. If any Exception is thrown during execution of the Callable, that exception will be re-thrown from invokeAndWait.", "Heuristic": []}, {"nl": "Append a simple string.", "Heuristic": []}, {"nl": "Compute a hash code.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Accessor for the tie breaker bytes.", "Heuristic": ["H1"]}, {"nl": "Sets the file count.", "Heuristic": []}, {"nl": "An integer between 0 and 100, shows percent done. The current ArgoUML user interface shows different PostIt note icons for 0, 1-25, 26-50. 51-75, and 76-100.", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link BrowseOffersResponse.Return.OfferData.Geo.Region }", "Heuristic": ["H1"]}, {"nl": "Set authorized roles", "Heuristic": []}, {"nl": "Obtains the default port.", "Heuristic": []}, {"nl": "Tests if this protocol version is less or equal to the given one.", "Heuristic": []}, {"nl": "Prints the inventory list for debugging purposes.", "Heuristic": []}, {"nl": "set length", "Heuristic": ["H1", "H2"]}, {"nl": "Read the contents of an entity and return it as a String. The content is converted using the character set from the entity (if any), failing that, \"ISO-8859-1\" is used.", "Heuristic": []}, {"nl": "Get the default LanguageVersion for the first Language of a given source file.", "Heuristic": []}, {"nl": "Return the public interface of the service.", "Heuristic": []}, {"nl": "Test of getImage method, of class Device.", "Heuristic": []}, {"nl": "Checkpoint records have no associated transaction, and so the method returns a \"dummy\", negative txid.", "Heuristic": ["H1"]}, {"nl": "Gets a Builder configured as this object.", "Heuristic": []}, {"nl": "Test of setNumberRequests method, of class LogEntryInterval.", "Heuristic": []}, {"nl": "Return a classpath resource as a reader.  It is assumed that the resource is a text resource.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link DataNettyBuffer#getReadOnlyByteBuffer()} method.", "Heuristic": ["H1"]}, {"nl": "Gets the visited attribute of the NaiveUserAgent object", "Heuristic": []}, {"nl": "Serializes an object into a Json object.", "Heuristic": ["H1"]}, {"nl": "get a read-only list containing all metrics", "Heuristic": ["H1"]}, {"nl": "Test of createOverlaidChart method, of class ChartObject.", "Heuristic": []}, {"nl": "Determines the number of consecutive characters that are encodable using numeric compaction.", "Heuristic": ["H1"]}, {"nl": "Returns the x-coordinate of the move.", "Heuristic": []}, {"nl": "Sets the test id.", "Heuristic": ["H1"]}, {"nl": "Initializes an  {@link AccessibilityEvent} with information about thethe host View which is the event source.  The default implementation behaves as {@link ViewCompat#onInitializeAccessibilityEvent(View v,AccessibilityEvent event) ViewCompat#onInitalizeAccessibilityEvent(View v, AccessibilityEvent event)} forthe case of no accessibility delegate been set. ", "Heuristic": ["H1"]}, {"nl": "Decode an integer from the format string, return zero if not starting on a digit. \\param advance whether to move the stream position.", "Heuristic": ["H1"]}, {"nl": "Gets the act value.", "Heuristic": []}, {"nl": "get user profile provider", "Heuristic": ["H1"]}, {"nl": "Sets the value of the internal integer.", "Heuristic": []}, {"nl": "Test method for  {@link NotificationController#handleEvent(org.osgi.service.event.Event)}Verifies that  {@code IllegalArgumentException} is thrown when {@code Event}'s {@link Notification#NOTIFICATION_KEY_TITLE} property is null.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the moduleName property.", "Heuristic": []}, {"nl": "Returns  {@code true} if {@code type} is one of the nine primitive-wrapper types, such as{@link Integer}.", "Heuristic": ["H1"]}, {"nl": "Normalizes the matrix such that the Frobenius norm is equal to one.", "Heuristic": ["H1"]}, {"nl": "function to print tree", "Heuristic": ["H1"]}, {"nl": "A function to generate regex which matches interval string's unit part like \"3 years\". First, we can leave out some units in interval string, and we only care about the value of unit, so here we use non-capturing group to wrap the actual regex. At the beginning of the actual regex, we should match spaces before the unit part. Next is the number part, starts with an optional \"-\" to represent negative value. We use capturing group to wrap this part as we need the value later. Finally is the unit name, ends with an optional \"s\".", "Heuristic": ["H1"]}, {"nl": "Returns the exception call-back listener.", "Heuristic": []}, {"nl": "Return the time in seconds this task took.", "Heuristic": []}, {"nl": "Sets hostname.", "Heuristic": ["H2"]}, {"nl": "Execution of the card action.", "Heuristic": []}, {"nl": "Closes the camera driver if still in use.", "Heuristic": []}, {"nl": "Return a map of attributes for the launched task. The specific keys and values returned are dependent on the runtime where the task has been launched. This may include extra information such as execution location or specific error messages in the case of failure.", "Heuristic": []}, {"nl": "Gets the feed id.", "Heuristic": ["H1"]}, {"nl": " Returns an eigenvalue as a complex number.  For symmetric matrices the returned eigenvalue will always be a real number, which means the imaginary component will be equal to zero.   NOTE: The order of the eigenvalues is dependent upon the decomposition algorithm used.  This means that they may or may not be ordered by magnitude.  For example the QR algorithm will returns results that are partially ordered by magnitude, but this behavior should not be relied upon. ", "Heuristic": ["H1"]}, {"nl": "Return a workflow store instance with a fresh transaction.  The coordinator store has to be committed and then closed to commit changes, if only close it rolls back.", "Heuristic": []}, {"nl": "Obtains value of the  {@link CoreConnectionPNames#SO_TIMEOUT} parameter.If not set, defaults to 0.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "The index of the output in transaction to which we refer", "Heuristic": []}, {"nl": "Creates a script of the form OP_RETURN [data]. This feature allows you to attach a small piece of data (like a hash of something stored elsewhere) to a zero valued output which can never be spent and thus does not pollute the ledger.", "Heuristic": []}, {"nl": "Return the public interface for scheduler service.", "Heuristic": []}, {"nl": "Deletes an Identity Provider from a given tenant", "Heuristic": []}, {"nl": "Determine if this set is an (improper) subset of another.", "Heuristic": []}, {"nl": "Access the protocol's underlying buffer directly. If this is not a buffered transport, return null.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns whether the debugger GUI frame is visible.", "Heuristic": []}, {"nl": "Converts a String to a DOM. Sometimes, you might prefer DOM to SOAPElement. No namespace prefixes are used by default.", "Heuristic": []}, {"nl": "Returns the  {@code int} value that, when treated as unsigned, is nearest in value to{@code value}.", "Heuristic": ["H1"]}, {"nl": "Returns a string representation of the enumeration value.", "Heuristic": []}, {"nl": "Checks the behavior when the issuer is not known.", "Heuristic": []}, {"nl": "Updates a given Identity Provider information", "Heuristic": []}, {"nl": "Obtains the value of  {@link NIOReactorPNames#INTEREST_OPS_QUEUEING} parameter.If not set, defaults to false.", "Heuristic": ["H1"]}, {"nl": "Returns the port.", "Heuristic": []}, {"nl": "Set policy combining algorithm globally", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "The header bytes that identify the start of a packet on this network.", "Heuristic": []}, {"nl": "Returns a map of strings from the current value.", "Heuristic": []}, {"nl": "Adds the given values to the dataset.", "Heuristic": []}, {"nl": "Always returns the configured issuer URL", "Heuristic": []}, {"nl": "Crete new Delegator instance. The default implementation calls this.getClass().newInstance().", "Heuristic": ["H1"]}, {"nl": "Stops scrolling", "Heuristic": ["H2"]}, {"nl": "Return the generated public value for this key agreement operation as a BigInteger.", "Heuristic": []}, {"nl": "Add an itemset to this sequence.", "Heuristic": ["H1"]}, {"nl": "Obtains value of the  {@link CoreConnectionPNames#SOCKET_BUFFER_SIZE}parameter. If not set, defaults to -1.", "Heuristic": ["H1"]}, {"nl": "Gets Entrez Gene ID for Gene A.", "Heuristic": ["H1"]}, {"nl": "Returns the Client", "Heuristic": []}, {"nl": "Returns an html version of the commit message with any global or repository-specific regular expression substitution applied. This method assumes the commit message is plain text.", "Heuristic": ["H1"]}, {"nl": "Returns the travel distance between the two specified locations if they are linked by a connection and null otherwise.", "Heuristic": []}, {"nl": "Translate a set of strings to a JSON array, optionally preserving the empty array. Otherwise (default) empty array is returned as null.", "Heuristic": ["H1"]}, {"nl": "Show keyboard", "Heuristic": ["H2"]}, {"nl": "Gets the receipt date.", "Heuristic": []}, {"nl": "Gets the conduit selector", "Heuristic": []}, {"nl": "Factory method for creating a new SpringChain with the provided SpringConfig.", "Heuristic": []}, {"nl": "Not required", "Heuristic": ["H2"]}, {"nl": "Returns a Map representing the substitution (i.e. a set of variable/term pairs) or null which is used to indicate a failure to unify.", "Heuristic": []}, {"nl": "Create hash for a key, use default algorithm SHA-256", "Heuristic": []}, {"nl": "Retrieves the TiledMap and the current layer using the mapName and tileLayer attributes.", "Heuristic": []}, {"nl": "Creates a DOM Document from a TraX Source. If the source is a  {@link DOMSource} holding a DocumentNode, this one will be returned.  Otherwise  {@link #toInputSource} and a namespace aware DocumentBuilder (createdby the default DocumentBuilderFactory) will be used to read the source.  This may involve an XSLT identity transform in toInputSource.", "Heuristic": ["H1"]}, {"nl": "Returns a string that is used to start a subgraph.", "Heuristic": ["H1"]}, {"nl": "Returns true if this user agent should use this setting in future SPDY connections to the same host.", "Heuristic": ["H1"]}, {"nl": "Implements BundleActivator.stop(). Does nothing since the framework will automatically unregister any registered services.", "Heuristic": []}, {"nl": "Remove a plugin from this container by its unique name", "Heuristic": []}, {"nl": "The production for the item.", "Heuristic": []}, {"nl": "Reads a gson object from the specified url.", "Heuristic": ["H1"]}, {"nl": "Test of toString method, of class Device.", "Heuristic": []}, {"nl": "Returns the list of tags changed by the push.", "Heuristic": []}, {"nl": "Create a byte array with a specific size filled with specified data.", "Heuristic": []}, {"nl": "Get a value from the internal JSONObject", "Heuristic": []}, {"nl": "Add Last Movement", "Heuristic": []}, {"nl": "Release the Netty ByteBuf.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the comment property.", "Heuristic": []}, {"nl": "Tests the  {@link UnderStoreBlockInStream#skip(long)} method for the first block of the file.", "Heuristic": ["H1"]}, {"nl": "Find the stored preview for the given book", "Heuristic": []}, {"nl": "Returns the ISO 8601 representation of time (hh:mm:ss+hh:mm).", "Heuristic": ["H1"]}, {"nl": "Sets the feed id.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.util.Date#equals(java.lang.Object)}.", "Heuristic": ["H1"]}, {"nl": "Return a new instance of  {@code AppStatus} based onthe provided individual app instances via {@link #with(AppInstanceStatus)}.", "Heuristic": ["H1"]}, {"nl": "Verifies that two violations nodes with different  {@code filename} arenot equal.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "The component we are decorating.", "Heuristic": []}, {"nl": "Sets the number of rows.", "Heuristic": []}, {"nl": "Sets the exp msg.", "Heuristic": []}, {"nl": "A proxy method that adds the edge  {@code e} to the graph being tested. In case of Immutablegraph implementations, this method should add  {@code e} to the graph builder and build a newgraph with the current builder state. This method should be used in tests of specific implementations if you want to ensure uniform behavior (including side effects) with how edges are added elsewhere in the tests. For example, the existing implementations of this method explicitly add the supplied nodes to the graph, and then call  {@code graph.addEdge()} to connect the edge to the nodes; this is not partof the contract of  {@code graph.addEdge()} and is done for convenience. In cases where you wantto avoid such side effects (e.g., if you're testing what happens in your implementation if you add an edge whose end-points don't already exist in the graph), you should not use this method.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets the value of the any property.  This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a set method for the any property.  For example, to add a new item, do as follows:  getAny().add(newItem);   Objects of the following type(s) are allowed in the list  {@link Object } {@link Element }", "Heuristic": ["H1"]}, {"nl": "Common empty loop utility that serves the purpose of warming up the JVM before performance microbenchmarks.", "Heuristic": ["H1"]}, {"nl": "For Locale selection. TODO: Detect the available locales from the available files.", "Heuristic": ["H1"]}, {"nl": "Sets the command.", "Heuristic": []}, {"nl": "Return the  {@link Instrumentation} instance in use.", "Heuristic": ["H1"]}, {"nl": "Returns the amount of milliseconds that have elapsed since mark() was last called.  This timer runs irrespective of Greenfoot's act() cycle, so if you call it many times during the same Greenfoot frame, you may well get different answers.", "Heuristic": ["H1"]}, {"nl": "Gets the pcl feed id.", "Heuristic": ["H1"]}, {"nl": "Add a relying party service provider for SAML SSO", "Heuristic": ["H1"]}, {"nl": "Gets the value of the elem3 property.", "Heuristic": []}, {"nl": "Gets the elementStylingOrder attribute of the Selector class", "Heuristic": []}, {"nl": "reverse linked list recursive", "Heuristic": ["H1"]}, {"nl": "Converts a  {@link CreateFileOptions} object to an {@link OpenFileOptions} object with amatching Alluxio storage type.", "Heuristic": ["H1"]}, {"nl": "Encodes a byte array into Base64 notation.", "Heuristic": []}, {"nl": "Helper for error callbacks that just returns the Status.ERROR by default", "Heuristic": ["H1"]}, {"nl": "Get KeyInfo element of an encrypted element.", "Heuristic": []}, {"nl": "Store MAPs in the message.", "Heuristic": ["H1"]}, {"nl": "Add a content type rule to this set.", "Heuristic": []}, {"nl": "Gets the value of the zip property.", "Heuristic": []}, {"nl": "Intent action for reloading the JS", "Heuristic": []}, {"nl": "Test method for {@link com.sqa.em.util.helper.RequestInput#getString(java.lang.String,java.lang.String[])}.", "Heuristic": ["H1"]}, {"nl": "Return the job owner group name.", "Heuristic": []}, {"nl": "Sets the value of the moduleName property.", "Heuristic": []}, {"nl": "Frees the object.  If the free list is full, the object will be garbage collected.", "Heuristic": []}, {"nl": "Sets the status.", "Heuristic": []}, {"nl": "Set correlation id of the message", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link PlainSaslServer#getAuthorizationID()} to retrieve the correct user.", "Heuristic": ["H1"]}, {"nl": "Handle event from the RawRtfParser.", "Heuristic": ["H1"]}, {"nl": "This method is where most of the action is. Up to 2 sorted temporary tables are created, and are passed into SortScan for final merging.", "Heuristic": []}, {"nl": "Logs out the user  The implementation removes the User associated with the Subject.", "Heuristic": ["H1"]}, {"nl": "Returns the post id, if available.", "Heuristic": ["H1"]}, {"nl": "Check if a given address version is valid given the NetworkParameters.", "Heuristic": []}, {"nl": "Set a flag indicating whether to print a ';' after certain statements. This is used when pretty-printing for loops.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMCParser#setFaaMode()}.", "Heuristic": ["H1"]}, {"nl": "Sets the current record to be the record having the specified ID.", "Heuristic": []}, {"nl": "Determines if this term is of the form \"F1=F2\" where F1 is the specified field and F2 is another field. If so, the method returns the name of that field. If not, the method returns null.", "Heuristic": []}, {"nl": "Sets the act value.", "Heuristic": []}, {"nl": "Normalize Text-Elements by removing all empty text nodes and normalizing the non-empty ones.  \"normalized\" in this context means all whitespace characters are replaced by space characters and consecutive whitespace characters are collapsed. ", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Get default claims for given trusted service", "Heuristic": []}, {"nl": "Obtains value of the  {@link CoreConnectionPNames#CONNECTION_TIMEOUT}parameter. If not set, defaults to 0.", "Heuristic": ["H1"]}, {"nl": "Gets a boolean value out of the object.", "Heuristic": []}, {"nl": "Checks if the logLevel and logMessage goes through the logFilter.", "Heuristic": []}, {"nl": "Used to get defaults from Netty's private static fields.", "Heuristic": ["H1"]}, {"nl": "Write the given int value (32-bit) in big-endian order to the buffer", "Heuristic": []}, {"nl": "Opens a file in the under file system.", "Heuristic": []}, {"nl": "The authentication in place when this token was created.", "Heuristic": []}, {"nl": "Obtains the condition.", "Heuristic": []}, {"nl": "Remove all available plugins", "Heuristic": []}, {"nl": "Initializes the ShuffleClient, specifying this Executor's appId. Must be called before any other method on the ShuffleClient.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Set the weight for this node.", "Heuristic": []}, {"nl": "Releases a netty channel to the channel pools.", "Heuristic": ["H1"]}, {"nl": "Return the system ID, the value defined in the  {@link #CONF_SYSTEM_ID} configuration property.", "Heuristic": ["H1"]}, {"nl": "Sets an array of object values in the object.", "Heuristic": []}, {"nl": "Sets URI fragment. The value is expected to be unescaped and may contain non ASCII characters.", "Heuristic": []}, {"nl": "A fast method to retrieve one row of data from the matrix as a BitArray.", "Heuristic": []}, {"nl": "Set the key size to use when generating a symmetric key. The default is 256 bits.", "Heuristic": []}, {"nl": "Sets up the configuration for Alluxio before a test runs.", "Heuristic": ["H1"]}, {"nl": "retrieve all SpringConfig in the registry", "Heuristic": ["H1"]}, {"nl": "Return the UTC current date and time in W3C format down to second (yyyy-MM-ddTHH:mm:ssZ). i.e.: 1997-07-16T19:20:30Z", "Heuristic": ["H1"]}, {"nl": "Lets this know the application has been updated with what's on disk, and this should synchronize with the last disk check.", "Heuristic": []}, {"nl": "Add mapping between Uri path and SQL which represent one of more (using INNER JOIN or LEFT OUTER JOIN) tables. The base type and sub type will be guessed.", "Heuristic": ["H1"]}, {"nl": "Clear the individual model.", "Heuristic": []}, {"nl": "Get the LanguageVersion associated with the current source file.", "Heuristic": []}, {"nl": "Get the SignatureProperties to use.", "Heuristic": []}, {"nl": "Returns the predicate that describes which records should be modified.", "Heuristic": []}, {"nl": "This is a fairly light weight check to see of a covariance matrix is valid. It checks to see if the diagonal elements are all positive, which they should be if it is valid.  Not all invalid covariance matrices will be caught by this method.", "Heuristic": ["H1"]}, {"nl": "Entry point for embedded applications.  This method attaches to the given  {@link ContextFactory} with the given scope.  NoI/O redirection is performed as with  {@link #main(String[])}.", "Heuristic": ["H1"]}, {"nl": "Get content encoding of the message", "Heuristic": []}, {"nl": "Appends the least-significant bits, from value, in order from most-significant to least-significant. For example, appending 6 bits from 0x000001E will append the bits 0, 1, 1, 1, 1, 0 in that order.", "Heuristic": []}, {"nl": "Puts an unsigned byte into the buffer.", "Heuristic": []}, {"nl": "Sets a subject capturing the login name  the end user used to login to the resource server when authorizing a given client request", "Heuristic": ["H1"]}, {"nl": "Sets whether execution should break when a script exception is thrown.", "Heuristic": []}, {"nl": "Factory method to generate ImageResources from a given Image. May be overridden in subclass.", "Heuristic": []}, {"nl": "Computes the corresponding latitude for a given view y coordinate.", "Heuristic": []}, {"nl": "Sets the bit at the specified index to  {@code false}.", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link USAddress }", "Heuristic": ["H1"]}, {"nl": "Start the service. This method is invoked on the execution thread. By default this method does nothing.", "Heuristic": ["H1"]}, {"nl": "Determines if the open graph object is for posting", "Heuristic": []}, {"nl": "get JSONObject value.", "Heuristic": ["H1"]}, {"nl": " Computes the determinant of the matrix using Leibniz's formula   A direct implementation of Leibniz determinant equation.  This is of little practical use because of its slow runtime of O(n!) where n is the width of the matrix. LU decomposition should be used instead.  One advantage of Leibniz's equation is how simplistic it is.   det(A) = Sum( &sigma; in Sn ; sgn(&sigma;) Prod( i = 1 to n ; ai,&sigma;(i)) )  sgn is the sign function of permutations. +1 or -1 for even and odd permutations a set of permutations. if n=3 then the possible permutations are (1,2,3) (1,3,2), (3,2,1), ... etc  ", "Heuristic": ["H1"]}, {"nl": "Get a dish by site url", "Heuristic": ["H1"]}, {"nl": "Adds an unnamed value to the formatted output. It is strongly encouraged to use  {@link #add(String,int)} instead and give value areadable name.", "Heuristic": ["H1"]}, {"nl": "Generates a new unique ID and returns it as a String. The contents of the String is supposed to be unique with respect to all Strings generated by other instances of this class. TODO: We should consider using java.util.UUID for this instead.", "Heuristic": ["H1"]}, {"nl": "This method is called to flush the error queue. Subclasses may want to print summary information in this method.", "Heuristic": []}, {"nl": "A static factory method to create a  {@link DStreamJavaFunctions} based on an existing{@link JavaDStream} instance.", "Heuristic": ["H1"]}, {"nl": "Called as a result of a previous service addition request.", "Heuristic": []}, {"nl": "Callback that will be triggered after all properties are updated in current update transaction (all @ReactProp handlers for properties updated in current transaction have been called). If you want to override this method you should call super.onAfterUpdateTransaction from it as the parent class of the ViewManager may rely on callback being executed.", "Heuristic": ["H1"]}, {"nl": "Callback for when an option with an argument is parsed.", "Heuristic": []}, {"nl": "Get the list of registered scopes", "Heuristic": []}, {"nl": "Deletes a directory and all of its contents.", "Heuristic": []}, {"nl": "Returns the operation string. @return The operation string.", "Heuristic": []}, {"nl": "Compares the schemes of this URI and a given URI.", "Heuristic": []}, {"nl": "Gets the connection.", "Heuristic": []}, {"nl": "Notify users by email of something.", "Heuristic": []}, {"nl": "Argument will be declared valid.", "Heuristic": []}, {"nl": "Ejecuta una ronda.", "Heuristic": ["H1"]}, {"nl": "Return the path originally requested by the client.", "Heuristic": []}, {"nl": "Tests if output of  {@link IdUtils#createFileId(long)} is valid.", "Heuristic": ["H1"]}, {"nl": "Returns the number of times  {@link #put} was called.", "Heuristic": ["H1"]}, {"nl": "Creates a copied list of the property descriptors and returns it.", "Heuristic": []}, {"nl": "Convert the Reader into an InputStream.  Note: This uses the default encoding. ", "Heuristic": []}, {"nl": "Sets the failed attrib.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Unregister an application along with its secret. This is called when the application terminates.", "Heuristic": []}, {"nl": "Register a profile in the  {@link ProfileManager}.", "Heuristic": ["H1"]}, {"nl": "Determines whether or not the bridge  {@link Method} is the bridge for thesupplied candidate  {@link Method}.", "Heuristic": ["H1"]}, {"nl": "Draw this ball at its current position onto the canvas.", "Heuristic": []}, {"nl": "Resolve a variable name. Used by the EL evaluator implemenation. ", "Heuristic": ["H1"]}, {"nl": "Max number of times we will try IO exceptions (such as connection timeouts) per request. If set to 0, we will not do any retries.", "Heuristic": []}, {"nl": "This test doesn't work the way you might expect. If you take the URI.create(\"hdfs://localhost:1234/foo/bar/baz?please=dont&amp;show=up\").getPath it will return /foo/bar/baz. If you go through Hadoop's Path using  {@link Path#Path(String)}then Hadoop injects the query params into the path, so when you call toURI it gives a different response.", "Heuristic": ["H1"]}, {"nl": "return the horizontal position of this ball", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "This method is used to get a float value in a specified unit.", "Heuristic": []}, {"nl": "Marks a block to move into this dir view, which is used by the evictor.", "Heuristic": ["H1"]}, {"nl": "Get a new instance of a WSDLFactory. This method follows (almost) the same basic sequence of steps that JAXP follows to determine the fully-qualified class name of the class which implements WSDLFactory. The steps (in order) are:  Check the javax.wsdl.factory.WSDLFactory system property. Check the lib/wsdl.properties file in the JRE directory. The key will have the same name as the above system property. Use the default value.  Once an instance of a WSDLFactory is obtained, invoke newDefinition(), newWSDLReader(), or newWSDLWriter(), to create the desired instances.", "Heuristic": ["H1"]}, {"nl": "get groups which I was mentioned", "Heuristic": ["H1"]}, {"nl": "Creates an  {@code AtomicReference} instance with the given initial value.", "Heuristic": ["H1"]}, {"nl": "Gets the comments.", "Heuristic": []}, {"nl": "Scales down dimensions in sampleSize times. Returns new object.", "Heuristic": []}, {"nl": "Returns the size of the entry for  {@code key} and {@code value} inuser-defined units.  The default implementation returns 1 so that size is the number of entries and max size is the maximum number of entries. An entry's size must not change while it is in the cache.", "Heuristic": ["H1"]}, {"nl": "Get whether Entropy is returned to the client or not", "Heuristic": []}, {"nl": "Returns the description of the property with the provided name on the provided object's interface.", "Heuristic": []}, {"nl": "Returns true if there's another TLS mode to try.", "Heuristic": []}, {"nl": "Set the minute of hour.", "Heuristic": []}, {"nl": "Sets a long value in the object.", "Heuristic": []}, {"nl": " Returns the value as a plain string denominated in BTC. The result is unformatted with no trailing zeroes. For instance, a value of 150000 satoshis gives an output string of \"0.0015\" BTC ", "Heuristic": ["H1"]}, {"nl": "Adds a panel on the stack.", "Heuristic": []}, {"nl": "Absent any annotations of XML mapping, the value of the nillable attribute on elements.", "Heuristic": ["H1"]}, {"nl": "Obtain a list of all errors in the given instance. The list contains  {@link org.xml.sax.SAXParseException SAXParseException}s.", "Heuristic": ["H1"]}, {"nl": "Registers a listener that is notified of each comparison with outcome other than  {@link ComparisonResult#EQUAL}.", "Heuristic": ["H1"]}, {"nl": "Invokes a JavaScript function that takes no arguments.", "Heuristic": ["H1"]}, {"nl": "Sets the conduit selector", "Heuristic": []}, {"nl": "Determine the fault mode for the underlying (fault) message  (for use on server side only).", "Heuristic": ["H1"]}, {"nl": "Hide keyboard", "Heuristic": ["H2"]}, {"nl": "Gets the run id.", "Heuristic": ["H1"]}, {"nl": "Get the tenant domain", "Heuristic": []}, {"nl": "Not supported. This method is used to get the Rect value.", "Heuristic": []}, {"nl": "Return playlists as a Collection", "Heuristic": []}, {"nl": "Description of the Method", "Heuristic": []}, {"nl": "Initializes our Documents object and underlying database connection.", "Heuristic": []}, {"nl": "Sets the value of the paramName property.", "Heuristic": ["H1"]}, {"nl": "Returns true if the given URI was visited, meaning it was requested at some point since initialization.", "Heuristic": []}, {"nl": "Retrieve the key in the  {@link ServletContext} where the instance ofthe  {@link DAVRepository} associated with a named {@link DAVServlet}can be found.", "Heuristic": ["H1"]}, {"nl": "Writes any object to the output stream.", "Heuristic": []}, {"nl": "Convenience method to allow for storing null values.  {@link #put} doesn'tallow null values, because that would be ambiguous.", "Heuristic": ["H1"]}, {"nl": "A file should be added only once - even if it was found twice, because of a sym link.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link BlockContainerIdGenerator#setNextContainerId(long)} method.", "Heuristic": ["H1"]}, {"nl": "Tests rankNUpdate with various sized input matrices", "Heuristic": []}, {"nl": "Appends the given pattern to the target array starting at pos.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link NotificationController#registerUserSession(ServerSession,ServerMessage)}. Verifies that method throws  {@code NullPointerException} when ServerSession ID is null.", "Heuristic": ["H1"]}, {"nl": "Returns the size image needed to render the document without anything going off the side. Could be different than the dimensions passed into layout because of text that couldn't break or a table that's set to be too big.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Inner matrix that stores the decomposition", "Heuristic": []}, {"nl": "Method to find a file, first by finding it as a file (either by the absolute or relative path), then as a URL, and then finally seeing if it is on the classpath.  Caller is responsible for closing the  {@link InputStream}.", "Heuristic": ["H1"]}, {"nl": "Gets the height of the block that created this output (or -1 if this output was not created by a coinbase)", "Heuristic": ["H1"]}, {"nl": "Returns the quantity associated with a line item.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Sets the cytoband of a gistic", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link ValidateAccess }", "Heuristic": ["H1"]}, {"nl": "Get the return format requested", "Heuristic": []}, {"nl": "Empty implementation.", "Heuristic": ["H2"]}, {"nl": "Number of concurrent connections between two nodes for fetching data.", "Heuristic": []}, {"nl": "Determines the first step to establish a route.", "Heuristic": []}, {"nl": "Method to create WSRealm for non-Carbon environment Recommended method", "Heuristic": []}, {"nl": "Save a dishCollection.", "Heuristic": []}, {"nl": "Calculates the hash of the hash of the contents. This is a standard operation in Bitcoin.", "Heuristic": []}, {"nl": "Destroy the workflow application service.", "Heuristic": []}, {"nl": "Get current date and time formatted as ISO 8601 string.", "Heuristic": []}, {"nl": "Create a DiffBuilder from all kind of types supported by  {@link Input#from(Object)}.", "Heuristic": ["H1"]}, {"nl": "Puts the specified name/value pair in the specified JSON object.", "Heuristic": []}, {"nl": " Returns the orthogonal 'V' matrix. ", "Heuristic": []}, {"nl": "The alias associated with this certificate.", "Heuristic": []}, {"nl": "Indicates creation of an entry for this pool. The entry will not be added to the list of free entries, it is only recognized as belonging to this pool now. It can then be passed to  {@link #freeEntry freeEntry}.", "Heuristic": ["H1"]}, {"nl": "This version of decode honors the intent of Reader.decode(BinaryBitmap) in that it passes null as a hint to the decoders. However, that makes it inefficient to call repeatedly. Use setHints() followed by decodeWithState() for continuous scan applications.", "Heuristic": []}, {"nl": "Launches the SIP and TURN servers.", "Heuristic": []}, {"nl": "Sets the value of the projectSecret property.", "Heuristic": []}, {"nl": "Append an object value.", "Heuristic": []}, {"nl": "Format date.", "Heuristic": ["H2"]}, {"nl": "Counts the number of times the specified eigenvalue appears.", "Heuristic": []}, {"nl": "Factory that just takes a service. Used in tools and unit tests.", "Heuristic": []}, {"nl": "Returns the customized configuration for the user.", "Heuristic": []}, {"nl": "Returns the proposal identified by the supplied token.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Sets the value of the id property.", "Heuristic": ["H1"]}, {"nl": "Not supported, class is immutable. Sets the string representation of the current value.", "Heuristic": []}, {"nl": "Moves to the next log block in reverse order, and positions it after the last record in that block.", "Heuristic": []}, {"nl": "Looks up the target object by EJB local reference.", "Heuristic": ["H1"]}, {"nl": "Get the list of accepted encryption algorithms. A request can contain a wst:EncryptionAlgorithm uri to use to encrypt an issued token. The algorithm specified must be contained in this list. The default algorithms are 3-DES, AES-128, AES-128 GCM, AES-192, AES-192 GCM, AES-256 and AES-256 GCM.", "Heuristic": ["H1"]}, {"nl": "Here, we attempt to get the password from the private alias/passwords map.", "Heuristic": []}, {"nl": "Implements BundleActivator.stop(). Does nothing since the framework will automatically unregister any registered services.", "Heuristic": []}, {"nl": "Create a new table with the specified headers and row data.", "Heuristic": []}, {"nl": "The actual target.", "Heuristic": []}, {"nl": "The component we are decorating.", "Heuristic": []}, {"nl": "Tests the  {@link WebUtils#convertMsToClockTime(long)} method with one second.", "Heuristic": ["H1"]}, {"nl": "Returns a string representation of the enumeration value.", "Heuristic": []}, {"nl": "Get the downlinks of this node.", "Heuristic": ["H1"]}, {"nl": "Return the runtime directory of the Oozie instance.  The directory is created under TMP and it is always a new directory per Services initialization.", "Heuristic": ["H1"]}, {"nl": "Returns the boolean value for the currentValue. If the currentValue can not be interpreted as a boolean, the defaultValue is returned.", "Heuristic": []}, {"nl": "Puts the slider back in its original position, but makes it seem as if it has moved, allowing onProgressChanged() to be called", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.util.Time#getHour()}.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Get Date from DatePicker", "Heuristic": []}, {"nl": "Sets the created date.", "Heuristic": []}, {"nl": "Determine if one collection of assertions contains another collection of assertion, using the equal method from the Assertion interface.", "Heuristic": []}, {"nl": "Begin normal traversal of a subtree rooted at  {@code n}. This gives the visitor the option of changing internal state or returning a new visitor which will be used to visit the children of  {@code n}.  This method is typically called by the method {@link #enter(Node,Node) enter(parent, n)}. If a subclass overrides the method  {@link #enter(Node,Node) enter(parent, n)} then this methodmay not be called.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the paramValue property.", "Heuristic": ["H1"]}, {"nl": "From string.", "Heuristic": ["H2"]}, {"nl": "Call  {@link ViewConfiguration#getScaledPagingTouchSlop()}. If running on a pre- {@android.os.Build.VERSION_CODES #FROYO} device,returns  {@link ViewConfiguration#getScaledTouchSlop()}.", "Heuristic": ["H1"]}, {"nl": "Returns  {@code true} if each element in {@code iterable} after the first is strictlygreater than the element that preceded it, according to the specified comparator. Note that this is always true when the iterable has fewer than two elements.", "Heuristic": ["H1"]}, {"nl": "Parse a string into a  {@code TypeNode} AST node,applying substitutions.", "Heuristic": ["H1"]}, {"nl": "\"#\" are used for internal references. If a token-id comes with that we need to remove", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMBParser#setSteerTo(CompassPoint)}.", "Heuristic": ["H1"]}, {"nl": "If a handler is connected, call its  {@link org.bitcoinj.protocols.channels.PaymentChannelServer#close()}method thus disconnecting the TCP connection.", "Heuristic": ["H1"]}, {"nl": "Subclasses may use this method to receive events/commands directly from JS through the {@link UIManager}. Good example of such a command would be  {@code scrollTo} request withcoordinates for a  {@link ScrollView} or {@code goBack} request for a {@link WebView} instance.", "Heuristic": ["H1"]}, {"nl": "Add PropertyChangeListener.", "Heuristic": []}, {"nl": "Returns the  {@link Client} instance", "Heuristic": ["H1"]}, {"nl": "Convert from DIP to PX", "Heuristic": []}, {"nl": "Returns the secure random algorithm.", "Heuristic": []}, {"nl": "Description of the accessibility service.  Statically set from  {@link AccessibilityService#SERVICE_META_DATA meta-data}. ", "Heuristic": ["H1"]}, {"nl": "Change the current Locale.  Only use this before the GUI is initialized.", "Heuristic": []}, {"nl": "Creates a scriptSig that can redeem a pay-to-address output. If given signature is null, incomplete scriptSig will be created with OP_0 instead of signature", "Heuristic": ["H1"]}, {"nl": "Gets the receipt date.", "Heuristic": []}, {"nl": "Enforce that the Issuer of the received Response/Assertion is known. The default is true.", "Heuristic": []}, {"nl": "Determine the number of bytes in an entry name.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets the value of the name property.", "Heuristic": []}, {"nl": "Gets the value of the access property.", "Heuristic": []}, {"nl": "Make the version of ArgoUML public.", "Heuristic": []}, {"nl": "Positions the current record as indicated by the specified RID.", "Heuristic": []}, {"nl": "Tests the  {@link WebUtils#convertMsToClockTime(long)} method with one minute and thirtyseconds.", "Heuristic": ["H1"]}, {"nl": "Method called only from the Model. It sends a command to the Viewer to update the character sprite as the model's character moves.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Obtains a client for a worker with the given address.", "Heuristic": []}, {"nl": "Returns the number of times  {@link #get} returned null or required a newvalue to be created.", "Heuristic": ["H1"]}, {"nl": "Gets the failed attrib.", "Heuristic": ["H1"]}, {"nl": "set all headers for the message", "Heuristic": ["H1"]}, {"nl": "The file before it is compressed", "Heuristic": []}, {"nl": "Return the hash code that object would have provided for us so we have a (nearly) unique id for debugging.", "Heuristic": ["H1"]}, {"nl": "Validate SAML request", "Heuristic": []}, {"nl": "Sets up the dependencies before a test runs.", "Heuristic": []}, {"nl": "Gets the hash of the given block for the purpose of checking its PoW", "Heuristic": []}, {"nl": "Sets the rendering hints to apply to the Graphics2D instance used by the renderer; see {@link java.awt.Graphics2D#setRenderingHints(java.util.Map)}. The Map need not specify values for all properties; any settings in this map will be applied as override to the default settings, and will not replace the entire Map for the Graphics2D instance.", "Heuristic": ["H1"]}, {"nl": "Sets a string value in the object.", "Heuristic": []}, {"nl": "Moves file from one place to another, can across storage devices (e.g., from memory to SSD) when  {@link File#renameTo} may not work.Current implementation uses  {@link com.google.common.io.Files#move(File,File)}, may change if there is a better solution.", "Heuristic": ["H1"]}, {"nl": "Convert a JSONArray into a nodes list.", "Heuristic": []}, {"nl": "clean the md5 cache", "Heuristic": ["H1"]}, {"nl": "Gets the inactivation reason type.", "Heuristic": []}, {"nl": "Make a request to Facebook's old (pre-graph) API with the given parameters. One of the parameter keys must be \"method\" and its value should be a valid REST server API method.  See http://developers.facebook.com/docs/reference/rest/  Note that this method is asynchronous and the callback will be invoked in a background thread; operations that affect the UI will need to be posted to the UI thread or an appropriate handler.  Example:  Bundle parameters = new Bundle(); parameters.putString(\"method\", \"auth.expireSession\", new Listener()); String response = request(parameters);   This method is deprecated.  See  {@link Facebook} and {@link com.facebook.Request} for more info.", "Heuristic": ["H1"]}, {"nl": "Logs and wraps the given exception.", "Heuristic": []}, {"nl": "Gets a  {@link ByteBuffer} containing an increasing sequence of integers starting at the givenvalue.", "Heuristic": ["H1"]}, {"nl": "Gets the lane_id.", "Heuristic": ["H1"]}, {"nl": "Returns true if s is a legal Java identifier. more info.", "Heuristic": ["H1"]}, {"nl": "Load the configuration from the default location. The configuration will be automatically loaded from the default location the first time a value is queried or modified, if it had not been previously loaded.  Only the first load request will be honored, so if the configuration is to be loaded from a non-default location, load(name) must be used prior to any other call.  The configuration can be loaded only one time. Implementations must ignore load requests once a load is already successful, and must return false for each of those ignored requests.", "Heuristic": []}, {"nl": "Add the utility values of an itemset to this sequence", "Heuristic": ["H1"]}, {"nl": "The index of the output in transaction to which we refer", "Heuristic": []}, {"nl": "Sets  {@link #mSeekBufferSizeBytes}.", "Heuristic": ["H1"]}, {"nl": "Determine if SD card exists.", "Heuristic": []}, {"nl": "Get current UTC dateTime in SQL format.", "Heuristic": []}, {"nl": "Increments the count to which the specified key is mapped in this frequency counter, or puts 1 if the map contains no mapping for this key.", "Heuristic": []}, {"nl": "Sets the bus with which the registry is associated.", "Heuristic": []}, {"nl": "The main method.", "Heuristic": []}, {"nl": "Adds  {@code delta} to the value currently associated with {@code key}, and returns the old value.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Sets the test result lst.", "Heuristic": ["H1"]}, {"nl": "Wrap Java object as Scriptable instance to allow full access to its methods and fields from JavaScript.  {@link #wrap(Context,Scriptable,Object,Class)} and{@link #wrapNewObject(Context,Scriptable,Object)} call this methodwhen they can not convert javaObject to JavaScript primitive value or JavaScript array.  Subclasses can override the method to provide custom wrappers for Java objects.", "Heuristic": ["H1"]}, {"nl": "Gets the storage tier alias of the location.", "Heuristic": []}, {"nl": "Gets the canonical  {@link PaymentChannelServerState} object for this channel, either by returning an existing oneor by creating a new one.", "Heuristic": ["H1"]}, {"nl": "Obtain a suitable name for use in Javascript for an attribute. This function is purely a tribute to the awful modularity of XmlSchema.", "Heuristic": ["H1"]}, {"nl": "Gets the id.", "Heuristic": ["H1"]}, {"nl": "A scan for this query is created and returned, as follows. First, the method materializes its RHS query. It then determines the optimal chunk size, based on the size of the materialized file and the number of available buffers. It creates a chunk plan for each chunk, saving them in a list. Finally, it creates a multiscan for this list of plans, and returns that scan.", "Heuristic": ["H1"]}, {"nl": "Sets whether the message should be trated as high priority or not.", "Heuristic": ["H1"]}, {"nl": "Obtains the  {@link ServerSession} associated with a given user id.", "Heuristic": ["H1"]}, {"nl": "Registers a callback, to be triggered when the system UI visibility changes.", "Heuristic": []}, {"nl": "Sets the error code.", "Heuristic": []}, {"nl": "Gets the description of the third-party application.", "Heuristic": []}, {"nl": "Attempts to create the directory if it does not already exist.", "Heuristic": []}, {"nl": "Returns a list of all locations.", "Heuristic": []}, {"nl": "Gets the Constant value of the specified field. If the field is a group field, then its value can be obtained from the saved group value. Otherwise, the value is obtained from the appropriate aggregation function.", "Heuristic": []}, {"nl": "Gets the value of the testData property.", "Heuristic": []}, {"nl": "Adds a property to the cluster resource.", "Heuristic": []}, {"nl": "Factory method to create  {@link StorageTier}.", "Heuristic": ["H1"]}, {"nl": "Returns the input if valid over the given black list patterns else throws an IdentityValidationException", "Heuristic": []}, {"nl": "Returns a map based on the source but with the key &amp; values swapped.", "Heuristic": ["H1"]}, {"nl": "Sets the password.", "Heuristic": []}, {"nl": "Returns the schema of the materialized table, which is the same as in the underlying plan.", "Heuristic": []}, {"nl": "get total.", "Heuristic": ["H1", "H2"]}, {"nl": "Gets the  {@link UserSubject} representing this Client authentication", "Heuristic": ["H1"]}, {"nl": "Sets the value of the username property.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Searches the specified naturally ordered list for the specified object using the binary search algorithm. Equivalent to  {@link #binarySearch(List,Function,Object,Comparator,KeyPresentBehavior,KeyAbsentBehavior)} using {@link Ordering#natural}.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Complementary operation to filterOnly", "Heuristic": []}, {"nl": "Builds a map of the supplied keys to random colors. Each color is selected randomly and tinted with a fixed tint.", "Heuristic": []}, {"nl": "Sets the population size and number of iterations to zero.", "Heuristic": []}, {"nl": "Writes out the domains assignments section of the RIFL document", "Heuristic": ["H1"]}, {"nl": "Gets all the children of a given lineage.", "Heuristic": []}, {"nl": "Returns number of top level result values.", "Heuristic": []}, {"nl": "Supply the encoding to be used throughout the persistence mechanism.", "Heuristic": []}, {"nl": "Logs a new message with the specified color code.", "Heuristic": []}, {"nl": "Calls the given  {@link Callable} on the JavaFX Application Thread at some unspecified timein the future and returns a  {@link Future} that is set on finish or error.", "Heuristic": ["H1"]}, {"nl": "Sets the recursive flag.", "Heuristic": []}, {"nl": "Get the raw value (that was set using  {@link #set(int,float)}), without taking into account any default values.", "Heuristic": ["H1"]}, {"nl": "Returns the argument types of the method described by this object.", "Heuristic": []}, {"nl": "Adds numerical information to be displayed. Note that none of the information added after {@link #apply()} has been called, will be displayed.", "Heuristic": []}, {"nl": "SpinLeft spins the drone a little to the left", "Heuristic": []}, {"nl": "GET  /ingredients/:id : get the \"id\" ingredient.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Template delegator for testNode() method. OVERRIDE to add custom logic", "Heuristic": ["H1"]}, {"nl": "If  {@code (key, value)} is currently in the map, this method removes it and returnstrue; otherwise, this method returns false.", "Heuristic": ["H1"]}, {"nl": "Get string value from database, replacing empty string with {Empty}", "Heuristic": []}, {"nl": "Returns the package name of  {@code classFullName} according to the Java Language Specification(section 6.7). Unlike  {@link Class#getPackage}, this method only parses the class name, without attempting to define the  {@link Package} and hence load files.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the handlerName property.", "Heuristic": []}, {"nl": "{@inheritDoc} Additionally - two  {@link SimpleTypedNameDeclaration} are equal, if theycontain types, that can be cast into each other. ", "Heuristic": ["H1"]}, {"nl": "Returns the part number associated with a line item.", "Heuristic": []}, {"nl": "Not-null value.", "Heuristic": ["H2"]}, {"nl": "Set the number of bytes to skip after a Unicode character.", "Heuristic": []}, {"nl": "Returns the name of the affected table.", "Heuristic": []}, {"nl": "You'd probably want to call  {@link TMXTile#setGlobalTileID(TMXTiledMap,int)} instead.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link BlockStoreMeta#getCapacityBytes()} method.", "Heuristic": ["H1"]}, {"nl": "Removes the \"file://\" prefix from the given URI string, if applicable. If the given URI string doesn't have a \"file://\" prefix, it is returned unchanged.", "Heuristic": []}, {"nl": "Reads a line of text. A line is considered to be terminated by any one of a line feed ( {@code '\\n'}), a carriage return ( {@code '\\r'}), or a carriage return followed immediately by a linefeed ( {@code \"\\r\\n\"}).", "Heuristic": ["H1"]}, {"nl": "Gets a worked which will be notified when a web page has finished loading.", "Heuristic": []}, {"nl": "Creates an instance of  {@link DefaultNHttpClientConnection} based on thegiven SSL  {@link IOSession}.  This method can be overridden in a super class in order to provide a different implementation of the  {@link NHttpClientIOTarget} interface.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the responseType property.", "Heuristic": []}, {"nl": "First byte of a base58 encoded address. See  {@link org.bitcoinj.core.Address}. This is the same as acceptableAddressCodes[0] and is the one used for \"normal\" addresses. Other types of address may be encountered with version codes found in the acceptableAddressCodes array.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the smallIcon property.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.GSVParser#setSentenceCount(int)}.", "Heuristic": ["H1"]}, {"nl": "Returns the description of the possible actions available to the agent.", "Heuristic": []}, {"nl": "set icon path", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Check if the proxy setting has username/password set.", "Heuristic": []}, {"nl": "Main entry point: parse RTF data from the input stream, and pass events based on the RTF content to the listener.", "Heuristic": []}, {"nl": "Complementary operation to filterOnly", "Heuristic": []}, {"nl": "Tests against the condition number from octave.", "Heuristic": []}, {"nl": "Sets the message number of the message within its sequence.", "Heuristic": []}, {"nl": "Test case for  {@link OSSUnderFileSystem#delete(String,boolean)}.", "Heuristic": ["H1"]}, {"nl": "Get the Languages of a given source file.", "Heuristic": []}, {"nl": "Replaces the value corresponding to this entry with the specified value.", "Heuristic": []}, {"nl": "Prevents the given methods from being run as part of the test suite. Note: in principle this should never need to be used, but it might be useful if the semantics of an implementation disagree in unforeseen ways with the semantics expected by a test, or to keep dependent builds clean in spite of an erroneous test.", "Heuristic": []}, {"nl": "Registers the instance of RemoteControlClient with the AudioManager.", "Heuristic": []}, {"nl": "Get the number of messages sent. This metrics is incremented after a message has been completely and successfully put on the wire.", "Heuristic": []}, {"nl": "Returns total number of http connections in the pool.", "Heuristic": ["H1"]}, {"nl": "add items.", "Heuristic": ["H1", "H2"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Closes the output channel of this socket.  This default implementation always throws an  {@link IOException} toindicate that the subclass should have overridden this method.", "Heuristic": ["H1"]}, {"nl": "Remove and return one item from the set (done in hash order). Return null if there are no items in the set.", "Heuristic": []}, {"nl": "This field returns the URI associated with the connection in question.", "Heuristic": []}, {"nl": "logs the message prepended by the filter name (copy of  {@link GenericServlet#log(String)})", "Heuristic": ["H1"]}, {"nl": "Must be called before any other functions. Declares and sets up internal data structures.", "Heuristic": []}, {"nl": "Required.", "Heuristic": ["H2"]}, {"nl": "override only if needed - if claims are controlled by the identity provider, this will return null. If it is connector specific this must return the corresponding claim dialect.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.GSVParser#getSatelliteInfo()}.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link DataByteBuffer#getNettyOutput()} method.", "Heuristic": ["H1"]}, {"nl": "Whether logging is on or off.", "Heuristic": []}, {"nl": "Get the client configured for this issuer", "Heuristic": []}, {"nl": "Produce a JSONArray of JSONObjects from a comma delimited text string using a supplied JSONArray as the source of element names.", "Heuristic": []}, {"nl": "Helper method to get a filename without its extension", "Heuristic": []}, {"nl": "Checks whether the class declares a field by the name given which is covered by the signature mask.", "Heuristic": []}, {"nl": "Call when the path itself has changed, but no structure changes have occurred.", "Heuristic": []}, {"nl": "Called as a result of a previous service removal request.", "Heuristic": []}, {"nl": "Sets the test id.", "Heuristic": ["H1"]}, {"nl": "Closes all connections to remote hosts associated with this TURN client.", "Heuristic": []}, {"nl": "Convert a workflows list into a JSONArray.", "Heuristic": []}, {"nl": "Is the Gene mRNA down-regulated?", "Heuristic": []}, {"nl": "Gets a function as a String, which then can be passed to the execute() method.", "Heuristic": ["H1"]}, {"nl": "Set the String corresponding to the encryption Properties class", "Heuristic": []}, {"nl": "Returns the verb for the access token endpoint (defaults to POST)", "Heuristic": []}, {"nl": "Sets the cascade flag for this option.", "Heuristic": []}, {"nl": "Is the Gene mRNA upregulated?", "Heuristic": ["H1"]}, {"nl": "Add a cache entry.", "Heuristic": []}, {"nl": "Return the workflow run number, unless a rerun it is always 1.", "Heuristic": []}, {"nl": "Inserts a key into the heirarchy. Used during deserialization: you normally don't need this. Keys must be inserted in order.", "Heuristic": ["H1"]}, {"nl": "Gets the test result lst.", "Heuristic": ["H1"]}, {"nl": "Get the EncryptedKeyElement object of the KeyInfoElement object", "Heuristic": []}, {"nl": "Add an image url that failed loading to be tracked", "Heuristic": ["H1"]}, {"nl": "Setter for property 'currentScenario'.", "Heuristic": []}, {"nl": "Reads file of words to ignore. Ignore words are added to a Set. The IOException is passed to caller because we certinaly don't know what the user interface issue is.", "Heuristic": ["H1"]}, {"nl": "Sets the checksum.", "Heuristic": []}, {"nl": "Sets up all dependencies before a test runs.", "Heuristic": []}, {"nl": "Perform the actual transformation", "Heuristic": []}, {"nl": "remove a node", "Heuristic": ["H1"]}, {"nl": "Add a ruleset for a language. Only one ruleset can be added for a specific language. If ruleSet.getLanguage() is null, it is assumed to be a RuleSet of java rules.", "Heuristic": ["H1"]}, {"nl": "Returns the original session request, if available. If the channel entry represents an incoming server-side connection, returns null.", "Heuristic": []}, {"nl": "Updates the internal state of this NamespaceHelper to reflect the existance of the XML token pointed to by the cursor.", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData }", "Heuristic": ["H1"]}, {"nl": "remove group from the list", "Heuristic": ["H1"]}, {"nl": "Sets an array of photo values in the object.", "Heuristic": []}, {"nl": "Returns a supplier whose  {@code get()} method synchronizes on {@code delegate} before callingit, making it thread-safe.", "Heuristic": ["H1"]}, {"nl": "Convert a Categorical Distribution into a column vector in Matrix form.", "Heuristic": []}, {"nl": "Sets value of the  {@link CoreConnectionPNames#STALE_CONNECTION_CHECK}parameter.", "Heuristic": ["H1"]}, {"nl": "Retrieves the results of last evaluation.", "Heuristic": []}, {"nl": "Check whether the tracker is started.", "Heuristic": []}, {"nl": "Ensure that there is enough space available to write the requested number of bytes. If necessary the internal buffer is resized.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Throws an exception if the current token is not  a string.  Otherwise, returns that string and moves to the next token.", "Heuristic": ["H1"]}, {"nl": "A proxy method that adds the node  {@code n} to the graph being tested. In case of Immutablegraph implementations, this method should add  {@code n} to the graph builder and build a newgraph with the current builder state.", "Heuristic": ["H1"]}, {"nl": "Gets the custom Produces media types", "Heuristic": []}, {"nl": "Parses an entire JSON object in the format described by Json communication structure", "Heuristic": ["H1"]}, {"nl": "Sets up internal data structures and creates a copy of the input matrix.", "Heuristic": []}, {"nl": "Sets the client id which needs to be retained in a hidden form field", "Heuristic": ["H1"]}, {"nl": "Convert to a string.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns the URL of an image for the  {@link MediaInfo} at the given index. Index should be anumber between 0 and  {@code n-1} where {@code n} is the number of images for that given item.", "Heuristic": ["H1"]}, {"nl": "get total elapsed.", "Heuristic": ["H1"]}, {"nl": "Mutator for the To property.", "Heuristic": ["H1"]}, {"nl": "Open the SlidingMenu and show the secondary menu view. Will default to the regular menu if there is only one.", "Heuristic": []}, {"nl": "Skips any comment lines and retrieves a data line from the unmapped file (created by liftOver).", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.VTGParser#setMagneticCourse(double)}.", "Heuristic": ["H1"]}, {"nl": "Sets MessageContext", "Heuristic": []}, {"nl": "Returns the hash code for the  {@link TtlBucket}.", "Heuristic": ["H1"]}, {"nl": "Returns the specified singular value.", "Heuristic": []}, {"nl": "Get all the RuleSets.", "Heuristic": []}, {"nl": "Returns false if the cookie should be discarded at the end of the \"session\"; true otherwise.", "Heuristic": []}, {"nl": "Gets the value of the given parameter as an integer", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Checks whether these bits imply the given bits.", "Heuristic": []}, {"nl": "This method is called before the connection is disconnected. Implementations should add any additional operations before the connection is disconnected.", "Heuristic": []}, {"nl": "Sets the checks if is active.", "Heuristic": ["H1"]}, {"nl": "Bitfield utilities. Returns true if the bit at position is set in v.", "Heuristic": ["H1"]}, {"nl": "Returns the next value of the current log record,  assuming it is a string.", "Heuristic": ["H1"]}, {"nl": "Creates a CascadedStyle, setting the display property to to the value of the display parameter.", "Heuristic": ["H1"]}, {"nl": "Returns short message of the log record.", "Heuristic": []}, {"nl": "Puts a new value in the property table with the appropriate flags", "Heuristic": []}, {"nl": "Get the current placement hint.", "Heuristic": []}, {"nl": "Calls each of the registered ServiceContractResolver instances to resolve the location of the service's contract. It returns the location  from the first resolver that matches the QName to a location.", "Heuristic": ["H1"]}, {"nl": "Tests if the game is finished. The game is finished if neither side has a legal move.", "Heuristic": []}, {"nl": "Test of getResourceBundleAsProperties method, of class DBType.", "Heuristic": []}, {"nl": "set user profile provider", "Heuristic": ["H1"]}, {"nl": "Create type information for a PropertyDescriptor.", "Heuristic": []}, {"nl": "Adds a task to the queue and makes sure a worker thread is running, unless the queue has been suspended. If this method throws, e.g. a  {@code RejectedExecutionException} from the delegate executor,execution of tasks will stop until a call to this method or to  {@link #resume()} is made.", "Heuristic": ["H1"]}, {"nl": "Implements OutputStream.write(int) in terms of OutputStream.write(byte[], int, int). OutputStream assumes that you implement OutputStream.write(int) and provides default implementations of the others, but often the opposite is more efficient.", "Heuristic": []}, {"nl": "Get Cancer Study ID in a backward compatible fashion.", "Heuristic": []}, {"nl": "Set the Date that this Token expires", "Heuristic": []}, {"nl": "Returns the date and time when this warning was added, or null if a warning date was not supplied in the header.", "Heuristic": []}, {"nl": "Checks whether the settings are enabled.", "Heuristic": []}, {"nl": "Get whether to validate a client Public Key or Certificate presented as part of a  UseKey element. This is true by default.", "Heuristic": ["H1"]}, {"nl": "Ideally this should be configurable. For the moment, hard code the priority.", "Heuristic": []}, {"nl": "Returns dividend / divisor, where the dividend and divisor are treated as unsigned 32-bit quantities.", "Heuristic": []}, {"nl": "Sets the value of the name property.", "Heuristic": []}, {"nl": "Returns the \"warn-agent\" string associated with this warning, which is either the name or pseudonym of the server that added this particular Warning header.", "Heuristic": []}, {"nl": "Insist that a Type is a parameterized type of one parameter. This is used to decompose Holders, for example.", "Heuristic": []}, {"nl": "Return the value created by the construct method.   Returns null if either the constructing thread or the current thread was interrupted before a value was produced.", "Heuristic": ["H1"]}, {"nl": "Get items count", "Heuristic": []}, {"nl": "Allow writing of collections when the type of the collection object is known via an  {@link java.lang.reflect.Type} object.", "Heuristic": ["H1"]}, {"nl": "Generates and returns a new sequence identifier.", "Heuristic": []}, {"nl": "Returns the number of distinct field values in the sorted table, which is the same as in the underlying query.", "Heuristic": []}, {"nl": "Hashes a key in  {@code ByteBuffer} into a non-zero, one byte fingerprint.", "Heuristic": ["H1"]}, {"nl": "Tests that block locks are not returned to the pool when they are still in use.", "Heuristic": []}, {"nl": "Removes the  {@link User} from the {@link ThreadLocal} variable.", "Heuristic": ["H1"]}, {"nl": "Returns the number of pairs in the dataset.", "Heuristic": []}, {"nl": "Get this node's justify content, as defined by style.", "Heuristic": []}, {"nl": "Returns a string, of length at least  {@code minLength}, consisting of  {@code string} prependedwith as many copies of  {@code padChar} as are necessary to reach that length. For example,  {@code padStart(\"7\", 3, '0')} returns {@code \"007\"} {@code padStart(\"2010\", 3, '0')} returns {@code \"2010\"} See  {@link java.util.Formatter} for a richer set of formatting capabilities.", "Heuristic": ["H1"]}, {"nl": "Test whether the device has a working pressure sensor", "Heuristic": []}, {"nl": "Register item in the matrix", "Heuristic": []}, {"nl": "Restores errorLevel to folder one", "Heuristic": []}, {"nl": "If field is not found in header or data line, or is empty, it just returns empty  field value \"NA\".", "Heuristic": ["H1"]}, {"nl": "Create a byte array with a specific size filled with specified data.", "Heuristic": []}, {"nl": "Sets the expected data unit id.", "Heuristic": ["H1"]}, {"nl": "Helper function for null test.  Throws an interal_error exception if its parameter is null.", "Heuristic": ["H1"]}, {"nl": "Queues up a save in the background. Useful for not very important wallet changes.", "Heuristic": []}, {"nl": "Tests symmRankNMinus_U with various sized input matrices", "Heuristic": ["H1"]}, {"nl": "Checks whether the parameter is a valid compressed IPv6 address", "Heuristic": []}, {"nl": "Return true if this goal conflicts with the other; that is passes running over both goals could access the same data.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets the value of the workflowImplId property.", "Heuristic": ["H1"]}, {"nl": "Configure whether exceptions during applying a rule should be ignored or not. If set to true then such exceptions are logged as warnings and the processing is continued with the next rule - the failing rule is simply skipped. This is the default behavior.  If set to false then the processing will be aborted with the exception. This is especially useful during unit tests, in order to not oversee any exceptions.", "Heuristic": []}, {"nl": "Returns the input if valid over the given white list patterns else throws an IdentityValidationException", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.MWVParser#setSpeed(double)}.", "Heuristic": ["H1"]}, {"nl": "Delay processing for specified milliseconds.  Should be \"small\" to prevent the client from timing out.", "Heuristic": []}, {"nl": "Test for setLongitude()", "Heuristic": []}, {"nl": "Exclude all elements from an iterable that don't match a given predicate.", "Heuristic": []}, {"nl": "Return the coordiantor actions being returned.", "Heuristic": ["H1"]}, {"nl": "Create schedule", "Heuristic": ["H2"]}, {"nl": "Runs the given  {@link Runnable} on the JavaFX Application Thread at some unspecified timein the future and waits for it  {@code long} milliseconds to finish, otherwise times out with{@link TimeoutException}.", "Heuristic": ["H1"]}, {"nl": "Set the logger", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.util.Time#setSeconds(int)}.", "Heuristic": ["H1"]}, {"nl": "A single preview frame will be returned to the handler supplied. The data will arrive as byte[] in the message.obj field, with width and height encoded as message.arg1 and message.arg2, respectively.", "Heuristic": ["H1"]}, {"nl": "Gets a  {@link ByteBuffer} containing an increasing sequence of integers starting at zero.", "Heuristic": ["H1"]}, {"nl": "Creates a parser for specified talker and sentence type. This method is mainly intended to be used when custom parsers have been registered in the factory. The returned instance needs to be cast to corresponding sentence interface.", "Heuristic": []}, {"nl": "Gets the polling period.", "Heuristic": []}, {"nl": "Sets the feed id.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link RPCBlockReadResponse#encode(ByteBuf)} and{@link RPCBlockReadResponse#decode(ByteBuf)} methods.", "Heuristic": ["H1"]}, {"nl": "Returns the price associated with a line item.", "Heuristic": []}, {"nl": "Creates an  {@code AtomicLongMap}.", "Heuristic": ["H1"]}, {"nl": "Turns logging on or off, without affecting logging configuration.", "Heuristic": []}, {"nl": "Assume the plan is returned by a non-cascading evictor, check whether it is valid. a cascading evictor is an evictor that always tries to move from the target tier to the next tier and recursively move down 1 tier until finally blocks are evicted from the final tier.", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link GetOfferDetailsResponse.Return }", "Heuristic": ["H1"]}, {"nl": "Parse a inputstream assuming it is a valid XML document and return an JDOM Element for it.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Provides SimpleJobLauncher Bean", "Heuristic": []}, {"nl": "This is the default as per web and iOS. We want to be consistent across platforms.", "Heuristic": []}, {"nl": "Assert that an array has elements; that is, it must not be {@code null} and must have at least one element.Assert.notEmpty(array);", "Heuristic": ["H1"]}, {"nl": "Get whether to use a KeyIdentifier to refer to this token", "Heuristic": []}, {"nl": "Returns the adapter position of the first fully visible view. This position does not include adapter changes that were dispatched after the last layout pass.", "Heuristic": []}, {"nl": "Reply a java.util.Enumeration of the children of the given Object", "Heuristic": ["H1"]}, {"nl": "Returns true if inventory is full.", "Heuristic": []}, {"nl": "Returns a string representation of the host specifier suitable for inclusion in a URI. If the host specifier is a domain name, the string will be normalized to all lower case. If the specifier was an IPv6 address without brackets, brackets are added so that the result will be usable in the host part of a URI.", "Heuristic": ["H1"]}, {"nl": "Makes an empty project.", "Heuristic": []}, {"nl": "Generates the create table SQL Statement", "Heuristic": ["H1"]}, {"nl": "Returns the current baseUrl for this class.", "Heuristic": ["H1"]}, {"nl": "Removes the last last fish tagging.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link Mode#Mode(Mode)} constructor.", "Heuristic": ["H1"]}, {"nl": " {@link RubyString String}#to_json_raw() This method creates a JSON text from the result of a call to {@link #to_json_raw_object} of this String.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the elem1 property.", "Heuristic": []}, {"nl": "Add a repeat field.", "Heuristic": []}, {"nl": "Returns the configuration factory instance. This is equivalent to ConfigurationFactory.getInstance() but using Configuration.getFactory() is shorter to type and allows us not to have to deal with ConfigurationFactory at all if we don't need to modify or configure it.", "Heuristic": ["H1"]}, {"nl": "Returns whether the given byte array slice is a well-formed UTF-8 byte sequence, as defined by {@link #isWellFormed(byte[])}. Note that this can be false even when  {@code isWellFormed(bytes)} is true.", "Heuristic": ["H1"]}, {"nl": "Set the CallbackHandler to use with the LoginContext. It can be null.", "Heuristic": []}, {"nl": "Sets the value of the user property.", "Heuristic": []}, {"nl": "Sets the value of the shipTo property.", "Heuristic": []}, {"nl": "Gets the Data Matrix.", "Heuristic": []}, {"nl": "Sets Alluxio work directory.", "Heuristic": ["H1"]}, {"nl": "Is the User Currently Authenticated?  Determined via Session.", "Heuristic": []}, {"nl": "Reads an ASCII string from the buffer.  Reads from the buffer's current position to its limit.", "Heuristic": []}, {"nl": "Notifies all listeners that data reading has stopped.", "Heuristic": []}, {"nl": "Calls a method on the given object instance with the given argument.", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.util.Time#setHour(int)}.", "Heuristic": ["H1"]}, {"nl": "Get all the books.", "Heuristic": []}, {"nl": "Clear the cache, calling  {@link #entryRemoved} on each removed entry.", "Heuristic": ["H1"]}, {"nl": "Creates a new StoredBlock, calculating the additional fields by adding to the values in this block.", "Heuristic": []}, {"nl": "Induces the decision list from the specified set of examples", "Heuristic": []}, {"nl": "Get the current classifier.", "Heuristic": []}, {"nl": "Returns the list of repeat times (r= fields)  specified in the SessionDescription.", "Heuristic": ["H1"]}, {"nl": "Called when a line is complete.", "Heuristic": []}, {"nl": "Resolves serialized instance of enumeration value.", "Heuristic": []}, {"nl": "Sets the ObjectType used to read and write the trailing block instances.", "Heuristic": []}, {"nl": "Gets number of last item", "Heuristic": []}, {"nl": "Sets the fetcher start timestamp.", "Heuristic": []}, {"nl": "Sets the data source, where this interaction comes from, e.g. REACTOME.", "Heuristic": ["H1"]}, {"nl": "Checks if is file down loaded to destination.", "Heuristic": ["H1"]}, {"nl": "Creates instance of builder.", "Heuristic": []}, {"nl": "Get the File associated with the current source file.", "Heuristic": []}, {"nl": "Sets the value of the attachinfo property.", "Heuristic": ["H1"]}, {"nl": "Starts the stopwatch.", "Heuristic": []}, {"nl": "Justifies wheel", "Heuristic": ["H2"]}, {"nl": "Convenience method for calling {@link #waitForPersist(LocalAlluxioClusterResource,AlluxioURI,int)} with a default timeout.", "Heuristic": ["H1"]}, {"nl": "Test of readFromGameFile method, of class FileHandler.", "Heuristic": []}, {"nl": "Create AUTO-MERGE query.", "Heuristic": []}, {"nl": "Return a workflow store instance with an existing transaction.  The workflow store has to be committed and then closed to commit changes, if only close it rolls back.", "Heuristic": []}, {"nl": "Gets the Object mapped from the specified key, or null if no such mapping has been made.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns the chain code associated with this key. See the specification to learn more about chain codes.", "Heuristic": []}, {"nl": "Suspends the running of tasks until  {@link #resume()} is called. This can be called multipletimes to increase the suspensions count and execution will not continue until  {@link #resume}has been called the same number of times as  {@code suspend} has been.Any task that has already been pulled off the queue for execution will be completed before execution is suspended.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns the verb for the request token endpoint (defaults to POST)", "Heuristic": []}, {"nl": "Convenience method for mocking the  {@link UnderFileSystem} for any ufsPath.", "Heuristic": ["H1"]}, {"nl": "The number of previous blocks to look at when calculating the next Block's difficulty Uses a storedblock cursor as input rather than just returning a constant value", "Heuristic": ["H1"]}, {"nl": "Closes the connection to the server, triggering the  {@link StreamParser#connectionClosed()}event on the network-handling thread where all callbacks occur.", "Heuristic": ["H1"]}, {"nl": "Add an alias/password pair to the callback mechanism.", "Heuristic": []}, {"nl": "Hashes a key in byte array into a non-zero, one byte fingerprint.", "Heuristic": []}, {"nl": "Get the minimum group length.", "Heuristic": []}, {"nl": "Returns the file object which may have it's base-path determined by environment variables for running on a cloud hosting service. All Gitblit file or folder retrievals are (at least initially) funneled through this method so it is the correct point to globally override/alter filesystem access based on environment or some other indicator.", "Heuristic": ["H1"]}, {"nl": "For caches that do not override  {@link #sizeOf}, this returns the number of entries in the cache. For all other caches, this returns the sum of the sizes of the entries in this cache.", "Heuristic": ["H1"]}, {"nl": "Computes the quality using diagonal elements the triangular R matrix in the QR decomposition.", "Heuristic": []}, {"nl": "Tests the  {@link NetworkAddressUtils#getConnectAddress(ServiceType)} method.", "Heuristic": ["H1"]}, {"nl": "Determine if this set intersects another.", "Heuristic": []}, {"nl": "Will add one element to an existing array", "Heuristic": []}, {"nl": "write encoded data to muxer", "Heuristic": ["H1"]}, {"nl": "Given a File Filter, expose as a FilenameFilter.", "Heuristic": []}, {"nl": "Sets the given bit to true.", "Heuristic": []}, {"nl": "Parses strings of the form \"{NS-URI}LOCAL-NAME\" or \"prefix:localName\" as QualifiedNames. When using the prefix-version the prefix must be defined inside the current NamespaceContext.", "Heuristic": ["H1"]}, {"nl": "formats a value for its usage in XPath expressions", "Heuristic": ["H1"]}, {"nl": "Returns the integer value of the specified field. The value is obtained from whichever scan contains the field.", "Heuristic": []}, {"nl": "Obtains the URL of the HTTP Request.", "Heuristic": []}, {"nl": "Set the relying party of the authentication request", "Heuristic": ["H1"]}, {"nl": "Returns the predicate that describes which records should be in the output table.", "Heuristic": []}, {"nl": "Gets the property and casts to the appropriate type", "Heuristic": []}, {"nl": "Returns DNS names that when resolved, give IP addresses of active peers.", "Heuristic": []}, {"nl": "Generates the parameters map.  This is the complete parameters for the common case where a header only has a single parameter.  Otherwise, calling methods can add additional parameters to the map.", "Heuristic": []}, {"nl": "Checks whether the client user is the owner of the path.", "Heuristic": []}, {"nl": "Save any instance state associated with this adapter and its pages that should be restored if the current UI state needs to be reconstructed.", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.util.Time(java.lang.String)}.", "Heuristic": ["H1"]}, {"nl": "Accessor for the socket.", "Heuristic": ["H1"]}, {"nl": "Check if the rules that apply to a source of the given language use DFA.", "Heuristic": []}, {"nl": "Return true if this TokenProvider implementation is capable of providing a token that corresponds to the given TokenType in a given realm. The realm is ignored in this  token provider.", "Heuristic": ["H1"]}, {"nl": "Get the name of the message property from which the content type has been extracted.", "Heuristic": []}, {"nl": "Note: The graphic representation maps x values on row numbers (x-axis in vertical direction).", "Heuristic": []}, {"nl": "Runs the given  {@link Runnable} on a new {@link Thread} and waits for it {@code long}milliseconds to finish, otherwise times out with  {@link TimeoutException}.", "Heuristic": ["H1"]}, {"nl": "Induces the decision tree from the specified set of examples", "Heuristic": []}, {"nl": "Activates interest in writing from the selector thread.", "Heuristic": []}, {"nl": "Returns the human-readable warning text for this warning. Note that the original quoted-string is returned here, including escaping for any contained characters. In other words, if the header was:  Warning: 110 fred \"Response is stale\"  then this method will return \"\\\"Response is stale\\\"\" (surrounding quotes included).", "Heuristic": ["H1"]}, {"nl": "Sets the value of the dataType property.", "Heuristic": []}, {"nl": "Sets the time to live.", "Heuristic": []}, {"nl": "Provides the data store with an entity classifier. The classifier strongly influences the generation of the entity tree.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.HDGParser#setVariation(double)}.", "Heuristic": ["H1"]}, {"nl": "Sets the data set id.", "Heuristic": ["H1"]}, {"nl": "If requested lifetime exceeds shall it fail (default) or overwrite with maximum lifetime", "Heuristic": []}, {"nl": "Can be called in leave_ to do an asynchronous state transition. The current state transition will be on hold in the old state until a final call to Transition is made. This will complete the transition and possibly call the other callbacks.", "Heuristic": ["H1"]}, {"nl": " Append a hashCode for a char. ", "Heuristic": []}, {"nl": "Return the dataSourceName via the  {@link DataSource} Interface method. Both the parameters are ignored ", "Heuristic": ["H1"]}, {"nl": "Set the IdentityMapper object to use.", "Heuristic": []}, {"nl": "Computes eigenvalues only", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Pop an array or object scope.", "Heuristic": []}, {"nl": "Returns the claim dialect for claim mappings", "Heuristic": []}, {"nl": "Tests the  {@link WebUtils#convertMsToClockTime(long)} method with one hour.", "Heuristic": ["H1"]}, {"nl": "Returns  {@code true} if the bit is set at the specified index.", "Heuristic": ["H1"]}, {"nl": "Sets the type for the BufferedImage used as output for this renderer; must be one of the values from {@link java.awt.image.BufferedImage} allowed in that class' constructor as a type argument. See docs forthe type parameter in  {@link java.awt.image.BufferedImage#BufferedImage(int,int,int)}. Defaults to RGB with no support for transparency. The type is used when the image is first created, so to change the default type do so before calling  {@link #getImage()}.", "Heuristic": ["H1"]}, {"nl": "Clear the current page, and append it to the log file.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns the list of all users available to the login service.", "Heuristic": []}, {"nl": " Computes the quality of the computed decomposition.  A value close to or less than 1e-15 is considered to be within machine precision.   This function must be called before the original matrix has been modified or else it will produce meaningless results. ", "Heuristic": ["H1"]}, {"nl": "Checks if security is enabled.", "Heuristic": []}, {"nl": "whether the indices of subsequently tracked nodes should be tracked.", "Heuristic": ["H1"]}, {"nl": "Get the local sequence utility for a given cell in the projected q-matrix", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.HDTParser#setHeading(double)}.", "Heuristic": ["H1"]}, {"nl": "Which element in the submatrix was returned by next()", "Heuristic": ["H1"]}, {"nl": "Resumes execution of the script.", "Heuristic": []}, {"nl": "Returns a string representation of the enumeration value.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Removing headers is not supported.", "Heuristic": []}, {"nl": "Operation getColumn returns the value of the attribute _column.", "Heuristic": ["H1"]}, {"nl": "Set the signature Crypto object", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMCParser#setCourse(double)} .", "Heuristic": ["H1"]}, {"nl": "Set the Grant Type", "Heuristic": []}, {"nl": "Gets Max Value.", "Heuristic": []}, {"nl": "Set the time by  {@link java.util.Date}. The date information of is ignored, only hours, minutes and seconds are relevant. Notice also that time zone offset is not affected by this method because {@link java.util.Date} does not contain zone offset.", "Heuristic": ["H1"]}, {"nl": "Close all tags in the stack and end them at the end of the builder. Used to close any remaining open tags at the end of parsing, since these tags should run to the end of the text", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns the names of all search strategies, which are supported by this factory. The indices correspond to the parameter values of method {@link #createSearch(int,int,HeuristicFunction)}.", "Heuristic": ["H1"]}, {"nl": "Set the object.", "Heuristic": []}, {"nl": "Converts a 2D array of luminance data to 1 bit. As above, assume this method is expensive and do not call it repeatedly. This method is intended for decoding 2D barcodes and may or may not apply sharpening. Therefore, a row from this matrix may not be identical to one fetched using getBlackRow(), so don't mix and match between them.", "Heuristic": []}, {"nl": "Adds an unnamed value to the formatted output. It is strongly encouraged to use  {@link #add(String,long)} instead and give value areadable name.", "Heuristic": ["H1"]}, {"nl": "Return the public interface for log service.", "Heuristic": []}, {"nl": "Gets the HTTP conduit responsible for a transport-level communication with the remote service.", "Heuristic": []}, {"nl": "See  {@link LayoutState#HAS_NEW_LAYOUT}.", "Heuristic": ["H1"]}, {"nl": "Returns available capacity of this buffer.", "Heuristic": []}, {"nl": "Get the private key alias If the key alias is defined in the Security configuration take it from there otherwise key alias is taken from the Server Configuration", "Heuristic": []}, {"nl": "Computes the area of a trapezoid. All the lengths should be of the same unit of measure.", "Heuristic": []}, {"nl": "Returns a map of strings from the specified key.", "Heuristic": []}, {"nl": "Get the action that can undo the last user interaction on this project.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Dispatch the TPV event to all listeners.", "Heuristic": []}, {"nl": "Add elements from the source to the target as long as they don't already exist there. Return the number of items actually added.", "Heuristic": []}, {"nl": "Adds a word to the document.", "Heuristic": []}, {"nl": "Sets the value of the handlerClass property.", "Heuristic": []}, {"nl": "Resets the channel so that writing to it will overwrite the existing buffer.", "Heuristic": []}, {"nl": "Get the individual URI.", "Heuristic": []}, {"nl": "Sets the preview image url for this invite. See guidelines for correct dimensions.", "Heuristic": ["H1"]}, {"nl": "Will add one element to an existing array", "Heuristic": []}, {"nl": "Popup an info to the user (ex: \"Process complete.\")", "Heuristic": []}, {"nl": "Gets an external URI that Messenger can use to download the content on Facebook's servers instead of requiring the Messenger application to upload the content. The content returned by the this URI must be exactly the same as the content specified by  {@link #getUri()}. If the content is different, Messenger may fail to send the content. See developer docs for more info.", "Heuristic": ["H1"]}, {"nl": "Returns the approximate count of elements left in the format. This method does not account for repeat counts or string length encodings - so should be used as a guide only.", "Heuristic": ["H1"]}, {"nl": "Sets up the server before a test runs.", "Heuristic": []}, {"nl": "Is Gitblit running in debug mode?", "Heuristic": ["H1"]}, {"nl": "Get the sequences from this sequence database.", "Heuristic": []}, {"nl": "Returns result value as boolean.", "Heuristic": []}, {"nl": "Enable/disable drag/drop", "Heuristic": ["H2"]}, {"nl": "Sets the type of grant which is exchanged for this token", "Heuristic": []}, {"nl": "A wrapper for  {@link #valueOf(String)}. It returns null instead of throwing an exception.", "Heuristic": ["H1"]}, {"nl": "Set the Subject Role Classifier Type to use. Currently accepted values are \"prefix\" or  \"classname\". Must be used in conjunction with the SUBJECT_ROLE_CLASSIFIER. The default  value is \"prefix\".", "Heuristic": ["H1"]}, {"nl": "loads a resource for the specified path", "Heuristic": ["H1"]}, {"nl": "Methods to call during initialization", "Heuristic": []}, {"nl": "Computes the Greatest Common Divisor of two BigIntegers.", "Heuristic": []}, {"nl": "Size.", "Heuristic": ["H2"]}, {"nl": "Sets the feed id.", "Heuristic": ["H1"]}, {"nl": "A code defining the type of the value as defined above.", "Heuristic": []}, {"nl": "Get the utility of a cell in the projected q-matrix at a given cell position (row,column)", "Heuristic": ["H1"]}, {"nl": "get current time in milliseconds", "Heuristic": ["H1"]}, {"nl": "Find and remove all expired auth codes.", "Heuristic": []}, {"nl": "Adds a repository permission to the team.  Role may be formatted as:   myrepo.git (this is implicitly RW+)  RW+:myrepo.git ", "Heuristic": ["H1"]}, {"nl": "Check if a node is in the open list", "Heuristic": []}, {"nl": "Append  {@code o} to {@code l}, returning  {@code l}.", "Heuristic": ["H1"]}, {"nl": "Closes the input channel of this socket.  This default implementation always throws an  {@link IOException} toindicate that the subclass should have overridden this method.", "Heuristic": ["H1"]}, {"nl": "Returns true if this objects chainWork is higher than the others.", "Heuristic": []}, {"nl": "The Id for a place to tag with this content.", "Heuristic": ["H1"]}, {"nl": "remove the service given the gateway id", "Heuristic": ["H1"]}, {"nl": "Specifies whether to generate \"a=rtpmap:\" attributes for static RTP/AVP format strings. This is recommended but makes messages bigger. The default is not to write such attributes.", "Heuristic": ["H1"]}, {"nl": "Converts the specified  {@link String} to a {@link ByteBuffer}.  The string encoding is assumed to be ASCII.", "Heuristic": ["H1"]}, {"nl": "For caches that do not override  {@link #sizeOf}, this returns the maximum number of entries in the cache. For all other caches, this returns the maximum sum of the sizes of the entries in this cache.", "Heuristic": ["H1"]}, {"nl": "Return the name of the last task.", "Heuristic": []}, {"nl": "Requests a block from the server. This call will read the full block.", "Heuristic": []}, {"nl": "Return whether this SecurityToken is expired or not", "Heuristic": []}, {"nl": "Sets the replacement string for any characters outside the 'safe' range that have no explicit replacement. If  {@code unsafeReplacement} is {@code null} then no replacement will occur, ifit is  {@code \"\"} then the unsafe characters are removed from the output.", "Heuristic": ["H1"]}, {"nl": "Runs an example.", "Heuristic": []}, {"nl": "Restore any instance state associated with this adapter and its pages that was previously saved by  {@link #saveState()}.", "Heuristic": ["H1"]}, {"nl": "Get a SSL wrapped TServerSocket bound to the specified port. In this configuration the default settings are used. Default settings are retrieved from System properties that are set. Example system properties: -Djavax.net.ssl.trustStore= -Djavax.net.ssl.trustStorePassword=password -Djavax.net.ssl.keyStore= -Djavax.net.ssl.keyStorePassword=password", "Heuristic": ["H1"]}, {"nl": "Appends a new block to the end of the specified B-tree file, having the specified flag value.", "Heuristic": []}, {"nl": "Check whether finished", "Heuristic": []}, {"nl": "Get the column this frame points to in the file returned by  {@link #getFile()}.", "Heuristic": ["H1"]}, {"nl": "Destructor cleans up.", "Heuristic": []}, {"nl": "Set the request code for the startActivityForResult call. The requestCode should be outside of the range of those reserved for the Facebook SDK {@link com.facebook.FacebookSdk#isFacebookRequestCode(int)}.", "Heuristic": ["H1"]}, {"nl": "Frees Database Connection.", "Heuristic": []}, {"nl": "Get all the relying party service providers", "Heuristic": ["H1"]}, {"nl": "Return the optional list of user roles which may have  been captured during the authentication process", "Heuristic": ["H1"]}, {"nl": "Applies umask to the mode bits.", "Heuristic": ["H1"]}, {"nl": "Calls nextStep method in Fuzzy Tasker.", "Heuristic": ["H1"]}, {"nl": "Create a new LocationUpdateRequester", "Heuristic": []}, {"nl": "Get the support of the itemset represented by this utility-list", "Heuristic": ["H1"]}, {"nl": "Description of the Method", "Heuristic": []}, {"nl": "Right Move the drone a little to the right", "Heuristic": []}, {"nl": "If within the scope of a EL evaluation call, it gives access to the ELEvaluator instance performing the EL evaluation.  This is useful for EL function methods to get access to the variables of the Evaluator. Because of this, ELEvaluator variables can be used to pass context to EL function methods (which must be static methods). ", "Heuristic": []}, {"nl": "Set the subject", "Heuristic": []}, {"nl": "Returns a boolean indicating whether the file manager had to create a new database directory.", "Heuristic": []}, {"nl": "Returns a function that ignores its input and always returns  {@code value}. Java 8 users: use the lambda expression  {@code o -> value} instead.", "Heuristic": ["H1"]}, {"nl": "Get the wsse11 TokenType attribute", "Heuristic": []}, {"nl": "Sets the result code.", "Heuristic": []}, {"nl": "Creates an RPC connection of the appropriate type and connection details  //@param type     RPC type", "Heuristic": ["H1"]}, {"nl": "Returns the debugger window  {@link JFrame}.", "Heuristic": ["H1"]}, {"nl": "Performs message encoding of a DataMatrix message using the algorithm described in annex P of ISO/IEC 16022:2000(E).", "Heuristic": []}, {"nl": "Test finding blacklisted sites from the repository.", "Heuristic": []}, {"nl": "Returns the unsigned  {@code int} value represented by a string with the given radix.", "Heuristic": ["H1"]}, {"nl": "The authentication in place when this token was created.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RTEParser#setSentenceCount(int)}.", "Heuristic": ["H1"]}, {"nl": "GET  /users/:login -> get the \"login\" user.", "Heuristic": ["H1"]}, {"nl": "Create a program that satisfies an OP_CHECKMULTISIG program, using pre-encoded signatures.  Optionally, appends the script program bytes if spending a P2SH output.", "Heuristic": ["H1"]}, {"nl": "Checks if authentication is enabled.", "Heuristic": []}, {"nl": "Set the referenced revision label in B.", "Heuristic": []}, {"nl": "Creates a builder that is capable of creating an instance of  {@link ReactInstanceManagerImpl}.", "Heuristic": ["H1"]}, {"nl": "Calculates |z[i]| for all i", "Heuristic": []}, {"nl": "Sets the safe range of characters for the escaper. Characters in this range that have no explicit replacement are considered 'safe' and remain unescaped in the output. If {@code safeMax < safeMin} then the safe range is empty.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns the timeout in milliseconds used when retrieving a {@link org.apache.ogt.http.conn.ManagedClientConnection} from the{@link org.apache.ogt.http.conn.ClientConnectionManager}.", "Heuristic": ["H1"]}, {"nl": "Return true if this is a 256 bit digest instance.", "Heuristic": []}, {"nl": "add a listener", "Heuristic": ["H1"]}, {"nl": "Required.", "Heuristic": ["H2"]}, {"nl": "Gets the total time elapsed (in milliseconds).", "Heuristic": []}, {"nl": "Applies any rendering hints configured for these ScalingOptions to a Graphics2D instance before image operations are called on it. These might be", "Heuristic": []}, {"nl": "write.", "Heuristic": ["H1", "H2"]}, {"nl": "Get the current classname prefix.", "Heuristic": ["H1"]}, {"nl": "Reads all data from the file and send it to the sink.", "Heuristic": []}, {"nl": "Returns result value as binary data.", "Heuristic": []}, {"nl": "Calls  {@link BlockLockManager#lockBlock(long,long,BlockLockType)} and fails if it doesn'thang.", "Heuristic": ["H1"]}, {"nl": "Removes all elements  {@code s} in the set such that {@code s} decends from {@code o}", "Heuristic": ["H1"]}, {"nl": "Accessor for the FaultTo property.", "Heuristic": ["H1"]}, {"nl": "set name of emoji icon", "Heuristic": ["H1"]}, {"nl": "call once when this seqNo is fed back in NAK", "Heuristic": ["H1"]}, {"nl": "Set the Subject Role Classifier to use. If this value is not specified, then it tries to get roles from the supplied JAAS Subject (if not null) using the DefaultSecurityContext  in cxf-rt-core. Otherwise it uses this value in combination with the  SUBJECT_ROLE_CLASSIFIER_TYPE to get the roles from the Subject.", "Heuristic": ["H1"]}, {"nl": "Tests writing an increasing byte array one byte at a time.", "Heuristic": []}, {"nl": "Returns  {@code true} if the input limit has been reached.", "Heuristic": ["H1"]}, {"nl": "Write the given short value (16-bit) in big-endian order to the buffer", "Heuristic": []}, {"nl": "Removes a file from the bucket containing it if the file is in one of the buckets, otherwise, do nothing.  Assume that no file in the buckets has ttl value that equals  {@link Constants#NO_TTL}. If a file with valid ttl value is inserted to the buckets and its ttl value is going to be set to  {@link Constants#NO_TTL} later, be sure to remove the file from the buckets first.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the noRun property.", "Heuristic": []}, {"nl": "Checks whether a user has permission to perform a specific action on a path. This check will pass if the path is invalid.", "Heuristic": []}, {"nl": "Execute DELETE query.", "Heuristic": []}, {"nl": "Tests that an exception is thrown when trying to delete a non-existing lineage via the {@link LineageStore#deleteLineage(long)} method.", "Heuristic": []}, {"nl": "Returns whether the socket supports urgent data or not. Subclasses should override this method.", "Heuristic": []}, {"nl": "Gets the value of the handlerName property.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Captures SshDisconnectedEvent", "Heuristic": []}, {"nl": "Called to inform the adapter of which item is currently considered to be the \"primary\", that is the one show to the user as the current page.", "Heuristic": []}, {"nl": "Returns the message number of the message within its sequence.", "Heuristic": []}, {"nl": "Get a List of Strings that corresponds to the issuer regular expression constraints from a JAXB CertificateConstraintsType", "Heuristic": ["H1"]}, {"nl": "Set the list of registered audiences", "Heuristic": []}, {"nl": "Create a program that satisfies an OP_CHECKMULTISIG program.", "Heuristic": ["H1"]}, {"nl": "Returns the value of the given  {@code int} as a {@code long}, when treated as unsigned.", "Heuristic": ["H1"]}, {"nl": "Gets the file descriptor of this socket.", "Heuristic": []}, {"nl": "Process the OpenID mapping file", "Heuristic": []}, {"nl": "Get one site by id.", "Heuristic": ["H1"]}, {"nl": "A static utility method to automatically create an image from a document; the image supports transparency. To render an image that does not support transparency, use the overloaded version of this method  {@link #renderToImage(String,int,int,int)}.", "Heuristic": ["H1"]}, {"nl": "Reverses all bits in the array.", "Heuristic": []}, {"nl": "Gets a  {@link ByteBuffer} containing an increasing sequence of bytes starting at the givenvalue.", "Heuristic": ["H1"]}, {"nl": "Returns true if there is another postponed route to try.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#setStatus()} .", "Heuristic": ["H1"]}, {"nl": "Checks if the path is a windows path. This should be platform independent.", "Heuristic": ["H1"]}, {"nl": " Final computation for a single row of 'v':  v = y -(1/2)&gamma;(y^Tu)u ", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns the URL without the port and the query string part.", "Heuristic": []}, {"nl": "Puts the token value into a Bundle.", "Heuristic": []}, {"nl": "Current count of white stones.", "Heuristic": []}, {"nl": "Return the preview associated with the given UUID", "Heuristic": []}, {"nl": "Checks with heap is empty or not", "Heuristic": []}, {"nl": "Return a Dag engine for a system user (no user, no group).", "Heuristic": []}, {"nl": "Test of getResourceStream method, of class ResourceLoader.", "Heuristic": []}, {"nl": "the CSS condition [attribute]", "Heuristic": ["H1"]}, {"nl": "Adds each member of  {@code elements} as a candidate for the top {@code k} elements. Thisoperation takes amortized linear time in the length of  {@code elements}. If all input data to this  {@code TopKSelector} is in a single {@code Iterable}, prefer  {@link Ordering#leastOf(Iterable,int)}, which provides a simpler API for that use case.", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link ProjectValidation }", "Heuristic": ["H1"]}, {"nl": "add key-value pair to map, both key and value need not null or empty", "Heuristic": ["H1"]}, {"nl": "Return the first not null value, or null if both are null. Defined for EL as 'Object firstNotNull(Object, Object)'.", "Heuristic": []}, {"nl": "Tests that keys are evicted after the configured timeout.", "Heuristic": []}, {"nl": "Gets the value of the csr property.", "Heuristic": ["H1"]}, {"nl": "Send an ERROR log message.", "Heuristic": []}, {"nl": "Getter for the recently granted permissions.", "Heuristic": []}, {"nl": "Returns true if the monetary value represented by this instance is less than that of the given other Coin, otherwise false.", "Heuristic": []}, {"nl": "Set the type of the request", "Heuristic": []}, {"nl": "Generates an MD5 key for the given text.", "Heuristic": []}, {"nl": "Write the given int value (32-bit) in big-endian order to the buffer", "Heuristic": []}, {"nl": "Acquires the write lock for this inode.", "Heuristic": ["H1"]}, {"nl": "Generate \"final\" keyword for final operations or attributes.", "Heuristic": []}, {"nl": "Returns a diagonal matrix with the singular values.  The singular values are ordered from largest to smallest.", "Heuristic": []}, {"nl": "Creates and maintains a singleton instance of OpenIDClaimMapper", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Frees a Hessian 2.0 deserializer", "Heuristic": ["H1"]}, {"nl": "Main method for SshExample", "Heuristic": []}, {"nl": "removes all punctuation marks from  a post", "Heuristic": ["H1"]}, {"nl": "Gets the abstraction with which the sink has been reached", "Heuristic": []}, {"nl": "Obtains the package name. The package name identifies the module or informal unit.", "Heuristic": []}, {"nl": "Compares this bucket's TTL interval start time to that of another bucket.", "Heuristic": []}, {"nl": "Extract the content and metadata from the input stream. Depending on media type validation, the detector could be run against input stream in order to ensure that parser supports this type of content.", "Heuristic": []}, {"nl": "Returns the top  {@code k} elements offered to this {@code TopKSelector}, or all elements if fewer than  {@code k} have been offered, in the order specified by the factory used to createthis  {@code TopKSelector}. The returned list is an unmodifiable copy and will not be affected by further changes to this  {@code TopKSelector}. This method returns in O(k log k) time.", "Heuristic": ["H1"]}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.parser.ZDAParser#getTime()}.", "Heuristic": ["H1"]}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.util.Date#getDay()}.", "Heuristic": ["H1"]}, {"nl": "Finds a view that was identified by the id attribute from the XML that was processed in onCreate(Bundle).", "Heuristic": ["H1"]}, {"nl": "Checks that the expected  {@link LanguageVersion} can be found by thecombination of  {@link #terseName} and {@link #version}.", "Heuristic": ["H1"]}, {"nl": "Replaces the wildcards with Java's regex semantics.", "Heuristic": []}, {"nl": "Sets the exp data unit id.", "Heuristic": ["H1"]}, {"nl": "Returns the object used to calculate the metric. @return The calculator.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.GSVParser#getSentenceIndex()}.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Save a siteUrl.", "Heuristic": ["H1"]}, {"nl": "Creates a default block request message, just allocates the message header, and no attribute is set. The message is not ready to be sent.", "Heuristic": []}, {"nl": "Check if transaction is active", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#getTimeToCPA()} .", "Heuristic": ["H1"]}, {"nl": "End an object. This method most be called to balance calls to object.", "Heuristic": []}, {"nl": "Captures SshDisconnectedEvent", "Heuristic": []}, {"nl": "Returns a new thread factory using the options supplied during the building process. After building, it is still possible to change the options used to build the ThreadFactory and/or build again. State is not shared amongst built instances.", "Heuristic": []}, {"nl": "Get the Value value.", "Heuristic": ["H1"]}, {"nl": "Moves to the next record, which in this case means moving the index to the next record satisfying the selection constant, and returning false if there are no more such index records. If there is a next record, the method moves the  tablescan to the corresponding data record.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link UnderStoreBlockInStream#seek(long)} method for the last block of the file.", "Heuristic": ["H1"]}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.util.Date#setMonth(int)}.", "Heuristic": ["H1"]}, {"nl": "Puts the enum indicating the source of the token into a Bundle.", "Heuristic": ["H1"]}, {"nl": "The correct specificity value for this selector and its sibling-axis selectors", "Heuristic": []}, {"nl": "Converts a wire type to a thrift type.", "Heuristic": []}, {"nl": "Process a current chunk", "Heuristic": []}, {"nl": "Returns the best individual in the specified population, according to the specified FITNESS-FN and number of iterations.", "Heuristic": []}, {"nl": "Gets the RPPA Value.", "Heuristic": ["H1"]}, {"nl": "Start an unnamed task. The results are undefined if  {@link #stop()}or timing methods are called without invoking this method.", "Heuristic": ["H1"]}, {"nl": "Moves from the current node to the given attribute.", "Heuristic": []}, {"nl": "Get the EncryptionProperties to be used to encrypt tokens issued for this service", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets the access token of the shared test user with the tag for the application with the requested permissions.", "Heuristic": []}, {"nl": "Sets the used space of the worker in bytes.", "Heuristic": []}, {"nl": "Closes a  {@link Closeable}, with control over whether an  {@code IOException} may be thrown.This is primarily useful in a finally block, where a thrown exception needs to be logged but not propagated (otherwise the original exception will be lost). If  {@code swallowIOException} is true then we never throw {@code IOException} but merely logit. Example:     {@code}public void useStreamNicely() throws IOException  SomeStream stream = new SomeStream(\"foo\"); boolean threw = true; try { // ... code which does something with the stream ... threw = false; } finally { // If an exception occurs, rethrow it only if threw==false: Closeables.close(stream, threw); } }}", "Heuristic": ["H1"]}, {"nl": "Setter for a property. If the property already exists, the value will be overridden. Hint: This method is intended as an alternative way to set properties programmatically instead of using the fckeditor.properties. It should never used inside FCKeditor.Java!!!", "Heuristic": ["H1"]}, {"nl": "All get methods", "Heuristic": []}, {"nl": "Add an alias/password pair to the callback mechanism.", "Heuristic": []}, {"nl": "Adds an item stack into the inventory", "Heuristic": []}, {"nl": "Produce a JSONArray of JSONObjects from a comma delimited text string, using the first row as a source of names.", "Heuristic": []}, {"nl": "delete a contact", "Heuristic": ["H1"]}, {"nl": "Obtains an XLock on the block, if necessary. If the transaction does not have an XLock on that block, then the method first gets an SLock on that block (if necessary), and then upgrades it to an XLock.", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.util.Date#Date()}.", "Heuristic": ["H1"]}, {"nl": "Return value on the top of the stack (without popping it).", "Heuristic": []}, {"nl": "Creates a copy of this instance", "Heuristic": []}, {"nl": "Converts the given OpCode into a string (eg \"0\", \"PUSHDATA\", or \"NON_OP(10)\")", "Heuristic": ["H1"]}, {"nl": "Util function to remove get the metrics name without instance and host.", "Heuristic": ["H1"]}, {"nl": "Return everything in the path up to the last slash in a URI.", "Heuristic": []}, {"nl": "Tests the  {@link SetAttributeOptions#defaults()} method.", "Heuristic": ["H1"]}, {"nl": "Retrieve the tag object associated with this ActionMode. Like the tag available to views, this allows applications to associate arbitrary data with an ActionMode for later reference.", "Heuristic": []}, {"nl": "Returns the uint32 encoded form of the path element, including the most significant bit.", "Heuristic": []}, {"nl": "Returns the answer to the specified question using the TT-Entails algorithm.", "Heuristic": []}, {"nl": "Sets custom Produces media types; can be used to override static {@link Produces} annotation value set on the provider.", "Heuristic": []}, {"nl": "Checks if this is a valid command or not. Mainly if its just an empty string", "Heuristic": ["H1"]}, {"nl": "Test case for  {@link S3AUnderFileSystem#delete(String,boolean)}.", "Heuristic": ["H1"]}, {"nl": "Estimates the length of a formatted name-value pair.", "Heuristic": []}, {"nl": "Allows third party apps to specify the camera ID, rather than determine it automatically based on available cameras and their orientation.", "Heuristic": []}, {"nl": "Clones a list of  {@link ByteBuffer}s.", "Heuristic": ["H1"]}, {"nl": "Gets the optional title for the dialog", "Heuristic": []}, {"nl": "Convenience method that can decode a PDF417 Code represented as a 2D array of booleans. \"true\" is taken to mean a black module.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Adds a directed labeled edge to the graph. The end points of the edge are specified by vertex labels. New vertices are automatically identified and added to the graph.", "Heuristic": []}, {"nl": "Tests the  {@link Mode#equals(Object)} method.", "Heuristic": ["H1"]}, {"nl": "Returns the parameter value", "Heuristic": []}, {"nl": "Create Error object to be passed back to the JS callback.", "Heuristic": []}, {"nl": "Returns a list of all loggers that will be accessed by XRLog. Each entry is a String with a logger name, which can be used to retrieve the logger using the corresponding Logging API; example name might be \"org.xhtmlrenderer.config\"", "Heuristic": ["H1"]}, {"nl": "Adds a JobsGroup to the queue, and starts immediately to execute jobs on that group. If there was a previously group running, this method finishes that execution first.", "Heuristic": ["H1"]}, {"nl": "Return the offset of the workflows being returned.  For pagination purposes.", "Heuristic": []}, {"nl": "Set the mappings from namespace URI to Javascript name prefixes.", "Heuristic": ["H1"]}, {"nl": "Sets the seq id.", "Heuristic": ["H1"]}, {"nl": "Gets the new merged profile data object.", "Heuristic": []}, {"nl": " Creates a reflector from the provided vector and gamma.  Q = I - &gamma; u uT   In practice  {@link org.ejml.alg.dense.mult.VectorVectorMult#householder(double,org.ejml.data.D1Matrix64F,org.ejml.data.D1Matrix64F,org.ejml.data.D1Matrix64F)}  multHouseholder}should be used for performance reasons since there is no need to calculate Q explicitly. ", "Heuristic": ["H1"]}, {"nl": "Creates a new mode by applying the given umask  {@link Mode} to this mode.", "Heuristic": ["H1"]}, {"nl": "Convenience method for creating a waypoint based in the Position.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Sets the test id.", "Heuristic": ["H1"]}, {"nl": "Positions the scan before its first record. In other words, the LHS scan is positioned at  its first record, and the RHS scan is positioned before its first record.", "Heuristic": ["H1"]}, {"nl": " Sets if it should internally save the W matrix before performing the decomposition.  Must be set before decomposition the matrix.   Saving W can result in about a 5% savings when solving systems around a height of 5k.  The price is that it needs to save a matrix the size of the input matrix. ", "Heuristic": ["H1"]}, {"nl": "Sets the protocol handler to use for this connection.", "Heuristic": []}, {"nl": "Retrieves a byte array field from the stream. Creates a new byte array that is the size of the object being retrieved.", "Heuristic": []}, {"nl": "Sets the value of the source property.", "Heuristic": []}, {"nl": "Gets the value of the city property.", "Heuristic": []}, {"nl": "getInstance method of LogoutRequestSender, as it is a singleton", "Heuristic": ["H1"]}, {"nl": "Returns numerator", "Heuristic": ["H2"]}, {"nl": "Gets the final component of the  {@link AlluxioURI}.", "Heuristic": ["H1"]}, {"nl": "Copies Request ID to response as per XKMS specification http://www.w3.org/TR/xkms2/#XKMS_2_0_Section_1", "Heuristic": []}, {"nl": "JSObject will return the String \"undefined\" at certain times, so we  need to make sure we're not getting a value that looks valid, but isn't.", "Heuristic": ["H1"]}, {"nl": "Redraw the page", "Heuristic": []}, {"nl": "Delete the user object with the specified username", "Heuristic": []}, {"nl": "Constructs a String with all attributes in name = value format.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.PositionParser#setLatitude(int,double)}.", "Heuristic": ["H1"]}, {"nl": "Disconnect this undo/redo from the text view.", "Heuristic": []}, {"nl": "Add a high level change (renaming). If the difference group identifier already exists the old high level change (renaming) will be overwritten.", "Heuristic": []}, {"nl": "Send a DEBUG log message.", "Heuristic": []}, {"nl": "Make a request to the Facebook Graph API with the given string parameters using an HTTP GET (default method).  See http://developers.facebook.com/docs/api  Note that this method is asynchronous and the callback will be invoked in a background thread; operations that affect the UI will need to be posted to the UI thread or an appropriate handler.  This method is deprecated.  See  {@link Facebook} and {@link com.facebook.Request} for more info.", "Heuristic": ["H1"]}, {"nl": "Sets the rotation.", "Heuristic": []}, {"nl": "get boolean preferences", "Heuristic": ["H1"]}, {"nl": "Returns the length of the matched token. It is not required to be meaningful unless addChar has returned true and hasFreePart returned false or endChar returned true.", "Heuristic": []}, {"nl": "After a word has been stemmed, it can be retrieved by toString(), or a reference to the internal buffer can be retrieved by getResultBuffer and getResultLength (which is generally more efficient.)", "Heuristic": []}, {"nl": "Sets up a new  {@link ByteBuffer} before a test runs.", "Heuristic": ["H1"]}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.parser.RTEParser#isFirst()}.", "Heuristic": ["H1"]}, {"nl": "All set methods", "Heuristic": []}, {"nl": "Sets Entrez Gene ID for Gene B.", "Heuristic": ["H1"]}, {"nl": "Returns the claim retriever class name", "Heuristic": []}, {"nl": "Verbose log message.", "Heuristic": []}, {"nl": "object begin.", "Heuristic": ["H1", "H2"]}, {"nl": "Adds the given values to the dataset.", "Heuristic": []}, {"nl": "Tests that a  {@link ClosedChannelException} is thrown when trying to append to a channel afterclosing it.", "Heuristic": ["H1"]}, {"nl": "Tests that the  {@link BlockId#createBlockId(long,long)} method works correctly when creating ablock with the maximum sequence number.", "Heuristic": ["H1"]}, {"nl": "This tests everything that the test for the static file above tests, but it also does the full download.", "Heuristic": []}, {"nl": "Tests the  {@link UnderStoreBlockInStream#skip(long)} method for the last block of the file.", "Heuristic": ["H1"]}, {"nl": "Parse a string into a  {@code Stmt} AST node,applying substitutions.", "Heuristic": ["H1"]}, {"nl": "Overwrites the first header with the same name. The new header will be appended to the end of the list, if no header with the given name can be found.", "Heuristic": []}, {"nl": "Gets the value of the number property.", "Heuristic": []}, {"nl": "Gets a list of URIs the AuthorizationService may return the authorization code to", "Heuristic": []}, {"nl": "Returns the next header. Same as  {@link #nextHeader nextHeader}, but not type-safe.", "Heuristic": ["H1"]}, {"nl": "Gets the errors.", "Heuristic": []}, {"nl": "Compare two cancer studies.", "Heuristic": []}, {"nl": "Sets the value of the name property.", "Heuristic": []}, {"nl": "Performs domain-match as defined by the RFC2965.  Host A's name domain-matches host B's if  their host name strings string-compare equal; or A is a HDN string and has the form NB, where N is a non-empty name string, B has the form .B', and B' is a HDN string.  (So, x.y.com domain-matches .Y.com but not Y.com.) ", "Heuristic": ["H1"]}, {"nl": "Returns an iterator for the log records, which will be returned in reverse order starting with the most recent.", "Heuristic": []}, {"nl": "Returns a factor for converting logical symbol size units into screen dots.", "Heuristic": []}, {"nl": "Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData.Merchant.Addresses }", "Heuristic": ["H1"]}, {"nl": "Appends the contents of the page to the specified file.", "Heuristic": []}, {"nl": "Populates the internal collection of registered  {@link Scheme protocol schemes}with the content of the map passed as a parameter.", "Heuristic": ["H1"]}, {"nl": "A single Node is always valid", "Heuristic": []}, {"nl": "Set the number of not approved conflicts.", "Heuristic": []}, {"nl": "Sets the value of the arg0 property.", "Heuristic": []}, {"nl": "Removes an edge from the graph.", "Heuristic": []}, {"nl": "Track a failure - multiply the back off interval by the multiplier", "Heuristic": []}, {"nl": "Attempts to move the AI to the attack target.", "Heuristic": []}, {"nl": "Tries to pull the gitblit server settings from the remote gitblit instance.", "Heuristic": ["H1"]}, {"nl": "Given its index determine if the set contains a particular terminal.", "Heuristic": []}, {"nl": "True when a valid surrogate pair starts at the given  {@code index} in the given {@code string}. Out-of-range indexes return false.", "Heuristic": ["H1"]}, {"nl": "Gets the actual bind hostname on RPC service (used by unit test only).", "Heuristic": []}, {"nl": "Set the private store", "Heuristic": []}, {"nl": "Returns a string that would replace the given character in the specified escaper, or {@code null} if no replacement should be made. This method is intended for use in tests throughthe  {@code EscaperAsserts} class; production users of {@link UnicodeEscaper} should limitthemselves to its public interface.", "Heuristic": ["H1"]}, {"nl": "Test case for  {@link OSSUnderFileSystem#rename(String,String)}.", "Heuristic": ["H1"]}, {"nl": "Reads an XML node encoded in UTF-8  x b16 b8 non-final xml chunk X b16 b8 final xml chunk ", "Heuristic": ["H1"]}, {"nl": "Adds the given opcode to the end of the program.", "Heuristic": []}, {"nl": "Get the key size to use when generating a symmetric key. The default is 256 bits.", "Heuristic": []}, {"nl": "Tests the creation of the  {@link GreedyAllocator} via the{@link Allocator.Factory#create(BlockMetadataManagerView)} method.", "Heuristic": ["H1"]}, {"nl": "encode the input data producing a Hex output stream.", "Heuristic": ["H1"]}, {"nl": "Set content encoding for the message", "Heuristic": []}, {"nl": "Subclasses must call this method after finishing character processing, in order to ensure that any unterminated line in the buffer is passed to  {@link #handleLine}.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Increment the use count.", "Heuristic": []}, {"nl": "Moves to the next valid document.", "Heuristic": []}, {"nl": "Put transaction hash into result intent. Meant for usage by Bitcoin wallet applications.", "Heuristic": []}, {"nl": "Returns the value of a negotiated property.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns an iterator over orders line items.", "Heuristic": []}, {"nl": "Change the value of this cookie", "Heuristic": []}, {"nl": "Set the value of checkedFlag", "Heuristic": []}, {"nl": "Test method for  {@link ActivityController#handleEvent(org.osgi.service.event.Event)}Verifies that  {@code IllegalArgumentException} is thrown when {@code Event}'s  {@link ActivityEvent#MESSAGE_KEY} property isnull.", "Heuristic": ["H1"]}, {"nl": "Called to ask the  {@link Presenter} to save its current dynamic state, so itcan later be reconstructed in a new instance of its process is restarted.", "Heuristic": ["H1"]}, {"nl": "Returns the string value stored at the specified offset of the specified block. The method first obtains an SLock on the block, then it calls the buffer to retrieve the value.", "Heuristic": []}, {"nl": "Deserializes only the header in case packet meta data is needed before decoding the payload. This method assumes you have already called seekPastMagicBytes()", "Heuristic": ["H1"]}, {"nl": "Add the given Rule if it wants to participate in the RuleChain.", "Heuristic": []}, {"nl": "Activates the event.", "Heuristic": []}, {"nl": "&lt;a&gt; &lt;b&gt; &lt;b&gt; &lt;/a&gt;", "Heuristic": ["H1"]}, {"nl": "Registers egg.", "Heuristic": ["H2"]}, {"nl": "The given listener will be called on the autosave thread before and after the wallet is saved to disk.", "Heuristic": []}, {"nl": "Initialize the scheduler service.", "Heuristic": []}, {"nl": "the next sequence number for data packets. The initial sequence number is \"0\"", "Heuristic": ["H1"]}, {"nl": "Removes the header that was returned last.", "Heuristic": []}, {"nl": "Add an alias/password pair to the callback mechanism.", "Heuristic": []}, {"nl": "Set if client authentication is required", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Split a String by a Character, i.e. Split lines by using '\\n'. Same behavior as String.split(\"\" + pCharacter); .", "Heuristic": ["H1"]}, {"nl": "Puts a RUDP checksum into the RUDP header.  The byte buffer must be a fully formed RUDP segment that is missing its checksum.", "Heuristic": ["H1"]}, {"nl": "removes node having given key as value", "Heuristic": ["H1"]}, {"nl": "Returns the Y coordinate of this Point2D in double precision.", "Heuristic": []}, {"nl": "Creates a NMEA file reader. The file stream is not automatically opened!", "Heuristic": ["H1"]}, {"nl": "Determine if message is fault.", "Heuristic": []}, {"nl": "Test of getDeviceID method, of class Device.", "Heuristic": []}, {"nl": "Gets the references for all discovered JAX-RS providers", "Heuristic": ["H1"]}, {"nl": "This function performs sanity check on the input for decompose and sets up the QR matrix.", "Heuristic": []}, {"nl": "Test if a repository path is for a personal repository of a specific user.", "Heuristic": []}, {"nl": "Tests the  {@link ClientRWLock#unlock()} method.", "Heuristic": ["H1"]}, {"nl": "Increment the integer by 1.", "Heuristic": []}, {"nl": "Computes the circumference of the circle at the given latitude.", "Heuristic": []}, {"nl": "Updates the profile on DataManager's record set for objects. Changes are not persistent.", "Heuristic": []}, {"nl": "Returns  {@code true} if any bit is set.", "Heuristic": ["H1"]}, {"nl": "Closes  {@code socket}, ignoring any checked exceptions. Does nothing if {@code socket} is null.", "Heuristic": ["H1"]}, {"nl": "Formats a request line.", "Heuristic": []}, {"nl": "Deletes the index record at the specified slot.", "Heuristic": []}, {"nl": "Create REBASE-MERGE-WITH query.", "Heuristic": []}, {"nl": "The getter for the instance.", "Heuristic": []}, {"nl": "Puts the specified name/value pair in the specified JSON object.", "Heuristic": []}, {"nl": "Helper for error callbacks that just returns the Status.ERROR by default", "Heuristic": ["H1"]}, {"nl": "Set cover image", "Heuristic": []}, {"nl": "Get the encryption key-wrap algorithm to use", "Heuristic": []}, {"nl": "Returns the empty map.", "Heuristic": []}, {"nl": "Sets the recursive flag.", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.parser.ZDAParser#getTime()}.", "Heuristic": ["H1"]}, {"nl": "Apply mask penalty rule 1 and return the penalty. Find repetitive cells with the same color and give penalty to them. Example: 00000 or 11111.", "Heuristic": []}, {"nl": "The particle filtering algorithm implemented as a recursive update operation with state (the set of samples).", "Heuristic": []}, {"nl": "Returns the raw value byte array.", "Heuristic": []}, {"nl": "Gets the open graph id of the object that action type will be performed on", "Heuristic": ["H1"]}, {"nl": "Return the name of this app.", "Heuristic": []}, {"nl": "Erase the text of this element.", "Heuristic": []}, {"nl": "Process a single character byte, or hex encoded character byte.", "Heuristic": []}, {"nl": "action() with no args provided as an exception-handling action listener.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the id property.", "Heuristic": ["H1"]}, {"nl": "Renders the XML file at the given URL as a PDF file at the target location.", "Heuristic": []}, {"nl": "Consume len bytes from the underlying buffer.", "Heuristic": ["H1"]}, {"nl": "Returns true if this interval is not lower inclusive.", "Heuristic": []}, {"nl": "Gets the value of the projectSecret property.", "Heuristic": []}, {"nl": "Get first day of week as android.text.format.Time constant.", "Heuristic": ["H1"]}, {"nl": "Sets the filters for everybody/app users/non app users", "Heuristic": []}, {"nl": "Runs the provided action at the given optimization level", "Heuristic": []}, {"nl": "Create an instance of  {@link BrowseOffersResponse.Return.OfferData.OfferMedia.OfferImage.Entry }", "Heuristic": ["H1"]}, {"nl": "Create proxy object for  {@link InterfaceAdapter}. The proxy should call {@link InterfaceAdapter#invoke(ContextFactory cf,Object target,Scriptable topScope,Method method,Object[] args)}as implementation of interface methods associated with proxyHelper.", "Heuristic": ["H1"]}, {"nl": "Add new node to tree.", "Heuristic": []}, {"nl": "Gets the value of the partNum property.", "Heuristic": ["H1"]}, {"nl": "Closes the journal.", "Heuristic": []}, {"nl": "Internal use, runs the render process", "Heuristic": []}, {"nl": "Returns a new array that prepends  {@code element} to {@code array}.", "Heuristic": ["H1"]}, {"nl": "Sets the TypeEvaluator to be used when calculating animated values. This object is required only for KeyframeSets that are not either IntKeyframeSet or FloatKeyframeSet, both of which assume their own evaluator to speed up calculations with those primitive types.", "Heuristic": ["H1"]}, {"nl": "Creates the version object based on the dimension of the original bit matrix from  the datamatrix code. See ISO 16022:2006 Table 7 - ECC 200 symbol attributes", "Heuristic": ["H1"]}, {"nl": "Set the address of the provided endpoint reference.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Remove a setting.", "Heuristic": []}, {"nl": "Required.", "Heuristic": ["H2"]}, {"nl": "Returns a kd-tree with all entities.", "Heuristic": ["H1"]}, {"nl": "Register a new source language importer.", "Heuristic": []}, {"nl": "Attempt to determine the actual class given the short name.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Creates a  {@code CollectorTester} for the specified {@code Collector}. The result of the  {@code Collector} will be compared to the expected value using the specified {@code equivalence}.", "Heuristic": ["H1"]}, {"nl": "Returns the specified  {@link org.w3c.dom.css.CSSValue} for this property.Specified means the value as entered by the user. Modifying the CSSValue returned here will result in indeterminate behavior--consider it immutable.", "Heuristic": ["H1"]}, {"nl": "Get the name of the method this frame points to.", "Heuristic": []}, {"nl": "Concatenate two byte arrays.", "Heuristic": []}, {"nl": "Register the given directory, and all its sub-directories, with the WatchService.", "Heuristic": ["H1"]}, {"nl": "Set day of month.", "Heuristic": []}, {"nl": "Collect RMAssertions from map. This checks both namespaces defined for WS-RM policy assertions, along with the WS-I RSP namespace.", "Heuristic": []}, {"nl": "Sets other bits.", "Heuristic": []}, {"nl": "Unpins the specified buffer.", "Heuristic": []}, {"nl": "Stream the log of a job.", "Heuristic": []}, {"nl": "Two namespaces are equal when they are namespaces and have the same string representation.", "Heuristic": []}, {"nl": "Return the last task as a TaskInfo object.", "Heuristic": []}, {"nl": "Reads a count corresponding to a serialized map, multiset, or multimap. It returns the size of a map serialized by  {@link #writeMap(Map,ObjectOutputStream)}, the number of distinct elements in a multiset serialized by  {@link #writeMultiset(Multiset,ObjectOutputStream)}, or the number of distinct keys in a multimap serialized by  {@link #writeMultimap(Multimap,ObjectOutputStream)}.", "Heuristic": ["H1"]}, {"nl": "Set the program's description of how the next state depends on the state and action.", "Heuristic": []}, {"nl": "Gets the feed id.", "Heuristic": ["H1"]}, {"nl": "Returns whether this Animator has been started and not yet ended. This state is a superset of the state of  {@link #isRunning()}, because an Animator with a nonzero {@link #getStartDelay() startDelay} will return true for {@link #isStarted()} during thedelay phase, whereas  {@link #isRunning()} will return true only after the delay phaseis complete.", "Heuristic": ["H1"]}, {"nl": "Synonym for messageFormat to encourage developers to convert existing uses of localize() + string concatentation to use this method instead.", "Heuristic": ["H1"]}, {"nl": "Creates a block matrix the same size as A_inv, inverts the matrix and copies the results back onto A_inv.", "Heuristic": ["H1"]}, {"nl": "Returns all the property descriptors for the class associated with the given object", "Heuristic": []}, {"nl": "Gets the request code for this call.", "Heuristic": []}, {"nl": "Retrieves the sample ID list corresponding to the given key.", "Heuristic": []}, {"nl": "Stop tcpdump", "Heuristic": ["H1", "H2"]}, {"nl": "Create an instance of  {@link Auth }", "Heuristic": ["H1"]}, {"nl": "Converts a wire type to a thrift type.", "Heuristic": []}, {"nl": "Set value to be displayed", "Heuristic": []}, {"nl": "Writes the buffer to the output", "Heuristic": []}, {"nl": "Create an instance of  {@link GetOfferDetailsResponse }", "Heuristic": ["H1"]}, {"nl": "Returns an processed version of the text with any global or repository-specific regular expression substitution applied.", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link JAXBElement }{@code }}", "Heuristic": ["H1"]}, {"nl": "Play a random game and feedback the win/loss score to each parent back to the root.", "Heuristic": []}, {"nl": "Removes a cached sheet by its key.", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.util.Time(java.lang.String)}.", "Heuristic": ["H1"]}, {"nl": "On key up.", "Heuristic": []}, {"nl": "Replace the  {@link ComparisonControllers#Default} with your own ComparisonController. Example use:  Diff myDiff = DiffBuilder.compare(control).withTest(test) .withComparisonController(ComparisonControllers.StopWhenDifferent) .build(); ", "Heuristic": ["H1"]}, {"nl": "Returns the  {@code OAuth2Service} instance", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#getCourse()} .", "Heuristic": ["H1"]}, {"nl": "Debug log message with printf formatting.", "Heuristic": ["H1"]}, {"nl": "Returns whether or not filePath matches patternPath.", "Heuristic": ["H1"]}, {"nl": "Return a string representation of this sequence database.", "Heuristic": []}, {"nl": "Builds the jar execution command.", "Heuristic": []}, {"nl": "Convenience method for  {@link #sliceByteBuffer(ByteBuffer,int,int)} where the last parameteris the number of remaining bytes in the new buffer.", "Heuristic": ["H1"]}, {"nl": "getter for the adjusted p-values.", "Heuristic": ["H1"]}, {"nl": "Converts a jena model to N-Triple serialization.", "Heuristic": ["H1"]}, {"nl": "There's a test that 'fails' by succeeding if the cache is operational.", "Heuristic": []}, {"nl": "Set the delegee.", "Heuristic": ["H1"]}, {"nl": "Adds view to cache. Determines view type (item view or empty one) by index.", "Heuristic": []}, {"nl": "Getter for the value to instruct the connector to return the full URL of a file/folder in the XML response rather than the absolute URL.", "Heuristic": []}, {"nl": "Helper method that should be called when a native view starts a native gesture (e.g. a native ScrollView takes control of a gesture stream and starts scrolling). This will handle dispatching the appropriate events to JS to make sure the gesture in JS is canceled.", "Heuristic": []}, {"nl": "Commit current transaction", "Heuristic": []}, {"nl": "Changes local file's permission to be \"rwxrwxrwx\".", "Heuristic": ["H1"]}, {"nl": "Asserts that an escaper escapes the given character into the expected string.", "Heuristic": []}, {"nl": " Append a hashCode for an int. ", "Heuristic": []}, {"nl": "Creates a MapType by specifying the data type of keys ( {@code keyType}) and values ( {@code keyType}). The field of  {@code valueContainsNull} is set to {@code true}.", "Heuristic": ["H1"]}, {"nl": "Returns a view of a Cassandra table as a  {@link com.datastax.spark.connector.japi.rdd.CassandraJavaRDD}. With this method, each row is converted to a object of type  {@code T} by a specified row reader factory{@code rrf}. Row reader factories can be easily obtained with one of utility methods in  {@link com.datastax.spark.connector.japi.CassandraJavaUtil}.", "Heuristic": ["H1"]}, {"nl": "Compares this move to another object.  Returns false if the object is not a  {@link Move}, and true if it is and the coordinates are the same.", "Heuristic": ["H1"]}, {"nl": "Factory method, responsible for creating the environment view.", "Heuristic": []}, {"nl": "When the target is changed, we must refresh.", "Heuristic": []}, {"nl": "Returns the cookie value for the specified user.", "Heuristic": []}, {"nl": "Asserts that an escaper behaves correctly with respect to null inputs.", "Heuristic": []}, {"nl": "Verifies the byte-by-byte read returns the correct data, for the last block in the file.", "Heuristic": []}, {"nl": "Get the new value in the cell", "Heuristic": []}, {"nl": "Tests the  {@link StorageTier#getAvailableBytes()} method.", "Heuristic": ["H1"]}, {"nl": "Factory that obtains a Validator instance based on the schema language.", "Heuristic": []}, {"nl": "Set the truststore and password", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link PlainSaslServer#evaluateResponse(byte[])} method when the user is not set.", "Heuristic": ["H1"]}, {"nl": "Tracks tunnelling to the target.", "Heuristic": ["H1"]}, {"nl": "Returns true if the item, retrieved from the queue via  {@link #getTask()}, is a kill switch, meaning the worker that retrieved it should stop polling.", "Heuristic": ["H1"]}, {"nl": "Gets a NetworkParameters object which accepts an address with the given version byte, or null", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.MWVParser#setSpeedUnit(net.sf.marineapi.nmea.util.Units)}.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the faultCode property.", "Heuristic": []}, {"nl": "Obtain a WRITE lock for a source.", "Heuristic": []}, {"nl": "Central template method for controlling agent simulation. The concrete behavior is determined by the primitive operations {@link #getPerceptSeenBy(Agent)},  {@link #executeAction(Agent,Action)}, and  {@link #createExogenousChange()}.", "Heuristic": ["H1"]}, {"nl": "Get the private key store If the key store is defined in the Security configuration take it from there otherwise key store is taken from the Server Configuration", "Heuristic": []}, {"nl": "Prints input in console for debuggin.", "Heuristic": ["H1"]}, {"nl": "Get the name of the message property from which the content type has been extracted.", "Heuristic": []}, {"nl": "Return Stat sources list", "Heuristic": []}, {"nl": "Returns the name of this service.  {@link AbstractExecutionThreadService} may include the namein debugging output. Subclasses may override this method.", "Heuristic": ["H1"]}, {"nl": "Init the AuthenticationService handler to be used for authentication.", "Heuristic": ["H1"]}, {"nl": "Retrieves the next modified row (record) number from the aux file. If there is no more row number, then returns null.", "Heuristic": []}, {"nl": "Set the current log level.", "Heuristic": []}, {"nl": "This method is used to deposit money in bank. Synchronized method to avoid race condition on the account modifying.", "Heuristic": []}, {"nl": "Removes and returns the value associated with  {@code key}. If  {@code key} is notin the map, this method has no effect and returns zero.", "Heuristic": ["H1"]}, {"nl": "Convenience method to add a single value for the parameter specified by 'key'.", "Heuristic": []}, {"nl": "Run tests on equivalence methods, throwing a failure on an invalid test", "Heuristic": []}, {"nl": "Set the current log level.", "Heuristic": []}, {"nl": "Set the signature Crypto object", "Heuristic": []}, {"nl": "Create an instance of  {@link JAXBElement }{@code }}", "Heuristic": ["H1"]}, {"nl": "Get a compiler generated position.", "Heuristic": []}, {"nl": "Add a spring to the chain that will callback to the provided listener.", "Heuristic": ["H1"]}, {"nl": "Returns the integer value at the specified offset of the buffer's page. If an integer was not stored at that location, the behavior of the method is unpredictable.", "Heuristic": []}, {"nl": "Set the width of the textarea", "Heuristic": []}, {"nl": "Convenience method that can decode a Data Matrix Code represented as a 2D array of booleans. \"true\" is taken to mean a black module.", "Heuristic": ["H1"]}, {"nl": "Pass the event to the listener.", "Heuristic": []}, {"nl": "Set the default Token Type to be issued for this Service", "Heuristic": []}, {"nl": "Set the token", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Description of the Method", "Heuristic": []}, {"nl": "Call  {@link VelocityTracker#getXVelocity(int)}. If running on a pre- {@android.os.Build.VERSION_CODES #HONEYCOMB} device,returns  {@link VelocityTracker#getXVelocity()}.", "Heuristic": ["H1"]}, {"nl": "Adds a new String Parameter.", "Heuristic": []}, {"nl": "Maximum number of bytes to be encrypted at a time when SASL encryption is enabled.", "Heuristic": ["H1"]}, {"nl": "put boolean preferences", "Heuristic": ["H1"]}, {"nl": "This method should never be called. Throws a ClassCastException.", "Heuristic": []}, {"nl": "Sets the error msg.", "Heuristic": []}, {"nl": "Returns a new array of the given length with the same type as a reference array.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns the portion of this  {@code HostAndPort} instance that should represent the hostname orIPv4/IPv6 literal. A successful parse does not imply any degree of sanity in this field. For additional validation, see the  {@link HostSpecifier} class.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the email property.", "Heuristic": []}, {"nl": "Gets the value of the enabled property.", "Heuristic": []}, {"nl": "Helper for success callbacks that just returns the Status.OK by default", "Heuristic": ["H1"]}, {"nl": "Getter method for the glassPange", "Heuristic": ["H1"]}, {"nl": "Waits to receive the response and returns the response message.", "Heuristic": []}, {"nl": "Convenience method for calling  {@link #buildCommand(YarnContainerType,Map)} with no arguments.", "Heuristic": ["H1"]}, {"nl": "Returns a certificate alias based on a SHA-1 hash of the public key.", "Heuristic": ["H1"]}, {"nl": "Returns true if the current token is an integer.", "Heuristic": []}, {"nl": "Return the services configuration.", "Heuristic": ["H1"]}, {"nl": "Get this node's align items, as defined by style.", "Heuristic": []}, {"nl": "Store 8 bytes into the provided array at the indicated offset, using the value provided.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.HDTParser#setHeading(double)}.", "Heuristic": ["H1"]}, {"nl": "Accessor for the JSON string.", "Heuristic": ["H1"]}, {"nl": "Checks whether att has to be ignored with respect to the attribute filter in use. Otherwise att is added to the internal hash tables and the interned version of it is returned.", "Heuristic": ["H1"]}, {"nl": "Returns the  {@link ClassLoader} for this ResourceLoader.", "Heuristic": ["H1"]}, {"nl": "Determine if message is currently being processed on server side.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns true if two possibly-null objects are equal.", "Heuristic": []}, {"nl": "Draw into the provided canvas. Assumes that the canvas has been rotated accordingly and the size has been set. The effect will be drawn the full width of X=0 to X=width, beginning from Y=0 and extending to some factor < 1.f of height.", "Heuristic": ["H1"]}, {"nl": "Obtains the HTTP status code", "Heuristic": []}, {"nl": "Returns the ID of the way node in the underlying OSM map which is nearest with respect to the specified coordinates and additionally passes the filter.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMCParser#getCourse()} .", "Heuristic": ["H1"]}, {"nl": "Decoding uses the given ByteBuf as our data, and will retain() it.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Add a interface to the current diagram.", "Heuristic": ["H1"]}, {"nl": "SpinRight spins the drone a little to the right", "Heuristic": []}, {"nl": "Creates a cache with default maximum size and key expiration time.", "Heuristic": []}, {"nl": "Verifies the Response message in OpenID Dumb Mode", "Heuristic": []}, {"nl": "Returns true if we should retry due a block fetch failure. We will retry if and only if the exception was an IOException and we haven't retried 'maxRetries' times already.", "Heuristic": ["H1"]}, {"nl": "Delete a directory and its contents. WARNING: Java APIs do not let us distinguish directories from symbolic links to directories. Consequently, if the directory contains symbolic links to directories, we will attempt to delete the contents of pointed-to directories.", "Heuristic": []}, {"nl": "Sets the read timeout for the underlying  {@link HttpURLConnection}", "Heuristic": ["H1"]}, {"nl": "extracts the local name of a node.", "Heuristic": ["H1"]}, {"nl": "Sets the receive timeout to the given number of milliseconds, automatically killing the connection if no messages are received for this long A timeout of 0 is interpreted as no timeout. The default is for timeoutEnabled to be true but timeoutMillis to be set to 0 (ie disabled). This call will reset the current progress towards the timeout.", "Heuristic": ["H1"]}, {"nl": "Set the error listener for the transformation. The listener will not be attached to the factory.", "Heuristic": []}, {"nl": "Builds a  {@link java.net.URI} instance.", "Heuristic": ["H1"]}, {"nl": "Specifies the Content-Encoding header, as a string. The default implementation calls {@link #setContentEncoding(Header) setContentEncoding(Header)}.", "Heuristic": []}, {"nl": "Gets the speed.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Sets the value of the value property.", "Heuristic": []}, {"nl": "Gets the cached expiration date from a Bundle.", "Heuristic": []}, {"nl": "Create ConnectionFactory instances for the definitions in the transport configuration, and add these into our collection of connectionFactories map keyed by name", "Heuristic": []}, {"nl": "Get a parameter as a boolean value.", "Heuristic": []}, {"nl": "Returns the number of times  {@link #get} returned a value that wasalready present in the cache.", "Heuristic": ["H1"]}, {"nl": "Clears this hashtable so that it contains no keys.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "See  {@link FloatBuffer#flip()}", "Heuristic": ["H1"]}, {"nl": "Copies the specified buffer to a byte array.", "Heuristic": []}, {"nl": "Empty implementation.", "Heuristic": ["H2"]}, {"nl": "Not-null value.", "Heuristic": ["H2"]}, {"nl": "Binary searches the list for the specified key, using the specified key function. Equivalent to {@link #binarySearch(List,Object,Comparator,KeyPresentBehavior,KeyAbsentBehavior)} using{@link Lists#transform(List,Function) Lists.transform(list, keyFunction)}.", "Heuristic": ["H1"]}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.parser.RTEParser#isLast()}.", "Heuristic": ["H1"]}, {"nl": "Sets which submatrix is being processed.", "Heuristic": ["H1"]}, {"nl": "Return a view to publish all keys in JWK format. Only used if jwkPublishUrl is set.", "Heuristic": ["H1"]}, {"nl": "Returns whether or not fileURI matches the patternURI.", "Heuristic": ["H1"]}, {"nl": "Add a byte field to the stream. \\param value The byte value to be added.", "Heuristic": ["H1"]}, {"nl": "Why does closeAll need a PreparedStatement? This is a copy of closeAll without the PreparedStatement", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.GSAParser#setVerticalDOP(double)}.", "Heuristic": ["H1"]}, {"nl": "Mock up a SAML Assertion by using another SAMLCallbackHandler", "Heuristic": []}, {"nl": "Alias for TestNet2Params.get(), use that instead.", "Heuristic": []}, {"nl": "Returns true if the AI has reached the destination.", "Heuristic": []}, {"nl": "Checks if is feed runnable.", "Heuristic": ["H1"]}, {"nl": "Exclude the specified authors from the metrics.", "Heuristic": []}, {"nl": "Returns the bytes interpreted as a positive integer.", "Heuristic": []}, {"nl": "Adds a new object class.", "Heuristic": []}, {"nl": "Clears a handler that was connected with setConnectedHandler.", "Heuristic": []}, {"nl": "Check whether we deal with a Windows Operating System.", "Heuristic": []}, {"nl": "Gets the current (or last) MediaPlayer instance.", "Heuristic": []}, {"nl": "Flips bit i.", "Heuristic": []}, {"nl": "Equality comparison.", "Heuristic": ["H2"]}, {"nl": "Computes the null space from an SVD.  For more information see  {@link SingularOps#nullSpace}.", "Heuristic": ["H1"]}, {"nl": "Writes an integer to the specified offset on the page.", "Heuristic": []}, {"nl": "Gets the date at which the token was last refreshed. Since tokens expire, the Facebook SDK will attempt to renew them periodically.", "Heuristic": []}, {"nl": "Resets the  {@link LoginUser} and re-login with new user.", "Heuristic": ["H1"]}, {"nl": "Determine if we have a dot before a non terminal, and if so which one (return null or the non terminal).", "Heuristic": ["H1"]}, {"nl": "check if a Message is a Rest Message", "Heuristic": ["H1"]}, {"nl": "Closes the record file.", "Heuristic": []}, {"nl": "Computes the p=1 norm.  If A is a matrix then the induced norm is computed.", "Heuristic": []}, {"nl": "Sets the current maximum idle lifetime in seconds for a background revalidation worker thread. If a worker thread is idle for this long, and there are more than the core number of worker threads alive, the worker will be reclaimed.", "Heuristic": []}, {"nl": "Flushes the dirty buffers modified by the specified transaction.", "Heuristic": []}, {"nl": "Restart the level.", "Heuristic": []}, {"nl": "Closes the reader by closing the underlying  {@code InputStream} andmarking this reader as closed.", "Heuristic": ["H1"]}, {"nl": "Immediately finish the current animation. After this call  {@link #isFinished()} will return true.", "Heuristic": ["H1"]}, {"nl": "Returns the count associated with this term, or 0 if it is unseen.", "Heuristic": []}, {"nl": "Retrieves a long field from the stream.", "Heuristic": []}, {"nl": "Create an instance of  {@link Foo }", "Heuristic": ["H1"]}, {"nl": "Returns a view of a Cassandra table as a  {@link com.datastax.spark.connector.japi.rdd.CassandraJavaRDD}. With this method, each row is converted to a  {@code CassandraRow} object.Example:  CREATE KEYSPACE test WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1 }; CREATE TABLE test.words (word text PRIMARY KEY, count int); INSERT INTO test.words (word, count) VALUES ('foo', 20); INSERT INTO test.words (word, count) VALUES ('bar', 20); ... // Obtaining RDD of CassandraRow objects: CassandraJavaRDD rdd = CassandraJavaUtil.javaFunctions(jsc).cassandraTable(\"test\", \"words\"); rdd.first().getString(\"word\");     // foo rdd.first().getInt(\"count\");       // 20  ", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.VTGParser#setSpeedKmh(double)}.", "Heuristic": ["H1"]}, {"nl": "Format UTC dateTime to custom format", "Heuristic": []}, {"nl": "Creates a scriptPubKey that encodes payment to the given address.", "Heuristic": []}, {"nl": "Check that a list is not null and that none of its elements is null. If null or if the list has emtpy elements throws an IllegalArgumentException.", "Heuristic": ["H1"]}, {"nl": "Resets the spacing instance to its default state. This method is meant to be used when recycling  {@link Spacing} instances.", "Heuristic": ["H1"]}, {"nl": "Load all properties from the given class path resource, using the given class loader.  Merges properties if more than one resource of the same name found in the class path.", "Heuristic": []}, {"nl": "Validate the incoming request for mandatory parameters.", "Heuristic": []}, {"nl": "Test method for being able to return Yes(Y) or No(N) {@link com.sqa.em.util.helper.RequestInput#getBoolean(java.lang.String)}.", "Heuristic": ["H1"]}, {"nl": "We don't have a way to abort a DNS lookup, so this does nothing", "Heuristic": []}, {"nl": "Initialize the service.", "Heuristic": []}, {"nl": "Converts a hexadecimal string to a byte array", "Heuristic": []}, {"nl": "get int preferences", "Heuristic": ["H1"]}, {"nl": "Remove the specified callback from the AnimationQueue.", "Heuristic": []}, {"nl": "Gets the status.", "Heuristic": []}, {"nl": "Specifies the maximum response body size that will be eligible for caching.", "Heuristic": []}, {"nl": "Gets the set of  {@link android.animation.Animator.AnimatorListener} objects that are currentlylistening for events on this Animator object.", "Heuristic": ["H1"]}, {"nl": "Get the non- {@code null} string column.", "Heuristic": []}, {"nl": "{@inheritDoc}With digest, the nonce could expire and thus a rechallenge will be issued. Thus, we need requests cached to be able to handle that", "Heuristic": ["H1"]}, {"nl": "reverse statement by words i.e. last word becomes first", "Heuristic": ["H1"]}, {"nl": "Returns the string value for currentValue. If the currentValue is null, the defaultValue is returned.", "Heuristic": []}, {"nl": "Deletes the specified index record. The method first traverses the directory to find the leaf page containing that record; then it deletes the record from the page.", "Heuristic": []}, {"nl": "Disables interest in writing.  This is typically called if we've written everything we can and have no more data to write.", "Heuristic": []}, {"nl": "add key-value pair to map, and key need not null or empty", "Heuristic": ["H1"]}, {"nl": "Reads new input data into the buffer. Call only with pos == end or end == -1, depending on the desired outcome if the function throws.", "Heuristic": ["H1"]}, {"nl": "Find the first occurrence of one of the specified delimiter characters in the specified source string.", "Heuristic": []}, {"nl": "get string preferences", "Heuristic": ["H1"]}, {"nl": "Traverses up the tree to find the first parent instance of type parentType", "Heuristic": []}, {"nl": "join list to string, separator is \",\"  join(null)      =   \"\"; join({})        =   \"\"; join({a,b})     =   \"a,b\"; ", "Heuristic": ["H1"]}, {"nl": "Returns a timestamp in ISO 8601 format (yyyy-mm-ddThh:mm:ss+hh:mm).", "Heuristic": ["H1"]}, {"nl": "Pass the event to the listener.", "Heuristic": []}, {"nl": "Parses the raw PDB title content returned by the service, and creates a human readable info string.", "Heuristic": ["H1"]}, {"nl": "As we have to find the hostname as a side-affect of generating a unique stub, we allow it's easy retrevial here", "Heuristic": ["H1"]}, {"nl": "value.", "Heuristic": ["H1", "H2"]}, {"nl": "Returns the unsigned  {@code int} value represented by the given decimal string.", "Heuristic": ["H1"]}, {"nl": "The main method.", "Heuristic": []}, {"nl": "The singleton accessor method of this class.", "Heuristic": ["H1"]}, {"nl": "get string preferences", "Heuristic": ["H1"]}, {"nl": "Create COMMON-REBASE-MERGE query.", "Heuristic": []}, {"nl": "Gets the value of the value property.", "Heuristic": []}, {"nl": "Sets the successor id.", "Heuristic": ["H1"]}, {"nl": "Remove (set subtract) a complete set.", "Heuristic": []}, {"nl": "Creating a temporary  Queue Consumer; The objective of this is to make a binding for this destination in the message broker. If there is no bindings created in the server before sending messages, messages will not be stored in the server. So we create a consumer and close it, if there are not any bindings already created in the server", "Heuristic": ["H1"]}, {"nl": "Return the tracker URI of an action.", "Heuristic": []}, {"nl": "Search for ClassCache object in the given scope. The method first calls {@link ScriptableObject#getTopLevelScope(Scriptable scope)}to get the top most scope and then tries to locate associated ClassCache object in the prototype chain of the top scope.", "Heuristic": []}, {"nl": "Returns the request token extractor.", "Heuristic": []}, {"nl": "Set the debug indicator.", "Heuristic": []}, {"nl": "Obtains a pool entry with a connection within the given timeout.", "Heuristic": []}, {"nl": "Resets the references for streaming.", "Heuristic": []}, {"nl": "This method tells the object to use appropriate information to extract ending values for the animation. For example, a AnimatorSet object will pass this call to its child objects to tell them to set up the values. A ObjectAnimator object will use the information it has about its target object and PropertyValuesHolder objects to get the start values for its properties. An ValueAnimator object will ignore the request since it does not have enough information (such as a target object) to gather these values.", "Heuristic": ["H1"]}, {"nl": "Returns a hash code for this the enumeration value.", "Heuristic": []}, {"nl": "Set the resolution state.", "Heuristic": []}, {"nl": "Returns a function which performs a map lookup. The returned function throws an {@link IllegalArgumentException} if given a key that does not exist in the map. See also{@link #forMap(Map,Object)}, which returns a default value in this case. Note: if  {@code map} is a {@link com.google.common.collect.BiMap BiMap} (or can be one), youcan use  {@link com.google.common.collect.Maps#asConverter Maps.asConverter} instead to get afunction that also supports reverse conversion. Java 8 users: if you are okay with  {@code null} being returned for an unrecognizedkey (instead of an exception being thrown), you can use the method reference  {@code map::get}instead.", "Heuristic": ["H1"]}, {"nl": "Check if our mnemonic is a valid mnemonic phrase for our word list. Does nothing if we are encrypted.", "Heuristic": []}, {"nl": "Sets the data unit id.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Adds a commit to the push entry object as long as the commit is not a duplicate.", "Heuristic": []}, {"nl": "Preload the nodes by visiting each in turn. Required for pieces of test XML whose node children can be visited out of sequence by a DifferenceEngine comparison Makes the nodes of this list known as nodes that are visitable at the current level and makes the last child node the current node as a side effect.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.provider.AbstractProvider#sentenceRead(net.sf.marineapi.nmea.event.SentenceEvent)}.", "Heuristic": ["H1"]}, {"nl": "Turn shared-library loading into a no-op.  Useful in special circumstances.", "Heuristic": []}, {"nl": "Creates an instance of  {@link SSLIOSession} decorating the given{@link IOSession}.  This method can be overridden in a super class in order to provide a different implementation of SSL I/O session.", "Heuristic": ["H1"]}, {"nl": "Implements both addition and subtraction -- they are the same in GF(size).", "Heuristic": []}, {"nl": "Gets the feed id.", "Heuristic": ["H1"]}, {"nl": "Parse a URL query and fragment parameters into a key-value bundle.", "Heuristic": []}, {"nl": "Create the page for the given position.  The adapter is responsible for adding the view to the container given here, although it only must ensure this is done by the time it returns from {@link #finishUpdate(ViewGroup)}.", "Heuristic": []}, {"nl": "Unwraps the Integer and returns it.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.parser.RMBParser#getRange()}.", "Heuristic": ["H1"]}, {"nl": "Get  globally defined policy combining algorithm", "Heuristic": ["H1"]}, {"nl": "Determines the total count of rules that are used in all rule sets.", "Heuristic": []}, {"nl": "Sets the block size.", "Heuristic": []}, {"nl": "Gets the value of the Build property.", "Heuristic": []}, {"nl": "append a line to the named file (and a newline character)", "Heuristic": ["H1"]}, {"nl": "Returns result value as string.", "Heuristic": []}, {"nl": "Get satellite the signal noise ratio, in dB (0-99 dB).", "Heuristic": []}, {"nl": "display @param array 's content to console", "Heuristic": ["H1"]}, {"nl": "Determine whether two nodes are defined by the same namespace URI", "Heuristic": []}, {"nl": "Associates  {@code newValue} with {@code key} in this map, and returns the value previouslyassociated with  {@code key}, or zero if there was no such value.", "Heuristic": ["H1"]}, {"nl": "Stops client connection.  This method returns when the connection has been completely shutdown.", "Heuristic": []}, {"nl": "Asks whether the gistic database table is empty.", "Heuristic": ["H1"]}, {"nl": "Test of main method, of class App.", "Heuristic": []}, {"nl": "Unwraps the field name and returns it.", "Heuristic": []}, {"nl": "Load the url into the webview.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the id property.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.VTGParser#getSpeedKnots()}.", "Heuristic": ["H1"]}, {"nl": "Tells if the latitude is on northern hemisphere.", "Heuristic": ["H1"]}, {"nl": "Creates a new Hessian 2.0 deserializer.", "Heuristic": ["H1"]}, {"nl": "Returns the preferred timezone for the Gitblit instance.", "Heuristic": ["H1"]}, {"nl": "Sets the data unit id.", "Heuristic": ["H1"]}, {"nl": "When all  {@link ITextureAtlasSource}MAGIC_CONSTANT are added you have to call  {@link BuildableBitmapTextureAtlas#build(ITextureBuilder)}.", "Heuristic": ["H1"]}, {"nl": "Sets the batch id.", "Heuristic": ["H1"]}, {"nl": "Stem the word placed into the Stemmer buffer through calls to add(). Returns true if the stemming process resulted in a word different from the input.  You can retrieve the result with getResultLength()/getResultBuffer() or toString().", "Heuristic": ["H1"]}, {"nl": " Returns a  {@link org.ejml.interfaces.decomposition.QRPDecomposition} that has been optimized for the specified matrix size.", "Heuristic": ["H1"]}, {"nl": "Enable/diable all components in given container (panel, ...) and sub-containers too recursively", "Heuristic": ["H1"]}, {"nl": "Get the maximum key size to use when generating a symmetric key to sign an issued token. The requestor can specify a KeySize value to use. The default is 512 bits.", "Heuristic": []}, {"nl": "Returns fully qualified name of the enumeration type.", "Heuristic": []}, {"nl": "Method handling HTTP GET requests. The returned object will be sent to the client as \"text/plain\" media type.", "Heuristic": []}, {"nl": "Utility function. Allows you to check equality with pos1.equals(pos2) instead of manually checking if x and y are the same.", "Heuristic": []}, {"nl": "Tests the  {@link WebUtils#convertMsToClockTime(long)} method with one day, four hours,ten minutes and forty-five seconds with a stopwatch.", "Heuristic": ["H1"]}, {"nl": "To get set of subscriptions configured for the module", "Heuristic": []}, {"nl": "Tests the  {@link RPCBlockReadRequest#RPCBlockReadRequest(long,long,long,long,long)}constructor with a negative offset.", "Heuristic": ["H1"]}, {"nl": "Parse a string into a  {@code Expr} AST node,applying substitutions.", "Heuristic": ["H1"]}, {"nl": "whether the file exsit ,create dir for this path", "Heuristic": ["H1"]}, {"nl": "Gets all Extended Mutations, associated with the specified Gene / Sample ID combination.", "Heuristic": []}, {"nl": "Returns true if and only if this instance represents a monetary value less than zero, otherwise false.", "Heuristic": []}, {"nl": "Indicates whether or not there is at least one profile.", "Heuristic": ["H1"]}, {"nl": "Returns the buffer as a string while preserving the buffer position and limit.", "Heuristic": []}, {"nl": "Number of threads used in the server thread pool. Default to 0, which is 2x#cores.", "Heuristic": []}, {"nl": "Verbose log message.", "Heuristic": []}, {"nl": "Gets the run id.", "Heuristic": ["H1"]}, {"nl": "Resets the buffer.", "Heuristic": []}, {"nl": "Set time zone offset minutes.", "Heuristic": []}, {"nl": "the CSS condition [attribute$=value]", "Heuristic": ["H1"]}, {"nl": "Encodes the specified RUDP segment.", "Heuristic": ["H1"]}, {"nl": "Returns the list of all users available to the login service.", "Heuristic": []}, {"nl": "Set the source document to transform.", "Heuristic": []}, {"nl": "Get Default DateFormat", "Heuristic": []}, {"nl": "Decomposes the matrix and computes Q and R.  Verifies the results by multiplying Q and R together and seeing if it gets A.", "Heuristic": ["H1"]}, {"nl": "Overring method for sorting by title", "Heuristic": ["H1"]}, {"nl": "Helper function to test for a null object and throw an exception if one is found.", "Heuristic": []}, {"nl": "Writes a single byte value (1 byte) to the output byte array at the given offset.", "Heuristic": []}, {"nl": "the CSS condition that element has pseudo-class :even", "Heuristic": ["H1"]}, {"nl": "Sets the value of the tsResult property.", "Heuristic": []}, {"nl": "Sets the end of the peak of the ROI", "Heuristic": []}, {"nl": "Initialize the service.", "Heuristic": []}, {"nl": "Gets the iD attribute of the StandardAttributeResolver object", "Heuristic": []}, {"nl": "RUNNER", "Heuristic": ["H2"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.PositionParser#setLonHemisphere(int,net.sf.marineapi.nmea.util.CompassPoint)}.", "Heuristic": ["H1"]}, {"nl": "Set the corresponding triples of individual.", "Heuristic": []}, {"nl": "Factory method, responsible for problem creation.", "Heuristic": []}, {"nl": "Test across several different matrix sizes and upper/lower decompositions using the definition of cholesky.", "Heuristic": ["H1"]}, {"nl": "Checks whether this directory has been successfully removed.", "Heuristic": []}, {"nl": "Tests for legal moves.", "Heuristic": []}, {"nl": "Test of removeEventListener method, of class ComPortController.", "Heuristic": []}, {"nl": "Get the current namespace.", "Heuristic": []}, {"nl": "Return the timeout to use for repeatedly querying app status while it is being un-deployed. Default value is one minute, being queried every 5 seconds.", "Heuristic": ["H1"]}, {"nl": "Sets an error number.", "Heuristic": []}, {"nl": "Tests the  {@link TempBlockMeta#setBlockSize(long)} method.", "Heuristic": ["H1"]}, {"nl": "Return true if this TokenValidator implementation is capable of validating the ReceivedToken argument. The realm is ignored in this token Validator.", "Heuristic": []}, {"nl": "Returns a standard regression test params (similar to unitTests)", "Heuristic": ["H1"]}, {"nl": "Sets the description of the third-party application.", "Heuristic": []}, {"nl": "Called when an activity you launched exits, giving you the requestCode you started it with, the resultCode it returned, and any additional data from it.", "Heuristic": []}, {"nl": "whether the file exsit or not", "Heuristic": ["H1"]}, {"nl": "Returns a hash code for this the enumeration value.", "Heuristic": []}, {"nl": "Adds the given number as a OP_N opcode to the given index in the program.", "Heuristic": []}, {"nl": "Returns the cost of searching an index file having the specified number of blocks. The method assumes that all buckets are about the same size, and so the cost is simply the size of the bucket.", "Heuristic": []}, {"nl": "Returns the total number of nanoseconds the cache has spent loading new values. This can be used to calculate the miss penalty. This value is increased every time  {@code loadSuccessCount}or  {@code loadExceptionCount} is incremented.", "Heuristic": ["H1"]}, {"nl": "Decomposes the provided symmetric matrix.", "Heuristic": []}, {"nl": "Returns a string representation of the enumeration value.", "Heuristic": []}, {"nl": "Decode an image using the state set up by calling setHints() previously. Continuous scan clients will get a large speed increase by using this instead of decode().", "Heuristic": []}, {"nl": "Initializes the client context singleton, bringing all non-Alluxio configuration state in sync with the current Alluxio configuration. This method is useful for updating parts of  {@link ClientContext} which depend on{@link Configuration} when {@link Configuration} is changed, e.g. the master hostname or port.This method requires that configuration has been initialized.", "Heuristic": ["H1"]}, {"nl": "Read a string from a data input supporting null values.  It uses the '||' token to represent null.", "Heuristic": []}, {"nl": "Returns true if and only if this instance represents zero monetary value, otherwise false.", "Heuristic": []}, {"nl": "Gets the result message.", "Heuristic": []}, {"nl": "Returns the start time for the tracker.", "Heuristic": []}, {"nl": "The state we transition to.", "Heuristic": []}, {"nl": "Convert from PX to DP", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Get the object type.", "Heuristic": []}, {"nl": "Formats a set of parameters.", "Heuristic": []}, {"nl": "Gets the value of the content property.  This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a set method for the content property.  For example, to add a new item, do as follows:  getContent().add(newItem);   Objects of the following type(s) are allowed in the list {@link String }{@link Steps }", "Heuristic": ["H1"]}, {"nl": "Reads a specific integer byte value (4 bytes) from the input byte array at the given offset.", "Heuristic": []}, {"nl": "Helper method for Overscrolling that encapsulates all of the necessary function. This version of the call is used for Views that need to specify a Scroll Range but scroll back to it's edge correctly.", "Heuristic": ["H1"]}, {"nl": "Access to all elements of the set.", "Heuristic": []}, {"nl": "Get a String form the internal JSONObject", "Heuristic": ["H1"]}, {"nl": "This should be a valid CIDR.", "Heuristic": []}, {"nl": "Gets the outcome type.", "Heuristic": []}, {"nl": "Replaces the specified data value with the value saved in the log record. The method pins a buffer to the specified block, calls setString to restore the saved value (using a dummy LSN), and unpins the buffer.", "Heuristic": []}, {"nl": "Test method for {@link com.sqa.em.util.helper.RequestInput#getString(java.lang.String,java.lang.String[])}.", "Heuristic": ["H1"]}, {"nl": "Getter for property 'scenarioId'.", "Heuristic": ["H1"]}, {"nl": "Initialize any state for this DB. Called once per DB instance; there is one DB instance per client thread.", "Heuristic": []}, {"nl": "Asigna una lista de authorities al rol", "Heuristic": ["H1"]}, {"nl": "Gets the value of the value property.", "Heuristic": []}, {"nl": "Determines whether the model has a compiled tree at it's disposal.", "Heuristic": ["H1"]}, {"nl": "Updates/writes all specified team objects.", "Heuristic": []}, {"nl": "Provides a ConfigSupplier loading config from a classpath resource. The name of the resource provided must not contain the extension, which must be .properties The loader will first try to load config from a file which location is provided by a system property, the name of the property being the name returned by #locationKeyForResource. Then it will try to load an env specific resource named [resource].[env].properties. Then it will load a resource named [resource].properties.", "Heuristic": ["H1"]}, {"nl": "Just for debugging XML feeds.", "Heuristic": []}, {"nl": "Create an instance of  {@link JAXBElement }{@code }}", "Heuristic": ["H1"]}, {"nl": "Remove PropertyChangeListener.", "Heuristic": []}, {"nl": "Obtains the next header from this iteration.", "Heuristic": []}, {"nl": "Finds recursive all leafs of a SOAPElement as they are expected to need text content. Excludes elements of soap-env and soap namespace (Envelop, Header Body)", "Heuristic": []}, {"nl": "Ensures that  {@code reference} is non-null, throwing a {@code VerifyException} with a defaultmessage otherwise.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Return the list of action IDs to kill.", "Heuristic": ["H1"]}, {"nl": "Required.", "Heuristic": ["H2"]}, {"nl": "Get plugin by its index", "Heuristic": []}, {"nl": "Sets the HTTP proxy that will be used by connections created by this client. This takes precedence over  {@link #setProxySelector}, which is only honored when this proxy is null (which it is by default). To disable proxy use completely, call  {@code setProxy(Proxy.NO_PROXY)}.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.PositionParser#parseHemisphereLon(int)}.", "Heuristic": ["H1"]}, {"nl": "Returns a new AdminPage instance which path is a full URI for the page, based on the provided baseUri.", "Heuristic": ["H1"]}, {"nl": "All blocks are created as temp blocks before committed. They are stored in BlockStore under a subdir of its  {@link StorageDir}, the subdir is tmpFolder/sessionId % maxSubdirMax. tmpFolder is a property of  {@link PropertyKey#WORKER_DATA_TMP_FOLDER}. maxSubdirMax is a property of  {@link PropertyKey#WORKER_DATA_TMP_SUBDIR_MAX}. The block file name is \"sessionId-blockId\". e.g. sessionId 2 creates a temp Block 100 in {@link StorageDir} \"/mnt/mem/0\", this temp block has path: /mnt/mem/0/.tmp_blocks/2/2-100", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link FileUtils#move(String,String)} method.", "Heuristic": ["H1"]}, {"nl": "Determines whether or not the current value is the default value.", "Heuristic": ["H1"]}, {"nl": "Getter for an  {@link CommandHandler} of a specified string.", "Heuristic": ["H1"]}, {"nl": "finds the closest Centroid to a specific Points calls: none called by: Codebook", "Heuristic": ["H1"]}, {"nl": " Computes the induced p = 1 matrix norm.  ||A||1= max(j=1 to n; sum(i=1 to m; |aij|)) ", "Heuristic": ["H1"]}, {"nl": "Obtain a WRITE lock for a source.", "Heuristic": []}, {"nl": "Returns the token secret", "Heuristic": []}, {"nl": "Gets the value of the username property.", "Heuristic": []}, {"nl": "Returns a function which performs a map lookup with a default value. The function created by this method returns  {@code defaultValue} for all inputs that do not belong to the map's keyset. See also  {@link #forMap(Map)}, which throws an exception in this case. Java 8 users: you can just write the lambda expression  {@code k ->map.getWithDefault(k, defaultValue)} instead.", "Heuristic": ["H1"]}, {"nl": "Get the compiler environment the compiler uses.", "Heuristic": []}, {"nl": "Removes a repository role from all users.", "Heuristic": []}, {"nl": "Deactivate messages flow.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#setAcquisitionType()} .", "Heuristic": ["H1"]}, {"nl": "should non-expiring tokens be cached using the default cache timeout", "Heuristic": ["H1"]}, {"nl": "Set the the specified scrolling interpolator", "Heuristic": ["H1"]}, {"nl": "Whether to send the full Request URL as the resource or not. If set to true, the full Request URL will be sent for both a JAX-WS and JAX-RS service. If set to false (the default), a JAX-WS service will send the \"{namespace}operation\" QName, and a JAX-RS service will send the RequestURI (i.e. minus the initial https: prefix).", "Heuristic": ["H1"]}, {"nl": "Gets the value of the description property.  This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a set method for the description property.  For example, to add a new item, do as follows:  getDescription().add(newItem);   Objects of the following type(s) are allowed in the list  {@link DescriptionType }", "Heuristic": ["H1"]}, {"nl": "Gets the value of the publicKey property.", "Heuristic": []}, {"nl": "Get the current soap http client initialized with the URL and wsdl request", "Heuristic": ["H1"]}, {"nl": "Compare the signatures of the bridge method and the method which it bridges. If the parameter and return types are the same, it is a 'visibility' bridge method introduced in Java 6 to fix http://bugs.sun.com/view_bug.do?bug_id=6342411. See also http://stas-blogspot.blogspot.com/2010/03/java-bridge-methods-explained.html", "Heuristic": ["H1"]}, {"nl": "Get the error queue, possibly creating it if not set.", "Heuristic": []}, {"nl": "Get the table of the cell that was changed", "Heuristic": []}, {"nl": "Equality comparison.", "Heuristic": ["H2"]}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.parser.GSAParser#getMode()}.", "Heuristic": ["H1"]}, {"nl": "Return the value created by the construct method.   Returns null if either the constructing thread or the current thread was interrupted before a value was produced.", "Heuristic": ["H1"]}, {"nl": "Gets the OPENID_SESSION_TIMEOUT value for the OpenID provider", "Heuristic": ["H1"]}, {"nl": "Request any amount of Bitcoins (probably a donation) from user, without feedback from the app.", "Heuristic": []}, {"nl": "Gets the value of the isRequired property.", "Heuristic": ["H1"]}, {"nl": "Set the row data.", "Heuristic": []}, {"nl": "The correct specificity value for this selector and its sibling-axis selectors", "Heuristic": []}, {"nl": "Returns an  {@link java.util.Iterator} over the set of {@link org.xhtmlrenderer.css.sheet.PropertyDeclaration}s already matched in this CascadedStyle. For a given property name, there may be no match, in which case there will be no PropertyDeclaration for that property name in the Iterator.", "Heuristic": ["H1"]}, {"nl": "Method processingInstruction.", "Heuristic": []}, {"nl": "Adds a field to the class.", "Heuristic": []}, {"nl": "Gets the payloads for the given nodes parents.", "Heuristic": []}, {"nl": "Sets the message label.", "Heuristic": []}, {"nl": "Retrieves a float value from preference manager. If no such key exists, it will return Float.MIN_VALUE.", "Heuristic": ["H1"]}, {"nl": "Initialize the Hessian stream with the underlying input stream.", "Heuristic": []}, {"nl": "Cancels the write to the file in the under file system specified by the worker file id. The temporary file will be automatically cleaned up.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link RPCFileWriteResponse#getEncodedLength()} method.", "Heuristic": ["H1"]}, {"nl": "Return a Stats object to accumulate and report statistics.", "Heuristic": []}, {"nl": "Return a one line summary of the measurements.", "Heuristic": []}, {"nl": "Returns the greatest value present in  {@code array}, treating values as unsigned.", "Heuristic": ["H1"]}, {"nl": "Return the claim dialect for the claim retriever", "Heuristic": []}, {"nl": "Selection in the workbench has been changed. We can change the state of the 'real' action here if we want, but this can only happen after the delegate has been created.", "Heuristic": []}, {"nl": "Get the hemisphere of longitude, East or West.", "Heuristic": []}, {"nl": "Returns the state object associated with this pool entry.", "Heuristic": []}, {"nl": "Sets the outcome type.", "Heuristic": []}, {"nl": "Called after a cache miss to compute a value for the corresponding key. Returns the computed value or null if no value can be computed. The default implementation returns null.  The method is called without synchronization: other threads may access the cache while this method is executing.  If a value for  {@code key} exists in the cache when this methodreturns, the created value will be released with  {@link #entryRemoved}and discarded. This can occur when multiple threads request the same key at the same time (causing multiple values to be created), or when one thread calls  {@link #put} while another is creating a value for the samekey.", "Heuristic": ["H1"]}, {"nl": "Removes a URI from the collection.", "Heuristic": []}, {"nl": "Sets the animation used during the count down. If the duration of the animation for each number is not set, one second will be defined.", "Heuristic": ["H1"]}, {"nl": "Get year. The date fields in NMEA 0183 may present year by using either two or four digits. In case of only two digits, the century is determined by comparing the value against  {@link #PIVOT_YEAR}. Values lower than or equal to pivot are added to 2000, while values greater than pivot are added to 1900.", "Heuristic": ["H1"]}, {"nl": "Sets the referenced object instance.  If an action is registered the onSet method is invoked.", "Heuristic": []}, {"nl": " {@link RubyString String}#to_json_raw() This method creates a JSON text from the result of a call to {@link #to_json_raw_object} of this String.", "Heuristic": ["H1"]}, {"nl": "Allows for multiple queries against the same stream by buffering to DOM", "Heuristic": []}, {"nl": "Get the array of items stored in the original Q-matrix", "Heuristic": []}, {"nl": "Retrieve the event type.", "Heuristic": []}, {"nl": "Sets the number of days to cache.", "Heuristic": []}, {"nl": "Creates HSSFSheet from filePath and sheetName", "Heuristic": []}, {"nl": "Set the Digest algorithm to use for Signature", "Heuristic": []}, {"nl": "Create an instance of  {@link JAXBElement }{@code }}", "Heuristic": ["H1"]}, {"nl": "Disconnects this connection", "Heuristic": []}, {"nl": "Store the RM properties in the current message.", "Heuristic": []}, {"nl": "Procesa las peticiones hechas al servlet interno.", "Heuristic": ["H1"]}, {"nl": "Determine if this set is an (improper) subset of another.", "Heuristic": []}, {"nl": "Create a new file object from two file paths.", "Heuristic": []}, {"nl": "Returns the next available lane, from top to down. A lane is available if there is at least one free slot in it.", "Heuristic": []}, {"nl": "Opens a table scan for the temporary table.", "Heuristic": []}, {"nl": "This method returns the logical name of this trust decider. The name of the trust decider may be used in logging or auditing to make sure that the proper trust decision is being implemented.", "Heuristic": []}, {"nl": "long time to string, format is  {@link #DEFAULT_DATE_FORMAT}", "Heuristic": ["H1"]}, {"nl": "Template delegator for testNode() method. OVERRIDE to add custom logic", "Heuristic": ["H1"]}, {"nl": "Required.", "Heuristic": ["H2"]}, {"nl": "Gets the URI scheme", "Heuristic": []}, {"nl": "Invokes  {@code queue.}{@link BlockingQueue#put(Object) put(element)} uninterruptibly.", "Heuristic": ["H1"]}, {"nl": "Overring method for removing duplicates", "Heuristic": ["H1"]}, {"nl": "Whether or not elements are qualified absent any annotations or mapping files.  True by default.", "Heuristic": ["H1"]}, {"nl": "Returns a fresh  {@link InternerBuilder} instance.", "Heuristic": ["H1"]}, {"nl": "Obtains value of the  {@link CoreProtocolPNames#PROTOCOL_VERSION} parameter.If not set, defaults to  {@link HttpVersion#HTTP_1_1}.", "Heuristic": ["H1"]}, {"nl": "Return the panel to be used as a UI component to allow the user to specify the text source or destination.", "Heuristic": []}, {"nl": "Gets a PLAIN mechanism transport for client side.", "Heuristic": []}, {"nl": "Flushes the dirty buffers modified by the specified transaction.", "Heuristic": []}, {"nl": "Gets the seq id.", "Heuristic": ["H1"]}, {"nl": "Throws a GeneratorError if the input list doesn't have at least this many bytes left.", "Heuristic": []}, {"nl": "Exchanges the internal array of the off diagonal elements for the provided one.", "Heuristic": []}, {"nl": "Obtener texto de listas", "Heuristic": ["H1"]}, {"nl": "set user's nickname", "Heuristic": ["H1"]}, {"nl": "Previous version of BigIntegerMath.factorial, kept for timing purposes.", "Heuristic": ["H1"]}, {"nl": "Gets the items.", "Heuristic": []}, {"nl": "Sets the value of the username property.", "Heuristic": []}, {"nl": "Returns the callback type", "Heuristic": []}, {"nl": "Not-null value; ensure this value is available before it is saved to the database.", "Heuristic": []}, {"nl": "Return a FileSystem created with the provided user/group for the specified URI.", "Heuristic": []}, {"nl": "This method may be called by the ViewPager to obtain a title string to describe the specified page. This method may return null indicating no title for this page. The default implementation returns null.", "Heuristic": []}, {"nl": "Converts a thrift type to a wire type.", "Heuristic": []}, {"nl": "Gets the current capacity value.", "Heuristic": []}, {"nl": "Gets the value of the arg1 property.", "Heuristic": []}, {"nl": "Gets the run status.", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.parser.ZDAParser#getDate()}.", "Heuristic": ["H1"]}, {"nl": "Set whether client lifetime is accepted", "Heuristic": []}, {"nl": "Creates a StructField with empty metadata.", "Heuristic": []}, {"nl": "Register a new ProjectSettingsTab.", "Heuristic": []}, {"nl": "A convenience method for getting ARGB pixels from an image. This tries to avoid the performance penalty of BufferedImage.getRGB unmanaging the image.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Unpins the specified block. The transaction looks up the buffer pinned to this block, and unpins it.", "Heuristic": []}, {"nl": "Gets all the parents of a given lineage.", "Heuristic": []}, {"nl": "Handle an unexpected exception.", "Heuristic": []}, {"nl": "Deletes all URLSet objects from the database. Should be used for development and testing, not production.", "Heuristic": []}, {"nl": "Get the system property via the AccessController, but if a SecurityException is  raised, just return null;", "Heuristic": ["H1"]}, {"nl": "Builds the apacheds server instance.", "Heuristic": ["H1"]}, {"nl": "Gets clinical data for specified cases.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets the value of the user property.", "Heuristic": []}, {"nl": "If the image cache has more items than the limit specified for this class, the least-recently used will be dropped from cache until it reaches the desired size.", "Heuristic": []}, {"nl": "A convenience method for setting ARGB pixels in an image. This tries to avoid the performance penalty of BufferedImage.setRGB unmanaging the image.", "Heuristic": ["H1"]}, {"nl": "Helper method for Overscrolling that encapsulates all of the necessary function.  This should only be used on AdapterView's such as ListView as it just calls through to overScrollBy() with the scrollRange = 0. AdapterView's do not have a scroll range (i.e. getScrollY() doesn't work).", "Heuristic": ["H1"]}, {"nl": "Sets the receipt date.", "Heuristic": []}, {"nl": "Get Parameter Type Name.", "Heuristic": []}, {"nl": "Determine if log level will be logged", "Heuristic": []}, {"nl": "Writes out the content in the multipart/form encoding. This method produces slightly different formatting depending on its compatibility mode.", "Heuristic": []}, {"nl": "Whether the user has added XMPP settings.", "Heuristic": []}, {"nl": "Gets a map that contains attributes that aren't bound to any typed property on this class.  the map is keyed by the name of the attribute and  the value is the string value of the attribute. the map returned by this method is live, and you can add new attribute by updating the map directly. Because of this design, there's no setter.", "Heuristic": ["H1"]}, {"nl": "Associates all the metadata that has been set since the MetadataEditor instance was created with  {@link android.media.RemoteControlClient#editMetadata(boolean)}, or since {@link #clear()} was called, with the RemoteControlClient. Once \"applied\", thisMetadataEditor cannot be reused to edit the RemoteControlClient's metadata.", "Heuristic": ["H1"]}, {"nl": "Returns the current number of entries in the map.", "Heuristic": []}, {"nl": "Stop all connection factories.", "Heuristic": []}, {"nl": "Sets the value of the usPrice property.", "Heuristic": ["H1"]}, {"nl": "Initialize TestClass", "Heuristic": []}, {"nl": "logs the message prepended by the filter name (copy of  {@link GenericServlet#log(String)})", "Heuristic": ["H1"]}, {"nl": "Check if log paramter is valid for this settings, that means: - log.getSource() is in this.sources - log.getLevel() >= this.level", "Heuristic": ["H1"]}, {"nl": "Returns true if this key may be used to clone or fetch.", "Heuristic": []}, {"nl": "GET  /sites/:id : get the \"id\" site.", "Heuristic": ["H1"]}, {"nl": "Create a new BusFactory The class of the BusFactory is determined by looking for the system propery: org.apache.cxf.bus.factory or by searching the classpath for: META-INF/services/org.apache.cxf.bus.factory", "Heuristic": ["H1"]}, {"nl": "Run the JSP parser on the source, and return the nodes of type clazz.", "Heuristic": ["H1"]}, {"nl": "Writes a single byte value (1 byte) to the output byte buffer at the given offset.", "Heuristic": []}, {"nl": "Returns the name of the entity or null.", "Heuristic": []}, {"nl": "Get current local dateTime in desired format", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Decrement the integer by 1.", "Heuristic": []}, {"nl": "Test for the  {@link HadoopUtils#getPathWithoutScheme(Path)} method from an HDFS URI.", "Heuristic": ["H1"]}, {"nl": "get failed elapsed.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the file property.", "Heuristic": []}, {"nl": "Makes sure that a  {@link NullPointerException} is thrown if a listener is added which is null.", "Heuristic": ["H1"]}, {"nl": "Invokes  {@code semaphore.}{@link Semaphore#tryAcquire(int,long,TimeUnit) tryAcquire(1,timeout, unit)} uninterruptibly.", "Heuristic": ["H1"]}, {"nl": "Adds a prefix/namespace URI pair to the known list", "Heuristic": []}, {"nl": "Encapsulates the logic related to naming the default resource bundle for a class.", "Heuristic": []}, {"nl": "Returns a String representing the name of a person familiar with this order.", "Heuristic": []}, {"nl": "Gets the cached last refresh date from a Bundle.", "Heuristic": []}, {"nl": "Escapes the special characters in a given string.", "Heuristic": []}, {"nl": "Stops the server.", "Heuristic": []}, {"nl": "Deletes the user object from the user service.", "Heuristic": []}, {"nl": "Obtain a list of all errors in the schema defintion. The list contains  {@link org.xml.sax.SAXParseException SAXParseException}s.", "Heuristic": ["H1"]}, {"nl": "Convenience method that can decode a Data Matrix Code represented as a 2D array of booleans. \"true\" is taken to mean a black module.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets the id.", "Heuristic": ["H1"]}, {"nl": "Return the child name from a child ID.", "Heuristic": []}, {"nl": "Removes a block from the worker.", "Heuristic": []}, {"nl": "Sets the owner based on the login module and updates the group to the primary group of the owner. If authentication is  {@link alluxio.security.authentication.AuthType#NOSASL}, this a no-op.", "Heuristic": ["H1"]}, {"nl": "Returns the hash code value for this map entry. The hash code of a map entry  {@code e} is defined to be: (e.getKey() == null ? 0 : e.getKey().hashCode()) &circ; (e.getValue() == null ? 0 : e.getValue().hashCode())  This ensures that  {@code e1.equals(e2)} implies that {@code e1.hashCode()==e2.hashCode()} for any two Entries {@code e1} and {@code e2}, as required by the general contract of  {@link Object#hashCode}.", "Heuristic": ["H1"]}, {"nl": "Removes all of  {@link Cookie cookies} in this HTTP statethat have expired by the specified  {@link java.util.Date date}.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the project property.", "Heuristic": []}, {"nl": "If no profile has been configured, set by default the \"dev\" profile.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "URL for the content being shared.  This URL will be checked for app link meta tags for linking in platform specific ways.  See documentation for App Links.", "Heuristic": []}, {"nl": "Formats digital representation of a model as a human-readable string.", "Heuristic": []}, {"nl": "Assert that the following XPath query selects one or more nodes.", "Heuristic": []}, {"nl": "Invoked by  {@link #visited visited} when visited is an element,text, CDATA section, comment or processing instruction.", "Heuristic": ["H1"]}, {"nl": "join string.", "Heuristic": ["H1", "H2"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets a string value out of the object.", "Heuristic": []}, {"nl": "Gets number of  first item", "Heuristic": ["H1"]}, {"nl": "Returns the secure socket protocol in use.", "Heuristic": []}, {"nl": "Returns the major version number of the protocol.", "Heuristic": []}, {"nl": "Creates a  {@link TempBlockMeta} given sessionId, blockId, and initialBlockSize.", "Heuristic": ["H1"]}, {"nl": "Set the server principal password for kerberos authentication", "Heuristic": ["H1"]}, {"nl": "Is the default locale right-to-left?", "Heuristic": []}, {"nl": "Set the token", "Heuristic": []}, {"nl": "Generate a string representatation of the UML modelelement of this combobox element.", "Heuristic": ["H1"]}, {"nl": "Unregisters a parser class, regardless of sentence type(s) it is registered for.", "Heuristic": []}, {"nl": "Tests to ensure  {@link SwiftOutputStream#flush()} calls {@link OutputStream#flush()}.", "Heuristic": ["H1"]}, {"nl": "Create a quasiquoting parser.", "Heuristic": ["H1"]}, {"nl": "Utility method to find an imagewriter.", "Heuristic": ["H1"]}, {"nl": "Compares the two specified  {@code int} values, treating them as unsigned values between{@code 0} and {@code 2^32 - 1} inclusive.", "Heuristic": ["H1"]}, {"nl": "Returns the number of values that have been evicted.", "Heuristic": []}, {"nl": "Accessor for the SettingsFactory instance that stores the  properties.", "Heuristic": ["H1"]}, {"nl": "Save property settings to the property file.", "Heuristic": []}, {"nl": "Writes a single buffer to the channel.", "Heuristic": []}, {"nl": "Return upper triangular factor", "Heuristic": []}, {"nl": "divide, sorts and merges arrays", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage.Entry }", "Heuristic": ["H1"]}, {"nl": "Format a number", "Heuristic": []}, {"nl": "Alias for  {@link #delete(int)}.", "Heuristic": ["H1"]}, {"nl": "Save a dish.", "Heuristic": []}, {"nl": "DELETE  /dishes/:id : delete the \"id\" dish.", "Heuristic": ["H1"]}, {"nl": "Flattens a class's type hierarchy into a set of  {@code Class} objects including allsuperclasses (transitively) and all interfaces implemented by these superclasses.", "Heuristic": ["H1"]}, {"nl": "Creates a DOM Node from a TraX Source. If the source is a  {@link DOMSource} its Node will bereturned, otherwise this delegates to  {@link #toDocument}.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.MWVParser#setStatus(net.sf.marineapi.nmea.util.DataStatus)}.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link NetworkAddressUtils#resolveHostName(String)} method.", "Heuristic": ["H1"]}, {"nl": "get property value.", "Heuristic": ["H1"]}, {"nl": "Add a triple. If the triple identifier already exists the old triple will be overwritten.", "Heuristic": []}, {"nl": "Get the individual structure A.", "Heuristic": []}, {"nl": "This method calculate the interest earned by the user since the first successful transaction. It will calculate all the opened account.", "Heuristic": []}, {"nl": "Sets the value of the customInputType property.", "Heuristic": []}, {"nl": "Tracks layering a protocol.", "Heuristic": []}, {"nl": "Given a count of black/white/black pixels just seen and an end position, figures the location of the center of this black/white/black run.", "Heuristic": []}, {"nl": "Returns true if there's another socket address to try.", "Heuristic": []}, {"nl": "put all.", "Heuristic": ["H1", "H2"]}, {"nl": "Sets the numeric value of a configuration property.", "Heuristic": []}, {"nl": "Assigns the given  {@link AuthScheme authentication scheme}.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link DataByteBuffer#getLength()} method.", "Heuristic": ["H1"]}, {"nl": "A broken symlink (which is basically a not existing file), should be skipped.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Sets the Description of this Character. The Description is usefull if the picture of this character differs from the normal character expected at this position.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "wait for the next acknowledge", "Heuristic": ["H1"]}, {"nl": "This method is used to programmatically set the TLSServerParameters. This method may only be called by the factory.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Get the cache use default name and  {@link #DEFAULT_KEY_GENERATOR} to generate cache key.Create cache if not existed yet.", "Heuristic": ["H1"]}, {"nl": "Returns the index of the first bit that is set to true that occurs on or after the specified starting index. If no such bit exists then  {@code -1} is returned. To iterate over the true bits in a BitSet, use the following loop:   for (long i = bs.nextSetBit(0); i &gt;= 0; i = bs.nextSetBit(i + 1)) { // operate on index i here }  ", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.GSAParser#setMode(FaaMode)}.", "Heuristic": ["H1"]}, {"nl": "Convert to a string", "Heuristic": []}, {"nl": "Sets the errors.", "Heuristic": []}, {"nl": "Returns a PointLatLon instance.", "Heuristic": []}, {"nl": "Checks that a string is not null or empty", "Heuristic": []}, {"nl": "Sets a specific location in the bar", "Heuristic": []}, {"nl": "Returns true if the target size specified by these options matches the size provided (e.g. image is already at target size).", "Heuristic": []}, {"nl": "Calculates the Chebyshev distance between this position and another. May be useful for your heuristic.", "Heuristic": ["H1"]}, {"nl": "Creates an  {@code AtomicReferenceArray} instance of given length.", "Heuristic": ["H1"]}, {"nl": " Regular expression that defines the internal proxies.   Default value : 10\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|192\\.168\\.\\d{1,3}\\.\\d{1,3}|169\\.254.\\d{1,3}.\\d{1,3}|127\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3} ", "Heuristic": ["H1"]}, {"nl": "Get the signature algorithm to use", "Heuristic": []}, {"nl": "Assigns a state object to this pool entry.", "Heuristic": []}, {"nl": "Sets the KeyManagers for this endpoint. This parameter may be set to null for system default behavior.", "Heuristic": []}, {"nl": "Log a debug message and related exception to the context logger.", "Heuristic": []}, {"nl": "Convert to a string.", "Heuristic": []}, {"nl": "Alias for MainNetParams.get(), use that instead", "Heuristic": ["H1"]}, {"nl": "NodeFilter method.", "Heuristic": []}, {"nl": "Does nothing", "Heuristic": ["H2"]}, {"nl": "Create a single component configuration key.", "Heuristic": []}, {"nl": "Filter item by child index and item data.", "Heuristic": []}, {"nl": "Returns an  {@link Escaper} instance that escapes strings so they can be safely included inURL form parameter names and values. Escaping is performed with the UTF-8 character encoding. The caller is responsible for replacing any unpaired carriage return or line feed characters with a CR+LF pair on any non-file inputs before escaping them with this escaper. When escaping a String, the following rules apply:  The alphanumeric characters \"a\" through \"z\", \"A\" through \"Z\" and \"0\" through \"9\" remain the same. The special characters \".\", \"-\", \"\", and \"_\" remain the same. The space character \" \" is converted into a plus sign \"+\". All other characters are converted into one or more bytes using UTF-8 encoding and each byte is then represented by the 3-character string \"%XY\", where \"XY\" is the two-digit, uppercase, hexadecimal representation of the byte value.  This escaper is suitable for escaping parameter names and values even when using the non-standard semicolon, rather than the ampersand, as a parameter delimiter. Nevertheless, we recommend using the ampersand unless you must interoperate with systems that require semicolons. Note: Unlike other escapers, URL escapers produce uppercase hexadecimal sequences.", "Heuristic": ["H1"]}, {"nl": "Accessor the string key identifying this permission type.", "Heuristic": ["H1"]}, {"nl": "Provide number of REJECT (return false) decisions made by this MutationFilter.", "Heuristic": []}, {"nl": "Creates a planner for SQL commands. To change how the planner works, modify this method.", "Heuristic": []}, {"nl": "Gets the serviceID and optional address to which this datagram packet is sent as a  {@code SocketAddress} object.", "Heuristic": ["H1"]}, {"nl": "Entrance of User Service", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.util.Time#setSeconds(double)}.", "Heuristic": ["H1"]}, {"nl": "Tests that persisted file are cleared in the manager.", "Heuristic": []}, {"nl": "Calculate the number of days between two date", "Heuristic": []}, {"nl": "Returns true if the structure has been built once by the AI.", "Heuristic": []}, {"nl": "This constructs PartitionInfo which is needed to create partition; from the tenant info", "Heuristic": ["H1"]}, {"nl": "Determines whether the given path is a temporary file name generated by Alluxio.", "Heuristic": ["H1"]}, {"nl": "Adds a name/value pair to the formatted output in  {@code name=value} format.", "Heuristic": ["H1"]}, {"nl": "Matches any Labeled Node that has a label that matches the given stringMatcher.", "Heuristic": []}, {"nl": "This should be called whenever a client does a direct read in order to update the worker's components that may care about the access times of the blocks (for example, Evictor, UI).", "Heuristic": ["H1"]}, {"nl": "A static factory method to create a  {@link StreamingContextJavaFunctions} based on an existing{@link StreamingContext} instance.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Determine how preferred a given ABI is on this system.", "Heuristic": []}, {"nl": "Returns the predicate that describes which records should be deleted.", "Heuristic": []}, {"nl": "Get the size of this sequence (number of itemsets).", "Heuristic": ["H1"]}, {"nl": "Get just the name of the file this frame points to. For JS traces this is different from  {@link #getFile()} in that it only returns the filename, not the full path. For Java traces there is no difference.", "Heuristic": ["H1"]}, {"nl": "Given a count of black/white/black pixels just seen and an end position, figures the location of the center of this black/white/black run.", "Heuristic": []}, {"nl": "Close shell", "Heuristic": ["H2"]}, {"nl": "calculates the distortion calls: none called by: volume", "Heuristic": ["H1"]}, {"nl": "Is the Gene RPPA upregulated?", "Heuristic": ["H1"]}, {"nl": "Returns a new object with rotated image data by 45 degrees counterclockwise. Only callable if  {@link #isRotateSupported()} is true.", "Heuristic": ["H1"]}, {"nl": "Return the schema for XML validation of application definitions.", "Heuristic": []}, {"nl": "Same as above but also allow  and ?", "Heuristic": ["H1"]}, {"nl": "Returns an Array of Card containing all of the cards belonging to the machine player on the field.", "Heuristic": ["H1"]}, {"nl": "Take a URI and turn it into a JavaScript name prefix.", "Heuristic": ["H1"]}, {"nl": "Set the initialisationVector, cloning the bytes.", "Heuristic": ["H1"]}, {"nl": "This input parameter is ignored for the moment.", "Heuristic": []}, {"nl": "Return if a path exists.", "Heuristic": []}, {"nl": "Sets the open graph id of the object that action type will be performed on Only valid (and required) for ActionTypes SEND, ASKFOR", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns the remote address on the channel or \"&lt;unknown remote&gt;\" if none exists.", "Heuristic": ["H1"]}, {"nl": "Returns the simple name of the class", "Heuristic": []}, {"nl": "Constructs a select plan for the table. The plan will use an indexselect, if possible.", "Heuristic": ["H1"]}, {"nl": "Determine if log level will be logged", "Heuristic": []}, {"nl": "Sets the error msg.", "Heuristic": []}, {"nl": "Waits until the given weak reference is cleared, invoking the garbage collector as necessary to try to ensure that this will happen. This is a convenience method, equivalent to:     {@code}awaitDone(new FinalizationPredicate()  public boolean isDone() { return ref.get() == null; } });}", "Heuristic": ["H1"]}, {"nl": "Puts the specified name/value pair in the specified JSON object.", "Heuristic": []}, {"nl": "Get the next value. The value can be wrapped in quotes. The value can be empty.", "Heuristic": []}, {"nl": "Returns the value to which the specified row and column is mapped in this table.", "Heuristic": []}, {"nl": "Called to prepare an associated submenu for the menu item backed by this ActionProvider. if  {@link #hasSubMenu()} returns true, this method will be called when themenu item is selected to prepare the submenu for presentation to the user. Apps may use this to create or alter submenu content right before display.", "Heuristic": ["H1"]}, {"nl": "Add redirection rules as THashMap.  These mappings will replace any mappings that this map had for any of the keys currently in the specified map.", "Heuristic": []}, {"nl": "Gets the run id.", "Heuristic": ["H1"]}, {"nl": "Check to see if the introspection end point response for a token has been cached locally This call will return the token if it has been cached and is still valid according to the cache expire time on the TokenCacheObject. If a cached value has been found but is expired, either by default expire times or the token's own expire time, then the token is removed from the cache and null is returned.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Get the current default LanguageVersion for the given Language.", "Heuristic": []}, {"nl": "Returns a hash code for this the enumeration value.", "Heuristic": []}, {"nl": "Return a DOM tree for the WSDL for a server.", "Heuristic": []}, {"nl": "Verifies that two violations nodes with equal {@code filename, beginLine, endLine, beginColumn, endColumn} and{@code variableName} are equal.", "Heuristic": []}, {"nl": "Retrieve the event type.", "Heuristic": []}, {"nl": "Sets the value of the token property.", "Heuristic": []}, {"nl": "Checks if a given policy operator has no policy components  or if it has only empty ExactlyOne or All components  containing no assertions", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link SessionInfo#timeout()} method.", "Heuristic": ["H1"]}, {"nl": "remove stale TagSets", "Heuristic": ["H1"]}, {"nl": "Set up Mime types.", "Heuristic": []}, {"nl": "Gets the outcome.", "Heuristic": []}, {"nl": "Swaps  {@code array[i]} with {@code array[j]}.", "Heuristic": ["H1"]}, {"nl": "Returns the specified federation token for this Gitblit instance.", "Heuristic": ["H1"]}, {"nl": "Assert that the provided object is an instance of the provided class. Assert.instanceOf(Foo.class, foo);", "Heuristic": []}, {"nl": "Tests that an exception is thrown when trying to get a directory by a non-existing index.", "Heuristic": []}, {"nl": "Registers a Spring to this BaseSpringSystem so it can be iterated if active.", "Heuristic": ["H1"]}, {"nl": "If it is not positive definate it should fail", "Heuristic": ["H1"]}, {"nl": "Returns true if the parameter is covered by this mask.", "Heuristic": []}, {"nl": "Puts the expiration date into a Bundle.", "Heuristic": []}, {"nl": "Sets the value of the elem2 property.", "Heuristic": []}, {"nl": "Sets the value of the name property.", "Heuristic": []}, {"nl": "Removes a importer.", "Heuristic": ["H1"]}, {"nl": "Encodes a string into Base64 format. No blanks or line breaks are inserted.", "Heuristic": []}, {"nl": "This function scales the row", "Heuristic": []}, {"nl": "Get the name of this cookie", "Heuristic": []}, {"nl": "Sets the comments.", "Heuristic": []}, {"nl": "Returns the list of attachments.", "Heuristic": []}, {"nl": "set body of the message", "Heuristic": ["H1"]}, {"nl": "Convert from SP to PX", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.HDGParser#setHeading(double)}.", "Heuristic": ["H1"]}, {"nl": "All SET methods", "Heuristic": []}, {"nl": "Removes any contained headers.", "Heuristic": []}, {"nl": "The following activities are performed: 1) generation and assigning of unique response ID 2) copying of request id 3) copying of service name 4) copying of opaqueClientData 5) setting major result to success", "Heuristic": ["H1"]}, {"nl": "Computes the quality of a triangular matrix, where the quality of a matrix is defined in  {@link org.ejml.interfaces.linsol.LinearSolver#quality()}.  In this situation the quality os the absolute value of the product of each diagonal element divided by the magnitude of the largest diagonal element. If all diagonal elements are zero then zero is returned.", "Heuristic": ["H1"]}, {"nl": "get all headers of the message as a map", "Heuristic": ["H1"]}, {"nl": "Gets the value of gene X in case Y.", "Heuristic": []}, {"nl": "Get the difference groups.", "Heuristic": []}, {"nl": "Sets up and declares internal data structures.", "Heuristic": []}, {"nl": "Sets the config info.", "Heuristic": []}, {"nl": "Asks the camera hardware to begin drawing preview frames to the screen.", "Heuristic": []}, {"nl": "Converts a thrift type to a wire type.", "Heuristic": []}, {"nl": "Test of setEventListener method, of class ComPortController.", "Heuristic": []}, {"nl": "Returns the access permission for the key.", "Heuristic": []}, {"nl": "Apply the result points' order correction due to mirroring.", "Heuristic": []}, {"nl": "Sets the value of the isInputDataRequired property.", "Heuristic": ["H1"]}, {"nl": "Retrieves the name to authenticate with.", "Heuristic": []}, {"nl": "Destroy the service.", "Heuristic": []}, {"nl": "Gets the default mode.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Getter for the UserFilesPath.", "Heuristic": []}, {"nl": "Returns the current capacity (the size the buffer can use before it needs to grow).", "Heuristic": []}, {"nl": "The main subject of this certificate (O, CN or the complete DN, whatever is found first).", "Heuristic": []}, {"nl": "Sets the interval to upper inclusive or upper exclusive.", "Heuristic": []}, {"nl": "Gets capacity bytes for this dir.", "Heuristic": ["H1"]}, {"nl": "Get the username/alias to use to encrypt any issued tokens. This is a default value - it can be configured per Service in the ServiceMBean", "Heuristic": []}, {"nl": "Computes the distance from a latitudal degree to the equator.", "Heuristic": ["H1"]}, {"nl": "Factory for  {@link UnderFileSystemFileWriter}.", "Heuristic": ["H1"]}, {"nl": "Returns map containing a single entry.", "Heuristic": []}, {"nl": "Performs a variety of tests to see if the provided matrix is a valid covariance matrix.", "Heuristic": []}, {"nl": "Returns the number of times  {@link Cache} lookup methods threw an exception while loading a newvalue. This is usually incremented in conjunction with  {@code missCount}, though {@code missCount} is also incremented when cache loading completes successfully (see{@link #loadSuccessCount}). Multiple concurrent misses for the same key will result in a single load operation. This may be incremented not in conjunction with  {@code missCount} if the loadoccurs as a result of a refresh or if the cache loader returned more items than was requested. {@code missCount} may also be incremented not in conjunction with this (nor{@link #loadSuccessCount}) on calls to  {@code getIfPresent}.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link SessionInfo#SessionInfo(long,int)} constructor.", "Heuristic": ["H1"]}, {"nl": "Sets the receipt date.", "Heuristic": []}, {"nl": "the CSS condition that element has pseudo-class :nth-child(an+b)", "Heuristic": ["H1"]}, {"nl": "Merge the given array into the given Collection.", "Heuristic": []}, {"nl": "Returns a map of link URI to link relations type pairs  See  {@link Atom Link Relations}.", "Heuristic": ["H1"]}, {"nl": "Parse a hex digit.", "Heuristic": []}, {"nl": "Print the month title, e.g., May, 1999", "Heuristic": ["H1"]}, {"nl": "Returns true if the buffer is dirty due to a modification by the specified transaction.", "Heuristic": []}, {"nl": "Get the realm associated with the SamlAssertionWrapper parameter", "Heuristic": ["H1"]}, {"nl": "Stores the specified domain for the specified variable if a domain has not yet been stored for the variable.", "Heuristic": []}, {"nl": "Sets a property on this Javascript object for which the value is a Javascript object itself.", "Heuristic": ["H1"]}, {"nl": "Returns an immutable snapshot of the statistics on the  {@code y} values alone.", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link BrowseOffersResponse.Return.OfferData.OfferMedia }", "Heuristic": ["H1"]}, {"nl": "Calls a method on the given object instance with the given arguments and types. Necessary for using native-type parameters and when the arguments are subclassed objects.", "Heuristic": ["H1"]}, {"nl": "Is the Gene RPPA down-regulated?", "Heuristic": ["H1"]}, {"nl": "Converts a byte array into its hex string representation.", "Heuristic": []}, {"nl": "Just a wrapper to {@link UserAction#isEnabledForFileUpload(HttpServletRequest)}.", "Heuristic": ["H1"]}, {"nl": "Sets the  {@link ReadType}.", "Heuristic": ["H1"]}, {"nl": "After a word has been stemmed, it can be retrieved by toString(), or a reference to the internal buffer can be retrieved by getResultBuffer and getResultLength (which is generally more efficient.)", "Heuristic": []}, {"nl": "Test for setLongitude()", "Heuristic": []}, {"nl": "Gets the created date.", "Heuristic": []}, {"nl": "Test for setLongitude()", "Heuristic": []}, {"nl": "Returns a map of config data passed to JS that defines eligible events that can be placed on native views. This should return bubbling directly-dispatched event types and specify what names should be used to subscribe to either form (bubbling/capturing). Returned map should be of the form: { \"onTwirl\": { \"phasedRegistrationNames\": { \"bubbled\": \"onTwirl\", \"captured\": \"onTwirlCaptured\" } } }", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMBParser#getVelocity()}.", "Heuristic": ["H1"]}, {"nl": "Checks to see if the modifyA() flag is set correctly", "Heuristic": ["H1"]}, {"nl": "Does this instance accept nodes with the node type value", "Heuristic": []}, {"nl": "Takes a collection of Elements and counts their words.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Is the locale right-to-left?", "Heuristic": []}, {"nl": "Returns the number of blocks required to compute the aggregation, which is one pass through the sorted table. It does not include the one-time cost of materializing and sorting the records.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.MWVParser#setAngle(double)}.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the access property.", "Heuristic": []}, {"nl": "Retrieves the problems that have been found.", "Heuristic": []}, {"nl": "Copy every byte from the specified  {@link InputStream} to the specifed{@link OutputStream} and then close both of them.This method is equivalent to a call to the following method: {@link #copy(InputStream,OutputStream,boolean) copy(in, out, true)}.", "Heuristic": ["H1"]}, {"nl": "An alternative to  {@link #setLength(int)}, that doesn't reset the  {@link #capacity} field.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the passwordCredentials property.", "Heuristic": []}, {"nl": "Do the work of retrieving a byte array.", "Heuristic": []}, {"nl": "Obtains the value of  {@link NIOReactorPNames#SELECT_INTERVAL} parameter.If not set, defaults to 1000.", "Heuristic": ["H1"]}, {"nl": "Add new listener object.", "Heuristic": []}, {"nl": "Provide number of unknown whitelist ACCEPT (return true) decisions made by this MutationFilter.", "Heuristic": []}, {"nl": "Unregisters the class implementing an  {@link AuthScheme authentication scheme} withthe given name.", "Heuristic": ["H1"]}, {"nl": "Returns a String representing the name of the entity placing this order.", "Heuristic": []}, {"nl": "Get the list of sequence IDs for this database.", "Heuristic": ["H1"]}, {"nl": "Gets the modified date.", "Heuristic": []}, {"nl": "Gets the correlation Id on the message, in the form of a string.  The behavior is undefined if the correlation ID is not a UTF-8 bytestream.", "Heuristic": ["H1"]}, {"nl": "Retrieves the XML located at the given URI. It's assumed the URI does point to a XML--the URI will be accessed (using java.io or java.net), opened, read and then passed into the XML parser (XMLReader) configured for Flying Saucer. The result is packed up into an XMLResource for later consumption.", "Heuristic": ["H1"]}, {"nl": "Returns the OSM way node corresponding to the given location string.", "Heuristic": []}, {"nl": "Required. The ID of the cloud load balancer, or RackConnectV3 load balancer pool, to which new servers are added. For cloud load balancers set the ID as an integer, for RackConnectV3 set the UUID as a string. NOTE that when using RackConnectV3, this value is supplied to you by Rackspace Support after they configure your load balancer pool.", "Heuristic": []}, {"nl": "Sets an array of double values in the object.", "Heuristic": []}, {"nl": "Test case for  {@link GCSUnderFileSystem#delete(String,boolean)}.", "Heuristic": ["H1"]}, {"nl": "Accumulate inclusive and exclusive times for a pass.", "Heuristic": []}, {"nl": "Get the validity period", "Heuristic": []}, {"nl": "Ensures that  {@code expression} is {@code true}, throwing a  {@code VerifyException} with acustom message otherwise.", "Heuristic": ["H1"]}, {"nl": "Associates a stream with a single client connection, which is guaranteed to be the only reader of the stream. The getChunk() method will be called serially on this connection and once the connection is closed, the stream will never be used again, enabling cleanup. This must be called before the first getChunk() on the stream, but it may be invoked multiple times with the same channel and stream id.", "Heuristic": ["H1"]}, {"nl": "Checks if this entry is a a symlink.", "Heuristic": ["H1"]}, {"nl": "Adds a new parameter to this function.", "Heuristic": []}, {"nl": "Set the JSSE provider. If not set, it uses system default.", "Heuristic": ["H1"]}, {"nl": "Returns the total number of times that  {@link Cache} lookup methods attempted to load newvalues. This includes both successful load operations, as well as those that threw exceptions. This is defined as  {@code loadSuccessCount + loadExceptionCount}.", "Heuristic": ["H1"]}, {"nl": "Sets the  {@link UserSubject} representing this Client authentication, may be setup during the registration.", "Heuristic": ["H1"]}, {"nl": "Returns true if a value has been assigned for the setting  {@code id}.", "Heuristic": ["H1"]}, {"nl": "get size of list  getSize(null)   =   0; getSize({})     =   0; getSize({1})    =   1; ", "Heuristic": ["H1"]}, {"nl": "Explicitly starts the  {@link LocalAlluxioCluster}.", "Heuristic": ["H1"]}, {"nl": "Returns  {@code true} if the supplied '{@code candidateMethod}' can be consider a validate candidate for the  {@link Method} that is {@link Method#isBridge() bridged}by the supplied  {@link Method bridge Method}. This method performs inexpensive checks and can be used quickly filter for a set of possible matches.", "Heuristic": ["H1"]}, {"nl": "Looks up a term and returns a map from URL to count.", "Heuristic": []}, {"nl": "Sets the response type", "Heuristic": []}, {"nl": "Sets a property on this Javascript object.", "Heuristic": ["H1"]}, {"nl": "Gets the coalescing key corresponding to the gesture with this down time.", "Heuristic": ["H1"]}, {"nl": "Build the working apacheds", "Heuristic": ["H1"]}, {"nl": "Returns true if the monetary value represented by this instance is greater than that of the given other Coin, otherwise false.", "Heuristic": []}, {"nl": "Determines whether a segment contains a black point", "Heuristic": []}, {"nl": "Tests if this protocol version is greater or equal to the given one.", "Heuristic": []}, {"nl": "Return the accumulated times for a pass.", "Heuristic": []}, {"nl": "Create an instance of  {@link RegistrationResponse }", "Heuristic": ["H1"]}, {"nl": "Set and set system mode.", "Heuristic": []}, {"nl": "returns the largest sequence number sent so far", "Heuristic": ["H1"]}, {"nl": "Handle firing a help text event.", "Heuristic": []}, {"nl": "POST  /change_password -> changes the current user's password", "Heuristic": ["H1"]}, {"nl": "getCity returns a String representing the city in a UBL address.", "Heuristic": ["H1"]}, {"nl": "Get the value of the constant.", "Heuristic": []}, {"nl": "Flushes the journal.", "Heuristic": []}, {"nl": " In order to decompose the matrix 'A' it must have full rank.  'A' is a 'm' by 'n' matrix. It requires about 2nm2-2m2/3 flops.   The matrix provided here can be of different dimension than the one specified in the constructor.  It just has to be smaller than or equal to it. ", "Heuristic": ["H1"]}, {"nl": "Sleeps for the given number of milliseconds, reporting interruptions using the given logger. Unlike Thread.sleep(), this method responds to interrupts by setting the thread interrupt status. This means that callers must check the interrupt status if they need to handle interrupts.", "Heuristic": []}, {"nl": "Uploads a local file to the Box account in a specific folder", "Heuristic": []}, {"nl": "Forward Fly the drone forward for given time", "Heuristic": []}, {"nl": "Adds a header to this message. The header will be appended to the end of the list.", "Heuristic": []}, {"nl": "Sets the value of the serviceAccount property.", "Heuristic": []}, {"nl": "String for the human readable name of the symbol.", "Heuristic": ["H1"]}, {"nl": "Draws a header to a canvas, offsetting by some x and y amount", "Heuristic": []}, {"nl": "Creates an OpenGraphAction suitable for posting via, e.g., a native Share dialog.", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.parser.XDRParser#addMeasurement(Measurement...))}.", "Heuristic": ["H1"]}, {"nl": "Returns the index for which  {@link #keyAt} would return thespecified key, or a negative number if the specified key is not mapped.", "Heuristic": ["H1"]}, {"nl": "Pins the specified block. The transaction manages the buffer for the client.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns the time in ns when this connection became idle. Undefined if this connection is not idle.", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link GetPrice }", "Heuristic": ["H1"]}, {"nl": "Check whether the value is greater than or equals to 0.", "Heuristic": []}, {"nl": "Cria um objeto do tipo  {@link Grafo}.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.MTWParser#getTemperature()}.", "Heuristic": ["H1"]}, {"nl": "Tests that array read methods read the correct data, for the first block of the file.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Produce a comma delimited text from a JSONArray of JSONObjects using a provided list of names. The list of names is not included in the output.", "Heuristic": []}, {"nl": "True if this type requires the import of the aegisTypes schema.", "Heuristic": []}, {"nl": "Sets performance preference for connection time, latency and bandwidth. Does nothing by default.", "Heuristic": []}, {"nl": "Clears all bits (sets to false).", "Heuristic": []}, {"nl": "Checks equality of this protocol version with an object. The object is equal if it is a protocl version with the same protocol name, major version number, and minor version number. The specific class of the object is not relevant, instances of derived classes with identical attributes are equal to instances of the base class and vice versa.", "Heuristic": ["H1"]}, {"nl": "Sets whether the underlying Http Connection is persistent or not.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.HDMParser#getHeading()}.", "Heuristic": ["H1"]}, {"nl": "save contact list", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns a new thread-safe interner which retains a weak reference to each instance it has interned, and so does not prevent these instances from being garbage-collected. This most likely does not perform as well as  {@link #newStrongInterner}, but is the best alternative when the memory usage of that implementation is unacceptable.", "Heuristic": ["H1"]}, {"nl": "Append either the value true or the value false.", "Heuristic": []}, {"nl": "Return a pretty print string for a XML string. If the given string is not valid XML it returns the original string.", "Heuristic": ["H1"]}, {"nl": "Get the hash of the represented block", "Heuristic": []}, {"nl": "Checks if a given policy contains no policy components  or if it has only empty ExactlyOne or All components  containing no assertions", "Heuristic": ["H1"]}, {"nl": "Returns result value as double.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Tell the parse state that an outer class is being parsed.", "Heuristic": []}, {"nl": "Sets the value of the y property.", "Heuristic": []}, {"nl": "Setea los roles asociados a este usuario.", "Heuristic": ["H1"]}, {"nl": "Used to promote block on under storage layer to top storage layer when there are more than one storage layers in Alluxio's space. otherwise.", "Heuristic": ["H1"]}, {"nl": "Count the number of elements in a sequence.", "Heuristic": []}, {"nl": "Sets the message body, as a string. The string will be encoded as UTF-16LE, with no byte-order-mark. This information may be useful if you use different libraries on the the receiving and sending side. ", "Heuristic": ["H1"]}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.parser.VHWParser#isTrue()}.", "Heuristic": ["H1"]}, {"nl": "Generates different encrypted PKCS1 vectors", "Heuristic": []}, {"nl": "Sets the concurrency level that will be used by the to-be-built  {@link Interner}.", "Heuristic": ["H1"]}, {"nl": "Resets all the counters to 0 for testing.", "Heuristic": []}, {"nl": "Load a class with a given name.  It will try to load the class in the following order:  From Thread.currentThread().getContextClassLoader() Using the basic Class.forName() From ClassLoaderUtil.class.getClassLoader() From the callingClass.getClassLoader() ", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns the abbreviated name of the type, without the package name", "Heuristic": []}, {"nl": "Subclasses may need to override to release any resources", "Heuristic": []}, {"nl": "The given entry should not have its sequence number set. This method will add the proper sequence number to the passed in entry.", "Heuristic": []}, {"nl": "Returns an indication whether the given block is marked to be moved out.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Add an occurrence of a value", "Heuristic": []}, {"nl": "This checks if a parameter key has been set by the user", "Heuristic": []}, {"nl": "Returns the label of the edge between the specified vertices, or null if there is no edge between them.", "Heuristic": []}, {"nl": "Kills the master thread, by calling  {@link Thread#interrupt()}.", "Heuristic": ["H1"]}, {"nl": "Returns the Notation as set in the menu.", "Heuristic": []}, {"nl": "Binds this socket to the specified local serviceID.", "Heuristic": []}, {"nl": "Creates an instance of  {@link DefaultNHttpServerConnection} based on thegiven  {@link IOSession}.  This method can be overridden in a super class in order to provide a different implementation of the  {@link NHttpServerIOTarget} interface.", "Heuristic": ["H1"]}, {"nl": "adds the value of x to this object's integer value.", "Heuristic": ["H1"]}, {"nl": "Gets a map that contains attributes that aren't bound to any typed property on this class.  the map is keyed by the name of the attribute and the value is the string value of the attribute. the map returned by this method is live, and you can add new attribute by updating the map directly. Because of this design, there's no setter.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Creates a new  {@link Closer}.", "Heuristic": ["H1"]}, {"nl": "Returns the name of this JavaScript class, \"Matrix\".", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link JAXBElement }{@code }}", "Heuristic": ["H1"]}, {"nl": "Reverses this sentence.", "Heuristic": []}, {"nl": "Create an instance of  {@link RootNode }", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Adds all the headers to this message.", "Heuristic": []}, {"nl": "Return the transition taken by a workflow job action/decision action.", "Heuristic": []}, {"nl": "Called when the  {@link Presenter} must stop {@link Vista} updates. The extending{@code Presenter} can override this method to provide some custom logic.", "Heuristic": ["H1"]}, {"nl": "get the set of transfer keys", "Heuristic": ["H1"]}, {"nl": "Gets the value of the responseType property.", "Heuristic": []}, {"nl": "Creates an instance of  {@link HeapByteBufferAllocator} to be usedby HTTP connections for allocating  {@link java.nio.ByteBuffer} objects. This method can be overridden in a super class in order to provide a different implementation of the  {@link ByteBufferAllocator} interface.", "Heuristic": ["H1"]}, {"nl": "We need this to remove modules.", "Heuristic": []}, {"nl": "Obtains value of the  {@link CoreProtocolPNames#HTTP_ELEMENT_CHARSET} parameter.If not set, defaults to US-ASCII.", "Heuristic": ["H1"]}, {"nl": "Returns a list of all owned product IDs of a given type", "Heuristic": ["H1"]}, {"nl": "Prints the issue date in java.text.DateFormat.LONG format.", "Heuristic": ["H1"]}, {"nl": "Note: The graphic representation maps y values on column numbers (y-axis in horizontal direction).", "Heuristic": []}, {"nl": "get type", "Heuristic": ["H1", "H2"]}, {"nl": "Return true if this TokenValidator implementation is capable of validating the ReceivedToken argument.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns true if a value is either the String \"true\" (regardless of case)  or Boolean.TRUE.", "Heuristic": ["H1"]}, {"nl": "Converts the instance of particular type into its string-based representation using parameter converter provider and available parameter converter.", "Heuristic": []}, {"nl": "Registers a callback, to be triggered when the system UI visibility changes.", "Heuristic": []}, {"nl": "set path of big icon", "Heuristic": ["H1"]}, {"nl": "Gets the receipt date type.", "Heuristic": []}, {"nl": "Checks whether there is a waiting thread in this pool.", "Heuristic": []}, {"nl": "Returns the last version recorded as having run.", "Heuristic": []}, {"nl": "Sets the naming format to use when naming threads ( {@link Thread#setName}) which are created with this ThreadFactory.", "Heuristic": ["H1"]}, {"nl": "Returns the least value present in  {@code array}, treating values as unsigned.", "Heuristic": ["H1"]}, {"nl": "Returns the type for the typeName specified.", "Heuristic": []}, {"nl": "overloaded method - present for test purposes", "Heuristic": ["H1"]}, {"nl": "Creates an instance of  {@link DefaultHttpRequestFactory} to be usedby HTTP connections for creating  {@link HttpRequest} objects. This method can be overridden in a super class in order to provide a different implementation of the  {@link HttpRequestFactory} interface.", "Heuristic": ["H1"]}, {"nl": "Removes all items currently in the queue.", "Heuristic": []}, {"nl": "Gets the serializer factory.", "Heuristic": ["H1"]}, {"nl": "Returns the schema of the new table.", "Heuristic": []}, {"nl": "Sets the value of the token property.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#getStatus()} .", "Heuristic": ["H1"]}, {"nl": "Add an element to the list - causes sorting", "Heuristic": []}, {"nl": "mixin interface and delegates. all class must be public.", "Heuristic": ["H1"]}, {"nl": "Deletes all records from DB using DELETE statement.", "Heuristic": []}, {"nl": "Compute the symmetric eigenvalue using a slightly safer technique", "Heuristic": []}, {"nl": "Returns the offset from the file start where the latest block should be written (end of prev block).", "Heuristic": ["H1"]}, {"nl": "Called on completion of the MEP for which the Conduit was required.", "Heuristic": []}, {"nl": "Parses a  {@link ByteBuffer} into a {@link String}. In particular, the function prints the content of the buffer in 4-byte increments as space separated integers.", "Heuristic": ["H1"]}, {"nl": "Returns true if this ref has been rewound.", "Heuristic": []}, {"nl": "Test for setLatitude()", "Heuristic": []}, {"nl": "Returns  {@code true} if the given string is null or is the empty string.Consider normalizing your string references with  {@link #nullToEmpty}. If you do, you can use  {@link String#isEmpty()} instead of this method, and you won't need special null-safe formsof methods like  {@link String#toUpperCase} either. Or, if you'd like to normalize \"in the otherdirection,\" converting empty strings to  {@code null}, you can use  {@link #emptyToNull}.", "Heuristic": ["H1"]}, {"nl": "Sets the checks if is active.", "Heuristic": ["H1"]}, {"nl": "Returns a list of all known certificate aliases", "Heuristic": []}, {"nl": "Get the AMQP connection factory with the given name.", "Heuristic": ["H1"]}, {"nl": "Sets the error code.", "Heuristic": []}, {"nl": "Sets the tagged value to given String.", "Heuristic": []}, {"nl": "Create an instance of  {@link BrowseOffersResponse.Return.OfferData.Geo.Region.Country.State }", "Heuristic": ["H1"]}, {"nl": "Call  {@link MenuItem#setShowAsAction(int) MenuItem.setShowAsAction()}. If running on a pre- {@link android.os.Build.VERSION_CODES#HONEYCOMB} device,does nothing and returns false.  Otherwise returns true.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the validate property.", "Heuristic": []}, {"nl": "Release the lock.", "Heuristic": []}, {"nl": "Implements BundleActivator.stop(). Does nothing since the framework will automatically unregister any registered services.", "Heuristic": []}, {"nl": "Gets the media attribute of the StylesheetInfo object", "Heuristic": []}, {"nl": "Stops both the alluxio and underfs service threads.", "Heuristic": ["H1"]}, {"nl": "Return the Spark user for authenticating SASL connections.", "Heuristic": ["H1"]}, {"nl": "Append a long value.", "Heuristic": []}, {"nl": "The maximum sum of available bytes and total bytes of added blocks in a directory.", "Heuristic": []}, {"nl": "Move a file", "Heuristic": []}, {"nl": "Unregisters the instance of RemoteControlClient from the AudioManager.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Call before examining child nodes one level of indentation into DOM Any subsequent call to  {@link #visited visited} is assumedto belong to nodes one level deeper into the tree than the nodes visited before calling  {@link #indent indent}. As a side effect, the current attribute - if any - is reset.", "Heuristic": ["H1"]}, {"nl": "Closes the stream after a test ran.", "Heuristic": []}, {"nl": "Set the String corresponding to the CallbackHandler class.", "Heuristic": []}, {"nl": "Returns true if this map contains a mapping for the specified key.", "Heuristic": []}, {"nl": "Sets the error msg.", "Heuristic": []}, {"nl": "\"#\" are used for internal references. If a token-id comes with that we need to remove.", "Heuristic": []}, {"nl": "Queues up a save in the background. Useful for not very important wallet changes.", "Heuristic": []}, {"nl": "Register item in the matrix", "Heuristic": []}, {"nl": "Returns the conceptual length of the specified field. If the field is not a string field, then the return value is undefined.", "Heuristic": []}, {"nl": "save message", "Heuristic": ["H1", "H2"]}, {"nl": "Tests the creation of the  {@link RoundRobinAllocator} via the{@link Allocator.Factory#create(BlockMetadataManagerView)} method.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the soapHeader property.  This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a set method for the soapHeader property.  For example, to add a new item, do as follows:  getSoapHeader().add(newItem);   Objects of the following type(s) are allowed in the list  {@link XsdQNameType }", "Heuristic": ["H1"]}, {"nl": "Creates a scriptSig that can redeem a pay-to-address output.", "Heuristic": ["H1"]}, {"nl": "Returns the path of this key as a human readable string starting with M to indicate the master key.", "Heuristic": ["H1"]}, {"nl": "Methods to call during pre-initialization", "Heuristic": []}, {"nl": "Convert from DIP to PX", "Heuristic": []}, {"nl": "Sets the comments.", "Heuristic": []}, {"nl": "Main method, starts a new AlluxioShell.", "Heuristic": ["H1"]}, {"nl": "Returns whether or not the wide peak of ROI is a region of amplification or deletion", "Heuristic": ["H1"]}, {"nl": "Renders the XML file as a PDF file at the target location.", "Heuristic": []}, {"nl": "Returns true if this assignment assigns values to every variable of vars.", "Heuristic": []}, {"nl": "Convert the internal buffer to a new byte array.", "Heuristic": []}, {"nl": "Like  {@link #sendBroadcast(Intent)}, but if there are any receivers for the Intent this function will block and immediately dispatch them before returning.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.VTGParser#getSpeedKmh()}.", "Heuristic": ["H1"]}, {"nl": "Return requested playlist", "Heuristic": []}, {"nl": "Generate code for one or more elements in a given language.", "Heuristic": []}, {"nl": "Close current transaction  Before close transaction, it needs to be committed.", "Heuristic": ["H1"]}, {"nl": "Create MANUAL-MERGE query.", "Heuristic": []}, {"nl": "Gets the service endpoint interface classname.   The class should be available in the Message Driven Bean jar.", "Heuristic": ["H1"]}, {"nl": "Try to get an object from the free list.  Returns null if the free list is empty.", "Heuristic": []}, {"nl": "Gets the value of the name property.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Check if the node supplied is in the closed list", "Heuristic": []}, {"nl": "Clear all pending animation values.", "Heuristic": []}, {"nl": "Sets the recursive flag.", "Heuristic": []}, {"nl": "Returns the combined QR matrix in a 2D array format that is column major.", "Heuristic": []}, {"nl": "Tells if the provider has captured all the specified sentences.", "Heuristic": []}, {"nl": "Returns the first PartyNameType in list order contained by the SellerPartyType representing the entity fulfilling this order.", "Heuristic": []}, {"nl": "Set the Report to which Rule Violations are sent.", "Heuristic": []}, {"nl": "This method is used to get the Entitlement decision for the provided subject,resource,action and environment using the default appID of the PDP defaultProxy", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link FileUtils#changeLocalFilePermission(String,String)} method for a non-existentfile to thrown an exception.", "Heuristic": ["H1"]}, {"nl": "Puts the enum indicating the source of the token into a Bundle.", "Heuristic": ["H1"]}, {"nl": "Generic equality comparison.", "Heuristic": []}, {"nl": "Enqueues a task to be run.", "Heuristic": []}, {"nl": "Gets the scopes explicitly approved by the end user", "Heuristic": []}, {"nl": "Adds a replacement string for the given input character. The specified character will be replaced by the given string whenever it occurs in the input, irrespective of whether it lies inside or outside the 'safe' range.", "Heuristic": []}, {"nl": "Sets the lower end point of the interval.", "Heuristic": []}, {"nl": "Get the last recorded value for the maximum comic number.", "Heuristic": []}, {"nl": "Sets the successor id.", "Heuristic": ["H1"]}, {"nl": "Returns the stored entity for last attacked target.", "Heuristic": []}, {"nl": "Removes the mapping from the specified key, if there was any.", "Heuristic": []}, {"nl": "Populates a multiset by reading an input stream, as part of deserialization. See  {@link #writeMultiset} for the data format. The numberof distinct elements is determined by a prior call to  {@link #readCount}.", "Heuristic": ["H1"]}, {"nl": "Sets the properties and configuration before each test runs.", "Heuristic": []}, {"nl": "Check whether the value mention correct Timezone.", "Heuristic": []}, {"nl": "Return a list of all languages extensions active in the compiler.", "Heuristic": []}, {"nl": "Push an array or object scope.", "Heuristic": []}, {"nl": "Set the permission bits of a file. The permission bits are set to the provided mode. This method is only implemented for OSes of the Unix family and makes use of the 'chmod' function of the native C library. See 'man 2 chmod' for more information.", "Heuristic": ["H1"]}, {"nl": "It is used to get the settings object in order to change settings", "Heuristic": []}, {"nl": "Sets the value of the csr property.", "Heuristic": ["H1"]}, {"nl": "Factorises the functionality of makeOperationof()", "Heuristic": ["H1"]}, {"nl": "Stops running progress-bar", "Heuristic": []}, {"nl": "Pass data to DataListener.", "Heuristic": []}, {"nl": "Determines whether the authentication exchange has completed successfully.", "Heuristic": []}, {"nl": "Gets all Genetic Profiles associated with a specific cancer study.", "Heuristic": []}, {"nl": "Returns the string value stored for the specified field of the current record.", "Heuristic": []}, {"nl": "delete the given tag", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link PathUtils#temporaryFileName(long,String)} method.", "Heuristic": ["H1"]}, {"nl": "Get the JAAS Login context name to use.", "Heuristic": ["H1"]}, {"nl": "Registers customEntityClasses and assigns color to egg.", "Heuristic": []}, {"nl": "Returns the SSL socket factory, or null if this is not an HTTPS address.", "Heuristic": []}, {"nl": "Get satellite azimuth, in degrees from true north (0..359&deg;).", "Heuristic": ["H1"]}, {"nl": "Required. The cooldown period, in seconds, before this particular scaling policy can be executed again. The policy cooldown period does not affect the global scaling group cooldown. The minimum value for this parameter is 0 seconds, the maximum value is 86400 seconds (24 hrs).", "Heuristic": []}, {"nl": "Returns true if the block height is either not a checkpoint, or is a checkpoint and the hash matches.", "Heuristic": []}, {"nl": "Sets the data set id.", "Heuristic": ["H1"]}, {"nl": "Internal function for computing the decomposition.", "Heuristic": []}, {"nl": "Sets mSlidingMenu as a newly inflated SlidingMenu. Should be called within the activitiy's onCreate()", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.VHWParser#getHeading()}.", "Heuristic": ["H1"]}, {"nl": "Formats the json content and print it", "Heuristic": ["H1"]}, {"nl": "If the type object merely wants to contribute attributes to the  xsd:element element, it can implement this.", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link JAXBElement }{@code }}", "Heuristic": ["H1"]}, {"nl": "Add a callback to the AnimationQueue.", "Heuristic": []}, {"nl": "Moves to the next record in the block.", "Heuristic": []}, {"nl": "Returns an ACTIONS function for the complete-state formulation of the n-queens problem.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Remove inner classes no longer in the source from the current classifier in the model.", "Heuristic": []}, {"nl": "Returns the default bus, creating it if necessary.", "Heuristic": []}, {"nl": "Parses a date value.  The formats used for parsing the date value are retrieved from the default http params.", "Heuristic": ["H1"]}, {"nl": "Tests  {@link BaseKeyValuePartitionWriter#put(byte[],byte[])}.", "Heuristic": ["H1"]}, {"nl": "Applies the default umask for newly created directories to the mode bits.", "Heuristic": ["H1"]}, {"nl": "Gets association response strings from the backend.", "Heuristic": []}, {"nl": "The block header this object wraps. The referenced block object must not have any transactions in it.", "Heuristic": []}, {"nl": "Getter for the name.", "Heuristic": []}, {"nl": "Adds a string to the graph's source (without newline).", "Heuristic": []}, {"nl": "Returns a new array of the given length with the specified component type.", "Heuristic": []}, {"nl": "Combines the remaining data from the given Collection of ByteBuffers into a single consolidated  ByteBuffer.", "Heuristic": ["H1"]}, {"nl": "Returns whether the items array is non-null and has at least one entry.", "Heuristic": []}, {"nl": "Creates new instance of a class by calling a constructor that receives ctorClassArgs arguments.", "Heuristic": ["H1"]}, {"nl": "The kind of comparison performed.", "Heuristic": []}, {"nl": "Returns a singleton instance of OpenIDExtensionFactory", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Given a String Filter, expose as a Filter on another type. The toString() method is called on the objects of the other type and delegated to the String Filter.", "Heuristic": []}, {"nl": "Add an alias/password pair to the callback mechanism.", "Heuristic": []}, {"nl": "Writes a SOAP 1.1 id attribute.", "Heuristic": ["H1"]}, {"nl": "Gets the file size.", "Heuristic": []}, {"nl": "Inserts a directory entry at the specified slot.", "Heuristic": []}, {"nl": "Sets whether or not this setting should always save, even if it is default. Returns this so it can be used during assignment.", "Heuristic": ["H1"]}, {"nl": "Returns the CipherSuites associated with this endpoint.", "Heuristic": []}, {"nl": "the CSS condition [attribute^=value]", "Heuristic": ["H1"]}, {"nl": "Receive buffer size (SO_RCVBUF). Note: the optimal size for receive buffer and send buffer should be latency  network_bandwidth. Assuming latency = 1ms, network_bandwidth = 10Gbps buffer size should be ~ 1.25MB", "Heuristic": ["H1"]}, {"nl": "Checks if node is a child of the level node.", "Heuristic": []}, {"nl": "parse key-value pairs to map, ignore empty key", "Heuristic": ["H1"]}, {"nl": "Registers a  {@link AuthSchemeFactory} with  the given identifier. If a factory with thegiven name already exists it will be overridden. This name is the same one used to retrieve the  {@link AuthScheme authentication scheme} from {@link #getAuthScheme}.  Please note that custom authentication preferences, if used, need to be updated accordingly for the new  {@link AuthScheme authentication scheme} to take effect.", "Heuristic": ["H1"]}, {"nl": "Clear the cache, calling  {@link #entryRemoved} on each removed entry.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.util.Date#Date(int,int,int)}.", "Heuristic": ["H1"]}, {"nl": "Get the identifier associated with this token", "Heuristic": []}, {"nl": "Returns true if the underlying content format is a W3C DOM or a SAAJ message.", "Heuristic": ["H1"]}, {"nl": "Color text HTML based on errorLevel", "Heuristic": []}, {"nl": "instanceof operator. We mimick the normal JavaScript instanceof semantics, returning true if this appears in value's prototype chain.", "Heuristic": ["H1"]}, {"nl": "Adds a listener to the listener list.", "Heuristic": []}, {"nl": "Generates a suitable service name from a given class. The returned name is the simple name of the class, i.e. without the package name.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.util.Time#toString(net.sf.marineapi.nmea.util.Time)}.", "Heuristic": ["H1"]}, {"nl": "Find the attribute or simple/text node", "Heuristic": []}, {"nl": "To get the maximum amount of memory used until now", "Heuristic": []}, {"nl": "Set up.", "Heuristic": ["H2"]}, {"nl": "Implements BundleActivator.stop(). Does nothing since the framework will automatically unregister any registered services.", "Heuristic": []}, {"nl": "Gets the value of the given given member as a set of strings, null if it doesn't exist", "Heuristic": ["H1"]}, {"nl": "Using default CallbackhandlerProviders and AuthPolicy", "Heuristic": ["H1"]}, {"nl": "Renders the XML file at the given URL as a PDF file at the target location.", "Heuristic": []}, {"nl": "Returns the parent SentenceReader.", "Heuristic": []}, {"nl": "Walk the list of registered EndpointResolvers, so as to retrieve a concrete EPR corresponding to the given abstract EPR, returning a cached reference if already resolved.  This API is used by any actor that requires a concrete EPR (e.g. a transport-level Conduit), and must be called each and every time the EPR content is to be accessed (e.g. before each connection establishment attempt).", "Heuristic": ["H1"]}, {"nl": "Tests if the specified object is a key in this hashtable.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#setSpeed()} .", "Heuristic": ["H1"]}, {"nl": " Computes the quality of the computed decomposition.  A value close to or less than 1e-15 is considered to be within machine precision.   This function must be called before the original matrix has been modified or else it will produce meaningless results. ", "Heuristic": ["H1"]}, {"nl": "Method to add an element to this utility list and update the sums at the same time.", "Heuristic": []}, {"nl": "Return Pet Status", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "decode the base 64 encoded String data - whitespace will be ignored.", "Heuristic": ["H1"]}, {"nl": "Gets the value of gene X in case Y.", "Heuristic": []}, {"nl": "This method is used to unbind notification sending modules. Whenever a module is dynamically stops, this method will unregister them.", "Heuristic": []}, {"nl": "Return just the comment edges for a specific layer. TODO: Document: Diagram / layer?", "Heuristic": ["H1"]}, {"nl": "Pass the event to the listener.", "Heuristic": []}, {"nl": "Deletes all keys from the database. Should be used for development and testing, not production.", "Heuristic": []}, {"nl": "Saves files with new names so that game-player can use the images", "Heuristic": ["H1"]}, {"nl": "Gets the status.", "Heuristic": []}, {"nl": "Instructs the  {@link InternerBuilder} to build a weak interner.", "Heuristic": ["H1"]}, {"nl": "Return a variable from the context. ", "Heuristic": []}, {"nl": "Sets the value of the decimal property.", "Heuristic": []}, {"nl": "Return whether we can identify the typeName as a java.util collection class or interface as specified.", "Heuristic": []}, {"nl": "Factory method that returns an empty token (token = \"\", secret = \"\"). Useful for two legged OAuth.", "Heuristic": []}, {"nl": "Creates a timer task which will periodically flush the batch queue thus ensuring log records won't become too 'stale'.  Ex, if we have a batch size 10 and only WARN records need to be delivered then without the periodic cleanup the consumers may not get prompt notifications", "Heuristic": []}, {"nl": "Initializes the Action Check service.", "Heuristic": []}, {"nl": "Returns the cancer study stats.", "Heuristic": []}, {"nl": "Place a String on the clipboard, and make this class the owner of the Clipboard's contents.", "Heuristic": []}, {"nl": "Encode integer as a series of 4 bytes into buf starting at position offset.", "Heuristic": ["H1"]}, {"nl": "Compares the specified object with this entry for equality. Returns {@code true} if the given object is also a map entry and the two entriesrepresent the same mapping. More formally, two entries  {@code e1} and{@code e2} represent the same mapping if (e1.getKey() == null ? e2.getKey() == null : e1.getKey().equals(e2.getKey())) &amp;&amp; (e1.getValue() == null ? e2.getValue() == null : e1.getValue().equals(e2.getValue()))  This ensures that the  {@code equals} method works properly acrossdifferent implementations of the  {@code Map.Entry} interface.", "Heuristic": ["H1"]}, {"nl": "Gets the id of the block's locker.", "Heuristic": ["H1"]}, {"nl": "Set an indexed property. We do nothing here, so all properties are effectively read-only.", "Heuristic": []}, {"nl": "Empty caches of generated Java classes and Java reflection information.", "Heuristic": []}, {"nl": "Initializes the PHP Cache.", "Heuristic": []}, {"nl": "Gets the  {@link CookieSpec cookie specification} with the given name.", "Heuristic": ["H1"]}, {"nl": "Adds a ReplacedElement containing an image to a cache of images for quick lookup.", "Heuristic": []}, {"nl": "Is this set an (improper) subset of another?", "Heuristic": []}, {"nl": "Test case for  {@link S3AUnderFileSystem#delete(String,boolean)}.", "Heuristic": ["H1"]}, {"nl": "logs the message and Throwable prepended by the filter name (copy of  {@link GenericServlet#log(String,Throwable)})", "Heuristic": ["H1"]}, {"nl": "Main method.", "Heuristic": ["H2"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns a new object with cropped image data. Implementations may keep a reference to the original data rather than a copy. Only callable if isCropSupported() is true.", "Heuristic": []}, {"nl": "Add mapping between Uri path and callback method which builds raw SQL string.", "Heuristic": ["H1"]}, {"nl": "Set a new (default) TTL value in seconds", "Heuristic": []}, {"nl": "get thumbnail", "Heuristic": ["H1", "H2"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#setNumber()} .", "Heuristic": ["H1"]}, {"nl": "Sets the value of the specified field  in the current record.", "Heuristic": ["H1"]}, {"nl": "Returns a  {@code TopKSelector} that collects the lowest {@code k} elements added to it,relative to the natural ordering of the elements, and returns them via  {@link #topK} inascending order.", "Heuristic": ["H1"]}, {"nl": "Returns the Visibility enum key for a node.", "Heuristic": ["H1"]}, {"nl": "Get properties required for the given user store", "Heuristic": []}, {"nl": "Removes the pcl data unit.", "Heuristic": ["H1"]}, {"nl": "Returns the names of all supported way selection options.", "Heuristic": []}, {"nl": "The most common use of \"allowBreak\": level 1, with an alternative of a single space.", "Heuristic": []}, {"nl": "stops the gitblit server instance running in a separate thread after test cases of concrete, non-abstract child-classes have been executed", "Heuristic": ["H1"]}, {"nl": "Sets the page's flag field to the specified value", "Heuristic": []}, {"nl": "Create and return a new DirectoryDownloader instance.", "Heuristic": []}, {"nl": "Is the locale right-to-left?", "Heuristic": []}, {"nl": "Return the secret key registered with the given application. This key is used to authenticate the executors before they can fetch shuffle files written by this application from the external shuffle service. If the specified application is not registered, return null.", "Heuristic": []}, {"nl": "Adds view to specified cache. Creates a cache list if it is null.", "Heuristic": []}, {"nl": "Retrieve the physical untransformed bounds (geom + effect + clip) of a Node.", "Heuristic": []}, {"nl": "set the modem Polling time modem polling time will be the time interval that the modem will be polled to get the unread messages form the inbox. the optimal value for this will be diffrent form modem to modem. Keep the default value of you are not aware of it", "Heuristic": ["H1"]}, {"nl": "Get the active user repository project prefix.", "Heuristic": []}, {"nl": "Update BPS Profile", "Heuristic": []}, {"nl": "Gets the fetcher start timestamp.", "Heuristic": []}, {"nl": "Gets the Genetic Profile.", "Heuristic": []}, {"nl": "Sets the text.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets the value of the content property.  This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a set method for the content property.  For example, to add a new item, do as follows:  getContent().add(newItem);   Objects of the following type(s) are allowed in the list {@link Element }{@link String }{@link Object }", "Heuristic": ["H1"]}, {"nl": "Description of the Method", "Heuristic": []}, {"nl": "Gets the value of the request property.", "Heuristic": []}, {"nl": "Adds an item to the buffer.", "Heuristic": []}, {"nl": "Gets the value of the streaming mode", "Heuristic": []}, {"nl": "Sets the Interaction Type.", "Heuristic": []}, {"nl": "Return a classpath resource as a stream. ", "Heuristic": ["H1"]}, {"nl": "Print an AST node using the given code writer.  The code writer is flushed by this method.", "Heuristic": []}, {"nl": "loads a resource for the specified path", "Heuristic": ["H1"]}, {"nl": "Disposes of any system resources or security-sensitive information the SaslClient might be using.", "Heuristic": ["H1"]}, {"nl": "Verbose log message with printf formatting.", "Heuristic": ["H1"]}, {"nl": "Check if a resource exists as a file.", "Heuristic": []}, {"nl": "Gets the value of the result property.", "Heuristic": []}, {"nl": "Returns cover value (an url, a file path or a MusicBrainz ID)", "Heuristic": ["H1"]}, {"nl": "TODO: Use the following function to have a dropdown set of tools:  ToolBarFactory.addItemsToToolBar(buttonPanel, actions, true);  Instead, this temporary solution:", "Heuristic": ["H1", "H4"]}, {"nl": "Gets the total number of pooled connections for the given route. This is the total number of connections that have been created and are still in use by this connection manager for the route. This value will not exceed the maximum number of connections per host.", "Heuristic": []}, {"nl": "Returns an url to this servlet for the specified parameters.", "Heuristic": ["H1"]}, {"nl": "Checks that a URL is a valid OAuth callback", "Heuristic": []}, {"nl": "Convert array of Strings to String using default delimiter (\",\")", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Decodes a string from Base64 format. No blanks or line breaks are allowed within the Base64 encoded input data.", "Heuristic": []}, {"nl": "Adds a  {@link net.sf.marineapi.nmea.event.SentenceListener} that wants to receive all sentences readby the reader.", "Heuristic": ["H1"]}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.util.Time#setMinutes(int)}.", "Heuristic": ["H1"]}, {"nl": "Removes the attribute with the specified key from this ObjectWithDynamicAttributes.", "Heuristic": []}, {"nl": "Return pivot permutation vector as a one-dimensional double array", "Heuristic": []}, {"nl": "Gets all Extended Mutations, associated with the specified Gene.", "Heuristic": []}, {"nl": "Test method for  {@link com.flatironschool.javacs.JedisIndex#getCounts(java.lang.String)}.", "Heuristic": ["H1"]}, {"nl": "Gets the intrinsicDimensions attribute of the XLayout object", "Heuristic": []}, {"nl": "Sets the user name.", "Heuristic": ["H1"]}, {"nl": "Sets  {@link Mode} bits using a digital representation.", "Heuristic": ["H1"]}, {"nl": "Is gene mutated.", "Heuristic": []}, {"nl": "Returns true if this buffer is full, that is, its {@link #length()} is equal to its {@link #capacity()}.", "Heuristic": []}, {"nl": "Tests bug insertion.", "Heuristic": []}, {"nl": "Read all items of an &lt;items&gt; node and add them to the given RemediationInstruction object.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Deletes a pending federation proposal.", "Heuristic": []}, {"nl": "Gets file names from given source unique file name.", "Heuristic": []}, {"nl": "Sets the value.", "Heuristic": []}, {"nl": "Get all inner classes not in the source.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Sets the checks if is prepopulated.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Activate messages flow.", "Heuristic": []}, {"nl": "Adds a header to this message. The header will be appended to the end of the list.", "Heuristic": []}, {"nl": "PUT  /site-urls : Updates an existing siteUrl.", "Heuristic": ["H1"]}, {"nl": "Create and add constant instance", "Heuristic": []}, {"nl": "Return the instrumentation instance used by the service.", "Heuristic": []}, {"nl": "Puts an unsigned byte into the buffer.", "Heuristic": []}, {"nl": "add the Implementation level properties that properties will be add to the Axis2 Message Context", "Heuristic": ["H1"]}, {"nl": "Skip the current tag and all child elements.", "Heuristic": []}, {"nl": "Get the URI pointing to a logo image of the client application", "Heuristic": []}, {"nl": "Returns the value of the specified attribute key, or null if the attribute was not found.", "Heuristic": []}, {"nl": "This method should be called by the application if the data backing this adapter has changed and associated views should update.", "Heuristic": []}, {"nl": "Called to inform the adapter of which item is currently considered to be the \"primary\", that is the one show to the user as the current page.", "Heuristic": []}, {"nl": "Override this method to make some concrete (quick and harmless) native call. This avoids lazy-loading some phones (LG) use when we call loadLibrary. If there's a problem we'll face an UnsupportedLinkError when first using the feature instead of here. This check force a check right when intended. This way clients of this library can know if it's loaded for sure or not.", "Heuristic": []}, {"nl": "For use with pre-converted data. This is 50x faster than {@link #put(float[])}, and 500x faster than {@link FloatBuffer#put(float[])}, so if you've got float[] data that won't change,  {@link #convert(float)} it to an int[] once and use thismethod to put it in the buffer", "Heuristic": ["H1"]}, {"nl": "Returns the char value for currentValue. If the currentValue can not be interpreted as a char, the defaultValue is returned.", "Heuristic": []}, {"nl": "Returns the size in bytes.", "Heuristic": []}, {"nl": "Returns the SharedContext to be used by renderer. Is instantiated along with the class, so can be accessed before  {@link #render()} is called to tune the rendering process.", "Heuristic": ["H1"]}, {"nl": "Validates BRCA2.", "Heuristic": ["H2"]}, {"nl": "Checks whether a user has permission to edit the attribute of a given path.", "Heuristic": []}, {"nl": "Set the SecurityContext associated with this SecurityToken", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Creates an  {@code AtomicLongMap} with the same mappings as the specified {@code Map}.", "Heuristic": ["H1"]}, {"nl": "Resets  {@link #nextTlsMode} to the first option.", "Heuristic": ["H1"]}, {"nl": "Return the actual key used to access the configuration.", "Heuristic": []}, {"nl": "Sets the batch id.", "Heuristic": ["H1"]}, {"nl": "Sets the data set id.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the date property.", "Heuristic": []}, {"nl": "Does a given URL point to Google Book Search, regardless of domain.", "Heuristic": []}, {"nl": "Adds a way to the central way hashtable.", "Heuristic": ["H1"]}, {"nl": "Defines equality", "Heuristic": ["H2"]}, {"nl": "GET  /authenticate -> check if the user is authenticated, and return its login.", "Heuristic": ["H1"]}, {"nl": "Sets result as KO If match, do not set errorLevelFolder", "Heuristic": ["H1"]}, {"nl": "Mark a diagram as modified, so we can layout it, after the import is complete. If the diagram is not already marked, add it to the list.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Sets the test id.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the elem3 property.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RTEParser#isWorkingRoute()}.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the content property.  This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a set method for the content property.  For example, to add a new item, do as follows:  getContent().add(newItem);   Objects of the following type(s) are allowed in the list {@link Element }{@link String }{@link Object }", "Heuristic": ["H1"]}, {"nl": "Sets the error info.", "Heuristic": []}, {"nl": "add an edge", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Decodes using URLDecoder - use when queries or form post values are decoded", "Heuristic": []}, {"nl": "send it to notification bar This can be override by subclass to provide customer implementation", "Heuristic": ["H1"]}, {"nl": "Gets Type Name.", "Heuristic": []}, {"nl": "Set the databinding name", "Heuristic": ["H1"]}, {"nl": "Adds the specified sentence to the knowledge base.", "Heuristic": []}, {"nl": "From string.", "Heuristic": ["H2"]}, {"nl": "Guaranteed to throw an exception and leave the  {@code RangeMap} unmodified.", "Heuristic": ["H1"]}, {"nl": "Matches any Labeled Node that has the given label.", "Heuristic": []}, {"nl": "Reads the next byte of a multi-byte UTF-8 character and returns its contents (lower 6 bits). Throws a GeneratorError if the byte is not a valid tail.", "Heuristic": ["H1"]}, {"nl": "Return the build info properties.", "Heuristic": []}, {"nl": "Notifies observers about data changing", "Heuristic": []}, {"nl": "Start the worker thread.", "Heuristic": []}, {"nl": "Act - do whatever the ImgScroll wants to do. This method is called whenever the 'Act' or 'Run' button gets pressed in the environment.", "Heuristic": ["H1"]}, {"nl": "Takeoff Start the drone with a takeoff, for a fixed amount of time", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link BrowseOffersResponse.Return.OfferData.Merchant }", "Heuristic": ["H1"]}, {"nl": "Returns the adapter item count.", "Heuristic": []}, {"nl": "Creates a scriptPubKey that sends to the given script hash. Read BIP 16 to learn more about this kind of script.", "Heuristic": ["H1"]}, {"nl": "Destroy the UUID service.", "Heuristic": []}, {"nl": "Tests the  {@link MountOptions#defaults()} method.", "Heuristic": ["H1"]}, {"nl": "Method getPrefix.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets the dest file name.", "Heuristic": ["H1"]}, {"nl": "Print out some version info for debugging.", "Heuristic": []}, {"nl": "Operation getSize returns the size of the figure associated with this layout node.", "Heuristic": []}, {"nl": "Gets Connection to the Database.", "Heuristic": []}, {"nl": "Get the display name of this environment.", "Heuristic": []}, {"nl": "Frees any resources held by the debugger.", "Heuristic": []}, {"nl": "Returns a single query parameter as served by the service provider in a token reply. You must call  {@link #setResponseParameters} with the set ofparameters before using this method.", "Heuristic": ["H1"]}, {"nl": "Set the scope for token request", "Heuristic": []}, {"nl": "Set the agent's current conception of the world state.", "Heuristic": []}, {"nl": "Stops the master after a test ran.", "Heuristic": []}, {"nl": "By specifying a  in config.xml you can map a URL (using startsWith atm) to this method.", "Heuristic": ["H1"]}, {"nl": "Return the workflows being returned.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Tests the  {@link Mode.Bits#not()} method.", "Heuristic": ["H1"]}, {"nl": "Queue a command for delayed execution after the current command execution completes.  All commands queued during the execution of the current command with the same delay will be queued for a single serial execution.  If the command execution throws an exception, no command will be effectively queued.", "Heuristic": []}, {"nl": "Set Variable Tolerance Setting the variable tolerance for the x-axis", "Heuristic": []}, {"nl": "Gets a Builder configured as this object.", "Heuristic": []}, {"nl": "Create XACML policy using the data received from basic policy wizard", "Heuristic": ["H1"]}, {"nl": "Given the name for a class, returns the portion which appears to constitute the package -- i.e., all characters after the last dot, or all the characters if the name has no dot.", "Heuristic": []}, {"nl": "Gets the statement that triggered the sink", "Heuristic": []}, {"nl": "Tests the  {@link StorageTier#getStorageDirs()} method.", "Heuristic": ["H1"]}, {"nl": "Verbose log message.", "Heuristic": []}, {"nl": "Tests that re-registering via {@link MasterWorkerInfo#register(StorageTierAssoc,List,Map,Map,Set)} works.", "Heuristic": ["H1"]}, {"nl": "Returns the highest value in the dataset. The count must be non-zero. Non-finite values If the dataset contains  {@link Double#NaN} then the result is {@link Double#NaN}. If it contains  {@link Double#POSITIVE_INFINITY} and not {@link Double#NaN} then the result is{@link Double#POSITIVE_INFINITY}. If it contains  {@link Double#NEGATIVE_INFINITY} and finitevalues only then the result is the highest finite value. If it contains {@link Double#NEGATIVE_INFINITY} only then the result is {@link Double#NEGATIVE_INFINITY}.", "Heuristic": ["H1"]}, {"nl": "Adds the given channel to this set of stored states, broadcasting the contract and refund transactions when the channel expires and notifies the wallet of an update to this wallet extension", "Heuristic": []}, {"nl": "Optional label for referring to the part within an action (null for  no label).", "Heuristic": ["H1"]}, {"nl": "Configures the api secret", "Heuristic": ["H1"]}, {"nl": "Return a short description of the total running time.", "Heuristic": []}, {"nl": "Locates and decodes a QR code in an image.", "Heuristic": []}, {"nl": "Compares this key-value pair to another.  Two pairs are compared by comparing their key  {@link ByteBuffer}.", "Heuristic": ["H1"]}, {"nl": "Makes sure arrays are correctly set when it first computers a larger matrix then a smaller one.  When going from small to large its often forces to declare new memory, this way it actually uses memory.", "Heuristic": ["H1"]}, {"nl": "Handles an exception by passing it to ExceptionHandler. If no handler is present, logs the error at level WARNING.", "Heuristic": []}, {"nl": "Takes and rotates the it 90 degrees", "Heuristic": ["H1"]}, {"nl": "set whether the scope is invalid or not", "Heuristic": ["H1"]}, {"nl": "Returns the  {@code byte} nearest in value to {@code value}.", "Heuristic": ["H1"]}, {"nl": "Formats a WarningValue as a  {@link String}suitable for including in a header. For example, you can:  WarningValue wv = ...; HttpResponse resp = ...; resp.addHeader(\"Warning\", wv.toString()); ", "Heuristic": ["H1"]}, {"nl": "Sets the resolver used to lookup remote objects.", "Heuristic": []}, {"nl": "display @param array 's content to console", "Heuristic": ["H1"]}, {"nl": "Gets the value of the statusCode property.", "Heuristic": []}, {"nl": "Sets up a new  {@link BlockContainerIdGenerator} before a test runs.", "Heuristic": ["H1"]}, {"nl": "Get String representation of a key", "Heuristic": []}, {"nl": "Returns the action function of this online search problem.", "Heuristic": []}, {"nl": "Gets the name of this variable within the Javascript runtime", "Heuristic": ["H1"]}, {"nl": "Setea si el usuario esta bloqueado o no.", "Heuristic": ["H1"]}, {"nl": "To be called after the page has been saved to the internal storage (but NOT: anywhere else like backups)", "Heuristic": []}, {"nl": "How many blocks pass between difficulty adjustment periods. Bitcoin standardises this to be 2015.", "Heuristic": ["H1"]}, {"nl": "Convert the String input into an array of bytes using the ISO-8859-1 encoding and add these bytes to the current digest calculation.", "Heuristic": []}, {"nl": "Assert that this node is not a Soap fault body.", "Heuristic": []}, {"nl": "Returns this node's parent node, from which this node was generated.", "Heuristic": []}, {"nl": "Is the service caching tokens, or is it hitting the introspection end point every time", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "remove a recipient from the required recipients list", "Heuristic": ["H1"]}, {"nl": "This method will provide the list of fetcher work areas that need to moved to final destination.", "Heuristic": []}, {"nl": "Tests the  {@link WebUtils#convertMsToClockTime(long)} method.", "Heuristic": ["H1"]}, {"nl": "Populates a map by reading an input stream, as part of deserialization. See  {@link #writeMap} for the data format. The size is determined by aprior call to  {@link #readCount}.", "Heuristic": ["H1"]}, {"nl": "Renders the XML file at the given URL as an image file at the target location. Width must be provided, height is determined automatically based on content and CSS.", "Heuristic": []}, {"nl": "I could not find any android class that provides checking of an hostnames, thus I am using regex", "Heuristic": ["H1"]}, {"nl": "Returns the namespace URI for a given prefix", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Sets the config id.", "Heuristic": ["H1"]}, {"nl": "Where to find the schema.", "Heuristic": []}, {"nl": "Shuts down this worker. It can be re-started afterwards by another call to  {@link #run run()}.", "Heuristic": ["H1"]}, {"nl": "Setter for the profile that is currently logged in to the application. If the access token is invalidated, the current profile will not be updated. It's only updated when there is an explicit logout, login or when permissions change via the {@link com.facebook.login.LoginManager}.", "Heuristic": ["H1"]}, {"nl": "get array length.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Creates a language with title equal to the name.", "Heuristic": []}, {"nl": "Helper for success callbacks that just returns the Status.OK by default", "Heuristic": ["H1"]}, {"nl": "Disposes of any system resources or security-sensitive information the SaslServer might be using.", "Heuristic": ["H1"]}, {"nl": "Set a new (default) TTL value in seconds", "Heuristic": []}, {"nl": "get succeeded.", "Heuristic": ["H1", "H2"]}, {"nl": "Sets the description of the group that will be created.", "Heuristic": []}, {"nl": "Closes a connection from this pool.", "Heuristic": []}, {"nl": "Creates a callable which returns a new bootstrap upon called. This is needed because Bootstrap#clone doesn't do deep handler deep copy.", "Heuristic": []}, {"nl": "Add the given node and its subnodes to the set of nodes. If clazz is not null, only nodes of the given class are put in the set of nodes.", "Heuristic": ["H1"]}, {"nl": "Return true if the premise of this horn clause contains the specified symbol.", "Heuristic": []}, {"nl": "Releases the write lock for this inode.", "Heuristic": ["H1"]}, {"nl": "Gets the data unit id.", "Heuristic": ["H1"]}, {"nl": "Does this NodeTest pass using the specified NodeTester instance?", "Heuristic": []}, {"nl": "Provide number of REJECT decisions for Silent or Intron Mutations.", "Heuristic": []}, {"nl": "Moves back to the parent.", "Heuristic": []}, {"nl": "Returns the name of the new view.", "Heuristic": []}, {"nl": "Empty the list", "Heuristic": []}, {"nl": "Returns the next value of the current log record,  assuming it is an integer.", "Heuristic": ["H1"]}, {"nl": "Inicia o servidor nas portas TCP e UDP especificadas", "Heuristic": ["H1"]}, {"nl": "Can be called in before_ or leave_ to cancel the  current transition before it happens. It takes an optional error, which will overwrite the event's error if it had already been set.", "Heuristic": ["H1"]}, {"nl": "Returns the list of repeat times (r= fields)  specified in the SessionDescription.", "Heuristic": ["H1"]}, {"nl": "Looks up a search term and returns a set of TermCounters.", "Heuristic": []}, {"nl": "Determines if this term is of the form \"F=c\" where F is the specified field and c is some constant. If so, the method returns that constant. If not, the method returns null.", "Heuristic": []}, {"nl": "Marks a block to move out of this dir view, which is used by the evictor.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the given member as a list of JWS Algorithms, null if it doesn't exist", "Heuristic": []}, {"nl": "Set the triple", "Heuristic": []}, {"nl": "Get the Date that this Token was Created", "Heuristic": []}, {"nl": "Guaranteed to throw an exception and leave the  {@code RangeMap} unmodified.", "Heuristic": ["H1"]}, {"nl": "Create Fast Forward-MERGE query.", "Heuristic": []}, {"nl": "List of Ids for taggable people to tag with this content.  See documentation for  Taggable Friends.", "Heuristic": ["H1"]}, {"nl": "Adds an unnamed value to the formatted output. It is strongly encouraged to use  {@link #add(String,char)} instead and give value areadable name.", "Heuristic": ["H1"]}, {"nl": "validate if binary tree is binary search tree", "Heuristic": ["H1"]}, {"nl": "Converts a thrift type to a wire type.", "Heuristic": []}, {"nl": "Checks if werbserver is running", "Heuristic": ["H1"]}, {"nl": "Get the maximum group length.", "Heuristic": []}, {"nl": "Updates the pull status of a particular repository in this federation registration.", "Heuristic": []}, {"nl": "Add a field with the specified value without any validation. Only appropriate for headers from the remote peer.", "Heuristic": []}, {"nl": "Roundtrip a transaction so that it appears as if it has just come from the wire", "Heuristic": []}, {"nl": "Flushes and closes the specified stream.", "Heuristic": []}, {"nl": "Returns the XhtmlForm associated with an Element in cache, or null if not found.", "Heuristic": ["H1"]}, {"nl": "This method is called from all service consumers of this bundle, whenever messageSendingModules need to be fired. This method will check whether the registered message sending modules can handle the event type and if can, it will invoke sendMessage", "Heuristic": ["H1"]}, {"nl": "Returns an  {@link Escaper} that does no escaping, passing all character data through unchanged.", "Heuristic": ["H1"]}, {"nl": "Return the first item from a collection using the most efficient method possible.", "Heuristic": []}, {"nl": "Returns an immutable snapshot of the current statistics.", "Heuristic": []}, {"nl": "Find a single value of one of the given types in the given Collection: searching the Collection for a value of the first type, then searching for a value of the second type, etc.", "Heuristic": []}, {"nl": "Open a writer to the output file.", "Heuristic": []}, {"nl": "Tests that building an  {@link InStreamOptions} with the defaults works.", "Heuristic": ["H1"]}, {"nl": "loads libraries (if not loaded yet), throws on failure", "Heuristic": ["H1"]}, {"nl": "For testing.", "Heuristic": ["H2"]}, {"nl": "Move to the next record satisfying the predicate. The method repeatedly calls next on the underlying scan until a suitable record is found, or the underlying scan contains no more records.", "Heuristic": []}, {"nl": "Check to see if the given auth object has ROLE_ADMIN assigned to it or not", "Heuristic": []}, {"nl": "Argument will be declared valid.", "Heuristic": []}, {"nl": "Returns the distance between lonMin and lonMax at latitude (latMax-latMin)/2 in Kilometers.", "Heuristic": ["H1"]}, {"nl": "Returns the size of the entry for  {@code key} and {@code value} inuser-defined units.  The default implementation returns 1 so that size is the number of entries and max size is the maximum number of entries.  An entry's size must not change while it is in the cache.", "Heuristic": ["H1"]}, {"nl": "Gets an array of double values out of the object.", "Heuristic": []}, {"nl": "Apply all applicable rules to the compilation units. Applicable means the language of the rules must match the language of the source (@see applies).", "Heuristic": []}, {"nl": "Returns the schema of the table's records", "Heuristic": []}, {"nl": "Add plugin to available list Can be used for plugin development (no need to generate jar)", "Heuristic": []}, {"nl": "Get value HTML formatted based on errorLevel", "Heuristic": []}, {"nl": "Returns the value of the specified field. The value is obtained from whichever scan contains the field.", "Heuristic": []}, {"nl": "This method is used to get the string value.", "Heuristic": []}, {"nl": "Returns the network parameters for the given string ID or NULL if not recognized.", "Heuristic": []}, {"nl": "The  {@code NodeOps} object we dispatch to, by default, the nodeitself, but possibly another delegate.", "Heuristic": ["H1"]}, {"nl": "A convenience method to check for schema validation config in the message context, and then in the service model. Does not modify the Message context (other than what is done in the getContextualProperty itself)", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns a comparator that compares two  {@code byte} arrays lexicographically. That is, it compares, using  {@link #compare(byte,byte)}), the first pair of values that follow any common prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For example,  {@code [] The returned comparator is inconsistent with  {@link Object#equals(Object)} (since arrayssupport only identity equality), but it is consistent with {@link java.util.Arrays#equals(byte[],byte[])}.", "Heuristic": ["H1"]}, {"nl": "Gets the start date.", "Heuristic": []}, {"nl": "Return what the digest for the current running hash would be IF we added data, but don't really add the data to the digest calculation.", "Heuristic": []}, {"nl": "put int preferences", "Heuristic": ["H1"]}, {"nl": "Creates a new Node (of the same type as the original node) that is similar to the orginal but doesn't contain any empty text or CDATA nodes and where all textual content including attribute values or comments are trimmed and normalized. \"normalized\" in this context means all whitespace characters are replaced by space characters and consecutive whitespace characaters are collapsed.", "Heuristic": ["H1"]}, {"nl": "Return a set of AegisType dependencies. Returns null if this type has no dependencies.", "Heuristic": []}, {"nl": "in-order traversal for binary search tree", "Heuristic": ["H1"]}, {"nl": "Updates the last updated time of the worker in ms.", "Heuristic": []}, {"nl": "Set the size of this edge effect in pixels.", "Heuristic": []}, {"nl": "This static method is the only wa to construct a new Tag", "Heuristic": ["H1"]}, {"nl": "Format a  {@link Date} according to the HTTP/1.1 RFC.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "This method opens a sort plan for the specified plan. The sort plan ensures that the underlying records will be appropriately grouped.", "Heuristic": []}, {"nl": "Application entry point.", "Heuristic": []}, {"nl": "Add a parameter for the transformation", "Heuristic": []}, {"nl": "Timeout for a single round trip of SASL token exchange, in milliseconds.", "Heuristic": ["H1"]}, {"nl": "The line where the problem occured or  {@link #UNKNOWN UNKNOWN}.", "Heuristic": ["H1"]}, {"nl": "Is there more data to be read?", "Heuristic": []}, {"nl": "Parse a string into a  {@code Stmt} AST node,applying substitutions.", "Heuristic": ["H1"]}, {"nl": "Gets the total number of pooled connections.  This is the total number of connections that have been created and are still in use by this connection manager.  This value will not exceed the maximum number of connections in total.", "Heuristic": []}, {"nl": "Get the triple", "Heuristic": []}, {"nl": "Basically just a wrapper for lazy people - identical to calling requestPTY(\"dumb\", 0, 0, 0, 0, null).", "Heuristic": []}, {"nl": "Removes the channel with the given id from this set of stored states and notifies the wallet of an update to this wallet extension. Note that the channel will still have its contract and refund transactions broadcast via the connected {@link TransactionBroadcaster} as long as this {@link StoredPaymentChannelClientStates} continues toexist in memory.", "Heuristic": ["H1"]}, {"nl": "Returns cover type (\"url\", \"file\", \"tag\" or \"mb\")", "Heuristic": ["H1"]}, {"nl": "Gets the value of the value property.", "Heuristic": []}, {"nl": "Send a WARN log message.", "Heuristic": []}, {"nl": "Internal use, DTO is not needed. Get all the dishes.", "Heuristic": ["H1"]}, {"nl": "Returns the end of the peak", "Heuristic": []}, {"nl": "searches the subscription database for a subscription by the given UUID", "Heuristic": ["H1"]}, {"nl": "Gets the changed refs in the push.", "Heuristic": []}, {"nl": "Gets the opacity from a color. Inspired by Android ColorDrawable.", "Heuristic": ["H1"]}, {"nl": "Returns the estimated number of records having a search key.  This value is the same as doing a select query; that is, it is the number of records in the table divided by the number of distinct values of the indexed field.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Tests the  {@link DataFileChannel#getNettyOutput()} method.", "Heuristic": ["H1"]}, {"nl": "Set the TokenProviderParameters.", "Heuristic": []}, {"nl": "Checks if the message is ready. If not ready, it will throw a runtime exception.", "Heuristic": []}, {"nl": "Gets the value of the given member as a string, null if it doesn't exist", "Heuristic": []}, {"nl": "Sets the tenant domain of the user", "Heuristic": []}, {"nl": "Create an instance of  {@link MapType }", "Heuristic": ["H1"]}, {"nl": "Closes the connection, notifying the server it should settle the channel by broadcasting the most recent payment transaction.", "Heuristic": []}, {"nl": "Adds the given values to the dataset.", "Heuristic": []}, {"nl": "This tests everything that the test for the static file above tests, but it also does the full download.", "Heuristic": []}, {"nl": "Has the validation been successful? A successful validation results in no validation problems of type ERROR.", "Heuristic": []}, {"nl": "Accessor for the JSON string.", "Heuristic": ["H1"]}, {"nl": "Sets the assets to load next. It must precede any call to loadAssets().", "Heuristic": []}, {"nl": "Create an instance of  {@link Summary }", "Heuristic": ["H1"]}, {"nl": "Scroll the spinnerwheel", "Heuristic": ["H1"]}, {"nl": "Traverses the history backward by one position, returns and item at that position.", "Heuristic": []}, {"nl": "Accessor for the Action property.", "Heuristic": ["H1"]}, {"nl": "Creates an instance of  {@link DefaultNHttpClientConnection} based on thegiven SSL  {@link IOSession}.  This method can be overridden in a super class in order to provide a different implementation of the  {@link NHttpClientIOTarget} interface.", "Heuristic": ["H1"]}, {"nl": "Specifies that the current interceptor needs to be added to the  interceptor chain after the specified interceptor.", "Heuristic": ["H1"]}, {"nl": "Set the character encoding of source files.", "Heuristic": []}, {"nl": "Print a usage message.", "Heuristic": []}, {"nl": "Validate the incoming request for mandatory parameters.", "Heuristic": []}, {"nl": "Generates a number in [0, 2^numBits) with an exponential distribution. The floor of the log2 of the absolute value of the result is chosen uniformly at random in [0, numBits), and then the result is chosen from those possibilities uniformly at random. Zero is treated as having log2 == 0.", "Heuristic": ["H1"]}, {"nl": "Consider using putItemByTag instead (or OwnedItem) for idempotency", "Heuristic": ["H1"]}, {"nl": "Return the supported dialect of this class", "Heuristic": []}, {"nl": "Returns the value of the xml:base attribute, if any. This can be used to calculate an absolute URI provided  the links in the actual XML instance are relative.", "Heuristic": ["H1"]}, {"nl": "Sets the speed.", "Heuristic": []}, {"nl": "Gets the datum, i.e. the coordinate system used to define geographic position. Default is  {@link Datum#WGS84}, unless datum is specified in the constructor. Notice also that datum cannot be set afterwards.", "Heuristic": ["H1"]}, {"nl": "Checks if the org.xeustechnologies.jtar entry is a directory", "Heuristic": ["H1"]}, {"nl": "Whether the requested scope is invalid.", "Heuristic": []}, {"nl": "Remove listener object.", "Heuristic": []}, {"nl": "Sets the data buffer for this datagram packet. The length of the datagram packet is set to the buffer length.", "Heuristic": ["H1"]}, {"nl": "This function is only needed due to a GUI Bug in WS-Attacker which does not allow to put an AbstractOption at a specific position. With this function, you can pop AbstractOptions up to one specific one, than add the needed Options, and afterwards re-add the popped one putOptions.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Prints out the stderr of the process to stdout.", "Heuristic": []}, {"nl": "Shuts down the entry. If  {@link #open(HttpRoute,HttpContext,HttpParams)} is in progress,this will cause that open to possibly throw an  {@link IOException}.", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link SignCertificateRequest }", "Heuristic": ["H1"]}, {"nl": "This method is a callback from JobsGroup, used to notice JobsQueue that a group has finished to run all its actions. Once the callback is received, we call-back the ActionController giving it the actions' results.", "Heuristic": ["H1"]}, {"nl": "put string preferences", "Heuristic": ["H1"]}, {"nl": "Initialize the Model subsystem with the default ModelImplementation.", "Heuristic": []}, {"nl": "Gets the GeneticProfile with the Specified GeneticProfile ID.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Sets the maximum number of connections allowed.", "Heuristic": []}, {"nl": "Compare two values preventing NPEs", "Heuristic": []}, {"nl": "Sets the fetcher entity manager.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Method to add an element to this utility list and update the sums at the same time.", "Heuristic": []}, {"nl": "Retrieves an integer field from the stream.", "Heuristic": []}, {"nl": "Sets the value of the lang property.", "Heuristic": ["H1"]}, {"nl": "Sets the maximum number of cache entries the cache will retain.", "Heuristic": []}, {"nl": "Creates an empty directory and its intermediate directories if necessary.", "Heuristic": []}, {"nl": "Whether this service can retrieve the current window's content.  Statically set from  {@link AccessibilityService#SERVICE_META_DATA meta-data}. ", "Heuristic": ["H1"]}, {"nl": "Converts the given pushdata OpCode into a string (eg \"PUSHDATA2\", or \"PUSHDATA(23)\")", "Heuristic": ["H1"]}, {"nl": "Set the Sounds to be played when a Pull Event happens. You specify which sound plays for which events by calling this method multiple times for each event.  If you've already set a sound for a certain event, and add another sound for that event, only the new sound will be played.", "Heuristic": []}, {"nl": "Shortens the (possibly long) user-defined sample id list by hashing. Also adds the generated (key, text) pair to the database for future reference.", "Heuristic": ["H1"]}, {"nl": "Tests  {@link ByteBufferKeyValuePartitionReader#close} works.", "Heuristic": ["H1"]}, {"nl": "remove a claim from the required claims list", "Heuristic": ["H1"]}, {"nl": "Constructs the lineage store from the journal.", "Heuristic": []}, {"nl": "Evaluates the field by getting its value in the scan.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RTEParser#getWaypointIds()}.", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link Point }", "Heuristic": ["H1"]}, {"nl": "Returns a proxy instance that implements  {@code interfaceType} by dispatching methodinvocations to  {@code handler}. The class loader of  {@code interfaceType} will be used todefine the proxy class. To implement multiple interfaces or specify a class loader, use {@link Proxy#newProxyInstance}.", "Heuristic": ["H1"]}, {"nl": "Obtains a scheme by name.", "Heuristic": []}, {"nl": "Create an instance of  {@link PurchaseOrderType }", "Heuristic": ["H1"]}, {"nl": "Returns the measurement value.", "Heuristic": []}, {"nl": "Return object stored", "Heuristic": []}, {"nl": "Fetches and parses a URL string, returning a list of paragraph elements.", "Heuristic": []}, {"nl": "Ensures that  {@code expression} is {@code true}, throwing a  {@code VerifyException} with nomessage otherwise.", "Heuristic": ["H1"]}, {"nl": "Appends b byte to this buffer. The capacity of the buffer is increased, if necessary, to accommodate the additional byte.", "Heuristic": []}, {"nl": "Retrieves the workstation name of the computer originating the request.", "Heuristic": []}, {"nl": "When a user starts a new cluster, an empty root dir is created and owned by the user.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.HDTParser#setHeading(double)}.", "Heuristic": ["H1"]}, {"nl": " Creates a reflector from the provided vector.  Q = I - &gamma; u uT &gamma; = 2/||u||2   In practice  {@link org.ejml.alg.dense.mult.VectorVectorMult#householder(double,org.ejml.data.D1Matrix64F,org.ejml.data.D1Matrix64F,org.ejml.data.D1Matrix64F)}  multHouseholder}should be used for performance reasons since there is no need to calculate Q explicitly. ", "Heuristic": ["H1"]}, {"nl": "Return the properties from the test properties file.", "Heuristic": []}, {"nl": "Initializes the two maps. The default implementation here creates an empty hash map for each attribute that is null. Derived implementations may choose to instantiate other map implementations, or to populate the maps by default. In the latter case, it is the responsibility of the dervied class to guarantee consistent mappings in both directions.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Inserts a new, blank record somewhere in the file beginning at the current record. If the new record does not fit into an existing block, then a new block is appended to the file.", "Heuristic": []}, {"nl": "Given a tree rooted at  {@code n}, the visitor has the option of overriding all traversal of the children of  {@code n}. If no changes were made to  {@code n} and the visitor wishes to preventfurther traversal of the tree, then it should return  {@code n}. If changes were made to the subtree, then the visitor should return a copy of  {@code n} with appropriate changes.  Finally, if thevisitor does not wish to override traversal of the subtree rooted at {@code n}, then it should return  {@code null}.  This method is typically called by the method {@link #override(Node,Node) override(parent, n)}. If a subclass overrides the method  {@link #override(Node,Node) override(parent, n)} then this methodmay not be called.", "Heuristic": ["H1"]}, {"nl": "decrement the number of manually changed difference resolution states.", "Heuristic": ["H1"]}, {"nl": "Returns the contents of the InputStream as a byte array.", "Heuristic": []}, {"nl": "Get the object.", "Heuristic": []}, {"nl": "The certificate.", "Heuristic": ["H2"]}, {"nl": "Copies all associations from the specified range map into this builder.", "Heuristic": []}, {"nl": "Set the WSS4J Validator instance to use to validate the token.", "Heuristic": []}, {"nl": "Gets the client state token", "Heuristic": []}, {"nl": "Gets the failed attribute name.", "Heuristic": []}, {"nl": "For compatibility with old spring based code", "Heuristic": []}, {"nl": "Destroy the StoreService", "Heuristic": []}, {"nl": "Sets the value of the street property.", "Heuristic": []}, {"nl": "Returns the data buffer of the payload.", "Heuristic": []}, {"nl": "Closes the index by closing the current table scan.", "Heuristic": []}, {"nl": "Read bytes from the network.", "Heuristic": []}, {"nl": "{@inheritdoc}", "Heuristic": ["H2"]}, {"nl": "Used to cache a block into Alluxio space, worker will move the temporary block file from session folder to data folder, and update the space usage information related. then update the block information to master.", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link UserValidation }", "Heuristic": ["H1"]}, {"nl": "Turn left.", "Heuristic": ["H2"]}, {"nl": "Sets the requested scope which needs to be retained in a hidden form field", "Heuristic": []}, {"nl": "Return true if this TokenValidator implementation is capable of validating the ReceivedToken argument. The realm is ignored in this token Validator.", "Heuristic": []}, {"nl": "Gets the value of the arg0 property.", "Heuristic": []}, {"nl": "Int to little-endian bytes: writes x to given stream.", "Heuristic": []}, {"nl": "Connects this socket to the specified remote service.", "Heuristic": []}, {"nl": "Returns the suffix for which a FileFilter filters.", "Heuristic": []}, {"nl": "Get this node's margin, as defined by style + default margin.", "Heuristic": []}, {"nl": "Frees the object.  If the free list is full, the object will be garbage collected.", "Heuristic": []}, {"nl": "Sets the value of the source property.", "Heuristic": []}, {"nl": "Start the worker thread.", "Heuristic": []}, {"nl": "Sets output mode. The buffer can now be read from.", "Heuristic": []}, {"nl": "Defines equality", "Heuristic": ["H2"]}, {"nl": "Maximum number of characters on each line of output", "Heuristic": []}, {"nl": "Test of closePort method, of class ComPortController.", "Heuristic": []}, {"nl": "Returns a list of all purchases.", "Heuristic": []}, {"nl": "Start default sh shell without custom environment and base directory", "Heuristic": []}, {"nl": "Register the given directory, and all its sub-directories, with the WatchService.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Map a principal in the source realm to the target realm", "Heuristic": []}, {"nl": "Clone object instance", "Heuristic": []}, {"nl": "Gets the Global Connection Manager.", "Heuristic": []}, {"nl": "Set the URIResolver for the transformation", "Heuristic": []}, {"nl": "Get the association map", "Heuristic": []}, {"nl": "Get the triple resolution state.", "Heuristic": []}, {"nl": "Determines if there is a term of the form \"F=c\" where F is the specified field and c is some constant. If so, the method returns that constant. If not, the method returns null.", "Heuristic": []}, {"nl": "Stores the given throwable and rethrows it. It will be rethrown as is if it is an {@code IOException},  {@code RuntimeException},  {@code Error} or a checked exception of eitherof the given types. Otherwise, it will be rethrown wrapped in a  {@code RuntimeException}. Note: Be sure to declare all of the checked exception types your try block can throw when calling an overload of this method so as to avoid losing the original exception type. This method always throws, and as such should be called as {@code throw closer.rethrow(e, ...);} to ensure the compiler knows that it will throw.", "Heuristic": ["H1"]}, {"nl": "Return a SLA store instance with a fresh transaction.  The LSA store has to be committed and then closed to commit changes, if only close it rolls back.", "Heuristic": ["H1"]}, {"nl": "Creates an instance of  {@link SSLIOSession} decorating the given{@link IOSession}.  This method can be overridden in a super class in order to provide a different implementation of SSL I/O session.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link RPCBlockReadRequest#RPCBlockReadRequest(long,long,long,long,long)}constructor with a valid length.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Appends the contents of a bytebuffer to the end of the specified file.", "Heuristic": ["H1"]}, {"nl": "Moves from the current node to the given child node.", "Heuristic": []}, {"nl": "query if a pseudoclass must apply for this selector", "Heuristic": ["H1"]}, {"nl": "Description:", "Heuristic": ["H2"]}, {"nl": "Returns true if this interval is upper exclusive.", "Heuristic": []}, {"nl": "Whether this is an error or a warning.", "Heuristic": []}, {"nl": "Create AUTO-REBASE-MERGE query.", "Heuristic": []}, {"nl": "Returns a testnet params modified to allow any difficulty target.", "Heuristic": ["H1"]}, {"nl": "Get the full list of transactions if it is stored, otherwise null. Only one of this and getTxOutChanges() will return a non-null value.", "Heuristic": ["H1"]}, {"nl": "Writes an integer to the specified offset of the buffer's page. This method assumes that the transaction has already written an appropriate log record. The buffer saves the id of the transaction and the LSN of the log record. A negative lsn value indicates that a log record was not necessary.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Waits for given  {@link Future} to be set (push) and returns {@code T}, otherwise times out with  {@link TimeoutException}.", "Heuristic": ["H1"]}, {"nl": "Gets the run status.", "Heuristic": []}, {"nl": "Remove listener.", "Heuristic": ["H2"]}, {"nl": "gets the outer bound of the tweets returned to the user so far", "Heuristic": ["H1"]}, {"nl": "pre:  la Pieza pieza fue destruida y retirada de la Partida.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the project property.", "Heuristic": []}, {"nl": "Description:", "Heuristic": ["H2"]}, {"nl": "Returns a list of strings from the currentValue using the specified string separator.", "Heuristic": []}, {"nl": "Returns whether this location belongs to the specific location. Location A belongs to B when tier and dir of A are all in the range of B respectively.", "Heuristic": ["H1"]}, {"nl": "Retrieve the string data.", "Heuristic": []}, {"nl": "Remove features no longer in the source from the current classifier in the model.", "Heuristic": []}, {"nl": "re-submits an entry from the sender loss list", "Heuristic": ["H1"]}, {"nl": "Gets the value of the decimals property.  This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a set method for the decimals property.  For example, to add a new item, do as follows:  getDecimals().add(newItem);   Objects of the following type(s) are allowed in the list {@link BigDecimal }", "Heuristic": ["H1"]}, {"nl": "Info log message.", "Heuristic": []}, {"nl": "Get available user store implementations", "Heuristic": []}, {"nl": "Print this sequence database to System.out.", "Heuristic": []}, {"nl": "Tests  {@link ByteIOUtils#writeByte} and {@link ByteIOUtils#readByte}.", "Heuristic": ["H1"]}, {"nl": "Returns whether or not we're running on EC2.", "Heuristic": ["H1"]}, {"nl": "Gets the numeric value of the exit status.", "Heuristic": []}, {"nl": "Gets Log of All Messages.", "Heuristic": []}, {"nl": "Must be called after classification of entities has been changed.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Toggle user store state (enable/disable)", "Heuristic": []}, {"nl": "Init serial port and reader.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Adds a field to the schema having a specified name, type, and length. If the field type is \"integer\", then the length value is irrelevant.", "Heuristic": []}, {"nl": "Returns the adapter position of the last fully visible view. This position does not include adapter changes that were dispatched after the last layout pass.", "Heuristic": []}, {"nl": "Gets the object Id for the LikeView.", "Heuristic": ["H1"]}, {"nl": "delete a contact", "Heuristic": ["H1"]}, {"nl": "For a given  {@link HttpHost} and {@link HttpRequest} if the request has aVARY header - I need to get an additional URI from the pair of host and request so that I can also store the variant into my HttpCache.", "Heuristic": ["H1"]}, {"nl": "Writes out the domains component of the RIFL document", "Heuristic": ["H1"]}, {"nl": "Called by InvokeLater on user interface thread.  Dispatches event to all contained objects implementing UMLUserInterfaceComponent.  If event == TARGET_CHANGED_ADD, adds change listener to new target on completion of dispatch.", "Heuristic": []}, {"nl": "Get the alternate addresses for this invocation.", "Heuristic": []}, {"nl": "Takes the specified object and converts the argument to a String.", "Heuristic": []}, {"nl": "Get the cost to move through a given location", "Heuristic": []}, {"nl": "Computes the determinant from the LU decomposition.", "Heuristic": []}, {"nl": "Sets the value of the elem1 property.", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.parser.HDTParser#isTrue()}.", "Heuristic": ["H1"]}, {"nl": "append lines.", "Heuristic": ["H1", "H2"]}, {"nl": "Moves to the next record in the current block of the chunk. If there are no more records, then make the next block be current. If there are no more blocks in the chunk, return false.", "Heuristic": []}, {"nl": "URL-decode the specified string.", "Heuristic": []}, {"nl": "Returns the state in the state space to which the node corresponds.", "Heuristic": []}, {"nl": " Append a hashCode for a float. ", "Heuristic": []}, {"nl": "Returns cover name", "Heuristic": []}, {"nl": "Sets the value of the nr property.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the given member as a boolean, null if it doesn't exist", "Heuristic": []}, {"nl": "Set a  {@link ScreenshotStrategy} to be used by default for subsequent {@link #screenshot(String)}invocations", "Heuristic": ["H1"]}, {"nl": "Get the sequence count in this database.", "Heuristic": []}, {"nl": "calculates the P-value for this specific state", "Heuristic": ["H1"]}, {"nl": "Returns the names of all search modes, which are supported by this factory. The indices correspond to the parameter values of method {@link #createSearch(int,int,HeuristicFunction)}.", "Heuristic": ["H1"]}, {"nl": "Returns true if the message has a payload. The encoder will send the payload with a more efficient method.", "Heuristic": []}, {"nl": "Returns the LayoutContext to be used by renderer. Is instantiated along with the class, so can be accessed before  {@link #render()} is called to tune the rendering process.", "Heuristic": ["H1"]}, {"nl": "Returns the minor HTTP version that should be used for future requests on this connection. Either 0 for HTTP/1.0, or 1 for HTTP/1.1. The default value is 1 for new connections.", "Heuristic": []}, {"nl": "Set the encryption key-wrap algorithm to use", "Heuristic": []}, {"nl": "Details of the control target.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Convenience method to return the block store location representing any dir in any tier.", "Heuristic": ["H1"]}, {"nl": "Creates a product scan for this query.", "Heuristic": []}, {"nl": "Build the String[] arguments needed for an SQL selection, i.e.: {a, b, c} to be used in the SQL select statement: WHERE key in (?, ?, ?)", "Heuristic": []}, {"nl": "Returns a set of the keys contained in this object.", "Heuristic": []}, {"nl": "Info log message.", "Heuristic": []}, {"nl": "Called for entries that have been evicted or removed. This method is invoked when a value is evicted to make space, removed by a call to {@link #remove}, or replaced by a call to  {@link #put}. The default implementation does nothing.  The method is called without synchronization: other threads may access the cache while this method is executing.", "Heuristic": ["H1"]}, {"nl": "Inserts a new record into the table scan for the bucket.", "Heuristic": []}, {"nl": "Returns the integer value of the specified field.", "Heuristic": []}, {"nl": "Sets the id of the block's locker.", "Heuristic": ["H1"]}, {"nl": "Wait until Cluster is in the status specified.", "Heuristic": []}, {"nl": "Create a NotationName with or without a version. The NotationName is only created if there is no such notation before.", "Heuristic": []}, {"nl": "Guesses the length of a formatted protocol version. Needed to guess the length of a formatted request or status line.", "Heuristic": []}, {"nl": "Declares the argument value to be invalid. Gui will be redrawn but with a warning drawn in red above the entry widget.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the time property.", "Heuristic": []}, {"nl": "Save a siteUrl.", "Heuristic": ["H1"]}, {"nl": "Hook for creating the connection pool.", "Heuristic": []}, {"nl": "Returns the number of index records in this page.", "Heuristic": []}, {"nl": "If the transpose was computed instead do some additional computations", "Heuristic": []}, {"nl": "Adds a stylesheet to the factory cache. Will overwrite older entry for same key.", "Heuristic": []}, {"nl": "read a line from the given input stream", "Heuristic": ["H1"]}, {"nl": "Can undo be performed?", "Heuristic": []}, {"nl": "Return the count of mutations at this location.", "Heuristic": []}, {"nl": "Returns the q-value of the wide peak", "Heuristic": []}, {"nl": "Assumes the handler is buffering events, and removes the last event from this buffer.", "Heuristic": []}, {"nl": "The raw UBV matrix that is stored internally.", "Heuristic": []}, {"nl": "Returns a hash code for this the enumeration value.", "Heuristic": []}, {"nl": "Get the Digest algorithm to use for Signature", "Heuristic": []}, {"nl": "When initializing HybridLDAPTenantManager, the existing partitions for tenants are initialized. This method adds existing partition to each tenant.", "Heuristic": []}, {"nl": "Inits the.", "Heuristic": ["H1", "H2"]}, {"nl": "Sets the value of the name property.", "Heuristic": []}, {"nl": "Gets the feed id.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets the run status.", "Heuristic": []}, {"nl": "Gets the serializer factory.", "Heuristic": ["H1"]}, {"nl": "Sets the interval to upper exclusive or upper inclusive.", "Heuristic": []}, {"nl": "Flushes the samples from the datastore.", "Heuristic": ["H1"]}, {"nl": "Implodes a List with \", \" to get a String representation. The toFullString() Method is called on each XPathPart.", "Heuristic": ["H1"]}, {"nl": "Name of the JS bundle file to be loaded from application's raw assets. Example:  {@code \"index.android.js\"}", "Heuristic": ["H1"]}, {"nl": "create new instance", "Heuristic": ["H1"]}, {"nl": "This loader is used when proxy debugging is enabled. In that case there is no point in fetching the bundle from device as remote executor will have to do it anyway.", "Heuristic": []}, {"nl": "Write a HashMap to a Parcel, class of key is String, class of Value can parcelable", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Get the native menu instance we are wrapping.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.VHWParser#setSpeedKnots()}.", "Heuristic": ["H1"]}, {"nl": "Instructs the  {@link InternerBuilder} to build a strong interner.", "Heuristic": ["H1"]}, {"nl": "Removes everything in the current inventory.", "Heuristic": []}, {"nl": "Get message (", "Heuristic": []}, {"nl": "Set the workflow job console URL.", "Heuristic": []}, {"nl": "Set the value produced by worker thread", "Heuristic": []}, {"nl": "Returns the given Charset or the default Charset if the given Charset is null.", "Heuristic": ["H1"]}, {"nl": "Get the default lifetime to be used if heuristic freshness calculation is not possible.", "Heuristic": []}, {"nl": "Test method for  {@link NotificationController#handleEvent(org.osgi.service.event.Event)}Verifies that  {@code IllegalArgumentException} is thrown when {@code Event}'s {@link Notification#NOTIFICATION_KEY_MESSAGE} property is empty.", "Heuristic": ["H1"]}, {"nl": "For caches that do not override  {@link #sizeOf}, this returns the number of entries in the cache. For all other caches, this returns the sum of the sizes of the entries in this cache.", "Heuristic": ["H1"]}, {"nl": "Returns the number of times  {@link #get} returned a value.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "add an audience to the required audiences list", "Heuristic": ["H1"]}, {"nl": "Returns the real path of the given URI. If the given URI is a content:// URI, the real path is retrieved from the media store.", "Heuristic": []}, {"nl": "Returns the definition of the new view.", "Heuristic": []}, {"nl": "Return the public interface for workflow application service.", "Heuristic": []}, {"nl": "Gets the client.", "Heuristic": []}, {"nl": "Extract the metadata only from the input stream. Depending on media type validation, the detector could be run against input stream in order to ensure that parser supports this type of content.", "Heuristic": []}, {"nl": "Creates a SchemaAnalyzerImpl with NO Schemas contained. This is NOT THE SAME as creating a NullSchemaAnalyzer. However, this is equal to getInstance(EMPTY)", "Heuristic": ["H1"]}, {"nl": "Closes server socket.", "Heuristic": []}, {"nl": "Called when a child of the host View has requested sending an {@link AccessibilityEvent} and gives an opportunity to the parent (the host)to augment the event.  The default implementation behaves as {@link ViewGroupCompat#onRequestSendAccessibilityEvent(ViewGroup,View,AccessibilityEvent) ViewGroupCompat#onRequestSendAccessibilityEvent(ViewGroup, View, AccessibilityEvent)} forthe case of no accessibility delegate been set. ", "Heuristic": ["H1"]}, {"nl": "Called after a cache miss to compute a value for the corresponding key. Returns the computed value or null if no value can be computed. The default implementation returns null.  The method is called without synchronization: other threads may access the cache while this method is executing.  If a value for  {@code key} exists in the cache when this method returns,the created value will be released with  {@link #entryRemoved} anddiscarded. This can occur when multiple threads request the same key at the same time (causing multiple values to be created), or when one thread calls  {@link #put} while another is creating a value for the same key.", "Heuristic": ["H1"]}, {"nl": "Gets the cached token value from a Bundle.", "Heuristic": []}, {"nl": "Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos.Geo.Country }", "Heuristic": ["H1"]}, {"nl": "Return the java.util.concurrent.ScheduledExecutorService instance used by the SchedulerService. ", "Heuristic": ["H1"]}, {"nl": "Return pivot permutation vector", "Heuristic": []}, {"nl": "Get this node's position bottom, as defined by style.", "Heuristic": []}, {"nl": "Returns the packages. @return The packages.", "Heuristic": []}, {"nl": "Clear back stack of specified fragment manager", "Heuristic": []}, {"nl": "Adds an item to the buffer.", "Heuristic": []}, {"nl": "Sets the connection pool used to recycle HTTP and HTTPS connections. If unset, the  {@link ConnectionPool#getDefault() system-widedefault} connection pool will be used.", "Heuristic": ["H1"]}, {"nl": "Currently unused", "Heuristic": ["H2"]}, {"nl": "Asserts the given condition, throwing an  {@link AssertionException} if the condition doesn'thold.", "Heuristic": ["H1"]}, {"nl": "Get the difference.", "Heuristic": []}, {"nl": "Clears the entire commit cache.", "Heuristic": []}, {"nl": "Returns a new comparator which sorts iterables by comparing corresponding elements pairwise until a nonzero result is found; imposes \"dictionary order.\" If the end of one iterable is reached, but not the other, the shorter iterable is considered to be less than the longer one. For example, a lexicographical natural ordering over integers considers  {@code [] Note that  {@code Collections.reverseOrder(lexicographical(comparator))} is notequivalent to  {@code lexicographical(Collections.reverseOrder(comparator))} (consider how eachwould order  {@code [1]} and {@code [1, 1]}).", "Heuristic": ["H1"]}, {"nl": "Get the underlying figure of this node.", "Heuristic": []}, {"nl": "We would not support this method in DataNettyBuffer because this class is only for reading netty buffers. Throws an  {@link UnsupportedOperationException} whenever called.TODO(qifan): Investigate if using NettyDataBuffer for outgoing message is fine.", "Heuristic": ["H1"]}, {"nl": "Returns the size calculated from a partial rate segment.", "Heuristic": []}, {"nl": "Return a  {@link org.apache.oozie.client.OozieClient} for LocalOozie.  The returned instance is configuredwith the user name of the JVM (the value of the system property 'user.name').  The following methods of the client are NOP in the returned instance:  {@link org.apache.oozie.client.OozieClient#validateWSVersion},  {@link org.apache.oozie.client.OozieClient#setHeader},  {@link org.apache.oozie.client.OozieClient#getHeader},  {@link org.apache.oozie.client.OozieClient#removeHeader},  {@link org.apache.oozie.client.OozieClient#getHeaderNames} and{@link org.apache.oozie.client.OozieClient#setSafeMode}.", "Heuristic": ["H1"]}, {"nl": "Set the list of AuthenticationStatementBeans.", "Heuristic": []}, {"nl": "Provide number of REJECT decisions for IGR Mutations.", "Heuristic": ["H1"]}, {"nl": "Get the level in the inheritance hierarchy for this node.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.GSAParser#getFixStatus()} .", "Heuristic": ["H1"]}, {"nl": "Check that a value is not null. If null throws an IllegalArgumentException.", "Heuristic": []}, {"nl": "Template Name", "Heuristic": ["H2"]}, {"nl": "Pass accumulated character data to the listener.", "Heuristic": []}, {"nl": "Construct a new page with the same paper type but without the content", "Heuristic": []}, {"nl": "Return the table's metadata.", "Heuristic": []}, {"nl": "Sets selected tab indicator color.", "Heuristic": []}, {"nl": "Gets the name of the third-party application this client represents", "Heuristic": []}, {"nl": "return the Message Direction of the SMSMessage That should be either SMS_IN_MESSAGE :1 Or SMS_OUT_MESSAGE : 2", "Heuristic": ["H1"]}, {"nl": "Get the predicate.", "Heuristic": []}, {"nl": "Return the concatenation of 2 strings.  A string with null value is considered as an empty string.", "Heuristic": []}, {"nl": "See if a zero matrix is gracefully handled", "Heuristic": []}, {"nl": "Remove (set subtract) a complete set.", "Heuristic": []}, {"nl": "Mark (Store) the current time.", "Heuristic": []}, {"nl": "Tests to ensure  {@link HttpURLConnection#getErrorStream()} is called when 400 is returned.", "Heuristic": ["H1"]}, {"nl": "Returns the population variance of the values. The count must be non-zero. This is guaranteed to return zero if the dataset contains only exactly one finite value. It is not guaranteed to return zero when the dataset consists of the same value multiple times, due to numerical errors. However, it is guaranteed never to return a negative result. Non-finite values If the dataset contains any non-finite values ( {@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or  {@link Double#NaN}) then the result is  {@link Double#NaN}.", "Heuristic": ["H1"]}, {"nl": "Renders the XML file at the given URL as a PDF file at the target location.", "Heuristic": []}, {"nl": "cleanup state after this test class execution", "Heuristic": ["H1"]}, {"nl": "Set the String corresponding to the CallbackHandler class.", "Heuristic": []}, {"nl": "Tests if a resolver is alreadey registered with this registry.", "Heuristic": ["H1"]}, {"nl": "Writes a specific short value (2 bytes) to the output byte buffer at the given offset.", "Heuristic": []}, {"nl": "Returns the opposite of this side.", "Heuristic": []}, {"nl": "Returns the child number without the hardening bit set (i.e. index in that part of the tree).", "Heuristic": []}, {"nl": "Tests if the given request URI matches the given pattern.", "Heuristic": []}, {"nl": "Sets the feed id.", "Heuristic": ["H1"]}, {"nl": "Set the object type.", "Heuristic": []}, {"nl": "Estimates the distinct number of field values in the product. Since the product does not increase or decrease field values, the estimate is the same as in the appropriate underlying query.", "Heuristic": []}, {"nl": "Gets the total elapsed seconds.", "Heuristic": []}, {"nl": "Assert a boolean expression, throwing  {@link IllegalStateException}if the test result is  {@code false}. Call  {@link #isTrue(boolean)} if you wish tothrow  {@link IllegalArgumentException} on an assertion failure.Assert.state(id == null);", "Heuristic": ["H1"]}, {"nl": "Gets the value of the given member as a list of JWS Algorithms, null if it doesn't exist", "Heuristic": []}, {"nl": "Returns the key corresponding to this entry.", "Heuristic": []}, {"nl": "Estimates the length of formatted header elements.", "Heuristic": []}, {"nl": "Verifies if the card is on the map. Lane is an optional attribute which informs whether a specific lane should be searched or all of them. All of the lanes are searched if lane = -1.", "Heuristic": ["H1"]}, {"nl": "set property value.", "Heuristic": ["H1"]}, {"nl": "Prints messages and warnings.", "Heuristic": []}, {"nl": "Build class name for a auxiliary class generated by compiler. If the compiler needs to generate extra classes beyond the main class, it will call this function to build the auxiliary class name. The default implementation simply appends auxMarker to mainClassName but this can be overridden.", "Heuristic": ["H1"]}, {"nl": "Puts a RUDP header into a given byte buffer.", "Heuristic": ["H1"]}, {"nl": "Setter for property 'summary'.", "Heuristic": []}, {"nl": "Hook for creating the connection operator. It is called by the constructor. Derived classes can override this method to change the instantiation of the operator. The default implementation here instantiates {@link DefaultClientConnectionOperator DefaultClientConnectionOperator}.", "Heuristic": []}, {"nl": "Write the given short value (16-bit) in big-endian order to the buffer", "Heuristic": []}, {"nl": "Reads a specific short byte value (2 bytes) from the input byte array at the given offset.", "Heuristic": []}, {"nl": "Returns the block number associated with this RID.", "Heuristic": []}, {"nl": "Create an instance of  {@link Module }", "Heuristic": ["H1"]}, {"nl": "Required.", "Heuristic": ["H2"]}, {"nl": "Not required", "Heuristic": ["H2"]}, {"nl": "Get the sum of iutil and rutil for that itemset and a given time period", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Remove the signature", "Heuristic": []}, {"nl": "Returns DNS names that when resolved, give IP addresses of active peers.", "Heuristic": []}, {"nl": "Creates an instance of  {@link HeapByteBufferAllocator} to be usedby HTTP connections for allocating  {@link java.nio.ByteBuffer} objects. This method can be overridden in a super class in order to provide a different implementation of the  {@link ByteBufferAllocator} interface.", "Heuristic": ["H1"]}, {"nl": "Perform the merge.", "Heuristic": []}, {"nl": "Add a page to the index.", "Heuristic": []}, {"nl": "Set the CallbackHandler object.", "Heuristic": []}, {"nl": "Returns a supplier that caches the instance supplied by the delegate and removes the cached value after the specified time has passed. Subsequent calls to  {@code get()} return the cachedvalue if the expiration time has not passed. After the expiration time, a new value is retrieved, cached, and returned. See: memoization The returned supplier is thread-safe. The supplier's serialized form does not contain the cached value, which will be recalculated when  {@code get()} is called on the reserialized instance.", "Heuristic": ["H1"]}, {"nl": "Verifies that two violations with different  {@code variableName} are notequal.", "Heuristic": ["H1"]}, {"nl": "Get the offset which shall be used for edges with this node as parent.", "Heuristic": []}, {"nl": "Tests the  {@link StorageTier#getTierAlias()} method.", "Heuristic": ["H1"]}, {"nl": "Adds the specified field to set of excluded fields, if it is not already present.", "Heuristic": []}, {"nl": "Signals us to start notifying a given connection maintainer listener of connection events related to a given registrar.", "Heuristic": []}, {"nl": "Convenience method that returns the result of the transformation as a String.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.VHWParser#setSpeedKilometres()}.", "Heuristic": ["H1"]}, {"nl": "Execute some code after the task did background work.", "Heuristic": []}, {"nl": "Clear the hashmap.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the access property.", "Heuristic": []}, {"nl": "Create an instance of  {@link JAXBElement }{@code }}", "Heuristic": ["H1"]}, {"nl": "Clears all views", "Heuristic": []}, {"nl": "Validate the incoming request for mandatory parameters.", "Heuristic": []}, {"nl": "public String generateStringSpecial(boolean debugSlices) throws Exception { StringBuilder result = new StringBuilder(); // if(debugSlices){ result.append(\"// Method: \" + getMethodName() + \"\\n\"); // } Iterator  keys = slices.keySet().iterator(); Stack  stack = new Stack (); while (keys.hasNext()) { Value keyValue = keys.next(); Value value = slices.get(keyValue).getValue(); String slice = Frimp.toQ(value); SliceAST s = SliceFactory.createSliceASTLean(slice); s.getSize(); result.append(microSliceString(s)); } return result.toString(); } public static void doMicroSlice(SliceAST s, LinkedList  result) { if (!isPhi(s)) { result.add(s); microSliceAux(s, result); } else { splitPhi(s, result); } } protected static void microSliceAux(SliceAST s, LinkedList  res) { SliceAST down = (SliceAST) s.getFirstChild(); boolean hadPhi = false; if (down != null) { if (isPhi(down)) { // 1) remove it s.setFirstChild(down.getNextSibling()); // 2) create new slices out of down splitPhi(down, res); hadPhi = true; } else { microSliceAux(down, res); } } SliceAST right = (SliceAST) s.getNextSibling(); if (right != null) { if (isPhi(right)) { // 1) remove it s.setNextSibling(right.getNextSibling()); // 2) create new slices out of right splitPhi(right, res); hadPhi = true; } else { microSliceAux(right, res); } } if (hadPhi) { microSliceAux(s, res); // need to execute again } } protected static void splitPhi(SliceAST s, LinkedList  res) { SliceAST t = s.getLeftmostChild(); assert isPhi(s); while (t != null) { SliceAST a = t; t = (SliceAST) t.getNextSibling(); a.setNextSibling(null); // we have to create a new slice doMicroSlice(a, res); // creates new slices } } protected static boolean isPhi(SliceAST s) { return s.getText().equals(FuriaConstructDefinitions.FURIA_fphi); } public static String microSliceString(SliceAST s) { LinkedList  result = new LinkedList (); doMicroSlice(s, result); Iterator  it = result.iterator(); StringBuilder res = new StringBuilder(); while (it.hasNext()) { SliceAST t = it.next(); res.append(t.toQ()); res.append(\"\\n\"); } String r = res.toString(); assert !r.contains(\"p\"); return r; }", "Heuristic": ["H1"]}, {"nl": "Sets the file size.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Writes out the content in the multipart/form encoding. This method produces slightly different formatting depending on its compatibility mode.", "Heuristic": []}, {"nl": "Stores the contents of a multiset in an output stream, as part of serialization. It does not support concurrent multisets whose content may change while the method is running. The serialized output consists of the number of distinct elements, the first element, its count, the second element, its count, and so on.", "Heuristic": []}, {"nl": "Start root shell without custom environment and base directory", "Heuristic": []}, {"nl": "Retrieves a ReplacedElement for an image from cache, or null if not found.", "Heuristic": []}, {"nl": "Add a cache entry.", "Heuristic": []}, {"nl": "Gets the ident attribute of the CascadedStyle object", "Heuristic": ["H1"]}, {"nl": "Format UTC dateTime to UTC dateTime in SQL format", "Heuristic": []}, {"nl": "Reads the contents of a disk block into a bytebuffer.", "Heuristic": ["H1"]}, {"nl": "Get the transaction output changes if they have been calculated, otherwise null. Only one of this and getTransactions() will return a non-null value.", "Heuristic": []}, {"nl": "Pass the event to the listener.", "Heuristic": []}, {"nl": "Returns the string representation generated by the delegate's {@code toString} method.", "Heuristic": []}, {"nl": "Pass the event to the listener.", "Heuristic": []}, {"nl": "Session heartbeat to worker to keep its state, for example open ufs streams.", "Heuristic": ["H1"]}, {"nl": "Get the Axis2 configuration context. This is a convenience method that can be used by subclasses to get the  {@link ConfigurationContext} object from the listener.", "Heuristic": ["H1"]}, {"nl": "Checks if the given file exists in the under storage system.", "Heuristic": []}, {"nl": "Reads a matrix in which has been encoded using a Column Space Value (CSV) file format.  For a description of the format see  {@link MatrixIO#loadCSV(String)}.", "Heuristic": ["H1"]}, {"nl": "Track a success - reset back off interval to the initial value", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Executes a runnable with this session set as current session. Inside the runnable, the current session can be accessed with RestxSession.current(). This method takes care of restoring the current session after the call. So if the current session is altered inside the runnable it won't have effect on the caller.", "Heuristic": ["H1"]}, {"nl": "Mark this AsyncResposne as finished (completed) with an exception. The AsyncResponse value (V) is set to null. The supplied Throwable will be used as the Cause of an ExceptionException thrown when any get method is called.", "Heuristic": ["H1"]}, {"nl": "Get time zone offset minutes. Defaults to 0 (UTC).", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets item view", "Heuristic": []}, {"nl": "Sets up a new  {@link MasterWorkerInfo} before a test runs.", "Heuristic": ["H1"]}, {"nl": "Removes a file from the bucket.", "Heuristic": []}, {"nl": "Convenience method to extract the subscribed target URL.", "Heuristic": []}, {"nl": "First byte of a base58 encoded dumped private key. See  {@link com.google.bitcoin.core.DumpedPrivateKey}.", "Heuristic": ["H1"]}, {"nl": "Check whether the value is Integer.", "Heuristic": []}, {"nl": "Save the projectmember as XML to the given writer.", "Heuristic": ["H1"]}, {"nl": "Set the latitude degrees of Position", "Heuristic": []}, {"nl": "Creates a scriptPubKey for the given redeem script.", "Heuristic": []}, {"nl": "Sets the title attribute of the StylesheetInfo object", "Heuristic": []}, {"nl": "A comprehensive isEqual method that handles nulls and arrays safely.", "Heuristic": []}, {"nl": "Set the URI.", "Heuristic": []}, {"nl": "Returns the number of times an entry has been evicted. This count does not include manual {@linkplain Cache#invalidate invalidations}.", "Heuristic": ["H1"]}, {"nl": "Serialize a Node to a String with default String encoding", "Heuristic": []}, {"nl": "Create a color integer value with specified alpha. This may be useful to change alpha value of background color.", "Heuristic": []}, {"nl": "Creates an ArrayType by specifying the data type of elements ( {@code elementType}) and whether the array contains null values ( {@code containsNull}).", "Heuristic": ["H1"]}, {"nl": "Sets value", "Heuristic": ["H2"]}, {"nl": "get top activity", "Heuristic": ["H1"]}, {"nl": "Get a list of all whitelisted sites", "Heuristic": []}, {"nl": "Returns the number of groups.  Assuming equal distribution, this is the product of the distinct values for each grouping field.", "Heuristic": []}, {"nl": "Called when a Conduit is actually required.", "Heuristic": []}, {"nl": "Initializes the  {@link StoreService}.", "Heuristic": ["H1"]}, {"nl": "Closes the message.", "Heuristic": []}, {"nl": "Return the object for the Attribute or the anyAttribute.", "Heuristic": ["H1"]}, {"nl": "Returns true if the objects are array instances and each of their elements compares via equals as well.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.MWVParser#MWVParser(net.sf.marineapi.nmea.sentence.TalkerId)}.", "Heuristic": ["H1"]}, {"nl": "Create the SELECT query.", "Heuristic": []}, {"nl": "Find the OpenID corresponding to the given user name.", "Heuristic": ["H1"]}, {"nl": "A simple convinience function that decomposes the matrix but automatically checks the input ti make sure is not being modified.", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData.RedemptionAddresses.RedemptionAddress }", "Heuristic": ["H1"]}, {"nl": "Sets the created date.", "Heuristic": []}, {"nl": "Returns an empty mutable map whose keys will respect this  {@link ElementOrder}.", "Heuristic": ["H1"]}, {"nl": "Method to add an element to this utility list and update the sums at the same time.", "Heuristic": []}, {"nl": "Returns the application specific custom page configuration servlet context parameter key given the service provider name and the relative URL path.", "Heuristic": []}, {"nl": "Returns the ratio of cache requests which were hits. This is defined as {@code hitCount / requestCount}, or  {@code 1.0} when {@code requestCount == 0}. Note that {@code hitRate + missRate =~ 1.0}.", "Heuristic": ["H1"]}, {"nl": "Provide the optionValue to the ExtraDhcpOption's Builder.", "Heuristic": ["H1"]}, {"nl": "Returns the block number of the B-tree leaf block that contains the specified search key.", "Heuristic": []}, {"nl": "Get the KeySize that the TokenProvider set", "Heuristic": []}, {"nl": "setUp", "Heuristic": ["H1", "H2"]}, {"nl": "Obtains the route for which this pool is specific.", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.parser.XDRParser#addMeasurement(Measurement...))}.", "Heuristic": ["H1"]}, {"nl": "Gets the exp msg.", "Heuristic": []}, {"nl": "whether the file exsit ,create dir for this SDpath", "Heuristic": ["H1"]}, {"nl": "Parse a string into a  {@code ClassMember} AST node,applying substitutions.", "Heuristic": ["H1"]}, {"nl": "Closes  {@code closeable}, ignoring any checked exceptions. Does nothing if  {@code closeable} is null.", "Heuristic": ["H1"]}, {"nl": "Get first day of week as java.util.Calendar constant.", "Heuristic": ["H1"]}, {"nl": "Get the SoapRefRegistry stored in the context, and if necessary create a new one.", "Heuristic": []}, {"nl": " Append a hashCode for a double. ", "Heuristic": []}, {"nl": "{@inheritDoc}Releases the underlying buffer of previous/current read response.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Chooses a number in (-2^numBits, 2^numBits) at random, with density concentrated in numbers of lower magnitude.", "Heuristic": []}, {"nl": "Reset the current stream position.", "Heuristic": []}, {"nl": "Propagates the result of a comparision to all registered listeners.", "Heuristic": ["H1"]}, {"nl": "append a line to the named file (and a newline character)", "Heuristic": ["H1"]}, {"nl": "Returns the index within this buffer of the first occurrence of the specified byte, starting the search at the specified beginIndex and finishing at endIndex. If no such byte occurs in this buffer within the specified bounds, -1 is returned.  There is no restriction on the value of beginIndex and endIndex. If beginIndex is negative, it has the same effect as if it were zero. If endIndex is greater than  {@link #length()}, it has the same effect as if it were {@link #length()}. If the beginIndex is greater than the endIndex, -1 is returned.", "Heuristic": ["H1"]}, {"nl": "Set the truststore, password, certificate type and the store type", "Heuristic": ["H1"]}, {"nl": "Get the next time to retry, in milliseconds since the epoch", "Heuristic": []}, {"nl": "Removes the specified  {@link Annotation} from set of excluded annotations.", "Heuristic": ["H1"]}, {"nl": "Set the SubjectProvider.", "Heuristic": []}, {"nl": "This method returns the list of sample (stable) ids for a study, e.g. TCGA-A1-A0SB-01, etc.", "Heuristic": ["H1"]}, {"nl": "Called to how many characters the CustomSeparator read after the end of the separator. This allows them to see beyond the end, but these characters will be fed to the separators again when looking for the next token so be careful.", "Heuristic": []}, {"nl": "Produce a hash code.", "Heuristic": []}, {"nl": "Gets the Tab Delim Output.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Tests the method for handling an input stream from Yahoo.", "Heuristic": []}, {"nl": " {@link RubyString String}#to_json_raw_object() This method creates a raw object Hash, that can be nested into other data structures and will be unparsed as a raw string. This method should be used if you want to convert raw strings to JSON instead of UTF-8 strings, e.g. binary data.", "Heuristic": ["H1"]}, {"nl": "Returns true if the specified field is in either of the underlying scans.", "Heuristic": []}, {"nl": "Prevent the response from being cached. See http://www.mnot.net/cache_docs.", "Heuristic": []}, {"nl": "Returns the player to move at the specified game state.", "Heuristic": []}, {"nl": "Sets the strategy for selecting nodes to compare.  Example with  {@link org.xmlunit.diff.DefaultNodeMatcher}:  .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)) ", "Heuristic": ["H1"]}, {"nl": "Returns the completed log filename for a particular log number.", "Heuristic": []}, {"nl": "Walk backwards.", "Heuristic": ["H2"]}, {"nl": "Returns a copy of this board.", "Heuristic": []}, {"nl": "Returns the  {@code byte} value that is equal to {@code value}, if possible.", "Heuristic": ["H1"]}, {"nl": "Maximum target represents the easiest allowable proof of work.", "Heuristic": []}, {"nl": "Get the (default) TTL value in seconds", "Heuristic": []}, {"nl": "Waits for a condition to be satisfied until a timeout occurs.", "Heuristic": []}, {"nl": "Add an alias/password pair to the callback mechanism.", "Heuristic": []}, {"nl": "Revert to the default value. It is critically important that the DEFAULT_VALUE is valid, otherwise an infinite loop will be encountered when revertToDefault is called, as invalid values call revertToDefault. Because default values are hard-coded into the program, this is okay.", "Heuristic": []}, {"nl": "Adds a handler.", "Heuristic": []}, {"nl": "Gets the character (or string) corresponding to the passed code in the given table", "Heuristic": []}, {"nl": "Gets the value of the given member as a JWE Algorithm, null if it doesn't exist", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Creates a LDAP server instance.", "Heuristic": ["H1"]}, {"nl": "Write the given byte to the buffer", "Heuristic": []}, {"nl": "Returns the event with the specified ID, searching all the maps.", "Heuristic": []}, {"nl": "Get terminal from a user", "Heuristic": []}, {"nl": "Collects a list of DataSources using a comma separated list of input file locations to process. If a file location is a directory, the directory hierarchy will be traversed to look for files. If a file location is a ZIP or Jar the archive will be scanned looking for files. If a file location is a file, it will be used. For each located file, a FilenameFilter is used to decide whether to return a DataSource.", "Heuristic": ["H1"]}, {"nl": "Get Instance get the static and only instance of the GMC class", "Heuristic": []}, {"nl": "URL-encode the specified string.", "Heuristic": []}, {"nl": "Strips the suffix if it exists. This method will leave keys without a suffix unaltered.", "Heuristic": []}, {"nl": "Scales dimensions according to incoming scale. Returns new object.", "Heuristic": []}, {"nl": "get double value.", "Heuristic": ["H1"]}, {"nl": "Send an ERROR log message.", "Heuristic": []}, {"nl": "Disable association to avoid with execution of the workflows", "Heuristic": []}, {"nl": "Clears a handler that was connected with setConnectedHandler.", "Heuristic": []}, {"nl": "Creates an instance of  {@link DefaultNHttpServerConnection} based on thegiven  {@link IOSession}.  This method can be overridden in a super class in order to provide a different implementation of the  {@link NHttpServerIOTarget} interface.", "Heuristic": ["H1"]}, {"nl": "Test of setThreadNumber method, of class LogEntryRequest.", "Heuristic": []}, {"nl": "Returns true iff the provided class name does not appear to be qualified (i.e., it has no dot.)", "Heuristic": ["H1"]}, {"nl": "Register a device to the backend", "Heuristic": []}, {"nl": "Gets an increasing sequence of bytes starting with the given value.", "Heuristic": []}, {"nl": "End an array. This method most be called to balance calls to array.", "Heuristic": []}, {"nl": "Log a message to the context logger.", "Heuristic": []}, {"nl": "Sets custom Consumes media types; can be used to override static {@link Consumes} annotation value set on the provider.", "Heuristic": []}, {"nl": "Retrieves the publicKey", "Heuristic": []}, {"nl": "Decomposes a random matrix and see if the decomposition can reconstruct the original", "Heuristic": []}, {"nl": "Gets the src file name.", "Heuristic": []}, {"nl": "The component we are decorating.", "Heuristic": []}, {"nl": "Delete the  dishCollection by id.", "Heuristic": ["H1"]}, {"nl": "Returns the raw packing format string.", "Heuristic": []}, {"nl": "Returns the description associated with a line item.", "Heuristic": []}, {"nl": "Returns actual  {@link AuthScope} if available", "Heuristic": ["H1"]}, {"nl": "Defines the choice behavior for the RecyclerView. By default, RecyclerViewChoiceMode does not have any choice behavior (AbsListView.CHOICE_MODE_NONE). By setting the choiceMode to AbsListView.CHOICE_MODE_SINGLE, the RecyclerView allows up to one item to  be in a chosen state.", "Heuristic": ["H1"]}, {"nl": "Gets the user subject representing the end user", "Heuristic": []}, {"nl": "Writes a  {@link JournalEntry} to the journal. Does NOT flush the journal.", "Heuristic": ["H1"]}, {"nl": "Return a line writer, if one is available.", "Heuristic": []}, {"nl": "Returns how many lines have been read.", "Heuristic": []}, {"nl": "Adds knowledge about the current node's children replacing existing knowledge.", "Heuristic": []}, {"nl": "longs.", "Heuristic": ["H1", "H2"]}, {"nl": "Removes a settings class from the list of factories that this handler will act upon.", "Heuristic": []}, {"nl": "True if it is iterating through the matrix by rows and false if by columns.", "Heuristic": []}, {"nl": "Return the event time of the current GestureDetector event being processed.", "Heuristic": []}, {"nl": "Checks whether a header is part of the iteration.", "Heuristic": []}, {"nl": "Formats an array of header elements.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Return a job configuration property.", "Heuristic": []}, {"nl": "Accessor for the File instance taht stores all properties", "Heuristic": ["H1"]}, {"nl": "Sets the created by.", "Heuristic": []}, {"nl": "Gets the Experiment Types.", "Heuristic": []}, {"nl": "Gets the local deployer properties.", "Heuristic": ["H1"]}, {"nl": "Returns a string representation of this comparison using  {@link DefaultComparisonFormatter}", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets the value of the given member as a Long, null if it doesn't exist", "Heuristic": []}, {"nl": "Returns a Method allowing access to {@link Throwable#initCause(Throwable) initCause} method of {@link Throwable}, or null if the method does not exist.", "Heuristic": ["H1"]}, {"nl": "Checks the JSONObject conforms at a basic level to \"2. Json communication structure\" Ensures existence of fields and correct type of fields", "Heuristic": ["H1"]}, {"nl": "Set a unique ID for this name. This API does not check or enforce uniqueness.", "Heuristic": []}, {"nl": "Used to unlock a block after the block is accessed, if the block is to be removed, delete the block file.", "Heuristic": []}, {"nl": "Retrieve all properties defined for a particular module", "Heuristic": []}, {"nl": "Dispose of any resources used by this memento before it is destroyed. A memento is destroyed when it is forced off the end of the undo or redo stack when that stack has reached its maximum size or when the stack is emptied.", "Heuristic": []}, {"nl": "Returns the object used to calculate the metric. @return The calculator.", "Heuristic": []}, {"nl": "Tests the  {@link Permission#defaults()} method.", "Heuristic": ["H1"]}, {"nl": "Sets the default bus if a default bus is not already set.", "Heuristic": []}, {"nl": "Writes the given lines of text to this sink with each line (including the last) terminated with the operating system's default line separator. This method is equivalent to {@code writeLines(lines, System.getProperty(\"line.separator\"))}.", "Heuristic": ["H1"]}, {"nl": "Allocates a contiguous block of memory. Note that the allocated memory is not guaranteed to be zeroed out (call `zero()` on the result if this is necessary). This method is intended to be used for allocating operators' internal data structures. For data pages that you want to exchange between operators, consider using  {@link TaskMemoryManager#allocatePage(long)}, since that will enable intra-memory pointers (see {@link TaskMemoryManager#encodePageNumberAndOffset(MemoryBlock,long)} and this class'stop-level Javadoc for more details).", "Heuristic": ["H1"]}, {"nl": "Return true if this instance has a defined port.", "Heuristic": []}, {"nl": "Computes the most dominant eigen vector of A using a shifted matrix. The shifted matrix is defined as B = A - &alpha;I and can converge faster if &alpha; is chosen wisely.  In general it is easier to choose a value for &alpha; that will converge faster with the shift-invert strategy than this one.", "Heuristic": ["H1"]}, {"nl": "Determine which encoding to use, one defined by the current font, or the current default encoding.", "Heuristic": []}, {"nl": "Gets the app definition properties. These properties are passed into a running app.", "Heuristic": []}, {"nl": "Get transaction hash from result intent. Meant for usage by applications initiating a Bitcoin payment. You can use this hash to request the transaction from the Bitcoin network, in order to validate. For this, you need your own Bitcoin infrastructure though. There is no guarantee that the transaction has ever been broadcasted to the Bitcoin network.", "Heuristic": []}, {"nl": "Gets the polling time unit.", "Heuristic": []}, {"nl": "Generic equality comparison.", "Heuristic": []}, {"nl": "Return the sensor model in matrix form: P(et | Xt = i) for each state i. For mathematical convenience we place each of these values into an S  S diagonal matrix.", "Heuristic": ["H1"]}, {"nl": "Return Ftp instance", "Heuristic": []}, {"nl": "Given two events, coalesce them into a single event that will be sent to JS instead of two separate events. By default, just chooses the one the is more recent. Two events will only ever try to be coalesced if they have the same event name, view id, and coalescing key.", "Heuristic": ["H1"]}, {"nl": "Put specified fragment to root of backstack", "Heuristic": ["H1"]}, {"nl": "Tests for finding a site that is not blacklisted in the repository.", "Heuristic": []}, {"nl": "Generic equality comparison.", "Heuristic": []}, {"nl": "Register an endpoint resolver.", "Heuristic": []}, {"nl": " {@link RubyString String}#to_json_raw_object() This method creates a raw object Hash, that can be nested into other data structures and will be unparsed as a raw string. This method should be used if you want to convert raw strings to JSON instead of UTF-8 strings, e.g. binary data.", "Heuristic": ["H1"]}, {"nl": "get instance of PreferenceManager", "Heuristic": ["H1"]}, {"nl": "This parameter configures the cert alias used on server side this is useful when keystore has multiple certs", "Heuristic": ["H1"]}, {"nl": "Each time the agent program is called, it TELLS the knowledge base what it perceives.", "Heuristic": []}, {"nl": "the CSS condition that element has pseudo-class :odd", "Heuristic": ["H1"]}, {"nl": "Gets the length of the message's requested or responded data. Make sure the message is ready before calling this method.", "Heuristic": []}, {"nl": "display @param array 's content to console", "Heuristic": ["H1"]}, {"nl": "This parameter sets the cipher suites list to use. If left unset it uses system defaults.", "Heuristic": []}, {"nl": "Returns the response builder class name", "Heuristic": []}, {"nl": "Height on screen", "Heuristic": []}, {"nl": "Display a simple alert dialog with the given text and title.", "Heuristic": []}, {"nl": "Replaces default key with user provided Alluxio property key.", "Heuristic": ["H1"]}, {"nl": "Get the value produced by the worker thread, or null if it  hasn't been constructed yet.", "Heuristic": ["H1"]}, {"nl": "Get XMPP Settings of a user", "Heuristic": []}, {"nl": "Call after processing attributes of an element and turning to compare the child nodes.", "Heuristic": []}, {"nl": "Returns the integer value stored at the specified offset of the specified block. The method first obtains an SLock on the block, then it calls the buffer to retrieve the value.", "Heuristic": []}, {"nl": "Insist that a Type is a parameterized type of one parameter. This is used to decompose Holders, for example.", "Heuristic": []}, {"nl": "Return the job Id.", "Heuristic": ["H1"]}, {"nl": "remove all nodes for given key", "Heuristic": ["H1"]}, {"nl": "Returns the token-name of this token.", "Heuristic": []}, {"nl": "Create an instance of  {@link PurchaseOrders }", "Heuristic": ["H1"]}, {"nl": "Add a configuration to the build state", "Heuristic": []}, {"nl": "Returns file descriptor or null if not yet open/already closed", "Heuristic": []}, {"nl": "Never matches if the cookie's domain is from the blacklist.", "Heuristic": []}, {"nl": "Formats a header.", "Heuristic": []}, {"nl": "Get prototype.", "Heuristic": ["H2"]}, {"nl": "Returns a list of fields for which values will be specified in the new record.", "Heuristic": []}, {"nl": "Hilfsmethode zum Erzeugen von Zufallszahlen in einem gegebenen Intervall, inklusive Intervallgrenzen.", "Heuristic": ["H1"]}, {"nl": "Resolves serialized instance of enumeration value.", "Heuristic": []}, {"nl": " The membership error for a sample.  If the error is less than a threshold then it can be considered a member.  The threshold's value depends on the data set.   The error is computed by projecting the sample into eigenspace then projecting it back into sample space and ", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link WebUtils#convertMsToClockTime(long)} method with one day.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Tells the camera to stop drawing preview frames.", "Heuristic": []}, {"nl": "Set the System property into Hadoop configuration. This method won't override existing property even if it is set as System property.", "Heuristic": []}, {"nl": "Save a site.", "Heuristic": []}, {"nl": "Sets the bit at the specified index to  {@code true}.", "Heuristic": ["H1"]}, {"nl": "Add new BPS profile", "Heuristic": []}, {"nl": "Add all Rules from the given RuleSet which want to participate in the RuleChain.", "Heuristic": []}, {"nl": "Returns the corresponding wrapper type of  {@code type} if it is a primitive type; otherwisereturns  {@code type} itself. Idempotent. wrap(int.class) == Integer.class wrap(Integer.class) == Integer.class wrap(String.class) == String.class ", "Heuristic": ["H1"]}, {"nl": "Setter for property 'scenarioId'.", "Heuristic": ["H1"]}, {"nl": "Sets the number of columns.", "Heuristic": []}, {"nl": "Whether to use the MotionEvent for writing", "Heuristic": []}, {"nl": "Extract the content and metadata from the input stream. Depending on media type validation, the detector could be run against input stream in order to ensure that parser supports this type of content.", "Heuristic": []}, {"nl": "Sets the  {@code SocketAddress} for this datagram packet.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the orderDate property.", "Heuristic": []}, {"nl": "Flips the given bit.", "Heuristic": []}, {"nl": "If one of the given names equals the \"short name\", then we'll display the longname.", "Heuristic": ["H1"]}, {"nl": "Get the query param with specified key", "Heuristic": ["H1"]}, {"nl": "Create a new file object from two file paths.", "Heuristic": []}, {"nl": "Set a map of from URI to prefix. If possible, the data binding will use these prefixes on the wire.", "Heuristic": []}, {"nl": "Positions the scan before the first group. Internally, the underlying scan is always  positioned at the first record of a group, which  means that this method moves to the first underlying record.", "Heuristic": ["H1"]}, {"nl": "Stops the internal timer.", "Heuristic": []}, {"nl": "Returns the index of the eigenvalue which has the largest magnitude.", "Heuristic": []}, {"nl": "Utility method to validate the chromosome. Should be 1-22 or X, Y.  It also makes a small exception for 23 and 24: 23 is interpreted as X and 24 is interpreted as Y", "Heuristic": ["H1"]}, {"nl": "Tests to ensure  {@link S3AOutputStream#write(byte[],int,int)} calls the underlyingoutput stream.", "Heuristic": ["H1"]}, {"nl": "for processing EXP event (see spec. p 13)", "Heuristic": ["H1"]}, {"nl": "Get the row data.", "Heuristic": []}, {"nl": "Debug log message.", "Heuristic": []}, {"nl": "Returns the value of the specified field in the current record.", "Heuristic": []}, {"nl": "Returns whether the given class extends CordovaPlugin.", "Heuristic": []}, {"nl": "Tests the  {@link RPCFileReadRequest#validate()} method.", "Heuristic": ["H1"]}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.parser.GSVParser#isLast()} .", "Heuristic": ["H1"]}, {"nl": "Return the time in milliseconds this task took.", "Heuristic": []}, {"nl": "Returns the adapter position of the last visible view. This position does not include adapter changes that were dispatched after the last layout pass.", "Heuristic": []}, {"nl": "Return type", "Heuristic": ["H2"]}, {"nl": "Sets the user store domain of the user", "Heuristic": []}, {"nl": "Returns the schema of the projection, which is taken from the field list.", "Heuristic": []}, {"nl": "Gets the value of the return property.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMCParser#getDirectionOfVariation()}.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the value property.", "Heuristic": []}, {"nl": "Returns level of the log record. Possible values: 'DEBUG', 'INFO', 'WARN', 'ERROR'.", "Heuristic": []}, {"nl": "Returns a standard regression test params (similar to unitTests)", "Heuristic": ["H1"]}, {"nl": "Get a random sample from P(Xi | mb(Xi)), where mb(Xi) is the Markov Blanket of Xi. The probability of a variable given its Markov blanket is proportional to the probability of the variable given its parents times the probability of each child given its respective parents (see equation 14.12 pg. 538 AIMA3e):  P(x'i|mb(Xi)) = &alpha;P(x'i|parents(Xi))  &prod;Yj &isin; Children(Xi) P(yj|parents(Yj))", "Heuristic": ["H1"]}, {"nl": "Creates an instance of linear probing index by loading its content from a buffer. The {@link ByteBuffer#position} must be at the beginning of index.", "Heuristic": []}, {"nl": "Removes the reg pcl test result detail.", "Heuristic": ["H1"]}, {"nl": "Returns true if the given height has a recorded checkpoint.", "Heuristic": []}, {"nl": "Returns the schema of the data table.", "Heuristic": []}, {"nl": "Sets the test id.", "Heuristic": ["H1"]}, {"nl": "Extracts the nullity of a matrix using a preexisting decomposition.", "Heuristic": []}, {"nl": "Returns the index of the oldest item.", "Heuristic": []}, {"nl": "Get one siteUrl by id.", "Heuristic": ["H1"]}, {"nl": "Sets value of the  {@link CoreConnectionPNames#SO_TIMEOUT} parameter.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Sets the thread pool size read from configurations", "Heuristic": []}, {"nl": "Tests the constructor with a valid length.", "Heuristic": []}, {"nl": "Reads an array of parameter types from the stream.", "Heuristic": []}, {"nl": "Creates (but does not start) a new stopwatch, using the specified time source.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Sets encryption, signature and exchange as key usage for provided keyBinding.", "Heuristic": []}, {"nl": "Sets the value of the request property.", "Heuristic": []}, {"nl": "Deserialize the Thrift object from a byte array.", "Heuristic": []}, {"nl": "This parameter retrieves the cert alias specified on server side", "Heuristic": []}, {"nl": "Destroy Oozie services.", "Heuristic": ["H1"]}, {"nl": "Set the SubjectNameQualifier.", "Heuristic": []}, {"nl": "Validate Namenode list", "Heuristic": ["H1"]}, {"nl": "remove a audience from the required audiences list", "Heuristic": ["H1"]}, {"nl": "Set the number of manually changed difference resolution states.", "Heuristic": []}, {"nl": "Sets the camera IP address and port number", "Heuristic": []}, {"nl": "Whether the progress (in % complete and memory used) should be  printed to the console.", "Heuristic": ["H1"]}, {"nl": "Checks if the metric can be computed on that node.", "Heuristic": []}, {"nl": "Adjusts the box so that the specified box is also included.", "Heuristic": []}, {"nl": "Get the triple state in B.", "Heuristic": []}, {"nl": "Determines whether a given predicate holds true for at least one element. Returns false for an empty sequence.", "Heuristic": []}, {"nl": "Sets an int value in the object.", "Heuristic": []}, {"nl": "The remove operation does not make sense in this Iterator. This method does not do anything.", "Heuristic": []}, {"nl": "this will add the SMSMessage properties to the Axis2MessageContext", "Heuristic": ["H1"]}, {"nl": "Sets URI host.", "Heuristic": []}, {"nl": "Sets the value of the partNum property.", "Heuristic": ["H1"]}, {"nl": "Retrieves the dataRID from the current record in the table scan for the bucket.", "Heuristic": ["H1"]}, {"nl": "Checks if a path exists.", "Heuristic": []}, {"nl": "Remove a  {@link DAVListener} from the list of instances notified bythis  {@link DAVRepository}.", "Heuristic": ["H1"]}, {"nl": "Sets value of the  {@link CoreConnectionPNames#SO_LINGER} parameter.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Get the class.", "Heuristic": []}, {"nl": "Simply return true is the image is equal to keyword 'this' or 'super'.", "Heuristic": []}, {"nl": "Returns the foundation using the type, base address, and STUN server address.", "Heuristic": []}, {"nl": "Returns the field at  {@code position} or null if that is out of range.", "Heuristic": ["H1"]}, {"nl": "Generates an activation key.", "Heuristic": []}, {"nl": "This method should be calling by its corresponding Action when finish. Doing that we inform the result to our JobsGroups observer and finish the running Thread", "Heuristic": ["H1"]}, {"nl": "Tests the given SatelliteInfo against specified values.", "Heuristic": []}, {"nl": "Clears all bits (sets to false).", "Heuristic": []}, {"nl": "set common auth caller path. Path of the calling party to common auth", "Heuristic": ["H1"]}, {"nl": "Creates a garbage object that counts down the latch in its finalizer.  Sequestered into a separate method to make it somewhat more likely to be unreachable.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Resets the GC status to ready.", "Heuristic": []}, {"nl": "Sets a specific location in the bar", "Heuristic": []}, {"nl": "Gets the total capacity of Alluxio's BlockStore.", "Heuristic": ["H1"]}, {"nl": "Adds a name/value pair to the formatted output in  {@code name=value} format.", "Heuristic": ["H1"]}, {"nl": "Not supported, class is immutable. A method to set the float value with a specified unit.", "Heuristic": []}, {"nl": "Override this if anything needs to be done on cancellation (e.g. Logging)", "Heuristic": []}, {"nl": "Returns true if this is a SPDY connection. Such connections can be used in multiple HTTP requests simultaneously.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link BlockMeta#getPath()} method.", "Heuristic": ["H1"]}, {"nl": "Returns the size of the entry for  {@code key} and {@code value} inuser-defined units. The default implementation returns 1 so that size is the number of entries and max size is the maximum number of entries.  An entry's size must not change while it is in the cache.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RTEParser#getSentenceIndex()}.", "Heuristic": ["H1"]}, {"nl": "Adds wLen characters to the word being stemmed contained in a portion of a char[] array. This is like repeated calls of add(char ch), but faster.", "Heuristic": []}, {"nl": "Register a new SettingsTab.", "Heuristic": []}, {"nl": "Describe how to call the program.", "Heuristic": []}, {"nl": "Get the default lifetime in seconds for issued SAML token where requestor doesn't specify a lifetime element", "Heuristic": []}, {"nl": "using the string method with the default charset given as argument should prevent using the charset cache in FastCharsetProvider.java:118 which locks all concurrent threads using a UTF8.String() method", "Heuristic": ["H1"]}, {"nl": "Returns a comparator that compares two arrays of unsigned  {@code int} values lexicographically. That is, it compares, using  {@link #compare(int,int)}), the first pair of values that follow any common prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For example,  {@code [] The returned comparator is inconsistent with  {@link Object#equals(Object)} (since arrayssupport only identity equality), but it is consistent with  {@link Arrays#equals(int[],int[])}.", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link JAXBElement }{@code }}", "Heuristic": ["H1"]}, {"nl": "Accessor for the language name.", "Heuristic": ["H1"]}, {"nl": "Initialize the memory locks service", "Heuristic": []}, {"nl": "Retrieves the Matrix Content from the Specified File.", "Heuristic": []}, {"nl": "Add a new  {@link DAVListener} to the list of instances notified bythis  {@link DAVRepository}.", "Heuristic": ["H1"]}, {"nl": "Getter for the middle name of the profile.", "Heuristic": []}, {"nl": "Get all the siteUrls.", "Heuristic": ["H1"]}, {"nl": "Converts DIP (or DP) to Pixels", "Heuristic": []}, {"nl": "Returns a string representation of this difference using the given  {@link ComparisonFormatter}", "Heuristic": ["H1"]}, {"nl": "saves the @param array to file : @param fileName", "Heuristic": ["H1"]}, {"nl": "Tests for  {@link ReplayCallable}s that  {@link RuntimeException}s are correctly propagated.", "Heuristic": ["H1"]}, {"nl": "Get an XKMSCacheToken from the cache matching the given key. Returns null if there is no such XKMSCacheToken in the cache, or if the certificate has expired in the cache", "Heuristic": []}, {"nl": "Test of getDescription method, of class TestDosAttack.", "Heuristic": []}, {"nl": "Get the JMS connection factory with the given name.", "Heuristic": []}, {"nl": "Lay out the document with the specified dimensions, without rendering.", "Heuristic": []}, {"nl": "Call  {@link MotionEvent#getAction}, returning only the pointer index portion", "Heuristic": ["H1"]}, {"nl": "Returns the node.", "Heuristic": []}, {"nl": "Print the terms and their counts in arbitrary order.", "Heuristic": []}, {"nl": "Returns the number of elements in this list", "Heuristic": []}, {"nl": "Sets the client which obtained the access token", "Heuristic": []}, {"nl": "Remove a plugin from this container", "Heuristic": []}, {"nl": "Returns the Scope corresponding to the Authz Request", "Heuristic": ["H1"]}, {"nl": "GET  /account : get the current user.", "Heuristic": ["H1"]}, {"nl": "The finish method is called after the entire tree has been visited. This method allows the visitor to perform any last minute cleanup, including flushing buffers and I/O connections.", "Heuristic": []}, {"nl": "get header 'Replyto' of JMS", "Heuristic": ["H1"]}, {"nl": "Constructs a String with all attributes in name = value format.", "Heuristic": []}, {"nl": "Returns null. Cookies prior to RFC2965 do not set this attribute", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.parser.GSVParser#isFirst()}.", "Heuristic": ["H1"]}, {"nl": "Sets a new starting count number for the count down animation.", "Heuristic": ["H1"]}, {"nl": "Obtains the name of the versioned module or informal unit. This data is read from the version information for the package.", "Heuristic": []}, {"nl": "Appends a CR LF to the specified buffer", "Heuristic": []}, {"nl": "This implementation always returns 0. {@inheritDoc}", "Heuristic": []}, {"nl": "Gets the value of the challenge property.", "Heuristic": []}, {"nl": "Establece el tiempo T1 al momento actual: System.nanoTime()", "Heuristic": ["H1"]}, {"nl": "Converts a wire type to a thrift type.", "Heuristic": []}, {"nl": "Sets up the buffer before a test runs.", "Heuristic": []}, {"nl": "Sets the type of measurement.", "Heuristic": []}, {"nl": "Sets the value of the workflowImplName property.", "Heuristic": ["H1"]}, {"nl": "Helper for error callbacks that just returns the Status.ERROR by default", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Convert an integer to a string using MultiplicityRange notation.", "Heuristic": []}, {"nl": "Get a routing polygon for a straightline between two points.", "Heuristic": ["H1"]}, {"nl": "Return the action ID from a callback URL.", "Heuristic": []}, {"nl": "Obtains the HTTP Response body", "Heuristic": []}, {"nl": "Use this function instead of new String(byte[]) to avoid surprises from non-standard default encodings.", "Heuristic": ["H1"]}, {"nl": "Gets a  {@link ByteBuffer} containing an increasing sequence of bytes starting at zero.", "Heuristic": ["H1"]}, {"nl": "Closes the camera driver if still in use.", "Heuristic": []}, {"nl": "get.", "Heuristic": ["H1", "H2"]}, {"nl": "Erase a purchase (locally) from the inventory, given its product ID. This just modifies the Inventory object locally and has no effect on the server! This is useful when you have an existing Inventory object which you know to be up to date, and you have just consumed an item successfully, which means that erasing its purchase data from the Inventory you already have is quicker than querying for a new Inventory.", "Heuristic": ["H1"]}, {"nl": "Sends an accessibility event. This method behaves exactly as {@link #sendAccessibilityEvent(View,int)} but takes as an argument anempty  {@link AccessibilityEvent} and does not perform a check whetheraccessibility is enabled.  The default implementation behaves as {@link View#sendAccessibilityEventUnchecked(AccessibilityEvent) View#sendAccessibilityEventUnchecked(AccessibilityEvent)} forthe case of no accessibility delegate been set. ", "Heuristic": ["H1"]}, {"nl": "Register the above content view.", "Heuristic": []}, {"nl": "Removes all elements from the set", "Heuristic": []}, {"nl": "Execute the specified xpath syntax select expression on the specified document and return the list of nodes (could have length zero) that match", "Heuristic": ["H1"]}, {"nl": "Create an Aegis type from a reflected type description. This will only work for the restricted set of collection types supported by Aegis.", "Heuristic": []}, {"nl": "Sets result as warning", "Heuristic": []}, {"nl": "Creates a  {@link SaslServer} using the parameters supplied. It returns null if no SaslServercan be created using the parameters supplied. Throws  {@link SaslException} if it cannotcreate a SaslServer because of an error.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link StorageDirView#toBlockStoreLocation()} method.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the paramValue property.", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos.Geo.City }", "Heuristic": ["H1"]}, {"nl": "Iterates over the current pull results and returns the lowest pull status.", "Heuristic": []}, {"nl": "Gets the local port number of this socket. The field is initialized to {@code -1} and upon demand will go to the IP stack to get the boundvalue. See the class comment for the context of the local port.", "Heuristic": ["H1"]}, {"nl": "SuppressMarker should be initially null and changeable.", "Heuristic": []}, {"nl": "Returns the number of times  {@link #put} was called.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link IndexedSet#contains(IndexDefinition,Object) } method.", "Heuristic": ["H1"]}, {"nl": "Returns a URL used to delete a resource from the repository.", "Heuristic": []}, {"nl": "All set methods", "Heuristic": []}, {"nl": "Gets the map of query parameters.", "Heuristic": []}, {"nl": "Factory method for  {@link ContentEncoder} instances.", "Heuristic": ["H1"]}, {"nl": "Adds an unnamed value to the formatted output. It is strongly encouraged to use  {@link #add(String,boolean)} instead and give value areadable name.", "Heuristic": ["H1"]}, {"nl": "Get the minimum key size to use when generating a symmetric key. The requestor can  specify a KeySize value to use. The default is 128 bits.", "Heuristic": ["H1"]}, {"nl": "get the resource id of the icon", "Heuristic": ["H1"]}, {"nl": "quantize the input array of points in k-dimensional space calls: none called by: volume", "Heuristic": ["H1"]}, {"nl": "filter out empty textNodes here", "Heuristic": ["H1"]}, {"nl": "Gets the end time.", "Heuristic": []}, {"nl": "Releases the block worker thrift client to the heartbeat pool.", "Heuristic": []}, {"nl": "Provide the networkId to the ExternalGatewayInfo's Builder.", "Heuristic": ["H1"]}, {"nl": "Comma separated schema locations", "Heuristic": []}, {"nl": "Sets the permission.", "Heuristic": []}, {"nl": "Sets up all dependencies before a test runs.", "Heuristic": []}, {"nl": "Make a request to the Facebook Graph API without any parameters.  See http://developers.facebook.com/docs/api  Note that this method is asynchronous and the callback will be invoked in a background thread; operations that affect the UI will need to be posted to the UI thread or an appropriate handler.  This method is deprecated.  See  {@link Facebook} and {@link com.facebook.Request} for more info.", "Heuristic": ["H1"]}, {"nl": "Detaches from the current  {@link ContextFactory}.", "Heuristic": ["H1"]}, {"nl": " Append a hashCode for a double array. ", "Heuristic": []}, {"nl": "get the service given the gateway id", "Heuristic": ["H1"]}, {"nl": "Creates a decoder that splits up the incoming ByteBuf into new ByteBuf's according to a length field in the input. The encoding scheme is: [(long) frame length][message payload] The frame length is NOT included in the output ByteBuf.", "Heuristic": ["H1"]}, {"nl": "Returns true if this chunk is pushdata content, including the single-byte pushdatas.", "Heuristic": ["H1"]}, {"nl": "Exrtract a user's name from a personal repository path.", "Heuristic": ["H1"]}, {"nl": "Tests if the block is marked to move out of its current dir in this view.", "Heuristic": ["H1"]}, {"nl": "Gets the value with a given key from a static key/value mapping in string format. E.g. with mapping \"id1=user1;id2=user2\", it returns \"user1\" with key \"id1\". It returns null if the given key does not exist in the mapping.", "Heuristic": []}, {"nl": "Returns an immutable set of all nine primitive-wrapper types (including  {@link Void}).", "Heuristic": ["H1"]}, {"nl": "Writes a JSON response.", "Heuristic": []}, {"nl": "Increases the buffer's pin count.", "Heuristic": []}, {"nl": "Returns a directory for the given index.", "Heuristic": []}, {"nl": "Register the  {@link TransportView} MBean.", "Heuristic": ["H1"]}, {"nl": "Reads 2 collisionStrings and compares if they are equal", "Heuristic": []}, {"nl": "Entry point for embedded applications.  This method attaches to the global  {@link ContextFactory} with a scope of a newlycreated  {@link Global} object.  No I/O redirection is performedas with  {@link #main(String[])}.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.HDGParser#setDeviation(double)}.", "Heuristic": ["H1"]}, {"nl": "Returns the adapter item count.", "Heuristic": []}, {"nl": "Sets the start date.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Get the path of this cookie", "Heuristic": []}, {"nl": "Return The Contect that will be send with the SMS", "Heuristic": ["H1"]}, {"nl": "Notify users by email of something.", "Heuristic": []}, {"nl": "Configures this builder produce a TestSuite with the given name.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Get the default startup directory.", "Heuristic": []}, {"nl": "Convert a passed byte string (e.g. 50b, 100k, or 250m) to gibibytes for internal use. If no suffix is provided, the passed number is assumed to be in gibibytes.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the method property.", "Heuristic": []}, {"nl": "Add an invisible view to capture the pen button on the Thinkpad Tablet", "Heuristic": ["H1"]}, {"nl": "join list to string  join(null, '#')     =   \"\"; join({}, '#')       =   \"\"; join({a,b,c}, ' ')  =   \"abc\"; join({a,b,c}, '#')  =   \"a#b#c\"; ", "Heuristic": ["H1"]}, {"nl": "Convert a move into a string.", "Heuristic": []}, {"nl": "Returns the remote URL.", "Heuristic": []}, {"nl": "Waits for the flush counter to be flushed to the journal. If the counter is {@link AsyncJournalWriter#INVALID_FLUSH_COUNTER}, this is a noop.", "Heuristic": ["H1"]}, {"nl": "Asserts that an escaper does not escape the given character.", "Heuristic": []}, {"nl": "Returns the html version of the markdown source text.", "Heuristic": ["H1"]}, {"nl": "Gets number of default mutation and copy number profiles.", "Heuristic": []}, {"nl": "Updates the value currently associated with  {@code key} with the specified function,and returns the new value.  If there is not currently a value associated with  {@code key}, the function is applied to  {@code 0L}.", "Heuristic": ["H1"]}, {"nl": "Set all job configurations properties into evaluator.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Helper for error callbacks that just returns the Status.ERROR by default", "Heuristic": ["H1"]}, {"nl": "Get a compiler generated position.", "Heuristic": []}, {"nl": "Call when everything but the root has changed. Only may be called when the root is not null. Otherwise there isn't a structure to have changed.", "Heuristic": ["H1"]}, {"nl": "set.", "Heuristic": ["H1", "H2"]}, {"nl": "get the current timer value in microseconds", "Heuristic": ["H1"]}, {"nl": "add OR condition", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link AuthenticateRequest }", "Heuristic": ["H1"]}, {"nl": "Given a list of points obtain a float[] points to be draw using canvas.drawPoints() method", "Heuristic": ["H1"]}, {"nl": "sets the cursor to the outer bound of the visible tweet number. That means if no tweets had been shown to the user, the number is 0.", "Heuristic": ["H1"]}, {"nl": "Change specified Progress Bar Visibility or Indeterminate Progress Bar", "Heuristic": []}, {"nl": "Determines if the current log record is the earliest record in the log file.", "Heuristic": []}, {"nl": "Returns fully qualified name of the enumeration type.", "Heuristic": []}, {"nl": "Returns true if the structure is incomplete.", "Heuristic": []}, {"nl": "Resolve a function prefix:name. Used by the EL evaluator implementation. ", "Heuristic": []}, {"nl": "Sets the occupancy.", "Heuristic": []}, {"nl": "Sets the value of the lang property.", "Heuristic": ["H1"]}, {"nl": "Returns the singleton instance.", "Heuristic": []}, {"nl": "Resolves serialized instance of enumeration value.", "Heuristic": []}, {"nl": "Set the lifetime of the Token to be returned in seconds.", "Heuristic": []}, {"nl": "Tests the read(byte[]) method.", "Heuristic": []}, {"nl": "Gets the dest file name.", "Heuristic": ["H1"]}, {"nl": "Returns the value as stored in the properties file.", "Heuristic": []}, {"nl": "Add new workflow", "Heuristic": []}, {"nl": "Creates a function that returns the same boolean output as the given predicate for all inputs. The returned function is consistent with equals (as documented at {@link Function#apply}) if and only if  {@code predicate} is itself consistent with equals.Java 8 users: use the method reference  {@code predicate::test} instead.", "Heuristic": ["H1"]}, {"nl": "Starts a new count. Since SimpleDB does not support null values, every record will be counted, regardless of the field. The current count is thus set to 1.", "Heuristic": []}, {"nl": "Note:Override this method for a more efficient implementation as outlined in AIMA3e pgs. 527-28. Calculate the hidden variables from the Bayesian Network. The default implementation does not perform any of these.  Two calcuations to be performed here in order to optimize iteration over the Bayesian Network: 1. Calculate the hidden variables to be enumerated over. An optimization (AIMA3e pg. 528) is to remove 'every variable that is not an ancestor of a query variable or evidence variable as it is irrelevant to the query' (i.e. sums to 1). 2. The subset of variables from the Bayesian Network to be retained after irrelevant hidden variables have been removed.", "Heuristic": ["H1"]}, {"nl": "get int value.", "Heuristic": ["H1"]}, {"nl": "Tint the supplied color with a tint factor (0 to 1 inclusive) to make the colour more pale I.e. closer to white. A Tint of 0 has no effect, a Tint of 1 turns the color white.", "Heuristic": ["H1"]}, {"nl": "Getter for map with production counts of objects per type", "Heuristic": []}, {"nl": "Returns array of ItemStack in the inventory.", "Heuristic": []}, {"nl": "Creates an instance of  {@link HeapByteBufferAllocator} to be usedby HTTP connections for allocating  {@link java.nio.ByteBuffer} objects. This method can be overridden in a super class in order to provide a different implementation of the  {@link ByteBufferAllocator} interface.", "Heuristic": ["H1"]}, {"nl": "Returns the number of iterations of the genetic algorithm.", "Heuristic": []}, {"nl": "Answers to the question: Where can I get, following one of the connections starting at the specified location?", "Heuristic": []}, {"nl": "Destroy shell process considering that the process could already be terminated", "Heuristic": []}, {"nl": "Returns the to address of this message.", "Heuristic": ["H1"]}, {"nl": "Get tooltip HTML formatted based on errorLevel", "Heuristic": []}, {"nl": "Compute a hash code using the hash codes of the underlying objects", "Heuristic": []}, {"nl": "Creates an instance of  {@link com.facebook.CallbackManager}.", "Heuristic": ["H1"]}, {"nl": "Accesses the top priority pair in the specified state.", "Heuristic": []}, {"nl": "Determines whether a block comes from a temporary file or not.", "Heuristic": []}, {"nl": "Returns the correct  {@link SocketChannel} class based on {@link ChannelType}.", "Heuristic": ["H1"]}, {"nl": "Sets daemon or not for new threads created with this ThreadFactory.", "Heuristic": []}, {"nl": "Set up.", "Heuristic": ["H2"]}, {"nl": "Save ingredients.", "Heuristic": ["H2"]}, {"nl": "Not required", "Heuristic": ["H2"]}, {"nl": "Returns v, with the bit at position set to zero.", "Heuristic": []}, {"nl": "Turn on or off generation of code with callbacks to track the count of executed instructions. Currently only affects JVM byte code generation: this slows down the generated code, but code generated without the callbacks will not be counted toward instruction thresholds. Rhino's interpretive mode does instruction counting without inserting callbacks, so there is no requirement to compile code differently.", "Heuristic": ["H1"]}, {"nl": "Removes an element from the observation matrix.", "Heuristic": []}, {"nl": "Getter for the value to instruct the Connector to check if the uploaded image is really an image.", "Heuristic": []}, {"nl": "Sets up a new  {@link TtlBucketList} before a test runs.", "Heuristic": ["H1"]}, {"nl": "Renders the XML file as a PDF file at the target location.", "Heuristic": []}, {"nl": "Tests the internal buffering of the class.", "Heuristic": []}, {"nl": "Provide the subnetId to the IP's Builder.", "Heuristic": ["H1"]}, {"nl": "load the certificates as X.509 certificates", "Heuristic": ["H1"]}, {"nl": "Get the Msg value.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RTEParser#addWaypointId(String)}.", "Heuristic": ["H1"]}, {"nl": "Generates values in a distribution equivalent to randomNonNegativeBigInteger but omitting zero.", "Heuristic": ["H1"]}, {"nl": "Sets input mode. The buffer can now be written into.", "Heuristic": []}, {"nl": "Converts the given OpCodeName into an int", "Heuristic": []}, {"nl": "Set the Msg value.", "Heuristic": []}, {"nl": "Adds a listener for close events.", "Heuristic": []}, {"nl": "Constructs an object with the given parameters and classtypes", "Heuristic": ["H1"]}, {"nl": "Close this session. NEVER forget to call this method to free up resources - even if you got an exception from one of the other methods (or when getting an Exception on the Input- or OutputStreams). Sometimes these other methods may throw an exception, saying that the underlying channel is closed (this can happen, e.g., if the other server sent a close message.) However, as long as you have not called the close() method, you may be wasting (local) resources.", "Heuristic": []}, {"nl": "Returns the schema of the product, which is the union of the schemas of the underlying queries.", "Heuristic": []}, {"nl": "Encodes the given binary content as an Aztec symbol", "Heuristic": []}, {"nl": "Process the MKCOL method.", "Heuristic": ["H1"]}, {"nl": "Computes the value of a metric on a class.", "Heuristic": []}, {"nl": "Returns the number of blocks in the sorted table, which is the same as it would be in a materialized table. It does not include the one-time cost of materializing and sorting the records.", "Heuristic": []}, {"nl": "Determine if message is outbound.", "Heuristic": []}, {"nl": "Returns the index of the oldest item.", "Heuristic": []}, {"nl": " Sets A &isin; &real; m &times; n equal to an outer product multiplication of the two vectors.  This is also known as a rank-1 operation.  A = x  y' where x &isin; &real; m and y &isin; &real; n are vectors.   Which is equivalent to: Aij = xiyj   These functions are often used inside of highly optimized code and therefor sanity checks are kept to a minimum.  It is not recommended that any of these functions be used directly. ", "Heuristic": ["H1"]}, {"nl": "Can redo be performed?", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.SentenceFactory#createParser(java.lang.String)}.", "Heuristic": ["H1"]}, {"nl": "Decides if this response is fresh enough based Last-Modified and Date, if available. This entry is meant to be used when isResponseFresh returns false.  The algorithm is as follows: if last-modified and date are defined, freshness lifetime is coefficient(date-lastModified), else freshness lifetime is defaultLifetime", "Heuristic": []}, {"nl": "{@inheritDoc} When constructor with map is used it returns null.", "Heuristic": []}, {"nl": " Used to retrieve real valued eigenvectors.  If an eigenvector is associated with a complex eigenvalue then null is returned instead. ", "Heuristic": []}, {"nl": "Gets internal cancer study id by stable id and throws an  exception when study is not found.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the username property.", "Heuristic": []}, {"nl": "Returns the length of the buffer (byte count).", "Heuristic": []}, {"nl": "Sets the  {@link Client} reference", "Heuristic": ["H1"]}, {"nl": "Returns a RESULT function for the n-queens problem.", "Heuristic": []}, {"nl": "Sets the string value of a configuration property.", "Heuristic": []}, {"nl": "Shows progress-bar", "Heuristic": ["H2"]}, {"nl": "Puts the last refresh date into a Bundle.", "Heuristic": []}, {"nl": " Returns the orthogonal 'U' matrix. ", "Heuristic": []}, {"nl": "Gets the value of the mapType property.", "Heuristic": []}, {"nl": "Given a  {@link Path} path, it returns the path component of its URI, which has the formscheme://authority/path.", "Heuristic": ["H1"]}, {"nl": "Deletes the current record. The client must call next() to move to the next record. Calls to methods on a deleted record  have unspecified behavior.", "Heuristic": ["H1"]}, {"nl": "Start custom shell without custom environment and base directory", "Heuristic": []}, {"nl": "Starts the demo.", "Heuristic": []}, {"nl": "Shuts engine down.", "Heuristic": []}, {"nl": "Send tampered request based on previously create postMethod", "Heuristic": []}, {"nl": "Increments the total value which we pay the server.", "Heuristic": []}, {"nl": "Returns true if this assignment is consistent as well as complete with respect to the given CSP.", "Heuristic": []}, {"nl": "Creates an ExecutorShuffleInfo object based on the given shuffle manager which targets this context's directories.", "Heuristic": []}, {"nl": "Gets the  {@link PaymentChannelClientState} object which stores the current state of the connection with theserver. Note that if you call any methods which update state directly the server will not be notified and channel initialization logic in the connection may fail unexpectedly.", "Heuristic": ["H1"]}, {"nl": "Get the attached TokenReference", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets the creates the time stamp.", "Heuristic": ["H1"]}, {"nl": "This method needs to be called before event is sent to event dispatcher.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets optional data which can be used for tracking", "Heuristic": []}, {"nl": "Provide information about revised graphs", "Heuristic": []}, {"nl": "Utility function. Necessary for use in a HashSet or HashMap.", "Heuristic": []}, {"nl": "Retrieves a short field from the stream.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Recursively uploads files to Box account", "Heuristic": []}, {"nl": "Moves the clock forward the specified amount of time.", "Heuristic": []}, {"nl": "Adds a query response to the cached set of results.", "Heuristic": []}, {"nl": "Convert a json string to an object of the specified type.", "Heuristic": ["H1"]}, {"nl": "Gets the user name.", "Heuristic": ["H1"]}, {"nl": "Returns an iterable whose iterator returns the given elements in order. The elements are copied out of the source collection at the time this method is called.", "Heuristic": []}, {"nl": "Assert that an object is not  {@code null} .Assert.notNull(clazz, \"The class must not be null\");", "Heuristic": ["H1"]}, {"nl": "Decomposes and overwrites the input matrix.", "Heuristic": []}, {"nl": "Gets the value of the serviceAccount property.", "Heuristic": []}, {"nl": "Generates the SQL Statement for droping the table", "Heuristic": ["H1"]}, {"nl": "Roundtrip a transaction so that it appears as if it has just come from the wire", "Heuristic": []}, {"nl": "Get claims map", "Heuristic": []}, {"nl": "Sets the velocity engine.", "Heuristic": []}, {"nl": "Writes out the domain hierarchy component of the RIFL document", "Heuristic": ["H1"]}, {"nl": "Convert a cookie list into a JSONObject. A cookie list is a sequence of name/value pairs. The names are separated from the values by '='. The pairs are separated by ';'. The names and the values will be unescaped, possibly converting '+' and '%' sequences. To add a cookie to a cooklist, cookielistJSONObject.put(cookieJSONObject.getString(\"name\"), cookieJSONObject.getString(\"value\"));", "Heuristic": ["H1"]}, {"nl": "get boolean value.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link StorageDirView#getDirViewIndex()} method.", "Heuristic": ["H1"]}, {"nl": "Sorts a given array of negative and position elements such that all negative elements are before positive keeping their orginal order.", "Heuristic": ["H1"]}, {"nl": "Creates an instance of  {@link SSLIOSession} decorating the given{@link IOSession}.  This method can be overridden in a super class in order to provide a different implementation of SSL I/O session.", "Heuristic": ["H1"]}, {"nl": "Returns a list of all the symbols in the premise of this horn clause", "Heuristic": []}, {"nl": "Not required", "Heuristic": ["H2"]}, {"nl": "Retrieve the user object for the specified cookie.", "Heuristic": []}, {"nl": "Sorts a given set of lineages topologically.", "Heuristic": []}, {"nl": "Get the column that was last edited", "Heuristic": []}, {"nl": "Appends an  {@link android.view.accessibility.AccessibilityRecord} to the end ofevent records.", "Heuristic": ["H1"]}, {"nl": "Required.", "Heuristic": ["H2"]}, {"nl": "Returns a  {@link Weigher} that uses the integer value as the weight.", "Heuristic": ["H1"]}, {"nl": "Sets the run id.", "Heuristic": ["H1"]}, {"nl": "Validate the incoming request for mandatory parameters.", "Heuristic": []}, {"nl": "Gets the predecessor id.", "Heuristic": ["H1"]}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.parser.ZDAParser#getMonth()}.", "Heuristic": ["H1"]}, {"nl": "Convert from SP to PX", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.SentenceFactory#createParser(java.lang.String)}.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Tests the  {@link FileUtils#createFile(String)} method.", "Heuristic": ["H1"]}, {"nl": "check if forcing a cache expire time maximum value", "Heuristic": ["H1"]}, {"nl": "Encodes a byte array into Base64 format. No blanks or line breaks are inserted in the output.", "Heuristic": []}, {"nl": "read boolean", "Heuristic": ["H1", "H2"]}, {"nl": "Returns true if this key may be used to push changes.", "Heuristic": []}, {"nl": "Looks up a search term and returns a set of URLs.", "Heuristic": []}, {"nl": "Return all rules from all rulesets.", "Heuristic": ["H1"]}, {"nl": "Returns the String representation of Date. Formats the date in ddmmyy format used in NMEA 0183 sentences.", "Heuristic": ["H1"]}, {"nl": "Return the state for the the task.", "Heuristic": ["H1"]}, {"nl": "Retrieve a length from the format string. Either for a repeat count or a string length. Return one if no explicit repeat count. \\param advance whether to move the stream position.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets the value of the defaultValue property.", "Heuristic": []}, {"nl": "Copies service name from request to response.", "Heuristic": []}, {"nl": "Gets the message body.", "Heuristic": []}, {"nl": "Gets the value of the displayName property.", "Heuristic": []}, {"nl": "Generates a password.", "Heuristic": []}, {"nl": "Sets an optional title for the dialog; maximum length is 50 characters.", "Heuristic": []}, {"nl": "Set the list of additional user subject properties", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns a currently registered server by id. Servers are registered once startup, and unregistered when stopped.", "Heuristic": ["H1"]}, {"nl": "Check if the user has already stored a positive approval decision for this site; or if the site is whitelisted, approve it automatically. Otherwise, return false so that the user will see the approval page and can make their own decision.", "Heuristic": []}, {"nl": "Get the local sequence utility for a given cell in the projected q-matrix", "Heuristic": []}, {"nl": "Set the internal build number", "Heuristic": []}, {"nl": "Just a wrapper to {@link UserAction#isEnabledForFileBrowsing(HttpServletRequest)}.", "Heuristic": ["H1"]}, {"nl": "Tests to ensure  {@link SwiftOutputStream#write(int)} calls {@link OutputStream#write(int)}.", "Heuristic": ["H1"]}, {"nl": "Converts to a String representation of the object.", "Heuristic": []}, {"nl": "The file before it is compressed", "Heuristic": []}, {"nl": "getStreet returns a String representing the street in a UBL address.", "Heuristic": ["H1"]}, {"nl": "Given a method, which may come from an interface, and a targetClass used in the current AOP invocation, find the most specific method if there is one. E.g. the method may be IFoo.bar() and the target class may be DefaultFoo. In this case, the method may be DefaultFoo.bar(). This enables attributes on that method to be found.", "Heuristic": ["H1"]}, {"nl": "get datetime", "Heuristic": ["H1", "H2"]}, {"nl": "Set the certificate constraints type", "Heuristic": []}, {"nl": "This method is not public since it is meant to be used  exclusively by TabProps.", "Heuristic": ["H1"]}, {"nl": "Creates a sha1 out from a given data.", "Heuristic": []}, {"nl": "Get the address from the provided endpoint reference.", "Heuristic": []}, {"nl": "Returns a  {@link MavenResource} for the provided location.", "Heuristic": ["H1"]}, {"nl": "Converts a wire type to a thrift type.", "Heuristic": []}, {"nl": "Computes the length of the non-parallel sides of a trapezoid. All the lengths should be of the same unit of measure.", "Heuristic": []}, {"nl": "Gets the net addresses for all workers which have the block's data in their tiered storage.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.provider.AbstractProvider#sentenceRead(net.sf.marineapi.nmea.event.SentenceEvent)}.", "Heuristic": ["H1"]}, {"nl": "Get the Report to which Rule Violations are sent.", "Heuristic": []}, {"nl": "Returns a directory view for the given index.", "Heuristic": []}, {"nl": "Assert that  {@code superType.isAssignableFrom(subType)} is {@code true}. Assert.isAssignable(Number.class, myClass);", "Heuristic": ["H1"]}, {"nl": "Close the output.", "Heuristic": []}, {"nl": "Estimates the number of output records in the projection, which is the same as in the underlying query.", "Heuristic": []}, {"nl": "Sets the applink url that will be used for deep-linking", "Heuristic": ["H1"]}, {"nl": "Add an alias/password pair to the callback mechanism.", "Heuristic": []}, {"nl": "Sets the value of the key property.", "Heuristic": []}, {"nl": "Deactivate the glasspane", "Heuristic": ["H1"]}, {"nl": "Gets empty item view", "Heuristic": []}, {"nl": "The component we are decorating.", "Heuristic": []}, {"nl": "Justifies spinnerwheel", "Heuristic": ["H1", "H2"]}, {"nl": "Efficiently looks up items with a  {@link RubySymbol Symbol} key", "Heuristic": ["H1"]}, {"nl": "Tests the read() method.", "Heuristic": []}, {"nl": "Return the public interface of the Dag engine service.", "Heuristic": []}, {"nl": "decode the base 64 encoded String data writing it to the given output stream, whitespace characters will be ignored.", "Heuristic": ["H1"]}, {"nl": "Create a program that satisfies an OP_CHECKMULTISIG program, using pre-encoded signatures.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the noRun property.", "Heuristic": []}, {"nl": "Handle event from the RawRtfParser.", "Heuristic": ["H1"]}, {"nl": "Gets the  {@link UserSubject} representing the resource owner", "Heuristic": ["H1"]}, {"nl": "Set the ConditionsProvider", "Heuristic": []}, {"nl": "Returns true if the node has no parent.", "Heuristic": []}, {"nl": "Returns true if the given state is a goal state.", "Heuristic": []}, {"nl": "Set the first value.", "Heuristic": []}, {"nl": "Gets the uri attribute of the StylesheetInfo object", "Heuristic": ["H1"]}, {"nl": "Tests that an exception is thrown when the unsupported  {@link DataNettyBuffer#getNettyOutput()}method is used.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Renders the XML file as an image file at the target location. Width must be provided, height is determined automatically based on content and CSS.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Tests that a new location can be created with the constructor.", "Heuristic": []}, {"nl": "URL path segments may contain '+' symbols which should not be decoded into ' ' This method replaces '+' with %2B and delegates to URLDecoder", "Heuristic": ["H1"]}, {"nl": "Gets the value of the responseType property.", "Heuristic": []}, {"nl": "Attempts to connect the given handler to this, returning true if it is the new handler, false if there was already one attached.", "Heuristic": []}, {"nl": "Sets coefficient to be used in heuristic freshness caching. This is interpreted as the fraction of the time between the  {@code Last-Modified}and  {@code Date} headers of a cached response during which the cachedresponse will be considered heuristically fresh.", "Heuristic": ["H1"]}, {"nl": "Accessor for the To property.", "Heuristic": ["H1"]}, {"nl": "Indica si el usuario esta bloqueado o no.", "Heuristic": ["H1"]}, {"nl": "Format a  {@link Date} according to the ISO 8601 specification.", "Heuristic": ["H1"]}, {"nl": "The total sum of work done in this block, and all the blocks below it in the chain. Work is a measure of how many tries are needed to solve a block. If the target is set to cover 10% of the total hash value space, then the work represented by a block is 10.", "Heuristic": []}, {"nl": "Returns the length of a record, in bytes.", "Heuristic": []}, {"nl": "Helper for success callbacks that just returns the Status.OK by default", "Heuristic": ["H1"]}, {"nl": "Returns the  {@link Comparator} used.", "Heuristic": ["H1"]}, {"nl": "Add a constant to the rank of this node.", "Heuristic": []}, {"nl": "Append or replace existing checksum in specified NMEA sentence.", "Heuristic": ["H1"]}, {"nl": "returns true if given strings are permutation of each other", "Heuristic": ["H1"]}, {"nl": "Advises the manager to ignore attributes with certain keys.", "Heuristic": []}, {"nl": "Gets the value of the nestedComplexNodes property.  This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a set method for the nestedComplexNodes property.  For example, to add a new item, do as follows:  getNestedComplexNodes().add(newItem);   Objects of the following type(s) are allowed in the list {@link ComplexNode }", "Heuristic": ["H1"]}, {"nl": "get EaseUser according username", "Heuristic": ["H1"]}, {"nl": "Quits this queue's Looper. If that Looper was running on a different Thread than the current Thread, also waits for the last message being processed to finish and the Thread to die.", "Heuristic": ["H1"]}, {"nl": "Test method for  {@link com.alibaba.dubbo.registry.support.injvm.InjvmRegistry#register(java.util.Map)}.", "Heuristic": ["H1"]}, {"nl": "Returns an  {@link Escaper} instance that escapes strings so they can be safely included in aURL fragment. The returned escaper escapes all non-ASCII characters, even though many of these are accepted in modern URLs. When escaping a String, the following rules apply:  The alphanumeric characters \"a\" through \"z\", \"A\" through \"Z\" and \"0\" through \"9\" remain the same. The unreserved characters \".\", \"-\", \"~\", and \"_\" remain the same. The general delimiters \"@\" and \":\" remain the same. The subdelimiters \"!\", \"$\", \"&amp;\", \"'\", \"(\", \")\", \"\", \"+\", \",\", \";\", and \"=\" remain the same. The space character \" \" is converted into %20. Fragments allow unescaped \"/\" and \"?\", so they remain the same. All other characters are converted into one or more bytes using UTF-8 encoding and each byte is then represented by the 3-character string \"%XY\", where \"XY\" is the two-digit, uppercase, hexadecimal representation of the byte value.  Note: Unlike other escapers, URL escapers produce uppercase hexadecimal sequences.", "Heuristic": ["H1"]}, {"nl": "Determine if current messaging role is that of requestor.", "Heuristic": []}, {"nl": "set the resource id of the big icon", "Heuristic": ["H1"]}, {"nl": "Creates the default  {@link Permission} for a file or a directory. Both owner and group areempty and the \"full access\" mode is used.", "Heuristic": ["H1"]}, {"nl": "Test method for  {@link NotificationController#handleEvent(org.osgi.service.event.Event)}Verifies that  {@code IllegalArgumentException} is thrown when {@code Event}'s {@link Notification#NOTIFICATION_KEY_TITLE property is empty.}", "Heuristic": ["H1"]}, {"nl": "is Running Thread? checking if the thread has the right to run now", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link GetPriceResponse }", "Heuristic": ["H1"]}, {"nl": "get succeeded max elapsed.", "Heuristic": ["H1"]}, {"nl": "Exit action.", "Heuristic": ["H2"]}, {"nl": "Is the matrix nonsingular?", "Heuristic": ["H1"]}, {"nl": "Test case for  {@link GCSUnderFileSystem#rename(String,String)}.", "Heuristic": ["H1"]}, {"nl": "Set the issuer of this SAML realm", "Heuristic": []}, {"nl": "Decodes an encoded short from the stream. This method does bounds checking, to ensure values fit, since some values may be encoded as unsigned values, and Java types are all signed.", "Heuristic": ["H1"]}, {"nl": "Clear history.", "Heuristic": ["H2"]}, {"nl": "Estimates the number of output records in the selection, which is determined by the  reduction factor of the predicate.", "Heuristic": ["H1"]}, {"nl": "Readable version of the remote.", "Heuristic": []}, {"nl": "Set the satellite signal noise ratio, in dB (0-99 dB).", "Heuristic": []}, {"nl": "Check whether the given Enumeration contains the given element.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "encode the input data producing a Hex encoded byte array.", "Heuristic": ["H1"]}, {"nl": "Transpose of a matrix - Swap the columns with rows", "Heuristic": []}, {"nl": "{@link Joiner} with a string delimiter.", "Heuristic": []}, {"nl": "Converts a wire type to a thrift type.", "Heuristic": []}, {"nl": "Gets the content of critic.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.HDGParser#setDeviation(double)}.", "Heuristic": ["H1"]}, {"nl": "Reads a gson object from the specified url.", "Heuristic": ["H1"]}, {"nl": "Set the list of additional client properties", "Heuristic": []}, {"nl": "Gets the value of the projectName property.", "Heuristic": []}, {"nl": "Returns a string representation of the current elapsed time.", "Heuristic": []}, {"nl": "Get an attribute value on the RuleContext.  Attributes can be shared between RuleContext instances. This operation is thread-safe.  Attribute values should be modified directly via the reference provided. It is not necessary to call setAttribute(String, Object) to update an attribute value. Modifications made to the attribute value will automatically be seen by other threads. Because of this, you must ensure the attribute values are themselves thread safe.", "Heuristic": []}, {"nl": "Tries to walk a step into the TiledMap. If possible to walk in the specified direction (no obstacle), remove the character from current tile and adds in next tile.", "Heuristic": []}, {"nl": "precondition: tally.size() > 0; tally contains Integer objects 0 < k <= total number of values in data collection postcondition: returns the kth value in the data collection represented by tally", "Heuristic": ["H1"]}, {"nl": "Capture a screenshot with the provided name using the default  {@link ScreenshotStrategy}", "Heuristic": ["H1"]}, {"nl": "Returns a map of entities parsed by this resolver.", "Heuristic": []}, {"nl": "Gets Cleaner XSS User Input. In addition to applying antisamy rules, this method also escapes JavaScript characters.", "Heuristic": ["H1"]}, {"nl": "Sets up the buffer before a test runs.", "Heuristic": []}, {"nl": "Hook for redirecting requests. Applies to WebView requests as well as requests made by plugins.", "Heuristic": []}, {"nl": "get boolean preferences, default is false", "Heuristic": ["H1"]}, {"nl": "Whether server principal password for kerberos authentication is encrypted If the parameter is not set, default value is true", "Heuristic": ["H1"]}, {"nl": "Build response for configuration", "Heuristic": []}, {"nl": "Return true if this SecurityPolicyValidator implementation is capable of validating a  policy defined by the AssertionInfo parameter", "Heuristic": ["H1"]}, {"nl": "Tests that an exception is thrown when using the  {@link WebUtils#convertMsToClockTime(long)}method with a negative value.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Produce a JSONObject from a row of comma delimited text, using a parallel JSONArray of strings to provides the names of the elements.", "Heuristic": ["H1"]}, {"nl": "Get the inner-most enclosing namespace for the model element.", "Heuristic": ["H1"]}, {"nl": "Gets the User's Email ID.  Determined via Session.", "Heuristic": []}, {"nl": "encode the input data producing a Hex encoded byte array.", "Heuristic": ["H1"]}, {"nl": "Add a byte array field to the stream. \\param value The byte array value to be added. \\param off The offset from the start of value to begin using the array. \\param len The length of the value to encode.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Open the SlidingMenu and show the menu view.", "Heuristic": []}, {"nl": "If this type should correspond to a global, named, schema type, here is where the type object adds it to the schema.", "Heuristic": []}, {"nl": "update message", "Heuristic": ["H1", "H2"]}, {"nl": "Called when the service transitions to the  {@linkplain State#STOPPING STOPPING} state. Theonly valid values for  {@code from} are {@linkplain State#STARTING STARTING} or{@linkplain State#RUNNING RUNNING}. This occurs when  {@link Service#stopAsync} is called.", "Heuristic": ["H1"]}, {"nl": "Check whether the type  {@code t} or a subtype is in the set.Returns true iff it descends from, is equal to, or is a super type of one of the elements in the set.", "Heuristic": ["H1"]}, {"nl": "Gets the alpha-numeric ID of the gene set.", "Heuristic": ["H1"]}, {"nl": "Return  {@code true} if the supplied Collection is {@code null}or empty. Otherwise, return  {@code false}.", "Heuristic": ["H1"]}, {"nl": "Removes a timer name from the scheduler if it exists.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Path to your app's main module on the packager server. This is used when reloading JS during development. All paths are relative to the root folder the packager is serving files from. Examples: {@code \"index.android\"} or{@code \"subdirectory/index.android\"}", "Heuristic": []}, {"nl": "Returns a map of config data passed to JS that defines eligible events that can be placed on native views. This should return non-bubbling directly-dispatched event types. Returned map should be of the form: { \"onTwirl\": { \"registrationName\": \"onTwirl\" } }", "Heuristic": ["H1"]}, {"nl": "Get the panel that should be displayed now.  Usually called after the user pressed \"Next&gt;\" and next() has returned, or after the user pressed \"&lt;Back\" and back() has returned.  Also called when the user turns away from the wizard to do something else and then returns his or her attention to the wizard.", "Heuristic": ["H1"]}, {"nl": "Sets the transmission dataset id.", "Heuristic": ["H1"]}, {"nl": "Get the SecurityContext associated with this SecurityToken", "Heuristic": []}, {"nl": "Add an alias/password pair to the callback mechanism.", "Heuristic": []}, {"nl": "Obtains value of the  {@link CoreConnectionPNames#TCP_NODELAY} parameter.If not set, defaults to true.", "Heuristic": ["H1"]}, {"nl": "Return a list of all languages extensions active in the compiler.", "Heuristic": []}, {"nl": "Send a VERBOSE log message.", "Heuristic": []}, {"nl": "If the redirect url has been set, then we should send a redirect using it instead of processing things.", "Heuristic": ["H1"]}, {"nl": "Adds the child at the end.", "Heuristic": []}, {"nl": "Walk the list of registered EndpointResolvers, so as to force a fresh  resolution of the given abstract EPR, discarding any previously cached  reference.  This API may be used by say the transport-level Conduit when it detects a non-transient error on the outgoing connection, or by any other actor in the dispatch with the ability to infer server-side unavailability.", "Heuristic": ["H1"]}, {"nl": "Gets the  {@link ServletContextHandler} of the metrics servlet.", "Heuristic": ["H1"]}, {"nl": "Creates a scriptPubKey that encodes payment to the given raw public key.", "Heuristic": []}, {"nl": "Gets the value of the inputType property.", "Heuristic": []}, {"nl": "Sets value of the  {@link CoreConnectionPNames#CONNECTION_TIMEOUT}parameter.", "Heuristic": ["H1"]}, {"nl": "Checks if a specfied string represents a valid GET command.", "Heuristic": ["H1"]}, {"nl": "Puts the last refresh date into a Bundle.", "Heuristic": []}, {"nl": "Gets the parent nodes of the node.", "Heuristic": []}, {"nl": "we're starting the thread", "Heuristic": ["H1"]}, {"nl": "Produce a new lr_item_core that results from shifting the dot one position to the right.", "Heuristic": ["H1"]}, {"nl": "Tells if the factory is able to create parser for specified sentence type. All  {@link SentenceId} enum values should result returningtrue at all times.", "Heuristic": ["H1"]}, {"nl": "Ends the animation. This causes the animation to assign the end value of the property being animated, then calling the {@link android.animation.Animator.AnimatorListener#onAnimationEnd(Animator)} method onits listeners. This method must be called on the thread that is running the animation.", "Heuristic": ["H1"]}, {"nl": "This version of decode honors the intent of Reader.decode(BinaryBitmap) in that it passes null as a hint to the decoders. However, that makes it inefficient to call repeatedly. Use setHints() followed by decodeWithState() for continuous scan applications.", "Heuristic": []}, {"nl": "Get device status", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "By default delegates to  {@link Object#hashCode}. The dynamic proxies'  {@code hashCode()} willdelegate to this method. Subclasses can override this method to provide custom equality.", "Heuristic": ["H1"]}, {"nl": "Return a pretty print string for a JDOM Element.", "Heuristic": ["H1"]}, {"nl": "Creates a new ByteBuffer sliced from a given ByteBuffer. The new ByteBuffer shares the content of the existing one, but with independent position/mark/limit. After slicing, the new ByteBuffer has position 0, and the input ByteBuffer is unmodified.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Format an id created by this class as a hex string.", "Heuristic": ["H1"]}, {"nl": "Overring method for sorting by relativeFullPath, for comparison during scan", "Heuristic": ["H1"]}, {"nl": "Returns the number of times  {@link Cache} lookup methods have returned a cached value.", "Heuristic": ["H1"]}, {"nl": "Returns a String representation of this map entry. This implementation returns the string representation of this entry's key followed by the equals character (\"=\") followed by the string representation of this entry's value.", "Heuristic": ["H1"]}, {"nl": "Use this function instead of new String(byte[], int, int, String)  to avoid surprises from non-standard default encodings.", "Heuristic": ["H1"]}, {"nl": "Create an elementInfo that stores information about a global, named, element.", "Heuristic": []}, {"nl": "Clears all cookies.", "Heuristic": []}, {"nl": "Get Parameter Type.", "Heuristic": []}, {"nl": "Singleton instance class which returns RandomPasswordContainerCache instance", "Heuristic": []}, {"nl": "Sets the value of the name property.", "Heuristic": []}, {"nl": "Checks if Android is online", "Heuristic": []}, {"nl": "Prints the contents of the index.", "Heuristic": []}, {"nl": "Read a HashMap from a Parcel, class of key is String, class of Value can parcelable", "Heuristic": ["H1"]}, {"nl": "Return a workflow store instance with an existing transaction.  The workflow store has to be committed and then closed to commit changes, if only close it rolls back.", "Heuristic": []}, {"nl": "Write 24-bit of the given value in big-endian order to the buffer", "Heuristic": []}, {"nl": "Return EntityManager", "Heuristic": []}, {"nl": "Generates a new id for lineage.", "Heuristic": ["H1"]}, {"nl": "Render the floor.", "Heuristic": []}, {"nl": "Genesis block for this chain. The first block in every chain is a well known constant shared between all Bitcoin implemenetations. For a block to be valid, it must be eventually possible to work backwards to the genesis block by following the prevBlockHash pointers in the block headers. The genesis blocks for both test and prod networks contain the timestamp of when they were created, and a message in the coinbase transaction. It says, \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\".", "Heuristic": ["H1"]}, {"nl": "Sets the message users receiving the request will see. The maximum length is 60 characters.", "Heuristic": []}, {"nl": "Reads a message from the given ByteBuffer and returns it.", "Heuristic": []}, {"nl": "Checks whether the parameter is a valid standard (non-compressed) IPv6 address", "Heuristic": []}, {"nl": "Local session send heartbeat to local worker to keep its temporary folder.", "Heuristic": []}, {"nl": "By default, returns the simple name of the underlying class as given in the source code.", "Heuristic": []}, {"nl": "It returns the class name.", "Heuristic": []}, {"nl": "Obtains the  {@link ConnRoutePNames#FORCED_ROUTE FORCED_ROUTE}parameter value. {@link #NO_ROUTE} will be mapped to null,to allow unsetting in a hierarchy.", "Heuristic": ["H1"]}, {"nl": "the operations that are not relevant for analysis like \"not\" or casts are removed - array refs are only removed if explicitly stated BinOpExpr are divided into two values", "Heuristic": ["H1"]}, {"nl": "Sets the current background music.", "Heuristic": []}, {"nl": "Check whether the given Collection contains the given element instance. Enforces the given instance to be present, rather than returning {@code true} for an equal element as well.", "Heuristic": []}, {"nl": "Clears the attribute cache maintained by the PDP.", "Heuristic": []}, {"nl": "Asserts  {@link #isOnThread()}, throwing a  {@link AssertionException} (NOT an{@link AssertionError}) if the assertion fails.", "Heuristic": ["H1"]}, {"nl": "This is the standard way to report debugging information in the compiler.  It reports a message of the specified level (which controls the presentation of the message. To test whether such message should be reported, use \"should_report\". NOTE: This is a change of spec from earlier versions of Report. NOTE: If position information is available, call report(int, String, Position) instead, to ensure the error is associated with the right file/location.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Send the connection a message for the specified channel.", "Heuristic": []}, {"nl": "Get the entropy associated with the token.", "Heuristic": []}, {"nl": "Gets the Default mutation profile. An individual cancer study may have multiple mutation profiles associated with it. It is sometimes useful, however to have a single \"default\" mutation profile. The default mutation profile is defined as the first mutation profile associated with the associated cancer study.", "Heuristic": []}, {"nl": "Implementation of  {@link Collection#toArray(Object[])} for collections backed by an objectarray. the runtime type of the returned array is that of the specified array. If the collection fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of the specified collection. If the collection fits in the specified array with room to spare (i.e., the array has more elements than the collection), the element in the array immediately following the end of the collection is set to  {@code null}. This is useful in determining the length of the collection only if the caller knows that the collection does not contain any null elements.", "Heuristic": ["H1"]}, {"nl": "Parses the date value using the given date formats.", "Heuristic": []}, {"nl": "Gets an entry from the cache, if it exists", "Heuristic": []}, {"nl": "Gets the cached last refresh date from a Bundle.", "Heuristic": []}, {"nl": "Sets f and calculates the shared secret.", "Heuristic": []}, {"nl": "Sets the portico config entity manager.", "Heuristic": []}, {"nl": "Sets the refresh token key the client can use to obtain a new access token", "Heuristic": []}, {"nl": "TODO : adding fullHashes as column names in FULLHASH_CF column family !!", "Heuristic": ["H1"]}, {"nl": "Returns domain attribute of the cookie.", "Heuristic": []}, {"nl": "Create a versioned notation name with an icon.", "Heuristic": []}, {"nl": "Return true if this TokenValidator implementation is capable of validating the ReceivedToken argument. The realm is ignored in this token Validator.", "Heuristic": []}, {"nl": "Returns a single row the database", "Heuristic": []}, {"nl": "Resets the cluster to original state.", "Heuristic": []}, {"nl": "Method endDocument.", "Heuristic": []}, {"nl": "Called by the selector when the underlying server socket is ready to accept a connection. This method should not be called from anywhere else.", "Heuristic": []}, {"nl": "Required This is the text field. You can use JSON style in this field", "Heuristic": []}, {"nl": "Checks whether the given string is the name of a location.", "Heuristic": []}, {"nl": "Wraps a collection of tasks.", "Heuristic": []}, {"nl": "Enable association to allow to execute", "Heuristic": ["H1"]}, {"nl": "Sets the Cancer Study Id of a gistic", "Heuristic": ["H1"]}, {"nl": "Sets optional data which can be used for tracking; maximum length is 255 characters.", "Heuristic": []}, {"nl": "Get Color.", "Heuristic": ["H2"]}, {"nl": "Get the  {@link Client} reference", "Heuristic": ["H1"]}, {"nl": "Each result has a level to describe its verbosity", "Heuristic": []}, {"nl": "Decodes an encoded integer from the stream. This method does bounds checking, to ensure values fit, since some values may be encoded as unsigned values, and Java types are all signed.", "Heuristic": ["H1"]}, {"nl": "Method endPrefixMapping.", "Heuristic": []}, {"nl": "Tells the node that the current values in  {@link #layout} have been seen. Subsequent callsto  {@link #hasNewLayout()} will return false until this node is laid out with new parameters.You must call this each time the layout is generated if the node has a new layout.", "Heuristic": ["H1"]}, {"nl": "get failed max elapsed.", "Heuristic": ["H1"]}, {"nl": "Returns the estimated number of blocks in the table.", "Heuristic": []}, {"nl": "Writes the page to its disk block if the page is dirty. The method ensures that the corresponding log record has been written to disk prior to writing the page to disk.", "Heuristic": []}, {"nl": "Returns a  {@link Weigher} that returns the given {@code constant} for every request.", "Heuristic": ["H1"]}, {"nl": "Throws a GeneratorError if the input list doesn't have at least this many bytes left.", "Heuristic": []}, {"nl": "Returns the remainder of 'reader' as a string, closing it when done.", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.parser.MWVParser#getSpeed()}.", "Heuristic": ["H1"]}, {"nl": "Test of setTsReceived method, of class LogEntryRequest.", "Heuristic": []}, {"nl": "Back-propagation: using the result of the play-out, update information in the nodes on the path from C to Root.", "Heuristic": []}, {"nl": "Verify that the listener completes in a reasonable amount of time, and Asserts that the future throws an  {@code ExecutableException} and that thecause of the  {@code ExecutableException} is {@code expectedCause}.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the executionStartDateTime property.", "Heuristic": []}, {"nl": "Create a program that satisfies an OP_CHECKMULTISIG program.", "Heuristic": ["H1"]}, {"nl": "Argument will be declared valid.", "Heuristic": []}, {"nl": "Creates a PropertyDeclaration suitable for passing to {@link #createLayoutStyle(PropertyDeclaration[])} or{@link #createLayoutStyle(CascadedStyle,PropertyDeclaration[])}", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Finds the next valid line of words in the stream and extracts them.", "Heuristic": []}, {"nl": "set selected", "Heuristic": ["H1", "H2"]}, {"nl": "If the currently selected object is a diagram, then update the name-field.  MVW: I added the stopEvents mechanism, because otherwise updating the field causes the UML model to be adapted!", "Heuristic": ["H1"]}, {"nl": "Returns a number between 0 and 255", "Heuristic": []}, {"nl": "Create a five-component configuration key.", "Heuristic": []}, {"nl": "Checks if all the output files of the given lineage are completed.", "Heuristic": []}, {"nl": "Remove everything in the cache.", "Heuristic": []}, {"nl": "Get the Expressions value.", "Heuristic": []}, {"nl": "Sets the value of the result property.", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.parser.XDRParser#setMeasurement(java.util.List)}.", "Heuristic": ["H1"]}, {"nl": "selects a diagram without affecting the gui.", "Heuristic": ["H1"]}, {"nl": "Given an index in the range 0...size()-1, returns the key from the indexth key-value mapping that this SparseArray stores.", "Heuristic": ["H1"]}, {"nl": "Get a single UserInfo object by its email address", "Heuristic": []}, {"nl": "Request specific amount of Bitcoins from user, without feedback from the app.", "Heuristic": []}, {"nl": "Specifies the maximum recursive depth that the skip function will traverse before throwing a TException.  This is a global setting, so any call to skip in this JVM will enforce this value.", "Heuristic": []}, {"nl": "Set the WebEngine that this runtime should use.", "Heuristic": []}, {"nl": "Checks if the arguments are valid.", "Heuristic": []}, {"nl": "Build the issuer object", "Heuristic": []}, {"nl": "Two rows are equal if they contain the same pairs in the same order.", "Heuristic": []}, {"nl": "Sets the receipt date type.", "Heuristic": []}, {"nl": "Renders the XML file at the given URL as a PDF file at the target location.", "Heuristic": []}, {"nl": "Simply creates a string that formats the template filename with line number and column. We use this routine to provide a cosistent format for displaying file errors.", "Heuristic": ["H1"]}, {"nl": "Converts a javax.xml.soap.SOAPElement to a String Can be used for soapUI requests Be carefull: To convert a SOAPMessage sm, you must use sm.getSOAPPart().getEnvelope();", "Heuristic": ["H1"]}, {"nl": "Returns the path attribute of the cookie", "Heuristic": []}, {"nl": "for unsupported or invalid CSS", "Heuristic": ["H1"]}, {"nl": "creates a new folder in the Box account", "Heuristic": ["H1"]}, {"nl": "Returns a vector from the PCA's basis.", "Heuristic": []}, {"nl": "Declares the argument value to be invalid. Gui will be redrawn but with a warning drawn in red above the entry widget.", "Heuristic": ["H1"]}, {"nl": "Verifies the byte-by-byte read returns the correct data, for the first block in the file.", "Heuristic": []}, {"nl": "Cancels the count down animation.", "Heuristic": ["H1"]}, {"nl": "Returns null if block is pinned or currently being locked, otherwise returns {@link BlockMetadataManager#getBlockMeta(long)}.", "Heuristic": []}, {"nl": "Set the value of rating", "Heuristic": []}, {"nl": "Create an instance of  {@link TestReport }", "Heuristic": ["H1"]}, {"nl": "Get the start day of month/1/year", "Heuristic": []}, {"nl": "Creates an instance of  {@link HttpMessageWriter} to be used forwriting out HTTP requests sent over this connection.  This method can be overridden in a super class in order to provide a different implementation of the  {@link HttpMessageWriter} interface orto pass a different implementation of  {@link LineFormatter} to thethe default implementation  {@link HttpRequestWriter}.", "Heuristic": ["H1"]}, {"nl": "Lists the Groups created from SCIM", "Heuristic": []}, {"nl": "Gets the value of the scenario property.", "Heuristic": []}, {"nl": "Create an instance of  {@link MetaData.WorkflowImpl }", "Heuristic": ["H1"]}, {"nl": "To retrieve request query params which are stored.", "Heuristic": ["H1"]}, {"nl": "object item.", "Heuristic": ["H1", "H2"]}, {"nl": "Get this node's direction, as defined in the style.", "Heuristic": []}, {"nl": "Stores the given reason phrase, by status code. Helper method to initialize the static lookup map.", "Heuristic": []}, {"nl": "Registers a handler and returns the callback key to be passed to  Javascript.", "Heuristic": ["H1"]}, {"nl": "Activates the event.", "Heuristic": []}, {"nl": "Check if the authentication is still valid", "Heuristic": []}, {"nl": "Sets the value of the inputData property.", "Heuristic": []}, {"nl": "Returns a list of strings from the specified key using the specified string separator.", "Heuristic": []}, {"nl": "Handles the given exception thrown by a subscriber with the given context.", "Heuristic": []}, {"nl": "Called after a cache miss to compute a value for the corresponding key. Returns the computed value or null if no value can be computed. The default implementation returns null.  The method is called without synchronization: other threads may access the cache while this method is executing.  If a value for  {@code key} exists in the cache when this methodreturns, the created value will be released with  {@link #entryRemoved}and discarded. This can occur when multiple threads request the same key at the same time (causing multiple values to be created), or when one thread calls  {@link #put} while another is creating a value for the samekey.", "Heuristic": ["H1"]}, {"nl": "Get the permission value such as \"read_calendar\"", "Heuristic": []}, {"nl": "Tells whether or not the  {@link AlluxioURI} is root. A URI is root if its path equals to \"/\" ", "Heuristic": ["H1"]}, {"nl": "Extracts a correct  {@link ByteBuffer} from Thrift RPC result.", "Heuristic": ["H1"]}, {"nl": "Update the level.", "Heuristic": []}, {"nl": "The nullity of the decomposed matrix.", "Heuristic": []}, {"nl": "Reads a message from the given ByteBuffer and returns it.", "Heuristic": []}, {"nl": "This method considers the various roots of the specified output size (in blocks), and returns the highest root that is less than the number of available buffers.", "Heuristic": []}, {"nl": "Gets an array of long values out of the object.", "Heuristic": []}, {"nl": "Binds this socket to the specified local serviceID.", "Heuristic": []}, {"nl": "Just for debugging XML feeds.", "Heuristic": []}, {"nl": "Tests the  {@link DataByteBuffer#getReadOnlyByteBuffer()} method.", "Heuristic": ["H1"]}, {"nl": "If needed declares and sets up internal data structures.", "Heuristic": []}, {"nl": "Sets the cookie handler to be used to read outgoing cookies and write incoming cookies. If unset, the  {@link CookieHandler#getDefault() system-wide default}cookie handler will be used.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Determine if running on Android by inspecting java.runtime.name property.", "Heuristic": []}, {"nl": "Return if a callback URL is valid or not.", "Heuristic": []}, {"nl": "Error log message.", "Heuristic": []}, {"nl": "Sets the numeric value of a configuration property.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Tests that flushing twice works.", "Heuristic": []}, {"nl": "This method registers the PermissionsResultAction object for the specified permissions so that it will know which permissions to look for changes to. The PermissionsResultAction will then know to look out for changes to these permissions.", "Heuristic": []}, {"nl": "Estimates the number of block accesses in the projection, which is the same as in the underlying query.", "Heuristic": []}, {"nl": "Called on the event dispatching thread (not on the worker thread) after the construct method has returned.", "Heuristic": []}, {"nl": "Returns the number of values that have been evicted.", "Heuristic": []}, {"nl": "Returns the string value of the specified field. The value is obtained from whichever scan contains the field.", "Heuristic": []}, {"nl": "Sets objects from the given map.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.GSVParser#getSentenceCount()}.", "Heuristic": ["H1"]}, {"nl": "Returns a reference to a character buffer containing the results of the stemming process.  You also need to consult getResultLength() to determine the length of the result.", "Heuristic": []}, {"nl": "The main loop of this worker. If initialization succeeds, this method will only return after  {@link #shutdown shutdown()}. Only one thread can execute the main loop at any time.", "Heuristic": ["H1"]}, {"nl": "Returns the minimum number of threads to keep alive for background revalidations due to the  {@code stale-while-revalidate} directive.", "Heuristic": ["H1"]}, {"nl": "Writes a specific integer value (4 bytes) to the output byte buffer at the given offset.", "Heuristic": []}, {"nl": "Gets the current time.", "Heuristic": []}, {"nl": "Adds a new integer Parameter.", "Heuristic": []}, {"nl": "Set the file name associated with the current source file.", "Heuristic": []}, {"nl": "Returns the number of keys in this hashtable.", "Heuristic": ["H1"]}, {"nl": "Checks that an object is not null.", "Heuristic": []}, {"nl": "Update schedule", "Heuristic": ["H2"]}, {"nl": "Adds a location of the block. It means that the worker has the block in one of its tiers.", "Heuristic": []}, {"nl": "Asserts that the command exited with the expected exit code and that the given expected output is contained in the actual command output.", "Heuristic": []}, {"nl": "Checks whether a prefix of  {@code path} is in the prefix list.", "Heuristic": ["H1"]}, {"nl": "Get the map of properties which affect the requests only.  These additional properties may be optionally set after a  proxy or WebClient has been created.", "Heuristic": ["H1"]}, {"nl": "Getter for property 'summary'.", "Heuristic": []}, {"nl": "Sets the src file name.", "Heuristic": []}, {"nl": "Ensures that the capacity is at least equal to the specified minimum. If the current capacity is less than the argument, then a new internal array is allocated with greater capacity. If the required argument is non-positive, this method takes no action.", "Heuristic": []}, {"nl": "Binary searches the list for the specified key, using the specified key function. Equivalent to  {@link #binarySearch(List,Function,Object,Comparator,KeyPresentBehavior,KeyAbsentBehavior)} using {@link Ordering#natural}.", "Heuristic": ["H1"]}, {"nl": "Add a control", "Heuristic": []}, {"nl": "Waits until the given thread can be executed, throwing an unchecked exception of the given timeout expires.", "Heuristic": ["H1"]}, {"nl": "Attempts to move the AI to the block.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Matches any Labeled Node that has a label that matches the given stringMatcher.", "Heuristic": []}, {"nl": "get long value.", "Heuristic": ["H1"]}, {"nl": "Builds a  {@code Pattern} from the given String argument.", "Heuristic": ["H1"]}, {"nl": "Returns true if this ref has been deleted.", "Heuristic": []}, {"nl": "Gets the value of the customInputType property.", "Heuristic": []}, {"nl": "Sets all of the headers contained within this group overriding any existing headers. The headers are added in the order in which they appear in the array.", "Heuristic": ["H1"]}, {"nl": "Returns the string representation of a flag. For example, {@link AccessibilityServiceInfo#DEFAULT} is represented by thestring DEFAULT.", "Heuristic": ["H1"]}, {"nl": "Asserts that the given Object isn't null, throwing an  {@link AssertionException} if it was.", "Heuristic": ["H1"]}, {"nl": "Sets the mask to cover all visibilities.", "Heuristic": ["H1"]}, {"nl": "Returns the length of this buffer.", "Heuristic": []}, {"nl": "Tests the  {@link IndexedSet#contains(IndexDefinition,Object)} method.", "Heuristic": ["H1"]}, {"nl": "Establish a namespace context that will be used in  {@link org.xmlunit.diff.Comparison.Detail#getXPath Comparison.Detail#getXPath}. Without a namespace context (or with an empty context) the XPath expressions will only use local names for elements and attributes.", "Heuristic": ["H1"]}, {"nl": "check test source with the control source for identically.  This is the Default.", "Heuristic": ["H1"]}, {"nl": "PUT  /sites : Updates an existing site.", "Heuristic": ["H1"]}, {"nl": "Equivalent to invoking reshape(numRows,numCols,false);", "Heuristic": ["H1"]}, {"nl": "POST  /account/change_password : changes the current user's password", "Heuristic": ["H1"]}, {"nl": "Test method for {@link com.sqa.em.util.helper.RequestInput#getInt(java.lang.String)}.", "Heuristic": ["H1"]}, {"nl": "Gets the stylesheet attribute of the StylesheetInfo object", "Heuristic": []}, {"nl": "clear all SpringConfig in the registry", "Heuristic": ["H1"]}, {"nl": "Returns an int from a string representation of a file size. e.g. 50m = 50 megabytes", "Heuristic": ["H1"]}, {"nl": "Gets the data source", "Heuristic": []}, {"nl": "Puts the specified name/value pair in the specified JSON object.", "Heuristic": []}, {"nl": "Used to read data set", "Heuristic": []}, {"nl": "Whether the bitmap is safe to be used again", "Heuristic": []}, {"nl": "Tests whether item is contained by range", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.VTGParser#setTrueCourse(double)}.", "Heuristic": ["H1"]}, {"nl": "Set passive auth. Whether the authentication request is a passive one", "Heuristic": []}, {"nl": "Returns the  {@link Invokable} that declares this parameter.", "Heuristic": ["H1"]}, {"nl": "Provides the type to the SessionPersistence's Builder.", "Heuristic": []}, {"nl": "Obtains the scheme for a host. Convenience method for getScheme(host.getSchemeName())", "Heuristic": []}, {"nl": "Sets the value of the step property.", "Heuristic": []}, {"nl": "Gets the list of blocks removed from this worker in the heartbeat this report represents.", "Heuristic": []}, {"nl": "Converts a given Image into a BufferedImage", "Heuristic": []}, {"nl": "Store the current item in the inventory.", "Heuristic": []}, {"nl": "Adds the given pair of values to the dataset.", "Heuristic": []}, {"nl": "return the names of genes in this spec; may contain duplicates", "Heuristic": ["H1"]}, {"nl": "Sets value of the  {@link CoreProtocolPNames#USE_EXPECT_CONTINUE} parameter.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Set whether the entropy represents a Computed Key or not", "Heuristic": []}, {"nl": "get a redirect for an url: this method shall be called if it is expected that a url is redirected to another url. This method then discovers the redirect.", "Heuristic": ["H1"]}, {"nl": "Tests the array read when completely reading the first block of the file.", "Heuristic": []}, {"nl": "Test method for  {@link ActivityController#registerUserSession(ServerSession,ServerMessage)}. Verifies that method throws  {@code NullPointerException} when ServerSession ID is null.", "Heuristic": ["H1"]}, {"nl": "Verifies the byte by byte read is equal to an increasing byte array, where the written data is an increasing byte array.", "Heuristic": []}, {"nl": "Adds all of the specified ranges to this range set (optional operation). After this operation, this range set is the minimal range set that  {@linkplain #enclosesAll(RangeSet) encloses} boththe original range set and each range in  {@code other}. This is equivalent to calling  {@link #add} on each of the ranges in {@code other} in turn.", "Heuristic": ["H1"]}, {"nl": "Gets the number of entries in this result object", "Heuristic": []}, {"nl": "Big-endian bytes to short.", "Heuristic": []}, {"nl": "Sets the  {@link ScopeProvider} that provides a scope to be usedfor script evaluation.", "Heuristic": ["H1"]}, {"nl": "Gets evictable bytes for this dir, i.e., the total bytes of total evictable blocks.", "Heuristic": ["H1"]}, {"nl": "Deprecated. Please use  {@link AppEventsLogger} instead.", "Heuristic": ["H1"]}, {"nl": "Returns true if there's another route to attempt. Every address has at least one route.", "Heuristic": []}, {"nl": "Determine if a file or directory exists.", "Heuristic": []}, {"nl": "Utility to find an item of a desired type in the given list", "Heuristic": []}, {"nl": "Get Class Name.", "Heuristic": []}, {"nl": "Deletes the directory at the given path.", "Heuristic": []}, {"nl": "check whether two points are identical calls: none called by: centroid, codebook", "Heuristic": ["H1"]}, {"nl": "Tests for the  {@link BufferedBlockInStream#skip(long)} method.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.GLLParser#getDataStatus()}.", "Heuristic": ["H1"]}, {"nl": "Parse a URL query and fragment parameters into a key-value bundle.", "Heuristic": []}, {"nl": "Sets handlers from the given map.", "Heuristic": []}, {"nl": "Determines if there is a term of the form \"F1=F2\" where F1 is the specified field and F2 is another field. If so, the method returns the name of that field. If not, the method returns null.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.VTGParser#setTrueCourse(double)}.", "Heuristic": ["H1"]}, {"nl": "Returns the flags for the setting  {@code id}, or 0 if unset.", "Heuristic": ["H1"]}, {"nl": "get the number of items stored in this table.", "Heuristic": ["H1"]}, {"nl": "Locks the given inode in read mode, and adds it to this lock list.", "Heuristic": ["H1"]}, {"nl": "Test of getThreadNumber method, of class LogEntryRequest.", "Heuristic": []}, {"nl": "Gets the Gene List.", "Heuristic": []}, {"nl": "Called by NodeTest when all nodes have been iterated over: time to see if all the nodes that were expected were found. Note that this method also invokes  {@link #resetCounter resetCounter}so that the instance can be reused.", "Heuristic": ["H1"]}, {"nl": "Set the high level changes (renaming).", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#getDistanceOfCPA()} .", "Heuristic": ["H1"]}, {"nl": "Set the username/alias to use to sign any issued tokens", "Heuristic": []}, {"nl": "Returns total number of spdy connections in the pool.", "Heuristic": ["H1"]}, {"nl": "Returns a string representation of the enumeration value.", "Heuristic": []}, {"nl": "Returns the second element of the pair", "Heuristic": []}, {"nl": "Tells the broadcasting code that the broadcast was a success, just does future.set(tx)", "Heuristic": ["H1"]}, {"nl": "Creates a string that formats the template filename with line number and column of the given Node. We use this routine to provide a cosistent format for displaying file errors.", "Heuristic": ["H1"]}, {"nl": "Returns the next byte in a byte buffer.  If the byte buffer is empty, 0 is returned.", "Heuristic": []}, {"nl": "Remove entry from difference.", "Heuristic": []}, {"nl": "Called from the OSX  {@link ApplicationListener} when we receive anopen file event from Launch Services.", "Heuristic": ["H1"]}, {"nl": "Retrieve the event type.", "Heuristic": []}, {"nl": "Optional.", "Heuristic": ["H2"]}, {"nl": "Returns the action that was applied to the parent to generate the node.", "Heuristic": []}, {"nl": "Get the realm associated with the UsernameToken parameter", "Heuristic": []}, {"nl": "return the bitmap", "Heuristic": ["H1"]}, {"nl": "Registers a contract resolver with this registry.", "Heuristic": []}, {"nl": "Force the finished field to a particular value.", "Heuristic": []}, {"nl": "Create an AuthzDecisionQuery using the defaults", "Heuristic": ["H1"]}, {"nl": "Gets the value of the workflowImplDescription property.", "Heuristic": ["H1"]}, {"nl": "Setter for the todoitem.", "Heuristic": ["H1"]}, {"nl": "Gets the name.", "Heuristic": []}, {"nl": "Add a body Parameter (for POST/ PUT Requests)", "Heuristic": []}, {"nl": "Aborts the authentication (second phase).  This method is called if the LoginContext's overall authentication failed. (login failed) It cleans up any state that was changed in the login and commit methods.", "Heuristic": []}, {"nl": "Tests that an exception is thrown when the buffer was already released via the {@link DataNettyBuffer#release()} method.", "Heuristic": ["H1"]}, {"nl": "Returns an array containing all the Bitcoin nodes within the list.", "Heuristic": []}, {"nl": "The version codes that prefix addresses which are acceptable on this network. Although Satoshi intended these to be used for \"versioning\", in fact they are today used to discriminate what kind of data is contained in the address and to prevent accidentally sending coins across chains which would destroy them.", "Heuristic": []}, {"nl": "Returns the package name of  {@code clazz} according to the Java Language Specification (section6.7). Unlike  {@link Class#getPackage}, this method only parses the class name, without attempting to define the  {@link Package} and hence load files.", "Heuristic": ["H1"]}, {"nl": "Get Last Movement", "Heuristic": []}, {"nl": "Blocks until the executor service has processed all currently enqueued jobs.", "Heuristic": []}, {"nl": "Closes the scan by closing the index and the tablescan.", "Heuristic": ["H1"]}, {"nl": "Create a SOAP envelope using SOAP 1.1 or 1.2 depending on the namespace", "Heuristic": []}, {"nl": "get the axis that this selector should be evaluated on", "Heuristic": ["H1"]}, {"nl": "Gets the fontInstanceHashName attribute of the FontResolverTest object", "Heuristic": []}, {"nl": "Retrieves a record field from the stream.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.HDGParser#setDeviation(double)}.", "Heuristic": ["H1"]}, {"nl": "Decode a series of 4 bytes from buf, start at offset, and interpret them as an integer.", "Heuristic": ["H1"]}, {"nl": "Sets value of the  {@link CoreProtocolPNames#USER_AGENT} parameter.", "Heuristic": ["H1"]}, {"nl": "Removes the starting \"p.\" (if any) from the given amino acid change string.", "Heuristic": []}, {"nl": "Method called by the Viewer to execute the automatic events of the map in the current object layer.", "Heuristic": []}, {"nl": "Returns  {@code true} if {@code bytes} is a well-formed UTF-8 byte sequence according toUnicode 6.0. Note that this is a stronger criterion than simply whether the bytes can be decoded. For example, some versions of the JDK decoder will accept \"non-shortest form\" byte sequences, but encoding never reproduces these. Such byte sequences are not considered well-formed. This method returns  {@code true} if and only if {@code Arrays.equals(bytes, newString(bytes, UTF_8).getBytes(UTF_8))} does, but is more efficient in both time and space.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the double property.", "Heuristic": []}, {"nl": "Returns a hash code for this the enumeration value.", "Heuristic": []}, {"nl": "If no profile has been configured, set by default the \"dev\" profile.", "Heuristic": []}, {"nl": "check if selector queries for dynamic properties", "Heuristic": ["H1"]}, {"nl": "Returns true if the team has an explicitly specified access permission for this repository.", "Heuristic": []}, {"nl": "Sets the length of the buffer. The new length value is expected to be less than the current capacity and greater than or equal to 0.", "Heuristic": []}, {"nl": "Gets the minimum encoded size of the given value.", "Heuristic": []}, {"nl": "End something.", "Heuristic": ["H2"]}, {"nl": "Returns whether the items array is null or has zero length.", "Heuristic": []}, {"nl": "Removes an identifier from the internal list of revalidation jobs in progress.  This is meant to be called by  {@link AsynchronousValidationRequest#run()} once the revalidation iscomplete, using the identifier passed in during constructions.", "Heuristic": ["H1"]}, {"nl": "Creates fake signatures", "Heuristic": []}, {"nl": "Sets the checks if is prepopulated.", "Heuristic": []}, {"nl": "tar the contents of the tree at the (optionally) specified revision and the (optionally) specified basepath to the supplied outputstream.", "Heuristic": ["H1"]}, {"nl": "Gets the test id.", "Heuristic": ["H1"]}, {"nl": "Creates an instance of  {@code HashMap}", "Heuristic": ["H1"]}, {"nl": "Returns the value associated with  {@code key}, or zero if there is no value associated with {@code key}.", "Heuristic": ["H1"]}, {"nl": "Description of the Method", "Heuristic": []}, {"nl": "Create a Calendar instance using the specified date and Time zone", "Heuristic": []}, {"nl": "Returns the  {@code Uri} address of an image for the {@link MediaInfo} at the givenlevel. Level should be a number between 0 and  {@code n - 1} where {@code n} is thenumber of images for that given item.", "Heuristic": ["H1"]}, {"nl": "Remove an element from the list", "Heuristic": []}, {"nl": "Determine whether two elements qualify for further Difference comparison.", "Heuristic": []}, {"nl": "Step execution implementation", "Heuristic": []}, {"nl": "Gets the index of this Dir.", "Heuristic": []}, {"nl": "Retrieves a cache entry.", "Heuristic": []}, {"nl": "The human-readable name of the pass.", "Heuristic": []}, {"nl": "Starts both master and a worker using the configurations in test conf respectively.", "Heuristic": ["H1"]}, {"nl": "get.", "Heuristic": ["H1", "H2"]}, {"nl": "Return the directory into which we put our self-extracted native libraries.", "Heuristic": []}, {"nl": "Moves to the next leaf record having the previously-specified search key. Returns false if there are no more such leaf records.", "Heuristic": []}, {"nl": "Return the named method with a method signature matching classTypes from the given class.", "Heuristic": []}, {"nl": "Reads the SOAP 1.2 or SOAP 1.1 id attribute.", "Heuristic": ["H1"]}, {"nl": "Adds a new edit operation to the history at the current position. If executed after a call to getPrevious() removes all the future history (elements with positions >= current history position).", "Heuristic": []}, {"nl": "Creates a safe string by replacing problematic characters (for an HTML id) with an underscore for the given string.", "Heuristic": ["H1"]}, {"nl": "Returns the input stream for a file given by its contentUri. Returns null if the file has not been found or if an error as occurred.", "Heuristic": ["H1"]}, {"nl": "Not-null value.", "Heuristic": ["H2"]}, {"nl": "Returns the set of terms that have been indexed. Should be used for development and testing, not production.", "Heuristic": []}, {"nl": "Converts the standard row-major matrix into a column-major vector that is advantageous for this problem.", "Heuristic": []}, {"nl": "Get the components for the project settings tab.", "Heuristic": []}, {"nl": "Sets Entrez Gene Id.", "Heuristic": ["H1"]}, {"nl": "Set the automatic resolution state.", "Heuristic": []}, {"nl": "Create and return a new CircuitManager instance.", "Heuristic": []}, {"nl": "Sets the DatagramSocket to be used as data source. If reader is running, it is first stopped and you must call  {@link #start()} to resume reading.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Debug log message.", "Heuristic": []}, {"nl": "Returns a station by name", "Heuristic": []}, {"nl": "Execute the specified xpath syntax select expression on the specified document and return the list of nodes (could have length zero) that match", "Heuristic": ["H1"]}, {"nl": "Tests if headers with the given name are contained within this group. Header name comparison is case insensitive.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns RIPE-MD160(SHA256(pub key bytes)).", "Heuristic": []}, {"nl": "Return options list", "Heuristic": []}, {"nl": "Sets a boolean value in the object.", "Heuristic": []}, {"nl": "Retrieves the DownscaleQuality instance for the corresponding string.", "Heuristic": []}, {"nl": "Return the time out when acquiring a lock.  The value is loaded from the Oozie configuration, the property {link #DEFAULT_LOCK_TIMEOUT}.  Subclasses should override this method if they want to use a different time out.", "Heuristic": ["H1"]}, {"nl": "Returns the  {@link OAuthService} for this Api", "Heuristic": ["H1"]}, {"nl": "write lines.", "Heuristic": ["H1", "H2"]}, {"nl": "The version codes that prefix addresses which are acceptable on this network. Although Satoshi intended these to be used for \"versioning\", in fact they are today used to discriminate what kind of data is contained in the address and to prevent accidentally sending coins across chains which would destroy them.", "Heuristic": []}, {"nl": "Creates an  {@link AsyncCallable} from a {@link Callable}. The  {@link AsyncCallable} returns the {@link ListenableFuture} resulting from{@link ListeningExecutorService#submit(Callable)}.", "Heuristic": ["H1"]}, {"nl": "Get the smallest rectangle containing the most recent stroke in page coordinates.", "Heuristic": []}, {"nl": "Invokes  {@code toJoin.}{@link Thread#join() join()} uninterruptibly.", "Heuristic": ["H1"]}, {"nl": "Returns the  {@link ClassLoader} for this ResourceLoader.", "Heuristic": ["H1"]}, {"nl": "Untested. Not guaranteed to work.  {@inheritDoc}", "Heuristic": []}, {"nl": "Destroy the Action Checker Services.", "Heuristic": []}, {"nl": "Resolves serialized instance of enumeration value.", "Heuristic": []}, {"nl": "Return the action external status from a callback URL.", "Heuristic": []}, {"nl": "Writes message to to the output stream.", "Heuristic": ["H1"]}, {"nl": "Return the EncryptionType enum value which denotes the type of encryption/ decryption that this KeyCrypter can understand.", "Heuristic": ["H1"]}, {"nl": "Gets the origin attribute of the StylesheetInfo object", "Heuristic": []}, {"nl": "Renders the XML file at the given URL as an image file at the target location.", "Heuristic": []}, {"nl": "Clear any reference to the current visited attribute", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.util.Date#setYear(int)}.", "Heuristic": ["H1"]}, {"nl": "Returns the location one unit right of this location.", "Heuristic": []}, {"nl": "Returns the number of bits in this  {@code BitSet}.", "Heuristic": ["H1"]}, {"nl": "Returns the current size.", "Heuristic": []}, {"nl": "Checks whether a prefix of  {@code path} is not in the prefix list.", "Heuristic": ["H1"]}, {"nl": "Obtains a specific version of this protocol. This can be used by derived classes to instantiate themselves instead of the base class, and to define constants for commonly used versions.  The default implementation in this class returns this if the version matches, and creates a new  {@link ProtocolVersion}otherwise.", "Heuristic": ["H1"]}, {"nl": "Returns a new object with rotated image data by 90 degrees counterclockwise. Only callable if  {@link #isRotateSupported()} is true.", "Heuristic": ["H1"]}, {"nl": "Run the VF parser on the source, and return the nodes of type clazz.", "Heuristic": ["H1"]}, {"nl": "Sleeps the given duration.", "Heuristic": []}, {"nl": "Returns the Redis key for a URL's TermCounter.", "Heuristic": []}, {"nl": "Test case for  {@link GCSUnderFileSystem#delete(String,boolean)}.", "Heuristic": ["H1"]}, {"nl": "Store the next namespace element.", "Heuristic": []}, {"nl": "Add a character to the word being stemmed.  When you are finished adding characters, you can call stem(void) to stem the word.", "Heuristic": []}, {"nl": "Returns a list of all namespaces below an element (recursive)", "Heuristic": []}, {"nl": "Pass the event to the listener.", "Heuristic": []}, {"nl": "Get time zone offset hours. Defaults to 0 (UTC).", "Heuristic": []}, {"nl": "Gets the value of the singleNestedComplexNode property.", "Heuristic": []}, {"nl": "Create an endpoint reference for the provided address.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#setDistanceOfCPA()} .", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link JAXBElement }{@code }}", "Heuristic": ["H1"]}, {"nl": "Sets up the file path and file block reader before a test runs.", "Heuristic": []}, {"nl": "Returns the number of records in the materialized table, which is the same as in the underlying plan.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Constructs a String with all attributes in name = value format.", "Heuristic": []}, {"nl": "Sets the status.", "Heuristic": []}, {"nl": "Creates a LengthFieldBasedFrameDecoder where the first 8 bytes are the length of the frame. This is used before all decoders.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.VTGParser#setSpeedKnots(double)}.", "Heuristic": ["H1"]}, {"nl": "get instance with default handler.", "Heuristic": ["H1"]}, {"nl": "Releases the lock.", "Heuristic": []}, {"nl": "Create a connection from pool", "Heuristic": []}, {"nl": "Returns a new object with rotated image data by 90 degrees counterclockwise. Only callable if  {@link #isRotateSupported()} is true.", "Heuristic": ["H1"]}, {"nl": "Is this set an (improper) superset of another?", "Heuristic": []}, {"nl": "Find a tag with given name (case insensitively)", "Heuristic": []}, {"nl": "Unsnooze the critic.", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link AuthenticateResponse }", "Heuristic": ["H1"]}, {"nl": "Locates and decodes a Data Matrix code in an image.", "Heuristic": []}, {"nl": "put long preferences", "Heuristic": ["H1"]}, {"nl": "get JSONArray value.", "Heuristic": ["H1"]}, {"nl": "Returns the remote api class name.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the access property.", "Heuristic": []}, {"nl": "Stops the master and cleans up client connections.", "Heuristic": []}, {"nl": "Get the name of the service to which messages received by this endpoint are pre-dispatched.", "Heuristic": []}, {"nl": "Sets the public URI of the third-party application.", "Heuristic": []}, {"nl": "Gets the source.", "Heuristic": []}, {"nl": "Gets the Data Matrix Generated by the Web API.", "Heuristic": []}, {"nl": "Returns the length of the word resulting from the stemming process.", "Heuristic": []}, {"nl": "is not empty string.", "Heuristic": ["H1"]}, {"nl": "Get a hash code associated with this token.", "Heuristic": []}, {"nl": "Stores an integer at the specified field of the current record.", "Heuristic": []}, {"nl": "Wrap an object newly created by a constructor call.", "Heuristic": []}, {"nl": "Tests the array read when completely reading the last block of the file.", "Heuristic": []}, {"nl": "Gets an array of boolean values out of the object.", "Heuristic": []}, {"nl": "Gets the length of the data stored in this datagram packet.", "Heuristic": ["H1"]}, {"nl": "Save the configuration to the default location. Implementations do not have to handle this method. If the method is not allowed or it fails, the implementation must return false.", "Heuristic": ["H1"]}, {"nl": "Sets the textArea attribute of the ValidationHandler object", "Heuristic": []}, {"nl": "Returns the subpredicate that applies to the specified schema.", "Heuristic": ["H1"]}, {"nl": "Moves to the next record having the search key. The method loops through the table scan for the bucket, looking for a matching record, and returning false if there are no more such records.", "Heuristic": []}, {"nl": "Gets the focus attribute of the StandardAttributeResolver object", "Heuristic": []}, {"nl": "Returns the rotation.", "Heuristic": []}, {"nl": "Gets the singleton instance of this class.", "Heuristic": []}, {"nl": "+      Get the resident entity id configured in identity.xml. +      +", "Heuristic": ["H1"]}, {"nl": "Return the user login name", "Heuristic": []}, {"nl": "Returns the field's name, prepended by \"countof\".", "Heuristic": ["H1"]}, {"nl": "Get a NotationProvider for the current project.", "Heuristic": []}, {"nl": "Returns the y_view of a given latitude value in world coordinates.", "Heuristic": []}, {"nl": "Gets the value of the projects property.  This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a set method for the projects property.  For example, to add a new item, do as follows:  getProjects().add(newItem);   Objects of the following type(s) are allowed in the list {@link String }", "Heuristic": ["H1"]}, {"nl": "Captures SshConnectedEvent", "Heuristic": []}, {"nl": "Return requested device", "Heuristic": []}, {"nl": "Retrieves the image located at the given URI. It's assumed the URI does point to an image--the URI will be accessed (using java.io or java.net), opened, read and then passed into the JDK image-parsing routines. The result is packed up into an ImageResource for later consumption.", "Heuristic": []}, {"nl": "Required. The type of policy that will be executed for the current release, this value can be either webhook or schedule.", "Heuristic": []}, {"nl": "Returns true or false, depending on whether this instance and other have the same numerator and denominator.", "Heuristic": ["H1"]}, {"nl": "Returns the private key bytes, if they were provided during construction.", "Heuristic": []}, {"nl": "Retrieves a byte field from the stream.", "Heuristic": []}, {"nl": "Returns true if this connection is alive.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.util.Time#setSeconds(double)}.", "Heuristic": ["H1"]}, {"nl": "MINA does some funky things if we don't do this first.", "Heuristic": ["H1"]}, {"nl": "Return device's associated playlist", "Heuristic": []}, {"nl": "Set the predicate", "Heuristic": []}, {"nl": "Tests the  {@link DataFileChannel#getReadOnlyByteBuffer()} method.", "Heuristic": ["H1"]}, {"nl": "Returns the Time field.", "Heuristic": []}, {"nl": "Default: false", "Heuristic": ["H2"]}, {"nl": "Test of run method, of class UpdateClockRunnable.", "Heuristic": ["H1"]}, {"nl": "Closes the directory page.", "Heuristic": []}, {"nl": "add key-value pair to map, key need not null", "Heuristic": ["H1"]}, {"nl": "avoid need to suppress warnings on string->object cases.", "Heuristic": ["H1"]}, {"nl": "Determine which test buckets apply to a particular client.", "Heuristic": []}, {"nl": "Specifies that the current interceptor needs to be added to the  interceptor chain after the specified collection of interceptors. This method replaces any existing list with the provided list.", "Heuristic": ["H1"]}, {"nl": "Sets the name.", "Heuristic": []}, {"nl": "Just a wrapper to  {@link #getSet(String,String)} for using '&#124;' asdelimiter.", "Heuristic": ["H1"]}, {"nl": "Accessor for the framed data buffer.", "Heuristic": ["H1"]}, {"nl": "the common code of the setTransform(...) methods", "Heuristic": ["H1"]}, {"nl": "Gets all Debug Messages.", "Heuristic": []}, {"nl": "Returns whether the data record has the specified field.", "Heuristic": []}, {"nl": "Creates an instance of  {@link DefaultHttpResponseFactory} to be usedby HTTP connections for creating  {@link HttpResponse} objects. This method can be overridden in a super class in order to provide a different implementation of the  {@link HttpResponseFactory} interface.", "Heuristic": ["H1"]}, {"nl": "This method is used to get the Entitlement decision for the set of Attributes using The Default AppID", "Heuristic": []}, {"nl": "Close the given client.", "Heuristic": []}, {"nl": "Starts route generation after the calculate button has been pressed.", "Heuristic": []}, {"nl": "Returns the set of terms that have been indexed.", "Heuristic": []}, {"nl": "Sets the  {@link ConnRoutePNames#DEFAULT_PROXY DEFAULT_PROXY}parameter value.", "Heuristic": ["H1"]}, {"nl": "Verifies that an Iterator is unmodifiable. This test only works with iterators that iterate over a finite set.", "Heuristic": []}, {"nl": "Constructs a String with all attributes in name = value format.", "Heuristic": []}, {"nl": "Provide number of REJECT decisions for Missense Germline Mutations.", "Heuristic": ["H1"]}, {"nl": "Returns true if authenticating against a proxy, false otherwise.", "Heuristic": []}, {"nl": "Load the InputStream into memory and return a ByteArrayInputStream that represents it. Closes the in stream.", "Heuristic": []}, {"nl": "Retrieves Identity provider information about a given tenant by Identity Provider name", "Heuristic": []}, {"nl": "Returns whether or not the given event can occur in the current state", "Heuristic": ["H1"]}, {"nl": "Tests the different interval methods.", "Heuristic": []}, {"nl": "Factory method, responsible for creating a new SAX parser.", "Heuristic": []}, {"nl": "Gets attribute handler  {@link CookieAttributeHandler} for thegiven attribute.", "Heuristic": ["H1"]}, {"nl": "Returns the number of available (ie unpinned) buffers.", "Heuristic": ["H1"]}, {"nl": "Adds a group of objects that are supposed to be equivalent to each other and not equivalent to objects in any other equivalence group added to this tester.", "Heuristic": []}, {"nl": "Wait up to |timeoutMs| (or until underlying socket error) for a netlink message of at most DEFAULT_RECV_BUFSIZE size.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Adds a CSP state listener to the solution strategy.", "Heuristic": []}, {"nl": "Implements BundleActivator.stop(). Does nothing since the framework will automatically unregister any registered services.", "Heuristic": []}, {"nl": "Checks whether this result object contains a sink that exactly matches the given value.", "Heuristic": []}, {"nl": "add distinct entry to list", "Heuristic": ["H1"]}, {"nl": "Tests the creation of the default allocator via the {@link Allocator.Factory#create(BlockMetadataManagerView)} method.", "Heuristic": ["H1"]}, {"nl": "Starts this animation. If the animation has a nonzero startDelay, the animation will start running after that delay elapses. A non-delayed animation will have its initial value(s) set immediately, followed by calls to {@link AnimatorListener#onAnimationStart(Animator)} for any listeners of this animator.The animation started by calling this method will be run on the thread that called this method. This thread should have a Looper on it (a runtime exception will be thrown if this is not the case). Also, if the animation will animate properties of objects in the view hierarchy, then the calling thread should be the UI thread for that view hierarchy.", "Heuristic": ["H1"]}, {"nl": "After a word has been stemmed, it can be retrieved by toString(), or a reference to the internal buffer can be retrieved by getResultBuffer and getResultLength (which is generally more efficient.)", "Heuristic": []}, {"nl": "Gets the error code.", "Heuristic": []}, {"nl": "Tests the  {@link JournalFormatter#deserialize(InputStream)} and{@link JournalFormatter#serialize(JournalEntry,OutputStream)} methods.", "Heuristic": ["H1"]}, {"nl": "Cleans all saved log entries.", "Heuristic": []}, {"nl": "Creates an instance of  {@link EntitySerializer} with the{@link StrictContentLengthStrategy} implementation to be used forserializing HTTP entities sent over this connection.  This method can be overridden in a super class in order to create instances of  {@link EntitySerializer} using a custom{@link ContentLengthStrategy}.", "Heuristic": ["H1"]}, {"nl": "The header bytes that identify the start of a packet on this network.", "Heuristic": []}, {"nl": "Returns the listing details for an in-app product.", "Heuristic": []}, {"nl": "Resolves serialized instance of enumeration value.", "Heuristic": []}, {"nl": "This implementation returns a dummy element processor as the child which ignores all nested xml elements. Sub-classes wishing to handle child elements must override this method and delegate to this method for xml elements they don't care about.", "Heuristic": ["H1"]}, {"nl": "Return a Coordinator engine for a system user (no user, no group).", "Heuristic": []}, {"nl": "Clones a  {@link ByteBuffer}.  The new bytebuffer will have the same content, but the type of the bytebuffer may not be the same.", "Heuristic": ["H1"]}, {"nl": "Turn right.", "Heuristic": ["H2"]}, {"nl": "Returns the computed coefficients", "Heuristic": []}, {"nl": "Append an AND condition.", "Heuristic": []}, {"nl": "Retrieves Resident Identity provider for a given tenant", "Heuristic": []}, {"nl": "Given a range and line size obtain the number of points to draw", "Heuristic": []}, {"nl": "Determines whether or not this value should always be saved to disk.", "Heuristic": ["H1"]}, {"nl": "Overwrites all the headers in the message.", "Heuristic": []}, {"nl": "The main method.", "Heuristic": []}, {"nl": "Compares the two specified  {@code byte} values. The sign of the value returned is the same asthat of  {@code ((Byte) a).compareTo(b)}. Note: this method behaves identically to the JDK 7 method  {@link Byte#compare}.", "Heuristic": ["H1"]}, {"nl": "Writes out a flow pair object for the use inside the flow policy", "Heuristic": []}, {"nl": "Adds a file to the bucket.", "Heuristic": []}, {"nl": "This implementation throws an UnsupportedOperationException.", "Heuristic": []}, {"nl": "Tests the  {@link UnderFileSystem#create(String)} method.", "Heuristic": ["H1"]}, {"nl": "Implements BundleActivator.stop(). Does nothing since the framework will automatically unregister any registered services.", "Heuristic": []}, {"nl": "Verbose log message with printf formatting.", "Heuristic": ["H1"]}, {"nl": "Provide the ipAddress to the IP's Builder.", "Heuristic": ["H1"]}, {"nl": "Utility method to check if a string is null or empty", "Heuristic": []}, {"nl": "Tests to ensure  {@link SwiftOutputStream#write(byte[],int,int)} calls{@link OutputStream#write(byte[],int,int)} .", "Heuristic": ["H1"]}, {"nl": "Returns the number of available (i.e. unpinned) buffers.", "Heuristic": []}, {"nl": "Converts  {@code CassandraRDD} of {@code Tuple2} into {@code CassandraJavaPairRDD}.", "Heuristic": ["H1"]}, {"nl": "Get the x coordinate of the new step", "Heuristic": []}, {"nl": "Gets the access token of the private test user for the application with the requested permissions.", "Heuristic": []}, {"nl": "Creates the \"no access\" mode.", "Heuristic": []}, {"nl": "Computes N factorial", "Heuristic": []}, {"nl": "Convert Date to String", "Heuristic": []}, {"nl": "Return  {@code true} if the supplied Map is {@code null}or empty. Otherwise, return  {@code false}.", "Heuristic": ["H1"]}, {"nl": "Create a project with the given URI as its location", "Heuristic": []}, {"nl": "Read RDF string to jena model.", "Heuristic": ["H1"]}, {"nl": "Creates a block response message specified by the block's id. If  {@code toSend} is true, itwill prepare the data to be sent, otherwise the message is used to receive data.", "Heuristic": ["H1"]}, {"nl": "See if it is reducing systems into RREF", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMBParser#setBearing(double)} .", "Heuristic": ["H1"]}, {"nl": "Adds a newline to the graph's source.", "Heuristic": []}, {"nl": "Returns number of words in all source file(s).", "Heuristic": []}, {"nl": "Force a newline. Indentation will be preserved. This method should be used sparingly; a call to allowBreak() gives the pretty-printer much more flexibility to do a good job.", "Heuristic": []}, {"nl": "move a file from the import directory to the imported directory.", "Heuristic": ["H1"]}, {"nl": "checkGameOver prueft ob die Bedingung erfuellt wurde die fuer ein Game Over erforderlich sind.", "Heuristic": ["H1"]}, {"nl": "display @param array 's content to console", "Heuristic": ["H1"]}, {"nl": "get double value.", "Heuristic": ["H1"]}, {"nl": "Returns the ClassValue-using validator, or falls back to the \"weak Set\" implementation if unable to do so.", "Heuristic": []}, {"nl": "Clears the given persisted files stored in  {@link #mPersistedFiles}.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "It returns a  {@link Calendar} object set with the exact date of mybirthday. {@inheritDoc}", "Heuristic": ["H1"]}, {"nl": "by triple approve to server call this method", "Heuristic": ["H1"]}, {"nl": "Returns a list of all parents of a SOAPElement The first element of the list is the father of e, the second the grand-father and so on. Last element is always the root.", "Heuristic": ["H1"]}, {"nl": "Causes the AI to attempt to move to the building spot.", "Heuristic": []}, {"nl": "The result of the difference.", "Heuristic": []}, {"nl": "Set an expire time. Useful for anonymous users and tokens", "Heuristic": ["H1"]}, {"nl": "L is a m by m matrix B is a m by n matrix", "Heuristic": ["H1"]}, {"nl": "Test whether this node has no connection to other nodes. Return true if node has no connections, false otherwise.", "Heuristic": []}, {"nl": "Sets the value of the regExForValidate property.", "Heuristic": []}, {"nl": "Unregisters all subscriber methods on a registered  {@code object}.", "Heuristic": ["H1"]}, {"nl": "For testing purpose only...", "Heuristic": []}, {"nl": "Sets a property on this Javascript object for which the value is a JavascriptEnum The value is set to what is returned by the getEnumValue() method on the JavascriptEnum", "Heuristic": ["H1"]}, {"nl": "write.", "Heuristic": ["H1", "H2"]}, {"nl": "Sets the reason.", "Heuristic": []}, {"nl": "Tests  {@link ByteBufferKeyValuePartitionReader#get} can retrieve values stored before.", "Heuristic": ["H1"]}, {"nl": "Convenience method, equivalent to calling {@link #decompress(byte[],int,byte[],int,int) decompress(src, 0, dest, 0, destLen)}.", "Heuristic": ["H1"]}, {"nl": "Sets the default bus.", "Heuristic": []}, {"nl": "Not implemented {@inheritDoc}", "Heuristic": []}, {"nl": "Tests the  {@link BlockStoreMeta#getNumberOfBlocks()} method.", "Heuristic": ["H1"]}, {"nl": "Tests getting and setting fields.", "Heuristic": []}, {"nl": "Convert a nodes list into a JSONArray.", "Heuristic": []}, {"nl": "Initialize the Model subsystem with the MDR ModelImplementation.", "Heuristic": []}, {"nl": "Send untampered request based on previously create postMethod", "Heuristic": ["H1"]}, {"nl": "Gets the value of the responseType property.", "Heuristic": []}, {"nl": "Registers a SentenceListener to hash map with given key.", "Heuristic": []}, {"nl": "Tests the metrics for a master and a worker.", "Heuristic": []}, {"nl": "Check if this diagram already exists in the project.", "Heuristic": []}, {"nl": "Sets the request line (like \"GET / HTTP/1.1\").", "Heuristic": []}, {"nl": "Initialize the scenario. Create any generators and other shared objects here. Called once, in the main client thread, before any operations are started.", "Heuristic": []}, {"nl": "Packs a bit array into bytes, most significant bit first", "Heuristic": []}, {"nl": "Stops Stockfish and cleans up before closing it", "Heuristic": ["H1"]}, {"nl": "Starts the web server.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Create an instance of  {@link JAXBElement }{@code }}", "Heuristic": ["H1"]}, {"nl": "Get whether or not the semantics of this extension are required. Relates to the wsdl:required attribute.", "Heuristic": ["H1"]}, {"nl": "Get how long (in seconds) a client-supplied Created Element is allowed to be in the future. The default is 60 seconds to avoid common problems relating to clock skew.", "Heuristic": []}, {"nl": "Return the number of tasks timed.", "Heuristic": []}, {"nl": "Return the coordiantor jobs being returned.", "Heuristic": ["H1"]}, {"nl": "precondition: nums.size() > 0; nums contains Integer objects postcondition: returns the maximal value in nums", "Heuristic": ["H1"]}, {"nl": "Find a language by name from the available ones.", "Heuristic": []}, {"nl": "Implementation of  {@code UserDetailsService}. We only need this to satisfy the  {@code RememberMeServices} requirements.", "Heuristic": ["H1"]}, {"nl": "Returns the number of times  {@link Cache} lookup methods have returned an uncached (newlyloaded) value, or null. Multiple concurrent calls to  {@link Cache} lookup methods on an absentvalue can result in multiple misses, all returning the results of a single cache load operation.", "Heuristic": ["H1"]}, {"nl": "Copies an char input stream into an char output stream.", "Heuristic": ["H1"]}, {"nl": "Unregisters an existing factory.", "Heuristic": []}, {"nl": "Create an anonymous endpoint reference.", "Heuristic": []}, {"nl": "Sets the expected data set id.", "Heuristic": ["H1"]}, {"nl": "This provides a mapping between http://schema.openid.net/ and http://axschema.org", "Heuristic": []}, {"nl": "Unpins the specified block.", "Heuristic": []}, {"nl": "Stem the word placed into the Stemmer buffer through calls to add(). Returns true if the stemming process resulted in a word different from the input.  You can retrieve the result with getResultLength()/getResultBuffer() or toString().", "Heuristic": ["H1"]}, {"nl": "Sets up this test.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Set the given LanguageVersion as the current default for it's Language.", "Heuristic": []}, {"nl": "Validates BRCA1.", "Heuristic": ["H2"]}, {"nl": "return session factory session factory will be rebuilded in the next call", "Heuristic": ["H1"]}, {"nl": "Here, we attempt to get the password from the private  alias/passwords map.", "Heuristic": ["H1"]}, {"nl": "Test method for  {@link NotificationController#handleEvent(org.osgi.service.event.Event)}Verifies that  {@code IllegalArgumentException} is thrown when {@code Event}'s {@link Notification#NOTIFICATION_KEY_USER_ID} property is null.", "Heuristic": ["H1"]}, {"nl": "Set the issuer name", "Heuristic": []}, {"nl": "Estimates the number of block accesses in the product. The formula is:  B(product(p1,p2)) = B(p1) + R(p1)B(p2) ", "Heuristic": ["H1"]}, {"nl": "Gets empty item view", "Heuristic": []}, {"nl": "Gets the value of the lang property.", "Heuristic": ["H1"]}, {"nl": "Utility method to compare two (possibly-null) String values.", "Heuristic": []}, {"nl": "Unloads the specified sounds from memory.", "Heuristic": []}, {"nl": "Sends a JSON message.", "Heuristic": []}, {"nl": "Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos.Geo.Region }", "Heuristic": ["H1"]}, {"nl": "Retrieve the offset of a character in the base 64 alphabet.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the zip property.", "Heuristic": []}, {"nl": "Preload the items in a NodeList by visiting each in turn Required for pieces of test XML whose node children can be visited out of sequence by a DifferenceEngine comparison Makes the nodes of this list known as nodes that are visitable at the current level and makes the last child node the current node as a side effect.", "Heuristic": []}, {"nl": "Current count of black stones.", "Heuristic": []}, {"nl": "Set the signature alias to use for this SAML realm", "Heuristic": []}, {"nl": "Sets the Counter Prefs;", "Heuristic": ["H1"]}, {"nl": "Set a list of Strings corresponding to regular expression constraints on the subject DN of a certificate", "Heuristic": []}, {"nl": "Gets the MRNA Value.", "Heuristic": ["H1"]}, {"nl": "Gives the name of the system property that can be used to provide a file location to load to override settings for a particular resource. By defaut the name is equal to the resource name where slashes `/` are replaced by dots `.`, with `.location` suffix. Eg. `myapp/settings` becomes `myapp.settings.location`", "Heuristic": ["H1"]}, {"nl": "Set the difference groups.", "Heuristic": []}, {"nl": "DELETE  USER :login -> delete the \"login\" User.", "Heuristic": ["H1"]}, {"nl": "Not-null value.", "Heuristic": ["H2"]}, {"nl": "Tests the  {@link StorageTier#getTierOrdinal()} method.", "Heuristic": ["H1"]}, {"nl": "Remove a terminal if it is in the set.", "Heuristic": []}, {"nl": "Methods to call during post-initialization", "Heuristic": []}, {"nl": " Solves for non-singular lower triangular matrices using forward substitution.  b = L-1b  where b is a vector, L is an n by n matrix. ", "Heuristic": ["H1"]}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.util.Date#setYear(int)}.", "Heuristic": ["H1"]}, {"nl": "Popup an error with additional text", "Heuristic": []}, {"nl": "Returns the number of nodes expanded so far.", "Heuristic": []}, {"nl": "prints out usage information, with optional error message", "Heuristic": ["H1"]}, {"nl": "Add a singleton item, merging lookahead sets if the item is already part of the set.  returns the element of the set that was added or merged into.", "Heuristic": ["H1"]}, {"nl": "Does a given URL point to Google Book Search, regardless of domain.", "Heuristic": []}, {"nl": "Get the number of messages accepted for sending which have not yet been acknowledged.", "Heuristic": []}, {"nl": "Create a child ID.  If the same child name is given the returned child ID is the same.", "Heuristic": []}, {"nl": "Creates and returns a copy of this ObjectWithDynamicAttributes", "Heuristic": []}, {"nl": "Sets the Storm identifier.", "Heuristic": []}, {"nl": "Get the underlying object used by the Javascript runtime.", "Heuristic": ["H1"]}, {"nl": "Returns the cutoff date for the cache.  Commits after this date are cached. Commits before this date are not cached.", "Heuristic": []}, {"nl": "Creates a header element. Called from  {@link #parseHeaderElement}.", "Heuristic": ["H1"]}, {"nl": "Helper method to get the browser version from 'userAgent' with regex. The first matching group has to be the version number!", "Heuristic": []}, {"nl": "Shuts down the endpoint", "Heuristic": []}, {"nl": "If using directly, consider using OwnedItem instead", "Heuristic": []}, {"nl": "Frees a Hessian 2.0 serializer", "Heuristic": ["H1"]}, {"nl": "Template delegator for testNode() method. OVERRIDE to add custom logic", "Heuristic": ["H1"]}, {"nl": "Tests that up to WORKER_TIERED_STORE_BLOCK_LOCKS block locks can be grabbed simultaneously.", "Heuristic": ["H1"]}, {"nl": "Returns the value for the setting  {@code id}, or 0 if unset.", "Heuristic": ["H1"]}, {"nl": "Internal conversion. This is needed to support the current SpringBoot actuator AuditEventRepository interface", "Heuristic": []}, {"nl": "Gets the error code.", "Heuristic": []}, {"nl": "Get the minute of hour.", "Heuristic": []}, {"nl": "Sets the feed id.", "Heuristic": ["H1"]}, {"nl": "Ausgabe Kundendaten", "Heuristic": ["H1", "H2"]}, {"nl": "Details of the test target.", "Heuristic": []}, {"nl": "Gets the value of the password property.", "Heuristic": []}, {"nl": "Converts the given OpCode into a string (eg \"0\", \"PUSHDATA\", or \"NON_OP(10)\")", "Heuristic": ["H1"]}, {"nl": "Returns true if this interval is lower inclusive.", "Heuristic": []}, {"nl": "since 4.1", "Heuristic": ["H1", "H2"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Is the Gene Heterozgously Deleted at the Copy Number Level?", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Tells if the  {@link AlluxioURI} has authority or not.", "Heuristic": ["H1"]}, {"nl": "Name of level that logger will use publishing log events to ATOM push handler; empty string for default \"INFO\" level.", "Heuristic": []}, {"nl": "Modifies the predicate to be the conjunction of itself and the specified predicate.", "Heuristic": []}, {"nl": "Method to obtain the only instance of this class", "Heuristic": []}, {"nl": "Sets the creates the time stamp.", "Heuristic": ["H1"]}, {"nl": "Gets Percentage Complete.", "Heuristic": []}, {"nl": "Closes the given  {@link Reader}, logging any  {@code IOException} that's thrown rather thanpropagating it. While it's not safe in the general case to ignore exceptions that are thrown when closing an I/O resource, it should generally be safe in the case of a resource that's being used only for reading, such as a  {@code Reader}. Unlike with writable resources, there's no chance that a failure that occurs when closing the reader indicates a meaningful problem such as a failure to flush all bytes to the underlying resource.", "Heuristic": ["H1"]}, {"nl": "remove the stop words, punctuation marks etc and use the post to update the naive Bayes map", "Heuristic": ["H1"]}, {"nl": "Return a  {@code Builder} for {@code AppStatus}.", "Heuristic": ["H1"]}, {"nl": "Gets the run status type.", "Heuristic": []}, {"nl": "Gets the waiter callable.", "Heuristic": []}, {"nl": "Returns the username of the user", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.PositionParser#parseLatitude(int)}.", "Heuristic": ["H1"]}, {"nl": "Checks to see if the matrix is or is not modified as according to the modified flag.", "Heuristic": []}, {"nl": "Returns the token key", "Heuristic": []}, {"nl": "Adds a name/value pair to the formatted output in  {@code name=value} format.", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link TestCase }", "Heuristic": ["H1"]}, {"nl": "Puts a byte (the first byte of an integer) into a  {@link ByteBuffer}.", "Heuristic": ["H1"]}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.util.Date#setYear(int)}.", "Heuristic": ["H1"]}, {"nl": "Absent any annotations of XML mapping, the value of the minOccurs attribute on elements.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Decompress src into dest. dest's {@link ByteBuffer#remaining()} must be exactly the size of the decompresseddata. This method moves the positions of the buffers.", "Heuristic": ["H1"]}, {"nl": "Obtains a String that identifies the type of Critic.", "Heuristic": []}, {"nl": "Checks to see if the input matrix is copied after multiple calls.  This was an actual bug.", "Heuristic": []}, {"nl": "Adds an  {@link Cookie HTTP cookie}, replacing any existing equivalent cookies. If the given cookie has already expired it will not be added, but existing values will still be removed.", "Heuristic": ["H1"]}, {"nl": "Get satellite elevation, in degrees (max. 90&deg;).", "Heuristic": ["H1"]}, {"nl": "Setter for constructor ordering", "Heuristic": []}, {"nl": "True if the specified position can be reached in one step. Does not check if the position is in bounds.", "Heuristic": []}, {"nl": "Gets a photo value out of the object.", "Heuristic": []}, {"nl": "Get the list of modified diagrams.", "Heuristic": []}, {"nl": "Note:Override this method for a more efficient implementation as outlined in AIMA3e pgs. 527-28. The default implementation does not perform any of these.", "Heuristic": []}, {"nl": "Alias for TestNet3Params.get(), use that instead.", "Heuristic": []}, {"nl": "Iterate through a variety of different sizes and shapes of matrices.", "Heuristic": []}, {"nl": "Gets the reg feed id.", "Heuristic": ["H1"]}, {"nl": "Computes the total length of a track in kilometers.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Overrides object toString to give more data for debugging.", "Heuristic": []}, {"nl": "Sends the given Event to JS, coalescing eligible events if JS is backed up.", "Heuristic": []}, {"nl": "Should class info be serialized into the output?", "Heuristic": []}, {"nl": "Returns  {@code true} if any bit is set.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.GSAParser#getSatelliteIds()}.", "Heuristic": ["H1"]}, {"nl": "Check whether the user has enabled XMPP based multi-factor authentication.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "This parameter sets the filter to include and/or exclude the  cipher suites to use from the set list or system defaults.", "Heuristic": ["H1"]}, {"nl": "Gets the public URI of the third-party application. For example, this property can be used to validate  request token callbacks", "Heuristic": ["H1"]}, {"nl": "Returns the number of sentences in the knowledge base.", "Heuristic": []}, {"nl": "Formats a header element.", "Heuristic": []}, {"nl": "Sets the remote URL.", "Heuristic": []}, {"nl": "Releases the block worker thrift client to the pool.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RTEParser#getRouteId()}.", "Heuristic": ["H1"]}, {"nl": "Clear the high level change model.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "It returns the attribute setters", "Heuristic": []}, {"nl": "Requests a \"dangerous\" permission for the application at runtime. This is a helper method alternative to cordovaInterface.requestPermission() that does not require the project to be built with cordova-android 5.0.0+", "Heuristic": ["H1"]}, {"nl": "Read images", "Heuristic": ["H2"]}, {"nl": "Adds a listener to the set of listeners that are sent events through the life of an animation, such as start, repeat, and end.", "Heuristic": []}, {"nl": "By default delegates to  {@link Object#toString}. The dynamic proxies'  {@code toString()} willdelegate to this method. Subclasses can override this method to provide custom string representation for the proxies.", "Heuristic": ["H1"]}, {"nl": "Tests whether we can get login user with conf in CUSTOM mode.", "Heuristic": ["H1"]}, {"nl": "Sets the used space of the worker in bytes.", "Heuristic": []}, {"nl": "Checks whether the given fact is already in the jump function table", "Heuristic": []}, {"nl": "Look for a specified annotation on a method. If there, return it. If not, search it's containing class. Assume that the annotation is marked @Inherited.", "Heuristic": []}, {"nl": "Returns a string representation of x, where x is treated as unsigned.", "Heuristic": []}, {"nl": "Gets the value of the comment property.", "Heuristic": []}, {"nl": "Launches any services that should be launched only if this peer is on the open Internet, such as running a TURN server or a SIP proxy.", "Heuristic": []}, {"nl": "Puts an unsigned byte into the buffer.", "Heuristic": []}, {"nl": "Clears all hash tables.", "Heuristic": []}, {"nl": "Next transition in linked list of transitions out of a state", "Heuristic": []}, {"nl": "Closes all streams after a test ran.", "Heuristic": []}, {"nl": "Replace the previous set of stereotypes applied to the given modelelement with a new set, given in the form of a \",\" separated string of stereotype names.", "Heuristic": ["H1"]}, {"nl": "Ausgabe Kundendaten", "Heuristic": ["H1", "H2"]}, {"nl": "Returns true if and only if this instance represents a monetary value greater than zero, otherwise false.", "Heuristic": []}, {"nl": "Should all complex types include an xsd:any to allow for future expansion?", "Heuristic": ["H1"]}, {"nl": "Scheme accessor", "Heuristic": ["H1", "H2"]}, {"nl": "Gets the current time.", "Heuristic": []}, {"nl": "Use a cron expression to execute logic on a schedule. Expression: second minute hour day-of-month month weekday", "Heuristic": ["H1"]}, {"nl": "Returns a string containing the supplied  {@code byte} values separated by {@code separator}. For example,  {@code join(\":\", 0x01, 0x02, -0x01)} returns the string {@code \"1:2:-1\"}.", "Heuristic": ["H1"]}, {"nl": "Returns the sample covariance of the values. The count must be greater than one. This is not guaranteed to return zero when the dataset consists of the same pair of values multiple times, due to numerical errors. Non-finite values If the dataset contains any non-finite values ( {@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or  {@link Double#NaN}) then the result is  {@link Double#NaN}.", "Heuristic": ["H1"]}, {"nl": "pre-order traversal for binary search tree", "Heuristic": ["H1"]}, {"nl": "Destroy the service.", "Heuristic": []}, {"nl": "Gets the measurement_date.", "Heuristic": []}, {"nl": "Sets the test id.", "Heuristic": ["H1"]}, {"nl": "A ticker that reads the current time using  {@link System#nanoTime}.", "Heuristic": ["H1"]}, {"nl": "Checks whether the parameter is a valid IPv6 address (including compressed).", "Heuristic": []}, {"nl": "Get the automatic resolution state.", "Heuristic": []}, {"nl": "Sets the reg pcl test result.", "Heuristic": ["H1"]}, {"nl": "Sets the reg feed id.", "Heuristic": ["H1"]}, {"nl": "Sets up a new  {@link TtlBucket} before a test runs.", "Heuristic": ["H1"]}, {"nl": "Sets the measurement_date.", "Heuristic": []}, {"nl": "Gets the replacement command for alias.", "Heuristic": []}, {"nl": "Sets up the buffer before a test runs.", "Heuristic": []}, {"nl": "Not-null value; ensure this value is available before it is saved to the database.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Saves a long value under the provided key in the preference manager. If  {@code value}is  {@code null}, then the provided key will be removed from the preferences.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.MTWParser#setTemperature(double)}.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link com.sqa.em.util.helper.RequestInput#getChar(java.lang.String)}.", "Heuristic": ["H1"]}, {"nl": "Creates a simple file with  {@code len} bytes.", "Heuristic": ["H1"]}, {"nl": "Computes the value of a metric for an operation.", "Heuristic": []}, {"nl": "What every XSL transform needs", "Heuristic": []}, {"nl": "Gets the value of the validate property.", "Heuristic": []}, {"nl": "Sets the current master thread.", "Heuristic": []}, {"nl": "Adds the specified value to the page at the position denoted by currentpos.  Then increments currentpos by the size of the value.", "Heuristic": ["H1"]}, {"nl": "Extends the tree by calculating the requested child for the given path. For example, to get the key at position 1/2/3 you would pass 1/2 as the parent path and 3 as the child number.", "Heuristic": []}, {"nl": "Sets the value of the name property.", "Heuristic": []}, {"nl": "Stop this daemon.", "Heuristic": []}, {"nl": "Gets the Counter Prefs.", "Heuristic": ["H1"]}, {"nl": "Checks if this directory has been marked for removal.", "Heuristic": []}, {"nl": "Set the differences.", "Heuristic": []}, {"nl": "Converts  {@code CassandraRDD} into {@code CassandraJavaRDD}.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Get the remaining utility of a cell in the projected q-matrix at a given  cell position (row,column).", "Heuristic": ["H1"]}, {"nl": "Get the accurate system time", "Heuristic": []}, {"nl": "Validate the incoming request for mandatory parameters.", "Heuristic": []}, {"nl": "Gets the data set id.", "Heuristic": ["H1"]}, {"nl": "Gets a Builder configured as this object.", "Heuristic": []}, {"nl": "Tests that building a  {@link FreeOptions} with the defaults works.", "Heuristic": ["H1"]}, {"nl": "Like  {@link JsonGenerator#writeObjectField(String,Object)} but supports Maps and Lists.", "Heuristic": ["H1"]}, {"nl": "Called when a Conduit is actually required.", "Heuristic": []}, {"nl": "Gets the expected value.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns a simple representation of the Request token", "Heuristic": []}, {"nl": "Set logger", "Heuristic": ["H2"]}, {"nl": "Method for implementing dynamic environments in which not all changes are directly caused by agent action execution. The default implementation does nothing.", "Heuristic": []}, {"nl": "Return a  {@link URI}", "Heuristic": ["H1"]}, {"nl": "Combines the two BitArrays using bitwise OR.", "Heuristic": []}, {"nl": "Return machine ID", "Heuristic": []}, {"nl": "Initialize the output with a new underlying stream.", "Heuristic": []}, {"nl": "Returns  {@link Rect} representing margins for any view.", "Heuristic": ["H1"]}, {"nl": "This method simply wraps to  {@link #createHtml()}.", "Heuristic": ["H1"]}, {"nl": "Get the SubjectProvider.", "Heuristic": []}, {"nl": "Returns the total number of items that have been added to the ring.", "Heuristic": []}, {"nl": "Return the total number of workflows.  For pagination purposes.", "Heuristic": []}, {"nl": "Sets the URI pointing to a logo image of the client application", "Heuristic": []}, {"nl": "Adds an end point URL of a service as a trusted", "Heuristic": []}, {"nl": "Test the number of bytes read.", "Heuristic": []}, {"nl": "Return the databinding name.", "Heuristic": ["H1"]}, {"nl": "for log msg purposes", "Heuristic": ["H1"]}, {"nl": "Sets whether execution should break when a function is entered.", "Heuristic": []}, {"nl": "Gets the mime type of the content. See  {@link ShareToMessengerParams#VALID_MIME_TYPES} forwhat mime types are supported.", "Heuristic": ["H1"]}, {"nl": "sorts an array using Quick Sort Algorithm", "Heuristic": ["H1"]}, {"nl": "Given a path return the number of free KB", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.GSAParser#setPositionDOP(double)}.", "Heuristic": ["H1"]}, {"nl": "Remove entry from triples.", "Heuristic": []}, {"nl": "Creates a new indexselect scan for this query", "Heuristic": ["H1"]}, {"nl": "Gets the pseudoElement attribute of the Selector object", "Heuristic": []}, {"nl": "Get the LanguageVersion for the first Language of a source file with the given name.", "Heuristic": []}, {"nl": "Set the token Id", "Heuristic": ["H1"]}, {"nl": "Tests if the block is evictable.", "Heuristic": ["H1"]}, {"nl": "Required. The period of time, in seconds, that must pass before any scaling can occur after the previous scaling. Must be an integer between 0 and 86400 (24 hrs).", "Heuristic": []}, {"nl": "Recebe um  {@link List} de objetos do tipo {@link Vertice} e retorna um novo  {@link List} ordenado deles.", "Heuristic": ["H1"]}, {"nl": "Sets up this test.", "Heuristic": []}, {"nl": "Parses bytes of a response header from an HTTP transport.", "Heuristic": []}, {"nl": "Decodes data from Base64 notation.", "Heuristic": []}, {"nl": "Template Id is unique representation of the template", "Heuristic": ["H1"]}, {"nl": "Write some metadata about the message. The", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.SentenceFactory#registerParser(java.lang.String,java.lang.Class)}.", "Heuristic": ["H1"]}, {"nl": "Appends the given fragment to the XPath expression.", "Heuristic": []}, {"nl": "Returns map containing the given entries.", "Heuristic": []}, {"nl": "Clear parameters used for the transformation", "Heuristic": []}, {"nl": "Sets the total elapsed minutes.", "Heuristic": []}, {"nl": "Returns info such as OpenID server URL, OpenID Identifier pattern etc", "Heuristic": []}, {"nl": "Getter for the test application id.", "Heuristic": ["H1"]}, {"nl": "toDto - covert Stock to Stock DTO", "Heuristic": ["H1"]}, {"nl": "Adds a gene to the genes in the ROI. N.B. All this method does is wrap the add function. It does not fancy. Specifically, it does not check for duplicates.", "Heuristic": []}, {"nl": "Gets the value of the workflowImpl property.", "Heuristic": ["H1"]}, {"nl": "Returns the whole range relative to the specified comparator.", "Heuristic": []}, {"nl": "Tests to ensure the permanent file path is used when upload is called.", "Heuristic": []}, {"nl": "Write the given long value (64-bit) in big-endian order to the buffer", "Heuristic": []}, {"nl": "Sets the file size.", "Heuristic": []}, {"nl": "Helper for error callbacks that just returns the Status.ERROR by default", "Heuristic": ["H1"]}, {"nl": "Return the list of action IDs to fail.", "Heuristic": ["H1"]}, {"nl": "Returns the token type such as bearer, mac, etc", "Heuristic": []}, {"nl": "Adds  {@code equalityGroup} with objects that are supposed to be equal toeach other and not equal to any other equality groups added to this tester.", "Heuristic": ["H1"]}, {"nl": "Returns the lower end point of the interval.", "Heuristic": []}, {"nl": "Decreases the buffer's pin count.", "Heuristic": []}, {"nl": "Get the alias used to select a certificate for encryption", "Heuristic": []}, {"nl": "Set soap action to the message", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns the hostname verifier, or null if this is not an HTTPS address.", "Heuristic": []}, {"nl": "is empty.", "Heuristic": ["H1", "H2"]}, {"nl": "Initializes the object using a journal entry.", "Heuristic": []}, {"nl": "Set the username/alias to use to encrypt any issued tokens. This is a default value - it can be configured per Service in the ServiceMBean.", "Heuristic": []}, {"nl": "get the Ruleset that this Selector is part of", "Heuristic": ["H1"]}, {"nl": "Return the command name.", "Heuristic": []}, {"nl": "Gets the value that has triggered the sink, e.g., the InvokeExpr", "Heuristic": ["H1"]}, {"nl": "Error log message.", "Heuristic": []}, {"nl": "Get the cache which holds the RandomPasswordContainer cache", "Heuristic": []}, {"nl": "How many blocks pass between difficulty adjustment periods. Bitcoin standardises this to be 2015.", "Heuristic": ["H1"]}, {"nl": "Gets the mutation type (amino acid change).", "Heuristic": []}, {"nl": "Returns the last value corresponding to the specified field, or null.", "Heuristic": []}, {"nl": "Set the prefix.", "Heuristic": []}, {"nl": "Assert a boolean expression, throwing  {@code IllegalArgumentException}if the test result is  {@code false}. Assert.isTrue(i &gt; 0);", "Heuristic": ["H1"]}, {"nl": "Takes String of words to ignore. Ignore words are added to a Set.", "Heuristic": []}, {"nl": "Returns the estimated number of distinct values for the specified field. In actuality, this estimate is a complete guess.", "Heuristic": []}, {"nl": "Adds a  {@link net.sf.marineapi.nmea.event.SentenceListener} that is interested in receiving onlysentences of certain type.", "Heuristic": ["H1"]}, {"nl": "Returns the buffer pinned to the specified block. The method returns null if the transaction has not pinned the block.", "Heuristic": []}, {"nl": "For caches that do not override  {@link #sizeOf}, this returns the maximum number of entries in the cache. For all other caches, this returns the maximum sum of the sizes of the entries in this cache.", "Heuristic": ["H1"]}, {"nl": "Invokes  {@code future.}{@link Future#get() get()} uninterruptibly.Similar methods:  To retrieve a result from a  {@code Future} that is already done, use{@link Futures#getDone Futures.getDone}. To treat  {@link InterruptedException} uniformly with other exceptions, use{@link Futures#getChecked(Future,Class) Futures.getChecked}. To get uninterruptibility and remove checked exceptions, use  {@link Futures#getUnchecked}. ", "Heuristic": ["H1"]}, {"nl": "Returns the length of the array.", "Heuristic": []}, {"nl": "DELETE  USER :login : delete the \"login\" User.", "Heuristic": ["H1"]}, {"nl": "Creates an instance of  {@link DefaultNHttpServerConnection} based on thegiven  {@link IOSession}.  This method can be overridden in a super class in order to provide a different implementation of the  {@link NHttpServerIOTarget} interface.", "Heuristic": ["H1"]}, {"nl": "Checks whether a character is  {@link #UNSAFE_CHARS unsafe}.", "Heuristic": ["H1"]}, {"nl": "Gets whether items in collection and array returns should be emitted as individual output tuples.", "Heuristic": []}, {"nl": "Return if machine is running under Windows", "Heuristic": []}, {"nl": "Gets the error info.", "Heuristic": []}, {"nl": "Return the weight of this node, which is used for positioning in a row.", "Heuristic": []}, {"nl": "Gets the refresh token key the client can use to obtain a new access token", "Heuristic": []}, {"nl": "Gets the header.", "Heuristic": []}, {"nl": "Returns true if the specified field is in the projection list.", "Heuristic": []}, {"nl": "Returns the complete url (host + resource + encoded querystring parameters).", "Heuristic": ["H1"]}, {"nl": "Tests getting and setting fields.", "Heuristic": []}, {"nl": "Retrieve the group attributes by group id", "Heuristic": ["H1"]}, {"nl": "Call  {@link Callable#call(Context cx,Scriptable scope,Scriptable thisObj,Object[] args)}of callable under restricted security domain where an action is allowed only if it is allowed according to the Java stack on the moment of the execWithDomain call and securityDomain. Any call to  {@link #getDynamicSecurityDomain(Object)} duringexecution of callable.call(cx, scope, thisObj, args) should return a domain incorporate restrictions imposed by securityDomain and Java stack on the moment of callWithDomain invocation.  The method should always be overridden, it is not declared abstract for compatibility reasons.", "Heuristic": ["H1"]}, {"nl": "Aborts the authentication (second phase). This method is called if the LoginContext's overall authentication failed. (login failed) It cleans up any state that was changed in the login and commit methods.", "Heuristic": []}, {"nl": "Returns true or false, depending on whether this instance is equal to 1/1.", "Heuristic": []}, {"nl": "get i-th ternaryCollisionString out of 2^n ternaryCollisionStrings since 3^n Elemnts can be generated result string will have a length of 2n chars 2n since each Element is represented by 2 char string! How does it work for n = 2 -> 2^2 = 9 possible strings? Algorithm generates 29 Matrix and replaces numbers with collision strings aka table with ternary-Numbers row0: 00 row1: 01 row2: 10 row3: 11 for i = 2 -> 1th row is picked and created!", "Heuristic": ["H1"]}, {"nl": "Adds a string to the graph's source (with newline).", "Heuristic": []}, {"nl": "Tests the  {@link StorageTier#getCapacityBytes()} method.", "Heuristic": ["H1"]}, {"nl": "Runs the given  {@code Runnable} on the UI thread.", "Heuristic": ["H1"]}, {"nl": "Sets the size of the block in bytes.", "Heuristic": []}, {"nl": "Creates a JUNG Graph from the Specified List of Interactions.", "Heuristic": []}, {"nl": "Returns the base string extractor.", "Heuristic": []}, {"nl": "Return lower triangular factor", "Heuristic": []}, {"nl": "select property and get the new triple table", "Heuristic": ["H1"]}, {"nl": "Gets the value of the token property.", "Heuristic": []}, {"nl": "Estimates the number of block accesses for the table, which is obtainable from the statistics manager.", "Heuristic": []}, {"nl": "Sets the connect timeout for the underlying  {@link HttpURLConnection}", "Heuristic": ["H1"]}, {"nl": "Returns a new  {@code CacheStats} representing the sum of this {@code CacheStats} and{@code other}.", "Heuristic": ["H1"]}, {"nl": "Get the value", "Heuristic": []}, {"nl": "Return the timeout to use for repeatedly querying app status while it is being deployed. Default value is one minute, being queried every 5 seconds.", "Heuristic": []}, {"nl": "regist annotation & field processor if you don't allocate xlsbeans.proeprties , you will use this method for registing annotation & field processor allocation src folder  -src/xlsbeans.proeprties", "Heuristic": ["H1"]}, {"nl": "Returns the real path of the given URI. If the given URI is a content:// URI, the real path is retrieved from the media store.", "Heuristic": []}, {"nl": "Sets the synchronous timeout", "Heuristic": []}, {"nl": "Checks whether the specified position is inside the box.", "Heuristic": []}, {"nl": "Calls the given  {@link Callable} on a new {@link Thread}, waits for it  {@code long}milliseconds to finish and returns  {@code T}, otherwise times out with {@link TimeoutException}.", "Heuristic": ["H1"]}, {"nl": "Returns a builder, but requires the user to specify any parameters required when creating a resource. In this case, both parameters are required.", "Heuristic": []}, {"nl": "Request active location updates.  These updates will be triggered by a direct request from the Location Manager.", "Heuristic": []}, {"nl": "get float preferences", "Heuristic": ["H1"]}, {"nl": "Get a random sample from P(Xi | parents(Xi))", "Heuristic": []}, {"nl": "add an claim to the required cliams list", "Heuristic": ["H1"]}, {"nl": "Returns true if the given state is a goal state.", "Heuristic": []}, {"nl": "Create a default association name from its ends.", "Heuristic": []}, {"nl": "Add a named output property.", "Heuristic": []}, {"nl": "Update the existing settings.", "Heuristic": []}, {"nl": "Appends a single int.", "Heuristic": []}, {"nl": "Set the individual structure B.", "Heuristic": []}, {"nl": "Returns a copy of the specified subrange of the specified array that is literally an Object[], and not e.g. a  {@code String[]}.", "Heuristic": ["H1"]}, {"nl": "Checks if the given path is properly formed.", "Heuristic": []}, {"nl": "writes a data packet into the sendQueue, waiting at most for the specified time if this is not possible due to a full send queue", "Heuristic": ["H1"]}, {"nl": "Ends a subquery and returns the parent query.", "Heuristic": ["H1"]}, {"nl": "Add dynamic property to eventPublisher bean", "Heuristic": []}, {"nl": "Call  {@link MotionEvent#findPointerIndex(int)}. If running on a pre- {@android.os.Build.VERSION_CODES #HONEYCOMB} device,does nothing and returns -1.", "Heuristic": ["H1"]}, {"nl": "Create a diagram name from a package name.", "Heuristic": []}, {"nl": "The forward equation (15.5) in Matrix form becomes (15.12):  f1:t+1 = &alpha;Ot+1TTf1:t ", "Heuristic": ["H1"]}, {"nl": "Returns the list of all users who are allowed to bypass the access restriction placed on the specified repository.", "Heuristic": []}, {"nl": "This function obtains a name, perhaps namespace-qualified, for an element.", "Heuristic": []}, {"nl": "Put specified fragment to root of backstack", "Heuristic": ["H1"]}, {"nl": "Starts the count down animation.", "Heuristic": ["H1"]}, {"nl": "Downloads the entire resource instead of part.", "Heuristic": []}, {"nl": "Getter for the profile that is currently logged in to the application.", "Heuristic": []}, {"nl": "Returns whether or not the given event can occur in the current state", "Heuristic": ["H1"]}, {"nl": "Posts an event to all registered subscribers. This method will return successfully after the event has been posted to all subscribers, and regardless of any exceptions thrown by subscribers. If no subscribers have been subscribed for  {@code event}'s class, and  {@code event} is notalready a  {@link DeadEvent}, it will be wrapped in a DeadEvent and reposted.", "Heuristic": ["H1"]}, {"nl": "Method defaultHasNullValue.", "Heuristic": []}, {"nl": "Return the public interface of the Coordinator engine service.", "Heuristic": []}, {"nl": "Gets the List of Genes in the Set.", "Heuristic": []}, {"nl": "Creates a new OR subquery.  Make sure to call endSubquery to get return this query. e.g. field:something OR (subquery)", "Heuristic": ["H1"]}, {"nl": "Sets the waiting thread.  If this has already been aborted, the waiting thread is immediately interrupted.", "Heuristic": []}, {"nl": "The file after it has been compressed", "Heuristic": []}, {"nl": "Returns the file object for the specified configuration key.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Sets the value of the comment property.", "Heuristic": []}, {"nl": "Destroy the service.", "Heuristic": []}, {"nl": "Gets a list of suggested user ids", "Heuristic": ["H1"]}, {"nl": "Converts the content of this buffer to an array of bytes.", "Heuristic": []}, {"nl": "Registra as classes no Kryo do servidor para que ele possa enviar e receber classes desse tipo.", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link Steps }", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMBParser#setVelocity()}.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the date property.", "Heuristic": []}, {"nl": "Find a single value of the given type in the given Collection.", "Heuristic": []}, {"nl": "Send an status acknowledgment to the remote Gitblit server.", "Heuristic": ["H1"]}, {"nl": "Set satellite azimuth, in degrees from true north (0..359&deg;).", "Heuristic": ["H1"]}, {"nl": "Tests to ensure  {@link S3AOutputStream#write(int)} calls the underlying output stream.", "Heuristic": ["H1"]}, {"nl": "Gets the confidentiality status of this client application.", "Heuristic": []}, {"nl": "First byte of a base58 encoded dumped private key. See  {@link org.bitcoinj.core.DumpedPrivateKey}.", "Heuristic": ["H1"]}, {"nl": "Flush a  {@link Flushable}, with control over whether an  {@code IOException} may be thrown.If  {@code swallowIOException} is true, then we don't rethrow {@code IOException}, but merely log it.", "Heuristic": ["H1"]}, {"nl": "Gets list of case Ids.", "Heuristic": []}, {"nl": "Gets Global Singleton.", "Heuristic": []}, {"nl": "The correct specificity value for this selector and its sibling-axis selectors", "Heuristic": []}, {"nl": "Parses the levelValue into a Level instance and assigns to the Logger instance named by loggerName; if the the levelValue is invalid (e.g. misspelled), assigns Level.OFF to the logger.", "Heuristic": ["H1"]}, {"nl": "Creates a new Hessian 2.0 serializer.", "Heuristic": ["H1"]}, {"nl": "Notify the gui that the current project's save state has changed. There are 2 receivers: the SaveProject tool icon and the title bar (for showing a ).", "Heuristic": ["H1"]}, {"nl": "Call  {@link MotionEvent#getPointerId(int)}. If running on a pre- {@android.os.Build.VERSION_CODES #HONEYCOMB} device,{@link IndexOutOfBoundsException} is thrown.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the paramName property.", "Heuristic": ["H1"]}, {"nl": "Create schema object for the given xsd", "Heuristic": ["H1"]}, {"nl": "Returns the type of this extensibility element.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Warning log message.", "Heuristic": []}, {"nl": "Gets list of all patient IDs in the set as one string.", "Heuristic": ["H1"]}, {"nl": "Returns whether the given ufs address indicates a object storage ufs.", "Heuristic": ["H1"]}, {"nl": "Cancels any notifications of this type previously shown using {@link #notify(Context,String,int)}.", "Heuristic": ["H1"]}, {"nl": "This is the input matrix after it has been overwritten with the decomposition.", "Heuristic": []}, {"nl": "Replace character at the specified index by another.", "Heuristic": []}, {"nl": "Load a class file for class  {@code name}.", "Heuristic": ["H1"]}, {"nl": "Returns error message and stack trace related with occured exception.", "Heuristic": ["H1"]}, {"nl": "Deserialize only an i16 field (addressed by recursively using field id) from a byte record.", "Heuristic": ["H1"]}, {"nl": "Returns the count to which the specified key is mapped in this frequency counter, divided by the total of all counts.", "Heuristic": []}, {"nl": "Returns the schema of the product, which is the union of the schemas of the underlying queries.", "Heuristic": []}, {"nl": "get key iterator.", "Heuristic": ["H1"]}, {"nl": "Called when the target has changed.", "Heuristic": []}, {"nl": "Writes a string to the specified offset of the buffer's page. This method assumes that the transaction has already written an appropriate log record. A negative lsn value indicates that a log record was not necessary. The buffer saves the id of the transaction and the LSN of the log record.", "Heuristic": ["H1"]}, {"nl": "Gets the directory where the CSV files are created.", "Heuristic": []}, {"nl": "Returns map containing the given entries.", "Heuristic": []}, {"nl": "Puts the expiration date into a Bundle.", "Heuristic": []}, {"nl": "Destroy.", "Heuristic": ["H2"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.HDGParser#setVariation(double)}.", "Heuristic": ["H1"]}, {"nl": "Gets a Builder configured as this object.", "Heuristic": []}, {"nl": "Sets the value of the username property.", "Heuristic": []}, {"nl": "Look up the final URI of a  {@link DAVResource} as visible from theHTTP client requesting this transaction.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the username property.", "Heuristic": []}, {"nl": "Sets value of the  {@link NIOReactorPNames#INTEREST_OPS_QUEUEING} parameter.", "Heuristic": ["H1"]}, {"nl": "Gets association response strings from the backend.", "Heuristic": []}, {"nl": "Removes the field name from set of excluded fields.", "Heuristic": []}, {"nl": "Deserialize the Thrift object from a Java string, using a specified character set for decoding.", "Heuristic": []}, {"nl": "This method should never be called. Throws a ClassCastException.", "Heuristic": []}, {"nl": "Creates a list of all permutations for a set with N elements.", "Heuristic": []}, {"nl": "Sets the value of the zip property.", "Heuristic": []}, {"nl": "Walk forwards.", "Heuristic": ["H2"]}, {"nl": "Saves the position of the current record, so that it can be restored at a later time.", "Heuristic": []}, {"nl": "Returns the OAuth2 Grant Type", "Heuristic": []}, {"nl": "Returns the type of the parameter.", "Heuristic": []}, {"nl": "Registers the given connection with this handler.  The connection will be held until {@link #remove} or {@link #closeIdleConnections} is called.", "Heuristic": []}, {"nl": "Checks the two objects for equality by delegating to their respective equals() methods.", "Heuristic": []}, {"nl": "Get each Source to be processed.", "Heuristic": []}, {"nl": "Mutator for the From property.", "Heuristic": ["H1"]}, {"nl": "The component we are decorating.", "Heuristic": []}, {"nl": "Set the deletion difference.", "Heuristic": []}, {"nl": "Returns the list of sentences in the knowledge base.", "Heuristic": []}, {"nl": "public method that the user can call in order to upload a folder.", "Heuristic": ["H1"]}, {"nl": "Returns all the metrics of the genetic algorithm.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMBParser#setBearing(double)} .", "Heuristic": ["H1"]}, {"nl": "Test of addCapabilities method, of class Device.", "Heuristic": []}, {"nl": "Returns the current maximum queue size for background revalidations.", "Heuristic": []}, {"nl": "Create a new StrictMode instance.", "Heuristic": []}, {"nl": "Returns the key aliases from the primary key store.", "Heuristic": []}, {"nl": "Given a memory page and offset within that page, encode this address into a 64-bit long. This address will remain valid as long as the corresponding page has not been freed.", "Heuristic": []}, {"nl": "Get the terse name of this LanguageVersion. This is Language terse name appended with the LanguageVersion version if not an empty String.", "Heuristic": ["H1"]}, {"nl": "Setup", "Heuristic": ["H2"]}, {"nl": "Parse the JSON as a RegisteredClient (useful in the dynamic client filter)", "Heuristic": []}, {"nl": "Starts scrolling", "Heuristic": ["H2"]}, {"nl": "Now that Differences can be constructed from prototypes we need to be able to compare them to those in DifferenceConstants", "Heuristic": []}, {"nl": "Verifies bug #939 Jsp parser fails on $", "Heuristic": ["H1"]}, {"nl": "Gets the appropriateSibling attribute of the Selector object", "Heuristic": []}, {"nl": "Sets this directory as having been successfully removed.", "Heuristic": []}, {"nl": "Set the behind view content to an explicit view. This view is placed directly into the behind view 's view hierarchy. It can itself be a complex view hierarchy.", "Heuristic": ["H1"]}, {"nl": "The given listener will be called on the autosave thread before and after the wallet is saved to disk.", "Heuristic": []}, {"nl": "Nest this query as a subquery. e.g. field:something AND field2:something else ==>  (field:something AND field2:something else)", "Heuristic": ["H1"]}, {"nl": "Converts varargs of objects to a string.", "Heuristic": ["H1"]}, {"nl": "Set the longitude degrees of Position", "Heuristic": []}, {"nl": "Registers a filter for attributes. Only attributes for which the predicate returns true are part of the comparison.  By default all attributes are considered. The \"special\" namespace, namespace-location and schema-instance-type attributes can not be ignored this way. If you want to suppress comparison of them you'll need to implement  {@link DifferenceEvaluator}.", "Heuristic": ["H1"]}, {"nl": "Write 24-bit of the given value in big-endian order to the buffer", "Heuristic": []}, {"nl": "Reads in the Response String from Server.", "Heuristic": []}, {"nl": "Get the file this stack frame points to. JS traces return the full path to the file here, while Java traces only return the file name (the path is not known).", "Heuristic": []}, {"nl": "Set the list of attachments.", "Heuristic": []}, {"nl": "Registers an  {@link AccessibilityManager.AccessibilityStateChangeListener} for changes inthe global accessibility state of the system.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link BufferUtils#cloneByteBuffer(ByteBuffer)} method after allocating a buffer via{@link ByteBuffer#allocateDirect(int)} method.", "Heuristic": ["H1"]}, {"nl": "Determine if SD card exists.", "Heuristic": []}, {"nl": "get all the coordinates calls: none called by: codebook", "Heuristic": ["H1"]}, {"nl": "Adds the given opcode to the given index in the program", "Heuristic": []}, {"nl": "Test of getTsReceived method, of class LogEntryRequest.", "Heuristic": []}, {"nl": "parse query string to Parameters.", "Heuristic": ["H1"]}, {"nl": "Gets Console Mode Flag.", "Heuristic": []}, {"nl": "Return whether there is an explicit length indicated in the format string.", "Heuristic": []}, {"nl": "Positions the scan before the first record. That is, the LHS scan is positioned at its first record, and the RHS scan is positioned before the first record of the first chunk.", "Heuristic": []}, {"nl": "Method to add an element to this utility list and update the sums at the same time.", "Heuristic": []}, {"nl": "Tests the  {@link BlockStoreMeta#getUsedBytesOnTiers()} method.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns an index for which  {@link #valueAt} would return thespecified key, or a negative number if no keys map to the specified value. Beware that this is a linear search, unlike lookups by key, and that multiple keys can map to the same value and this will find only one of them.", "Heuristic": ["H1"]}, {"nl": "Adds a trailing separator if it does not exist in path.", "Heuristic": []}, {"nl": "Asigna todos los coeficientes del polinomio", "Heuristic": ["H1"]}, {"nl": "Store the shorter of the incoming value or the existing value in the map at the key specified.", "Heuristic": ["H1"]}, {"nl": "Set the user login name", "Heuristic": []}, {"nl": "Generic equality comparison.", "Heuristic": []}, {"nl": "Returns the reader that it is using internally.", "Heuristic": []}, {"nl": "Like newline(), but forces a newline with a specified indentation.", "Heuristic": []}, {"nl": "\"Pushes back\" a byte on to the specified buffer, by rewinding the position by 1 byte", "Heuristic": []}, {"nl": "Decomposes the provided symmetric matrix.", "Heuristic": []}, {"nl": "Tracks the change type for the specified ref.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": " Induced matrix p = infinity norm.  ||A||&#8734; = max(i=1 to m; sum(j=1 to n; |aij|)) ", "Heuristic": ["H1"]}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.parser.ZDAParser#getYear()}.", "Heuristic": ["H1"]}, {"nl": "Sets the run id.", "Heuristic": ["H1"]}, {"nl": "Specifies the particular maps which must be loaded for this screen. It returns null by default.", "Heuristic": []}, {"nl": "Returns the corresponding primitive type of  {@code type} if it is a wrapper type; otherwisereturns  {@code type} itself. Idempotent. unwrap(Integer.class) == int.class unwrap(int.class) == int.class unwrap(String.class) == String.class ", "Heuristic": ["H1"]}, {"nl": "Determines the index of the next header.", "Heuristic": []}, {"nl": "Argument will be declared valid.", "Heuristic": []}, {"nl": "loads a resource for the specified path", "Heuristic": ["H1"]}, {"nl": "Creates a  {@link BlockStoreLocation} for this directory view. Redirecting to{@link StorageDir#toBlockStoreLocation}", "Heuristic": ["H1"]}, {"nl": "Sets the number of iterations of the genetic algorithm.", "Heuristic": []}, {"nl": "Helper function to retrieve user authorities.", "Heuristic": []}, {"nl": "Gets the action type", "Heuristic": []}, {"nl": "Test of getHash method, of class CollisionDJBX33X.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gives a chance to the host View to populate the accessibility event with its text content.  The default implementation behaves as {@link ViewCompat#onPopulateAccessibilityEvent(View,AccessibilityEvent) ViewCompat#onPopulateAccessibilityEvent(AccessibilityEvent)} forthe case of no accessibility delegate been set. ", "Heuristic": ["H1"]}, {"nl": "Obtain a READ lock for a source.", "Heuristic": []}, {"nl": "Set the the specified scrolling interpolator", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link MetaData.Template }", "Heuristic": ["H1"]}, {"nl": "Binds a listener to this count down animation. The count down listener is notified of events such as the end of the animation.", "Heuristic": ["H1"]}, {"nl": "Set the list of AttributeStatementBeans.", "Heuristic": []}, {"nl": "Gets the run id.", "Heuristic": ["H1"]}, {"nl": "Returns the dataRID value of the current leaf record.", "Heuristic": []}, {"nl": "Sets the run id.", "Heuristic": ["H1"]}, {"nl": "Returns the raw packing format string.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns true if this route uses modern tls.", "Heuristic": ["H1"]}, {"nl": "Resolves serialized instance of enumeration value.", "Heuristic": []}, {"nl": "tar.bzip2 the contents of the tree at the (optionally) specified revision and the (optionally) specified basepath to the supplied outputstream.", "Heuristic": ["H1"]}, {"nl": "Returns the name of the file where the block lives.", "Heuristic": []}, {"nl": "Parse a string into a  {@code SourceFile} AST node,applying substitutions.", "Heuristic": ["H1"]}, {"nl": "Invoked by  {@link #visited visited} when visiting an attribute node.", "Heuristic": ["H1"]}, {"nl": "Gets the actual port that the web service is listening on (used by unit test only).", "Heuristic": []}, {"nl": "Gets the number of bytes used to encode this originally if deserialized from a byte array. Otherwise returns the minimum encoded size", "Heuristic": ["H1"]}, {"nl": " Append a hashCode for a long array. ", "Heuristic": []}, {"nl": "Gets the value of the arg0 property.", "Heuristic": []}, {"nl": "Here, we attempt to get the password from the private alias/passwords map.", "Heuristic": []}, {"nl": "Gets the polling time unit.", "Heuristic": []}, {"nl": "Unbinds all plugins from the activity", "Heuristic": []}, {"nl": "Set the trusted stores", "Heuristic": []}, {"nl": "Return the time in ms taken to run the pass, including the time in spawned passes", "Heuristic": []}, {"nl": "Sets the value of the challengeResponse property.", "Heuristic": []}, {"nl": "Attempts to connect the given handler to this, returning true if it is the new handler, false if there was already one attached.", "Heuristic": []}, {"nl": "performs Fast Fourier Transformation", "Heuristic": ["H1"]}, {"nl": "Remove a rule from the perspective that will generate child nodes for any given parent node.", "Heuristic": []}, {"nl": "Returns a hash code for this the enumeration value.", "Heuristic": []}, {"nl": "Returns the current port number, with a default if no port is defined.", "Heuristic": []}, {"nl": "Produce a JSONArray of JSONObjects from a comma delimited text string using a supplied JSONArray as the source of element names.", "Heuristic": []}, {"nl": "Checks if the given file is persisted.", "Heuristic": []}, {"nl": "Returns the size in bytes of the file that is used to store the chain with the current parameters.", "Heuristic": []}, {"nl": "Returns result value as date.", "Heuristic": []}, {"nl": "Gets the integer value of the specified field of the current scan.", "Heuristic": []}, {"nl": "Called to allow you to decide if you want to capure control of the matching process. If you return true, then {@link #hasFreePart hasFreePart} will be checked to see if youexpect more things to follow. The default behaviour is to return false until the character or String given as parameter to the constructor has been matched.", "Heuristic": ["H1"]}, {"nl": "Gets the loaded in cats.", "Heuristic": []}, {"nl": "Provide your own custom  {@link DifferenceEvaluator} implementation.This overwrites the Default DifferenceEvaluator. If you want use your custom DifferenceEvaluator in combination with the default or another DifferenceEvaluator you should use  {@link DifferenceEvaluators#chain(DifferenceEvaluator)}or  {@link DifferenceEvaluators#first(DifferenceEvaluator)} to combine them: Diff myDiff = DiffBuilder.compare(control).withTest(test) .withDifferenceEvaluator( DifferenceEvaluators.chain( DifferenceEvaluators.Default, new MyCustomDifferenceEvaluator())) .... .build(); ", "Heuristic": ["H1"]}, {"nl": "Get the step at a given index in the path", "Heuristic": []}, {"nl": "Operation setDownlinks changes the value of the attribute _downlinks.", "Heuristic": ["H1"]}, {"nl": "Adds wLen characters to the word being stemmed contained in a portion of a char[] array. This is like repeated calls of add(char ch), but faster.", "Heuristic": []}, {"nl": "Gets the redirect URI", "Heuristic": []}, {"nl": "Reset the current stream position.", "Heuristic": []}, {"nl": "Gets the elementStyling attribute of the StandardAttributeResolver object", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "PUT  /dishes : Updates an existing dish.", "Heuristic": ["H1"]}, {"nl": "Test method for  {@link ActivityController#handleEvent(org.osgi.service.event.Event)}Verifies that  {@code IllegalArgumentException} is thrown when {@code Event}'s  {@link ActivityEvent#USER_ID_KEY} property isempty.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the id property.", "Heuristic": ["H1"]}, {"nl": "Create hash for a key", "Heuristic": []}, {"nl": "Test of setTsSend method, of class LogEntryRequest.", "Heuristic": []}, {"nl": "Returns an  {@code Optional} instance containing the given non-null reference. To have {@code null} treated as {@link #absent}, use  {@link #fromNullable} instead.Comparison to  {@code java.util.Optional}: no differences.", "Heuristic": ["H1"]}, {"nl": "Calculate the name from the key.", "Heuristic": []}, {"nl": "Switches this mapper to read-only mode. Subsequent invocations of  {@link #addMapping addMapping}will trigger an exception.  The implementation here should be called only once. It replaces the internal maps with unmodifiable ones.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the templateId property.", "Heuristic": ["H1"]}, {"nl": "Sets the error such as \"invalid_grant\", etc", "Heuristic": []}, {"nl": "set Emojicon provider", "Heuristic": ["H1"]}, {"nl": "Returns the ID associated with this RID.", "Heuristic": []}, {"nl": "Retrieves a short field from the stream.", "Heuristic": []}, {"nl": "Check if input is a valid IPv4 address", "Heuristic": []}, {"nl": "Returns the parameter key", "Heuristic": []}, {"nl": "Check if this node is associated with a note.", "Heuristic": []}, {"nl": "Get a operation from the current classifier not yet modeled.", "Heuristic": ["H1"]}, {"nl": "Returns the correct ServerSocketChannel class based on IOMode.", "Heuristic": []}, {"nl": "Get the associated ClientIdentity", "Heuristic": []}, {"nl": "Sets the bus", "Heuristic": []}, {"nl": "check if the input groupId in atMeGroupList", "Heuristic": ["H1"]}, {"nl": "Sets up all dependencies before a test runs.", "Heuristic": []}, {"nl": "GET  /books : get all the books.", "Heuristic": ["H1"]}, {"nl": "Check whether this is an existing association", "Heuristic": []}, {"nl": " Computes a metric which measures the the quality of a singular value decomposition.  If a value is returned that is close to or smaller than 1e-15 then it is within machine precision.   SVD quality is defined as:  Quality = || A - U W VT|| / || A ||  where A is the original matrix , U W V is the decomposition, and ||A|| is the norm-f of A. ", "Heuristic": ["H1"]}, {"nl": "Accesses a float attribute from a tag name and an attribute name within the element identified by that tag.", "Heuristic": []}, {"nl": "Gets the user home directory as a File.", "Heuristic": []}, {"nl": "Return a subset of allNodes, containing the items in allNodes that are of the given type.", "Heuristic": []}, {"nl": "Called for entries that have been evicted or removed. This method is invoked when a value is evicted to make space, removed by a call to {@link #remove}, or replaced by a call to  {@link #put}. The default implementation does nothing.  The method is called without synchronization: other threads may access the cache while this method is executing.", "Heuristic": ["H1"]}, {"nl": "Encodes the moreInfoURL of this ToDoItem in an XML safe way and returns the new String. The String can be regained by running the returned String through {@link TodoParser#decode(String)}.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the string1 property.", "Heuristic": []}, {"nl": "Removes a validation pattern", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Matches any Labeled Node that has the given label.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#setStatus()} .", "Heuristic": ["H1"]}, {"nl": "Returns the version of the cookie specification to which this cookie conforms.", "Heuristic": []}, {"nl": "Enables or disables heuristic caching.", "Heuristic": []}, {"nl": "Test clearing approved sites for a client that has 2 stored approved sites. Ensure that the repository's remove() method is called twice.", "Heuristic": []}, {"nl": "Returns true if Gitblit is actively collecting garbage in this repository.", "Heuristic": ["H1"]}, {"nl": "Get the token Id", "Heuristic": ["H1"]}, {"nl": "Reads a specific byte value from the input byte buffer at the given offset.", "Heuristic": []}, {"nl": "Returns the z component of the cross product between vectors BC and BA.", "Heuristic": []}, {"nl": "Puts a new value in the property table with the appropriate flags", "Heuristic": []}, {"nl": "Writes message to to the output stream.", "Heuristic": ["H1"]}, {"nl": "This method should be called to update the timer whenever the interface is updated.", "Heuristic": []}, {"nl": "Parse a string into a  {@code ClassDecl} AST node,applying substitutions.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the responseType property.", "Heuristic": []}, {"nl": "Ensures the buffer can accommodate the required capacity.", "Heuristic": []}, {"nl": "Gets all Gene Sets.", "Heuristic": []}, {"nl": "Get the number of manually changed difference resolution states.", "Heuristic": []}, {"nl": "Gets a hashMap of the default copy number profiles.", "Heuristic": []}, {"nl": "doubles.", "Heuristic": ["H1", "H2"]}, {"nl": "Persistent Token are used for providing automatic authentication, they should be automatically deleted after 30 days.  This is scheduled to get fired everyday, at midnight. ", "Heuristic": ["H1"]}, {"nl": "Set a named property. We do nothing here, so all properties are effectively read-only.", "Heuristic": []}, {"nl": "Return the workflow job console URL.", "Heuristic": []}, {"nl": "Gets the CNA Value.", "Heuristic": []}, {"nl": "Returns the statistics on the  {@code x} values alone.", "Heuristic": ["H1"]}, {"nl": "Crea proceso en un thread independiente", "Heuristic": ["H1"]}, {"nl": "checks if the input string is a valid java keyword.", "Heuristic": ["H1"]}, {"nl": "Ensures that the entity content is fully consumed and the content stream, if exists, is closed.", "Heuristic": []}, {"nl": "Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData.Products }", "Heuristic": ["H1"]}, {"nl": "Returns true if this buffer is empty, that is, its {@link #length()} is equal to 0.", "Heuristic": []}, {"nl": "check if fast forward can", "Heuristic": ["H1"]}, {"nl": "Hilfsmethode zum Erzeugen von Zufallszahlen in einem gegebenen Intervall, inklusive Intervallgrenzen.", "Heuristic": ["H1"]}, {"nl": "Get the Msg value.", "Heuristic": []}, {"nl": "Returns  {@code true} if this map contains no key-value mappings.", "Heuristic": ["H1"]}, {"nl": "Sets the dest file name.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link RPCFileWriteRequest#getPayloadDataBuffer()} method.", "Heuristic": ["H1"]}, {"nl": "Gets the  {@link PaymentChannelClientState} object which stores the current state of the connection with theserver. Note that if you call any methods which update state directly the server will not be notified and channel initialization logic in the connection may fail unexpectedly.", "Heuristic": ["H1"]}, {"nl": "Return the EncryptionType enum value which denotes the type of encryption/ decryption that this KeyCrypter can understand.", "Heuristic": ["H1"]}, {"nl": "Returns the schema of the index records. The schema consists of the dataRID (which is represented as two integers, the block number and the record ID) and the dataval (which is the indexed field). Schema information about the indexed field is obtained via the table's metadata.", "Heuristic": ["H1"]}, {"nl": "Little-endian bytes to int.  Returns the value of  x[offset .. offset + 4] as an int, assuming x is interpreted as a  signed little-endian number (i.e., x[offset] is LSB). If you want to  interpret it as an unsigned number, call ubytes2long() on the result.", "Heuristic": ["H1"]}, {"nl": "Set the column of this node. A re-calculation of the weight is performed, because the column is an input parameter for the weight.", "Heuristic": []}, {"nl": "Build a HostAndPort instance from separate host and port values. Note: Non-bracketed IPv6 literals are allowed. Use  {@link #requireBracketsForIPv6()} toprohibit these.", "Heuristic": ["H1"]}, {"nl": "loads a resource for the specified path", "Heuristic": ["H1"]}, {"nl": "Returns a  {@link Weigher} that uses the integer key as the weight.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the workflowImplDescription property.", "Heuristic": ["H1"]}, {"nl": "Converts a wire type to a thrift type.", "Heuristic": []}, {"nl": "Checks if a specfied string represents a valid resource type.", "Heuristic": ["H1"]}, {"nl": "Adds a a list of repository commits.  This is used to construct discrete ref push log entries", "Heuristic": ["H1"]}, {"nl": "Get day of month.", "Heuristic": []}, {"nl": "Returns RP DTOs for the given OpenID", "Heuristic": []}, {"nl": "Retrieves a long value from preference manager. If no such key exists, it will return the value provided as defaultValue", "Heuristic": []}, {"nl": "Closes all client connections currently connected gracefully. Note that this does not settle the actual payment channels (and broadcast payment transactions), which must be done using the  {@link StoredPaymentChannelServerStates} which manages the states for the associatedwallet.", "Heuristic": ["H1"]}, {"nl": "Returns a list of space-separated strings from the specified key.", "Heuristic": []}, {"nl": "Gets the base domain name which KDC starts searching for principles. We will always have \"Users\" sub context appended to this.", "Heuristic": []}, {"nl": "Removes any temporary files associated with a particular native app call.", "Heuristic": []}, {"nl": "Gets token parameters", "Heuristic": []}, {"nl": "Returns the checksum computed for a given byte buffer.", "Heuristic": []}, {"nl": "Looks in SiddhiExecutionPlans - reads and adds to given SiddhiThread the execution plans provided", "Heuristic": ["H1"]}, {"nl": "Returns whether there are any characters left to be read.", "Heuristic": []}, {"nl": "Tests  {@link BaseKeyValuePartitionWriter#keyCount()} works.", "Heuristic": ["H1"]}, {"nl": "Checks if the client is the leader.", "Heuristic": []}, {"nl": "Decodes an encoded integer from the stream. This method does bounds checking, to ensure values fit, since some values may be encoded as unsigned values, and Java types are all signed.", "Heuristic": ["H1"]}, {"nl": "Returns a copy of the current contents of the cache, ordered from least recently accessed to most recently accessed.", "Heuristic": []}, {"nl": "Declares the argument value to be invalid. Gui will be redrawn but with a warning drawn in red above the entry widget.", "Heuristic": ["H1"]}, {"nl": "join string like javascript.", "Heuristic": ["H1"]}, {"nl": "Sets the checks if is update.", "Heuristic": []}, {"nl": "Resets the registry to its default state  This clears the registry as it stands and rediscovers the available factories. ", "Heuristic": ["H1"]}, {"nl": "Returns the original session request attachment, if available.", "Heuristic": []}, {"nl": "Perform all initialization.", "Heuristic": []}, {"nl": "Sets the value of the projectName property.", "Heuristic": []}, {"nl": "Computes the corresponding longitude for a given view x coordinate.", "Heuristic": []}, {"nl": "Returns number of queued commands", "Heuristic": []}, {"nl": "This implementation throws an UnsupportedOperationException.", "Heuristic": []}, {"nl": "Update user store without changing the domain name", "Heuristic": []}, {"nl": "Gets the polling period.", "Heuristic": []}, {"nl": "save the commit information and later output it", "Heuristic": ["H1"]}, {"nl": "GET  /site-urls/:id : get the \"id\" siteUrl.", "Heuristic": ["H1"]}, {"nl": "Gets the error", "Heuristic": []}, {"nl": "Get the compiler's error queue.", "Heuristic": []}, {"nl": "Gets the value of the access property.", "Heuristic": []}, {"nl": "Tests that a  {@link ClosedChannelException} is thrown when trying to read from a reader afterclosing it.", "Heuristic": ["H1"]}, {"nl": "Customize/expand the description string just before it is displayed. I.e. add offender specific information to the description string (e.g. its name).", "Heuristic": []}, {"nl": "Compile all the files listed in the set of Sources  {@code source}. Return true on success. The method  {@code outputFiles} can beused to obtain the output of the compilation.  This is the main entry point for the compiler, called from main().", "Heuristic": ["H1"]}, {"nl": "Quick check if a paramater exists.", "Heuristic": ["H1"]}, {"nl": "Returns the LSN of the most recent log record. As implemented, the LSN is the block number where the record is stored. Thus every log record in a block has the same LSN.", "Heuristic": ["H1"]}, {"nl": "Return whether the given object is a J2SE dynamic proxy.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns a MapMakerInternalMap for the benefit of internal callers that use features of that class not exposed through ConcurrentMap.", "Heuristic": ["H1"]}, {"nl": " Solves for non-singular lower triangular matrices using forward substitution.  B = L-1B  where B is a (m by n) matrix, L is a lower triangular (m by m) matrix. ", "Heuristic": ["H1"]}, {"nl": "Preload the items in a List by visiting each in turn Required for pieces of test XML whose node children can be visited out of sequence by a DifferenceEngine comparison Makes the nodes of this list known as nodes that are visitable at the current level and makes the last child node the current node as a side effect.", "Heuristic": []}, {"nl": "Give it a matrix which is not SPD and see if it fails", "Heuristic": []}, {"nl": "Get the user's unique id", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link SessionInfo#getSessionId()} method.", "Heuristic": ["H1"]}, {"nl": "Delegates to  {@link #textualDifference textualDifference}.", "Heuristic": ["H1"]}, {"nl": "Computes the p=&#8734; norm.  If A is a matrix then the induced norm is computed.", "Heuristic": []}, {"nl": "The token lifetime", "Heuristic": []}, {"nl": "Gets the expected data set id.", "Heuristic": ["H1"]}, {"nl": "value.", "Heuristic": ["H1", "H2"]}, {"nl": "Removes the \"file://\" prefix from the given URI string, if applicable. If the given URI string doesn't have a \"file://\" prefix, it is returned unchanged.", "Heuristic": []}, {"nl": "Creates a class loader with the given base URL as its classpath.", "Heuristic": ["H1"]}, {"nl": "Returns an  {@link InputStream} for stdin from the debugger's internalConsole window.", "Heuristic": ["H1"]}, {"nl": "Getting existing cache if the cache available, else returns a newly created cache. This logic handles by javax.cache implementation", "Heuristic": ["H1"]}, {"nl": "Gets the exp value.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Determine if a file or directory exists.", "Heuristic": []}, {"nl": "Performs standard initializations on a newly created socket.", "Heuristic": ["H1"]}, {"nl": "Gets an array parameter constructor as a String, which then can be  passed to the execute() method.", "Heuristic": ["H1"]}, {"nl": "Type", "Heuristic": ["H2"]}, {"nl": "Computes the QR decomposition of A and store the results in A.", "Heuristic": []}, {"nl": "Get the association map", "Heuristic": []}, {"nl": "Set the offset for edges to this node.", "Heuristic": []}, {"nl": "Getter for the allowed extensions of a file type.", "Heuristic": []}, {"nl": "get connection factory name", "Heuristic": ["H1"]}, {"nl": "Sets the feed id.", "Heuristic": ["H1"]}, {"nl": "Sets the chromosome of a gistic", "Heuristic": ["H1"]}, {"nl": "set value.", "Heuristic": ["H1", "H2"]}, {"nl": "Obtains the pool, if there is one.", "Heuristic": []}, {"nl": "Writes the tail of the object to the stream.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.util.Waypoint#setId(java.lang.String)}.", "Heuristic": ["H1"]}, {"nl": "Calculate the path from specified revision to a referenced revision.", "Heuristic": []}, {"nl": "Add a key/value pair to the http POST", "Heuristic": ["H1"]}, {"nl": "Called to check if more characters are expected to follow after addChar has returned true. If true, then any following characters will be fed to endChar until endChar returns true. The default behaviour is to return false.", "Heuristic": ["H1"]}, {"nl": "Sets the exceptions from the blacklist. Exceptions can not be patterns. TODO add support for patterns", "Heuristic": ["H1"]}, {"nl": "Warning log message with printf formatting.", "Heuristic": ["H1"]}, {"nl": "Initialize WSRealm by Carbon", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.VTGParser#setMagneticCourse(double)}.", "Heuristic": ["H1"]}, {"nl": "set coordinate at specific index calls: none called by: centroid, codebook", "Heuristic": ["H1"]}, {"nl": "Gets the value of the username property.", "Heuristic": []}, {"nl": "Convert a String into a NotationName.", "Heuristic": []}, {"nl": "Convert the given string to a byte buffer. The resulting buffer can be converted back to the same string through  {@link #bytesToString(ByteBuffer)}.", "Heuristic": ["H1"]}, {"nl": "Returns map containing the given entries.", "Heuristic": []}, {"nl": "Gets the error msg.", "Heuristic": []}, {"nl": "Write the given long value (64-bit) in big-endian order to the buffer", "Heuristic": []}, {"nl": "Retrieves a byte array field from the stream. \\param dest The byte array where the returned value will be stored. The array should be large enough to store the entire data item, if it is not, a truncated value will be returned.", "Heuristic": ["H1"]}, {"nl": "Sets the serializer factory.", "Heuristic": ["H1"]}, {"nl": "just copy a matrix from and ArrayList representation to an Array representation", "Heuristic": ["H1"]}, {"nl": "Get the (default) TTL value in seconds", "Heuristic": []}, {"nl": "Returns true if and only if this instance represents a monetary value greater than zero, otherwise false.", "Heuristic": []}, {"nl": "Gets the actual port that the web server is listening on.", "Heuristic": []}, {"nl": "Returns an Array of Card containing all of the cards belonging to the human player on the field.", "Heuristic": ["H1"]}, {"nl": "Returns the statistical information about the specified table.", "Heuristic": []}, {"nl": "Return hash code.", "Heuristic": []}, {"nl": "set forcing a cache expire time maximum value", "Heuristic": ["H1"]}, {"nl": "Get the utility of a cell in the projected q-matrix at a given cell position (row,column)", "Heuristic": ["H1"]}, {"nl": "get the SYN time in seconds. The SYN time is 0.01 seconds = 10000 microseconds", "Heuristic": ["H1"]}, {"nl": "Sets the resources.", "Heuristic": []}, {"nl": "Specifies the particular texture regions which must be loaded for this screen. It returns null by default.", "Heuristic": []}, {"nl": "Returns the descriptor of the method described by this object.", "Heuristic": []}, {"nl": "Returns an array containing all of the elements in the specified collection. This method returns the elements in the order they are returned by the collection's iterator. The returned array is \"safe\" in that no references to it are maintained by the collection. The caller is thus free to modify the returned array. This method assumes that the collection size doesn't change while the method is running. TODO(kevinb): support concurrently modified collections?", "Heuristic": ["H1"]}, {"nl": "Send a message to a peer to which this socket has previously connected. This blocks until completion or an error occurs.", "Heuristic": []}, {"nl": "Sets the end date.", "Heuristic": []}, {"nl": "Returns the number of block acceses required to mergejoin the sorted tables. Since a mergejoin can be preformed with a single pass through each table, the method returns the sum of the block accesses of the  materialized sorted tables. It does not include the one-time cost of materializing and sorting the records.", "Heuristic": ["H1"]}, {"nl": "copy input data from the source stream to the target stream", "Heuristic": ["H1"]}, {"nl": "Removes the last item from the stack. Uses the next panel as the panel frame.", "Heuristic": []}, {"nl": "Resolves serialized instance of enumeration value.", "Heuristic": []}, {"nl": "Get a default SSL wrapped TSocket connected to the specified host and port.", "Heuristic": []}, {"nl": "Closes the reader by closing the underlying  {@code InputStream} andmarking this reader as closed.", "Heuristic": ["H1"]}, {"nl": "Sets the destination.", "Heuristic": []}, {"nl": "Sets the value of the password property.", "Heuristic": []}, {"nl": "Tests the  {@link RPCFileReadRequest#encode(ByteBuf)} and{@link RPCFileReadRequest#decode(ByteBuf)} methods.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#getDistance()} .", "Heuristic": ["H1"]}, {"nl": "Sets the up.", "Heuristic": []}, {"nl": "Add length bytes of the contents of the byte array input beginning at  offset into the array to the current digest calculation.", "Heuristic": ["H1"]}, {"nl": "Test of getType method, of class Device.", "Heuristic": []}, {"nl": "set app user's nickname", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets the comments.", "Heuristic": []}, {"nl": "Release necessary resources.", "Heuristic": []}, {"nl": "Get the number of points in the given range from 0f to 1f 1f is the complete path", "Heuristic": ["H1"]}, {"nl": "Tries to set name of the given  {@link Thread}, returns true if successful.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Configures the  {@link ToStringHelper} so {@link #toString()} will ignore properties with nullvalue. The order of calling this method, relative to the  {@code add()}/ {@code addValue()}methods, is not significant.", "Heuristic": ["H1"]}, {"nl": "Gets the minimum encoded size of the given value.", "Heuristic": []}, {"nl": "Obtains the socket factory. If this scheme is  {@link #isLayered layered}, the factory implements {@link LayeredSocketFactory LayeredSchemeSocketFactory}.", "Heuristic": ["H1"]}, {"nl": "Derives a key given the \"extended\" child number, ie. the 0x80000000 bit of the value that you pass for childNumber will determine whether to use hardened derivation or not. Consider whether your code would benefit from the clarity of the equivalent, but explicit, form of this method that takes a ChildNumber rather than an int, for example: deriveChildKey(parent, new ChildNumber(childNumber, true)) where the value of the hardened bit of childNumber is zero.", "Heuristic": ["H1"]}, {"nl": "Set the force auth status.", "Heuristic": []}, {"nl": "Get the client registration id", "Heuristic": ["H1"]}, {"nl": "Gets the  {@link AccessTokenSource} indicating how this access token was obtained.", "Heuristic": ["H1"]}, {"nl": "Gets the polling period.", "Heuristic": []}, {"nl": "Creates a new Hessian 2.0 deserializer.", "Heuristic": ["H1"]}, {"nl": "Obtains the value of  {@link NIOReactorPNames#GRACE_PERIOD} parameter.If not set, defaults to 500.", "Heuristic": ["H1"]}, {"nl": "Removes registered handler, if exists, for the given pattern.", "Heuristic": []}, {"nl": "Sets the interval to lower inclusive or lower exclusive.", "Heuristic": []}, {"nl": "The key used to sign  {@link org.bitcoinj.core.AlertMessage}s. You can use  {@link org.bitcoinj.core.ECKey#verify(byte[],byte[],byte[])} to verifysignatures using it.", "Heuristic": ["H1"]}, {"nl": "Scans list of base packages for all resources with the given extension.", "Heuristic": []}, {"nl": "Create an instance of  {@link BrowseOffersResponse.Return.OfferData }", "Heuristic": ["H1"]}, {"nl": "Set the minimum key size to use when generating a symmetric key. The requestor can specify a KeySize value to use. The default is 128 bits.", "Heuristic": []}, {"nl": "Gets the cached list of permissions from a Bundle.", "Heuristic": []}, {"nl": "Creates a select scan for this query.", "Heuristic": []}, {"nl": "Calculates the distance between two Colors.", "Heuristic": []}, {"nl": "Captures SshDataReceivedEvent", "Heuristic": []}, {"nl": "Unregisters a scheme.", "Heuristic": []}, {"nl": "Creates a new StoredBlock, calculating the additional fields by adding to the values in this block.", "Heuristic": []}, {"nl": "Returns the statistics on the  {@code y} values alone.", "Heuristic": ["H1"]}, {"nl": "Computes the Least Common Multiple of two integers.", "Heuristic": []}, {"nl": "Prepends a task to the front of the queue and makes sure a worker thread is running, unless the queue has been suspended.", "Heuristic": []}, {"nl": "Gets the data set compare key.", "Heuristic": []}, {"nl": "Tells if the longitude is on eastern hemisphere.", "Heuristic": []}, {"nl": "Sets the bit at the specified index to  {@code false}.", "Heuristic": ["H1"]}, {"nl": "Frees Database Connection.", "Heuristic": []}, {"nl": "Get the next time to retry, in milliseconds since the epoch", "Heuristic": []}, {"nl": "Obtains the  {@link ConnRoutePNames#LOCAL_ADDRESS LOCAL_ADDRESS}parameter value. There is no special value that would automatically be mapped to null. You can use the wildcard address (0.0.0.0 for IPv4, :: for IPv6) to override a specific local address in a hierarchy.", "Heuristic": ["H1"]}, {"nl": "Get the individual structures.", "Heuristic": []}, {"nl": "Returns all the metrics of the node expander.", "Heuristic": []}, {"nl": "Packs the debugger GUI frame.", "Heuristic": []}, {"nl": "Unregister a device from the backend", "Heuristic": []}, {"nl": "Get whether the request is a passive authentication request", "Heuristic": []}, {"nl": "Returns map containing the given entries.", "Heuristic": []}, {"nl": "Checks if the given path is the root.", "Heuristic": []}, {"nl": "Increments the value name maps to or adds 1 as value if name isn't present inside the map.", "Heuristic": []}, {"nl": "Generates a random byte array of the given length.", "Heuristic": []}, {"nl": "Invokes  {@code latch.}{@link CountDownLatch#await() await()} uninterruptibly.", "Heuristic": ["H1"]}, {"nl": "Does nothing, because a commit record contains no undo information.", "Heuristic": []}, {"nl": "Determine if this set is an (improper) superset of another.", "Heuristic": []}, {"nl": "Finish FIDO Device registration", "Heuristic": []}, {"nl": "Sets the list of out fault interceptors which will deal with the client-side faults; the client code may choose to catch  {@link ClientException}exceptions instead.", "Heuristic": ["H1"]}, {"nl": "Returns the original element list, unchanged.", "Heuristic": []}, {"nl": "Return the time to wait between reusing deployment requests. This could be necessary to give some platforms time to clean up after undeployment.", "Heuristic": ["H1"]}, {"nl": "Add a key/file pair to the http POST", "Heuristic": ["H1"]}, {"nl": "Returns true if the monetary value represented by this instance is less than that of the given other Coin, otherwise false.", "Heuristic": []}, {"nl": "Convert to string.", "Heuristic": []}, {"nl": "Creates a new AccessToken using the information contained in an Intent populated by the Facebook application in order to launch a native link. For more information on native linking, please see https://developers.facebook.com/docs/mobile/android/deep_linking/.", "Heuristic": []}, {"nl": "There should no need to do anything in this case.", "Heuristic": ["H1"]}, {"nl": "Initialize Oozie services.", "Heuristic": ["H1"]}, {"nl": "Set arbitrary data stored with this name.", "Heuristic": []}, {"nl": "Returns a function that accepts a supplier and returns the result of invoking  {@link Supplier#get} on that supplier.Java 8 users: use the method reference  {@code Supplier::get} instead.", "Heuristic": ["H1"]}, {"nl": "Returns the n-th parent or null if there are not n ancestors", "Heuristic": ["H1"]}, {"nl": "Gets the value of the smallIcon property.", "Heuristic": []}, {"nl": "Returns the number of times  {@link #create(Object)} returned a value.", "Heuristic": ["H1"]}, {"nl": "Gets the  {@link UserSubject) instance capturing the information about the end user}", "Heuristic": ["H1"]}, {"nl": "Begin appending a new array. All values until the balancing endArray will be appended to this array. The endArray method must be called to mark the array's end.", "Heuristic": []}, {"nl": "Get a list of all blacklisted sites", "Heuristic": []}, {"nl": "Locates and decodes a MaxiCode in an image.", "Heuristic": []}, {"nl": "Obtains a list containing the names of all registered  {@link AuthScheme authenticationschemes}", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.SentenceFactory#getInstance()}.", "Heuristic": ["H1"]}, {"nl": "Gets a Builder configured as this object.", "Heuristic": []}, {"nl": "Called to ask the  {@link Presenter} to restore the previous saved state.", "Heuristic": ["H1"]}, {"nl": "Sets the correlation Id on the message.   The ID should be a byte array, a maximum of 20 bytes.", "Heuristic": ["H1"]}, {"nl": "Add (union) in a complete set.", "Heuristic": []}, {"nl": "Loops continuously, pulling references off the queue and cleaning them up.", "Heuristic": []}, {"nl": "Gets the value of the publicKeyHash property.", "Heuristic": []}, {"nl": "Get this node's position top, as defined by style.", "Heuristic": []}, {"nl": "Get list of available notations, of type NotationName. This returns an immutable list so that the implementation type isn't exposed in the API.", "Heuristic": []}, {"nl": "Returns the currency of the price associated with a line item.  Both java.util.Currency and UBL currency IDs follow ISO 4217 currency codes.", "Heuristic": ["H1"]}, {"nl": "Set the SignatureProperties to use.", "Heuristic": []}, {"nl": "Obtains value of the  {@link CoreProtocolPNames#USE_EXPECT_CONTINUE} parameter.If not set, returns false.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the testCase property.  This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a set method for the testCase property.  For example, to add a new item, do as follows:  getTestCase().add(newItem);   Objects of the following type(s) are allowed in the list {@link TestCase }", "Heuristic": ["H1"]}, {"nl": "Reconstitutes the instance from a stream (that is, deserializes it).", "Heuristic": []}, {"nl": "Check if the store contains a certificate with the given alias", "Heuristic": []}, {"nl": "Mutator for the FaultTo property.", "Heuristic": ["H1"]}, {"nl": "Get all rabbit mq parameters", "Heuristic": ["H1"]}, {"nl": "Returns the offset from the file start where the latest block should be written (end of prev block).", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link Mode.Bits#and(Mode.Bits)} method.", "Heuristic": ["H1"]}, {"nl": "Same purpose as Logger.getLogger(), except that the static initialization for XRLog will initialize the LogManager with logging levels and other configuration. Use this instead of Logger.getLogger()", "Heuristic": ["H1"]}, {"nl": "Extract SAML query string from URL", "Heuristic": []}, {"nl": "Set the unattached TokenReference", "Heuristic": []}, {"nl": "Get the ChecklistStatus for some object. If there is none, then create one.", "Heuristic": []}, {"nl": "Utility method to compare two (possibly-null) Long values.", "Heuristic": []}, {"nl": "Test of getAuthor method, of class TestDosAttack.", "Heuristic": []}, {"nl": "Gets the value of the templateDescription property.", "Heuristic": []}, {"nl": "Get the realm associated with the SamlAssertionWrapper parameter", "Heuristic": ["H1"]}, {"nl": "get random AlphaNumericString of Length length", "Heuristic": ["H1"]}, {"nl": "Error log message.", "Heuristic": []}, {"nl": "Returns the  {@code OAuthServerConfiguration} instance", "Heuristic": ["H1"]}, {"nl": "Get all OpenIDs for a given user", "Heuristic": ["H1"]}, {"nl": "Clears all bits (sets to false).", "Heuristic": []}, {"nl": "Removes a HttpCacheEntry from the cache", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Set all of the headers. This will overwrite any content ID, media type, ContentDisposition, or other header set by previous calls.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Get a File Filter for files with the given extensions, ignoring case.", "Heuristic": []}, {"nl": "Encode integer as a series of 4 bytes into buf starting at position 0 within that buffer.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the inputType property.", "Heuristic": []}, {"nl": "Set an attribute value on the RuleContext, if it does not already exist.  Attributes can be shared between RuleContext instances. This operation is thread-safe.  Attribute values should be modified directly via the reference provided. It is not necessary to call setAttribute(String, Object) to update an attribute value. Modifications made to the attribute value will automatically be seen by other threads. Because of this, you must ensure the attribute values are themselves thread safe.", "Heuristic": []}, {"nl": "Remove a named property. This method shouldn't even be called since we define all properties as PERMANENT.", "Heuristic": []}, {"nl": "Converts a thrift type to a wire type.", "Heuristic": []}, {"nl": "If requested lifetime exceeds shall it fail (default) or overwrite with maximum lifetime", "Heuristic": []}, {"nl": "Tests to ensure  {@link File#delete()} is called when the stream is closed.", "Heuristic": ["H1"]}, {"nl": "Time (in milliseconds) that we will wait in order to perform a retry after an IOException. Only relevant if maxIORetries &gt; 0.", "Heuristic": ["H1"]}, {"nl": "Represents the QualifiedName as {NS-URI}LOCAL-NAME. If the NS-URI is equal to NULL_NS_URI only the local name is returned.", "Heuristic": []}, {"nl": "Return a JobClient created with the provided user/group.", "Heuristic": []}, {"nl": "Get the second of minute.", "Heuristic": []}, {"nl": "Removes every panel of the stack, but leaves the first inserted.", "Heuristic": []}, {"nl": " Append a hashCode for a boolean array. ", "Heuristic": []}, {"nl": "Test method for  {@link org.mitre.oauth2.introspectingfilter.service.impl.ScopeBasedIntrospectionAuthoritiesGranter#getAuthorities(com.google.gson.JsonObject)}.", "Heuristic": ["H1"]}, {"nl": "Enqueues a block in the queue.", "Heuristic": []}, {"nl": "Hook for creating the connection pool.", "Heuristic": []}, {"nl": "Checks if this entry is a regular file.", "Heuristic": []}, {"nl": "Gets the string value of the specified field. If the field is a group field, then its value can be obtained from the saved group value. Otherwise, the value is obtained from the appropriate aggregation function.", "Heuristic": []}, {"nl": "Returns the direction.", "Heuristic": []}, {"nl": "Return a list containing  {@code o1}, ...,  {@code o4}.", "Heuristic": ["H1"]}, {"nl": "Returns the current state of the FSM", "Heuristic": []}, {"nl": "Returns true if the given directory does not have a fragments file. This means that we will operate on a directory of directories.", "Heuristic": []}, {"nl": "Stop the servlet container.", "Heuristic": []}, {"nl": "Tests for  {@link ReplayCallableThrowsIOException}s that  {@link RuntimeException}s are correctly propagated.", "Heuristic": ["H1"]}, {"nl": "GET  /authenticate : check if the user is authenticated, and return its login.", "Heuristic": ["H1"]}, {"nl": "set the resource id of the icon", "Heuristic": ["H1"]}, {"nl": "Find index of last occurrence for given number in a sorted array", "Heuristic": []}, {"nl": "Sets a block of 32 bits, starting at bit i.", "Heuristic": []}, {"nl": "Returns fully qualified name of the enumeration type.", "Heuristic": []}, {"nl": "Returns the number of pairs in the dataset.", "Heuristic": []}, {"nl": "Tests the  {@link BlockHeartbeatReporter#generateReport()} method for an empty report.", "Heuristic": ["H1"]}, {"nl": "Register an application with its secret specified as a byte buffer.", "Heuristic": []}, {"nl": "Pass an event to the event handler, pop the event handler stack if the current event handler has consumed all of the events it can.", "Heuristic": ["H1"]}, {"nl": "Get this node's align items, as defined by style.", "Heuristic": []}, {"nl": "disconnect ssh session", "Heuristic": ["H1"]}, {"nl": "Get the value produced by the worker thread, or null if it  hasn't been constructed yet.", "Heuristic": ["H1"]}, {"nl": "Returns the runtime settings.", "Heuristic": []}, {"nl": "Factory method to create a new instance of an ArgoDiagram.", "Heuristic": []}, {"nl": "This returns rootDN from the domain. if domain=wso2.com, returns dc=wso2,dc=com", "Heuristic": ["H1"]}, {"nl": "This is the most basic permission which is true as soon as a principal is authenticated.", "Heuristic": []}, {"nl": "Returns the change type of the ref change.", "Heuristic": []}, {"nl": "Test if the URI is present in the collection.", "Heuristic": []}, {"nl": "Returns the list of all teams available to the login service.", "Heuristic": []}, {"nl": "Little-endian bytes to short.  Returns the value of  x[offset .. offset + 2] as a short, assuming x is interpreted as a  signed little-endian number (i.e., x[offset] is LSB).  If you want to  interpret it as an unsigned number, call ubytes2int() on the result.", "Heuristic": ["H1"]}, {"nl": "Should all elements permit 'any attribute'?", "Heuristic": []}, {"nl": "Set the EncryptionProperties to use.", "Heuristic": []}, {"nl": "Deprecated. Please use  {@link AppEventsLogger} instead.", "Heuristic": ["H1"]}, {"nl": "Factory for  {@link RemoteBlockReader}.", "Heuristic": ["H1"]}, {"nl": "Set a tag object associated with this ActionMode. Like the tag available to views, this allows applications to associate arbitrary data with an ActionMode for later reference.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Obtains a host from an  {@link InetSocketAddress}.", "Heuristic": ["H1"]}, {"nl": "Returns all redirect  {@link URI}s in the order they were added to the collection.", "Heuristic": ["H1"]}, {"nl": "Sets the seq no.", "Heuristic": []}, {"nl": "Append a step to the path.", "Heuristic": []}, {"nl": "Return if the status if an end state (it cannot change anymore).", "Heuristic": ["H1"]}, {"nl": "Test of incNumberRequests method, of class LogEntryInterval.", "Heuristic": []}, {"nl": "Sets the value of the zip property.", "Heuristic": []}, {"nl": "Set the user repository prefix.", "Heuristic": []}, {"nl": "Test method for {@link NotificationController#deregisterUserSession(ServerSession,ServerMessage)}Verifies that  {@code NullPointerException} is thrown when {@code ServerSession} ID is null.", "Heuristic": ["H1"]}, {"nl": "Call when the effect absorbs an impact at the given velocity. Used when a fling reaches the scroll boundary. When using a  {@link android.widget.Scroller} or {@link android.widget.OverScroller}, the method getCurrVelocity will provide a reasonable approximation to use here.", "Heuristic": ["H1"]}, {"nl": "Determines whether a given predicate holds true for all elements. Returns true for an empty sequence.", "Heuristic": []}, {"nl": "Gets the URI of the local image, video, or audio clip to send to messenger. Must be a file://, content://, or res:// URI.", "Heuristic": []}, {"nl": "Get the list of accepted signature algorithms. A request can contain a wst:SignatureAlgorithm uri to use to sign an issued token. The algorithm specified must be contained in this list. The default algorithms are RSA-SHA1.", "Heuristic": ["H1"]}, {"nl": "A placementhint gives an indication where it might be feasible to place this node. It is used by the layouter, and there is no guarantee that it will be used.", "Heuristic": ["H1"]}, {"nl": "Writes a commit record to the log. This log record contains the COMMIT operator, followed by the transaction id.", "Heuristic": ["H1"]}, {"nl": "The details of the comparison.", "Heuristic": []}, {"nl": "Sets the inactivation reason type.", "Heuristic": []}, {"nl": "Create a set from an array", "Heuristic": []}, {"nl": "Create the JAXRSServerFactoryBean from the application and all discovered service and provider instances.", "Heuristic": ["H1"]}, {"nl": "Returns a string formed by concatenating the subject with the issuer, separated by _ and prepended with OIDC_ For example, the user \"bob\" from issuer \"http://id.example.com/\" would return the authority string of: OIDC_bob_http://id.example.com/", "Heuristic": ["H1"]}, {"nl": "Return a Dag engine.", "Heuristic": []}, {"nl": "Creates an OpenGraphAction suitable for posting via, e.g., a native Share dialog.", "Heuristic": []}, {"nl": "Provide the macAddress to the AddressPair's Builder.", "Heuristic": []}, {"nl": "It's always valid for this handler to continue processing events, so we always return false.", "Heuristic": []}, {"nl": "Registers a filter for nodes. Only nodes for which the predicate returns true are part of the comparison.  By default nodes that are not document types are considered.", "Heuristic": ["H1"]}, {"nl": "Returns whether the typeName is known to the receiver.", "Heuristic": []}, {"nl": "Get the file mode bits of a file. This method is only implemented for OSes of the Unix family. It returns the file mode information as available in the st_mode member of the resulting struct stat when calling 'lstat' on a file.", "Heuristic": ["H1"]}, {"nl": "The value for comparison found at the current target.", "Heuristic": []}, {"nl": "Returns the value.", "Heuristic": []}, {"nl": "Writes the contents of the page to the specified disk block.", "Heuristic": []}, {"nl": "Sets the q-value of the ROI", "Heuristic": []}, {"nl": " Computes the inner product of the two vectors.  In geometry this is known as the dot product.  &sum;k=1:n xk  yk where x and y are vectors with n elements.   These functions are often used inside of highly optimized code and therefor sanity checks are kept to a minimum.  It is not recommended that any of these functions be used directly. ", "Heuristic": ["H1"]}, {"nl": "Deletes a given user store", "Heuristic": []}, {"nl": "Sets the client state token which needs to be retained in a hidden form field", "Heuristic": []}, {"nl": "Retrieve BPS Profiles", "Heuristic": []}, {"nl": "Set pre-calculated inners for this name.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link RPCBlockReadResponse#getPayloadDataBuffer()} method.", "Heuristic": ["H1"]}, {"nl": "Adds a new vertex to the graph if it is not already present.", "Heuristic": []}, {"nl": "Standard toString - returns the string used during construction.", "Heuristic": []}, {"nl": "Terminal status report", "Heuristic": []}, {"nl": "Factory method for  {@link ContentDecoder} instances.", "Heuristic": ["H1"]}, {"nl": " Tells if the specified String matches the NMEA 0183 sentence format.  String is considered as a sentence if it meets the following criteria:  First character is '$' or '!' Begin char is followed by upper-case sentence ID (3 to 10 chars) Sentence ID is followed by a comma and an arbitrary number of printable ASCII characters (payload data) Data is followed by '' and a two-char hex checksum (may be omitted)   Notice that format matching is not strict; although NMEA 0183 defines a maximum length of 80 chars, the sentence length is not checked. This is due to fact that it seems quite common that devices violate this rule, some perhaps deliberately, some by mistake. Thus, assuming the formatting is otherwise valid, it is not feasible to strictly validate length and discard sentences that just exceed the 80 chars limit. ", "Heuristic": ["H1"]}, {"nl": "Sets up all dependencies before a test runs.", "Heuristic": []}, {"nl": "Renders the XML file as a PDF file at the target location.", "Heuristic": []}, {"nl": "Extracts the rank of a matrix using a preexisting decomposition.", "Heuristic": []}, {"nl": "get int value.", "Heuristic": ["H1"]}, {"nl": "Returns the HTTP status code or -1 if it is unknown.", "Heuristic": []}, {"nl": "Parse a string into a  {@code ClassDecl} AST node,applying substitutions.", "Heuristic": ["H1"]}, {"nl": "First byte of a base58 encoded address. See  {@link com.google.bitcoin.core.Address}. This is the same as acceptableAddressCodes[0] and is the one used for \"normal\" addresses. Other types of address may be encountered with version codes found in the acceptableAddressCodes array.", "Heuristic": ["H1"]}, {"nl": "Method to add a sequence to this sequence database", "Heuristic": []}, {"nl": "Set the RealmParser object to use.", "Heuristic": []}, {"nl": "Calculates teh priority for the specified type using the default  component ID of 1 and the default local preference.", "Heuristic": ["H1"]}, {"nl": "Returns L matrix from the decomposition. LLT=A", "Heuristic": ["H1"]}, {"nl": "Return the command line.", "Heuristic": []}, {"nl": "Required. This must be your  {@code Application} instance.", "Heuristic": ["H1"]}, {"nl": "Get the resource owner", "Heuristic": []}, {"nl": "Returns the root key that the  {@link DeterministicHierarchy} was created with.", "Heuristic": ["H1"]}, {"nl": "Returns a collection containing the name of each field in the schema.", "Heuristic": []}, {"nl": "Sets the value of the password property.", "Heuristic": []}, {"nl": "Sets the data source for the locator to a file reader.", "Heuristic": []}, {"nl": "Determine if the given port belongs to the range.", "Heuristic": []}, {"nl": "Gets the default bus for the thread.", "Heuristic": []}, {"nl": "Apply  {@code t} to each element of {@code l}. {@code l} is not modified.", "Heuristic": ["H1"]}, {"nl": "Reads a gson object from the specified url.", "Heuristic": ["H1"]}, {"nl": "Allows the template location to be set.", "Heuristic": []}, {"nl": "Create a new empty project.", "Heuristic": []}, {"nl": "Number of columns (non terminals) in every row.", "Heuristic": ["H1"]}, {"nl": "Pre-allocate disk space for a file if we can do that on this version of the OS.", "Heuristic": []}, {"nl": "See  {@link #getRuleSets(String,RuleSetFactory)}. In addition, the loading of the rules is benchmarked.", "Heuristic": ["H1"]}, {"nl": "This input parameter is ignored for the moment.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Removes the worker from the locations of this block.", "Heuristic": []}, {"nl": "Return a SLA store instance with an existing transaction.  The SLA store has to be committed and then closed to commit changes, if only close it rolls back.", "Heuristic": ["H1"]}, {"nl": "Gets the description of the group that will be created.", "Heuristic": []}, {"nl": "Return the file block size in bytes.", "Heuristic": []}, {"nl": "Gets the names.", "Heuristic": []}, {"nl": "Returns whether or not there's an ID for a LittleShoot user. This is a good indicator of whether or not LittleShoot has ever been installed on this machine.", "Heuristic": ["H1"]}, {"nl": "get value.", "Heuristic": ["H1", "H2"]}, {"nl": "This is useful if we're expecting a file and want to wait for it for some period of time.", "Heuristic": []}, {"nl": "Gets the value of the given member (expressed as integer seconds since epoch) as a Date", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.PositionParser#setLatHemisphere(int,net.sf.marineapi.nmea.util.CompassPoint)}.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the id property.", "Heuristic": ["H1"]}, {"nl": "This method is called after all of the children of  {@code n}have been visited. In this case, these children were visited by the visitor  {@code v}. This is the last chance for the visitor to modify the tree rooted at  {@code n}. This method will be called exactly the same number of times as  {@code entry} is called.That is, for each node that is not overridden,  {@code enter} and{@code leave} are each called exactly once. Note that if  {@code old == n} then the visitor should make a copyof  {@code n} before modifying it. It should then return themodified copy.  The default implementation of this method is to call {@link #leave(Node,Node,NodeVisitor) leave(old, n, v)}, as most subclasses do not need to know the parent of the node  {@code n}.", "Heuristic": ["H1"]}, {"nl": "Track a success - reset back off interval to the initial value", "Heuristic": []}, {"nl": "Reload settings from both the property and configuration files.", "Heuristic": []}, {"nl": "Sets up the target to have the same list of interceptors as the current instance.", "Heuristic": []}, {"nl": "Returns services already added as trusted services.", "Heuristic": ["H1"]}, {"nl": "Get the token", "Heuristic": []}, {"nl": "Enables or disables the timeout entirely. This may be useful if you want to store the timeout value but wish to temporarily disable/enable timeouts. The default is for timeoutEnabled to be true but timeoutMillis to be set to 0 (ie disabled). This call will reset the current progress towards the timeout.", "Heuristic": ["H1"]}, {"nl": "Gets the requested scope which needs to be retained in a hidden form field", "Heuristic": []}, {"nl": "Returns true if the block is full.", "Heuristic": []}, {"nl": "Tests the  {@link BlockId#createBlockId(long,long)} method.", "Heuristic": ["H1"]}, {"nl": "Runs the given Runnable on this Thread. It will be submitted to the end of the event queue even if it is being submitted from the same queue Thread.", "Heuristic": ["H1"]}, {"nl": "Get whether this is a computed key or not", "Heuristic": []}, {"nl": "Get the comments (the notes in a diagram) for a modelelement. This returns a c-style comments.", "Heuristic": ["H1"]}, {"nl": "Returns the opposite of this side.", "Heuristic": []}, {"nl": "This returns policy store manager", "Heuristic": []}, {"nl": "Removes a contract resolver from this registry.", "Heuristic": []}, {"nl": "Checks whether a character is a  {@link #SEPARATORS separator}.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link TempBlockMeta#getCommitPath()} method.", "Heuristic": ["H1"]}, {"nl": "Method for calling after context initialization", "Heuristic": []}, {"nl": "Adds a form to a local cache for quick lookup.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "read lines.", "Heuristic": ["H1", "H2"]}, {"nl": "Display a simple alert dialog with the given text and title.", "Heuristic": []}, {"nl": "Returns true if the specified field is in the current scan.", "Heuristic": []}, {"nl": "A view should call this when content is pulled away from an edge by the user. This will update the state of the current visual effect and its associated animation. The host view should always  {@link android.view.View#invalidate()} if this methodreturns true and draw the results accordingly.", "Heuristic": ["H1"]}, {"nl": "Stop webserver", "Heuristic": ["H1", "H2"]}, {"nl": "Returns how long the scroll event will take, in milliseconds.", "Heuristic": []}, {"nl": "Read N-Triple string to jena model.", "Heuristic": ["H1"]}, {"nl": "Starts with an empty delimiter and changes to the desired value at the end of the iteration.", "Heuristic": []}, {"nl": "Gets the value of the given given member as a set of strings, null if it doesn't exist", "Heuristic": ["H1"]}, {"nl": "Returns the recommended minimum error correction level as described in annex E of ISO/IEC 15438:2001(E).", "Heuristic": []}, {"nl": "Set the maximum history size. If size is negative, then history size is only limited by the device memory.", "Heuristic": []}, {"nl": "Gets item view", "Heuristic": []}, {"nl": "Obtains an SLock on the block, if necessary. The method will ask the lock table for an SLock if the transaction currently has no locks on that block.", "Heuristic": []}, {"nl": "Mutator for the RelatesTo property.", "Heuristic": ["H1"]}, {"nl": "Convert java.util.Date to java.sql.Timestamp", "Heuristic": ["H1"]}, {"nl": "Initialize the Model subsystem with the eUML ModelImplementation.", "Heuristic": []}, {"nl": "Initialize the workflow application service.", "Heuristic": []}, {"nl": "Check if some img url was previously loaded but failed", "Heuristic": ["H1"]}, {"nl": "Sets value of the  {@link NIOReactorPNames#SELECT_INTERVAL} parameter.", "Heuristic": ["H1"]}, {"nl": "The image we're replacing.", "Heuristic": []}, {"nl": "Formats the page by allocating as many record slots as possible, given the record length. Each record slot is assigned a flag of EMPTY. Each integer field is given a value of 0, and each string field is given a value of \"\".", "Heuristic": []}, {"nl": "Computes the p=2 norm.  If A is a matrix then the induced norm is computed.", "Heuristic": []}, {"nl": "Returns true if two doubles are considered equal.  Tests if the absolute difference between two doubles has a difference less then .00001.   This should be fine when comparing prices, because prices have a precision of .001.", "Heuristic": ["H1"]}, {"nl": "Sets Entrez Gene ID for Gene A.", "Heuristic": ["H1"]}, {"nl": "Set the interfaces that the generated target will implement.", "Heuristic": []}, {"nl": "Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage.Entry.Value }", "Heuristic": ["H1"]}, {"nl": "Destroy the StoreService", "Heuristic": []}, {"nl": "Set the Date that this Token expires", "Heuristic": []}, {"nl": "Registers a listener that is notified of each comparison with outcome other than  {@link ComparisonResult#EQUAL}.", "Heuristic": ["H1"]}, {"nl": "Calculate the FPS and set it in the title bar", "Heuristic": []}, {"nl": "Returns the connection maintainer listener that is listening for connection events related to a given registrar.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Called to retrieve per-instance state from an activity before being killed so that the state can be restored in onCreate(Bundle) or onRestoreInstanceState(Bundle) (the Bundle populated by this method will be passed to both).", "Heuristic": []}, {"nl": "update difference model", "Heuristic": ["H1"]}, {"nl": "Remove schedule", "Heuristic": ["H2"]}, {"nl": "Assert that the following XPath query selects no nodes.", "Heuristic": []}, {"nl": "Just for debugging JSON feeds.", "Heuristic": []}, {"nl": "Gets the value of the dataType property.", "Heuristic": []}, {"nl": "Helper for success callbacks that just returns the Status.OK by default", "Heuristic": ["H1"]}, {"nl": "Gets the feed config id.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Asserts that there is a valid wrapped connection to delegate to.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Return a string representation of this object.", "Heuristic": []}, {"nl": "Removes the connection from the list of threads.", "Heuristic": []}, {"nl": "Resets the monitor in initial state.", "Heuristic": []}, {"nl": "Alias for MainNetParams.get(), use that instead", "Heuristic": ["H1"]}, {"nl": "Mark the goal as reached or not reached.", "Heuristic": []}, {"nl": "Returns the path through some  {@link DeterministicHierarchy} which reaches this keys position in the tree.A path can be written as 1/2/1 which means the first child of the root, the second child of that node, then the first child of that node.", "Heuristic": ["H1"]}, {"nl": "The final call you receive before your activity is destroyed.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Tests creating a default  {@link MountOptions} instance.", "Heuristic": ["H1"]}, {"nl": " Computes the Frobenius matrix norm:  normF = Sqrt{  &sum;i=1:m &sum;j=1:n { aij2}   }   This is equivalent to the element wise p=2 norm.  See  {@link #fastNormF} for another implementationthat is faster, but more prone to underflow/overflow errors. ", "Heuristic": ["H1"]}, {"nl": "Returns the internal ID associated with this ROI", "Heuristic": []}, {"nl": "Notifies all listeners that reader has paused due to timeout.", "Heuristic": []}, {"nl": "Get a list of all of this user's approved sites", "Heuristic": []}, {"nl": "Get the session infodata for a particular session", "Heuristic": ["H1"]}, {"nl": "Get the y coordinate of the new step", "Heuristic": []}, {"nl": "get float value.", "Heuristic": ["H1"]}, {"nl": "Gets year from \"yyyy-MM-dd\" date format. Returns 0 if an error occurs.", "Heuristic": ["H1"]}, {"nl": "Returns the key managers for the endpoint.", "Heuristic": []}, {"nl": "Enables the support for streaming. XML-aware providers which prefer  writing to Stax XMLStreamWriter can set this value to true. Additionally, if the streaming and the buffering modes are enabled, the runtime will ensure the XMLStreamWriter events are cached properly.", "Heuristic": ["H1"]}, {"nl": "Determines if the decomposed matrix is singular.  This function can return false and the matrix be almost singular, which is still bad.", "Heuristic": ["H1"]}, {"nl": "Closes the connection with the remote permanently. This instance should be not be reused after closing.", "Heuristic": []}, {"nl": "Sets the total count.", "Heuristic": []}, {"nl": "Clears messages from queue", "Heuristic": ["H1"]}, {"nl": "Adds immediate super types of the given  {@link ClassType} to the given{@link Collection}.", "Heuristic": ["H1"]}, {"nl": "Set the class that the generated target will extend.", "Heuristic": []}, {"nl": "Old name of  {@link #getHost}.", "Heuristic": ["H1"]}, {"nl": "Get a new instance of a WSDLFactory. This method follows (almost) the same basic sequence of steps that JAXP follows to determine the fully-qualified class name of the class which implements WSDLFactory. The steps (in order) are:  Check the javax.wsdl.factory.WSDLFactory system property. Check the lib/wsdl.properties file in the JRE directory. The key will have the same name as the above system property. Use the default value.  Once an instance of a WSDLFactory is obtained, invoke newDefinition(), newWSDLReader(), or newWSDLWriter(), to create the desired instances.", "Heuristic": ["H1"]}, {"nl": "Flush any pending data out of a transport buffer.", "Heuristic": []}, {"nl": "Sets the exp data set id.", "Heuristic": ["H1"]}, {"nl": "Add an HTTP header line containing a field name, a literal colon, and a value.", "Heuristic": []}, {"nl": "Sets the path and filename", "Heuristic": []}, {"nl": "Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos.Geo.Region }", "Heuristic": ["H1"]}, {"nl": "Return the single discrete random variable used to describe the process state.", "Heuristic": []}, {"nl": "Called as a result of a previous service modification request.", "Heuristic": []}, {"nl": "Whether or not attributes are qualified absent any annotations or mapping files. False by default.", "Heuristic": ["H1"]}, {"nl": "PUT  /books : Updates an existing book.", "Heuristic": ["H1"]}, {"nl": "Puts an unsigned byte into the buffer.", "Heuristic": []}, {"nl": "Starts this NotificatorService. You MUST run this method on every instance before starting to pass any events to it. Run it only once.", "Heuristic": ["H1"]}, {"nl": "Try to get start value and fallback to given type if not defined. This is used privately by the layout engine as a more efficient way to fetch direction-aware values by avoid extra method invocations.", "Heuristic": []}, {"nl": "Set the encrypted private key bytes, cloning them.", "Heuristic": []}, {"nl": "Returns the sum of all values in this map. This method is not atomic: the sum may or may not include other concurrent operations.", "Heuristic": []}, {"nl": "Saves a float value under the provided key in the preference manager. If  {@code value}is  {@code null}, then the provided key will be removed from the preferences.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMCParser#getDataStatus()}.", "Heuristic": ["H1"]}, {"nl": "set text of emoji icon", "Heuristic": ["H1"]}, {"nl": "Sets the value of the secret property.", "Heuristic": []}, {"nl": "Tests the number of entries written.", "Heuristic": []}, {"nl": "Gets the value of the country property.", "Heuristic": []}, {"nl": "Schema validation for a given xml. ", "Heuristic": ["H1"]}, {"nl": "Adds the string value of the given option argument to the command. For example, to add \"-name myFile\" to construct the command \"find . -name myFile\", opt should be \"-name\" and arg should be \"myFile\".", "Heuristic": ["H1"]}, {"nl": "Creates (but does not start) a new stopwatch using  {@link System#nanoTime} as its time source.", "Heuristic": ["H1"]}, {"nl": "Return remaining capacity of this pool", "Heuristic": []}, {"nl": "Gets available bytes given certain location {@link BlockMetadataManager#getAvailableBytes(BlockStoreLocation)}. Throws an {@link IllegalArgumentException} if the location does not belong to tiered storage.", "Heuristic": []}, {"nl": "Returns the value to which the specified key is mapped in this game state.", "Heuristic": []}, {"nl": "This implementation considers to NodeInfo objects to be equal, if their underlying nodes are equal. {@inheritDoc}", "Heuristic": []}, {"nl": "Provide the subnetId to the RouterInterface's Builder.", "Heuristic": ["H1"]}, {"nl": "Calculate the total interest paid by the bank. Including all users and all the accounts for each user. only keep two digits after decimal point", "Heuristic": ["H1"]}, {"nl": "Encodes the critic of this ResolvedCritic in an XML safe way and returns the new String. The String can be regained by running the returned String through  {@link TodoParser#decode(String)}.", "Heuristic": ["H1"]}, {"nl": "Gets the config info.", "Heuristic": []}, {"nl": "Retrieve the command represented by this event.", "Heuristic": []}, {"nl": "If a user is not found, the loadByUsername method should throw an exception.", "Heuristic": []}, {"nl": "Returns the location of the block within the file.", "Heuristic": []}, {"nl": "Return a  {@link org.apache.oozie.client.OozieClient} for LocalOozie configured for a given user. The following methods of the client are NOP in the returned instance:  {@link org.apache.oozie.client.OozieClient#validateWSVersion}, {@link org.apache.oozie.client.OozieClient#setHeader},  {@link org.apache.oozie.client.OozieClient#getHeader},  {@link org.apache.oozie.client.OozieClient#removeHeader}, {@link org.apache.oozie.client.OozieClient#getHeaderNames} and {@link org.apache.oozie.client.OozieClient#setSafeMode}.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Notify all rules of the start of processing.", "Heuristic": []}, {"nl": "Set the display name of this environment.", "Heuristic": []}, {"nl": "Estimates the number of output records in the product. The formula is:  R(product(p1,p2)) = R(p1)R(p2) ", "Heuristic": ["H1"]}, {"nl": "Start client connection and wait until it has connected.", "Heuristic": []}, {"nl": "Returns an  {@code Optional} instance with no contained reference.Comparison to  {@code java.util.Optional}: this method is equivalent to Java 8's {@code Optional.empty}.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the subjectDN property.", "Heuristic": []}, {"nl": "Returns fully qualified name of the enumeration type.", "Heuristic": []}, {"nl": "Sets the elapsed time.", "Heuristic": []}, {"nl": "Checks if authorization is enabled.", "Heuristic": []}, {"nl": "Sets the value of the x property.", "Heuristic": []}, {"nl": "Disconnects the network connection but doesn't request the server to settle the channel first (literally just unplugs the network socket and marks the stored channel state as inactive).", "Heuristic": []}, {"nl": "Plays a sound effect.", "Heuristic": []}, {"nl": "Actually write the wallet file to disk, using an atomic rename when possible. Runs on the current thread.", "Heuristic": []}, {"nl": "Tests the  {@link StorageTierView#getTierViewAlias()} method.", "Heuristic": ["H1"]}, {"nl": "Removes registered object, if exists, for the given pattern.", "Heuristic": []}, {"nl": "Get the factory for WS-ReliableMessaging 1.0 using the standard 200408 WS-Addressing namespace.", "Heuristic": []}, {"nl": "Returns the  population standard deviation of the values. The count must be non-zero. This is guaranteed to return zero if the dataset contains only exactly one finite value. It is not guaranteed to return zero when the dataset consists of the same value multiple times, due to numerical errors. However, it is guaranteed never to return a negative result. Non-finite values If the dataset contains any non-finite values ( {@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or  {@link Double#NaN}) then the result is  {@link Double#NaN}.", "Heuristic": ["H1"]}, {"nl": "Returns the mime type of the data specified by the given URI string.", "Heuristic": []}, {"nl": "Sorts the map's records in place, spill them to disk, and returns an [[UnsafeKVExternalSorter]] that can be used to insert more records to do external sorting. The only memory that is allocated is the address/prefix array, 16 bytes per record. Note that this destroys the map, and as a result, the map cannot be used anymore after this.", "Heuristic": []}, {"nl": "Counts the number of times the specified eigenvalue appears.", "Heuristic": []}, {"nl": "Returns the number of times  {@link Cache} lookup methods have returned either a cached oruncached value. This is defined as  {@code hitCount + missCount}.", "Heuristic": ["H1"]}, {"nl": "Add mapping between Uri path and callback method which builds raw SQL string.", "Heuristic": ["H1"]}, {"nl": "Feed it specific matrices and see if it dies a horrible death", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.parser.VTGParser#getMode()}.", "Heuristic": ["H1"]}, {"nl": "Handles new vertices.", "Heuristic": []}, {"nl": "Get the current context.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Setter method", "Heuristic": ["H2"]}, {"nl": "Sets the value of the summary property.", "Heuristic": []}, {"nl": "Gets the feed id.", "Heuristic": ["H1"]}, {"nl": "Sets Max Value.", "Heuristic": []}, {"nl": "A Java package style string acting as unique ID for these parameters", "Heuristic": []}, {"nl": "Returns the correct  {@link io.netty.channel.socket.ServerSocketChannel} class based on{@link ChannelType}.", "Heuristic": ["H1"]}, {"nl": "value.", "Heuristic": ["H1", "H2"]}, {"nl": "All gesture detectors need to be called through this method to be able to detect gestures. This method delegates work to handler methods (handleStartProgressEvent, handleInProgressEvent) implemented in extending classes.", "Heuristic": []}, {"nl": "Return a new clip rectangle which is offset by the base of our band buffer.", "Heuristic": []}, {"nl": "Get this node's border, as defined by style.", "Heuristic": []}, {"nl": "Returns the integer value stored for the specified field of the current record.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Creates an index of the specified type for the specified field. A unique ID is assigned to this index, and its information is stored in the idxcat table.", "Heuristic": ["H1"]}, {"nl": "Access to all elements of the set.", "Heuristic": []}, {"nl": "Gets the list of access token grant types this client can use to obtain the access tokens.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Generic equality test.", "Heuristic": []}, {"nl": "Left Move the drone a little to the left", "Heuristic": []}, {"nl": "Stores a string at the specified field of the current record.", "Heuristic": []}, {"nl": "Moves to the next record in the current scan. If there are no more records in the current chunk, then move to the next LHS record and the beginning of that chunk. If there are no more LHS records, then move to the next chunk and begin again.", "Heuristic": []}, {"nl": "Setter for property 'description'.", "Heuristic": []}, {"nl": "Get this node's position type, as defined by style.", "Heuristic": []}, {"nl": "Tell the parse state that a feature is found in the current classifier.", "Heuristic": []}, {"nl": "Remove a page for the given position.  The adapter is responsible for removing the view from its container, although it only must ensure this is done by the time it returns from  {@link #finishUpdate(View)}.", "Heuristic": ["H1"]}, {"nl": "Export the current measurements to a suitable format.", "Heuristic": []}, {"nl": "Accepts a new connection to the socket. Blocks until a new connection arrives.", "Heuristic": []}, {"nl": "Returns a simple representation of the Access token", "Heuristic": []}, {"nl": "Updates the value currently associated with  {@code key} by combining it with {@code x}via the specified accumulator function, returning the new value.  The previous value associated with  {@code key} (or zero, if there is none) is passed as the first argumentto  {@code accumulatorFunction}, and  {@code x} is passed as the second argument.", "Heuristic": ["H1"]}, {"nl": "Invalidates the authentication state by resetting its parameters.", "Heuristic": []}, {"nl": "Returns the ASCII bytes for a specified string.", "Heuristic": []}, {"nl": "Appends a new block to the specified file and pins it.", "Heuristic": []}, {"nl": " Adds the result of super.hashCode() to this builder. ", "Heuristic": ["H1"]}, {"nl": "Returns the type of ordering used.", "Heuristic": []}, {"nl": "Helper for success callbacks that just returns the Status.OK by default", "Heuristic": ["H1"]}, {"nl": "Alias for TestNet3Params.get(), use that instead.", "Heuristic": []}, {"nl": "Translate an callback return value into a descriptive string.", "Heuristic": ["H1"]}, {"nl": "Returns a new escaper based on the current state of the builder.", "Heuristic": []}, {"nl": "Returns a string representation of the enumeration value.", "Heuristic": []}, {"nl": "Sets the  {@link Client} instance", "Heuristic": ["H1"]}, {"nl": "Gets list of gene symbols.", "Heuristic": []}, {"nl": "Reverses the effect of disableForeignKeyCheck method.", "Heuristic": []}, {"nl": "Returns the index of the eigenvalue which has the smallest magnitude.", "Heuristic": []}, {"nl": "Append a double value.", "Heuristic": []}, {"nl": "Set next message to queue. Clears queue before.", "Heuristic": []}, {"nl": "Returns a new object with rotated image data by 45 degrees counterclockwise. Only callable if  {@link #isRotateSupported()} is true.", "Heuristic": ["H1"]}, {"nl": "Method startDocument.", "Heuristic": []}, {"nl": "Returns a copy of the current mount table, the mount table is a map from Alluxio file system URIs to the corresponding mount point information.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the inputData property.", "Heuristic": []}, {"nl": "Compares to a specific object.", "Heuristic": []}, {"nl": "Returns the default bus", "Heuristic": []}, {"nl": "Sets the permission description", "Heuristic": []}, {"nl": "Determines whether or not the specified session is a UDP session.", "Heuristic": ["H1"]}, {"nl": "Return the value as a string that can be easily recognized and parsed when we see it again.", "Heuristic": []}, {"nl": "Sets the value of the workflowImpl property.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the complexNodes property.  This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a set method for the complexNodes property.  For example, to add a new item, do as follows:  getComplexNodes().add(newItem);   Objects of the following type(s) are allowed in the list {@link ComplexNode }", "Heuristic": ["H1"]}, {"nl": "Create a new iterable by applying a mapper function to each element of a given sequence.", "Heuristic": []}, {"nl": "Returns whether the UI presenting this action mode can take focus or not. This is used by internal components within the framework that would otherwise present an action mode UI that requires focus, such as an EditText as a custom view.", "Heuristic": []}, {"nl": "Description of the Method", "Heuristic": []}, {"nl": "Leave a scope: this removes any NS declarations that were added in the last scope. Note that I don't bother to validate that you don't call popScope too many times; that's your problem.", "Heuristic": []}, {"nl": "Returns the number of values that have been evicted.", "Heuristic": []}, {"nl": "Tests the  {@link Sasl#createSaslServer(String,String,String,Map,CallbackHandler)} method towork with the  {@link PlainSaslServerProvider#MECHANISM} successfully.", "Heuristic": ["H1"]}, {"nl": "Registers a WebServer instance. This should be used by WebServer impl only. Make sure to call unregister when server is stopped.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the id property.", "Heuristic": ["H1"]}, {"nl": "Optional.", "Heuristic": ["H2"]}, {"nl": "Returns \"Black\" if called on  {@link OthelloSide#BLACK} and\"White\" if called on  {@link OthelloSide#WHITE}.", "Heuristic": ["H1"]}, {"nl": "Return true of t is java.lang.String. We don't compare against ts.String() because ts.String() may not yet be set.", "Heuristic": ["H1"]}, {"nl": "Reset both stats caches on a trigger (before the timer runs out). Resets the timers.", "Heuristic": []}, {"nl": "Retrieve the delegee.", "Heuristic": ["H1"]}, {"nl": "Recycles the bitmap and makes it null, so it cannot be used again", "Heuristic": []}, {"nl": "Return the public interface of the service.", "Heuristic": []}, {"nl": "Throws an exception if the current token is not  an integer.  Otherwise, returns that integer and moves to the next token.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the defaultValue property.", "Heuristic": []}, {"nl": "Creates an instance of  {@code HashSet}", "Heuristic": ["H1"]}, {"nl": "Not-null value; ensure this value is available before it is saved to the database.", "Heuristic": []}, {"nl": "Checks a few of the many possible bad inputs", "Heuristic": []}, {"nl": "Makes a draw on the distribution.  The results are added to parameter 'x'", "Heuristic": []}, {"nl": "Schedules execution of the heartbeat.", "Heuristic": []}, {"nl": "It attempts to get the password from the private  alias/passwords map.", "Heuristic": ["H1"]}, {"nl": "Returns the block number stored in the index record  at the specified slot.", "Heuristic": ["H1"]}, {"nl": "getBytes() as method for String synchronizes during the look-up for the Charset object for the default charset as given with a default charset name. With our call using a given charset object, the call is much easier to perform and it omits the synchronization for the charset lookup.", "Heuristic": ["H1"]}, {"nl": "List all resource sets for the current user", "Heuristic": []}, {"nl": "Creates a view and installs event emitters on it.", "Heuristic": []}, {"nl": "Provides a string representation of this instance suitable for human consumption.", "Heuristic": []}, {"nl": "Specifies the 'chunked' flag.  Note that the chunked setting is a hint only. If using HTTP/1.0, chunking is never performed. Otherwise, even if chunked is false, HttpClient must use chunk coding if the entity content length is unknown (-1).  The default implementation sets the value of the {@link #chunked chunked} attribute.", "Heuristic": ["H1"]}, {"nl": "Factory method, responsible for creating the controller.", "Heuristic": []}, {"nl": "Returns a Map of image rendering hints applicable to  {@link Graphics2D#setRenderingHints(java.util.Map)}. By default, this will only include the interpolation hint specified for this ScalingOptions. Other hints could be added in a overridden version in a subclass.", "Heuristic": ["H1"]}, {"nl": "the tweet iterator returns tweets in descending appearance order (top first)", "Heuristic": ["H1"]}, {"nl": "Schedules execution of a heartbeat for the given thread.", "Heuristic": []}, {"nl": "Returns the BasePriceType associated with a line item", "Heuristic": []}, {"nl": "Gets the value of the challengeResponse property.", "Heuristic": []}, {"nl": "get string value.", "Heuristic": ["H1"]}, {"nl": "Alias for TestNet3Params.get(), use that instead.", "Heuristic": []}, {"nl": "Sets the comment character.  All lines that start with this character will be ignored.", "Heuristic": []}, {"nl": "Asks the camera hardware to begin drawing preview frames to the screen.", "Heuristic": []}, {"nl": "Gets the referenced object instance or null if the reference has not been resolved yet;", "Heuristic": []}, {"nl": "Sets the quality.", "Heuristic": []}, {"nl": "Provide the ipAddress to the AddressPair's Builder.", "Heuristic": ["H1"]}, {"nl": "Gets all file resources for dup and update check.", "Heuristic": ["H1"]}, {"nl": "Obtiene una lista de las instancias de tareas de usuario activas para un proceso determinado.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns the total number of items that have been added to the ring.", "Heuristic": []}, {"nl": "Test of getCountermeasures method, of class TestDosAttack.", "Heuristic": []}, {"nl": "Sets the batch status.", "Heuristic": []}, {"nl": "Note: This is only available in  {@link BlockStoreMeta#getBlockStoreMetaFull}.", "Heuristic": ["H1"]}, {"nl": "Description of the Method", "Heuristic": []}, {"nl": "This will return response.", "Heuristic": []}, {"nl": "Set the timeout before willing to abort an IO call.", "Heuristic": []}, {"nl": "Retrieves the image", "Heuristic": []}, {"nl": "Tests that reporting a lost file from the file system informs the client about this file.", "Heuristic": []}, {"nl": "Returns the internal CancerStudy ID of the study associated with this ROI", "Heuristic": []}, {"nl": "Delete the  siteUrl by id.", "Heuristic": ["H1"]}, {"nl": "Comma separated schema locations", "Heuristic": []}, {"nl": "Deserializes only the header in case packet meta data is needed before decoding the payload. This method assumes you have already called seekPastMagicBytes()", "Heuristic": ["H1"]}, {"nl": "Stores the given throwable and rethrows it. It will be rethrown as is if it is an {@code IOException},  {@code RuntimeException},  {@code Error} or a checked exception of thegiven type. Otherwise, it will be rethrown wrapped in a  {@code RuntimeException}. Note: Be sure to declare all of the checked exception types your try block can throw when calling an overload of this method so as to avoid losing the original exception type. This method always throws, and as such should be called as {@code throw closer.rethrow(e, ...);} to ensure the compiler knows that it will throw.", "Heuristic": ["H1"]}, {"nl": "Getting node value", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Reset Time method which resets the last circle found time.", "Heuristic": []}, {"nl": "Called when the service transitions to the  {@linkplain State#FAILED FAILED} state. The{@linkplain State#FAILED FAILED} state is a terminal state in the transition diagram.Therefore, if this method is called, no other methods will be called on the  {@link Listener}.", "Heuristic": ["H1"]}, {"nl": "Returns user  {@link Credentials} selected for authentication if available", "Heuristic": ["H1"]}, {"nl": "Specify the relative threshold used to select singular values.  By default it's UtilEjml.EPS.", "Heuristic": ["H1"]}, {"nl": "Startup method, no arguments required.", "Heuristic": []}, {"nl": "get long value.", "Heuristic": ["H1"]}, {"nl": "Return the action external status.", "Heuristic": []}, {"nl": "Moves the character in one tile in the specified direction and notifies the RpgController.", "Heuristic": ["H1"]}, {"nl": "Compute the SHA hash of a token", "Heuristic": []}, {"nl": "Create an instance of  {@link Config }", "Heuristic": ["H1"]}, {"nl": "Test for the  {@link HadoopUtils#getPathWithoutScheme(Path)} method that contains the schema.", "Heuristic": ["H1"]}, {"nl": "Sets the proxy selector to use.", "Heuristic": []}, {"nl": "Return file", "Heuristic": ["H2"]}, {"nl": "Get the CallbackHandler to use with the LoginContext", "Heuristic": []}, {"nl": "Create an instance of  {@link ParametersMetaData }", "Heuristic": ["H1"]}, {"nl": "Writes a complete method call.", "Heuristic": []}, {"nl": "Return if a path is a directory.", "Heuristic": []}, {"nl": "Add an item view at the given index.", "Heuristic": []}, {"nl": "get JSONObject value.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Allows the template location to be set.", "Heuristic": []}, {"nl": "logs the message and Throwable prepended by the filter name (copy of  {@link GenericServlet#log(String,Throwable)})", "Heuristic": ["H1"]}, {"nl": "Are non-expiring tokens cached using the default cache time", "Heuristic": []}, {"nl": "Adds a name/value pair to the formatted output in  {@code name=value} format. If {@code value}is  {@code null}, the string  {@code \"null\"} is used, unless {@link #omitNullValues()} iscalled, in which case this name/value pair will not be added.", "Heuristic": ["H1"]}, {"nl": "Sets the value for the key given, returns true if successful, false otherwise.", "Heuristic": []}, {"nl": "register the SMSCMessageObserver with the SMSCMessageNotifier so that observer will get notified when the new shot message came from the SMSC", "Heuristic": ["H1"]}, {"nl": "Return whether or not details about the given product are available.", "Heuristic": ["H1"]}, {"nl": "See  {@link CollectionIteratorTester}", "Heuristic": ["H1"]}, {"nl": "Returns the  {@link InetSocketAddress} of this route.", "Heuristic": ["H1"]}, {"nl": "Loads the metrics configuration file.", "Heuristic": []}, {"nl": "Creates a new IProxy that acts as a  {@link ScopeProvider}.", "Heuristic": ["H1"]}, {"nl": "Cache a block to the tiered storage managed by the  {@link #mMetaManager}. It's a wrapper around {@link TieredBlockStoreTestUtils#cache}.", "Heuristic": ["H1"]}, {"nl": "Equality comparison.", "Heuristic": ["H2"]}, {"nl": "This sets the protocol to use. The system default is usually \"TLS\".", "Heuristic": []}, {"nl": "Returns the string representation of the instance, in this case, the CSS text value.", "Heuristic": []}, {"nl": "Test of getCollisionString method, of class CollisionDJBX31A.", "Heuristic": []}, {"nl": "Gets the run id.", "Heuristic": ["H1"]}, {"nl": "Getter for the test application secret.", "Heuristic": []}, {"nl": "Obtains the  {@link ConnRoutePNames#DEFAULT_PROXY DEFAULT_PROXY}parameter value. {@link #NO_HOST} will be mapped to null,to allow unsetting in a hierarchy.", "Heuristic": ["H1"]}, {"nl": "Tell the parse state that a feature belongs to the current classifier.", "Heuristic": []}, {"nl": "Sets the fetcher end time stamp.", "Heuristic": []}, {"nl": "Get the rank of this node.", "Heuristic": []}, {"nl": "Get one ingredient by id.", "Heuristic": ["H1"]}, {"nl": "Returns a string representation of the enumeration value.", "Heuristic": []}, {"nl": "Clear all output properties.", "Heuristic": []}, {"nl": "Set the encryption algorithm to use", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Return the RPDTO object for a given OpenID and RP URL", "Heuristic": ["H1"]}, {"nl": "Set one or more loggers and levels descriptor.  Parsed input syntax is:  loggers   := &lt;logger&gt;(&lt;separator&gt;&lt;logger&gt;) logger    := &lt;name&gt;[&quot;:&quot;&lt;level&gt;] separator := &quot;,&quot; | &quot; &quot; | &quot;\\n&quot;  Examples:  Two loggers and two levels:  org.apache.cxf:INFO, org.apache.cxf.jaxrs:DEBUG  Three loggers, first with default \"INFO\" level:  org.apache.cxf, org.apache.cxf.jaxrs:DEBUG, namedLogger:ERROR  One logger with default \"INFO\" level:  org.apache.cxf", "Heuristic": ["H1"]}, {"nl": "Check if this handle was closed with the  {@link SFTPv3Client#closeFile(SFTPv3FileHandle)} methodof the SFTPv3Client instance which created the handle.", "Heuristic": ["H1"]}, {"nl": "Tells whether or not this key-value pair is equal to another object.  Two key-value pairs are equal if, and only if, their key and value  {@link ByteBuffer}s are equal to each other.", "Heuristic": ["H1"]}, {"nl": "Encodes a byte array into Base 64 format and breaks the output into lines of 76 characters. This method is compatible with sun.misc.BASE64Encoder.encodeBuffer(byte[]).", "Heuristic": []}, {"nl": "Same as Class.forName(), except that it works for primitive types.", "Heuristic": ["H1"]}, {"nl": "Returns a Pattern instance for the given key", "Heuristic": []}, {"nl": "Gets the batch status.", "Heuristic": []}, {"nl": "Returns date from request.", "Heuristic": []}, {"nl": "Returns the name of the method described by this object.", "Heuristic": []}, {"nl": "Walk the list of registered EndpointResolvers, so as to mint a new  abstract EPR for a given physical EPR.", "Heuristic": ["H1"]}, {"nl": "Assert that the text of the xpath node retrieved is equal to the value specified.", "Heuristic": ["H1"]}, {"nl": "Get the short name of this LanguageVersion. This is Language short name appended with the LanguageVersion version if not an empty String.", "Heuristic": ["H1"]}, {"nl": "Returns the  {@link AccessibilityServiceInfo}s of the enabled accessibility services for a given feedback type.", "Heuristic": ["H1"]}, {"nl": "Inits the.", "Heuristic": ["H1", "H2"]}, {"nl": "Destroy the EL service.", "Heuristic": []}, {"nl": "Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos.Geo }", "Heuristic": ["H1"]}, {"nl": "Return the given identifier if it is contained in the cache, otherwise null.", "Heuristic": []}, {"nl": "Initialize the graphic components of this screen.", "Heuristic": []}, {"nl": "Atomically sets the element at position  {@code i} to the givenupdated value if the current value is bitwise equal to the expected value. May  fail spuriously and does not provide ordering guarantees, so is only rarely an appropriate alternative to  {@code compareAndSet}.", "Heuristic": ["H1"]}, {"nl": "Converts float data to a format that can be quickly added to the buffer with  {@link #put(int[])}", "Heuristic": ["H1"]}, {"nl": "Test the number of bytes written.", "Heuristic": []}, {"nl": "Sets the jaxb provider.", "Heuristic": ["H1"]}, {"nl": "Tests if output of  {@link IdUtils#getRandomNonNegativeLong()} is non-negative.Also tests for randomness property.", "Heuristic": ["H1"]}, {"nl": "Sets the checks if is update.", "Heuristic": []}, {"nl": "Gets the test id.", "Heuristic": ["H1"]}, {"nl": "Create helper object to create later proxies implementing the specified interfaces later. Under JDK 1.3 the implementation can look like:  return java.lang.reflect.Proxy.getProxyClass(..., interfaces). getConstructor(new Class[] { java.lang.reflect.InvocationHandler.class }); ", "Heuristic": ["H1"]}, {"nl": "Retrieve the event type.", "Heuristic": []}, {"nl": "Cancels the animation. Unlike  {@link #end()}, cancel() causes the animation to stop in its tracks, sending an {@link android.animation.Animator.AnimatorListener#onAnimationCancel(Animator)} toits listeners, followed by an {@link android.animation.Animator.AnimatorListener#onAnimationEnd(Animator)} message.This method must be called on the thread that is running the animation.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Sets the value of the enabled property.", "Heuristic": []}, {"nl": "Get the default Token Type to be issued for this Service", "Heuristic": []}, {"nl": "Returns true if  {@link #connect} has been attempted on this connection.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns the decision list of this decision list learner", "Heuristic": []}, {"nl": "Checks if the given byte array starts with an increasing sequence of bytes of the given length, starting from the given value.", "Heuristic": []}, {"nl": "Scans list of base packages for all classes marked with specific annotations.", "Heuristic": []}, {"nl": "Returns a list of values for the specified fields. There is a one-one correspondence between this list of values and the list of fields.", "Heuristic": []}, {"nl": "Get the referenced revision in B.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.VTGParser#setMode(FaaMode)}.", "Heuristic": ["H1"]}, {"nl": "The backward equation (15.9) in Matrix form becomes (15.13):  bk+1:t = TOk+1bk+2:t ", "Heuristic": ["H1"]}, {"nl": "Loads the given HTML content directly.", "Heuristic": []}, {"nl": "Assert a boolean expression, throwing  {@code IllegalStateException}if the test result is  {@code false}. Call isTrue if you wish to throw IllegalArgumentException on an assertion failure. Assert.state(id == null, \"The id property must not already be initialized\");", "Heuristic": ["H1"]}, {"nl": "Not-null value.", "Heuristic": ["H2"]}, {"nl": "Retrieves a record field from the stream.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.HDGParser#getHeading()}.", "Heuristic": ["H1"]}, {"nl": " Append a hashCode for a byte array. ", "Heuristic": []}, {"nl": "Returns a new builder for an immutable range map.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "For caches that do not override  {@link #sizeOf}, this returns the number of entries in the cache. For all other caches, this returns the sum of the sizes of the entries in this cache.", "Heuristic": ["H1"]}, {"nl": "Set the triple.", "Heuristic": []}, {"nl": "Returns the  {@link Proxy} of this route.Warning: This may be different than the proxy returned by  {@link #getAddress}! That is the proxy that the user asked to be connected to; this returns the proxy that they were actually connected to. The two may disagree when a proxy selector selects a different proxy for a connection.", "Heuristic": ["H1"]}, {"nl": "Removes a property change listener.", "Heuristic": []}, {"nl": "Called when a change in the shown pages is going to start being made.", "Heuristic": []}, {"nl": "Returns the sample covariance of the values. The count must be greater than one. This is not guaranteed to return zero when the dataset consists of the same pair of values multiple times, due to numerical errors. Non-finite values If the dataset contains any non-finite values ( {@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or  {@link Double#NaN}) then the result is  {@link Double#NaN}.", "Heuristic": ["H1"]}, {"nl": "Getter for the default handling of files with multiple extensions.", "Heuristic": []}, {"nl": "Adds a copy of the given byte array as a data element (i.e. PUSHDATA) at the end of the program.", "Heuristic": ["H1"]}, {"nl": "checkGameElement prueft spezifisch ob die Schlange mit einem  gameElement kollidiert ist.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMBParser#getBearing()} .", "Heuristic": ["H1"]}, {"nl": "Committed block is stored in BlockStore under its  {@link StorageDir} as a block file namedafter its blockId. e.g. Block 100 of StorageDir \"/mnt/mem/0\" has path:  /mnt/mem/0/100", "Heuristic": ["H1"]}, {"nl": "Creates a way filter which passes any way suitable for traveling by car.", "Heuristic": []}, {"nl": "If no curent request is available, the SignatureManager must be notified.", "Heuristic": ["H1"]}, {"nl": "Increments the count for object.", "Heuristic": []}, {"nl": "Computes the Greatest Common Divisor of two integers.", "Heuristic": []}, {"nl": "Sends a federation poke to the Gitblit instance at remoteUrl. Pokes are sent by an pulling Gitblit instance to an origin Gitblit instance as part of the proposal process. This is to ensure that the pulling Gitblit instance has an IP route to the origin instance.", "Heuristic": ["H1"]}, {"nl": "Constructs a join plan of the specified plan and the table.  The plan will use an indexjoin, if possible. (Which means that if an indexselect is also possible, the indexjoin operator takes precedence.) The method returns null if no join is possible.", "Heuristic": ["H1"]}, {"nl": "When  {@link UnderFileSystem#get(String)} is called to get an {@link UnderFileSystem}, it will instead return the mock returned by this method, as long as `filename` matches `ufsPathMatcher`. Because this method needs to mock a static method from  {@link UnderFileSystem}, calling tests should make sure to annotate their classes with `@PrepareForTesting(UnderFileSystem.class)`.", "Heuristic": ["H1"]}, {"nl": "Creates a parser for specified talker and sentence type. The returned instance needs to be cast to corresponding sentence interface.", "Heuristic": []}, {"nl": "Return the class with the given name.", "Heuristic": []}, {"nl": "change the chat type to EMConversationType", "Heuristic": ["H1"]}, {"nl": "Alias for TestNet3Params.get(), use that instead.", "Heuristic": []}, {"nl": "Get the token Id", "Heuristic": ["H1"]}, {"nl": "Sets the src file name.", "Heuristic": []}, {"nl": "Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos }", "Heuristic": ["H1"]}, {"nl": "See if it can solve an easy optimization problem.", "Heuristic": []}, {"nl": "Get the account with the specific name. The name is not case sensitive.", "Heuristic": ["H1"]}, {"nl": "Expands the property table", "Heuristic": []}, {"nl": "Set the value of artist", "Heuristic": []}, {"nl": "Get the value of artist", "Heuristic": []}, {"nl": "Sets the interval to lower exclusive or lower inclusive.", "Heuristic": []}, {"nl": "If needed declares and sets up internal data structures.", "Heuristic": []}, {"nl": "Gets the scope explicitly approved by the end user", "Heuristic": []}, {"nl": "Sets the optional link to the page  describing the error in detail", "Heuristic": ["H1"]}, {"nl": "Set the advanced configuation set.", "Heuristic": ["H1"]}, {"nl": "Getting existing cache if the cache available, else returns a newly created cache. This logic handles by javax.cache implementation", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link CheckServiceAccessResponse }", "Heuristic": ["H1"]}, {"nl": "Returns URI of the authorization service with the query parameter containing  the request token key", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link MetaData }", "Heuristic": ["H1"]}, {"nl": "&lt;a&gt; &lt;b&gt; &lt;/a&gt;", "Heuristic": ["H1"]}, {"nl": "Renders the document to the given canvas. Call layout() first.", "Heuristic": []}, {"nl": "This provides a mapping between http://schema.openid.net/ and http://axschema.org", "Heuristic": []}, {"nl": "Sets the permission value such as \"read_calendar\"", "Heuristic": []}, {"nl": "Calls the given  {@link RpcCallable} and handles any exceptions thrown.", "Heuristic": ["H1"]}, {"nl": "Returns the maximum number of cache entries the cache will retain.", "Heuristic": []}, {"nl": "Return comment", "Heuristic": ["H2"]}, {"nl": "Set the entropy associated with the token.", "Heuristic": []}, {"nl": "Gets the time elapsed.", "Heuristic": []}, {"nl": "Sets the value of the value property.", "Heuristic": []}, {"nl": "Get Application current machine's options.", "Heuristic": []}, {"nl": "Calls the given  {@link Callable} on a new {@link Thread} and returns a {@link Future} thatis set on finish or error.", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link JAXBElement }{@code }}", "Heuristic": ["H1"]}, {"nl": "Set the ConditionsBean", "Heuristic": []}, {"nl": "Gets the Genetic Profile.", "Heuristic": []}, {"nl": "Test of getIntervalNumber method, of class LogEntryInterval.", "Heuristic": []}, {"nl": "Set the referenced revision in B.", "Heuristic": []}, {"nl": "Set of properties which are specific for endpoint level", "Heuristic": []}, {"nl": "Estimates the number of block accesses in the selection, which is the same as in the underlying query.", "Heuristic": []}, {"nl": "return all the springs in the simulator", "Heuristic": ["H1"]}, {"nl": "Loads the default map if necessary and returns the frame (useful for integration into an AIMA demo application).", "Heuristic": ["H1"]}, {"nl": "Add a byte to the buffer.", "Heuristic": []}, {"nl": "Return the label for this pileup.", "Heuristic": []}, {"nl": "Invokes the \"onBlockFetchFailure\" callback for every listed block id.", "Heuristic": ["H1"]}, {"nl": "Gets the number of bytes used to encode this originally if deserialized from a byte array. Otherwise returns the minimum encoded size", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "This tests everything that the test for the static file above tests, but it also does the full download.", "Heuristic": []}, {"nl": "Gets the checks if is prepopulated.", "Heuristic": []}, {"nl": "Returns everything below the endpoint relative to the specified comparator, with the specified endpoint behavior.", "Heuristic": []}, {"nl": "Get the encryption Crypto object", "Heuristic": []}, {"nl": "Rescales the image to fit on a thumbnail", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.VTGParser#setSpeedKnots(double)}.", "Heuristic": ["H1"]}, {"nl": "Get this node's flex direction, as defined by style.", "Heuristic": []}, {"nl": "Determines the schema of the table, which is obtainable from the catalog manager.", "Heuristic": []}, {"nl": "Returns a copy of the current contents of the cache, ordered from least recently accessed to most recently accessed.", "Heuristic": []}, {"nl": "Called prior to the interceptor chain being traversed.", "Heuristic": []}, {"nl": "Obtener lista de acuerdo al nombre", "Heuristic": ["H1"]}, {"nl": "Obtains a list containing the names of all registered  {@link CookieSpec cookiespecs}. Note that the DEFAULT policy (if present) is likely to be the same as one of the other policies, but does not have to be.", "Heuristic": ["H1"]}, {"nl": "Returns the name of the protocol.", "Heuristic": []}, {"nl": "Set the triple resolution state.", "Heuristic": []}, {"nl": "Not required", "Heuristic": ["H2"]}, {"nl": "If true, we will prefer allocating off-heap byte buffers within Netty.", "Heuristic": ["H1"]}, {"nl": "Initializes a ClientFactory which runs the given TransportClientBootstraps prior to returning a new Client. Bootstraps will be executed synchronously, and must run successfully in order to create a Client.", "Heuristic": []}, {"nl": "Getter for the last name of the profile.", "Heuristic": []}, {"nl": "Returns a read-only view of the available factories.", "Heuristic": []}, {"nl": "This method is used to determine if a permission not being present on the current Android platform should affect whether the PermissionsResultAction should continue listening for events. By default, it returns true and will simply ignore the permission that did not exist. Usually this will work fine since most new permissions are introduced to restrict what was previously allowed without permission. If that is not the case for your particular permission you request, override this method and return false to result in the Action being denied.", "Heuristic": []}, {"nl": "Gets available bytes for this dir.", "Heuristic": ["H1"]}, {"nl": "compiles the CSS, RTL-CSS and theme parameters as JSON", "Heuristic": ["H1"]}, {"nl": "Returns the current maximum idle lifetime in seconds for a background revalidation worker thread. If a worker thread is idle for this long, and there are more than the core number of worker threads alive, the worker will be reclaimed.", "Heuristic": []}, {"nl": "Check whether the value is UTC data format.", "Heuristic": []}, {"nl": "Initiate FIDO Device Registration.", "Heuristic": []}, {"nl": "Updates the length, if and only if the length was previously unknown.", "Heuristic": []}, {"nl": "Convert a PersistentAuditEvent to an AuditEvent", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Inicializa el servlet interno.", "Heuristic": ["H1"]}, {"nl": "Helper method to create a  {@link org.apache.thrift.transport.TServerSocket} for the RPC server.", "Heuristic": ["H1"]}, {"nl": "Returns the Singleton of ApplicationMgtSystemConfig", "Heuristic": ["H1"]}, {"nl": "get the SYN time in microseconds. The SYN time is 0.01 seconds = 10000 microseconds", "Heuristic": ["H1"]}, {"nl": "Gets the value of the tsResult property.", "Heuristic": []}, {"nl": "Set the list of accepted c14n algorithms. A request can contain a wst:CanonicalizationAlgorithm uri to use for c14n in an issued token. The algorithm specified must be contained in this list. The default algorithms are C14N_EXCL_OMIT_COMMENTS.", "Heuristic": ["H1"]}, {"nl": "A Java package style string acting as unique ID for these parameters", "Heuristic": []}, {"nl": "Returns the number of times  {@link #put} was called.", "Heuristic": ["H1"]}, {"nl": "Returns the estimated number of blocks in the  materialized table. It does not include the one-time cost of materializing the records.", "Heuristic": ["H1"]}, {"nl": "Adds/updates a user object keyed by username. This method allows for renaming a user.", "Heuristic": []}, {"nl": "Registers all subscriber methods on  {@code object} to receive events.", "Heuristic": ["H1"]}, {"nl": "Mutator for the Action property.", "Heuristic": ["H1"]}, {"nl": "See if it correctly decomposes a square, tall, or wide matrix.", "Heuristic": []}, {"nl": "Default action executes session.meterpreter_script and shows console window.", "Heuristic": ["H1"]}, {"nl": "Writes out a domain pair object for the use inside the domain hierarchy", "Heuristic": []}, {"nl": "Hex encode the byte data writing it to the given output stream.", "Heuristic": []}, {"nl": "Tests that the iterator returned by  {@link KeyValuePartitionReader#iterator()} for an emptypartition has no elements to be iterated.", "Heuristic": ["H1"]}, {"nl": "Returns the number of records in the join. Assuming uniform distribution, the formula is:  R(join(p1,p2)) = R(p1)R(p2)/max{V(p1,F1),V(p2,F2)}", "Heuristic": ["H1"]}, {"nl": "The begin method is called before the entire tree is visited. This method allows the visitor to perform any initialization that cannot be done when the visitor is created. If  {@code null} is returned, the ast is not traversed.", "Heuristic": ["H1"]}, {"nl": "Finishes scrolling", "Heuristic": ["H2"]}, {"nl": "Returns the second element of the triplet.", "Heuristic": []}, {"nl": "Expands buffer's capacity.", "Heuristic": []}, {"nl": "Gets the polling time unit.", "Heuristic": []}, {"nl": "This call is used to set the bus. It should only be called once.", "Heuristic": []}, {"nl": "Parse an entry name from a header buffer.", "Heuristic": []}, {"nl": "Removes a CSP listener from the solution strategy.", "Heuristic": []}, {"nl": "Returns lifetime coefficient used in heuristic freshness caching.", "Heuristic": []}, {"nl": "load old revision information of Graph", "Heuristic": ["H1"]}, {"nl": "Use this setter if the broadcaster is not available during instantiation and you're not using WalletAppKit. This setter will let you delay the setting of the broadcaster until the Bitcoin network is ready.", "Heuristic": ["H1"]}, {"nl": " Regular expression defining proxies that are trusted when they appear in the  {@link #remoteIpHeader} header.  Default value : empty list, no external proxy is trusted. ", "Heuristic": ["H1"]}, {"nl": "set type", "Heuristic": ["H1", "H2"]}, {"nl": "The main program for the BrowserStartup class", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Devuelve el Monitor asociado a la Nave de Combate.", "Heuristic": ["H1"]}, {"nl": "Checks to see if 'c' is a space character or not.", "Heuristic": []}, {"nl": "Close the SlidingMenu and show the content view.", "Heuristic": []}, {"nl": "Obtains an element's attributes as Map.", "Heuristic": []}, {"nl": "Position in the chain for this block. The genesis block has a height of zero.", "Heuristic": []}, {"nl": "Returns the location one unit ahead of this location.", "Heuristic": []}, {"nl": "Gets the flag of whether this was created by a coinbase tx.", "Heuristic": ["H1"]}, {"nl": "Find the matching XML node and convert it into an instance of the provided class. The default JAXB MessageBodyReader is currently used in case of non-primitive types.", "Heuristic": ["H1"]}, {"nl": "Closes the scan by closing the two underlying scans.", "Heuristic": []}, {"nl": "Returns the name of the index.", "Heuristic": []}, {"nl": "get the existing settings.", "Heuristic": ["H1"]}, {"nl": "Creates an  {@code AtomicReferenceArray} instance with the same length as, and all elementscopied from, the given array.", "Heuristic": ["H1"]}, {"nl": "Creates instance of builder with provided properties", "Heuristic": []}, {"nl": "$ {@inheritDoc}.", "Heuristic": []}, {"nl": "Assert that a collection has elements; that is, it must not be {@code null} and must have at least one element.Assert.notEmpty(collection, \"Collection must have elements\");", "Heuristic": ["H1"]}, {"nl": "Creates a MapType by specifying the data type of keys ( {@code keyType}), the data type of values ( {@code keyType}), and whether values contain any null value ( {@code valueContainsNull}).", "Heuristic": ["H1"]}, {"nl": "Computes a simple approximation of the compass course from this position to the specified node.", "Heuristic": []}, {"nl": "A collector that converts a stream of zero or one elements to an  {@code Optional}. The returned collector throws an  {@code IllegalArgumentException} if the stream consists of two or moreelements, and a  {@code NullPointerException} if the stream consists of exactly one element,which is null.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RTEParser#getWaypointCount()}.", "Heuristic": ["H1"]}, {"nl": "Unwraps the constant and returns it.", "Heuristic": []}, {"nl": "Return OS name.", "Heuristic": []}, {"nl": "This implementation calls  {@link #iterateAxis(byte)} to get an{@link AxisIterator} which is then optionally filtered using{@link AxisFilter}. {@inheritDoc}", "Heuristic": ["H1"]}, {"nl": "Assert that the following XPath query selects a boolean value.", "Heuristic": []}, {"nl": "This method is used to initialize the OpenSAML2 library. It calls the bootstrap method, if it is not initialized yet.", "Heuristic": []}, {"nl": "If  {@code nullableReference} is non-null, returns an {@code Optional} instance containing thatreference; otherwise returns  {@link Optional#absent}. Comparison to  {@code java.util.Optional}: this method is equivalent to Java 8's {@code Optional.ofNullable}.", "Heuristic": ["H1"]}, {"nl": "Get the SFTPv3Client instance which created this handle.", "Heuristic": []}, {"nl": "Get request headers in authentication requests", "Heuristic": []}, {"nl": "Parse a  {@link String} into a {@link Long}.", "Heuristic": ["H1"]}, {"nl": "Returns the file channel for the specified filename. The file channel is stored in a map keyed on the filename. If the file is not open, then it is opened and the file channel is added to the map.", "Heuristic": []}, {"nl": "Check to see if a mnemonic word list is valid.", "Heuristic": []}, {"nl": "Start root shell", "Heuristic": []}, {"nl": "A method annotated to test preflight.", "Heuristic": []}, {"nl": "Set the max-age of this cookie. If set to 0, it should be removed from the session.", "Heuristic": []}, {"nl": "Waits for given condition  {@link Callable} to return (pull) {@code true}, otherwise times out with  {@link TimeoutException}. The condition will be evaluated at least once. The method will wait for the last condition to finish after a timeout.", "Heuristic": ["H1"]}, {"nl": "Reads a matrix in which has been encoded using a Column Space Value (CSV) file format. The number of rows and columns are read in on the first line. Then each row is read in the subsequent lines.", "Heuristic": []}, {"nl": "The total number of commits in the push.", "Heuristic": []}, {"nl": "Returns the current offset in the scroll.", "Heuristic": []}, {"nl": "Returns the value of the page's flag field", "Heuristic": []}, {"nl": "Sets the value of the id property.", "Heuristic": ["H1"]}, {"nl": "Get the list of modified diagrams.", "Heuristic": []}, {"nl": "Atomically adds the given value to the element at index  {@code i}.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets the cached last refresh date from a Bundle.", "Heuristic": []}, {"nl": "Rolls back the transaction. The method iterates through the log records, calling undo() for each log record it finds for the transaction, until it finds the transaction's START record.", "Heuristic": []}, {"nl": "Returns the string value for the specified key.  If the key does not exist an exception is thrown.", "Heuristic": []}, {"nl": "Toggles the value of the startPause button. Also toggles the value of dispMsg.", "Heuristic": ["H1"]}, {"nl": "Returns the  {@link FileInfo} for a given path. Called via RPC, as well as internal masters.", "Heuristic": ["H1"]}, {"nl": "Create a duplicate endpoint reference sharing all atributes", "Heuristic": ["H1"]}, {"nl": "Returns a List of all Logger instances used by Flying Saucer from the JDK LogManager; these will be automatically created if they aren't already available.", "Heuristic": []}, {"nl": "Subclasses can override this method to install custom event emitters on the given View. You might want to override this method if your view needs to emit events besides basic touch events to JS (e.g. scroll events).", "Heuristic": []}, {"nl": "Get the x coordinate for the step at the given index", "Heuristic": []}, {"nl": "To be called from the controlling view's onKeyDown handler", "Heuristic": []}, {"nl": "Returns a copy of the current contents of the cache, ordered from least recently accessed to most recently accessed.", "Heuristic": []}, {"nl": "Gets the fontInstanceHashName attribute of the FontResolverTest object", "Heuristic": []}, {"nl": "Defines the hashcode.", "Heuristic": ["H1"]}, {"nl": "Escape base XML entities as specified here.", "Heuristic": []}, {"nl": "Returns the time the associated origin request was initiated by the caching module.", "Heuristic": []}, {"nl": "Removes/unregisters the instance of RemoteControlClient from the MediaRouter", "Heuristic": []}, {"nl": "returns feature vector", "Heuristic": ["H1"]}, {"nl": "Deletes a folder from the Box account", "Heuristic": []}, {"nl": "Compression quality for images to be generated from this writer. See {@link javax.imageio.ImageWriteParam#setCompressionQuality(float)} for a description of what this meansand valid range of values.", "Heuristic": ["H1"]}, {"nl": "Returns map containing the given entries.", "Heuristic": []}, {"nl": "Returns the number of available (i.e. unpinned) buffers.", "Heuristic": []}, {"nl": "Sticky bit can be set primarily on directories in UNIX / Linux. If the sticky bit of is enabled on a directory, only the owner and the root user can delete / rename the files or directories within that directory. No one else can delete other users data in this directory(Where sticky bit is set). This is a security measure to avoid deletion of folders and their content (sub-folders and files), though other users have full permissions. Setting the sticky bit of a file is a no-op.", "Heuristic": ["H1"]}, {"nl": "Atomically sets the element at position  {@code i} to the given valueand returns the old value.", "Heuristic": ["H1"]}, {"nl": "Gets the minimum encoded size of the value stored in this VarInt", "Heuristic": []}, {"nl": "Returns the boolean value of a configuration property.", "Heuristic": []}, {"nl": "Returns all object classes as a read only collection.", "Heuristic": []}, {"nl": "Updated Resident Identity provider for a given tenant", "Heuristic": []}, {"nl": "Assert that an array has no null elements. Note: Does not complain if the array is empty! Assert.noNullElements(array, \"The array must have non-null elements\");", "Heuristic": []}, {"nl": "Performs final checks before results from the hash can be returned", "Heuristic": []}, {"nl": "get active.", "Heuristic": ["H1", "H2"]}, {"nl": "Convert a json string to an object of the specified type.", "Heuristic": ["H1"]}, {"nl": "Returns the number of \"smallest units\" of this monetary value.", "Heuristic": []}, {"nl": "Create a program that satisfies an OP_CHECKMULTISIG program.", "Heuristic": ["H1"]}, {"nl": "Get attributes", "Heuristic": ["H2"]}, {"nl": "Sets value of the  {@link CoreConnectionPNames#SO_REUSEADDR} parameter.", "Heuristic": ["H1"]}, {"nl": "The profile password.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "When switching the background and foreground, switch the dimensions also", "Heuristic": []}, {"nl": "Getter for the first name of the profile.", "Heuristic": []}, {"nl": "Set if the Logs print log or not", "Heuristic": []}, {"nl": "Set the second value.", "Heuristic": []}, {"nl": "Executes the PMD found in tempDir against the given sourceDirectory path with the given ruleset.", "Heuristic": ["H1"]}, {"nl": "Clears both interceptor lists maintained by this processor.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.HDTParser#getHeading()}.", "Heuristic": ["H1"]}, {"nl": "Sets the actual value.", "Heuristic": []}, {"nl": "Gets the value of the state property.", "Heuristic": []}, {"nl": "Set the scope for callback request", "Heuristic": []}, {"nl": "Writes a rollback record to the log. This log record contains the ROLLBACK operator, followed by the transaction id.", "Heuristic": ["H1"]}, {"nl": "Returns a random integer between zero and  {@code MAX_EXPONENT}.", "Heuristic": ["H1"]}, {"nl": "get name of emoji icon", "Heuristic": ["H1"]}, {"nl": "A value to be added to the referrer URL when a person follows a link from this shared content on feed.", "Heuristic": []}, {"nl": "This function returns the best move for a given position after calculating for 'waitTime' ms", "Heuristic": []}, {"nl": "Set the optional list of user roles which may have  been captured during the authentication process", "Heuristic": ["H1"]}, {"nl": "Adds a TermCounter to the set associated with `term`.", "Heuristic": []}, {"nl": "Listennig for a change in presence of the user, eg: unavailable => available", "Heuristic": ["H1"]}, {"nl": "Capturing the packets coming from the user and setting the responseReceived flag.", "Heuristic": []}, {"nl": "The same as above, but specifically for Google Book Search.", "Heuristic": []}, {"nl": "Returns the factory.", "Heuristic": []}, {"nl": "remove unused Tags", "Heuristic": ["H1"]}, {"nl": "Begin appending a new object. All keys and values until the balancing endObject will be appended to this object. The endObject method must be called to mark the object's end.", "Heuristic": []}, {"nl": "Returns the integer value at a specified offset of the page. If an integer was not stored at that location,  the behavior of the method is unpredictable.", "Heuristic": ["H1"]}, {"nl": "Set the textual content of the name. This call does not automatically set any other properties, such as script or language.", "Heuristic": []}, {"nl": "Creates a language with title equal to the name and no icon.", "Heuristic": []}, {"nl": "Specifies that the current interceptor needs to be added to the  interceptor chain before the specified collection of interceptors.", "Heuristic": ["H1"]}, {"nl": "Verifies that a set is immutable. A set is considered immutable if:  All its mutation methods result in UnsupportedOperationException, and do not change the underlying contents. All methods that return objects that can indirectly mutate the set throw UnsupportedOperationException when those mutators are called. ", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link CommonUtils#getCurrentMs()} and {@link CommonUtils#sleepMs(long)} methods.", "Heuristic": ["H1"]}, {"nl": "Validate the incoming request for mandatory parameters.", "Heuristic": []}, {"nl": "Extracts a Node's name, namespace URI (if any) and prefix as a QName.", "Heuristic": []}, {"nl": "Factory method to create a new default instance of an ArgoDiagram.", "Heuristic": []}, {"nl": "Estimates the number of distinct field values in the projection, which is the same as in the underlying query.", "Heuristic": []}, {"nl": "Logs and wraps the given exception.", "Heuristic": []}, {"nl": " Inverts a square lower triangular matrix:  L = L-1 ", "Heuristic": ["H1"]}, {"nl": "Check if the position is within the map. Does not check if the position is occupied", "Heuristic": []}, {"nl": "Returns a Charset for the named charset. If the name is null, return the default Charset.", "Heuristic": ["H1"]}, {"nl": "Returns the Euclidean distance between a specified point and this point.", "Heuristic": []}, {"nl": "32 bit FNV hash. Produces more \"random\" hashes than (say) String.hashCode().", "Heuristic": ["H1"]}, {"nl": "Creates a good general purpose solver for over determined systems and returns the optimal least-squares solution.  The A matrix will have dimensions (m,n) where m &ge; n.", "Heuristic": ["H1"]}, {"nl": "Returns the event with the specified ID, searching the specified map.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Factory method to return a BlockStoreMeta instance with blockIds.", "Heuristic": []}, {"nl": "Mithilfe des Randomizers werden die Diamanten auf dem Spielfeld platziert. x, y Position und der Wert werden jeweils vom Randomizer zufaellig generiert, die Anzahl wird beim Aufruf vorgegeben.", "Heuristic": ["H1"]}, {"nl": "Set the id", "Heuristic": ["H1"]}, {"nl": "Sets the secure attribute of the cookie.  When true the cookie should only be sent using a secure protocol (https).  This should only be set when the cookie's originating server used a secure protocol to set the cookie's value.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.GSVParser#getSatelliteCount()}.", "Heuristic": ["H1"]}, {"nl": "Reads a code of given length and at given index in an array of bits", "Heuristic": []}, {"nl": "Sets the protocol handler to use for this connection.", "Heuristic": []}, {"nl": "Returns a new thread-safe interner which retains a strong reference to each instance it has interned, thus preventing these instances from being garbage-collected. If this retention is acceptable, this implementation may perform better than  {@link #newWeakInterner}.", "Heuristic": ["H1"]}, {"nl": "Return the application name.", "Heuristic": []}, {"nl": "Get the hour of day.", "Heuristic": []}, {"nl": "Called by delegate method on error", "Heuristic": []}, {"nl": "This is called from Shell after adding it", "Heuristic": []}, {"nl": "Gets the cached token value from a Bundle.", "Heuristic": []}, {"nl": "Takes in a JsonGenerator created by  {@link #startMessageObject} and returns the stringifiedJSON", "Heuristic": ["H1"]}, {"nl": "Access method that finds the correct generator based on a name.", "Heuristic": []}, {"nl": "Returns the value of the specified field in the current record.", "Heuristic": []}, {"nl": "Constructs a String with all attributes in name = value format.", "Heuristic": []}, {"nl": "Add another class loader that the resource bundle could be located through.", "Heuristic": []}, {"nl": "Returns the sum of the values. Non-finite values If the dataset contains  {@link Double#NaN} then the result is {@link Double#NaN}. If it contains both  {@link Double#POSITIVE_INFINITY} and {@link Double#NEGATIVE_INFINITY} then theresult is  {@link Double#NaN}. If it contains  {@link Double#POSITIVE_INFINITY} and finite valuesonly or  {@link Double#POSITIVE_INFINITY} only, the result is {@link Double#POSITIVE_INFINITY}. If it contains  {@link Double#NEGATIVE_INFINITY} and finite values only or{@link Double#NEGATIVE_INFINITY} only, the result is {@link Double#NEGATIVE_INFINITY}.", "Heuristic": ["H1"]}, {"nl": "Get the rules that together form the perspective.", "Heuristic": []}, {"nl": "Test for setLatitude()", "Heuristic": []}, {"nl": "Adapt an enumeration to an iterator.", "Heuristic": []}, {"nl": "Convert a PersistentAuditEvent to an AuditEvent", "Heuristic": []}, {"nl": "Write the body of the response.", "Heuristic": []}, {"nl": "Create an instance of  {@link BrowseOffersResponse }", "Heuristic": ["H1"]}, {"nl": "Erase this ball at its current position.", "Heuristic": []}, {"nl": "Gets current singleton login user. This method is called to identify the singleton user who runs Alluxio client. When Alluxio client gets a user by this method and connects to Alluxio service, this user represents the client and is maintained in service.", "Heuristic": ["H1"]}, {"nl": "Initializes the system. This method is called during system startup.", "Heuristic": []}, {"nl": "Returns the next Step or null if current Step is the last Step", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Specifies the Content-Type header, as a string. The default implementation calls {@link #setContentType(Header) setContentType(Header)}.", "Heuristic": []}, {"nl": "Return true if this TokenProvider implementation is capable of providing a token that corresponds to the given TokenType.", "Heuristic": []}, {"nl": "Required. The port number of the service (on the new servers) to use for this particular load balancer. In most cases, this port number is 80. NOTE that when using RackConnectV3, instead of a cloud load balancer, leave this parameter empty.", "Heuristic": []}, {"nl": "Set the SubjectBean", "Heuristic": []}, {"nl": "This method is called after all of the children of  {@code n}have been visited. In this case, these children were visited by the visitor  {@code v}. This is the last chance for the visitor to modify the tree rooted at  {@code n}. This method will be called exactly the same number of times as  {@code entry} is called.That is, for each node that is not overridden,  {@code enter} and{@code leave} are each called exactly once. Note that if  {@code old == n} then the visitor should make a copyof  {@code n} before modifying it. It should then return themodified copy.  This method is typically called by the method {@link #leave(Node,Node,Node,NodeVisitor) leave(parent, old, n v)}. If a subclass overrides the method {@link #leave(Node,Node,Node,NodeVisitor) leave(parent, old, n v)}then this method may not be called.", "Heuristic": ["H1"]}, {"nl": "Sets an array of long values in the object.", "Heuristic": []}, {"nl": "Returns the events on the specified object layer of the specified map.", "Heuristic": []}, {"nl": "Equality comparison.", "Heuristic": ["H2"]}, {"nl": "Parses Matrix Content from the Specified String.", "Heuristic": []}, {"nl": "Reads all data from the file and send it to the sink.", "Heuristic": []}, {"nl": "Creates and returns a map populated with the keyValuesSets where the value held by the tuples are they key and value in that order.", "Heuristic": []}, {"nl": "Returns the adapter position of the first visible view. This position does not include adapter changes that were dispatched after the last layout pass.", "Heuristic": []}, {"nl": "the CSS condition that element has pseudo-class :link", "Heuristic": ["H1"]}, {"nl": "Gets the reg pcl test result.", "Heuristic": ["H1"]}, {"nl": "Delegates to  {@link #textualDifference textualDifference}.", "Heuristic": ["H1"]}, {"nl": "Set the height of the textarea", "Heuristic": []}, {"nl": "Get a default SSL wrapped TServerSocket bound to the specified port", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.util.Time#getMilliseconds()}.", "Heuristic": ["H1"]}, {"nl": "Creates a new AND subquery.  Make sure to call endSubquery to get return this query. e.g. field:something AND (subquery)", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "TODO: Parcourir utilisations et MAJ selon le cas", "Heuristic": ["H1"]}, {"nl": "Execute INSERT query.", "Heuristic": []}, {"nl": "Required.", "Heuristic": ["H2"]}, {"nl": "Deletes the team object from the user service.", "Heuristic": []}, {"nl": "Sets the test id.", "Heuristic": ["H1"]}, {"nl": "Test case for  {@link S3UnderFileSystem#delete(String,boolean)}.", "Heuristic": ["H1"]}, {"nl": "Gets the fetcher start time stamp.", "Heuristic": []}, {"nl": "Return the host URI, as a string.", "Heuristic": []}, {"nl": "Wait indefinitely (or until underlying socket error) for a netlink message of at most DEFAULT_RECV_BUFSIZE size.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "For caches that do not override  {@link #sizeOf}, this returns the number of entries in the cache. For all other caches, this returns the sum of the sizes of the entries in this cache.", "Heuristic": ["H1"]}, {"nl": "Provide number of ACCEPT (return true) decisions made by this MutationFilter.", "Heuristic": []}, {"nl": "Allocate a port in this range.", "Heuristic": []}, {"nl": "Sets the value of the city property.", "Heuristic": []}, {"nl": "Call back when start loading.", "Heuristic": []}, {"nl": "Write string data.", "Heuristic": []}, {"nl": "Gets local file's owner.", "Heuristic": []}, {"nl": "Info log message.", "Heuristic": []}, {"nl": "Sets the direction.", "Heuristic": []}, {"nl": "Returns a new object with cropped image data. Implementations may keep a reference to the original data rather than a copy. Only callable if isCropSupported() is true.", "Heuristic": []}, {"nl": "get.", "Heuristic": ["H1", "H2"]}, {"nl": "add a metric", "Heuristic": ["H1"]}, {"nl": "Returns the time elapsed since the beginning of the scrolling.", "Heuristic": []}, {"nl": "Returns the test data to use for testing.", "Heuristic": []}, {"nl": "Sets the test id.", "Heuristic": ["H1"]}, {"nl": "Given an index in the range 0...size()-1, sets a new value for the indexth key-value mapping that this SparseArray stores.", "Heuristic": ["H1"]}, {"nl": "Required.", "Heuristic": ["H2"]}, {"nl": "Logs out the user. The implementation removes the User associated with the Subject.", "Heuristic": []}, {"nl": "Tells the camera to stop drawing preview frames.", "Heuristic": []}, {"nl": "Increments the reference count.", "Heuristic": []}, {"nl": "Checks whether the user is a super user or in super group.", "Heuristic": ["H1"]}, {"nl": "Argument will be declared valid.", "Heuristic": []}, {"nl": "We don't have a way to abort a DNS lookup, so this does nothing", "Heuristic": []}, {"nl": "Checks if the action String belongs to an RM protocol message.", "Heuristic": []}, {"nl": "Sets an array of string values in the object.", "Heuristic": []}, {"nl": "Sets the src unique file name.", "Heuristic": []}, {"nl": "Starts the Alluxio master executor.", "Heuristic": ["H1"]}, {"nl": "Find a type by name.", "Heuristic": []}, {"nl": "Tracks connecting to the first proxy.", "Heuristic": []}, {"nl": "Undo the action.", "Heuristic": []}, {"nl": "Checks whether we are testing for regression problems only. Return value is based on the system property \"pmd.regress\".", "Heuristic": ["H1"]}, {"nl": "Add a namespace that will be used for XPath expressions.", "Heuristic": []}, {"nl": "Destroy the service.", "Heuristic": []}, {"nl": "Returns the first value from the set of all values for the given parameter name. If the key passed to this method contains special characters, you MUST first percent encode it using {@link OAuth#percentEncode(String)}, otherwise the lookup will fail (that's because upon storing values in this map, keys get percent-encoded).", "Heuristic": []}, {"nl": "Reads headers or trailers into  {@code out}.", "Heuristic": ["H1"]}, {"nl": "Stores an integer at the specified offset  of the specified block. The method first obtains an XLock on the block. It then reads the current value at that offset, puts it into an update log record, and  writes that record to the log. Finally, it calls the buffer to store the value, passing in the LSN of the log record and the transaction's id.", "Heuristic": ["H1"]}, {"nl": "Builds a thread-safe map. This method does not alter the state of this  {@code MapMaker}instance, so it can be invoked again to create multiple independent maps. The bulk operations  {@code putAll},  {@code equals}, and  {@code clear} are not guaranteed tobe performed atomically on the returned map. Additionally,  {@code size} and{@code containsValue} are implemented as bulk read operations, and thus may fail to observeconcurrent writes.", "Heuristic": ["H1"]}, {"nl": "Gets the optional link to the page  describing the error in detail", "Heuristic": ["H1"]}, {"nl": "Set the product version number", "Heuristic": []}, {"nl": "Checks if a string is null or empty.", "Heuristic": []}, {"nl": "Returns the last element of the path returned by  {@link DeterministicKey#getChildNumberPath()}", "Heuristic": ["H1"]}, {"nl": "This implementation delegates to  {@link #equals(Object)}, per the Saxon documentation's description of this method's behavior. {@inheritDoc}", "Heuristic": ["H1"]}, {"nl": "Get the referenced revision in A.", "Heuristic": []}, {"nl": "Adds a validation pattern and stores it against the provided key. Throws an IllegalArgumentException if pattern key or pattern is empty, or if a pattern exists for the given key", "Heuristic": []}, {"nl": "Gets the OPENID_SESSION_TIMEOUT value for the OpenID provider", "Heuristic": ["H1"]}, {"nl": "Returns the string value of the specified field. The value is obtained from whichever scan contains the field.", "Heuristic": []}, {"nl": "Convert a list of cookies into a string suitable for sending as a \"Cookie:\" header", "Heuristic": []}, {"nl": "get the age of this sent ack sequence number", "Heuristic": ["H1"]}, {"nl": "Returns the volume as a string representation of an integer between 0 and 100.", "Heuristic": []}, {"nl": "Writes  {@code other} into this. If any setting is populated by this and{@code other}, the value and flags from  {@code other} will be kept.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the responseType property.", "Heuristic": []}, {"nl": "Gets the value of the secret property.", "Heuristic": []}, {"nl": "Returns the index of checksum separator char in specified NMEA sentence. If separator is not found, returns the String length.", "Heuristic": ["H1"]}, {"nl": "Return the full URL (including protocol, host, port, context path, servlet path) for the context path.", "Heuristic": []}, {"nl": "Generates a random alphanumeric string of the given length.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "return the vertical position of this ball", "Heuristic": ["H1"]}, {"nl": "Tell the parse state that an inner classifier is found.", "Heuristic": []}, {"nl": "Create common MERGE query.", "Heuristic": []}, {"nl": "Stores the given reason phrase, by status code. Helper method to initialize the static lookup table.", "Heuristic": []}, {"nl": "Registers agent applications and console program demos.", "Heuristic": []}, {"nl": "Tests that a write lock can't be taken while a read lock is held.", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link ParameterMetaData }", "Heuristic": ["H1"]}, {"nl": "Sets bit i.", "Heuristic": []}, {"nl": "Get authorized roles", "Heuristic": []}, {"nl": "Returns the schema of the join, which is the union of the schemas of the underlying queries.", "Heuristic": []}, {"nl": "Select a class diagram as the current diagram, creating it if necessary.", "Heuristic": []}, {"nl": "Get file status.", "Heuristic": []}, {"nl": "Gets the applink url.", "Heuristic": ["H1"]}, {"nl": "Find an attribute or text node representing an absolute or relative link and convert it to URI", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets the value of the intNoDefault property.", "Heuristic": []}, {"nl": "Return if machine is running under Unix/Linux", "Heuristic": []}, {"nl": "Clear history.", "Heuristic": ["H2"]}, {"nl": "Flushes the header, data and samples from the dataStore.", "Heuristic": []}, {"nl": "Returns the items as a populated set.", "Heuristic": []}, {"nl": "Checks if ancestor-Element is an ancestor of maybeChild Element", "Heuristic": []}, {"nl": "Set the String corresponding to the signature Properties class", "Heuristic": []}, {"nl": "Initialize the Model subsystem with the default ModelImplementation.", "Heuristic": []}, {"nl": "Adds all elements from c into this set.", "Heuristic": []}, {"nl": "Generates a deterministic temporary file name for the a path and a file id and a nonce.", "Heuristic": ["H1"]}, {"nl": "Implements BundleActivator.stop(). Does nothing since the framework will automatically unregister any registered services.", "Heuristic": []}, {"nl": "Prepare an item view for use. See AdapterView for the basic idea at work here. This may require creating a new item view, but well-behaved implementations will re-use the view passed as convertView if present. The returned view will be populated with data from the item parameter.", "Heuristic": []}, {"nl": "Sets the character stream of the lexical analyzer.", "Heuristic": []}, {"nl": "Description of the Method", "Heuristic": []}, {"nl": "Sets the uri pointing to a client logo image. At the moment it must be a relative URI", "Heuristic": ["H1"]}, {"nl": "Send a WARN log message.", "Heuristic": []}, {"nl": "Getter for a  {@link ResourceTypeHandler} for a specified string.", "Heuristic": ["H1"]}, {"nl": "Reduces the list of commits to those since the specified date.", "Heuristic": []}, {"nl": "Creates an instance of  {@link EntityDeserializer} with the{@link LaxContentLengthStrategy} implementation to be used forde-serializing entities received over this connection.  This method can be overridden in a super class in order to create instances of  {@link EntityDeserializer} using a custom{@link ContentLengthStrategy}.", "Heuristic": ["H1"]}, {"nl": "Checks if this entry is a directory.", "Heuristic": []}, {"nl": "Remove a listener from reader. When removed, listener will not receive any events from the reader.", "Heuristic": []}, {"nl": "Set whether to cache some values.  By default, the engine will cache the results of Class.getMethods() and similar calls. This can speed execution dramatically, but increases the memory footprint. Also, with caching enabled, references may be held to objects past the lifetime of any real usage.  If caching is enabled and this method is called with a false argument, the caches will be emptied.  Caching is enabled by default.", "Heuristic": ["H1"]}, {"nl": "Pass binary data to the listener.", "Heuristic": []}, {"nl": "object end.", "Heuristic": ["H1", "H2"]}, {"nl": "value.", "Heuristic": ["H1", "H2"]}, {"nl": "Sends an accessibility event of the given type. If accessibility is not enabled this method has no effect.  The default implementation behaves as  {@link View#sendAccessibilityEvent(int) View#sendAccessibilityEvent(int)} for the case of no accessibility delegatebeen set. ", "Heuristic": ["H1"]}, {"nl": "Sets the value of the name property.", "Heuristic": []}, {"nl": "Returns a flush counter that includes both specified counters. Either counter can be {@link #INVALID_FLUSH_COUNTER}.", "Heuristic": []}, {"nl": "Returns the number of blocks in the specified file. This method first obtains an SLock on the  \"end of the file\", before asking the file manager to return the file size.", "Heuristic": ["H1"]}, {"nl": "Remove a complete Notation language. This is to be used by plugins that implement their own notation, and that are removed.  This function fails if the given notation does not exist.", "Heuristic": []}, {"nl": "Returns the time the origin response was received by the caching module.", "Heuristic": []}, {"nl": "Returns an array of integers that demonstrate the bug in TimSort", "Heuristic": []}, {"nl": "Get the default namespace (first in the nonempty list)", "Heuristic": []}, {"nl": "It returns the attribute getters", "Heuristic": []}, {"nl": "Generates (random) password for user to be provisioned", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Sets the src unique file name.", "Heuristic": []}, {"nl": "Returns the given string if it is nonempty;  {@code null} otherwise.", "Heuristic": ["H1"]}, {"nl": " Returns a solver which uses the pseudo inverse.  Useful when a matrix needs to be inverted which is singular.  Two variants of pseudo inverse are provided.  SVD will tend to be the most robust but the slowest and QR decomposition with column pivots will be faster, but less robust.   See  {@link #leastSquaresQrPivot} for additional options specific to QR decomposition basedpseudo inverse.  These options allow for better runtime performance in different situations. ", "Heuristic": ["H1"]}, {"nl": "For Hessian 2.0, use the Header envelope instead", "Heuristic": []}, {"nl": "Closes a file in the under file system which was opened for reading. The ufs id will be invalid after this call.", "Heuristic": ["H1"]}, {"nl": "Fills 'dst' with bytes from 'in', throwing EOFException if insufficient bytes are available.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.MWVParser#setAngle(double)}.", "Heuristic": ["H1"]}, {"nl": "Sets up text bot so that notifications can be sent.", "Heuristic": []}, {"nl": "Gets the value of the item property.  This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a set method for the item property.  For example, to add a new item, do as follows:  getItem().add(newItem);   Objects of the following type(s) are allowed in the list {@link primer.Items.Item }", "Heuristic": ["H1"]}, {"nl": "Return the difference in days between now and the date.", "Heuristic": []}, {"nl": "Tests the  {@link PathUtils#uniqPath()} method.", "Heuristic": ["H1"]}, {"nl": "Return a file object for the output of the source file in the given package.", "Heuristic": []}, {"nl": "Returns the SSID of the wifi connection, or null if there is no wifi.", "Heuristic": ["H1"]}, {"nl": "Get the JRE version described in system properties", "Heuristic": []}, {"nl": "Dispose missing image if created.", "Heuristic": []}, {"nl": "Sets small buffer sizes so that Alluxio does not run out of heap space.", "Heuristic": ["H1"]}, {"nl": "Is the given schema definition valid?", "Heuristic": []}, {"nl": "Tests the  {@link StorageDirView#getAvailableBytes()} method.", "Heuristic": ["H1"]}, {"nl": "Gets an increasing sequence of bytes starting at zero.", "Heuristic": []}, {"nl": "Returns the request validator class name", "Heuristic": []}, {"nl": "Tests the  {@link DataFileChannel#getLength()} method.", "Heuristic": ["H1"]}, {"nl": "Write a group end tag.", "Heuristic": []}, {"nl": "Returns the numeric value of a configuration property.", "Heuristic": []}, {"nl": "Takes and rotates the it 90 degrees", "Heuristic": ["H1"]}, {"nl": "Returns the adapter position of the last fully visible view. This position does not include adapter changes that were dispatched after the last layout pass.", "Heuristic": []}, {"nl": "Tests getting and setting fields.", "Heuristic": []}, {"nl": "Appends a string to a specified  {@link ByteBuffer}. This method assumes ascii encoding and is primarily used for encoding http header names and values. Note that encoding header values this way is not stricly correct (character encodings). However, existing containers do it this way (e.g. Tomcat), and we're probably safer doing it a similar way for the time being", "Heuristic": ["H1"]}, {"nl": "Updates the runtime settings.", "Heuristic": []}, {"nl": "play counter", "Heuristic": ["H1", "H2"]}, {"nl": "Used to create a customized instance of UnsupportedOperationException. The caller of this method is intended to throw the exception.", "Heuristic": []}, {"nl": "Returns the temporary password of the created account", "Heuristic": []}, {"nl": "Must be called un unbind the  {@link Vista} and let the {@link Presenter} know that muststop updating the  {@code Vista}. Normally this method will be called from {@link Activity#onStop()} or from {@link Fragment#onStop()}.", "Heuristic": ["H1"]}, {"nl": "This takes a single module as an argument, and registers it into the mods internal list This is required to make the module actually work as a module in any modular armor.", "Heuristic": []}, {"nl": "Determine whether the TaskInfo array is built over time. Set this to \"false\" when using a StopWatch for millions of intervals, or the task info structure will consume excessive memory. Default is \"true\".", "Heuristic": []}, {"nl": "Sets the power.", "Heuristic": []}, {"nl": "Produces random decimal value within specified range", "Heuristic": []}, {"nl": "Convert a coordinator application list into a JSONArray.", "Heuristic": []}, {"nl": "Creates an instance of  {@link EntityDeserializer} with the{@link LaxContentLengthStrategy} implementation to be used forde-serializing entities received over this connection.  This method can be overridden in a super class in order to create instances of  {@link EntityDeserializer} using a custom{@link ContentLengthStrategy}.", "Heuristic": ["H1"]}, {"nl": "Sets additional token parameters", "Heuristic": []}, {"nl": "Sets up the buffer before a test runs.", "Heuristic": []}, {"nl": "Sets the name of the group that will be created.", "Heuristic": []}, {"nl": "Gets the reg pcl test result details.", "Heuristic": ["H1"]}, {"nl": "Returns a testnet params modified to allow any difficulty target.", "Heuristic": ["H1"]}, {"nl": "Load 4 bytes from the provided array at the indicated offset.", "Heuristic": []}, {"nl": "Not-null value.", "Heuristic": ["H2"]}, {"nl": "WrapperClassOutInterceptor may call this if the wrapper class needs to be validated. Implementations may choose to ignore this as the SchemaValidation that occurs later may catch the errors, but this allows quicker failures if the databinding  can support it.", "Heuristic": ["H1"]}, {"nl": "Gets all the headers with the given name that were on the origin response.", "Heuristic": []}, {"nl": "Detroy this  {@link Servlet} instance.", "Heuristic": ["H1"]}, {"nl": "Sets the SharedContext for rendering.", "Heuristic": []}, {"nl": "The position of the \"dot\" -- this indicates the part of the production that the marker is before, so 0 indicates a dot at the beginning of the RHS.", "Heuristic": []}, {"nl": "Determine if the set is empty.", "Heuristic": []}, {"nl": "Convert a passed byte string (e.g. 50b, 100k, or 250m) to kibibytes for internal use. If no suffix is provided, the passed number is assumed to be in kibibytes.", "Heuristic": ["H1"]}, {"nl": "Returns the number of times  {@link #put} was called.", "Heuristic": ["H1"]}, {"nl": "Set a new (default) TTL value in seconds", "Heuristic": []}, {"nl": "get a spring by name", "Heuristic": ["H1"]}, {"nl": "Gets the comments.", "Heuristic": []}, {"nl": "Restricts the visibilities covered by the mask to the parameters.", "Heuristic": ["H1"]}, {"nl": "Creates a  {@code CollectorTester} for the specified {@code Collector}. The result of the  {@code Collector} will be compared to the expected value using {@link Object.equals}.", "Heuristic": ["H1"]}, {"nl": "Returns the wrapped, 'dead' event, which the system was unable to deliver to any registered subscriber.", "Heuristic": []}, {"nl": "Returns whether the scroller has finished scrolling.", "Heuristic": ["H1"]}, {"nl": "Returns the equivalent  {@code java.util.Optional} value to the given {@code com.google.common.base.Optional}, or  {@code null} if the argument is null.If  {@code googleOptional} is known to be non-null, use {@code googleOptional.toJavaUtil()}instead. Unfortunately, the method reference  {@code Optional::toJavaUtil} will not work, because itcould refer to either the static or instance version of this method. Write out the lambda expression  {@code o -> Optional.toJavaUtil(o)} instead.", "Heuristic": ["H1"]}, {"nl": "The same as above, but specifically for Google Product Search.", "Heuristic": []}, {"nl": "Get all commits for the specified repository:branch that are in the cache.", "Heuristic": []}, {"nl": "Get the high level changes (renaming).", "Heuristic": []}, {"nl": "read (but NOT remove) the first entry in the loss list", "Heuristic": ["H1"]}, {"nl": "Return the public interface of the service.", "Heuristic": []}, {"nl": "Add mapping between Uri path and SQL which represent one of more (using INNER JOIN or LEFT OUTER JOIN) tables.", "Heuristic": ["H1"]}, {"nl": "Builds a Label according to the specified parameters, encapsulating its initialization.", "Heuristic": []}, {"nl": "Get the string-encoded value of this access token.", "Heuristic": []}, {"nl": "Returns the number of times  {@link #create(Object)} returned a value.", "Heuristic": ["H1"]}, {"nl": "Returns true if both of the term's expressions apply to the specified schema.", "Heuristic": []}, {"nl": "Gets warnings (if triggered).", "Heuristic": []}, {"nl": "Returns the access token the client is using now during the current request", "Heuristic": []}, {"nl": "Retrieves an integer field from the stream.", "Heuristic": []}, {"nl": "Update the security question", "Heuristic": []}, {"nl": "Encodes a byte array into Base64 format. No blanks or line breaks are inserted in the output.", "Heuristic": []}, {"nl": "Extends the tree by calculating the requested child for the given path. For example, to get the key at position 1/2/3 you would pass 1/2 as the parent path and 3 as the child number.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.GLLParser#setDataStatus(DataStatus)}.", "Heuristic": ["H1"]}, {"nl": "Gets the right column.", "Heuristic": []}, {"nl": "Specifies that the current interceptor needs to be added to the  interceptor chain before the specified collection of interceptors.  This method replaces any existing list with the provided list.", "Heuristic": ["H1"]}, {"nl": "Returns the 3-digit code associated with this warning.", "Heuristic": []}, {"nl": "Using the enemylist function above, find the number fo enemies in the vicinity of the referenced mob.", "Heuristic": ["H1"]}, {"nl": "Set a default padding (left/top/right/bottom) for this node.", "Heuristic": []}, {"nl": "Gets the value of the pass property.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "get long preferences", "Heuristic": ["H1"]}, {"nl": "Releases the underlying buffer of previous/current read response.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMCParser#setSpeed(double)} .", "Heuristic": ["H1"]}, {"nl": "Add a parameter to the set of query params", "Heuristic": ["H1"]}, {"nl": "Tests getting and setting fields.", "Heuristic": []}, {"nl": "Tests if the block is pinned.", "Heuristic": []}, {"nl": "Gets the value of the quantity property.", "Heuristic": []}, {"nl": "Renders the XML file as a PDF file at the target location.", "Heuristic": []}, {"nl": "post-order traversal for binary search tree", "Heuristic": ["H1"]}, {"nl": "Creates another directory on the local filesystem, alongside the existing Ufs, to be used as a second Ufs.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#setName()} .", "Heuristic": ["H1"]}, {"nl": "Gets the value of the tCiD property.", "Heuristic": []}, {"nl": "Strips the prefix from the key if it is present. For example, for input key ufs://my-bucket-name/my-key/file and prefix ufs://my-bucket-name/, the output would be my-key/file. This method will leave keys without a prefix unaltered, ie. my-key/file returns my-key/file.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "add key-value pair to map, both key and value need not null", "Heuristic": ["H1"]}, {"nl": "Prints information of the test result.", "Heuristic": []}, {"nl": "Returns the number of blocks in the specified file.", "Heuristic": []}, {"nl": "Puts a new value in the property table with the appropriate flags", "Heuristic": []}, {"nl": "Sets the user ID or user name the request will be sent to. If this is not specified, a friend selector will be displayed and the user can select up to 50 friends.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the parametersMetaData property.", "Heuristic": ["H1"]}, {"nl": "Convert a passed byte string (e.g. 50b, 100k, or 250m) to mebibytes for internal use. If no suffix is provided, the passed number is assumed to be in mebibytes.", "Heuristic": ["H1"]}, {"nl": "Deletes all URLSet objects from the database. Should be used for development and testing, not production.", "Heuristic": []}, {"nl": "get boolean value.", "Heuristic": ["H1"]}, {"nl": "Return the peak memory used so far, in bytes.", "Heuristic": []}, {"nl": "Directly injects a context into the class, so we don't need to open  any more XML files.", "Heuristic": ["H1"]}, {"nl": "Removes the generator associated with the specified language.", "Heuristic": []}, {"nl": "Sets the fontMapping attribute of the FontResolver object", "Heuristic": []}, {"nl": "Set the Msg value.", "Heuristic": []}, {"nl": "Hash code of the byte array as calculated by  {@link Arrays#hashCode()}. Note the difference between a SHA256 secure bytes and the type of quick/dirty bytes used by the Java hashCode method which is designed for use in bytes tables.", "Heuristic": ["H1"]}, {"nl": "Returns a supplier that always supplies  {@code instance}.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.SentenceFactory#registerParser(java.lang.String,java.lang.Class)}.", "Heuristic": ["H1"]}, {"nl": "How much time in seconds is supposed to pass between \"interval\" blocks. If the actual elapsed time is significantly different from this value, the network difficulty formula will produce a different value. Both test and production Bitcoin networks use 2 weeks (1209600 seconds).", "Heuristic": []}, {"nl": "Indicates that the loading of Unsafe was successful and the load and store operations will be very efficient. May be useful for calling code to fall back on an alternative implementation that is slower than Unsafe.get/store but faster than the pure-Java mask-and-shift.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Writes the given character sequence to this sink.", "Heuristic": []}, {"nl": "Returns the  {@link Address} of this route.", "Heuristic": ["H1"]}, {"nl": "Not supported. This method is used to get the Counter value.", "Heuristic": []}, {"nl": "Calls thru to { {@link #createJettyHTTPServerEngine(String,int,String)} with a 'null' host value", "Heuristic": ["H1"]}, {"nl": "The value which this Transaction output holds", "Heuristic": []}, {"nl": "Returns true if the buffer is currently pinned (that is, if it has a nonzero pin count).", "Heuristic": []}, {"nl": "Retrieves the publicKey", "Heuristic": []}, {"nl": "Acquires a block master client resource from the block master client pool. The resource is {@code Closeable}.", "Heuristic": []}, {"nl": "Stop the service. This method is invoked on the execution thread. By default this method does nothing.", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link BrowseOffersResponse.Return.OfferData.Seo }", "Heuristic": ["H1"]}, {"nl": "Activate clean up task.", "Heuristic": []}, {"nl": "Gets the name;", "Heuristic": []}, {"nl": "the CSS condition [attribute|=value]", "Heuristic": ["H1"]}, {"nl": "Create a new LastLocationFinder instance", "Heuristic": []}, {"nl": "Renders the XML file as an image file at the target location. Width must be provided, height is determined automatically based on content and CSS.", "Heuristic": []}, {"nl": "Test if precomputed file exists", "Heuristic": []}, {"nl": "Gets the Nucleotide start.", "Heuristic": []}, {"nl": "If this chunk is a single byte of non-pushdata content (could be OP_RESERVED or some invalid Opcode)", "Heuristic": ["H1"]}, {"nl": "Called after a cache miss to compute a value for the corresponding key. Returns the computed value or null if no value can be computed. The default implementation returns null. The method is called without synchronization: other threads may access the cache while this method is executing. If a value for  {@code key} exists in the cache when this methodreturns, the created value will be released with  {@link #entryRemoved}and discarded. This can occur when multiple threads request the same key at the same time (causing multiple values to be created), or when one thread calls  {@link #put} while another is creating a value for the samekey.", "Heuristic": ["H1"]}, {"nl": "Returns the connection identifier associated with a session.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.HDGParser#HDGParser(java.lang.String)}.", "Heuristic": ["H1"]}, {"nl": "Checks whether the parameter is a valid IPv4 address", "Heuristic": []}, {"nl": "return session factory", "Heuristic": ["H1"]}, {"nl": "Test of getDeviceName method, of class Device.", "Heuristic": []}, {"nl": "Gets Entrez Gene Id.", "Heuristic": ["H1"]}, {"nl": "Validate the incoming request for mandatory parameters.", "Heuristic": []}, {"nl": "Test for password protectedness.", "Heuristic": ["H1"]}, {"nl": "Same as  {@link #elementP} but runs faster by not mitigating overflow/underflow related problems.", "Heuristic": ["H1"]}, {"nl": "Gets the first child of the SOAP Body from an XML String. This does exactly the same as getBodyChildWithXPath but it demonstrates the power of WS-Attackers SoapUtilities.", "Heuristic": ["H1"]}, {"nl": "Gets the \"best\" default sample set.", "Heuristic": []}, {"nl": "save old revision information of Graph", "Heuristic": ["H1"]}, {"nl": "Add XMPP settings.", "Heuristic": []}, {"nl": "Tells if this  {@link AlluxioURI} has scheme or not.", "Heuristic": ["H1"]}, {"nl": "Tracks the change type for the specified ref.", "Heuristic": []}, {"nl": "Formats time elapsed since the given start time (in milliseconds).", "Heuristic": []}, {"nl": "Removes all key-value mappings from this SparseArray.", "Heuristic": []}, {"nl": "Computes the likelihood of the random draw", "Heuristic": []}, {"nl": "Stops this class from continuing to send keep alive messages to the  server.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the templateName property.", "Heuristic": []}, {"nl": "Gets the value of the return property.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Add a long field to the stream. \\param value The long value to be added.", "Heuristic": ["H1"]}, {"nl": "Return JAXB object representing first match of xpathExpr over  {@link getDocument()}", "Heuristic": ["H1"]}, {"nl": "Writes a string to the specified offset on the page.", "Heuristic": []}, {"nl": "Tests the  {@link FileUtils#move(String,String)} method to thrown an exception when trying tomove a non-existent file.", "Heuristic": ["H1"]}, {"nl": "get current time in milliseconds, format is  {@link #DEFAULT_DATE_FORMAT}", "Heuristic": ["H1"]}, {"nl": "Returns the greatest value present in  {@code array}.", "Heuristic": ["H1"]}, {"nl": "is integer string.", "Heuristic": ["H1"]}, {"nl": "Returns the recommended minimum error correction level as described in annex E of ISO/IEC 15438:2001(E).", "Heuristic": []}, {"nl": "Marshal the elements from the given enumeration into an array of the given type. Enumeration elements must be assignable to the type of the given array. The array returned will be a different instance than the array given.", "Heuristic": []}, {"nl": "Returns the location one unit right of this location.", "Heuristic": []}, {"nl": "To be called from the controlling view's onKeyUp handler", "Heuristic": []}, {"nl": "Test method for deletePersistentNotification(ServerSession serverSession, ServerMessage serverMessage) Verifies that  {@code IllegalArgumentException} is thrown when serverMessage is null.", "Heuristic": ["H1"]}, {"nl": "Creates a DecimalType by specifying the precision and scale.", "Heuristic": []}, {"nl": "Writes a specific integer value (4 bytes) to the output stream.", "Heuristic": []}, {"nl": "Specify whether or not source information should be generated.  Without source information, evaluating the \"toString\" method on JavaScript functions produces only \"[native code]\" for the body of the function. Note that code generated without source is not fully ECMA conformant.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RTEParser#getRouteId()}.", "Heuristic": ["H1"]}, {"nl": "Clear the hashmap.", "Heuristic": ["H1"]}, {"nl": "GET  /activate -> activate the registered user.", "Heuristic": ["H1"]}, {"nl": "Sets owner bits.", "Heuristic": []}, {"nl": "Removes the last n items of the array all at once.", "Heuristic": []}, {"nl": "Gets the value of the isInputDataRequired property.", "Heuristic": ["H1"]}, {"nl": "Get a short description of this endpoint suitable for inclusion in log messages.", "Heuristic": []}, {"nl": "Create an instance of  {@link JAXBElement }{@code }}", "Heuristic": ["H1"]}, {"nl": "Gets the error msg.", "Heuristic": []}, {"nl": "Reads a specific integer byte value (4 bytes) from the input byte buffer at the given offset.", "Heuristic": []}, {"nl": "Checks to see if it is a valid Method which can be checked", "Heuristic": []}, {"nl": "Writes characters from the specified string followed by a line delimiter to this session buffer.  This method uses CR-LF as a line delimiter.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets the value of the displayName property.  This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a set method for the displayName property.  For example, to add a new item, do as follows:  getDisplayName().add(newItem);   Objects of the following type(s) are allowed in the list  {@link DisplayNameType }", "Heuristic": ["H1"]}, {"nl": "Adds the given chunk to the end of the program", "Heuristic": []}, {"nl": "Creates an Interacton Key.", "Heuristic": ["H1"]}, {"nl": "Test for distanceTo()", "Heuristic": []}, {"nl": "Get month, valid values are 1-12 where 1 denotes January, 2 denotes February etc.", "Heuristic": []}, {"nl": "Returns the confirmation code for the created account", "Heuristic": []}, {"nl": "Finds a NotationName matching the language with no version. Returns null if no match.", "Heuristic": []}, {"nl": "A factory method to build the appropriate LuminanceSource object based on the format of the preview buffers, as described by Camera.Parameters.", "Heuristic": ["H1"]}, {"nl": "Get the deletion difference.", "Heuristic": []}, {"nl": "reverse linked list recursive", "Heuristic": ["H1"]}, {"nl": "Assert that  {@code superType.isAssignableFrom(subType)} is {@code true}. Assert.isAssignable(Number.class, myClass);", "Heuristic": ["H1"]}, {"nl": "Tells it to process the submatrix at the next split.  Should be called after the current submatrix has been processed.", "Heuristic": ["H1"]}, {"nl": "Returns the underlying decomposition that this is a wrapper around.", "Heuristic": []}, {"nl": "Clear the difference model.", "Heuristic": []}, {"nl": "Returns true if this push contains a non-fastforward ref update.", "Heuristic": ["H1"]}, {"nl": "Test method for  {@link ActivityController#handleEvent(org.osgi.service.event.Event)}Verifies that  {@code IllegalArgumentException} is thrown when {@code Event}'s  {@link AcitivityEvent#USER_ID_KEY} property isnull.", "Heuristic": ["H1"]}, {"nl": "Get the server principal password for kerberos authentication", "Heuristic": ["H1"]}, {"nl": "Diagonal elements of the diagonal D matrix.", "Heuristic": []}, {"nl": "Writes a rollback record to the log, and flushes it to disk.", "Heuristic": []}, {"nl": "Build a criteria set suitable for input to the trust engine.", "Heuristic": ["H1"]}, {"nl": "Return method returning url connection.", "Heuristic": ["H1"]}, {"nl": "Remove a particular session", "Heuristic": []}, {"nl": "Singleton method", "Heuristic": ["H2"]}, {"nl": "Set Application management service implementation", "Heuristic": []}, {"nl": "Reads the setting from the options hash. If it is nil or undefined, returns the default value given. If not, ensures it is a RubyClass instance and shares the same allocator as the default value (i.e. for the basic types which have their specific allocators, this ensures the passed value is a subclass of them).", "Heuristic": []}, {"nl": "Waits for the event queue of JavaFX Application Thread to be completed, as well as any new events triggered in it.", "Heuristic": []}, {"nl": "A function equivalent to the method reference  {@code Object::toString}, for users not yet using Java 8. The function simply invokes  {@code toString} on its argument and returns the result. Itthrows a  {@link NullPointerException} on null input.Warning: The returned function may not be consistent with equals (as documented at  {@link Function#apply}). For example, this function yields different results for the two equal instances  {@code ImmutableSet.of(1, 2)} and {@code ImmutableSet.of(2, 1)}. Warning: as with all function types in this package, avoid depending on the specific {@code equals},  {@code hashCode} or {@code toString} behavior of the returned function. Afuture migration to  {@code java.util.function} will not preserve this behavior.For Java 8 users: use the method reference  {@code Object::toString} instead. In thefuture, when this class requires Java 8, this method will be deprecated. See  {@link Function}for more important information about the Java 8 transition.", "Heuristic": ["H1"]}, {"nl": "Returns all map ways which intersect the specified bounding box.", "Heuristic": []}, {"nl": "Prints the name of all the panels of your stack.", "Heuristic": []}, {"nl": "Returns the html version of the plain source text.", "Heuristic": ["H1"]}, {"nl": "Get one dish by id.", "Heuristic": ["H1"]}, {"nl": "Returns the naive similarity score.", "Heuristic": []}, {"nl": "Sets up the configuration and callback handler before running a test.", "Heuristic": []}, {"nl": "Sets the feed id.", "Heuristic": ["H1"]}, {"nl": "the CSS condition that element has pseudo-class :first-child", "Heuristic": ["H1"]}, {"nl": "Returns the tables mentioned in the from clause.", "Heuristic": ["H1"]}, {"nl": "Gets the permission description", "Heuristic": []}, {"nl": "booleans.", "Heuristic": ["H1", "H2"]}, {"nl": "Set the list of endpoint addresses that correspond to this service", "Heuristic": []}, {"nl": "Returns true if the resource addressed by this qualified name is an operation.", "Heuristic": []}, {"nl": "clear and destroy one  {@link ReferenceConfig} in the cache.", "Heuristic": ["H1"]}, {"nl": "Find number of occurrence of given number in sorted array", "Heuristic": []}, {"nl": "Description:", "Heuristic": ["H2"]}, {"nl": "Gets the ObjectType used to read and write the trailing block instances.", "Heuristic": []}, {"nl": "HTTPS is the default transport for OAuth 2.0 services, this property  can be used to block all the requests issued over HTTP", "Heuristic": ["H1"]}, {"nl": "Sets the value of the value property.", "Heuristic": []}, {"nl": "TODO: Use the following function to have a dropdown set of tools:  ToolBarFactory.addItemsToToolBar(buttonPanel, actions, true);  Instead, this temporary solution:", "Heuristic": ["H1", "H4"]}, {"nl": "Indicates whether this pool is unused. A pool is unused if there is neither an entry nor a waiting thread. All entries count, not only the free but also the allocated ones.", "Heuristic": []}, {"nl": "Runs the given  {@link Runnable} on a new {@link Thread} and returns a {@link Future} thatis set on finish or error.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Produce a JSONArray of JSONObjects from a comma delimited text string using a supplied JSONArray as the source of element names.", "Heuristic": []}, {"nl": "Atomically adds the given value to the element at index  {@code i}.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the value property.", "Heuristic": []}, {"nl": "Returns the real path of the given URI string. If the given URI string represents a content:// URI, the real path is retrieved from the media store.", "Heuristic": []}, {"nl": "Test for the  {@link HadoopUtils#getPathWithoutScheme(Path)} method.", "Heuristic": ["H1"]}, {"nl": "Set the HTTP status code of the response.", "Heuristic": []}, {"nl": "Test whether the event may have been caused by the stylus", "Heuristic": []}, {"nl": "Constructs a product plan of the specified plan and this table.", "Heuristic": []}, {"nl": "Return a float value within the range. This is just a wrapper for Math.min() and Math.max(). This may be useful if you feel it confusing (\"Which is min and which is max?\").", "Heuristic": []}, {"nl": "Sets the element at position  {@code i} to the given value.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets the references for all discovered JAX-RS resources", "Heuristic": ["H1"]}, {"nl": "Get the list of additional client properties", "Heuristic": []}, {"nl": "Get the total number of days since January 1, 1800", "Heuristic": []}, {"nl": "Format a Date in RFC822 GMT.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns a numeric value for the outcome of the game. In chess, the outcome is a win, loss, or draw, which we can represent by the value +1, -1, or 0. Some games have a wider variety of possible outcomes; for example, the payoffs in backgammon range from + 192 to -192.", "Heuristic": []}, {"nl": "Resets the references for streaming.", "Heuristic": []}, {"nl": "Commits the current transaction. Flushes all modified buffers (and their log records), writes and flushes a commit record to the log, releases all locks, and unpins any pinned buffers.", "Heuristic": []}, {"nl": "New Running Thread Method for the schedule threads updates the running ID and gives the new ID as return", "Heuristic": []}, {"nl": "Asserts that a Unicode escaper does not escape the given character.", "Heuristic": []}, {"nl": "Determines if an item in the list should have a header that is different than the item in the list that immediately precedes it. Items with no headers will always return false.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the country property.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets an array of string values out of the object.", "Heuristic": []}, {"nl": "Tests that an exception is thrown when the  {@link DataNettyBuffer#release()} method fails witha reference count of two netty buffers.", "Heuristic": ["H1"]}, {"nl": "Get a features from the current classifier not yet modeled.", "Heuristic": ["H1"]}, {"nl": "Construct a new  {@code Proxy} instance from the given policy.", "Heuristic": ["H1"]}, {"nl": "Argument will be declared valid.", "Heuristic": []}, {"nl": "Return whether o is structurally equivalent to o. Implementations should override equalsImpl().", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns the new id of a ref", "Heuristic": ["H1"]}, {"nl": "See if it can handle very small values and not blow up.  This can some times cause a zero to appear unexpectedly and thus a divided by zero.", "Heuristic": ["H1"]}, {"nl": "Test of removeCapability method, of class Device.", "Heuristic": []}, {"nl": "Produce a JSONArray of JSONObjects from a comma delimited text string, using the first row as a source of names.", "Heuristic": []}, {"nl": "If a user agent (web browser) presents this cookie to a user, the cookie's purpose will be described using this comment.", "Heuristic": []}, {"nl": "Required.", "Heuristic": ["H2"]}, {"nl": "Getter for the UserFilesPath. Method is used by other handlers only!", "Heuristic": []}, {"nl": "return a duplication of requestBuf, so that requestBuf will not be modified by others.", "Heuristic": ["H1"]}, {"nl": "Adds the given values to the dataset.", "Heuristic": []}, {"nl": "Gets the feed id.", "Heuristic": ["H1"]}, {"nl": "Splits the log line into timestamp, logLevel and remaining log message. Returns array containing logLevel and logMessage if the pattern matches i.e A new log statement, else returns null.", "Heuristic": []}, {"nl": "Tests that building a  {@link DeleteLineageOptions} with the defaults works.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the id property.", "Heuristic": ["H1"]}, {"nl": "Tests if the directory is include directory.", "Heuristic": ["H1"]}, {"nl": "Gets the integer value of the specified field. If the field is a group field, then its value can be obtained from the saved group value. Otherwise, the value is obtained from the appropriate aggregation function.", "Heuristic": []}, {"nl": "Return the app deployment id.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link RPCFileWriteRequest#encode(ByteBuf)} and{@link RPCFileWriteRequest#decode(ByteBuf)} methods.", "Heuristic": ["H1"]}, {"nl": "Gets the error msg.", "Heuristic": []}, {"nl": "Alias for TestNet2Params.get(), use that instead.", "Heuristic": []}, {"nl": "For caches that do not override  {@link #sizeOf}, this returns the maximum number of entries in the cache. For all other caches, this returns the maximum sum of the sizes of the entries in this cache.", "Heuristic": ["H1"]}, {"nl": "Decode an image using the hints provided. Does not honor existing state.", "Heuristic": []}, {"nl": "Return the  {@code Source} associated with the {@code SourceJob} returned by {@code sourceJob}.", "Heuristic": ["H1"]}, {"nl": "Toggle the visibility of the system UI.", "Heuristic": []}, {"nl": "Parse a string into a  {@code TypeNode} AST node,applying substitutions.", "Heuristic": ["H1"]}, {"nl": "Sets the value", "Heuristic": []}, {"nl": "Gets the value of the certificateCredentials property.", "Heuristic": []}, {"nl": "Get properties. We return an empty array since we define all properties to be DONTENUM.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the stepResult property.", "Heuristic": []}, {"nl": "Returns the underlying decomposition that this is a wrapper around.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMCParser#getDirectionOfVariation()}.", "Heuristic": ["H1"]}, {"nl": "Returns purchase information for a given product, or null if there is no purchase.", "Heuristic": []}, {"nl": "Generates a number in [0, 2^numBits) with an exponential distribution. The floor of the log2 of the result is chosen uniformly at random in [0, numBits), and then the result is chosen in that range uniformly at random. Zero is treated as having log2 == 0.", "Heuristic": ["H1"]}, {"nl": "Factory method, responsible for creating an input stream for a specified file.", "Heuristic": []}, {"nl": "Returns the value of the field of the current data record.", "Heuristic": []}, {"nl": "Clears all the metadata that has been set since the MetadataEditor instance was created with  {@link android.media.RemoteControlClient#editMetadata(boolean)}.", "Heuristic": ["H1"]}, {"nl": "Verifies that the specified expected result is always produced by collecting the specified inputs, regardless of how the elements are divided.", "Heuristic": []}, {"nl": "Given a tree rooted at  {@code n}, the visitor has the option of overriding all traversal of the children of  {@code n}. If no changes were made to  {@code n} and the visitor wishes to preventfurther traversal of the tree, then it should return  {@code n}. If changes were made to the subtree, then the visitor should return a copy of  {@code n} with appropriate changes.  Finally, if thevisitor does not wish to override traversal of the subtree rooted at {@code n}, then it should return  {@code null}.  The default implementation of this method is to call {@link #override(Node) override(n)}, as most subclasses do not need to know the parent of the node  {@code n}.", "Heuristic": ["H1"]}, {"nl": "Populates a multimap by reading an input stream, as part of deserialization. See  {@link #writeMultimap} for the data format.", "Heuristic": ["H1"]}, {"nl": "Gets the password.", "Heuristic": []}, {"nl": "put value.", "Heuristic": ["H1", "H2"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.util.Date#getYear()}.", "Heuristic": ["H1"]}, {"nl": "Unloads the textures from memory.", "Heuristic": []}, {"nl": "Return the aggregation buffer for the current group. For efficiency, all calls to this method return the same object. If additional memory could not be allocated, then this method will signal an error by returning null.", "Heuristic": []}, {"nl": "Gets the requested bit, where true means black.", "Heuristic": []}, {"nl": " Name of the http header from which the remote ip is extracted.   The value of this header can be comma delimited.   Default value : X-Forwarded-For ", "Heuristic": ["H1"]}, {"nl": "Crea procesos y espera a que termine de crearlo y este en la primera tarea de usuario o termine el proceso.", "Heuristic": ["H1"]}, {"nl": "checkState prueft ob die Schlange am leben ist bzw. ob etwas (Kollision mit Border/Sich Selbst) diesen Status geaendert hat.", "Heuristic": ["H1"]}, {"nl": "Gets device", "Heuristic": ["H2"]}, {"nl": "Tests the equality for both  {@link ClientRWLock} constructors.", "Heuristic": ["H1"]}, {"nl": "GET  /users/:login : get the \"login\" user.", "Heuristic": ["H1"]}, {"nl": "Find a type object by name.", "Heuristic": []}, {"nl": "Creates a SAX InputSource from a TraX Source. May use an XSLT identity transformation if SAXSource cannot convert it directly.", "Heuristic": ["H1"]}, {"nl": "Optional.", "Heuristic": ["H2"]}, {"nl": "Create an instance of  {@link BrowseOffersResponse.Return.OfferData.OfferMedia.OfferImage }", "Heuristic": ["H1"]}, {"nl": "Helper for success callbacks that just returns the Status.OK by default", "Heuristic": ["H1"]}, {"nl": "Template delegator for testNode() method. OVERRIDE to add custom logic", "Heuristic": ["H1"]}, {"nl": "Get time from TimePicker", "Heuristic": []}, {"nl": "Produce a JSONArray of JSONObjects from a comma delimited text string using a supplied JSONArray as the source of element names.", "Heuristic": []}, {"nl": "A single preview frame will be returned to the handler supplied. The data will arrive as byte[] in the message.obj field, with width and height encoded as message.arg1 and message.arg2, respectively.", "Heuristic": ["H1"]}, {"nl": "{@inheritdoc}", "Heuristic": ["H2"]}, {"nl": "Test for setLatitude()", "Heuristic": []}, {"nl": "get length", "Heuristic": ["H1", "H2"]}, {"nl": "Collects x-www-form-urlencoded body parameters as per OAuth Core 1.0 spec section 9.1.1", "Heuristic": ["H1"]}, {"nl": "Sets the run status.", "Heuristic": []}, {"nl": "Get the unattached TokenReference", "Heuristic": []}, {"nl": "Write a HashMap to a Parcel, class of key and value are both String", "Heuristic": []}, {"nl": "A collector that takes a stream containing exactly one element and returns that element. The returned collector throws an  {@code IllegalArgumentException} if the stream consists of two ormore elements, and a  {@code NoSuchElementException} if the stream is empty.", "Heuristic": ["H1"]}, {"nl": "Generates a reset key.", "Heuristic": []}, {"nl": "Verify the precondition for the command before obtaining a lock.  This implementation does a NOP.  A trivial implementation is calling {link #verifyPrecondition}.", "Heuristic": ["H1"]}, {"nl": "copy input data from the source stream to the target stream", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Unregister the  {@link TransportView} MBean.", "Heuristic": ["H1"]}, {"nl": "Puts the specified name/value pair in the specified JSON object.", "Heuristic": []}, {"nl": "Add a byte array field to the stream. \\param value The byte array value to be added.", "Heuristic": ["H1"]}, {"nl": "Returns the current number of entries in the map.", "Heuristic": []}, {"nl": "Return true if the entropy represents a Computed Key.", "Heuristic": []}, {"nl": "Calculate average TPS (Transaction per second).", "Heuristic": []}, {"nl": "Returns RP DTOs for the given OpenID", "Heuristic": []}, {"nl": "Updates the best value to the server to the given newValue and newSignature without any checking. Does NOT notify the wallet of an update to the  {@link StoredPaymentChannelServerStates}.", "Heuristic": ["H1"]}, {"nl": "Resolves the correct port for this scheme. Returns the given port if it is valid, the default port otherwise.", "Heuristic": []}, {"nl": "Converts the specified string to byte array of ASCII characters.", "Heuristic": []}, {"nl": "Detaches this adapter from the wrapped connection. This adapter becomes useless.", "Heuristic": []}, {"nl": "Get the list of accepted key-wrap algorithms. A request can contain a wst:KeyWrapAlgorithm uri for use in encrypting an issued token. The algorithm specified must be contained in this list. The default algorithms are RSA 1.5 and RSA OEP.", "Heuristic": ["H1"]}, {"nl": "Obtains the tracked route. If a route has been tracked, it is  {@link #isConnected connected}. If not connected, nothing has been tracked so far.", "Heuristic": ["H1"]}, {"nl": "Find the attribute or simple/text node and convert the string value to the instance of the provided class, example, Integer.class.", "Heuristic": []}, {"nl": "Returns the grant type", "Heuristic": []}, {"nl": "Gets the height of the block that created this output.", "Heuristic": []}, {"nl": "Assert that an object is  {@code null} .Assert.isNull(value, \"The value must be null\");", "Heuristic": ["H1"]}, {"nl": "Prints information about the Buyer.", "Heuristic": []}, {"nl": "put bitmap to image cache", "Heuristic": ["H1"]}, {"nl": "Get a list of all legal moves from the given position", "Heuristic": []}, {"nl": "/ Gets Cleaner XSS User Input. In addition to applying antisamy rules, this method also escapes JavaScript characters.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the id property.", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link JAXBElement }{@code }}", "Heuristic": ["H1"]}, {"nl": "Log a message and related exception to the context logger.", "Heuristic": []}, {"nl": "Gets the result code.", "Heuristic": []}, {"nl": "Returns the triangular matrix from the decomposition.", "Heuristic": []}, {"nl": "Gets the Gene Symbol.", "Heuristic": []}, {"nl": "Sets the  {@link WriteType}.", "Heuristic": ["H1"]}, {"nl": "Reads new input data into the buffer. Call only with pos == end or end == -1, depending on the desired outcome if the function throws.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Enables the buffering mode. If set to true then the runtime will ensure that the provider writes to a cached stream. For example, the JAXB marshalling process may fail after the initial XML tags have already been written out to the HTTP output stream. Enabling the buffering ensures no incomplete payloads are sent back to clients in case of marshalling errors at the cost of the initial buffering - which might be negligible for small payloads.", "Heuristic": ["H1"]}, {"nl": "Throws an exception if the current token is not  an identifier.  Otherwise, returns the identifier string  and moves to the next token.", "Heuristic": ["H1"]}, {"nl": "Converts an IoSession into a listening connection identifier.", "Heuristic": []}, {"nl": "Gets all payloads of the DAG in the topological order.", "Heuristic": []}, {"nl": "Gets the scopes request by the client", "Heuristic": []}, {"nl": "Set the interval at which any get method evaluates if the AsyncResponse is complete or cancelled.", "Heuristic": ["H1"]}, {"nl": "Deregisters a Spring from this BaseSpringSystem, so it won't be iterated anymore. The Spring should not be used anymore after doing this.", "Heuristic": []}, {"nl": "Writes a commit record to the log, and flushes it to disk.", "Heuristic": []}, {"nl": "Add a complete set, merging lookaheads where items are already in the set", "Heuristic": ["H1"]}, {"nl": "Provide the optionName to the ExtraDhcpOption's Builder.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the step property.", "Heuristic": []}, {"nl": "Create new branch.", "Heuristic": []}, {"nl": "Sets whether items in collection and array returns should be emitted as individual output tuples.", "Heuristic": []}, {"nl": "Debugging to see if the object has already been freed.", "Heuristic": []}, {"nl": "remove.", "Heuristic": ["H1", "H2"]}, {"nl": "Returns the number of times the given term appears at the given URL.", "Heuristic": []}, {"nl": "Check whether this is an existing association", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.parser.HDTParser#isTrue()}.", "Heuristic": ["H1"]}, {"nl": "returns true if string has all unique characters", "Heuristic": ["H1"]}, {"nl": "Start custom shell defined by shellPath", "Heuristic": []}, {"nl": "Creates a solver for linear systems.  The A matrix will have dimensions (m,m).", "Heuristic": ["H1"]}, {"nl": "Registers an expression for a field.", "Heuristic": []}, {"nl": "Return the name of the last action that ended in error.", "Heuristic": []}, {"nl": "Type of the request. ex - saml", "Heuristic": ["H1"]}, {"nl": "Returns a map of view-specific constants that are injected to JavaScript. These constants are made accessible via UIManager..Constants.", "Heuristic": ["H1"]}, {"nl": "Returns the first AddressFacade in list order contained by the SellerPartyType representing the entity fulfilling this order.", "Heuristic": []}, {"nl": "Path to the JS bundle file to be loaded from the file system. Example:  {@code \"assets://index.android.js\" or \"/sdcard/main.jsbundle}", "Heuristic": ["H1"]}, {"nl": "Test of writeComPort method, of class ComPortController.", "Heuristic": []}, {"nl": "Accessor for the JSON string.", "Heuristic": ["H1"]}, {"nl": "Gets the primary group name of a user.", "Heuristic": []}, {"nl": "Get cmap as bytes.", "Heuristic": ["H1"]}, {"nl": "Execute the request and return a  {@link Response}", "Heuristic": ["H1"]}, {"nl": "Add a difference. If the difference identifier already exists the old difference will be overwritten.", "Heuristic": []}, {"nl": "Gets the type attribute of the StylesheetInfo object", "Heuristic": []}, {"nl": "Adds a new boolean Parameter.", "Heuristic": []}, {"nl": "Get the association ends.", "Heuristic": []}, {"nl": "Returns a builder for creating simple, fast escapers. A builder instance can be reused and each escaper that is created will be a snapshot of the current builder state. Builders are not thread safe. The initial state of the builder is such that:  There are no replacement mappings  {@code safeMin == Character.MIN_VALUE} {@code safeMax == Character.MAX_VALUE} {@code unsafeReplacement == null} For performance reasons escapers created by this builder are not Unicode aware and will not validate the well-formedness of their input.", "Heuristic": ["H1"]}, {"nl": "Collects OAuth Authorization header parameters as per OAuth Core 1.0 spec section 9.1.1", "Heuristic": []}, {"nl": "add all distinct entry to list1 from list2", "Heuristic": ["H1"]}, {"nl": "Test method for {@link com.sqa.em.util.helper.RequestInput#getChar(java.lang.String,char[])}.", "Heuristic": ["H1"]}, {"nl": "Creates a simple file with  {@code len} bytes.", "Heuristic": ["H1"]}, {"nl": "Returns an instance which specifies that insertion ordering is guaranteed.", "Heuristic": []}, {"nl": "Quick check for login", "Heuristic": []}, {"nl": "Sets the serializer factory.", "Heuristic": ["H1"]}, {"nl": "Sets user  {@link Credentials} to be used for authentication", "Heuristic": ["H1"]}, {"nl": "Gets the correlation Id on the message.  The ID will be a byte array, of length 20.", "Heuristic": ["H1"]}, {"nl": "Get Debug Message.", "Heuristic": []}, {"nl": "Info log message with printf formatting.", "Heuristic": ["H1"]}, {"nl": "Gets the data set id.", "Heuristic": ["H1"]}, {"nl": "Returns a new supplier which is the composition of the provided function and supplier. In other words, the new supplier's value will be computed by retrieving the value from  {@code supplier}, and then applying  {@code function} to that value. Note that the resulting supplier will notcall  {@code supplier} or invoke {@code function} until it is called.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMCParser#setFaaMode()}.", "Heuristic": ["H1"]}, {"nl": "Reads the file, which contains the filelist. This is used for the command line arguments --filelist/-filelist for both PMD and CPD. The separator in the filelist is a command and/or newlines.", "Heuristic": ["H1"]}, {"nl": "Returns true if both of the term's expressions evaluate to the same constant, with respect to the specified scan.", "Heuristic": []}, {"nl": "This is the actual method that do the transaction Synchronized method to avoid race condition on the account modifying", "Heuristic": []}, {"nl": "Optional.", "Heuristic": ["H2"]}, {"nl": "this function can be override", "Heuristic": ["H1"]}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.parser.RMCParser#getDay()}.", "Heuristic": ["H1"]}, {"nl": "Adds the reg pcl test result detail.", "Heuristic": ["H1"]}, {"nl": "Copies an inputstream into an output stream.", "Heuristic": ["H1"]}, {"nl": "Stores this object into the given byte stream.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns a reference to a character buffer containing the results of the stemming process.  You also need to consult getResultLength() to determine the length of the result.", "Heuristic": []}, {"nl": "Gets the value of the attachinfo property.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the templateName property.", "Heuristic": []}, {"nl": "Returns the composition of two functions. For  {@code f: A->B} and {@code g: B->C}, composition is defined as the function h such that  {@code h(a) == g(f(a))} for each {@code a}. Java 8 users: use  {@code g.compose(f)} or (probably clearer) {@code f.andThen(g)}instead.", "Heuristic": ["H1"]}, {"nl": "Generates a reset key.", "Heuristic": []}, {"nl": "Set the Value value.", "Heuristic": ["H1"]}, {"nl": "put float preferences", "Heuristic": ["H1"]}, {"nl": "Returns true of the AI has an attack target set.", "Heuristic": []}, {"nl": "Mark (Store) the current time.", "Heuristic": []}, {"nl": "Sets default lifetime in seconds to be used if heuristic freshness calculation is not possible. Explicit cache control directives on either the request or origin response will override this, as will the heuristic  {@code Last-Modified} freshness calculation if it isavailable.", "Heuristic": ["H1"]}, {"nl": "Get table column names from the cursor", "Heuristic": []}, {"nl": "Delegates to the nested DifferenceListener.", "Heuristic": []}, {"nl": "Determine if the set contains a particular terminal.", "Heuristic": []}, {"nl": "Inits the.", "Heuristic": ["H1", "H2"]}, {"nl": "Saves a string value under the provided key in the preference manager. If value is null, then the provided key will be removed from the preferences.", "Heuristic": []}, {"nl": "Obtains the number of entries. This includes not only the free entries, but also those that have been created and are currently issued to an application.", "Heuristic": []}, {"nl": "This is a basic test of the heartbeat scheduler logic. It steps through the execution of a single dummy executor.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMBParser#setRange(double)} .", "Heuristic": ["H1"]}, {"nl": "Converts a millisecond number to a formatted date String.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets the payloads of all the root nodes of the DAG.", "Heuristic": []}, {"nl": "Tests the  {@link PathUtils#cleanPath(String)} method to thrown an exception in case an invalidpath is provided.", "Heuristic": ["H1"]}, {"nl": "Returns the first element of the pair", "Heuristic": []}, {"nl": "Tests the  {@link UnderStoreBlockInStream#seek(long)} method for the first block of the file.", "Heuristic": ["H1"]}, {"nl": "Creates an instance of  {@link ToStringHelper}. This is helpful for implementing  {@link Object#toString()}. Specification by example:     {@code}// Returns \"ClassName \" MoreObjects.toStringHelper(this) .toString(); // Returns \"ClassName{x=1}\" MoreObjects.toStringHelper(this) .add(\"x\", 1) .toString(); // Returns \"MyObject{x=1}\" MoreObjects.toStringHelper(\"MyObject\") .add(\"x\", 1) .toString(); // Returns \"ClassName{x=1, y=foo}\" MoreObjects.toStringHelper(this) .add(\"x\", 1) .add(\"y\", \"foo\") .toString(); // Returns \"ClassName{x=1}\" MoreObjects.toStringHelper(this) .omitNullValues() .add(\"x\", 1) .add(\"y\", null) .toString(); }} Note that in GWT, class names are often obfuscated.", "Heuristic": ["H1"]}, {"nl": "Add an integer field to the stream. \\param value The integer value to be added.", "Heuristic": ["H1"]}, {"nl": " Computes the p=1 p-norm of the difference between the two Matrices:  &sum;i=1:m &sum;j=1:n | aij - bij|   where |x| is the absolute value of x.   This is often used as a cost function. ", "Heuristic": ["H1"]}, {"nl": "Get the JWT object directly", "Heuristic": []}, {"nl": "Set the ErrorListener for the transformation", "Heuristic": []}, {"nl": "Sets the initial lifecycle state of the host. For example, if the host is already resumed at creation time, we wouldn't expect an onResume call until we get an onPause call.", "Heuristic": []}, {"nl": "Returns the last valid position which was provided by the NMEA stream.", "Heuristic": ["H1"]}, {"nl": "Here, we attempt to get the password from the private alias/passwords map.", "Heuristic": []}, {"nl": "parse key-value pairs to map, ignore empty key, ignore space at the begging or end of key and value", "Heuristic": ["H1"]}, {"nl": "Adds a field to the schema having the same type and length as the corresponding field in another schema.", "Heuristic": []}, {"nl": "Returns the present state of the game.", "Heuristic": []}, {"nl": "Builds metric registry name for client instance. The pattern is instance.uniqueId.metricName.", "Heuristic": ["H1"]}, {"nl": "Add a servlet to the container.", "Heuristic": []}, {"nl": "Defines the \"dim\" property by returning true if name is equal to \"dim\".  Defines no other properties, i.e., returns false for all other names.", "Heuristic": []}, {"nl": "This method returns the programmatically set TLSServerParameters, not the TLSServerParametersType, which is the JAXB generated type used  in SpringConfiguration.", "Heuristic": ["H1"]}, {"nl": "Sets the  {@link UncaughtExceptionHandler} for new threads created with this ThreadFactory.", "Heuristic": ["H1"]}, {"nl": "Gets the src file name.", "Heuristic": []}, {"nl": "Prepend a step to the path.", "Heuristic": []}, {"nl": "Returns  {@code true} if the bit is set at the specified index.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Most likely this is not the method you'd want to be using, as the  {@link ITextureAtlasSource} won't get packed through this.", "Heuristic": ["H1"]}, {"nl": "Returns the current bound  {@link Vista} if any.", "Heuristic": ["H1"]}, {"nl": "This method is called when we have had too many errors. This method give subclasses the opportunity to output appropriate messages, or tidy up.", "Heuristic": []}, {"nl": "Test method for {@link com.alibaba.dubbo.registry.support.injvm.InjvmRegistry#subscribe(java.util.Map,com.alibaba.dubbo.registry.support.NotifyListener)}.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the id property.", "Heuristic": ["H1"]}, {"nl": "Formats a protocol version.", "Heuristic": []}, {"nl": "Returns the user store domain of the user", "Heuristic": []}, {"nl": "Starts the Alluxio framework.", "Heuristic": ["H1"]}, {"nl": "The forward equation (15.5) in Matrix form becomes (15.12):  f1:t+1 = &alpha;Ot+1TTf1:t ", "Heuristic": ["H1"]}, {"nl": "Return the  {@link URI} representing the root directory of this{@link DAVRepository}.", "Heuristic": ["H1"]}, {"nl": "Get the sequence ID of this sequence.", "Heuristic": []}, {"nl": "Get the Languages of a given source file.", "Heuristic": []}, {"nl": "Validates that two files are either both amplified for both deleted", "Heuristic": []}, {"nl": "Adds knowledge about the current node's attributes.", "Heuristic": []}, {"nl": "Check the current memory usage and record it if it is higher than the amount of memory previously recorded.", "Heuristic": []}, {"nl": "Operation setFigure changes the value of the attribute _figure.", "Heuristic": ["H1"]}, {"nl": "Determine the sign; i.e. even numbers have sign + and odds -", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.HDGParser#HDGParser(net.sf.marineapi.nmea.sentence.TalkerId)}.", "Heuristic": ["H1"]}, {"nl": "Generate code for a single element.", "Heuristic": []}, {"nl": "See  {@link FloatBuffer#clear()}", "Heuristic": ["H1"]}, {"nl": "Set the JFrame to use as the main application frame.", "Heuristic": []}, {"nl": "Registers a listener that is notified of each comparison.", "Heuristic": []}, {"nl": "Getter for the Uri of the profile picture.", "Heuristic": ["H1"]}, {"nl": "Transforms the list of  {@link AlluxioURI} in a new list of Strings,where each string is  {@link AlluxioURI#getPath()}.", "Heuristic": ["H1"]}, {"nl": "Gets the client id which needs to be retained in a hidden form field", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Sets the receipt date type.", "Heuristic": []}, {"nl": "Adds a connection which can be traveled in both direction. Internally, such a connection is represented as two one-way connections.", "Heuristic": []}, {"nl": "Continue execution of tasks after a call to  {@link #suspend()}. More accurately, decreases the suspension counter, as has been incremented by calls to  {@link #suspend}, and resumes execution if the suspension counter is zero. If this method throws, e.g. a  {@code RejectedExecutionException} from the delegate executor,execution of tasks will stop until a call to this method or to  {@link #execute(Runnable)} or{@link #executeFirst(Runnable)} is made.", "Heuristic": ["H1"]}, {"nl": "Retrieves a checksum of the rulesets being used. Any change to any rule of any ruleset should trigger a checksum change.", "Heuristic": ["H1"]}, {"nl": "Mutator for the To property.", "Heuristic": ["H1"]}, {"nl": "Returns the next socket address to try.", "Heuristic": []}, {"nl": "To be called when logging ONLY", "Heuristic": []}, {"nl": "Create an instance of  {@link Token }", "Heuristic": ["H1"]}, {"nl": "Gets the  {@link UserSubject} representing the client", "Heuristic": ["H1"]}, {"nl": "Reads a gson object from the specified url.", "Heuristic": ["H1"]}, {"nl": "Clears all bits (sets to false).", "Heuristic": []}, {"nl": "Delete the  dish by id.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the specified field, as a Constant. The schema is examined to determine the field's type. If INTEGER, then the record file's setInt method is called; otherwise, the setString method is called.", "Heuristic": []}, {"nl": "Retrieves a ReplacedElement for an image from cache, or null if not found.", "Heuristic": []}, {"nl": "Tests the  {@link MasterWorkerInfo#getBlocks()} method.", "Heuristic": ["H1"]}, {"nl": "Get the attached TokenReference", "Heuristic": []}, {"nl": "Set the attached TokenReference", "Heuristic": []}, {"nl": "Template delegator for testNode() method. OVERRIDE to add custom logic", "Heuristic": ["H1"]}, {"nl": "Sets the client state token which needs to be returned to the client alongside the error information  if it was provided during the client request", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link BufferUtils#cloneByteBuffer(ByteBuffer)} method.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#setDistance()} .", "Heuristic": ["H1"]}, {"nl": "Gets the ProteinArrayData with the Specified array ID.", "Heuristic": []}, {"nl": "Given the bitmap, retrieves the Uri so that the bitmap can uniquely be identifed", "Heuristic": ["H1"]}, {"nl": "Acts as an iterator, returning the address of each node in the list sequentially. Once all the list has been iterated, null will be returned for each subsequent query.", "Heuristic": []}, {"nl": "Shuts down the NotificatorService. This method is a MUST if you are running it inside a servlet container, because it will shutdown the underlying ExecutorService.", "Heuristic": ["H1"]}, {"nl": "Compares given object against template condition object.  For built-in type T like String, Number (precisely, from type T located in subpackage of \"java.lang.\") given object is directly compared with template object. Comparison for  {@link ConditionType#EQUALS}requires correct implementation of  {@link Object#equals(Object)}, using inequalities requires type T implementing  {@link Comparable}.  For other types the comparison of given object against template object is done using its getters; Value returned by  {@linkplain #isMet(Object)} operation is conjunction ('and'operator) of comparisons of each getter accessible in object of type T. Getters of template object that return null or throw exception are not used in comparison. Finally, if all getters return nulls (are excluded) it is interpreted as no filter (match every pojo).  If  {@link #SimpleSearchCondition(ConditionType,Object) constructor with shared operator} was used,then getters are compared using the same operator. If  {@link #SimpleSearchCondition(Map,Object) constructor with map of operators} was used then for every getter specified operator is used (gettersfor missing mapping are ignored). The way that comparison per-getter is done depending on operator type per getter - comparison for  {@link ConditionType#EQUALS} requires correct implementation of{@link Object#equals(Object)}, using inequalities requires that getter type implements {@link Comparable}.  For equality comparison and String type in template object (either being built-in or getter from client provided type) it is allowed to used asterisk at the beginning or at the end of text as wild card (zero or more of any characters) e.g. \"foo\", \"foo\" or \"foo\". Inner asterisks are not interpreted as wild cards.  Example:  SimpleSearchCondition&lt;Integer&gt; ssc = new SimpleSearchCondition&lt;Integer&gt;( ConditionType.GREATER_THAN, 10);     ssc.isMet(20); // true since 20&gt;10  class Entity { public String getName() {... public int getLevel() {... public String getMessage() {... } Entity template = new Entity(\"bbb\", 10, null); ssc = new SimpleSearchCondition&lt;Entity&gt;( ConditionType.GREATER_THAN, template);     ssc.isMet(new Entity(\"aaa\", 20, \"some mesage\"));  // false: is not met, expression '\"aaa\"&gt;\"bbb\" and 20&gt;10' is not true   // since \"aaa\" is not greater than \"bbb\"; not that message is null in template hence ingored ssc.isMet(new Entity(\"ccc\", 30, \"other message\")); // true: is met, expression '\"ccc\"&gt;\"bbb\" and 30&gt;10' is true Map&lt;String,ConditionType&gt; map; map.put(\"name\", ConditionType.EQUALS); map.put(\"level\", ConditionType.GREATER_THAN); ssc = new SimpleSearchCondition&lt;Entity&gt;( ConditionType.GREATER_THAN, template); ssc.isMet(new Entity(\"ccc\", 30, \"other message\")); // false due to expression '\"aaa\"==\"ccc\" and 30&gt;10\"' (note different operators) ", "Heuristic": ["H1"]}, {"nl": "This method removes a location from the list of known locations.", "Heuristic": []}, {"nl": "Return the trimmed version of the given string.", "Heuristic": []}, {"nl": "Returns the xpathLocation.", "Heuristic": ["H1"]}, {"nl": "Report Initialization", "Heuristic": ["H2"]}, {"nl": "Checks if the AI is on the building spot. If yes, it will execute the next action. Or else, it will move to the building spot.", "Heuristic": []}, {"nl": "Check if global  {@link SecurityController} was already installed.", "Heuristic": ["H1"]}, {"nl": "Add a plugin to the container", "Heuristic": []}, {"nl": "Returns true if the username represents an internal account", "Heuristic": []}, {"nl": "Method ask user for an input string", "Heuristic": []}, {"nl": "Updates the view information of a given entity by means of the current entity classifier. If suitable viewing information was found and addToTree is true, the entity is added to the entity tree.", "Heuristic": []}, {"nl": "translates the given key to the message", "Heuristic": ["H1"]}, {"nl": "Return active system mode.  .", "Heuristic": ["H1"]}, {"nl": "Gets the exp msg.", "Heuristic": []}, {"nl": "Tests the  {@link RPCBlockReadResponse#validate()} method.", "Heuristic": ["H1"]}, {"nl": "Called when the service transitions to the  {@linkplain State#TERMINATED TERMINATED} state.The  {@linkplain State#TERMINATED TERMINATED} state is a terminal state in the transitiondiagram. Therefore, if this method is called, no other methods will be called on the {@link Listener}.", "Heuristic": ["H1"]}, {"nl": "precondition: tally.size() > 0; tally contains Integer objects postcondition: returns an ArrayList that contains the modes(s); the ArrayList's size equals the number of modes.", "Heuristic": ["H1"]}, {"nl": "Gets the Interaction Type.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets the value of the lang property.", "Heuristic": ["H1"]}, {"nl": "Returns true if this connection is idle.", "Heuristic": []}, {"nl": "Deprecated. Please use  {@link AppEventsLogger} instead.", "Heuristic": ["H1"]}, {"nl": "Delegates to  {@link #textualDifference textualDifference}.", "Heuristic": ["H1"]}, {"nl": "Returns the network parameters for the given string paymentProtocolID or NULL if not recognized.", "Heuristic": []}, {"nl": "Invokes  {@code queue.}{@link BlockingQueue#take() take()} uninterruptibly.", "Heuristic": ["H1"]}, {"nl": "Tests that an exception is thrown in the  {@link BlockMetadataManagerView#getTierView(String)}method when the tier alias does not exist.", "Heuristic": ["H1"]}, {"nl": "Creates a default  {@link CreateUfsFileOptions} with owner, group from login module anddefault file mode.", "Heuristic": ["H1"]}, {"nl": "Append additional path elements to the end of an  {@link AlluxioURI}.", "Heuristic": ["H1"]}, {"nl": "This method gets triggered when server side gets a message", "Heuristic": []}, {"nl": "Guaranteed to throw an exception and leave the  {@code RangeMap} unmodified.", "Heuristic": ["H1"]}, {"nl": "GET  /books/:id : get the \"id\" book.", "Heuristic": ["H1"]}, {"nl": "Estimates the number of block accesses to compute the join. The formula is:  B(indexjoin(p1,p2,idx)) = B(p1) + R(p1)B(idx) + R(indexjoin(p1,p2,idx) ", "Heuristic": ["H1"]}, {"nl": "Adds all of the fields in the specified schema to the current schema.", "Heuristic": ["H1"]}, {"nl": "Gets the type of grant which is exchanged for this token", "Heuristic": []}, {"nl": "XPath leading to the target.", "Heuristic": []}, {"nl": "Verifies that two violations nodes with different  {@code endColumn} arenot equal.", "Heuristic": ["H1"]}, {"nl": "Get the constants for a particular WS-ReliableMessaging namespace.", "Heuristic": []}, {"nl": "compiles the CSS, RTL-CSS and theme parameters as JSON", "Heuristic": ["H1"]}, {"nl": "Get the resolution state.", "Heuristic": []}, {"nl": "Tests for  {@link ReplayCallableThrowsIOException}s that  {@link IOException}s are correctly re-thrown as  {@link ThriftIOException}s.", "Heuristic": ["H1"]}, {"nl": "Get the CallbackHandler object.", "Heuristic": []}, {"nl": "Sets the value of the pass property.", "Heuristic": []}, {"nl": "Check whether we deal with a Sun Java.", "Heuristic": []}, {"nl": "Calls createEntity for each custom class created.", "Heuristic": []}, {"nl": "Returns  {@code true} if a gesture is currently in progress.", "Heuristic": ["H1"]}, {"nl": "Sets URI user info. The value is expected to be unescaped and may contain non ASCII characters.", "Heuristic": []}, {"nl": "Recovers uncompleted transactions from the log, then writes a quiescent checkpoint record to the log and flushes it.", "Heuristic": []}, {"nl": "Actually write the wallet file to disk, using an atomic rename when possible. Runs on the current thread.", "Heuristic": []}, {"nl": "Returns true if this assignment does not violate any constraints of constraints.", "Heuristic": []}, {"nl": "Returns the ID used by the client to authenticate itself when authentication is enabled.", "Heuristic": []}, {"nl": "the CSS condition [attribute=value]", "Heuristic": ["H1"]}, {"nl": "Returns a string that would replace the given character in the specified escaper, or {@code null} if no replacement should be made. This method is intended for use in tests throughthe  {@code EscaperAsserts} class; production users of {@link CharEscaper} should limitthemselves to its public interface.", "Heuristic": ["H1"]}, {"nl": "A static factory method to create a  {@link StreamingContextJavaFunctions} based on an existing{@link JavaStreamingContext} instance.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Register an application with its secret. Executors need to first authenticate themselves with the same secret before fetching shuffle files written by other executors in this application.", "Heuristic": []}, {"nl": "prints out usage information, with optional error message", "Heuristic": ["H1"]}, {"nl": "Test of getResponseString method, of class LogEntryRequest.", "Heuristic": []}, {"nl": "takes an object (Clinical or ClinicalAttribute) and converts it to a map (JSONObject)", "Heuristic": ["H1"]}, {"nl": "Generates a suitable service name from a given class. The returned name is the simple name of the class, i.e. without the package name.", "Heuristic": []}, {"nl": "Returns the creation time of the command.", "Heuristic": []}, {"nl": "Expansion: unless L ends the game, Add a node corresponding to one of the untried moves, chosen at random node C. If no child was created, start simulation from L.", "Heuristic": []}, {"nl": "Check to see if a mnemonic word list is valid.", "Heuristic": []}, {"nl": "Optional.", "Heuristic": ["H2"]}, {"nl": "Get option by index", "Heuristic": []}, {"nl": "Sets the value of the tCiD property.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.HDGParser#setHeading(double)}.", "Heuristic": ["H1"]}, {"nl": "Strip any namespace information off a node name", "Heuristic": []}, {"nl": "Sets the value of the city property.", "Heuristic": []}, {"nl": "Checks whether a socket connection is secure. This factory creates plain socket connections which are not considered secure.", "Heuristic": []}, {"nl": "Sets pin state for the input path.", "Heuristic": []}, {"nl": "Return a singleton list containing  {@code o}.", "Heuristic": ["H1"]}, {"nl": "Returns a formatted key.", "Heuristic": []}, {"nl": "Gets the character (or string) corresponding to the passed code in the given table", "Heuristic": []}, {"nl": "Returns a string representation of this comparison using the given  {@link ComparisonFormatter}", "Heuristic": ["H1"]}, {"nl": "saves the @param array to file : @param fileName", "Heuristic": ["H1"]}, {"nl": "Verify whether the response is valid with the given RELAY - STATE Id", "Heuristic": ["H1"]}, {"nl": "Getter for the link of the profile.", "Heuristic": []}, {"nl": "Create gene + case ID key.", "Heuristic": []}, {"nl": "Warn user (ex: \"Cannot find configuration file ...\")", "Heuristic": []}, {"nl": "Set the class name to use for main method implementation. The class must have a method matching public static void main(Script sc, String[] args), it will be called when main(String[] args) is called in the generated class. The class name should be fully qulified name and include the package name like in org.foo.Bar.", "Heuristic": ["H1"]}, {"nl": "Update BPS Profile", "Heuristic": []}, {"nl": "Sets how this item should display in the presence of an Action Bar. The parameter actionEnum is a flag set. One of {@link #SHOW_AS_ACTION_ALWAYS},  {@link #SHOW_AS_ACTION_IF_ROOM}, or {@link #SHOW_AS_ACTION_NEVER} should be used, and you may optionally ORthe value with  {@link #SHOW_AS_ACTION_WITH_TEXT}. {@link #SHOW_AS_ACTION_WITH_TEXT} requests that when the item is shown asan action, it should be shown with a text label.", "Heuristic": ["H1"]}, {"nl": "Traverses the history forward by one position, returns and item at that position.", "Heuristic": []}, {"nl": "Save the configuration to the default location. Implementations do not have to handle this method. If the method is not allowed or it fails, the implementation must return false.", "Heuristic": ["H1"]}, {"nl": "Gets the src file name.", "Heuristic": []}, {"nl": "Get GPS status", "Heuristic": []}, {"nl": "Gets a map that contains attributes that aren't bound to any typed property on this class.  the map is keyed by the name of the attribute and  the value is the string value of the attribute. the map returned by this method is live, and you can add new attribute by updating the map directly. Because of this design, there's no setter.", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link JAXBElement }{@code }}", "Heuristic": ["H1"]}, {"nl": "Returns an instance which specifies that no ordering is guaranteed.", "Heuristic": []}, {"nl": "Catch an exception an throw a AxisRabbitMQException with message", "Heuristic": ["H1"]}, {"nl": "Locks the file in Alluxio's space while the session is reading it.", "Heuristic": ["H1"]}, {"nl": "Method calling to use the proxy connection.", "Heuristic": []}, {"nl": "Keep a reference to the visited attribute at the current visited node", "Heuristic": []}, {"nl": "Called when the invoker is done with the object.   Default implementation does nothing.", "Heuristic": ["H1"]}, {"nl": "Compare the configuration key to a string.", "Heuristic": []}, {"nl": "Returns the real path of the given URI string. If the given URI string represents a content:// URI, the real path is retrieved from the media store.", "Heuristic": []}, {"nl": "Returns whether or not there exists a purchase of the given product.", "Heuristic": ["H1"]}, {"nl": "Encodes the object as a short.", "Heuristic": []}, {"nl": "Tests the  {@link RPCFileReadRequest#getEncodedLength()} method.", "Heuristic": ["H1"]}, {"nl": "Utility method for creating a  {@link URI} from an XML element.", "Heuristic": ["H1"]}, {"nl": "Returns v, with the bit at position set to 1 or 0 depending on value.", "Heuristic": []}, {"nl": "Tests the  {@link NetworkAddressUtils#getBindAddress(ServiceType)} method.", "Heuristic": ["H1"]}, {"nl": "Creates RedeemData for pay-to-address or pay-to-pubkey input. Provided key is a single private key needed to spend such inputs and provided program should be a proper CHECKSIG program.", "Heuristic": ["H1"]}, {"nl": "Shortcut for  {@code waitCompleted(fs, uri, -1, TimeUnit.MILLISECONDS)}, i.e., wait for an indefinite amount of time. Note that if a file is never completed, the thread will block forever, so use with care.", "Heuristic": ["H1"]}, {"nl": "Test method for  {@link NotificationController#handleEvent(org.osgi.service.event.Event)}Verifies that  {@code IllegalArgumentException} is thrown when {@code Event}'s {@link Notification#NOTIFICATION_KEY_TIMESTAMP} property is null.", "Heuristic": ["H1"]}, {"nl": "Template delegator for testNode() method. OVERRIDE to add custom logic", "Heuristic": ["H1"]}, {"nl": "Reads a code of given length and at given index in an array of bits", "Heuristic": []}, {"nl": "Add a variable to the context. ", "Heuristic": []}, {"nl": "Returns the correct (client) SocketChannel class based on IOMode.", "Heuristic": []}, {"nl": "Gets Global Singleton Instance.", "Heuristic": []}, {"nl": "Takeoff Start the drone with a takeoff, for a fixed amount of time", "Heuristic": ["H1"]}, {"nl": "Creates the \"full access\" mode.", "Heuristic": []}, {"nl": "Test of openPort method, of class ComPortController.", "Heuristic": []}, {"nl": "Gets the checksum.", "Heuristic": []}, {"nl": "Creates and returns an instance of  {@link SystemUiHider} that isappropriate for this device. The object will be either a {@link SystemUiHiderBase} or {@link SystemUiHiderHoneycomb} depending onthe device.", "Heuristic": ["H1"]}, {"nl": "Updates the value currently associated with  {@code key} with the specified function,and returns the old value.  If there is not currently a value associated with  {@code key}, the function is applied to  {@code 0L}.", "Heuristic": ["H1"]}, {"nl": "Returns false.", "Heuristic": ["H2"]}, {"nl": "Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData.RedemptionAddresses }", "Heuristic": ["H1"]}, {"nl": "Calculated the expected size of a CategoricalDistribution for the provided random variables.", "Heuristic": []}, {"nl": "Initializes an  {@link AccessibilityNodeInfoCompat} with information about the host view. The default implementation behaves as {@link ViewCompat#onInitializeAccessibilityNodeInfo(View,AccessibilityNodeInfoCompat) ViewCompat#onInitializeAccessibilityNodeInfo(View, AccessibilityNodeInfoCompat)} forthe case of no accessibility delegate been set. ", "Heuristic": ["H1"]}, {"nl": "Provides a Cytoscape SIF Version of this Interaction.", "Heuristic": ["H1"]}, {"nl": "Returns an iterable whose iterator returns the given elements in order.", "Heuristic": []}, {"nl": "Converts one row of luminance data to 1 bit data. May actually do the conversion, or return cached data. Callers should assume this method is expensive and call it as seldom as possible. This method is intended for decoding 1D barcodes and may choose to apply sharpening.", "Heuristic": []}, {"nl": "Sets the batch id.", "Heuristic": ["H1"]}, {"nl": "Gets the config id.", "Heuristic": ["H1"]}, {"nl": "Remove the given trusted service with realmName", "Heuristic": []}, {"nl": "Set the triple state of B.", "Heuristic": []}, {"nl": "Gets the field names.", "Heuristic": []}, {"nl": "Load application context.", "Heuristic": []}, {"nl": "Get the compiler's class file loader.", "Heuristic": []}, {"nl": " Computes the dominant eigen vector for a matrix.  The dominant eigen vector is an eigen vector associated with the largest eigen value.   WARNING: This function uses the power method.  There are known cases where it will not converge. It also seems to converge to non-dominant eigen vectors some times.  Use at your own risk. ", "Heuristic": ["H1"]}, {"nl": "Add a cache entry.", "Heuristic": []}, {"nl": "Closes the specified stream.", "Heuristic": []}, {"nl": "Returns the location one unit left of this location.", "Heuristic": []}, {"nl": "Sets the population size.", "Heuristic": []}, {"nl": "Handle firing a profile event.", "Heuristic": []}, {"nl": "Encodes the description of this ToDoItem in an XML safe way and returns the new String. The String can be regained by running the returned String through {@link TodoParser#decode(String)}.", "Heuristic": ["H1"]}, {"nl": "Get an instance of the ThriftAuthenticationJDBCPersistenceManager. It implements a lazy initialization with double checked locking, because it is initialized first by identity.core module during the start up.", "Heuristic": ["H1"]}, {"nl": "since 4.1", "Heuristic": ["H1", "H2"]}, {"nl": "Sets the value of the scenario property.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.VTGParser#setTrueCourse(double)}.", "Heuristic": ["H1"]}, {"nl": "Return the public interface for instrumentation service.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Restore preferences.", "Heuristic": ["H2"]}, {"nl": "Given a block store, looks up the previous block in this chain. Convenience method for doing store.get(this.getHeader().getPrevBlockHash()).", "Heuristic": ["H1"]}, {"nl": "Helper to convert a proxy to a proxy chain.", "Heuristic": []}, {"nl": "Gets the feed id.", "Heuristic": ["H1"]}, {"nl": "Deprecated. Please use  {@link AppEventsLogger} instead.", "Heuristic": ["H1"]}, {"nl": "Map a principal in the source realm to the target realm", "Heuristic": []}, {"nl": "Returns a thread-local 1024-char array.", "Heuristic": []}, {"nl": "Returns true if date is yesterday.", "Heuristic": []}, {"nl": "Gets the document associated with this writer", "Heuristic": []}, {"nl": "Callback for remaining command line arguments after either  {@link #handle(String,String)} or{@link #handleUnknown(String)} return \"false\". This will be called at the end of parsing evenwhen there are no remaining arguments.", "Heuristic": ["H1"]}, {"nl": "Sets the screen resolution (used for scale computation).", "Heuristic": []}, {"nl": "value val gets new base, fields are preserved.", "Heuristic": ["H1"]}, {"nl": "Alternate initialization entry point for use by ArgoEclipse. It leaves out telling GEF about bundles that it won't be able to access.  NOTE: This must be called before any other methods are called to work properly.", "Heuristic": []}, {"nl": "Sets the  {@link UserSubject) instance capturing the information about the end user }", "Heuristic": ["H1"]}, {"nl": "Returns the cytoband", "Heuristic": ["H1"]}, {"nl": "This method receives a directory and returns an iterator that will lazily create documents from the given directory. The directory is composed of directories in which a file called \"fragments\" was previously created.", "Heuristic": []}, {"nl": "Creates a CascadedStyle using style information from startingPoint and then adding the property declarations from decls.", "Heuristic": ["H1"]}, {"nl": "Extend the scroll animation. This allows a running animation to scroll further and longer, when used with  {@link #setFinal(float)}.", "Heuristic": ["H1"]}, {"nl": "Sets the minimum total size for the internal hash tables. For example, if the initial capacity is  {@code 60}, and the concurrency level is  {@code 8}, then eight segments are created, each having a hash table of size eight. Providing a large enough estimate at construction time avoids the need for expensive resizing operations later, but setting this value unnecessarily high wastes memory.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets the id of the block. Make sure the message is ready before calling this method.", "Heuristic": ["H1"]}, {"nl": "Get one dishCollection by id.", "Heuristic": ["H1"]}, {"nl": "Returns an int filesize from a string value such as 50m or 50mb", "Heuristic": ["H1"]}, {"nl": "Creates an OpenGraphAction suitable for posting via, e.g., a native Share dialog.", "Heuristic": []}, {"nl": "Return cover hash value", "Heuristic": []}, {"nl": "Set the STS issuer name", "Heuristic": []}, {"nl": "Clears a cache entry.", "Heuristic": []}, {"nl": "Checks that a URL is valid", "Heuristic": []}, {"nl": " To decompose the matrix 'A' it must have full rank.  'A' is a 'm' by 'n' matrix. It requires about 2nm2-2m2/3 flops.   The matrix provided here can be of different dimension than the one specified in the constructor.  It just has to be smaller than or equal to it. ", "Heuristic": ["H1"]}, {"nl": "Checks if the given byte array starts with a constant sequence of bytes of the given value and length.", "Heuristic": []}, {"nl": "Provide number of somatic whitelist ACCEPT (return true) decisions made by this MutationFilter.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Add an extension to the list of known extensions. Extensions are searched in the order they are added, so for best performance add the most likely extensions first.", "Heuristic": []}, {"nl": "Computes the Least Common Multiple of a list of BigIntegers.", "Heuristic": []}, {"nl": "Returns the name of the indexed field.", "Heuristic": []}, {"nl": "Starts the Alluxio worker executor.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the token property.", "Heuristic": []}, {"nl": "A helper to make creating a SpringConfig easier with values mapping to the Origami values.", "Heuristic": []}, {"nl": "Print an AST node using the given code writer.  The {@code CodeWriter.flush()} method must be called after this methodto ensure code is output.  Use  {@code printAst} rather than thismethod to print the entire AST; this method should only be called by nodes to print their children.", "Heuristic": ["H1"]}, {"nl": " Returns a  {@link SingularValueDecomposition} that has been optimized for the specified matrix size.For improved performance only the portion of the decomposition that the user requests will be computed. ", "Heuristic": ["H1"]}, {"nl": "Append an AND NOT condition.", "Heuristic": []}, {"nl": "Create a two-component configuration key.", "Heuristic": []}, {"nl": "Here, we attempt to get the password from the private  alias/passwords map.", "Heuristic": ["H1"]}, {"nl": "Deserialize only a boolean field (addressed by recursively using field id) from a byte record.", "Heuristic": ["H1"]}, {"nl": "Generate an error if the host might be a non-bracketed IPv6 literal. URI formatting requires that IPv6 literals be surrounded by brackets, like \"[2001:db8::1]\". Chain this call after  {@link #fromString(String)} to increase the strictness of the parser, anddisallow IPv6 literals that don't contain these brackets. Note that this parser identifies IPv6 literals solely based on the presence of a colon. To perform actual validation of IP addresses, see the  {@link InetAddresses#forString(String)}method.", "Heuristic": ["H1"]}, {"nl": "Gets the key to use for looking up the key in session attributes.", "Heuristic": []}, {"nl": "Set the 'named entity' type of this name. {@link com.basistech.rlp.RLPNEConstants} for possible values. This valueinfluences the interpretating and matching of the name. Use the value {@link com.basistech.rlp.RLPNEConstants#NE_TYPE_NONE} if there is no typeavailable.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Test method for  {@link NotificationController#handleEvent(org.osgi.service.event.Event)}Verifies that  {@code IllegalArgumentException} is thrown when {@code Event}'s {@link Notification#NOTIFICATION_KEY_MESSAGE} property is null.", "Heuristic": ["H1"]}, {"nl": "Returns the least value present in  {@code array}.", "Heuristic": ["H1"]}, {"nl": "Formatted message with parameters filled in.", "Heuristic": []}, {"nl": "Overring method as overrided equals()", "Heuristic": ["H1"]}, {"nl": "Read a HashMap from a Parcel, class of key and value can parcelable both", "Heuristic": ["H1"]}, {"nl": "Nest this query as an AND subquery of the condition", "Heuristic": ["H1"]}, {"nl": "Returns the root element of e", "Heuristic": []}, {"nl": "Translate the visibility flag of a Fig to the PGML \"visibility\" attribute value. The PGML values are 0=hidden and 1=shown. If not specified then 1 is the default so we return null for this to prevent redundent data being written to PGML. TODO: Remove on GEF release after 0.11.9 as it will be provided there.", "Heuristic": ["H1"]}, {"nl": "Compute a hash code.", "Heuristic": []}, {"nl": "Creates a lineage.", "Heuristic": []}, {"nl": "Set the SubjectNameIDFormat.", "Heuristic": []}, {"nl": "Verifies that two violations nodes with different  {@code beginLine} arenot equal.", "Heuristic": ["H1"]}, {"nl": "Acts as an iterator, returning the address of each node in the list sequentially. Once all the list has been iterated, null will be returned for each subsequent query.", "Heuristic": []}, {"nl": "Select tab with given title", "Heuristic": []}, {"nl": "Tells whether or not the  {@link AlluxioURI} is absolute. An  {@link AlluxioURI} is absolute if, and only if, it has a scheme component.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the token property.", "Heuristic": []}, {"nl": "Gives it correct input matrices and makes sure no exceptions are thrown.  All permutations are tested.", "Heuristic": []}, {"nl": "ElementsFromConfig component can not be build, because of module TestMandatoryDependency which use a missing dependency.", "Heuristic": []}, {"nl": "sets the number of queries back to its original value", "Heuristic": ["H1"]}, {"nl": "Returns the upper end point of the interval.", "Heuristic": []}, {"nl": "Clears all the EncryptedPrivateKey contents from memory (overwriting all data including PRIVATE KEYS). WARNING - this method irreversibly deletes the private key information.", "Heuristic": []}, {"nl": "Gets the name of the leader.", "Heuristic": []}, {"nl": "Tries to pull the gitblit team definitions from the remote gitblit instance.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the soapRole property.  This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a set method for the soapRole property.  For example, to add a new item, do as follows:  getSoapRole().add(newItem);   Objects of the following type(s) are allowed in the list  {@link CString }", "Heuristic": ["H1"]}, {"nl": "Get the Date that this Token was Created", "Heuristic": []}, {"nl": "Convenience method to extract the subscribed target URL.", "Heuristic": []}, {"nl": "Is the plugin active", "Heuristic": []}, {"nl": "A new method that interrupts the worker thread.  Call this method to force the worker to stop what it's doing.", "Heuristic": []}, {"nl": "Tests the  {@link StorageDirView#getParentTierView()} method.", "Heuristic": ["H1"]}, {"nl": "Convert java.sql.Timestamp to java.util.Date", "Heuristic": ["H1"]}, {"nl": "Gets the value of the nr property.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.GSVParser#getSatelliteInfo()}.", "Heuristic": ["H1"]}, {"nl": "Returns the next character in the buffer.", "Heuristic": []}, {"nl": "Get the Date that this Token expires", "Heuristic": []}, {"nl": "If  {@code key} is not already associated with a value or if {@code key} is associated withzero, associate it with  {@code newValue}. Returns the previous value associated with {@code key}, or zero if there was no mapping for  {@code key}.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the auth property.", "Heuristic": []}, {"nl": "Clear all output parameters.", "Heuristic": []}, {"nl": "setter to allow override by unit test classes (which run in different context, connecting to test DB).", "Heuristic": ["H1"]}, {"nl": "Removes a listener from the set listening to this animation.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns false.", "Heuristic": ["H2"]}, {"nl": " Returns a  {@link org.ejml.interfaces.decomposition.LUDecomposition} that has been optimized for the specified matrix size.", "Heuristic": ["H1"]}, {"nl": "Create a server which will attempt to bind to a specific port.", "Heuristic": []}, {"nl": "Returns the String representation of Time. Formats the time in hhmmss.sss format used in NMEA 0183 sentences. Seconds are presented with three decimals regardless of precision returned by {@link #getSeconds()}.", "Heuristic": ["H1"]}, {"nl": "Gets the max receipt date.", "Heuristic": []}, {"nl": "Reads the contents of the specified block into the buffer's page. If the buffer was dirty, then the contents of the previous page are first written to disk.", "Heuristic": []}, {"nl": "Initializes a text view with the desired formatting,  including text size, padding, color...", "Heuristic": ["H1"]}, {"nl": "Gets the requested scope", "Heuristic": []}, {"nl": "Called when the WebView does a top-level navigation or refreshes. Plugins should stop any long-running processes and clean up internal state. Does nothing by default.", "Heuristic": []}, {"nl": "Write the given int value (32-bit) in big-endian order to the buffer", "Heuristic": []}, {"nl": "Get the type order number of this node. This number may be used to influence the sort order of ClassdiagramNodes.", "Heuristic": ["H1"]}, {"nl": "Positions the current record so that a call to method next will wind up at the first record.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMBParser#getStatus()}.", "Heuristic": ["H1"]}, {"nl": "Returns true if this OncoPrintGeneDisplaySpec specifies the given type and the other one does not,  i.e., if the difference is positive.", "Heuristic": ["H1"]}, {"nl": "Returns null. Cookies prior to RFC2965 do not set this attribute", "Heuristic": []}, {"nl": "Checks if the given connection's driver is HSQL Database Driver", "Heuristic": []}, {"nl": "Returns the boolean value of a configuration property.", "Heuristic": []}, {"nl": "get key by value, match the first entry front to back  Attentions: for HashMap, the order of entry not same to put order, so you may need to use TreeMap ", "Heuristic": ["H1"]}, {"nl": "Returns true if the current token is a string.", "Heuristic": []}, {"nl": "Raise Altitude raising the altitude a little bit", "Heuristic": []}, {"nl": "Set the URL for the content being shared.", "Heuristic": []}, {"nl": "Return the services singleton.", "Heuristic": ["H1"]}, {"nl": "Returns the labels of those vertices which can be obtained by following the edges starting at the specified vertex.", "Heuristic": []}, {"nl": "Empties the image cache entirely.", "Heuristic": []}, {"nl": "Returns the first element of the triplet.", "Heuristic": []}, {"nl": "This method is used to save the current displayed email template changes to the Configuration object.", "Heuristic": []}, {"nl": "Writes a  {@link BitMatrix} to a stream with default configuration.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the return property.", "Heuristic": []}, {"nl": "A = QTA", "Heuristic": ["H1"]}, {"nl": "Description of the Method", "Heuristic": []}, {"nl": "Tests the  {@link TempBlockMeta#getSessionId()} method.", "Heuristic": ["H1"]}, {"nl": "Returns true if both arrays are if both are null or have zero-length, otherwise return the false if their respective elements are not equal by position.", "Heuristic": []}, {"nl": "Add mapping between Uri path and raw SQL. It could contains 3 formatter specifiers like %s for projection, selection and sortOrder respectively. The base type and sub type will be guessed.", "Heuristic": ["H1"]}, {"nl": "Clears results and sets the next search radius to the minimum radius.", "Heuristic": ["H1"]}, {"nl": "Sets value of the  {@link CoreProtocolPNames#PROTOCOL_VERSION} parameter.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Die draw Methode wird in mehreren anderen Klassen als Ableitung genutzt um Spielelemente zu zeichnen, sie spielt eine zentrale Rolle bei dem Snake Programm.", "Heuristic": ["H1"]}, {"nl": "Adds the string value of the given argument to the command.", "Heuristic": []}, {"nl": "Increments the total value which we pay the server.", "Heuristic": []}, {"nl": "Add new BPS profile", "Heuristic": []}, {"nl": "Generate a random ASCII string of a given length.", "Heuristic": []}, {"nl": "Returns the dataRID value stored in the specified leaf index record.", "Heuristic": []}, {"nl": "Return the offset of the workflows being returned.  For pagination purposes.", "Heuristic": []}, {"nl": "Set the users unique id", "Heuristic": ["H1"]}, {"nl": "Set notify target. Usually page rendering takes some time. If image cannot be provided immediately, provider may return null. Then it's up to provider to notify view that requested image has arrived and is ready to be drawn. This function, if overridden, can be used to inform provider who should be notifed. Default implementation does nothing.", "Heuristic": ["H1"]}, {"nl": "Get the list of keys in this keystore. This is a passthrough to the underlying JWK Set", "Heuristic": ["H1"]}, {"nl": "Gets the block info of a block, if it exists.", "Heuristic": []}, {"nl": " Multiples the appropriate submatrix of A by the specified reflector and stores the result ('y') in V.  y = Au ", "Heuristic": ["H1"]}, {"nl": "Create a fake TX of sufficient realism to exercise the unit tests. Two outputs, one to us, one to somewhere else to simulate change. There is one random input.", "Heuristic": []}, {"nl": "Notify the administrators by email.", "Heuristic": []}, {"nl": "Return the prior distribution represented as a column vector in Matrix form.", "Heuristic": []}, {"nl": "Set the difference.", "Heuristic": []}, {"nl": "Return the buffer as an array.", "Heuristic": []}, {"nl": "Invoke transaction on the EntityManager", "Heuristic": []}, {"nl": "Sets the message in the UploadResponse. Methods automatically determines how many arguments are set and puts the message at the end.", "Heuristic": []}, {"nl": "Creates an instance of  {@link DefaultHttpRequestFactory} to be usedby HTTP connections for creating  {@link HttpRequest} objects. This method can be overridden in a super class in order to provide a different implementation of the  {@link HttpRequestFactory} interface.", "Heuristic": ["H1"]}, {"nl": "Get all of the CXF AlgorithmSuites from the bindings", "Heuristic": ["H1"]}, {"nl": "Sends an error message to the git client with an exception.", "Heuristic": []}, {"nl": "Execute some code before task does background work.", "Heuristic": []}, {"nl": "Decode an integer from the format string, return zero if not starting on a digit. \\param advance whether to move the stream position.", "Heuristic": ["H1"]}, {"nl": "Creates a matcher of  {@link Comparable} object that matches when the examined object isgreater than or equal to the specified value, as reported by the compareTo method of the examined object. For example: assertThat(1, greaterThanOrEqualTo(1))", "Heuristic": ["H1"]}, {"nl": "Convert to a string.", "Heuristic": []}, {"nl": "Sets the value of the parametersMetaData property.", "Heuristic": ["H1"]}, {"nl": "the CSS condition .class", "Heuristic": ["H1"]}, {"nl": "Sets the gene score.", "Heuristic": []}, {"nl": "Sets the message content using the input stream.", "Heuristic": []}, {"nl": "Gets the value of the doubles property.  This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a set method for the doubles property.  For example, to add a new item, do as follows:  getDoubles().add(newItem);   Objects of the following type(s) are allowed in the list {@link Double }", "Heuristic": ["H1"]}, {"nl": "Returns whether the type is known to the receiver.", "Heuristic": []}, {"nl": "The service  {@link ResolveInfo}.  Generated by the system. ", "Heuristic": ["H1"]}, {"nl": "Gets the value of the numbers property.  This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a set method for the numbers property.  For example, to add a new item, do as follows:  getNumbers().add(newItem);   Objects of the following type(s) are allowed in the list {@link Integer }", "Heuristic": ["H1"]}, {"nl": "Add an alias/password pair to the callback mechanism.", "Heuristic": []}, {"nl": "Add the entire contents of the byte array input to the current digest calculation.", "Heuristic": []}, {"nl": "Returns the length of the word resulting from the stemming process.", "Heuristic": []}, {"nl": "return the map of items returned from an operation.", "Heuristic": ["H1"]}, {"nl": "Get soap action message bares", "Heuristic": []}, {"nl": "Updates/writes and replaces a complete team object keyed by teamname. This method allows for renaming a team.", "Heuristic": ["H1"]}, {"nl": "Override the specified key with the specified value.", "Heuristic": []}, {"nl": "push.", "Heuristic": ["H1", "H2"]}, {"nl": "Writes a setint record to the log, and returns its lsn. Updates to temporary files are not logged; instead, a \"dummy\" negative lsn is returned.", "Heuristic": ["H1"]}, {"nl": "Send the connection a debug channel busy message.", "Heuristic": []}, {"nl": "Initializes the file and log managers.", "Heuristic": []}, {"nl": "Tests the  {@link WebUtils#convertMsToClockTime(long)} method with one hour, ten minutes andforty-five seconds.", "Heuristic": ["H1"]}, {"nl": "Add command to shell queue", "Heuristic": []}, {"nl": "Test of addCapability method, of class Device.", "Heuristic": []}, {"nl": "Increment the number of manually changed difference resolution states.", "Heuristic": []}, {"nl": "Get the current editor.", "Heuristic": []}, {"nl": "value.", "Heuristic": ["H1", "H2"]}, {"nl": "Retrieves a boolean value from preference manager. If no such key exists, it will return the value provided as defaultValue", "Heuristic": []}, {"nl": "Returns the current maximum response body size that will be cached.", "Heuristic": []}, {"nl": "Requested maximum length of the queue of incoming connections. Default -1 for no backlog.", "Heuristic": []}, {"nl": "Get the named color that has exactly the given RGB color value or {@literal null} if no such named color exists.", "Heuristic": []}, {"nl": "GET  /ingredients : get all the ingredients.", "Heuristic": ["H1"]}, {"nl": "Delegates to  {@link #textualDifference textualDifference}.", "Heuristic": ["H1"]}, {"nl": "Returns a hash code for this the enumeration value.", "Heuristic": []}, {"nl": "Factory for  {@link UnderFileSystemFileReader}.", "Heuristic": ["H1"]}, {"nl": "Indica si la cuenta esta bloqueada o no.", "Heuristic": ["H1"]}, {"nl": "Returns a list of adjacent positions. This method does not check if the positions are valid. So it may return locations outside of the map bounds or positions that are occupied by other objects.", "Heuristic": ["H1"]}, {"nl": "Refreshes the monitor timestamp and fires reading started event if currently paused.", "Heuristic": []}, {"nl": "Set the String corresponding to the signature Properties class", "Heuristic": []}, {"nl": "Sets a block of 32 bits, starting at bit i.", "Heuristic": []}, {"nl": "Compares the current records of the two specified scans. The sort fields are considered in turn. When a field is encountered for which the records have different values, those values are used as the result of the comparison. If the two records have the same values for all sort fields, then the method returns 0.", "Heuristic": []}, {"nl": "Sets the name of the third-party application this client represents", "Heuristic": []}, {"nl": "Tests the  {@link Mode#createNoAccess()} method.", "Heuristic": ["H1"]}, {"nl": "Set an output property for the serialied form", "Heuristic": ["H1"]}, {"nl": "How similar are the two items?", "Heuristic": []}, {"nl": "Return the path originally requested by the client.", "Heuristic": []}, {"nl": "Returns the current log file output stream.", "Heuristic": []}, {"nl": "Adds the given number as a OP_N opcode to the end of the program.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Registers a scheme. The scheme can later be retrieved by its name using  {@link #getScheme(String) getScheme} or {@link #get get}.", "Heuristic": ["H1"]}, {"nl": "Stops all the sinks.", "Heuristic": []}, {"nl": "Set the 'primary' flag for this name. If names are grouped by entities {@link #setEntityUID(String)}, one of the names of an entity may be marked primary. This API does not check that only one name is marked.", "Heuristic": []}, {"nl": "Tests that two sessions can both take a read lock on the same block.", "Heuristic": []}, {"nl": "Tests the  {@link RPCFileReadRequest#RPCFileReadRequest(long,long,long)}constructor with an invalid length.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Tests the  {@link DataNettyBuffer#release()} method.", "Heuristic": ["H1"]}, {"nl": "Parses HTTP headers from the data receiver stream according to the generic format as given in Section 3.1 of RFC 822, RFC-2616 Section 4 and 19.3.", "Heuristic": []}, {"nl": "Clears a cache entry.", "Heuristic": []}, {"nl": "For backward compatibility with HessianSkeleton", "Heuristic": []}, {"nl": "{@inheritdoc}", "Heuristic": ["H2"]}, {"nl": "Build request bytes with the specified method, url, headers, and content entity.", "Heuristic": ["H1"]}, {"nl": "Sets the directory where the FCKeditor resides on the server. Remarks: Avoid using relative paths. Use an absolute path from the context (e.g. /fckeditor).", "Heuristic": ["H1"]}, {"nl": "Sets result as KO", "Heuristic": []}, {"nl": "Obtains a description of this worker.", "Heuristic": []}, {"nl": "Opens the specified URL in a web browser.", "Heuristic": []}, {"nl": "Returns a String representing the name of the entity fulfilling this order.", "Heuristic": []}, {"nl": "Return a set of output filenames resulting from a compilation.", "Heuristic": []}, {"nl": "Returns a string representation of this difference using  {@link DefaultComparisonFormatter}", "Heuristic": ["H1"]}, {"nl": "When  {@code true}, developer options such as JS reloading and debugging are enabled. Note you still have to call  {@link #showDevOptionsDialog} to show the dev menu,e.g. when the device Menu button is pressed.", "Heuristic": ["H1"]}, {"nl": "Returns the raw packing format string.", "Heuristic": []}, {"nl": "Get BPS Profile detail for given profile name", "Heuristic": []}, {"nl": "This call is used to set the bus. It should only be called once.", "Heuristic": []}, {"nl": "Sets result as warning If match, do not set errorLevelFolder", "Heuristic": ["H1"]}, {"nl": "Returns true if the specified sentence is satisfiable. A sentence is satisfiable if it is true in, or satisfied by, some model.", "Heuristic": ["H1"]}, {"nl": "Consider using putItemByTag instead (or OwnedItem) for idempotency", "Heuristic": ["H1"]}, {"nl": "Set how long (in seconds) a client-supplied Created Element is allowed to be in the future. The default is 60 seconds to avoid common problems relating to clock skew.", "Heuristic": []}, {"nl": "decode the base 64 encoded input data. It is assumed the input data is valid.", "Heuristic": ["H1"]}, {"nl": "get delivery tag of the message set by transport", "Heuristic": ["H1"]}, {"nl": "Print the calendar for a month in a year", "Heuristic": []}, {"nl": "Sets value of the  {@link CoreConnectionPNames#SOCKET_BUFFER_SIZE}parameter.", "Heuristic": ["H1"]}, {"nl": "Default: false", "Heuristic": ["H2"]}, {"nl": "write.", "Heuristic": ["H1", "H2"]}, {"nl": "Updates the R matrix to take in account the removed row.", "Heuristic": []}, {"nl": "Returns the request code used for this dialog.", "Heuristic": []}, {"nl": "Returns the route used by this connection.", "Heuristic": []}, {"nl": "Returns the distinct values as defined by the index.", "Heuristic": []}, {"nl": "Creates a string that formats the template filename with line number and column of the given Directive. We use this routine to provide a cosistent format for displaying file errors.", "Heuristic": ["H1"]}, {"nl": "Gets the path components of the given path. The first component will be an empty string. \"/a/b/c\" => {\"\", \"a\", \"b\", \"c\"} \"/\" => {\"\"}", "Heuristic": ["H1"]}, {"nl": "Turn a java keyword string into a non-Java keyword string. (Right now this simply means appending an underscore.)", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns the attribute-value of this token.", "Heuristic": []}, {"nl": "Initialize the Model subsystem with the Mock Implementation.", "Heuristic": []}, {"nl": "Get control devices from a user", "Heuristic": []}, {"nl": "Create an instance of  {@link SignCertificateResponse }", "Heuristic": ["H1"]}, {"nl": "Backward Fly the drone backward for given time", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns an immutable snapshot of the statistics on the  {@code x} values alone.", "Heuristic": ["H1"]}, {"nl": "Report a return code for a single DB operaiton.", "Heuristic": ["H1"]}, {"nl": "Reads the number of method arguments", "Heuristic": []}, {"nl": "Returns the host names for all nodes in yarnClient's YARN cluster.", "Heuristic": []}, {"nl": "It returns an English post code.  This is just an example. More elaborated code could the implemented by this method. This is just to proof the point.  {@inheritDoc}", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.MWVParser#setSpeed(double)}.", "Heuristic": ["H1"]}, {"nl": "Width on screen", "Heuristic": []}, {"nl": "performs nonlinear transformation", "Heuristic": ["H1"]}, {"nl": "get failed.", "Heuristic": ["H1", "H2"]}, {"nl": "Gets the name of the third-party application this client represents", "Heuristic": []}, {"nl": "Returns a  {@code TopKSelector} that collects the greatest {@code k} elements added to it,relative to the specified comparator, and returns them via  {@link #topK} in descending order.", "Heuristic": ["H1"]}, {"nl": "Helper for success callbacks that just returns the Status.OK by default", "Heuristic": ["H1"]}, {"nl": "Return the CXF bus used.", "Heuristic": []}, {"nl": "Sets URI scheme.", "Heuristic": []}, {"nl": "Get longitude value of Position", "Heuristic": []}, {"nl": "Return the coordinate application console URL.", "Heuristic": []}, {"nl": "The total sum of work done in this block, and all the blocks below it in the chain. Work is a measure of how many tries are needed to solve a block. If the target is set to cover 10% of the total hash value space, then the work represented by a block is 10.", "Heuristic": []}, {"nl": "Returns the \"version\" or \"header\" byte: the first byte of the data. This is used to disambiguate what the contents apply to, for example, which network the key or address is valid on.", "Heuristic": []}, {"nl": "Get the principal associated with this SecurityToken", "Heuristic": []}, {"nl": "Add headers to the response.  Typically, this would be things like X-RateLimit-Limit headers", "Heuristic": []}, {"nl": "Shuts down the connection manager and releases all the allocated resources", "Heuristic": []}, {"nl": "the CSS condition #ID", "Heuristic": ["H1"]}, {"nl": "Gets the value of the user property.", "Heuristic": []}, {"nl": "Quick access to the type -- base class defaults to error.", "Heuristic": []}, {"nl": "Creates a JSONObject for an open graph action that is suitable for posting.", "Heuristic": []}, {"nl": "Returns the real path of the given URI. If the given URI is a content:// URI, the real path is retrieved from the media store.", "Heuristic": []}, {"nl": "Create the document trailer.", "Heuristic": []}, {"nl": "Call  {@link MotionEvent#getAction}, returning only the  {@link #ACTION_MASK}portion.", "Heuristic": ["H1"]}, {"nl": "Reads the setting from the options hash. If no entry is set for this key or if it evaluates to false, returns null; attempts to coerce the value to  {@link RubyString String} otherwise.", "Heuristic": ["H1"]}, {"nl": "Adds Google credentials from system properties to the Alluxio configuration if they are not already present.", "Heuristic": ["H1"]}, {"nl": "Get the utility of a cell in the projected q-matrix at a given cell position (row,column)", "Heuristic": ["H1"]}, {"nl": "Pop the stack.", "Heuristic": []}, {"nl": "Tells if the provider has captured at least one of the specified sentences.", "Heuristic": []}, {"nl": "Set an HTTP header in the response.", "Heuristic": []}, {"nl": "Determine if this set is an (improper) superset of another.", "Heuristic": []}, {"nl": "Adds the given chunk at the given index in the program", "Heuristic": []}, {"nl": "Mutator for shouldSave", "Heuristic": ["H1"]}, {"nl": " Append a hashCode for an int array. ", "Heuristic": []}, {"nl": "Reset the pass timer.", "Heuristic": []}, {"nl": "Determines if this ActionProvider has a submenu associated with it. Associated submenus will be shown when an action view is not. This provider instance will receive a call to  {@link #onPrepareSubMenu(SubMenu)}after the call to  {@link #onPerformDefaultAction()} and before a submenu isdisplayed to the user.", "Heuristic": ["H1"]}, {"nl": "Returns the text.", "Heuristic": []}, {"nl": "Check whether attributes related to the given group name and tenant Id exist in the identity table.", "Heuristic": ["H1"]}, {"nl": "Replaces the specified data value with the value saved in the log record. The method pins a buffer to the specified block, calls setInt to restore the saved value (using a dummy LSN), and unpins the buffer.", "Heuristic": []}, {"nl": "Return link to the  {@link android.app.Application}", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link RPCBlockReadResponse#getEncodedLength()} method.", "Heuristic": ["H1"]}, {"nl": "Sets the implementation of GridSampler used by the library. One global instance is stored, which may sound problematic. But, the implementation provided ought to be appropriate for the entire platform, and all uses of this library in the whole lifetime of the JVM. For instance, an Android activity can swap in an implementation that takes advantage of native platform libraries.", "Heuristic": []}, {"nl": "Ignore whitespace by removing all empty text nodes and trimming the non-empty ones.", "Heuristic": []}, {"nl": "Gets the src file name.", "Heuristic": []}, {"nl": "Will check in DB if samples exist and add them if they do not  yet exist (and are NOT a normal sample).", "Heuristic": ["H1"]}, {"nl": "Returns the host name.", "Heuristic": []}, {"nl": "Obtains a hash code consistent with  {@link #equals}.", "Heuristic": ["H1"]}, {"nl": "Returns true if the current token is the specified keyword.", "Heuristic": []}, {"nl": "This call retrieves a previously configured JettyHTTPServerEngine for the given port. If none exists, this call returns null.", "Heuristic": []}, {"nl": "checks if the specified Name is filtered", "Heuristic": ["H1"]}, {"nl": "Get the interfaces that the generated target will implement.", "Heuristic": []}, {"nl": "Returns a new object with rotated image data by 90 degrees counterclockwise. Only callable if  {@link #isRotateSupported()} is true.", "Heuristic": ["H1"]}, {"nl": "Sets the items.", "Heuristic": []}, {"nl": "Add a line to log", "Heuristic": []}, {"nl": "Simply notifies the socket lock that it should stop waiting.  This will happen both when we've successfully created a socket and when there's been an error creating the socket.", "Heuristic": []}, {"nl": "Create an instance of  {@link primer.Items.Item }", "Heuristic": ["H1"]}, {"nl": "Remove any callbacks from the AnimationQueue.", "Heuristic": []}, {"nl": "Computes the value of a metric for an operation.", "Heuristic": []}, {"nl": "ElementsFromConfig component can not be build, because of module TestMandatoryDependency which use a missing dependency.", "Heuristic": []}, {"nl": "Registers the given  {@code closeable} to be closed when this {@code Closer} is{@linkplain #close closed}.", "Heuristic": ["H1"]}, {"nl": "Constructs an agent application and sets the application frame visible.", "Heuristic": []}, {"nl": "Equality comparison for the core only.  This is separate out because we need separate access in a super class.", "Heuristic": []}, {"nl": "Returns the population size.", "Heuristic": []}, {"nl": "Whether the serializer will produce lazy parse mode Messages", "Heuristic": ["H1"]}, {"nl": "Sets the max receipt date.", "Heuristic": []}, {"nl": "Gets the cached last refresh date from a Bundle.", "Heuristic": []}, {"nl": "Caches  {@code value} for {@code key}. The value is moved to the head of the queue. Default expiryTimestamp: Long.MAX_VALUE.", "Heuristic": ["H1"]}, {"nl": "Template delegator for testNode() method. OVERRIDE to add custom logic", "Heuristic": ["H1"]}, {"nl": "Check if a given package has a representation in the current diagram.", "Heuristic": []}, {"nl": "Gets the read only buffer of the message's data. Make sure the message is ready before calling this method.", "Heuristic": []}, {"nl": "Gets the value of the street property.", "Heuristic": []}, {"nl": "Returns if result is a Warning", "Heuristic": []}, {"nl": "Stores the contents of a map in an output stream, as part of serialization. It does not support concurrent maps whose content may change while the method is running. The serialized output consists of the number of entries, first key, first value, second key, second value, and so on.", "Heuristic": []}, {"nl": "Runs all the tests.", "Heuristic": []}, {"nl": "Tests if the directory is exclude directory.", "Heuristic": ["H1"]}, {"nl": "Convenience method for defining methods on a submodule.", "Heuristic": []}, {"nl": "Set the EncryptionProperties to be used to encrypt tokens issued for this service", "Heuristic": []}, {"nl": "Multiplies the color with the given alpha.", "Heuristic": []}, {"nl": "Returns true of this.tree.equals(obj.tree). For this distance function this.distance(obj) == 0 implies that this.equals(obj) == true", "Heuristic": []}, {"nl": "Input Stream management not safe", "Heuristic": []}, {"nl": "Creates a byte array from the given ByteBuffer, the position property of input {@link ByteBuffer} remains unchanged.", "Heuristic": []}, {"nl": "Set the Date that this Token was Created", "Heuristic": []}, {"nl": "Get the name of the service to use when contacting the KDC.", "Heuristic": []}, {"nl": "Selects the given node in the AST.", "Heuristic": []}, {"nl": "Returns an enumeration of formatted distances.", "Heuristic": []}, {"nl": "Simulation: play a random playout from node C until a terminal (end of game) state is reached.", "Heuristic": ["H1"]}, {"nl": "Returns the list of sentences in the knowledge base chained together as a single sentence.", "Heuristic": []}, {"nl": "Sets a custom  {@code Equivalence} strategy for comparing keys.By default, the map uses  {@link Equivalence#identity} to determine key equality when{@link #weakKeys} is specified, and {@link Equivalence#equals()} otherwise. The only place thisis used is in  {@link Interners.WeakInterner}.", "Heuristic": ["H1"]}, {"nl": "Returns an icon for the notation, or null if no icon is available.", "Heuristic": []}, {"nl": "Attempts to return a  {@code HostSpecifier} for the given string, throwing an exception ifparsing fails. Always use this method in preference to  {@link #fromValid(String)} for aspecifier that is not already known to be valid.", "Heuristic": ["H1"]}, {"nl": "Decomposes the matrix and checks the internal data structure for correctness.", "Heuristic": []}, {"nl": "Sets the visibility of the debugger GUI frame.", "Heuristic": []}, {"nl": "Set the WS-ReliableMessaging namespace to be used for encoding and decoding messages.", "Heuristic": []}, {"nl": "Indicate whether the stack is empty.", "Heuristic": []}, {"nl": "Sets the value of the largeIcon property.", "Heuristic": []}, {"nl": "Set up.", "Heuristic": ["H2"]}, {"nl": "Registers a new factory.  Factories are registered at the start of the factories list so they can override the existing automatically discovered factories. Generally if you use the  {@link ServiceLoader} mechanismproperly it should be unnecessary to call this, however since ServiceLoader discovery order may be susceptible to class loader behavioural differences there may be rare cases when you need to manually register the desired factory. ", "Heuristic": ["H1"]}, {"nl": "Provides  {@link StorageTierView} given tierAlias. Throws an {@link IllegalArgumentException} ifthe tierAlias is not found.", "Heuristic": ["H1"]}, {"nl": "Get the hash of the represented block", "Heuristic": []}, {"nl": "Info log message with printf formatting.", "Heuristic": ["H1"]}, {"nl": "Gets a double value out of the object.", "Heuristic": []}, {"nl": "Process a single character.", "Heuristic": []}, {"nl": "Load native libraries stored in \"libs/armeabi\"", "Heuristic": ["H1"]}, {"nl": "Tests whether we can get login user with conf in SIMPLE mode, when user name is provided by the application through configuration.", "Heuristic": ["H1"]}, {"nl": "Sends an info/warning message to the git client.", "Heuristic": []}, {"nl": "value.", "Heuristic": ["H1", "H2"]}, {"nl": "Get the unattached TokenReference", "Heuristic": []}, {"nl": "Find attributes or text nodes representing absolute or relative links and convert them to URIs", "Heuristic": []}, {"nl": "Using default CallbackhandlerProviders and no authentication information", "Heuristic": ["H1"]}, {"nl": "Conditionally update the cache every 2 Hours.", "Heuristic": []}, {"nl": "Finds a NotationName matching the language and version. Returns null if no match.", "Heuristic": []}, {"nl": "Set the initial value to be edited as HTML markup.", "Heuristic": []}, {"nl": "Sets the data source", "Heuristic": []}, {"nl": "Returns the  corrected sample standard deviation of the values. If this dataset is a sample drawn from a population, this is an estimator of the population standard deviation of the population which is less biased than  {@link #populationStandardDeviation()} (the unbiased estimator depends onthe distribution). The count must be greater than one. This is not guaranteed to return zero when the dataset consists of the same value multiple times, due to numerical errors. However, it is guaranteed never to return a negative result. Non-finite values If the dataset contains any non-finite values ( {@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or  {@link Double#NaN}) then the result is  {@link Double#NaN}.", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link javax.xml.bind.JAXBElement }{@code }}", "Heuristic": ["H1"]}, {"nl": "Called prior to the interceptor chain being traversed.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns the start of the peak", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Accessor for the Properties instance that stores all settings.", "Heuristic": ["H1"]}, {"nl": "Obtains the classloader used to read the version information. This is just the toString output of the classloader, since the version information should not keep a reference to the classloader itself. That could prevent garbage collection.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link IndexedSet#getByField(IndexDefinition,Object)} method.", "Heuristic": ["H1"]}, {"nl": "Adds an unnamed value to the formatted output. It is strongly encouraged to use  {@link #add(String,Object)} instead and give value areadable name.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link com.sqa.em.util.helper.RequestInput#getChar(java.lang.String,char[])}.", "Heuristic": ["H1"]}, {"nl": "Retrieves a cache entry.", "Heuristic": []}, {"nl": "Gets the consumer registration id", "Heuristic": ["H1"]}, {"nl": " Returns a  {@link org.ejml.alg.dense.decomposition.chol.CholeskyDecompositionLDL_D64} that has been optimized for the specified matrix size.", "Heuristic": ["H1"]}, {"nl": "Removes the specified listener from provider.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Tests to ensure  {@link HttpURLConnection#getInputStream()} is called when 200 is returned.", "Heuristic": ["H1"]}, {"nl": "Sets an array of boolean values in the object.", "Heuristic": []}, {"nl": "set the default cache expire time in milliseconds", "Heuristic": ["H1"]}, {"nl": "Set the validity period", "Heuristic": []}, {"nl": "Stops the checking, once this method is called, the object should be discarded.", "Heuristic": []}, {"nl": "Sets the type attribute of the StylesheetInfo object", "Heuristic": []}, {"nl": "Default implementation is pointer equality.", "Heuristic": []}, {"nl": "Compute the SHA hash of an authorization code", "Heuristic": []}, {"nl": "Unpins the specified buffer.  If the buffer's pin count becomes 0, then the threads on the wait list are notified.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RTEParser#isActiveRoute()}.", "Heuristic": ["H1"]}, {"nl": "Writes out a source/sink specification object for Java static fields", "Heuristic": []}, {"nl": "Parse the checksum octal integer from a header buffer.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.MTWParser#MTWParser(net.sf.marineapi.nmea.sentence.TalkerId)}.", "Heuristic": ["H1"]}, {"nl": "Constructs an object with the given parameters.", "Heuristic": []}, {"nl": "Do multi-factor authentication for an user", "Heuristic": ["H1"]}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.parser.ZDAParser#setTimeAndLocalZone()}.", "Heuristic": ["H1"]}, {"nl": "Retrieve the team object for the specified team name.", "Heuristic": []}, {"nl": "Gets the last header with the given name. Header name comparison is case insensitive.", "Heuristic": ["H1"]}, {"nl": "This method tells the object to use appropriate information to extract starting values for the animation. For example, a AnimatorSet object will pass this call to its child objects to tell them to set up the values. A ObjectAnimator object will use the information it has about its target object and PropertyValuesHolder objects to get the start values for its properties. An ValueAnimator object will ignore the request since it does not have enough information (such as a target object) to gather these values.", "Heuristic": ["H1"]}, {"nl": "Decomposes the provided matrix and stores the result in the same matrix.", "Heuristic": []}, {"nl": "Disconnects then reconnects.", "Heuristic": []}, {"nl": "Checks if a String is whitespace, empty or null.", "Heuristic": []}, {"nl": "Adds the pcl data unit.", "Heuristic": ["H1"]}, {"nl": "Formats a status line.", "Heuristic": []}, {"nl": "Returns the current maximum limit that was set on creation.", "Heuristic": []}, {"nl": "Get the key for this setting.", "Heuristic": []}, {"nl": "Gets the checks if is prepopulated.", "Heuristic": []}, {"nl": "Get the association ends.", "Heuristic": []}, {"nl": "Gets warnings (if triggered).", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Load 8 bytes into long in a little endian manner, from the substring between position and position + 8. The array must have at least 8 bytes from offset (inclusive).", "Heuristic": ["H1"]}, {"nl": "Gets all tierViews under this managerView.", "Heuristic": []}, {"nl": "Generic equality comparison.", "Heuristic": []}, {"nl": "Gets an instance of this class.", "Heuristic": []}, {"nl": "Calculates the hash of the hash of the contents. This is a standard operation in Bitcoin.", "Heuristic": []}, {"nl": "Used to report that the limit has been reached.", "Heuristic": []}, {"nl": "Return the JSSE provider.", "Heuristic": ["H1"]}, {"nl": "Runs the given  {@link Runnable} on the JavaFX Application Thread at some unspecified timein the future and returns a  {@link Future} that is set on finish or error.", "Heuristic": ["H1"]}, {"nl": "Gets the items.", "Heuristic": []}, {"nl": "Is the given schema instance valid according to the configured schema definition(s)?", "Heuristic": []}, {"nl": "See if the function throws an exception when it is given bad inputs", "Heuristic": []}, {"nl": "Obtains a scheme by name, if registered.", "Heuristic": []}, {"nl": "May draw over already added  {@link ITextureAtlasSource}MAGIC_CONSTANT.", "Heuristic": ["H1"]}, {"nl": "Returns the talker ID and sentence ID as a single String, ex: \"GPGGA\".", "Heuristic": ["H1"]}, {"nl": "We will cache window object in order to be able to provide parent shell for the message dialog.", "Heuristic": []}, {"nl": "Creates OAuth Authorization header containing consumer key and secret values only", "Heuristic": []}, {"nl": "Return the number of the workflows being returned.  For pagination purposes.", "Heuristic": []}, {"nl": "get succeeded elapsed.", "Heuristic": ["H1"]}, {"nl": "Return the digest value of all data processed up until this point.", "Heuristic": []}, {"nl": "Locates and decodes a MaxiCode in an image.", "Heuristic": []}, {"nl": "Gets the value of the shipTo property.", "Heuristic": []}, {"nl": "Tests the  {@link CompleteFileOptions#defaults()} method.", "Heuristic": ["H1"]}, {"nl": "Sleeps the given duration.", "Heuristic": []}, {"nl": "DELETE  /books/:id : delete the \"id\" book.", "Heuristic": ["H1"]}, {"nl": "Get the certificate constraints type", "Heuristic": []}, {"nl": "Closes the given  {@link InputStream}, logging any  {@code IOException} that's thrown rather thanpropagating it. While it's not safe in the general case to ignore exceptions that are thrown when closing an I/O resource, it should generally be safe in the case of a resource that's being used only for reading, such as an  {@code InputStream}. Unlike with writable resources, there's no chance that a failure that occurs when closing the stream indicates a meaningful problem such as a failure to flush all bytes to the underlying resource.", "Heuristic": ["H1"]}, {"nl": "Returns the signature service.", "Heuristic": []}, {"nl": "Sets the action type for this request", "Heuristic": []}, {"nl": "Enables/Disables incomplete block caching.", "Heuristic": []}, {"nl": "Registers the given  {@link NHttpRequestHandler} as a handler for URIsmatching the given pattern.", "Heuristic": ["H1"]}, {"nl": "Stops the producer", "Heuristic": []}, {"nl": "Here, we attempt to get the password from the private  alias/passwords map.", "Heuristic": ["H1"]}, {"nl": "Return the symbol after the dot.  If there is no symbol after the dot we return null.", "Heuristic": []}, {"nl": "Get all additional information to be sent to the serializer. Inserts a copy of the IdToken (in JWT String form).", "Heuristic": ["H1"]}, {"nl": "Returns true if the signature of the field designated by its name and the qualified name of its class is covered by the mask.", "Heuristic": []}, {"nl": "Gets the count.", "Heuristic": []}, {"nl": "Set the default Key Type to be issued for this Service", "Heuristic": []}, {"nl": "Set a service programmatically.  The service will be initialized by the services.  If a service is already defined with the same public interface it will be destroyed.", "Heuristic": []}, {"nl": "Returns an ACTIONS function for the incremental formulation of the n-queens problem.", "Heuristic": []}, {"nl": "Sets the value of the text property.", "Heuristic": []}, {"nl": "Sets the predecessor id.", "Heuristic": ["H1"]}, {"nl": "to know whether the gateway inuse", "Heuristic": ["H1"]}, {"nl": "This method will gets eligible work areas to perform IdentifyDupsFromUpdatesWithChecksumActivity.", "Heuristic": ["H1"]}, {"nl": "Optional.", "Heuristic": ["H2"]}, {"nl": "long time to string", "Heuristic": ["H1"]}, {"nl": "Returns a list of all owned product IDs.", "Heuristic": ["H1"]}, {"nl": "Removes all breakpoints.", "Heuristic": []}, {"nl": "Returns the initial state of the agent.", "Heuristic": []}, {"nl": "prints out usage information, with optional error message", "Heuristic": ["H1"]}, {"nl": "Get month, valid values are 1-12 where 1 denotes January, 2 denotes February etc.", "Heuristic": []}, {"nl": "Check that a string is not null and not empty. If null or emtpy throws an IllegalArgumentException.", "Heuristic": ["H1"]}, {"nl": "Returns services already added as trusted services.", "Heuristic": ["H1"]}, {"nl": "Inserts a new directory entry into the B-tree block. If the block is at level 0, then the entry is inserted there. Otherwise, the entry is inserted into the appropriate child node, and the return value is examined. A non-null return value indicates that the child node split, and so the returned entry is inserted into this block. If this block splits, then the method similarly returns the entry information of the new block to its caller; otherwise, the method returns null.", "Heuristic": []}, {"nl": "Places the 8 bits of a utah-shaped symbol character in ECC200.", "Heuristic": ["H1"]}, {"nl": "Specifies the character set to be used to display the session name and information data. By default, the ISO-10646 character set in UTF-8 encoding is used. If a more compact representation is required, other character sets may be used such as ISO-8859-1 for Northern European languages.", "Heuristic": []}, {"nl": "Sets the maximum number of threads to allow for background revalidations due to the  {@code stale-while-revalidate} directive.", "Heuristic": ["H1"]}, {"nl": "Convenience method which returns src[srcOff:?] decompressed. Warning: this method has an important overhead due to the fact that it needs to allocate a buffer to decompress into. Here is how this method is implemented:  final byte[] decompressed = new byte[destLen]; decompress(src, srcOff, decompressed, 0, destLen); return decompressed; ", "Heuristic": ["H1"]}, {"nl": " To decompose the matrix 'A' it must have full rank.  'A' is a 'm' by 'n' matrix. It requires about 2nm2-2m2/3 flops.   The matrix provided here can be of different dimension than the one specified in the constructor.  It just has to be smaller than or equal to it. ", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link JAXBElement }{@code }", "Heuristic": ["H1"]}, {"nl": "Return a new column vector in matrix form with all values set to 1.0.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Start Webserver in new Thread with RootTools on Boot if enabled in preferences", "Heuristic": ["H1"]}, {"nl": "Sends a text message to all of the numbers stored in the properties file.", "Heuristic": ["H1"]}, {"nl": "Returns  {@code true} if {@link #start()} has been called on this stopwatch, and {@link #stop()}has not been called since the last call to  {@code start()}.", "Heuristic": ["H1"]}, {"nl": "Returns the value of the field of the current data record.", "Heuristic": []}, {"nl": "This is to get expired tokens from token store", "Heuristic": []}, {"nl": "Adds wLen characters to the word being stemmed contained in a portion of a char[] array. This is like repeated calls of add(char ch), but faster.", "Heuristic": []}, {"nl": "Overload equalsImpl to find inadvertent overriding errors. Make package-scope and void to break callers.", "Heuristic": ["H1"]}, {"nl": "Edits an entry in the Event set. All changes are local; in order to persist them, the profile must be saved.", "Heuristic": []}, {"nl": "Converts one module descriptor to another format.", "Heuristic": []}, {"nl": "Serialize the Thrift object into a Java string, using a specified character set for encoding.", "Heuristic": []}, {"nl": "Generate a unqiue id", "Heuristic": ["H1"]}, {"nl": "Enable SSL communication between client application and authorization server (if you have selfish sign certificate)", "Heuristic": []}, {"nl": "Prepare the parser for a mirrored operation. This flag has effect only on the  {@link #readFormatInformation()} and the{@link #readVersion()}. Before proceeding with  {@link #readCodewords()} the{@link #mirror()} method should be called.", "Heuristic": ["H1"]}, {"nl": "Creates a new, global message id for a new COAP message", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos.Geo.City }", "Heuristic": ["H1"]}, {"nl": "Sets the run status.", "Heuristic": []}, {"nl": "Builds metric registry names for master instance. The pattern is instance.metricName.", "Heuristic": ["H1"]}, {"nl": "Computes the decomposition of the provided matrix.  If no errors are detected then true is returned, false otherwise.", "Heuristic": []}, {"nl": "Creates redeem script with given public keys and threshold. Given public keys will be placed in redeem script in the lexicographical sorting order.", "Heuristic": []}, {"nl": "Clear state data. Call if required to reuse an existing instance.", "Heuristic": []}, {"nl": "Updates step name in the fetcher run recorder before the step starts.", "Heuristic": []}, {"nl": "Get the cache use specified name and  {@link KeyGenerator}. Create cache if not existed yet.", "Heuristic": ["H1"]}, {"nl": "Returns a Calendar representing the issue date of this UBL OrderType.", "Heuristic": ["H1"]}, {"nl": "Returns the numeric value of a configuration property.", "Heuristic": []}, {"nl": "retrieve the entire namespace map.", "Heuristic": ["H1"]}, {"nl": "Serialize the Thrift object into a byte array. The process is simple, just clear the byte array output, write the object into it, and grab the raw bytes.", "Heuristic": []}, {"nl": "Sets the target object whose property will be animated by this animation. Not all subclasses operate on target objects (for example,  {@link ValueAnimator}, but this method is on the superclass for the convenience of dealing generically with those subclasses that do handle targets.", "Heuristic": ["H1"]}, {"nl": "Set the value of errorLevel", "Heuristic": []}, {"nl": "Scroll the wheel", "Heuristic": []}, {"nl": "Get the content type of the message.", "Heuristic": []}, {"nl": "Sets the value of the templateDescription property.", "Heuristic": []}, {"nl": "Tests to ensure  {@link SwiftOutputStream#write(byte[])} calls{@link OutputStream#write(byte[])}.", "Heuristic": ["H1"]}, {"nl": "Remove PropertyChangeListener.", "Heuristic": []}, {"nl": "Reads the number of method arguments", "Heuristic": []}, {"nl": "This method is used by the cache lookup to test type equality. May be overridden by subclasses as appropriate.", "Heuristic": []}, {"nl": "Removes the fish tagging.", "Heuristic": []}, {"nl": "This method removes the Server Engine from the port map and stops it.", "Heuristic": []}, {"nl": "Sets the elapsed time for this stopwatch to zero, and places it in a stopped state.", "Heuristic": []}, {"nl": "Sets the value of the project property.", "Heuristic": []}, {"nl": "Initialize the service.", "Heuristic": []}, {"nl": "Registers an action to invoke when the instance is set.  If the instance, has already been set, the onSet method will immedately be invoked.", "Heuristic": ["H1"]}, {"nl": "Sets the transport address used by  {@link org.apache.cxf.frontend.ServerFactoryBean}.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Reset the maximum amount of memory recorded.", "Heuristic": []}, {"nl": "Returns the segment being tracked.", "Heuristic": []}, {"nl": "Returns info such as OpenID server URL, OpenID Identifier pattern etc", "Heuristic": []}, {"nl": "Removes any temporary files associated with a particular native app call.", "Heuristic": []}, {"nl": "Flag indicating whether to print the type in a local declaration. This is used when pretty-printing for loops.", "Heuristic": []}, {"nl": "Append text to the end of the element.", "Heuristic": []}, {"nl": "Returns the integer value of the specified field. The value is obtained from whichever scan contains the field.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Create an instance of  {@link InputData }", "Heuristic": ["H1"]}, {"nl": "Moves the scan to its previously-saved position.", "Heuristic": []}, {"nl": "Landing Land the drone", "Heuristic": []}, {"nl": "Just a wrapper", "Heuristic": []}, {"nl": "Gets the description of this offender.", "Heuristic": []}, {"nl": "Return a  {@link org.apache.oozie.client.OozieClient} for LocalOozie. The returned instance is configured with the user name of the JVM (the value of the system property 'user.name').  The following methods of the client are NOP in the returned instance: {@link org.apache.oozie.client.OozieClient#validateWSVersion}, {@link org.apache.oozie.client.OozieClient#setHeader}, {@link org.apache.oozie.client.OozieClient#getHeader}, {@link org.apache.oozie.client.OozieClient#removeHeader}, {@link org.apache.oozie.client.OozieClient#getHeaderNames} and{@link org.apache.oozie.client.OozieClient#setSafeMode}.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.MTWParser#MTWParser(java.lang.String)}.", "Heuristic": ["H1"]}, {"nl": "Adds the status and error attribute values from the  {@link HttpStatus}value.", "Heuristic": ["H1"]}, {"nl": "Sets the checksum.", "Heuristic": []}, {"nl": "Returns the first 32 bits of the result of  {@link #getIdentifier()}.", "Heuristic": ["H1"]}, {"nl": "GET  /sites : get all the sites.", "Heuristic": ["H1"]}, {"nl": "Creates a new builder for creating a  {@link ShareToMessengerParams} instance", "Heuristic": ["H1"]}, {"nl": "Returns the value of the field of the current data record.", "Heuristic": []}, {"nl": "Scans list of base packages for all resources with the given extension.", "Heuristic": []}, {"nl": "Indicates if the GC executor is ready to process repositories.", "Heuristic": []}, {"nl": "Decrements by one the value currently associated with  {@code key}, and returns the new value.", "Heuristic": ["H1"]}, {"nl": "Returns the number of checkpoints that were loaded.", "Heuristic": []}, {"nl": "Starts scrolling", "Heuristic": ["H2"]}, {"nl": "Returns the outcome predicted for the specified example", "Heuristic": []}, {"nl": "Check if a given source file should be checked by rules in this RuleSets.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "A method annotated to test preflight.", "Heuristic": []}, {"nl": "Sets the volume.", "Heuristic": []}, {"nl": "Collects HTTP GET query string parameters as per OAuth Core 1.0 spec section 9.1.1", "Heuristic": []}, {"nl": "Remove entry from high level changes (renaming).", "Heuristic": []}, {"nl": "Returns the z component of the cross product between vectors BC and BA.", "Heuristic": []}, {"nl": "Returns the number of distinct field values, which is the same as in the underlying plan.", "Heuristic": []}, {"nl": "This method is called from Javascript, passing in the previously  created callback key. It uses that to find the correct handler and  then passes on the call. State events in the Google Maps API don't pass  any parameters.", "Heuristic": ["H1"]}, {"nl": "Creates a default  {@link CompleteUfsFileOptions} with owner, group from login module anddefault file mode.", "Heuristic": ["H1"]}, {"nl": "Sets the character stream and look ahead buffer to null.", "Heuristic": []}, {"nl": "Find the list of matching XML nodes and convert them into an array of instances of the provided class. The default JAXB MessageBodyReader is currently used  in case of non-primitive types.", "Heuristic": ["H1"]}, {"nl": "Returns the remote URL.", "Heuristic": []}, {"nl": "Gets the message that users receiving the request will see.", "Heuristic": []}, {"nl": "Waits until the heartbeat is scheduled for execution.", "Heuristic": []}, {"nl": "Print out all prefixes separated by \";\".", "Heuristic": []}, {"nl": "Returns the number of times  {@link #create(Object)} returned a value.", "Heuristic": ["H1"]}, {"nl": "Is this request the type of conditional request we support?", "Heuristic": []}, {"nl": "subtract two matrices using the above addition method. Matrices should be the same dimension.", "Heuristic": ["H1"]}, {"nl": "Set whether to use a KeyIdentifier to refer to this token", "Heuristic": []}, {"nl": "Check if input is a valid IP address", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMBParser#setStatus(DataStatus)}.", "Heuristic": ["H1"]}, {"nl": "Provide a default port if the parsed string contained only a host. You can chain this after  {@link #fromString(String)} to include a port in case the port wasomitted from the input string. If a port was already provided, then this method is a no-op.", "Heuristic": ["H1"]}, {"nl": "Find the OpenID corresponding to the given user name.", "Heuristic": ["H1"]}, {"nl": "Send test probe request based on previously create postMethod", "Heuristic": []}, {"nl": "Returns the Signature Element Node", "Heuristic": []}, {"nl": "Set whether to use direct reference to refer to this token", "Heuristic": []}, {"nl": "Returns the seed as hex or null if encrypted.", "Heuristic": []}, {"nl": "Helper for success callbacks that just returns the Status.OK by default", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.VHWParser#getMagneticHeading()}.", "Heuristic": ["H1"]}, {"nl": "cleanup state before each test method", "Heuristic": ["H1"]}, {"nl": "Returns true if this setting was persisted.", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.util.Time#getSeconds()}.", "Heuristic": ["H1"]}, {"nl": "Reads the setting from the options hash. If it is nil or undefined, returns the default value given. If not, ensures it is a RubyClass instance and shares the same allocator as the default value (i.e. for the basic types which have their specific allocators, this ensures the passed value is a subclass of them).", "Heuristic": []}, {"nl": "Associates the specified range with the specified value.", "Heuristic": []}, {"nl": "Called to check if more characters are expected in the free part of the token.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns result of recursive comparison of all the nodes of a control and test element.", "Heuristic": []}, {"nl": "Returns true, because a constant applies to any schema.", "Heuristic": []}, {"nl": "Adds or removes a block from the to-be-removed blocks set of the worker.", "Heuristic": []}, {"nl": "Devuelve los authorities del rol", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Registers a listener that is notified of each comparison with outcome  {@link ComparisonResult#EQUAL}.", "Heuristic": ["H1"]}, {"nl": "Destroy the service.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#getAcquisitionType()} .", "Heuristic": ["H1"]}, {"nl": "Set the state's AST.", "Heuristic": []}, {"nl": "Returns a list of names for the files and folders in the current Box directory", "Heuristic": []}, {"nl": "Gets the value of the filepath property.", "Heuristic": ["H1"]}, {"nl": "Sets the requested scope", "Heuristic": []}, {"nl": "Releases the buffer a test ran.", "Heuristic": []}, {"nl": "Tries to pull the referenced scripts from the remote gitblit instance.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the fail property.", "Heuristic": []}, {"nl": "Returns the TrustManagers associated with the endpoint.", "Heuristic": []}, {"nl": "This is the only permission that can allow access to a resource without being authenticated.", "Heuristic": []}, {"nl": "Check the current memory usage and record it if it is higher than the amount of memory previously recorded.", "Heuristic": []}, {"nl": "Check SMTP login credentials", "Heuristic": []}, {"nl": "Deletes the alternate under file system directory.", "Heuristic": []}, {"nl": "is null or its size is 0  isEmpty(null)   =   true; isEmpty({})     =   true; isEmpty({1})    =   false; ", "Heuristic": ["H1"]}, {"nl": " Append a hashCode for a boolean.   This adds iConstant  1 to the hashCode and not a 1231 or 1237 as done in java.lang.Boolean. This is in accordance with the Effective Java design. ", "Heuristic": ["H1"]}, {"nl": "Indicates if Response may still be expected for oneway requests. For example, 202 in case of HTTP", "Heuristic": ["H1"]}, {"nl": "Sets consoleMode to true and tries to infer showProgress mode from args. If an argument  with name \"--noprogress\" is found, then showProgress is set to false", "Heuristic": ["H1"]}, {"nl": "Returns the units of measurement.", "Heuristic": []}, {"nl": "Connect timeout in milliseconds. Default 120 secs.", "Heuristic": []}, {"nl": "Does any Rule for the given Language use the Metrics Framework?", "Heuristic": ["H1"]}, {"nl": "Add a new declaration to the current scope. This is visible within the current scope as well as from any nested scopes.", "Heuristic": []}, {"nl": "Warning log message.", "Heuristic": []}, {"nl": "Returns true if the request contains conditions that save the server from sending a response that the client has locally. When the caller adds conditions, this cache won't participate in the request.", "Heuristic": []}, {"nl": "Creates an instance of  {@link HeapByteBufferAllocator} to be usedby HTTP connections for allocating  {@link java.nio.ByteBuffer} objects. This method can be overridden in a super class in order to provide a different implementation of the  {@link ByteBufferAllocator} interface.", "Heuristic": ["H1"]}, {"nl": "Obtains the decimal value for a hex value encoded in ASCII", "Heuristic": []}, {"nl": "Parse a  {@link String} into a {@link Date} according to theHTTP/1.1 RFC (Mon, 31 Jan 2000 11:59:00 GMT).", "Heuristic": ["H1"]}, {"nl": "Gets local file's group.", "Heuristic": []}, {"nl": "Returns true once the end of the group containing the upr command as been reached.", "Heuristic": ["H1"]}, {"nl": "Adds view to cache. Determines view type (item view or empty one) by index.", "Heuristic": []}, {"nl": "Removes all buckets in the set.", "Heuristic": []}, {"nl": "Pauses the current thread until the AsyncResponse is in a completed or cancelled status OR the specified timeout (in milliseconds) has elapsed. If the timeout value is zero (0), then wait indefinitely for the AsyncResponse to be completed or cancelled.", "Heuristic": ["H1"]}, {"nl": "ints.", "Heuristic": ["H1", "H2"]}, {"nl": "Control the access permission assigned to this key.", "Heuristic": []}, {"nl": "Converts a Set into a List", "Heuristic": []}, {"nl": "Remove a node from the open list", "Heuristic": []}, {"nl": "Get the token", "Heuristic": []}, {"nl": "Returns the MasterBlockInfo of the first block of the file.", "Heuristic": []}, {"nl": "Return the UUIDManager.", "Heuristic": []}, {"nl": "Gets the public URI of the third-party application.", "Heuristic": []}, {"nl": "Gets the user ID or user name the request will be sent to.", "Heuristic": ["H1"]}, {"nl": "Set the permission bits of a file. The permission bits are set to the provided mode. This method is only implemented for OSes of the Unix family and makes use of the 'chmod' function of the native C library. See 'man 2 chmod' for more information.", "Heuristic": ["H1"]}, {"nl": "If we are running in testnet-in-a-box mode, we allow connections to nodes with 0 non-genesis blocks.", "Heuristic": ["H1"]}, {"nl": "Add a command to the parser.", "Heuristic": []}, {"nl": "Creates a  {@link User} and sets it to the {@link ThreadLocal} variable.", "Heuristic": ["H1"]}, {"nl": "Executes a DESCRIBE query.", "Heuristic": []}, {"nl": "Reload value from properties object", "Heuristic": []}, {"nl": "Get the system proxy (if any) for the given URL's host.", "Heuristic": []}, {"nl": "Emojicon provider", "Heuristic": ["H1", "H2"]}, {"nl": "Creates a unique path based off the caller.", "Heuristic": []}, {"nl": "Converts a wire type to a thrift type.", "Heuristic": []}, {"nl": "Gets the link attribute of the StandardAttributeResolver object", "Heuristic": []}, {"nl": "contains key.", "Heuristic": ["H1", "H2"]}, {"nl": "Create an instance of  {@link BrowseOffersResponse.Return.OfferData.OfferMedia.OfferImage.Entry.Value.Item }", "Heuristic": ["H1"]}, {"nl": "Resets the client to its initial state, re-initializing Alluxio and Hadoop contexts. This method should only be used as a cleanup mechanism between tests. It should not be used while any object may be using the  {@link ClientContext}.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Converts an action to a JSONObject. NOTE: All images are removed from the JSON representation and must be added to the builder separately.", "Heuristic": []}, {"nl": "Free the internal buffer cache for  {@link #reliablyCopyExecutable}.", "Heuristic": ["H1"]}, {"nl": "Returns true if the given port exists in the given ports list.", "Heuristic": []}, {"nl": "Returns a  {@link DockerResource} for the provided location.", "Heuristic": ["H1"]}, {"nl": "Gets the checks if is update.", "Heuristic": []}, {"nl": "Interrupt the current action, e.g. the user pressed the back key while drawing a line.", "Heuristic": []}, {"nl": "Tests  {@link BaseKeyValuePartitionWriter#close()} after{@link BaseKeyValuePartitionWriter#cancel()}, expecting a close is a no-op after the previous cancel.", "Heuristic": ["H1"]}, {"nl": "Gets an int value out of the object.", "Heuristic": []}, {"nl": "Check to see if the next entry is compatible with the requested type. \\param asking the format type to match. \\param consume indicates whether to update the stream position.", "Heuristic": ["H1"]}, {"nl": "Returns a cached sheet by its key; loads and caches it if not in cache; null if not able to load", "Heuristic": []}, {"nl": "Gets a set of currently locked blocks.", "Heuristic": []}, {"nl": "Gets the preview image url.", "Heuristic": ["H1"]}, {"nl": "Adds automatically generated basenames for the given class.", "Heuristic": ["H1"]}, {"nl": "Sets the implementation of GridSampler used by the library. One global instance is stored, which may sound problematic. But, the implementation provided ought to be appropriate for the entire platform, and all uses of this library in the whole lifetime of the JVM. For instance, an Android activity can swap in an implementation that takes advantage of native platform libraries.", "Heuristic": []}, {"nl": "start the sender thread", "Heuristic": ["H1"]}, {"nl": "Get the index of a plugin", "Heuristic": []}, {"nl": "Writes out the flow policy component of the RIFL document", "Heuristic": ["H1"]}, {"nl": "Add a long field to the stream. \\param value The long value to be added.", "Heuristic": ["H1"]}, {"nl": "Used to limit the number of internal QR iterations that the QR algorithm performs.  20 should be enough for most applications.", "Heuristic": []}, {"nl": "Gives the position one step in the specified direciton.", "Heuristic": ["H1"]}, {"nl": "Return the total time in seconds for all tasks.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Add mapping between Uri path and raw SQL. It could contains 3 formatter specifiers like %s for projection, selection and sortOrder respectively.", "Heuristic": ["H1"]}, {"nl": "Create the page for the given position.  The adapter is responsible for adding the view to the container given here, although it only must ensure this is done by the time it returns from {@link #finishUpdate(ViewGroup)}.", "Heuristic": []}, {"nl": "Remove a single symbol if it is in the set.", "Heuristic": []}, {"nl": "Un register the SMSCMessageObserver so that Observer will not notifed of new Shot Message arrivals after that", "Heuristic": ["H1"]}, {"nl": "Obtains a  {@link ParameterList} of the body parameters.", "Heuristic": ["H1"]}, {"nl": "Computes the eigenvalue of the provided tridiagonal matrix.  Note that only the upper portion needs to be tridiagonal.  The bottom diagonal is assumed to be the same as the top.", "Heuristic": ["H1"]}, {"nl": "create SheetObject from XLSBeans  instantiate XLSBeans call load method ", "Heuristic": ["H1"]}, {"nl": "Add edge between to nodes.", "Heuristic": []}, {"nl": "Test method for  {@link ActivityController#handleEvent(org.osgi.service.event.Event)}Verifies that  {@code IllegalArgumentException} is thrown when {@code Event}'s  {@link ActivityEvent#ID_KEY}property is null.", "Heuristic": ["H1"]}, {"nl": "A static factory method to create a  {@link DStreamJavaFunctions} based on an existing{@link DStream} instance.", "Heuristic": ["H1"]}, {"nl": "Clears buffer.", "Heuristic": ["H2"]}, {"nl": "Check if a given location is valid for the supplied mover", "Heuristic": []}, {"nl": "Subclasses of  {@link ViewManager} that expect to receive commands through{@link UIManagerModule#dispatchViewManagerCommand} should override this method returning themap between names of the commands and IDs that are then used in  {@link #receiveCommand} methodwhenever the command is dispatched for this particular  {@link ViewManager}. As an example we may consider  {@link ReactWebViewManager} that expose the following commands:goBack, goForward, reload. In this case the map returned from  {@link #getCommandsMap} from{@link ReactWebViewManager} will look as follows:{ \"goBack\": 1, \"goForward\": 2, \"reload\": 3, } Now assuming that \"reload\" command is dispatched through  {@link UIManagerModule} we trigger{@link ReactWebViewManager#receiveCommand} passing \"3\" as {@code commandId} argument.", "Heuristic": ["H1"]}, {"nl": "This method is called from Javascript, passing in the previously  created callback key, and the event object. The current implementation  is receiving the LatLng object that the Javascript MouseEvent contains.   It may be more useful to return the MouseEvent and let clients go from  there, but there is only the stop() method on the MouseEvent?", "Heuristic": ["H1"]}, {"nl": "Returns the constant, regardless of the scan.", "Heuristic": []}, {"nl": "Gets the metadata to attach to the content to shared. See developer docs for more info.", "Heuristic": []}, {"nl": "get contact list", "Heuristic": ["H1"]}, {"nl": "Create a normalized column vector in matrix form of the passed in column vector.", "Heuristic": []}, {"nl": "Release the lock on the {link #getEntityKey}.", "Heuristic": []}, {"nl": "Here, we attempt to get the password from the private alias/passwords map.", "Heuristic": []}, {"nl": "Hex encode the byte data writing it to the given output stream.", "Heuristic": []}, {"nl": "Consumer is required to do any privilege checks before getting here", "Heuristic": []}, {"nl": "Assert that an object is  {@code null} .Assert.isNull(value);", "Heuristic": ["H1"]}, {"nl": "Return the phone Number that SMS must be received to", "Heuristic": []}, {"nl": "Allows the caller to see the event at the end of the buffer.", "Heuristic": []}, {"nl": "Initializes only the file manager.", "Heuristic": []}, {"nl": "This is used internally by the  {@link Spring}s created by this  {@link BaseSpringSystem} to notifyit has reached a state where it needs to be iterated. This will add the spring to the list of active springs on this system and start the iteration if the system was idle before this call.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the responseType property.", "Heuristic": []}, {"nl": "Shares the SPDY connection with the pool. Callers to this method may continue to use  {@code connection}.", "Heuristic": ["H1"]}, {"nl": "Adds a block to the worker.", "Heuristic": []}, {"nl": "Accessor for the user ID.", "Heuristic": ["H1"]}, {"nl": "Wait until an Cluster no longer exists.", "Heuristic": ["H1"]}, {"nl": "Invoked when the connection associated with the given client has been invalidated. No further requests will come from this client.", "Heuristic": []}, {"nl": "sets the model to save to db", "Heuristic": ["H1"]}, {"nl": "Sets the value of the publicKey property.", "Heuristic": []}, {"nl": "Number of threads used in the client thread pool. Default to 0, which is 2x#cores.", "Heuristic": []}, {"nl": "Tests that building a  {@link LoadMetadataOptions} with the defaults works.", "Heuristic": ["H1"]}, {"nl": "Encode the byte data to base 64 writing it to the given output stream.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.ZDAParser#setLocalZoneHours()}.", "Heuristic": ["H1"]}, {"nl": "Get a File Filter for directories or for files with the given extensions, ignoring case.", "Heuristic": []}, {"nl": "Map values from the Origami POP Animation patch, which are based on a bounciness and speed value.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Get the set of properties for this DB.", "Heuristic": []}, {"nl": "Checks if tcpdump is running", "Heuristic": ["H1"]}, {"nl": "Writes any object to the output stream.", "Heuristic": []}, {"nl": "Returns the file id for a given path. If the given path does not exist in Alluxio, the method attempts to load it from UFS.", "Heuristic": ["H1"]}, {"nl": "Initialize any state for a particular client thread. Since the scenario object will be shared among all threads, this is the place to create any state that is specific to one thread. To be clear, this means the returned object should be created anew on each call to initThread(); do not return the same object multiple times.  The returned object will be passed to invocations of doInsert() and doTransaction()  for this thread. There should be no side effects from this call; all state should be encapsulated in the returned object. If you have no state to retain for this thread, return null. (But if you have no state to retain for this thread, probably you don't need to override initThread().)", "Heuristic": ["H1"]}, {"nl": "Gets the value of the id property.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the position property.", "Heuristic": []}, {"nl": "Tests the  {@link StorageDirView#getCommittedBytes()} method.", "Heuristic": ["H1"]}, {"nl": "Accesses the SDP as an array of bytes.", "Heuristic": []}, {"nl": "Sets whether the ROI is a deletion or amplification Use Gistic.AMPLIFIED and Gistic.DELETED", "Heuristic": ["H1"]}, {"nl": "Gets the value of the someMeasure property.", "Heuristic": ["H1"]}, {"nl": "Get the exising panel at step s. Step 1 is the first wizard panel.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Return list of covers", "Heuristic": []}, {"nl": "Gets a filtered list of block metadata, for blocks that are neither pinned or being blocked.", "Heuristic": ["H1"]}, {"nl": "Flushes the output.", "Heuristic": []}, {"nl": "Assets if the connection is still open.", "Heuristic": []}, {"nl": "Determines if the current message is an empty partial response, which is a partial response with an empty content.", "Heuristic": []}, {"nl": "Specifies that each value (not key) stored in the map should be wrapped in a {@link WeakReference} (by default, strong references are used).Weak values will be garbage collected once they are weakly reachable. This makes them a poor candidate for caching. Warning: when this method is used, the resulting map will use identity ( {@code ==}) comparison to determine equality of values. This technically violates the specifications of the methods  {@link Map#containsValue containsValue},  {@link ConcurrentMap#remove(Object,Object) remove(Object, Object)} and {@link ConcurrentMap#replace(Object,Object,Object) replace(K, V,V)}, and may not be what you expect.", "Heuristic": ["H1"]}, {"nl": "the CSS condition [attribute=value]", "Heuristic": ["H1"]}, {"nl": "Returns the header extractor.", "Heuristic": []}, {"nl": "Returns the Intent that was used to initiate this call to the Facebook application.", "Heuristic": []}, {"nl": "Gets the value of the totalTC property.", "Heuristic": []}, {"nl": "Note: This is only available in  {@link BlockStoreMeta#getBlockStoreMetaFull}.", "Heuristic": ["H1"]}, {"nl": "Initialize the service.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Factory method for creating a test factory.", "Heuristic": []}, {"nl": "Optional. The maximum number of entities that are allowed in the scaling group. If unconfigured, defaults to 1000. If this parameter is provided it must be set to an integer between 0 and 1000.", "Heuristic": ["H1"]}, {"nl": "Test method for being able to return Yes(Y) or No(N) {@link com.sqa.em.util.helper.RequestInput#getBoolean(java.lang.String)}.", "Heuristic": ["H1"]}, {"nl": "Set the Msg value.", "Heuristic": []}, {"nl": "Sets the list of out interceptors which post-process  the requests to the remote services.", "Heuristic": ["H1"]}, {"nl": "Initiates a scan for all known barcode types.", "Heuristic": []}, {"nl": "Set the signature algorithm to use", "Heuristic": []}, {"nl": "Creates an instance of  {@link ToStringHelper} in the same manner as{@link #toStringHelper(Object)}, but using the simple name of  {@code clazz} instead of using aninstance's  {@link Object#getClass()}. Note that in GWT, class names are often obfuscated.", "Heuristic": ["H1"]}, {"nl": "Test of getImgName method, of class Device.", "Heuristic": ["H1"]}, {"nl": "Specifies the Content-Encoding header. The default implementation sets the value of the {@link #contentEncoding contentEncoding} attribute.", "Heuristic": ["H1"]}, {"nl": "Gets the scheme of the  {@link AlluxioURI}.", "Heuristic": ["H1"]}, {"nl": "Creates a new root block for the B-tree. The new root will have two children: the old root, and the specified block. Since the root must always be in block 0 of the file, the contents of the old root will get transferred to a new block.", "Heuristic": []}, {"nl": "Closes the scan by closing its LHS scan and its RHS index.", "Heuristic": []}, {"nl": "Is the Gene Homozygously Deleted at the Copy Number Level?", "Heuristic": ["H1"]}, {"nl": "Check if the user approval bypass setting has made in the identity.xml", "Heuristic": []}, {"nl": "Saves a matrix to disk using Java binary serialization.", "Heuristic": []}, {"nl": "Sets the value of the name property.", "Heuristic": []}, {"nl": "Gets the list of protein array target with the Specified entrez gene ID.", "Heuristic": ["H1"]}, {"nl": "Return true if this TokenProvider implementation is capable of providing a token that corresponds to the given TokenType.", "Heuristic": []}, {"nl": "Returns date from request.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RTEParser#getSentenceCount()}.", "Heuristic": ["H1"]}, {"nl": "Prints information about the Seller.", "Heuristic": []}, {"nl": "Indicates that no more items will be added to the queue, no more items currently in the queue will be loaded, and that worker threads polling this queue should shut down.", "Heuristic": []}, {"nl": "Inserts a new, blank record somewhere in the page. Return false if there were no available slots.", "Heuristic": []}, {"nl": "Returns true if the specified sentence is satisfiable. A sentence is satisfiable if it is true in, or satisfied by, some model.", "Heuristic": ["H1"]}, {"nl": "See if the function can be called with matrices of the correct size", "Heuristic": []}, {"nl": "Returns dividend % divisor, where the dividend and divisor are treated as unsigned 32-bit quantities.", "Heuristic": []}, {"nl": "If  {@code (key, expectedOldValue)} is currently in the map, this method replaces{@code expectedOldValue} with {@code newValue} and returns true; otherwise, this methodreturns false. If  {@code expectedOldValue} is zero, this method will succeed if {@code (key, zero)}is currently in the map, or if  {@code key} is not in the map at all.", "Heuristic": ["H1"]}, {"nl": "Returns an immutable set of all nine primitive types (including  {@code void}). Note that a simpler way to test whether a  {@code Class} instance is a member of thisset is to call  {@link Class#isPrimitive}.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Formats a name-value pair.", "Heuristic": []}, {"nl": "Clears all marks of blocks to move in/out in all dir views.", "Heuristic": ["H1"]}, {"nl": "Sets the checksum type.", "Heuristic": []}, {"nl": "Determines the index of the next header.", "Heuristic": []}, {"nl": "Sets the id.", "Heuristic": ["H1"]}, {"nl": "check if sdcard exist", "Heuristic": ["H1"]}, {"nl": "Shows a (long) toast.", "Heuristic": []}, {"nl": "Tests that writing past a block throws an exception.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Set checkbox selected", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "toDtoList - convert List of Stocks to list of Stock DTO", "Heuristic": ["H1"]}, {"nl": "Read turtle file to jena model.", "Heuristic": ["H1"]}, {"nl": "get current time in milliseconds", "Heuristic": ["H1"]}, {"nl": "Set an action view for this menu item. An action view will be displayed in place of an automatically generated menu item element in the UI when this item is shown as an action within a parent.", "Heuristic": []}, {"nl": "URL relative to which URIs are resolved.", "Heuristic": []}, {"nl": "Creates (and starts) a new stopwatch, using the specified time source.", "Heuristic": []}, {"nl": "Updates the best value to the server to the given newValue and newSignature without any checking. Does NOT notify the wallet of an update to the  {@link StoredPaymentChannelServerStates}.", "Heuristic": ["H1"]}, {"nl": "Positions the scan before the first record. That is, the LHS scan will be positioned at its first record, and the index will be positioned before the first record for the join value.", "Heuristic": []}, {"nl": "Returns all result values.", "Heuristic": []}, {"nl": "Returns the connection charset. Defaults to  {@link Charset} defaultCharset if not set", "Heuristic": ["H1"]}, {"nl": "The type of the value as defined by the constants specified above.", "Heuristic": []}, {"nl": "Sets the value of the isRequired property.", "Heuristic": ["H1"]}, {"nl": "Gets the executor callable.", "Heuristic": []}, {"nl": "Returns the index within this buffer of the first occurrence of the specified byte, starting the search at 0 and finishing at  {@link #length()}. If no such byte occurs in this buffer within those bounds, -1 is returned.", "Heuristic": ["H1"]}, {"nl": "Convenience method that can decode a QR Code represented as a 2D array of booleans. \"true\" is taken to mean a black module.", "Heuristic": ["H1"]}, {"nl": "Calculates the new value for the accumulated mean when a value is added, in the case where at least one of the previous mean and the value is non-finite.", "Heuristic": []}, {"nl": "Return EntityManager", "Heuristic": []}, {"nl": "Find the OpenID corresponding to the given user name.", "Heuristic": ["H1"]}, {"nl": "Generates an activation key.", "Heuristic": []}, {"nl": "logs the message and Throwable prepended by the filter name (copy of  {@link GenericServlet#log(String,Throwable)})", "Heuristic": ["H1"]}, {"nl": "add text and icon to the map", "Heuristic": ["H1"]}, {"nl": "Optional.", "Heuristic": ["H2"]}, {"nl": "Write the given long value (64-bit) in big-endian order to the buffer", "Heuristic": []}, {"nl": "Sets the value of the subjectDN property.", "Heuristic": []}, {"nl": "It attempts to get the password from the private  alias/passwords map.", "Heuristic": ["H1"]}, {"nl": "Resets the buffer.", "Heuristic": []}, {"nl": "Returns the identifier for this event bus.", "Heuristic": []}, {"nl": "sorts array using Merge Sort Algorithm", "Heuristic": ["H1"]}, {"nl": "Sets the value of the responseType property.", "Heuristic": []}, {"nl": "Factory method, responsible for way filter creation.", "Heuristic": []}, {"nl": "Set the Id for a place to tag with this content.", "Heuristic": ["H1"]}, {"nl": "gets the table corresponding to the char passed", "Heuristic": ["H1"]}, {"nl": "Find the attribute or simple/text node", "Heuristic": []}, {"nl": "Called from within  {@link java.awt.EventDispatchThread}when an unhandled exception occurs in the Awt event queue.", "Heuristic": ["H1"]}, {"nl": "Converts one row of luminance data to 1 bit data. May actually do the conversion, or return cached data. Callers should assume this method is expensive and call it as seldom as possible. This method is intended for decoding 1D barcodes and may choose to apply sharpening.", "Heuristic": []}, {"nl": "Get the TProtocol being used as the input (read) protocol.", "Heuristic": []}, {"nl": "Provide number of REJECT decisions for LOH or Wild Type Mutations.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the decimal property.", "Heuristic": []}, {"nl": "Gets the file count.", "Heuristic": []}, {"nl": "Is the default locale right-to-left?", "Heuristic": []}, {"nl": "Converts a thrift type to a wire type.", "Heuristic": []}, {"nl": "Configures the given map maker to use weak keys, if possible; does nothing otherwise (i.e., in GWT). This is sometimes acceptable, when only server-side code could generate enough volume that reclamation becomes important.", "Heuristic": ["H1"]}, {"nl": "Get the components for the settings tab.", "Heuristic": []}, {"nl": "Adds a child node to the node.", "Heuristic": []}, {"nl": "Gets the value of the usPrice property.", "Heuristic": ["H1"]}, {"nl": "getter for the ordened p-values.", "Heuristic": ["H1"]}, {"nl": "Gets the port of the  {@link AlluxioURI}.", "Heuristic": ["H1"]}, {"nl": "Get the client's error - returns null if no error", "Heuristic": []}, {"nl": "Returns a  {@link org.xhtmlrenderer.css.sheet.PropertyDeclaration} by CSSproperty name, e.g. \"font-family\". Properties are already cascaded during instantiation, so this will return the actual property (and corresponding value) to use for CSS-based layout and rendering.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link ClientRWLock#lockInterruptibly()} method.", "Heuristic": ["H1"]}, {"nl": "Check for empty Response", "Heuristic": []}, {"nl": "Usually you should set up application in the  {@link android.app.Application#onCreate()}", "Heuristic": ["H1"]}, {"nl": "The problem's message.", "Heuristic": []}, {"nl": "Returns the current count.", "Heuristic": []}, {"nl": "Obtains value of the  {@link CoreConnectionPNames#SO_LINGER} parameter.If not set, defaults to -1.", "Heuristic": ["H1"]}, {"nl": "Returns a list of the genes in the ROI", "Heuristic": []}, {"nl": "Gets the host of the  {@link AlluxioURI}.", "Heuristic": ["H1"]}, {"nl": "Returns the list of registration results.", "Heuristic": []}, {"nl": "Gets the data unit compare key.", "Heuristic": []}, {"nl": "Just a wrapper to  {@link #isBlank(String)}.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Sets the list of access token grant types this client can use to obtain the access tokens.", "Heuristic": []}, {"nl": " Append a hashCode for a short. ", "Heuristic": []}, {"nl": "Set the keystore and password", "Heuristic": ["H1"]}, {"nl": "Atomically remove  {@code key} from the map iff its associated value is 0.", "Heuristic": ["H1"]}, {"nl": "Creates a new NMEA serial port reader. The implementation uses reflection to create an instance of class aimax.osm.gps.NmeaSerialPortReader. Null is returned, if the class does not exist, but no compilation error.", "Heuristic": ["H1"]}, {"nl": "Sets the expected value.", "Heuristic": []}, {"nl": "Get MessageId from WS Addressing properties", "Heuristic": ["H1"]}, {"nl": "Attempts to wait for events in the JavaFX event thread to complete, as well as any new events triggered by them.", "Heuristic": []}, {"nl": "User Login Find user at databases by email", "Heuristic": []}, {"nl": "Gets the src unique file name.", "Heuristic": []}, {"nl": "Reset the client context.", "Heuristic": []}, {"nl": "Returns true if the currently set media type is paged. Currently returns true only for print , projection , and embossed , handheld , and tv . See the media section of the CSS 2.1 spec for more information on media types.", "Heuristic": ["H1"]}, {"nl": "Get the hemisphere of latitude, North or South.", "Heuristic": []}, {"nl": "Called when a message is first received prior to any actions being applied to the message.   The InterceptorChain is setup so modifications to that can be done.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Register the given directory, and all its sub-directories, with the WatchService.", "Heuristic": ["H1"]}, {"nl": "Sets up a circular chain of pointers to the records in the page. There is an integer added to the end of each log record whose value is the offset of the previous log record. The first four bytes of the page contain an integer whose value is the offset of the integer for the last log record in the page.", "Heuristic": []}, {"nl": "This sets the secure random provider and algorithm. If left unset or set to null, it uses the system default.", "Heuristic": []}, {"nl": "Clears out any references to elements or items created by this factory so far.", "Heuristic": []}, {"nl": "Moves to the next leaf record having the  previously-specified search key. Returns false if there is no more such records.", "Heuristic": ["H1"]}, {"nl": "Override the specified key with the specified value.", "Heuristic": []}, {"nl": "Parses  {@code ArrayList} into {@code String[]}.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the user property.", "Heuristic": []}, {"nl": "Obtains the host string, without scheme prefix.", "Heuristic": []}, {"nl": "This should be a valid IP address.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RTEParser#setSentenceIndex(int)}.", "Heuristic": ["H1"]}, {"nl": "Returns the contents of the InputStream as a byte array.", "Heuristic": []}, {"nl": "Create a sub-component of an existing configuration key.", "Heuristic": ["H1"]}, {"nl": "Test of getCapabilityBlock method, of class Device.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Tells if all fields in this measurement are empty (null).", "Heuristic": []}, {"nl": "The hash of the transaction to which we refer", "Heuristic": []}, {"nl": "Activate the capabilities of glasspane", "Heuristic": ["H1"]}, {"nl": "Positions the scan before the first record in sorted order. Internally, it moves to the first record of each underlying scan. The variable currentscan is set to null, indicating that there is no current scan.", "Heuristic": ["H1"]}, {"nl": "Reads a code of length 8 in an array of bits, padding with zeros", "Heuristic": []}, {"nl": "64 bit FNV hash. Produces more \"random\" hashes than (say) String.hashCode().", "Heuristic": ["H1"]}, {"nl": "Return the error message for an action.", "Heuristic": []}, {"nl": "Stop the tracker.", "Heuristic": []}, {"nl": "Tests the read(byte[], int, int) method.", "Heuristic": []}, {"nl": "Returns the current reading paused timeout.", "Heuristic": []}, {"nl": "Writes a setInt record to the log. This log record contains the SETINT operator, followed by the transaction id, the filename, number, and offset of the modified block, and the previous integer value at that offset.", "Heuristic": ["H1"]}, {"nl": "Cancels the animation. It is possible for this to be called after finish() and should handle that gracefully.", "Heuristic": []}, {"nl": "Enforce that Assertions must be signed if the POST binding was used. The default is true.", "Heuristic": []}, {"nl": "Returns the tenant domain of the user", "Heuristic": []}, {"nl": "Calculates the size of the specified integer or string.", "Heuristic": []}, {"nl": "Shut down auto-saving.", "Heuristic": []}, {"nl": "Releases the read lock for this inode.", "Heuristic": ["H1"]}, {"nl": "Gets number of  first item", "Heuristic": ["H1"]}, {"nl": "This call is used to set the bus. It should only be called once.", "Heuristic": []}, {"nl": "Checks if a node with the given payload is in the DAG.", "Heuristic": []}, {"nl": "Cleans up the underfs cluster test folder only.", "Heuristic": ["H1"]}, {"nl": "Call after examining child nodes, ie before returning back one level of indentation from DOM. Any subsequent call to  {@link #visited visited} is assumedto belong to nodes one level closer to the root of the tree than the nodes visited before calling  {@link #outdent outdent}.", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link BrowseOffersResponse.Return.OfferData.Geo.Region.Country }", "Heuristic": ["H1"]}, {"nl": "Get the list of namespaces as a JSON string, for injection into the JavaScript UI", "Heuristic": ["H1"]}, {"nl": "Clean out the listeners registered before. The default implementation is to remove all listeners  that were remembered by the utility functions below.", "Heuristic": ["H1"]}, {"nl": "Sets group bits.", "Heuristic": []}, {"nl": "Accessor for the RelatesTo property.", "Heuristic": ["H1"]}, {"nl": "Description of the Method", "Heuristic": []}, {"nl": "Adjusts the transformation.", "Heuristic": []}, {"nl": "Returns the HTTP response code from the origin  {@link HttpResponse}.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the displayName property.", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.util.Date#setMonth(int)}.", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos.Geo.Country }", "Heuristic": ["H1"]}, {"nl": "Creates an instance of  {@link HeapByteBufferAllocator} to be usedby HTTP connections for allocating  {@link java.nio.ByteBuffer} objects. This method can be overridden in a super class in order to provide a different implementation of the  {@link ByteBufferAllocator} interface.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the password property.", "Heuristic": []}, {"nl": "Sets the scope explicitly approved by the end user", "Heuristic": []}, {"nl": "Removes the given connection from the list of connections to be closed when idle. This will return true if the connection is still valid, and false if the connection should be considered expired and not used.", "Heuristic": []}, {"nl": "Gets the optional login name; can be used  for enforcing the RBAC rules", "Heuristic": ["H1"]}, {"nl": "Strafe left.", "Heuristic": ["H2"]}, {"nl": "Required. The minimum number of entities in the scaling group. This number must be an integer between 0 and 1000.", "Heuristic": []}, {"nl": "DELETE  /sites/:id : delete the \"id\" site.", "Heuristic": ["H1"]}, {"nl": "Returns true if the field is in the specified schema.", "Heuristic": []}, {"nl": "Returns the creation date of the certificate with the given alias", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.util.Date#setDay(int)}.", "Heuristic": ["H1"]}, {"nl": "How much time in seconds is supposed to pass between \"interval\" blocks. If the actual elapsed time is significantly different from this value, the network difficulty formula will produce a different value. Both test and main Bitcoin networks use 2 weeks (1209600 seconds).", "Heuristic": []}, {"nl": "Change specified Progress Bar Visibility or Indeterminate Progress Bar", "Heuristic": []}, {"nl": "Accessor for the integer identifier for this permission.", "Heuristic": ["H1"]}, {"nl": " Append a hashCode for a short array. ", "Heuristic": []}, {"nl": "Determine the space between the first two fingers", "Heuristic": []}, {"nl": "chars.", "Heuristic": ["H1", "H2"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Sets the object Id for the LikeView", "Heuristic": ["H1"]}, {"nl": "Adds an array of types to the receiver at once.", "Heuristic": []}, {"nl": "Create an instance of  {@link JAXBElement }{@code }}", "Heuristic": ["H1"]}, {"nl": "Formats the given date according to the RFC 1123 pattern.", "Heuristic": []}, {"nl": "Method to get an instance of the this class. This method ensures that SwingAppenderUI is a Singleton using a doule checked locking mechanism.", "Heuristic": ["H1"]}, {"nl": "Reports if this EdgeEffectCompat's animation is finished. If this method returns false after a call to  {@link #draw(Canvas)} the host widget should schedule anotherdrawing pass to continue the animation.", "Heuristic": ["H1"]}, {"nl": "Get a Vector of the buffer tokenized by lines", "Heuristic": []}, {"nl": "Returns default list of auth scheme names in their order of preference based on the HTTP response and the current execution context.", "Heuristic": []}, {"nl": "Computes the decomposition of the provided matrix.  If no errors are detected then true is returned, false otherwise.", "Heuristic": []}, {"nl": "Adds a property change listener.", "Heuristic": []}, {"nl": "Removes a value in the property table.", "Heuristic": []}, {"nl": "Perform substitutions on a class type. Substitutions are performed lazily.", "Heuristic": []}, {"nl": "Send an INFO log message.", "Heuristic": []}, {"nl": "Get Application database connection.", "Heuristic": []}, {"nl": "Must be called to bind the  {@link Vista} and let the {@link Presenter} know that can start{@code Vista} updates. Normally this method will be called from {@link Activity#onStart()}or from  {@link Fragment#onStart()}.", "Heuristic": ["H1"]}, {"nl": "Can be used, to check, whether the connection was opened successfully (result != null).", "Heuristic": []}, {"nl": "Set the list of registered scopes.  Registering the scopes will allow the clients not to include the scopes and delegate to the runtime to enforce that the current request scopes are a subset of the pre-registered scopes. Client Registration service is expected to reject unknown scopes.", "Heuristic": []}, {"nl": "Obtains value of the  {@link CoreProtocolPNames#USER_AGENT} parameter.If not set, returns null.", "Heuristic": ["H1"]}, {"nl": "Set the value produced by worker thread", "Heuristic": []}, {"nl": "Update a control like rename", "Heuristic": []}, {"nl": "is empty string.", "Heuristic": ["H1"]}, {"nl": "Cleanup any state for this DB. Called once per DB instance; there is one DB instance per client thread.", "Heuristic": []}, {"nl": "Return a informative  {@link String} about this servlet.", "Heuristic": ["H1"]}, {"nl": "Gets the Profile Data Object Generated by the Web API.", "Heuristic": []}, {"nl": "Stores the given throwable and rethrows it. It will be rethrown as is if it is an {@code IOException},  {@code RuntimeException} or {@code Error}. Otherwise, it will be rethrown wrapped in a  {@code RuntimeException}. Note: Be sure to declare all of the checked exception types your try block can throw when calling an overload of this method so as to avoid losing the original exception type. This method always throws, and as such should be called as  {@code throw closer.rethrow(e);}to ensure the compiler knows that it will throw.", "Heuristic": ["H1"]}, {"nl": "Builds metric registry name for worker instance. The pattern is instance.uniqueId.metricName.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.SentenceFactory#createParser(java.lang.String)}.", "Heuristic": ["H1"]}, {"nl": "Validates the configurations.", "Heuristic": []}, {"nl": "Returns true if the resource addressed by this qualified name is a class.", "Heuristic": []}, {"nl": "Writes a  {@link BitMatrix} to a file with default configuration.", "Heuristic": ["H1"]}, {"nl": "Gets the used bytes of Alluxio's BlockStore.", "Heuristic": ["H1"]}, {"nl": "Returns the Description of this Character. The Description is usefull if the picture of this character differs from the normal character expected at this position (ASCII Code).", "Heuristic": ["H1"]}, {"nl": "Instruments the memory locks service.", "Heuristic": []}, {"nl": "Returns the token key", "Heuristic": []}, {"nl": "Returns the interal matrix where the decomposed results are stored.", "Heuristic": ["H1"]}, {"nl": "Set a new (default) TTL value in seconds", "Heuristic": []}, {"nl": "Getter for the id of the profile.", "Heuristic": ["H1"]}, {"nl": "Getter for the resource type path (sub folder).", "Heuristic": []}, {"nl": "Gets the actual bind hostname.", "Heuristic": []}, {"nl": "Sets the value of the template property.", "Heuristic": []}, {"nl": "Should fully qualified class names be used in the output?", "Heuristic": ["H1"]}, {"nl": "Reset the list of modified diagrams.", "Heuristic": []}, {"nl": "Creates a new Hessian 1.0 serializer.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link BlockStoreMeta#getUsedBytes()} method.", "Heuristic": ["H1"]}, {"nl": "Finish the wizard.", "Heuristic": []}, {"nl": "Returns the number of records in the sorted table, which is the same as in the underlying query.", "Heuristic": []}, {"nl": "Convert String to Array of Strings using default delimiter (\",\")", "Heuristic": ["H1"]}, {"nl": "Registers a given user ID with SIP proxies so that other people can connect to her.", "Heuristic": []}, {"nl": "Serialize the Thrift object into a Java string, using the default JVM charset encoding.", "Heuristic": ["H1"]}, {"nl": "Gets the volume.", "Heuristic": []}, {"nl": "Scans list of base packages for all classes marked with specific annotations.", "Heuristic": []}, {"nl": "Sets a new TTL value or unsets an existing TTL value for file at path.", "Heuristic": []}, {"nl": "Call back when start loading.", "Heuristic": []}, {"nl": "Tests  {@link LockResource} with {@link ReentrantLock}.", "Heuristic": ["H1"]}, {"nl": "Sets the proxy selection policy to be used if no  {@link #setProxy proxy}is specified explicitly. The proxy selector may return multiple proxies; in that case they will be tried in sequence until a successful connection is established. If unset, the  {@link ProxySelector#getDefault() system-wide default}proxy selector will be used.", "Heuristic": ["H1"]}, {"nl": "Push a state number onto the stack.", "Heuristic": []}, {"nl": "Returns whether the message finishes sending or not. It will check if the message is a send message, so don't call this on a recv message.", "Heuristic": ["H1"]}, {"nl": "Getting existing cache if the cache available, else returns a newly created cache. This logic handles by javax.cache implementation", "Heuristic": ["H1"]}, {"nl": "Sets the download size.", "Heuristic": []}, {"nl": "Decodes an encoded short from the stream. This method does bounds checking, to ensure values fit, since some values may be encoded as unsigned values, and Java types are all signed.", "Heuristic": ["H1"]}, {"nl": "Get the JWT-encoded value of this token", "Heuristic": []}, {"nl": "Implements both addition and subtraction -- they are the same in GF(size).", "Heuristic": []}, {"nl": "Opens the play store to install Messenger.", "Heuristic": []}, {"nl": "Provides a ConfigSupplier loading config from a file. The loader will first try to load an env specific file named [path].[env].properties. Then it will try to load a file named [path].properties. Then it will try to load a file named [path] (without extension).", "Heuristic": []}, {"nl": "Remove entry from difference groups.", "Heuristic": []}, {"nl": "Get the group name by Id.", "Heuristic": ["H1"]}, {"nl": "Calculates distance to specified Position.  The Distance is calculated using the Haversine formula. Implementation is based on example found at codecodex.com.  Earth radius earth radius used in calculation is 6366.70702 km, based on the assumption that 1 degrees is exactly 60 NM.", "Heuristic": ["H1"]}, {"nl": "Clears the internal data structure used to manage the nodes visited between visiting different ASTs.", "Heuristic": []}, {"nl": "Builds the parameter object.", "Heuristic": []}, {"nl": "If a waiting thread has been set, interrupts it.", "Heuristic": []}, {"nl": "As  {@link #writeToStream(BitMatrix,String,OutputStream)}, but allows customization of the output.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Getter for property 'description'.", "Heuristic": []}, {"nl": "Get the class that the generated target will extend.", "Heuristic": []}, {"nl": "See how the decomposition goes against various matrices of different sizes", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Re-creates this object from the given byte stream", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.PositionParser#parseHemisphereLat(int)}.", "Heuristic": ["H1"]}, {"nl": "Tells whether or not the path component of the  {@link AlluxioURI} is absolute. A path is absolute if, and only if, it starts with root. ", "Heuristic": ["H1"]}, {"nl": "Starts reading the body of the reply, i.e. after the 'r' has been parsed.", "Heuristic": []}, {"nl": "Returns true if the signature of the operation designated by the qualified name is covered by the mask.", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.parser.GLLParser#getTime()}.", "Heuristic": ["H1"]}, {"nl": "IO mode: nio or epoll", "Heuristic": ["H1"]}, {"nl": "Starts the leader selection.", "Heuristic": []}, {"nl": "Method skippedEntity.", "Heuristic": []}, {"nl": "GET  /ingredients/auto-suggest : get auto suggest for ingredient", "Heuristic": ["H1"]}, {"nl": "Notifies observers about invalidating data", "Heuristic": []}, {"nl": "Buffers events until the end of the group containing the upr command is reached. Once the end of the group is reached, the buffered events representing the Unicode content is sent to the listener.", "Heuristic": ["H1"]}, {"nl": "Encapsulates the logic related to locating the resource bundle with the given  relative name for a class.", "Heuristic": ["H1"]}, {"nl": "Creates a new immutable Script based on the state of the builder.", "Heuristic": []}, {"nl": "Create FORCE-REBASE-MERGE query.", "Heuristic": []}, {"nl": "write json.", "Heuristic": ["H1", "H2"]}, {"nl": "Creates a new Hessian 2.0 serializer.", "Heuristic": ["H1"]}, {"nl": "Convert a given comma delimited String into an array of String", "Heuristic": []}, {"nl": "Just a wrapper to  {@link #isEmpty(String)}.", "Heuristic": ["H1"]}, {"nl": "Returns the  {@link AccessibilityServiceInfo}s of the installed accessibility services.", "Heuristic": ["H1"]}, {"nl": "Write a writable to a byte array.", "Heuristic": []}, {"nl": "Set the program's condition-action rules", "Heuristic": []}, {"nl": "Tests the  {@link MasterWorkerInfo#getFreeBytesOnTiers()} method.", "Heuristic": ["H1"]}, {"nl": "Returns the first of the given 2 positions i.e. if pos1 starts before pos2, then first(pos1, pos2) = pos1. Returns null if the given 2 positions are not comparable.", "Heuristic": []}, {"nl": "Set the CallbackHandler object.", "Heuristic": []}, {"nl": "Return an iterator over record pointers in sorted order.", "Heuristic": []}, {"nl": "Tests  {@link ByteBufferKeyValuePartitionReader#get} after{@link ByteBufferKeyValuePartitionReader#close}, expect an exception thrown.", "Heuristic": ["H1"]}, {"nl": "Releases the  {@link BlockWorkerClient} by directly closing it.", "Heuristic": ["H1"]}, {"nl": "get the SDP field name of the line", "Heuristic": ["H1"]}, {"nl": "Checks if the poll period is smaller that the minimal poll period which is 1 second.", "Heuristic": []}, {"nl": "request start recording from encoder", "Heuristic": ["H1"]}, {"nl": "make any one digit number to two digit string pre-appending a\"0\"", "Heuristic": ["H1"]}, {"nl": "Closes the two underlying scans.", "Heuristic": []}, {"nl": "Tested using the following operation in octave: sum(abs(a(:)).^3.5)^(1/3.5)", "Heuristic": []}, {"nl": "This is the same function as  LookAndFeelMgr.getInstance().getStandardFont(); but used for a totally different puropose: here it determines  a default font when none is set. In the LookAndFeelMgr it determines the looks of the UI.", "Heuristic": ["H1"]}, {"nl": "Returns the SharedContext to be used by renderer. Is instantiated along with the class, so can be accessed before  {@link #getImage()} is called to tune the rendering process.", "Heuristic": ["H1"]}, {"nl": "Set the lifetime of the generated SCT", "Heuristic": []}, {"nl": "By default delegates to  {@link Object#equals} so instances are only equal if they areidentical.  {@code proxy.equals(argument)} returns true if:  {@code proxy} and {@code argument} are of the same typeand this method returns true for the  {@link InvocationHandler} of {@code argument} Subclasses can override this method to provide custom equality.", "Heuristic": ["H1"]}, {"nl": "Creates reducer blocks in a hash-based data format within our local dirs.", "Heuristic": ["H1"]}, {"nl": "Gets the default factory.", "Heuristic": []}, {"nl": "Hashes a byte array", "Heuristic": []}, {"nl": "Returns the default renderer without change.", "Heuristic": []}, {"nl": "Gets the access token of the shared test user for the application with the requested permissions.", "Heuristic": []}, {"nl": "Notifies all listeners that NMEA data has been detected in the stream and events will be dispatched until stopped or timeout occurs.", "Heuristic": ["H1"]}, {"nl": "Returns the decision tree of this decision tree learner", "Heuristic": []}, {"nl": "Clears the commit cache for a specific repository.", "Heuristic": []}, {"nl": "Returns a list of opaque permissions/scopes", "Heuristic": []}, {"nl": "Changes the current Box directory to the folder specified.", "Heuristic": []}, {"nl": "Creates a P2SH output script with given public keys and threshold. Given public keys will be placed in redeem script in the lexicographical sorting order.", "Heuristic": []}, {"nl": "Gets the value of the street property.", "Heuristic": []}, {"nl": "Provides the cookie name to the SessionPersistence's Builder.", "Heuristic": []}, {"nl": "Gets the string value for the given parameter", "Heuristic": []}, {"nl": "Creates an OpenGraphAction suitable for posting via, e.g., a native Share dialog.", "Heuristic": []}, {"nl": "Returns a new array of the given length with the same type as a reference array.", "Heuristic": []}, {"nl": "Verifies that two violations nodes with different  {@code endLine} are notequal.", "Heuristic": ["H1"]}, {"nl": "Removes a one-way connection.", "Heuristic": []}, {"nl": "Append additional path elements to the end of an  {@link AlluxioURI}.", "Heuristic": ["H1"]}, {"nl": "Deserialize only a binary field (addressed by recursively using field id) from a byte record.", "Heuristic": ["H1"]}, {"nl": "Deletes the entry.  Returns true if successful.", "Heuristic": []}, {"nl": "Traverses the directory to find the leaf block corresponding to the specified search key. The method then opens a page for that leaf block, and positions the page before the first record (if any) having that search key. The leaf page is kept open, for use by the methods next and getDataRid.", "Heuristic": []}, {"nl": "Reads the next byte of a multi-byte UTF-8 character and returns its contents (lower 6 bits). Throws a GeneratorError if the byte is not a valid tail.", "Heuristic": ["H1"]}, {"nl": "Generates the Insert statement to insert the OOZIE_VERSION to table", "Heuristic": ["H1"]}, {"nl": "set which pseudoclasses must apply for this selector", "Heuristic": ["H1"]}, {"nl": "Gets all results in this object as a hash map.", "Heuristic": []}, {"nl": "calculates the distance of a Points to a Centroid calls: none called by: Codebook", "Heuristic": ["H1"]}, {"nl": "Returns the value of the specified field. The value is obtained from whichever scan contains the field.", "Heuristic": []}, {"nl": "Obtains the Content-Type header. The default implementation returns the value of the {@link #contentType contentType} attribute.", "Heuristic": ["H1"]}, {"nl": "How many rows/states are in the machine/table.", "Heuristic": []}, {"nl": "Is the color bright?  Useful for determining whether to use dark color on bright background.", "Heuristic": []}, {"nl": "Determine if the java runtime found is supported by the current version of ArgoUML.", "Heuristic": []}, {"nl": "Appends the least-significant bits, from value, in order from most-significant to least-significant. For example, appending 6 bits from 0x000001E will append the bits 0, 1, 1, 1, 1, 0 in that order.", "Heuristic": []}, {"nl": "check test source with the control source for similarity.  Example for Similar: The XML node \"&lt;a&gt;Text&lt;/a&gt;\" and \"&lt;a&gt;&lt;![CDATA[Text]]&gt;&lt;/a&gt;\" are similar and the Test will not fail.  The rating, if a node is similar, will be done by the  {@link DifferenceEvaluators#Default}. See  {@link #withDifferenceEvaluator(DifferenceEvaluator)} Default is  {@link #checkForIdentical()}.", "Heuristic": ["H1"]}, {"nl": "Obtains the value of  {@link NIOReactorPNames#CONTENT_BUFFER_SIZE} parameter.If not set, defaults to 4096.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the intDefault property.", "Heuristic": []}, {"nl": "Die draw Methode wird in mehreren anderen Klassen als Ableitung genutzt um Spielelemente zu zeichnen, sie spielt eine zentrale Rolle bei dem Snake Programm.", "Heuristic": ["H1"]}, {"nl": "Sets URI user info as a combination of username and password. These values are expected to be unescaped and may contain non ASCII characters.", "Heuristic": []}, {"nl": "Convert a list of column vectors in Matrix form into a corresponding list of Categorical Distributions.", "Heuristic": []}, {"nl": "Create an instance of  {@link primer.Items }", "Heuristic": ["H1"]}, {"nl": "Create the document header.", "Heuristic": []}, {"nl": "Compression mode for images to be generated from this writer. See {@link javax.imageio.ImageWriteParam#setCompressionMode(int)}  for a description of what this meansand valid range of values.", "Heuristic": ["H1"]}, {"nl": "read string.", "Heuristic": ["H1", "H2"]}, {"nl": "Parses a byte array into a hex string where each byte is represented in the format  {@code %02x}.", "Heuristic": ["H1"]}, {"nl": "Sets the  {@link Permission}.", "Heuristic": ["H1"]}, {"nl": "Count of how many times the symbol appears in productions.", "Heuristic": []}, {"nl": "Converts a wire type to a thrift type.", "Heuristic": []}, {"nl": "Get this node's padding, as defined by style + default padding.", "Heuristic": []}, {"nl": "Get the old value of the cell", "Heuristic": []}, {"nl": "Returns a new object with cropped image data. Implementations may keep a reference to the original data rather than a copy. Only callable if isCropSupported() is true.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMBParser#setSteerTo(CompassPoint)}.", "Heuristic": ["H1"]}, {"nl": "This input parameter is ignored for the moment.", "Heuristic": []}, {"nl": "Computes the decomposition of the provided matrix.  If no errors are detected then true is returned, false otherwise.", "Heuristic": []}, {"nl": "Returns the position of the specified location as with respect to an orthogonal coordinate system.", "Heuristic": []}, {"nl": "Sets the value of the arg0 property.", "Heuristic": []}, {"nl": "Start the animation loop if it is not currently running.", "Heuristic": []}, {"nl": "Override this function to return a different kind of Authentication, processes the authorities differently, or do post-processing based on the UserInfo object.", "Heuristic": []}, {"nl": "Initializes metadata manager.", "Heuristic": []}, {"nl": "a short indication of the documents root element like \"&lt;ElementName...&gt;\".", "Heuristic": ["H1"]}, {"nl": "Returns the number of field values.", "Heuristic": []}, {"nl": "Adds an attribute to the tag.", "Heuristic": []}, {"nl": "Throws an  {@link AssertionException} if the current thread is the UI thread.", "Heuristic": ["H1"]}, {"nl": "The same as above, but specifically for Google Book Search.", "Heuristic": []}, {"nl": "set identity code", "Heuristic": ["H1"]}, {"nl": "Creates a plan for an SQL select statement, using the supplied planner.", "Heuristic": []}, {"nl": "Call  {@link VelocityTracker#getYVelocity(int)}. If running on a pre- {@android.os.Build.VERSION_CODES #HONEYCOMB} device,returns  {@link VelocityTracker#getYVelocity()}.", "Heuristic": ["H1"]}, {"nl": "Adds a feature to the Condition attribute of the Selector object", "Heuristic": []}, {"nl": "Whether the server should enforce encryption on SASL-authenticated connections.", "Heuristic": ["H1"]}, {"nl": "Convenience method that returns a variable from the EL evaluator context. ", "Heuristic": []}, {"nl": "Sets the recursive flag.", "Heuristic": []}, {"nl": "Gets the directory index of the location.", "Heuristic": []}, {"nl": "Provide the physicalNetwork to the NetworkSegment's Builder.", "Heuristic": []}, {"nl": "Parse an octal long integer from a header buffer.", "Heuristic": []}, {"nl": "Tests if output of  {@link IdUtils#createRpcId()} is non-empty.Also tests for randomness property.", "Heuristic": ["H1"]}, {"nl": "Check if a package exists.", "Heuristic": []}, {"nl": "Entry point for embedded applications.  This method attaches to the given  {@link ContextFactory} with the given scope.  NoI/O redirection is performed as with  {@link #main(String[])}.", "Heuristic": ["H1"]}, {"nl": "Sets the confidentiality status of this client application. This can be used to restrict which OAuth2 flows this client can participate in.", "Heuristic": []}, {"nl": "Writes the end of the class.", "Heuristic": []}, {"nl": "Sets an external URI that Messenger can use to download the content on Facebook's servers instead of requiring the Messenger application to upload the content. The content returned by the this URI must be exactly the same as the content specified by  {@link #getUri()}. If the content is different, Messenger may fail to send the content. See developer docs for more info.", "Heuristic": ["H1"]}, {"nl": "Tries to pull the gitblit user accounts from the remote gitblit instance.", "Heuristic": ["H1"]}, {"nl": "Gets the serviceID to which this datagram packet is sent as a {@code ServiceID} object.", "Heuristic": ["H1"]}, {"nl": "List names/paths of each source to be processed.", "Heuristic": []}, {"nl": "Returns the bidiagonal matrix.", "Heuristic": ["H1"]}, {"nl": "Get a default SSL wrapped TSocket connected to the specified host and port. All the client methods return a bound connection. So there is no need to call open() on the TTransport.", "Heuristic": []}, {"nl": "Removes the given session from the session pool.", "Heuristic": []}, {"nl": "Returns the location one unit left of this location.", "Heuristic": []}, {"nl": "Populates a multiset by reading an input stream, as part of deserialization. See  {@link #writeMultiset} for the data format.", "Heuristic": ["H1"]}, {"nl": "Get this node's width, as defined in the style.", "Heuristic": []}, {"nl": "Gets the origin attribute of the Stylesheet object", "Heuristic": []}, {"nl": "Get the number of not approved conflicts.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Reset the counter so that an instance can be reused for another NodeTest", "Heuristic": []}, {"nl": "Gets the sentence text.", "Heuristic": []}, {"nl": "Convert a passed byte string (e.g. 50b, 100k, or 250m) to bytes for internal use. If no suffix is provided, the passed number is assumed to be in bytes.", "Heuristic": ["H1"]}, {"nl": "Returns the number of eigenvalues available.", "Heuristic": []}, {"nl": "Retrieves the uid and primary gid of the user running Alluxio-FUSE.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the number property.", "Heuristic": []}, {"nl": "Returns fully qualified name of the enumeration type.", "Heuristic": []}, {"nl": "Assert that an object is not  {@code null} .Assert.notNull(clazz);", "Heuristic": ["H1"]}, {"nl": "Returns the previous Step or null if the current Step is the first Step", "Heuristic": []}, {"nl": "Get the weight of the subtree defined by this node. Impact on weight is decreasing with increasing hierarchical distance", "Heuristic": []}, {"nl": "Test of setIntervalNumber method, of class LogEntryInterval.", "Heuristic": []}, {"nl": "Gets the mutation Value.", "Heuristic": []}, {"nl": "set notification info Provider", "Heuristic": ["H1"]}, {"nl": "Signals us to stop notifying the connection maintainer listener of connection events related to a given registrar.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.HDMParser#setHeading(double)}.", "Heuristic": ["H1"]}, {"nl": "Set connection factory name", "Heuristic": []}, {"nl": "Returns a copy of this route with flipped tls mode.", "Heuristic": ["H1"]}, {"nl": "Get the name of this LanguageVersion. This is Language name appended with the LanguageVersion version if not an empty String.", "Heuristic": ["H1"]}, {"nl": "Populates the internal collection of registered  {@link AuthScheme authentication schemes}with the content of the map passed as a parameter.", "Heuristic": ["H1"]}, {"nl": "DELETE  /ingredients/:id : delete the \"id\" ingredient.", "Heuristic": ["H1"]}, {"nl": "Reset to default values.", "Heuristic": []}, {"nl": "Whether the serializer will produce cached mode Messages", "Heuristic": ["H1"]}, {"nl": "Removes n panels from the stack. Uses the next panel as the panel frame. If n is bigger than the stack size, it removes everything but the first inserted panel.", "Heuristic": []}, {"nl": "Gets a context using the master address got from config.", "Heuristic": []}, {"nl": "Notifies this class results should be sorted again.", "Heuristic": []}, {"nl": "Get the (default) TTL value in seconds", "Heuristic": []}, {"nl": "Return the tag with matching name ignoring the specified tag", "Heuristic": []}, {"nl": "Set the (WSS4J) key identifier type used to reference a certificate for encryption", "Heuristic": []}, {"nl": "Is client lifetime element accepted Default: false", "Heuristic": []}, {"nl": "This method must be called by the module when its policies are updated", "Heuristic": []}, {"nl": "Set satellite elevation, in degrees (max. 90&deg;).", "Heuristic": ["H1"]}, {"nl": "Returns the name of transducer.", "Heuristic": []}, {"nl": "Save a ingredient.", "Heuristic": ["H1"]}, {"nl": "Transport accessor", "Heuristic": ["H1", "H2"]}, {"nl": "Animation engine should call this method for every animation frame passing animation progress value as a parameter. Animation progress should be within the range 0..1 (the exception here would be a spring animation engine which may slightly exceed start and end progress values). This method will return false if the animation has been cancelled. In that case animation engine should not attempt to call this method again. Otherwise this method will return true", "Heuristic": ["H1"]}, {"nl": "Get the alternate endpoints for this invocation.", "Heuristic": []}, {"nl": "Get when this CacheEntry is to be removed from the cache", "Heuristic": []}, {"nl": "Sets the redirect URI, if set then the client is expected to  include the same URI during the access token request", "Heuristic": ["H1"]}, {"nl": "This method is called after the connection is made to the remote. Implementations should create internal state to finish the connection process.", "Heuristic": []}, {"nl": "Set the Object corresponding to the encryption Properties class. It can be a String corresponding to a filename, a Properties object, or a URL.", "Heuristic": []}, {"nl": "Deserialize only a string field (addressed by recursively using field id) from a byte record.", "Heuristic": ["H1"]}, {"nl": "Removes an existing resource from the pool.", "Heuristic": []}, {"nl": "Test method for {@link com.sqa.em.util.helper.RequestInput#getInt(java.lang.String,int,int)}.", "Heuristic": ["H1"]}, {"nl": "Get the weight of given key", "Heuristic": []}, {"nl": "Returns true if date is today.", "Heuristic": []}, {"nl": "Get common auth caller path. Path of the calling party to common auth", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Append an OR condition.", "Heuristic": []}, {"nl": "Adds the specified  {@link Annotation} to set of excluded annotations,if it is not already present.", "Heuristic": ["H1"]}, {"nl": "Return the public interface for the action checker service.", "Heuristic": []}, {"nl": "Returns L matrix from the decomposition. LDLT=A", "Heuristic": ["H1"]}, {"nl": "Creates a simple file with  {@code len} bytes.", "Heuristic": ["H1"]}, {"nl": "Build response bytes without status and type information.", "Heuristic": []}, {"nl": "Reads the setting from the options hash. If no entry is set for this key or if it evaluates to false, returns null; attempts to coerce the value to  {@link RubyString String} otherwise.", "Heuristic": ["H1"]}, {"nl": "Return the total number of workflows.  For pagination purposes.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.PositionParser#parseLongitude(int)}.", "Heuristic": ["H1"]}, {"nl": "Remove and collect any rules that report problems.", "Heuristic": []}, {"nl": "Convert a time parameter such as (50s, 100ms, or 250us) to seconds for internal use. If no suffix is provided, the passed number is assumed to be in seconds.", "Heuristic": []}, {"nl": "For a given  {@link HttpHost} and {@link HttpRequest} get a URI from thepair that I can use as an identifier KEY into my HttpCache", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Beschreibung DemoMethode(int a, String b)", "Heuristic": ["H1"]}, {"nl": "Method for calling after context destroy", "Heuristic": []}, {"nl": "Tests  {@link BaseKeyValuePartitionWriter#put(byte[],byte[])}, expecting it failed when writing to a canceled writer.", "Heuristic": ["H1"]}, {"nl": "Calculates checksum for given NMEA sentence, i.e. XOR of each character between '$' and '' characters (exclusive).", "Heuristic": ["H1"]}, {"nl": "Writes a single byte value (1 byte) to the output stream. This is equivalent of {@link OutputStream#write(int)}.", "Heuristic": []}, {"nl": "Close the underlying SSH forwarding channel and free up resources. You can also use this method to force the shutdown of the underlying forwarding channel. Pending output (OutputStream not flushed) will NOT be sent. Pending input (InputStream) can still be read. If the shutdown operation is already in progress (initiated from either side), then this call is a no-op.", "Heuristic": []}, {"nl": "Get all the sites.", "Heuristic": []}, {"nl": "Set the Object corresponding to the signature Properties class. It can be a String corresponding to a filename, a Properties object, or a URL.", "Heuristic": []}, {"nl": "Gets the list of blocks added by the worker in the heartbeat this report represents.", "Heuristic": []}, {"nl": "Wakes up the waiting thread.  This method assumes external synchronization.", "Heuristic": []}, {"nl": "Gets the cSSName attribute of the PropertyDeclaration object", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Process a new message received", "Heuristic": []}, {"nl": "Determines the tar file size of the given folder/file path", "Heuristic": []}, {"nl": "Returns the action of this condition-action rule.", "Heuristic": []}, {"nl": "sets the feature vector array", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Defines a bounding box for the map.", "Heuristic": []}, {"nl": "Gets all of the headers with the given name.  The returned array maintains the relative order in which the headers were added. Header name comparison is case insensitive.", "Heuristic": ["H1"]}, {"nl": "Removes the given header.", "Heuristic": []}, {"nl": "Get relying party of the authentication request", "Heuristic": ["H1"]}, {"nl": "Accessor for the MessageID property.", "Heuristic": ["H1"]}, {"nl": "Set id for the message", "Heuristic": ["H1"]}, {"nl": "Sets the clock to the specified time.", "Heuristic": []}, {"nl": "Builds the path for a closed arc, returning a PolygonOptions that can be further customised before use.", "Heuristic": ["H1"]}, {"nl": "Opens an indexjoin scan for this query", "Heuristic": ["H1"]}, {"nl": "Merge all settings from the settings parameter into this instance.", "Heuristic": []}, {"nl": "Returns the first Rule found with the given name. Note: Since we support multiple languages, rule names are not expected to be unique within any specific ruleset.", "Heuristic": ["H1"]}, {"nl": "Info log message.", "Heuristic": []}, {"nl": "Gets the actual value.", "Heuristic": []}, {"nl": "Creates a table scan for this query.", "Heuristic": []}, {"nl": "Set request query params which are comming from the calling servelets", "Heuristic": ["H1"]}, {"nl": "Retrieves a byte array field from the stream. \\param dest The byte array where the returned value will be stored. The array should be large enough to store the entire data item, if it is not, a truncated value will be returned.", "Heuristic": ["H1"]}, {"nl": "Get the character encoding of source files.", "Heuristic": []}, {"nl": "Check if an element is in the list", "Heuristic": []}, {"nl": "Indicates whether this scheme allows for layered connections.", "Heuristic": []}, {"nl": "Encodes the 128 bit (16 bytes) MD5 digest into a 32 characters long  String according to RFC 2617.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link TempBlockMeta#getPath()} method.", "Heuristic": ["H1"]}, {"nl": "Format a  {@link Number} into a {@link String} making sure that{@link NullPointerException}s are not thrown.", "Heuristic": ["H1"]}, {"nl": "select the difference in difference tree and renew the triple table", "Heuristic": ["H1"]}, {"nl": "Start application with program arg -screenwidth=xx (with xx the width in cm) or -screensize=yy (with yy measured diagonally in inch).", "Heuristic": ["H1"]}, {"nl": "Puts the expiration date into a Bundle.", "Heuristic": []}, {"nl": "Returns the remote api class name.", "Heuristic": ["H1"]}, {"nl": "Whether the progress (in % complete and memory used) should be  printed to the console.", "Heuristic": ["H1"]}, {"nl": "Get the factory for WS-ReliableMessaging 1.0 using the current 200508 WS-Addressing namespace.", "Heuristic": []}, {"nl": "Fires notification that this downloader's state has changed.", "Heuristic": []}, {"nl": "Get the list of additional user subject properties", "Heuristic": []}, {"nl": "Creates a new Node (of the same type as the original node) that is similar to the orginal but doesn't contain any empty text or CDATA nodes and where all textual content including attribute values or comments are trimmed.", "Heuristic": ["H1"]}, {"nl": "Remove an indexed property. This method shouldn't even be called since we define all properties as PERMANENT.", "Heuristic": []}, {"nl": "Validate the incoming request for mandatory parameters.", "Heuristic": []}, {"nl": "Sets the value of the file property.", "Heuristic": []}, {"nl": "Gets the value of the parametersMetaData property.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the executionStartDateTime property.", "Heuristic": []}, {"nl": "Initialize.", "Heuristic": ["H2"]}, {"nl": "check that all keys in ARG2 are present in ARG1.", "Heuristic": ["H1"]}, {"nl": "Set the String corresponding to the signature Properties class", "Heuristic": []}, {"nl": "Retrieves a String value from preference manager. If no such key exists, it will return the defaultValue.", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.parser.RMCParser#getSpeed()}.", "Heuristic": ["H1"]}, {"nl": "The parser adds a code piece here. The code pieces will be inserted in sorted order in the codePieces list.", "Heuristic": []}, {"nl": "Test of setTimeOutFlag method, of class LogEntryRequest.", "Heuristic": []}, {"nl": "Draws the current state of the chess board", "Heuristic": []}, {"nl": "Converts a wire type to a thrift type.", "Heuristic": []}, {"nl": "Get the uplinks of this node.", "Heuristic": []}, {"nl": "Create an instance of  {@link CertificateChainInfo }", "Heuristic": ["H1"]}, {"nl": "Start default sh shell", "Heuristic": []}, {"nl": "Tests that building a  {@link DeleteOptions} with the defaults works.", "Heuristic": ["H1"]}, {"nl": "logs the message prepended by the filter name (copy of  {@link GenericServlet#log(String)})", "Heuristic": ["H1"]}, {"nl": "Estimates the number of distinct values for the  specified field.", "Heuristic": ["H1"]}, {"nl": "Returns the value at  {@code index} or null if that is out of range.", "Heuristic": ["H1"]}, {"nl": "add key-value pair to map, and key need not null or empty", "Heuristic": ["H1"]}, {"nl": "Return the debug indicator. If this value is true then PMD will log debug information.", "Heuristic": []}, {"nl": "Used for testing.", "Heuristic": []}, {"nl": "{@link Joiner} with a character delimiter.", "Heuristic": []}, {"nl": "Override an output property specified in the transformation stylesheet", "Heuristic": []}, {"nl": "Gets the value of the shipDate property.", "Heuristic": []}, {"nl": "Executes CPD found in tempDir with the given command line arguments.", "Heuristic": []}, {"nl": "Executes the request. This method is called from the WebView thread. To do a non-trivial amount of work, use: cordova.getThreadPool().execute(runnable); To run on the UI thread, use: cordova.getActivity().runOnUiThread(runnable);", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Return true if this TokenValidator implementation is capable of validating the ReceivedToken argument.", "Heuristic": []}, {"nl": "Return a string describing the version of this software.", "Heuristic": []}, {"nl": "Returns reference to the underlying byte array.", "Heuristic": []}, {"nl": "Asserts that the message back matches the block response protocols for the error case.", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.util.Date#setYear(int)}.", "Heuristic": ["H1"]}, {"nl": "Tests  {@link BaseKeyValuePartitionWriter#put(byte[],byte[])}, expecting it failed when writing to a closed writer.", "Heuristic": ["H1"]}, {"nl": "Marks the current time.  You can then in future call millisElapsed() to find out the elapsed milliseconds since this mark() call was made. A second mark() call will reset the mark, and millisElapsed() will start increasing from zero again.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "The authentication in place when the original access token was created", "Heuristic": []}, {"nl": "Puts the last refresh date into a Bundle.", "Heuristic": []}, {"nl": "Returns the size of the entry for  {@code key} and {@code value} inuser-defined units.  The default implementation returns 1 so that size is the number of entries and max size is the maximum number of entries.  An entry's size must not change while it is in the cache.", "Heuristic": ["H1"]}, {"nl": "Sets the response cache to be used to read and write cached responses. If unset, the  {@link ResponseCache#getDefault() system-wide default}response cache will be used.", "Heuristic": ["H1"]}, {"nl": "Iterates through the given loaders until it finds one that can load Finalizer.", "Heuristic": ["H1"]}, {"nl": "Releases a lock on the specified block. If this lock is the last lock on that block, then the waiting transactions are notified.", "Heuristic": []}, {"nl": "Sets the value of the url property.", "Heuristic": ["H1"]}, {"nl": "Get the IdentityMapper object to use.", "Heuristic": []}, {"nl": "Sets expressions per field.", "Heuristic": []}, {"nl": "Sets whether execution should break when a function is left.", "Heuristic": []}, {"nl": "Checks whether the given value can be the base value value of an access path", "Heuristic": ["H1"]}, {"nl": "Called by cordova.js to initialize the bridge.", "Heuristic": []}, {"nl": "Currently unused", "Heuristic": ["H2"]}, {"nl": "Sets the stack trace.", "Heuristic": []}, {"nl": "Configures the  {@link Api}Overloaded version. Let's you use an instance instead of a class.", "Heuristic": ["H1"]}, {"nl": "Flushes the output.", "Heuristic": []}, {"nl": "Executes the request. This method is called from the WebView thread. To do a non-trivial amount of work, use: cordova.getThreadPool().execute(runnable); To run on the UI thread, use: cordova.getActivity().runOnUiThread(runnable);", "Heuristic": ["H1"]}, {"nl": "Converts a 2D array of luminance data to 1 bit. As above, assume this method is expensive and do not call it repeatedly. This method is intended for decoding 2D barcodes and may or may not apply sharpening. Therefore, a row from this matrix may not be identical to one fetched using getBlackRow(), so don't mix and match between them.", "Heuristic": []}, {"nl": "Gets the test id.", "Heuristic": ["H1"]}, {"nl": "Respond to server's SASL token.", "Heuristic": ["H1"]}, {"nl": "wait the given time for a new connection", "Heuristic": ["H1"]}, {"nl": "Returns a reference to a character buffer containing the results of the stemming process.  You also need to consult getResultLength() to determine the length of the result.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Resets the references for streaming.", "Heuristic": []}, {"nl": "Create an instance of  {@link Address }", "Heuristic": ["H1"]}, {"nl": "Sets the value of the specified field  in the current record.", "Heuristic": ["H1"]}, {"nl": "Filter the child view at index and remove it if appropriate.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.util.Time#toString(net.sf.marineapi.nmea.util.Time)}.", "Heuristic": ["H1"]}, {"nl": "The counterpart to initialize: forget any saved data.  Note: We might get re-initialized later.", "Heuristic": []}, {"nl": "Called by the system when the user grants permissions", "Heuristic": []}, {"nl": "Generate a ISO-8601 format timestamp as required by Amazon.", "Heuristic": []}, {"nl": "Gets the list of related objects, offenders.", "Heuristic": []}, {"nl": "Gets the value of the largeIcon property.", "Heuristic": []}, {"nl": "Tracks connecting to the target.", "Heuristic": []}, {"nl": "Creates a float value by extracting the specified sub-element from the specified element.", "Heuristic": []}, {"nl": "Writes the graph's image in a file.", "Heuristic": []}, {"nl": "returns a group name according to a persons age", "Heuristic": ["H1"]}, {"nl": "Estimates the number of records in the table, which is obtainable from the statistics manager.", "Heuristic": []}, {"nl": "Test method for {@link com.sqa.em.util.helper.IdentifyObject#get2DInfo(java.lang.Object[][])}.", "Heuristic": ["H1"]}, {"nl": "Gets the canonical  {@link PaymentChannelServerState} object for this channel, either by returning an existing oneor by creating a new one.", "Heuristic": ["H1"]}, {"nl": "Set the WSS4J Validator instance to use to validate the token.", "Heuristic": []}, {"nl": "Returns the type(class) for the name specified or null if not found.", "Heuristic": []}, {"nl": "cleanup state after this test class execution", "Heuristic": ["H1"]}, {"nl": "Test for setLongitude()", "Heuristic": []}, {"nl": "Deprecated. Please use  {@link AppEventsLogger} instead.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the config property.", "Heuristic": []}, {"nl": "Get the offset to add to the position after the tag when it's replaced by its styled text", "Heuristic": []}, {"nl": "Get the value of errorLevel", "Heuristic": []}, {"nl": "Set catalog used to resolve XML URIs in the wsdl.", "Heuristic": ["H1"]}, {"nl": "Returns result value as integer.", "Heuristic": []}, {"nl": "GET  /audits/:id : get an AuditEvent by id.", "Heuristic": ["H1"]}, {"nl": "Selection: Starting at the root of the tree, choose a child node according to a multi-armed bandit algorithm (see below). Then select a child of this child, and so on until you reach a node with untried moves.", "Heuristic": []}, {"nl": "Carefully look for pattern in data. ", "Heuristic": []}, {"nl": "This filter is applied right before submission to CloudWatch. This filter can access decoded metric name elements such as  {@link MetricDatum#getDimensions()}. true means to keep and submit the metric. false means to exclude it.  Different from  {@link MetricFilter} in thatMetricFilter must operate on the encoded, single-string name (see  {@link MetricFilter#matches(String,Metric)}), and this filter is applied before  {@link ScheduledReporter#report(SortedMap,SortedMap,SortedMap,SortedMap,SortedMap)} so thatfiltered metrics never reach that method in CloudWatchReporter.  Defaults to  {@link Predicates#alwaysTrue()} - i.e. do not remove any metrics from the submission due to thisparticular filter.", "Heuristic": ["H1"]}, {"nl": "prints linked list", "Heuristic": ["H1"]}, {"nl": "Sets the timer class to use for the specified executor thread. This method should only be used by tests.", "Heuristic": []}, {"nl": "Sets the comments.", "Heuristic": []}, {"nl": "display @param array 's content to console", "Heuristic": ["H1"]}, {"nl": "Sets the measurement value.", "Heuristic": []}, {"nl": "Renders a  {@link BitMatrix} as an image, where \"false\" bits are renderedas white, and \"true\" bits are rendered as black. Uses default configuration.", "Heuristic": ["H1"]}, {"nl": "Return the public interface for EL service.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.VHWParser#getSpeedKnots()}.", "Heuristic": ["H1"]}, {"nl": "Populates the internal collection of registered  {@link CookieSpec cookiespecs} with the content of the map passed as a parameter.", "Heuristic": ["H1"]}, {"nl": "Get the user project name for a user.", "Heuristic": []}, {"nl": "Saves a boolean value under the provided key in the preference manager. If value is null, then the provided key will be removed from the preferences.", "Heuristic": []}, {"nl": "Creates a new Language only if one with the same name doesn't already exist in GeneratorManager, in which case that one is returned.", "Heuristic": []}, {"nl": "Return the public interface of the Dag engine service.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Add a character to the word being stemmed.  When you are finished adding characters, you can call stem(void) to stem the word.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Equivalent to calling  {@code flush(flushable, true)}, but with no  {@code IOException} in thesignature.", "Heuristic": ["H1"]}, {"nl": "Setea el nombre de usuario.", "Heuristic": ["H1"]}, {"nl": "Gets the inactivation reason type.", "Heuristic": []}, {"nl": "Set the Hazelcast instance, otherwise default instance used If you configure Hazelcast instance in spring, you must inject the instance here.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link BlockId#getMaxSequenceNumber()} method.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.util.Time#toString(net.sf.marineapi.nmea.util.Time)}.", "Heuristic": ["H1"]}, {"nl": "Sets value of the  {@link NIOReactorPNames#GRACE_PERIOD} parameter.", "Heuristic": ["H1"]}, {"nl": "Generates a password.", "Heuristic": []}, {"nl": "returns MessageContext", "Heuristic": ["H1"]}, {"nl": "Converts a thrift type to a wire type.", "Heuristic": []}, {"nl": "Declares the argument value to be invalid. Gui will be redrawn but with a warning drawn in red above the entry widget.", "Heuristic": ["H1"]}, {"nl": "Clear the cache, calling  {@link #entryRemoved} on each removed entry.", "Heuristic": ["H1"]}, {"nl": "Does nothing, because a start record contains no undo information.", "Heuristic": []}, {"nl": "Accessor for the length of the framed data.", "Heuristic": ["H1"]}, {"nl": "Call cleanup ThreadCleanup.cleanup on all registered ThreadCleanups", "Heuristic": ["H1"]}, {"nl": "Starts a new maximum to be the  field value in the current record.", "Heuristic": ["H1"]}, {"nl": "Registers a given user ID with SIP proxies so that other people can connect to her.", "Heuristic": []}, {"nl": "Converts the given OpCodeName into an int", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMBParser#setCrossTrackError(double)}.", "Heuristic": ["H1"]}, {"nl": "Returns the number of times  {@link #get} returned a value.", "Heuristic": ["H1"]}, {"nl": "Registers a new list. Used when setting up the checklist stuff.", "Heuristic": []}, {"nl": "Get the last recorded value for the maximum comic number.", "Heuristic": []}, {"nl": "Ensures that the provided arrays fulfills the assumptions.", "Heuristic": []}, {"nl": "Shuts down the web server.", "Heuristic": []}, {"nl": "add a node", "Heuristic": ["H1"]}, {"nl": "Normalize the given sample list by trimming and replacing any white space character with single space. This is to prevent same sample lists  to be interpreted as different lists just because of the different white space characters.", "Heuristic": ["H1"]}, {"nl": "Test of addToPane method, of class Device.", "Heuristic": []}, {"nl": "Passes any remaining events in the buffer to the listener and clears the event buffer,", "Heuristic": []}, {"nl": "Creates an OpenGraphAction suitable for posting via, e.g., a native Share dialog.", "Heuristic": []}, {"nl": "Set the list of AuthDecisionStatementBeans.", "Heuristic": []}, {"nl": "Gets the checks if is active.", "Heuristic": ["H1"]}, {"nl": "is Finished?", "Heuristic": ["H1", "H2"]}, {"nl": "Using default CallbackhandlerProviders and UserNameToken", "Heuristic": ["H1"]}, {"nl": "Sort the tags.", "Heuristic": []}, {"nl": "Tests the  {@link RPCFileReadRequest#validate()} method.", "Heuristic": ["H1"]}, {"nl": "Append params to already existing set of request query params", "Heuristic": ["H1"]}, {"nl": "Obtiene el password del usuario.", "Heuristic": ["H1"]}, {"nl": "True if some pass reported an error.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns long message of the log record.", "Heuristic": []}, {"nl": "Bounds of Window on Screen.", "Heuristic": []}, {"nl": "Creates a \"default\" BindingInfo object for the service.  Can return a subclass which can then process the extensors within the subclass.   By default, just creates it for the first ServiceInfo in the service", "Heuristic": ["H1"]}, {"nl": "Sets the pcl data units.", "Heuristic": ["H1"]}, {"nl": "Returns the  {@code OAuthServerConfiguration} instance", "Heuristic": ["H1"]}, {"nl": "Authenticates the user (first phase). The implementation does not really authenticate the user here. Always return true.", "Heuristic": []}, {"nl": "Test of run method, of class TickerThread.", "Heuristic": []}, {"nl": "Get an instance of the JDBCPersistenceManager. It implements a lazy initialization with double checked locking, because it is initialized first by identity.core module during the start up.", "Heuristic": ["H1"]}, {"nl": "Sets up the dependencies before a test runs.", "Heuristic": []}, {"nl": "Internal conversion. This is needed to support the current SpringBoot actuator AuditEventRepository interface", "Heuristic": []}, {"nl": "Commits the authentication (second phase).  This method is called if the LoginContext's overall authentication succeeded. The implementation first checks if there is already Alluxio user in the subject. If not, it adds the previously logged in Alluxio user into the subject.", "Heuristic": ["H1"]}, {"nl": "Deserialize only an i64 field (addressed by recursively using field id) from a byte record.", "Heuristic": ["H1"]}, {"nl": "Sets the size of the cache.", "Heuristic": []}, {"nl": "Equality comparison.", "Heuristic": ["H2"]}, {"nl": "Test case for  {@link S3UnderFileSystem#rename(String,String)}.", "Heuristic": ["H1"]}, {"nl": "Set a field with the specified value. If the field is not found, it is added. If the field is found, the existing values are replaced.", "Heuristic": []}, {"nl": "Called when view is detached from view hierarchy and allows for some additional cleanup by the  {@link ViewManager} subclass.", "Heuristic": ["H1"]}, {"nl": "Return a string representation of this status.", "Heuristic": []}, {"nl": "Returns the dataval of the record at the specified slot.", "Heuristic": ["H1"]}, {"nl": "Return the transition model: P(Xt | Xt-1) is represented by an S  S matrix T where Tij = P(Xt = j | Xt-1 = i).", "Heuristic": ["H1"]}, {"nl": "Test of writeProgram method, of class ComPortController.", "Heuristic": []}, {"nl": "Returns a BufferedImage using the specified width and height. By default this returns an image compatible with the screen (if not in \"headless\" mode) using the BufferedImage type specified in {@link #setBufferedImageType(int)}, or else RGB if none if specified.", "Heuristic": ["H1"]}, {"nl": "Remove entry from individual structures.", "Heuristic": []}, {"nl": "Test of isTimeOutFlag method, of class LogEntryRequest.", "Heuristic": []}, {"nl": "Looks up Finalizer.startFinalizer().", "Heuristic": ["H1"]}, {"nl": "It attempts to get the password from the private  alias/passwords map.", "Heuristic": ["H1"]}, {"nl": "Returns a string, of length at least  {@code minLength}, consisting of  {@code string} appendedwith as many copies of  {@code padChar} as are necessary to reach that length. For example,  {@code padEnd(\"4.\", 5, '0')} returns {@code \"4.000\"} {@code padEnd(\"2010\", 3, '!')} returns {@code \"2010\"} See  {@link java.util.Formatter} for a richer set of formatting capabilities.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Return the index within the underlying buffer that specifies the next spot that should be read from.", "Heuristic": []}, {"nl": "Act - do whatever the Save wants to do. This method is called whenever the 'Act' or 'Run' button gets pressed in the environment.", "Heuristic": []}, {"nl": "tar.gz the contents of the tree at the (optionally) specified revision and the (optionally) specified basepath to the supplied outputstream.", "Heuristic": ["H1"]}, {"nl": "Sets the version of the cookie specification to which this cookie conforms.", "Heuristic": []}, {"nl": "Handle event from the RawRtfParser.", "Heuristic": ["H1"]}, {"nl": "Validate against DISALLOWED Properties.", "Heuristic": []}, {"nl": "Returns Default EPR for a given Service name & IP", "Heuristic": []}, {"nl": "get float preferences", "Heuristic": ["H1"]}, {"nl": "Returns the port of the origin server; typically 80 or 443. Unlike may  {@code getPort()} accessors, this method never returns -1.", "Heuristic": ["H1"]}, {"nl": "Add a classifier to the current context.", "Heuristic": []}, {"nl": "Sets the media attribute of the StylesheetInfo object", "Heuristic": []}, {"nl": "appends new node as the last node", "Heuristic": ["H1"]}, {"nl": "Description:", "Heuristic": ["H2"]}, {"nl": "Tests the  {@link FileUtils#delete(String)} method when trying to delete a file and a directory.", "Heuristic": ["H1"]}, {"nl": "Calculates the (one-time) hash of contents and returns it as a new wrapped hash.", "Heuristic": []}, {"nl": "Creates class diagram under the root. Is used for classes out of packages.", "Heuristic": []}, {"nl": "Sets value of the  {@link CoreProtocolPNames#HTTP_ELEMENT_CHARSET} parameter.", "Heuristic": ["H1"]}, {"nl": "Get the number of elements in the list", "Heuristic": []}, {"nl": "Returns whether a given state is the moved state.", "Heuristic": []}, {"nl": "Tests the  {@link ShellUtils#execCommand(String)} method.", "Heuristic": ["H1"]}, {"nl": "Gets the application context.", "Heuristic": []}, {"nl": "Increment the number of not approved conflicts.", "Heuristic": []}, {"nl": "Hash code for the core (separated so we keep non overridden version).", "Heuristic": ["H1"]}, {"nl": "Returns the dataRID value from the current leaf record.", "Heuristic": []}, {"nl": "Test method for {@link com.sqa.em.util.helper.RequestInput#getInt(java.lang.String,int,int)}.", "Heuristic": ["H1"]}, {"nl": "Returns the number of checkpoints that were loaded.", "Heuristic": []}, {"nl": "Adds a URL to the set associated with `term`.", "Heuristic": []}, {"nl": "Get the file name associated with the current source file.", "Heuristic": []}, {"nl": "Returns true if the token is empty (token = \"\", secret = \"\")", "Heuristic": ["H1"]}, {"nl": "This loader is used when bundle gets reloaded from dev server. In that case loader expect JS bundle to be prefetched and stored in local file. We do that to avoid passing large strings between java and native code and avoid allocating memory in java to fit whole JS bundle in it. Providing correct  {@param sourceURL} of downloaded bundle is required for JS stacktraces towork correctly and allows for source maps to correctly symbolize those.", "Heuristic": ["H1"]}, {"nl": "Sets the name of the third-party application this client represents", "Heuristic": []}, {"nl": "Sets the suffix blacklist patterns. A pattern can be \"com\", \".jp\" TODO add support for patterns like \"lib..us\"", "Heuristic": ["H1"]}, {"nl": "Set parent.", "Heuristic": ["H2"]}, {"nl": "Determines the locale of the response. The implementation in this class always returns the default locale.", "Heuristic": []}, {"nl": "get coordinate at specific index calls: none called by: centroid, codebook", "Heuristic": ["H1"]}, {"nl": "Adds each member of  {@code elements} as a candidate for the top {@code k} elements. Thisoperation takes amortized linear time in the length of  {@code elements}. The iterator is consumed after this operation completes. If all input data to this  {@code TopKSelector} is in a single {@code Iterator}, prefer  {@link Ordering#leastOf(Iterator,int)}, which provides a simpler API for that use case.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Resolve handler chain configuration file associated with the given class", "Heuristic": []}, {"nl": "Gets the value of the source property.", "Heuristic": []}, {"nl": "DELETE  /site-urls/:id : delete the \"id\" siteUrl.", "Heuristic": ["H1"]}, {"nl": "Gets the reason phrase from the origin  {@link HttpResponse}, for example, \"Not Modified\".", "Heuristic": ["H1"]}, {"nl": "This callback is called on a registration event.", "Heuristic": []}, {"nl": "Gets an array of int values out of the object.", "Heuristic": []}, {"nl": "First byte of a base58 encoded P2SH address.  P2SH addresses are defined as part of BIP0013.", "Heuristic": []}, {"nl": "Returns the number of edges in this graph; used to calculate the size of  {@link #edges()}. This implementation requires O(|N|) time. Classes extending this one may manually keep track of the number of edges as the graph is updated, and override this method for better performance.", "Heuristic": ["H1"]}, {"nl": "Moves to the next log record in reverse order. If the current log record is the earliest in its block, then the method moves to the next oldest block, and returns the log record from there.", "Heuristic": []}, {"nl": "Expands the property table", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Get the list of itemsets in this sequence.", "Heuristic": ["H1"]}, {"nl": "Creates a copied map of the values of the properties and returns it.", "Heuristic": []}, {"nl": "Gets Current Value.", "Heuristic": []}, {"nl": "Gets the value of the template property.", "Heuristic": []}, {"nl": "Creates another directory on the local filesystem, alongside the existing Ufs, to be used as a second Ufs.", "Heuristic": ["H1"]}, {"nl": "Locates and decodes a PDF417 code in an image.", "Heuristic": []}, {"nl": "Tests the  {@link RPCBlockReadRequest#RPCBlockReadRequest(long,long,long,long,long)}constructor with an invalid length.", "Heuristic": ["H1"]}, {"nl": "Test of getMeanResponseTime method, of class LogEntryInterval.", "Heuristic": []}, {"nl": "Ensures that the given classes are initialized, as described in  JLS Section 12.4.2. WARNING: Normally it's a smell if a class needs to be explicitly initialized, because static state hurts system maintainability and testability. In cases when you have no choice while inter-operating with a legacy framework, this method helps to keep the code less ugly.", "Heuristic": ["H1", "H4"]}, {"nl": "Gets Entrez Gene ID for Gene B.", "Heuristic": ["H1"]}, {"nl": "Returns a new object with rotated image data by 45 degrees counterclockwise. Only callable if  {@link #isRotateSupported()} is true.", "Heuristic": ["H1"]}, {"nl": "I don't see any value in using this in an application; you probably should use {@link #determineBucketsInternal(HttpServletRequest,HttpServletResponse,String,Map,boolean)}TODO: should the identifier argument be a Map from TestType to ID?", "Heuristic": ["H1"]}, {"nl": "Adds a newly created resource to the pool. The resource is not available when it is added.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Return the lifetime of the generated SCT", "Heuristic": []}, {"nl": " Extracts a row or column vector from matrix A.  The first element in the matrix is at element (rowA,colA). The next 'length' elements are extracted along a row or column.  The results are put into vector 'v' start at its element v0. ", "Heuristic": ["H1"]}, {"nl": "pop.", "Heuristic": ["H1", "H2"]}, {"nl": "Finds all SOAP Childs of an SOAPElement (non recursive) This is useful, as getChildElements() will also contain Text Nodes. This method only returns instances of SOAPElement", "Heuristic": ["H1"]}, {"nl": "parse the name of a (java) class.", "Heuristic": ["H1"]}, {"nl": "Gets command string executed on the shell", "Heuristic": []}, {"nl": "Sets the IP address of the target host.", "Heuristic": []}, {"nl": "Gets a card from the enemy hand.", "Heuristic": []}, {"nl": "Zips a local directory, recursively, into a ZIP stream.", "Heuristic": []}, {"nl": "Mirror the bit matrix in order to attempt a second reading.", "Heuristic": []}, {"nl": "Captures SshConnectedEvent", "Heuristic": []}, {"nl": "Returns the socket that this connection uses, or null if the connection is not currently connected.", "Heuristic": []}, {"nl": "Not-null value; ensure this value is available before it is saved to the database.", "Heuristic": []}, {"nl": "Wait until an Cluster is Available.", "Heuristic": ["H1"]}, {"nl": "Check login method wil check user login status If false it will redirect user to login page Else won't do anything", "Heuristic": ["H1"]}, {"nl": "Creates a CascadedStyle using the provided property declarations.  It is used when a box requires a style that does not correspond to anything in the parsed stylesheets.", "Heuristic": []}, {"nl": "Get Instance get the static and only instance of the GMC class", "Heuristic": []}, {"nl": "display @param array 's content to console", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.SentenceFactory#createParser(java.lang.String)}.", "Heuristic": ["H1"]}, {"nl": "Sets the list of in fault interceptors which will deal with the HTTP faults; the client code may choose to catch  {@link WebApplicationException}exceptions instead.", "Heuristic": ["H1"]}, {"nl": "Return the template of the email", "Heuristic": []}, {"nl": "Returns the equivalent  {@code com.google.common.base.Optional} value to the given {@code java.util.Optional}, or  {@code null} if the argument is null.", "Heuristic": ["H1"]}, {"nl": "Add an alias/password pair to the callback mechanism.", "Heuristic": []}, {"nl": "Gets Global Singleton.", "Heuristic": []}, {"nl": "Gets the file extension of a file.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.GSAParser#getPositionDOP()}.", "Heuristic": ["H1"]}, {"nl": "Adds a name/value pair to the formatted output in  {@code name=value} format.", "Heuristic": ["H1"]}, {"nl": "Stops the server.", "Heuristic": []}, {"nl": "Writes the contents of a bytebuffer into a disk block.", "Heuristic": ["H1"]}, {"nl": "Return the answer to the specified question using the PL-FC-Entails algorithm", "Heuristic": []}, {"nl": "Set the document to be rendered, lays it out, and renders it.", "Heuristic": []}, {"nl": "Tests that block locks are returned to the pool when they are no longer in use.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMCParser#setDataStatus(DataStatus)}.", "Heuristic": ["H1"]}, {"nl": "Builds the qualified name of a method declaration.", "Heuristic": []}, {"nl": "Returns the list of branches changed by the push.", "Heuristic": []}, {"nl": "Gets the value of the given member as a JWE Encryption Method, null if it doesn't exist", "Heuristic": ["H1"]}, {"nl": "Returns a hash code for this the enumeration value.", "Heuristic": []}, {"nl": "Used to cancel a block which is being written. worker will delete the temporary block file and the location and space information related, then reclaim space allocated to the block.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the workflowImplId property.", "Heuristic": ["H1"]}, {"nl": "Obtains the scheme name.", "Heuristic": []}, {"nl": "send the information SMS messages other than messages comming form the Axis2 Engine", "Heuristic": ["H1"]}, {"nl": "Moves the queen in the specified column (x-value of l) to the specified row (y-value of l). The action assumes a complete-state formulation of the n-queens problem.", "Heuristic": []}, {"nl": "Write the given byte array to the buffer", "Heuristic": []}, {"nl": "Return the overwrite flag requested by the client for this transaction.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns a string representation of  {@code x} for the given radix, where {@code x} is treated asunsigned.", "Heuristic": ["H1"]}, {"nl": "Retrieves the category the featureset was classified as.", "Heuristic": ["H1"]}, {"nl": "Gets the value.", "Heuristic": []}, {"nl": "Remove this member from its project.", "Heuristic": []}, {"nl": "Tests the creation of the  {@link MaxFreeAllocator} via the{@link Allocator.Factory#create(BlockMetadataManagerView)} method.", "Heuristic": ["H1"]}, {"nl": "add key-value pair to map, key need not null or empty", "Heuristic": ["H1"]}, {"nl": "Sets the feed id.", "Heuristic": ["H1"]}, {"nl": "Returns the body of the request", "Heuristic": []}, {"nl": "Writes a start record to the log. This log record contains the START operator, followed by the transaction id.", "Heuristic": ["H1"]}, {"nl": "Creates an instance of  {@link DefaultHttpResponseFactory} to be usedfor creating  {@link HttpResponse} objects received by over thisconnection.  This method can be overridden in a super class in order to provide a different implementation of the  {@link HttpResponseFactory} interface.", "Heuristic": ["H1"]}, {"nl": "Configures the signature type, choose between header, querystring, etc. Defaults to Header", "Heuristic": ["H1"]}, {"nl": "Send an ERROR log message.", "Heuristic": []}, {"nl": "Tries to set a GCStatus for the specified repository.", "Heuristic": []}, {"nl": "Appends an array of ints.", "Heuristic": ["H1"]}, {"nl": "create a spring with a random uuid for its name.", "Heuristic": ["H1"]}, {"nl": "Returns last played date in \"yyyy-MM-dd HH:mm:ss\" format", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData.SourceGeos.Geo }", "Heuristic": ["H1"]}, {"nl": "Returns the default executor this event bus uses for dispatching events to subscribers.", "Heuristic": []}, {"nl": "Sets the end time.", "Heuristic": []}, {"nl": "Unpins the specified buffer.", "Heuristic": []}, {"nl": "Gets the value of the regExForValidate property.", "Heuristic": []}, {"nl": "If we're running on JDK 1.4 or later, initialize the cause for the given throwable.", "Heuristic": ["H1"]}, {"nl": "Assert that a Map has entries; that is, it must not be  {@code null}and must have at least one entry. Assert.notEmpty(map, \"Map must have entries\");", "Heuristic": ["H1"]}, {"nl": "Gets the unencoded data returned from a something.read call  //@param ret The return from the read call", "Heuristic": ["H1"]}, {"nl": "Frees PreparedStatement and ResultSet.", "Heuristic": []}, {"nl": "Cleanup the scenario. Called once, in the main client thread, after all operations have completed.", "Heuristic": []}, {"nl": "This function scales the row", "Heuristic": []}, {"nl": "Finds the best fit parameters.", "Heuristic": []}, {"nl": "Clear the hashmap.", "Heuristic": ["H1"]}, {"nl": "Creates an OpenGraphObject suitable for posting via, e.g., a native Share dialog. The object will have no properties other than a 'create_object' and 'data' property, ready to be populated.", "Heuristic": []}, {"nl": "Formats the page by initializing as many index-record slots as possible to have default values. Each integer field is given a value of 0, and each string field is given a value of \"\". The location that indicates the number of records in the page is also set to 0.", "Heuristic": []}, {"nl": "GET  /activate : activate the registered user.", "Heuristic": ["H1"]}, {"nl": "Add headers which are in the authentication request.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Return the first item from a collection using the most efficient method possible. Returns null for an empty collection.", "Heuristic": []}, {"nl": "Return the item in the set matching a particular item (or null if not found)", "Heuristic": []}, {"nl": "TODO: factor out", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.VTGParser#setMode(FaaMode)}.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Deletes the file or directory. Current implementation uses  {@link java.io.File#delete()}, may change if there is a better solution.", "Heuristic": ["H1"]}, {"nl": "emphasize high freq signal", "Heuristic": ["H1"]}, {"nl": "Returns the string value for the specified key. If the key does not exist or the value for the key can not be interpreted as a string, the defaultValue is returned.", "Heuristic": []}, {"nl": "Removes all listeners from this object. This is equivalent to calling getListeners() followed by calling clear() on the returned list of listeners.", "Heuristic": []}, {"nl": "Estimates the number of output records in the product. The formula is:  R(product(p1,p2)) = R(p1)R(p2) ", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link MasterWorkerInfo#updateUsedBytes(String,long)} method.", "Heuristic": ["H1"]}, {"nl": "Readable version of the remote.", "Heuristic": []}, {"nl": "Copies all of the mappings from the specified map to this map. The effect of this call is equivalent to that of calling  {@code put(k, v)} on this map once for each mapping from key{@code k} to value {@code v} in the specified map. The behavior of this operation is undefinedif the specified map is modified while the operation is in progress.", "Heuristic": ["H1"]}, {"nl": "Extracts the total results from just counting the nodes of the  specified name in the XML.", "Heuristic": ["H1"]}, {"nl": "Unpack library and its dependencies, returning the location of the unpacked library file.  All non-system dependencies of the given library will either be on LD_LIBRARY_PATH or will be in the same directory as the returned File.", "Heuristic": []}, {"nl": "This method will test for know issues in certain containers where %2F is blocked from use in URLs. It will emit a warning to the logger if the configuration of Tomcat causes the URL processing to fail on %2F.", "Heuristic": []}, {"nl": "Unregisters the  {@link CookieSpecFactory} with the given ID.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.VTGParser#setSpeedKmh(double)}.", "Heuristic": ["H1"]}, {"nl": "Gets the entity manager.", "Heuristic": []}, {"nl": "Check if this node is associated with a package.", "Heuristic": []}, {"nl": "Gets the opened input stream for this open file entry. The value returned can be  {@code null}if the file is not open for reading.", "Heuristic": ["H1"]}, {"nl": "Required.", "Heuristic": ["H2"]}, {"nl": "Replaces the domain of the specified variable by new domain, which contains all values of the old domain except the specified value.", "Heuristic": []}, {"nl": "Sets the data unit id.", "Heuristic": ["H1"]}, {"nl": "Remove a control", "Heuristic": []}, {"nl": "Notify the registered Observer about the incomming shotMessage", "Heuristic": ["H1"]}, {"nl": "Returns the total number of entries in the receiver. This will be exactly twice the number of types added.", "Heuristic": []}, {"nl": "Retrieves the publicKey", "Heuristic": []}, {"nl": "Gets the feed id.", "Heuristic": ["H1"]}, {"nl": "Set up.", "Heuristic": ["H2"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Evaluates the given XACML request for given SAML based authorization query", "Heuristic": ["H1"]}, {"nl": "Return object isntance as string", "Heuristic": ["H1"]}, {"nl": "Maximum number of retries when binding to a port before giving up.", "Heuristic": []}, {"nl": "Getter for constructor ordering", "Heuristic": []}, {"nl": "Adds an end point URL of a service as a trusted", "Heuristic": []}, {"nl": "Required.", "Heuristic": ["H2"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "GET  /audits : get a page of AuditEvents between the fromDate and toDate.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link StorageTierView#getTierViewOrdinal()} method.", "Heuristic": ["H1"]}, {"nl": "Mutator for shouldSave.", "Heuristic": ["H1"]}, {"nl": "Gets the redirect uri which needs to be retained in a hidden form field", "Heuristic": ["H1"]}, {"nl": "If the given Object has no  {@link XmlRootElement} annotation and is not an instants of {@link JAXBElement} itmust be wrapped by a  {@link JAXBElement}.  This method will find the  {@code ObjectFactory} class (normally generated by jaxb) and use the first matchingfactory-method for the given Object to create the  {@link JAXBElement}-Wrapper.  If no ObjectFactory and method exists for the given object, the default behavior (same behavior as by {@link JAXB}) will be used to create the  {@link JAXBElement}-Wrapper for the given Object.  If you don't use the  {@code xjc:simple} flag to generate your JAXB-Objects, the use of the OjectFactory is most likelyrequired to generate Schema-Valid XML.", "Heuristic": ["H1"]}, {"nl": "Converts a byte to an integer.", "Heuristic": []}, {"nl": "Checks to see if the peasant is able to harvest in the passed in game state", "Heuristic": ["H1"]}, {"nl": "Returns the parent of the processor.", "Heuristic": []}, {"nl": "Name of logger to associate with ATOM push handler; empty string for root logger.", "Heuristic": []}, {"nl": "Tests whether we can get login user with conf in CUSTOM mode, when user name is provided by the application through configuration.", "Heuristic": ["H1"]}, {"nl": "Gets the data of this datagram packet.", "Heuristic": ["H1"]}, {"nl": "Appends len chars to this buffer from the given source char array buffer starting at index off. The capacity of the buffer is increased if necessary to accommodate all len chars.  The chars are converted to bytes using simple cast.", "Heuristic": ["H1"]}, {"nl": "Puts the token value into a Bundle.", "Heuristic": []}, {"nl": "Resets this instance to its default state. This method is meant to be used when recycling  {@link CSSNode} instances.", "Heuristic": ["H1"]}, {"nl": "Not activated users should be automatically deleted after 3 days.  This is scheduled to get fired everyday, at 01:00 (am). ", "Heuristic": ["H1"]}, {"nl": "Gets the successor id.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Sets the recursive flag.", "Heuristic": []}, {"nl": "Initialize the Model subsystem with the default ModelImplementation.", "Heuristic": []}, {"nl": "Check whether the given Iterator contains the given element.", "Heuristic": []}, {"nl": "Write bytes into the OutputStream by given encoding.", "Heuristic": []}, {"nl": "Returns the number of times  {@link #get} returned null or required a newvalue to be created.", "Heuristic": ["H1"]}, {"nl": "Sets the size of the matrix being decomposed, declares new memory if needed, and sets all helper functions to their initial value.", "Heuristic": []}, {"nl": "Get Unix file status information for a file. This method is only implemented for OSes of the Unix family. It returns file status information for a file. Currently this is the file mode, the user id and group id of the owner.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Checks to see if the passed in tridiagonal decomposition is of the appropriate type for the matrix of the provided size.  Returns the same instance or a new instance.", "Heuristic": ["H1"]}, {"nl": "Gets the list of prefixes.", "Heuristic": []}, {"nl": "Set the output directory.", "Heuristic": []}, {"nl": "Clears all views", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Checks whether any version of messenger is installed.", "Heuristic": []}, {"nl": "Sends this message to the specified socket channel. Make sure this is a send message.", "Heuristic": ["H1"]}, {"nl": "Send an ERROR log message.", "Heuristic": []}, {"nl": "Convenience method that can decode a QR Code represented as a 2D array of booleans. \"true\" is taken to mean a black module.", "Heuristic": ["H1"]}, {"nl": "Get this node's position right, as defined by style.", "Heuristic": []}, {"nl": "Sets the properties and configuration before each test runs.", "Heuristic": []}, {"nl": "set to default spec;", "Heuristic": ["H1"]}, {"nl": "Sets the access token the client is using now during the current request", "Heuristic": []}, {"nl": "Calculates the Euclidean distance between this position and another. May be useful for your heuristic.", "Heuristic": []}, {"nl": "Returns a  {@link Pair} of components of the given scheme. A given scheme may have have twocomponents if it has the ':' character to specify a sub-protocol of the scheme. If the scheme does not have multiple components, the first component will be the empty string, and the second component will be the given scheme. If the given scheme is null, both components in the  {@link Pair} will be null.", "Heuristic": ["H1"]}, {"nl": "Get the rules that together form the perspective.", "Heuristic": []}, {"nl": "Get the action that removes selected figs from the diagram.", "Heuristic": []}, {"nl": "Returns the path cost function.", "Heuristic": []}, {"nl": "Compares this IntegerHolder to another IntegerHolder.", "Heuristic": []}, {"nl": "Test case for  {@link S3AUnderFileSystem#rename(String,String)}.", "Heuristic": ["H1"]}, {"nl": "Get BPS Profile detail for given profile name", "Heuristic": []}, {"nl": "Standard toString - returns the string used during construction.", "Heuristic": []}, {"nl": "Append the String str to the description.   The default implementation passes every character to  {@link #append(char)}.   Override in subclasses to provide an efficient implementation.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the id property.", "Heuristic": ["H1"]}, {"nl": "Format UTC dateTime to desired format", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets the data unit id.", "Heuristic": ["H1"]}, {"nl": "Inserts a leaf index record at the specified slot.", "Heuristic": []}, {"nl": "Gets the data source, where this interaction comes from, e.g. REACTOME.", "Heuristic": ["H1"]}, {"nl": "Returns an immutable snapshot of the current statistics.", "Heuristic": []}, {"nl": "Called when a change in the shown pages is going to start being made.", "Heuristic": []}, {"nl": "A static utility method to automatically create an image from a document, where height is determined based on document content. To estimate a size before rendering, use  {@link #setDocument(String)}and then  {@link #getMinimumSize()}. The rendered image supports transparency.", "Heuristic": ["H1"]}, {"nl": "Initialize the mapper with the given rulesets.", "Heuristic": ["H1"]}, {"nl": "Converts a wire type to a thrift type.", "Heuristic": []}, {"nl": "Tests the  {@link IndexedSet#remove(Object)} method to work correctly when trying to remove anon-existent item.", "Heuristic": ["H1"]}, {"nl": "The backing script bytes which can be turned into a Script object.", "Heuristic": []}, {"nl": "Add a new authentication request which is sent for authentication.", "Heuristic": []}, {"nl": "Get the next token from the buffer.", "Heuristic": []}, {"nl": "Where to find the schema.", "Heuristic": []}, {"nl": "Create a rabbit mq connection", "Heuristic": ["H1"]}, {"nl": "Get the default Key Type to be issued for this Service", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Eventually sets the element at position  {@code i} to the given value.", "Heuristic": ["H1"]}, {"nl": "Gets the property.", "Heuristic": []}, {"nl": "Set the conflicting property", "Heuristic": []}, {"nl": "Create a new NotationProvider.", "Heuristic": []}, {"nl": "Setup a directory with the given name for the caller test.", "Heuristic": ["H1"]}, {"nl": "Find a user by user id", "Heuristic": ["H1"]}, {"nl": "checkState prueft ob die Schlange am leben ist bzw. ob etwas (Kollision mit Border/Sich Selbst) diesen Status geaendert hat.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns the  {@link Resource} containing the origin response body.", "Heuristic": ["H1"]}, {"nl": "Setter for the value of the tag.", "Heuristic": []}, {"nl": "Helper for success callbacks that just returns the Status.OK by default", "Heuristic": ["H1"]}, {"nl": "Defaults to true. False for types that disappear entirely when null, even when nillable.", "Heuristic": ["H1"]}, {"nl": "Return the public interface for the purge jobs service.", "Heuristic": []}, {"nl": "Parse a string into a  {@code Expr} AST node,applying substitutions.", "Heuristic": ["H1"]}, {"nl": "Sets up a new  {@link MountTable} before a test runs.", "Heuristic": ["H1"]}, {"nl": "calculates MFCC coefficients of each frame", "Heuristic": ["H1"]}, {"nl": "Return the number of the workflows being returned.  For pagination purposes.", "Heuristic": []}, {"nl": "Add a collection of values to the pending animation value queue", "Heuristic": []}, {"nl": "Test some of the PMD command line options", "Heuristic": ["H1"]}, {"nl": "Finds an attribute handler  {@link CookieAttributeHandler} for thegiven attribute. Returns null if no attribute handler is found for the specified attribute.", "Heuristic": ["H1"]}, {"nl": "add AND condition", "Heuristic": ["H1"]}, {"nl": "Returns the internal matrix where the decomposed results are stored.", "Heuristic": []}, {"nl": "Convenience method, equivalent to calling {@link #decompress(byte[],byte[],int) decompress(src, dest, dest.length)}.", "Heuristic": ["H1"]}, {"nl": "complete header+data packet for transmission", "Heuristic": ["H1"]}, {"nl": "Determine if it is a leap year", "Heuristic": []}, {"nl": "Called when this  {@link Presenter} is going to be destroyed, so it has a chance torelease resources. The extending  {@code Presenter} can override this method to provide somecustom logic.", "Heuristic": ["H1"]}, {"nl": "Gets the command.", "Heuristic": []}, {"nl": "Positions the scan before the first record, which in this case means positioning the index before the first instance of the selection constant.", "Heuristic": []}, {"nl": "Do the action of this wizard.", "Heuristic": []}, {"nl": "Determine the content type of the given message. This method will try the registered rules in turn until the first rule matches.", "Heuristic": []}, {"nl": "Determine whether a specific date is on DST change day", "Heuristic": []}, {"nl": "Returns a hash consistent with Spark's Utils.nonNegativeHash().", "Heuristic": ["H1"]}, {"nl": "Asserts that the message back matches the block response protocols.", "Heuristic": []}, {"nl": "Clears the attribute key filters.", "Heuristic": []}, {"nl": "Tests the  {@link BlockMetadataManagerView#getTierViews()} method.", "Heuristic": ["H1"]}, {"nl": "Add a package to the current diagram. If the package already has a representation in the current diagram, it is not(!) added.", "Heuristic": []}, {"nl": "for log msg purposes", "Heuristic": ["H1"]}, {"nl": "Print this sequence to System.out.", "Heuristic": []}, {"nl": "Initialize TestClass", "Heuristic": []}, {"nl": "Adds parameter to URI query. The parameter name and value are expected to be unescaped and may contain non ASCII characters.", "Heuristic": []}, {"nl": "For example, for the uri: alluxio://host:1000/foo/bar/baz, the path is /foo/bar/baz.", "Heuristic": ["H1"]}, {"nl": "Gets the  {@link StoredServerChannel} with the given channel id (ie contract transaction hash).", "Heuristic": ["H1"]}, {"nl": "returns the last Ack. sequence number", "Heuristic": ["H1"]}, {"nl": "Set the coordinate application console URL.", "Heuristic": []}, {"nl": "Creates a DOM Node from a TraX Source. If the source is a  {@link DOMSource} its Node will bereturned, otherwise this delegates to  {@link #toDocument}.", "Heuristic": ["H1"]}, {"nl": "Test of getDeviceNames method, of class Device.", "Heuristic": []}, {"nl": "Adds a name/value pair to the formatted output in  {@code name=value} format.", "Heuristic": ["H1"]}, {"nl": "Compares this data point with the given datapoint.", "Heuristic": ["H1"]}, {"nl": "Gets the transport address used by  {@link org.apache.cxf.frontend.ServerFactoryBean}.", "Heuristic": ["H1"]}, {"nl": "Returns the collected sentences.", "Heuristic": []}, {"nl": "Whether the request is a post or not", "Heuristic": []}, {"nl": "A new method that interrupts the worker thread.  Call this method to force the worker to stop what it's doing.", "Heuristic": []}, {"nl": "Mutator for the MessageID property.", "Heuristic": ["H1"]}, {"nl": "Overloaded version for byte arrays", "Heuristic": []}, {"nl": "Gets the value of the id property.", "Heuristic": ["H1"]}, {"nl": "Obtiene una lista de las instancias de tareas de usuario activas.", "Heuristic": ["H1"]}, {"nl": "Returns the HTTP status message or null if it is unknown.", "Heuristic": []}, {"nl": "Converts  {@link MarginLayoutParams} into a representative {@link Rect}", "Heuristic": ["H1"]}, {"nl": "Produce a JSONArray of JSONObjects from a comma delimited text string, using the first row as a source of names.", "Heuristic": []}, {"nl": "Translates literal name to correspondent enumeration value.", "Heuristic": []}, {"nl": "Increments by one the value currently associated with  {@code key}, and returns the old value.", "Heuristic": ["H1"]}, {"nl": "Returns the number of settings that have values assigned.", "Heuristic": []}, {"nl": "Send the connection a debug channel connected message.", "Heuristic": []}, {"nl": "The maximum size, in bytes, of a string of length n. A string is represented as the encoding of its characters, preceded by an integer denoting the number of bytes in this encoding. If the JVM uses the US-ASCII encoding, then each char is stored in one byte, so a string of n characters has a size of 4+n bytes.", "Heuristic": []}, {"nl": "Exchanges the internal array of the diagonal elements for the provided one.", "Heuristic": []}, {"nl": "Internal use, runs the render process", "Heuristic": []}, {"nl": "Gets the value of the id property.", "Heuristic": ["H1"]}, {"nl": "Returns the top level package stats.", "Heuristic": []}, {"nl": "Clear the cache, calling  {@link #entryRemoved} on each removed entry.", "Heuristic": ["H1"]}, {"nl": "Calculates the SHA-1 hash of the public key of the given certificate.", "Heuristic": []}, {"nl": "Printing this token out. (Override for pretty-print).", "Heuristic": []}, {"nl": "Create and return a new Directory instance.", "Heuristic": []}, {"nl": "Verify user name/password authentication.", "Heuristic": ["H1"]}, {"nl": "Default TCP port on which to connect to nodes.", "Heuristic": []}, {"nl": "Test for getLonHemisphere()", "Heuristic": []}, {"nl": "Tests the  {@link HdfsUnderFileSystem#getUnderFSType()} method. Confirm the UnderFSType forHdfsUnderFileSystem.", "Heuristic": ["H1"]}, {"nl": "Estimates the number of block accesses to compute the  index selection, which is the same as the  index traversal cost plus the number of matching data records.", "Heuristic": ["H1"]}, {"nl": "There are 3 possibilites for every attribute.", "Heuristic": ["H1"]}, {"nl": "Returns the bytes interpreted as a positive integer.", "Heuristic": []}, {"nl": "Adds or subtracts the specified amount of time to the given calendar field, based on the calendar's rules. For example, to after 5 days from the current time of the calendar, you can achieve it by calling:   getAfterDate(Calendar.DAY_OF_MONTH, 5) ", "Heuristic": ["H1"]}, {"nl": "cancel the sending", "Heuristic": ["H1"]}, {"nl": "The file after it has been compressed", "Heuristic": []}, {"nl": "Returns the length of the word resulting from the stemming process.", "Heuristic": []}, {"nl": "Enable the importer.", "Heuristic": []}, {"nl": "Closes log file", "Heuristic": []}, {"nl": "Implements BundleActivator.stop(). Does nothing since the framework will automatically unregister any registered services.", "Heuristic": []}, {"nl": "Return the number of active locks.", "Heuristic": []}, {"nl": "Bounds of Scene in Window.", "Heuristic": []}, {"nl": "Allows the caller to remove the last event from the buffer.", "Heuristic": []}, {"nl": "Returns the html version of the markdown source reader. The reader is closed regardless of success or failure.", "Heuristic": ["H1"]}, {"nl": "Get the subject.", "Heuristic": []}, {"nl": "Unregisters an  {@link AccessibilityManager.AccessibilityStateChangeListener}.", "Heuristic": ["H1"]}, {"nl": "Calculate the mid point of the first two fingers", "Heuristic": ["H1"]}, {"nl": "Tests getting and setting fields.", "Heuristic": []}, {"nl": "Declares the internal data structures so that it can process matrices up to the specified size.", "Heuristic": []}, {"nl": "Gets the value of the y property.", "Heuristic": []}, {"nl": "Returns an estimate of the number of block accesses required to execute the query. The formula is:  B(product(p1,p2)) = B(p2) + B(p1)C(p2)  where C(p2) is the number of chunks of p2. The method uses the current number of available buffers to calculate C(p2), and so this value may differ when the query scan is opened.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link PlainSaslServer#evaluateResponse(byte[])} method when the password is not set.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link PlainSaslServer#getAuthorizationID()} method.", "Heuristic": ["H1"]}, {"nl": "Creates OAuth Authorization header", "Heuristic": []}, {"nl": "Removes registered handler, if exists, for the given pattern.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.HDGParser#setVariation(double)}.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns the original value of the default locale for this instance of the Java Virtual Machine (which is independent from the selected configuration).", "Heuristic": ["H1"]}, {"nl": "Returns the Constant value of the specified field in the group.", "Heuristic": []}, {"nl": "Set the SignatureProperties to use.", "Heuristic": []}, {"nl": "For caches that do not override  {@link #sizeOf}, this returns the maximum number of entries in the cache. For all other caches, this returns the maximum sum of the sizes of the entries in this cache.", "Heuristic": ["H1"]}, {"nl": "Removes any temporary files associated with a particular native app call.", "Heuristic": []}, {"nl": "Convert to string.", "Heuristic": []}, {"nl": "Call from a ScrollView in onScrollChanged, returns true if this onScrollChanged is legit (not a duplicate) and should be dispatched.", "Heuristic": []}, {"nl": "Test method for  {@link NotificationController#handleEvent(org.osgi.service.event.Event)}Verifies that  {@code IllegalArgumentException} is thrown when {@code Event}'s {@link Notification#NOTIFICATION_KEY_APPLICATION} property is null.", "Heuristic": ["H1"]}, {"nl": "Create an Issuer object", "Heuristic": []}, {"nl": "Get trusted stores", "Heuristic": []}, {"nl": "get long preferences", "Heuristic": ["H1"]}, {"nl": "Initiates the fetch of all blocks provided in the constructor, with possible retries in the event of transient IOExceptions.", "Heuristic": []}, {"nl": "Setter for the allowed extensions of a file type. The denied extensions will be cleared. If extensionsList is null, allowed extensions are kept untouched.", "Heuristic": []}, {"nl": "Adds the list.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Converts a thrift type to a wire type.", "Heuristic": []}, {"nl": "Waits for given  {@link Future} to be set (push) and returns {@code T}.", "Heuristic": ["H1"]}, {"nl": "Get the c14n algorithm to use", "Heuristic": []}, {"nl": "Add a single terminal to the set.", "Heuristic": []}, {"nl": "Returns the classes. @return The classes.", "Heuristic": []}, {"nl": "Create an instance of  {@link GetPriceResponse }", "Heuristic": ["H1"]}, {"nl": "Sets the value of the certificateCredentials property.", "Heuristic": []}, {"nl": "Creates a cache with the given maximum size and key expiration time.", "Heuristic": []}, {"nl": "Returns a copy of the current contents of the cache, ordered from least recently accessed to most recently accessed.", "Heuristic": []}, {"nl": "Adds a term to the map with a given count.", "Heuristic": []}, {"nl": "Template delegator for testNode() method. OVERRIDE to add custom logic", "Heuristic": ["H1"]}, {"nl": "Sets the value of the chain property.", "Heuristic": []}, {"nl": "Encapsulates the logic related to locating the default resource bundle for a class.", "Heuristic": []}, {"nl": "Gets the Current Task Message.", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.util.Time#setHour(int)}.", "Heuristic": ["H1"]}, {"nl": "Testable method to execute the copy-of transform and return the root node of the resulting Document.", "Heuristic": []}, {"nl": "Sets lookup interface for maximum number of connections allowed per route.", "Heuristic": []}, {"nl": "Add an HTTP Header to the Request", "Heuristic": []}, {"nl": "The accessibility service id.  Generated by the system. ", "Heuristic": ["H1"]}, {"nl": "Gets the  {@link StoredServerChannel} with the given channel id (ie contract transaction hash).", "Heuristic": ["H1"]}, {"nl": "Sets the charset to be used when encoding {@link org.apache.ogt.http.auth.Credentials}.", "Heuristic": ["H1"]}, {"nl": "Get a File Filter for directories.", "Heuristic": []}, {"nl": "Sets the array.", "Heuristic": []}, {"nl": "Gets the error code.", "Heuristic": []}, {"nl": "Set whether the provided token will be signed or not. Default is true.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.VTGParser#getMagneticCourse()}.", "Heuristic": ["H1"]}, {"nl": "Trim history when it exceeds max history size.", "Heuristic": []}, {"nl": "Get latitude value of Position", "Heuristic": []}, {"nl": "Not-null value; ensure this value is available before it is saved to the database.", "Heuristic": []}, {"nl": "Do the work of retrieving a byte array.", "Heuristic": []}, {"nl": "produce the gif image as byte array", "Heuristic": ["H1"]}, {"nl": "Get Hash Value for String using DJBX31A Algorithm", "Heuristic": []}, {"nl": "The global result is a singleton It will be used for all generated results", "Heuristic": []}, {"nl": "Write a string to a data output supporting null values.  It uses the '||' token to represent null.", "Heuristic": []}, {"nl": "Initializes a specific  {@link ContentEncoder} implementation based on theproperties of the given  {@link HttpMessage}.", "Heuristic": ["H1"]}, {"nl": "Returns map containing the given entries.", "Heuristic": []}, {"nl": "Gets the run status.", "Heuristic": []}, {"nl": "Remove an object from the internal JSONObject", "Heuristic": []}, {"nl": "Returns the current maximum.", "Heuristic": []}, {"nl": "Returns the next header. Same as  {@link #nextHeader nextHeader}, but not type-safe.", "Heuristic": ["H1"]}, {"nl": "Make a request to the Facebook Graph API without any parameters.  See http://developers.facebook.com/docs/api  Note that this method is asynchronous and the callback will be invoked in a background thread; operations that affect the UI will need to be posted to the UI thread or an appropriate handler.  This method is deprecated.  See  {@link Facebook} and {@link com.facebook.Request} for more info.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the quantity property.", "Heuristic": []}, {"nl": "Create a program that satisfies an OP_CHECKMULTISIG program.", "Heuristic": ["H1"]}, {"nl": "Convert a JSONArray into a application list.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the token property.", "Heuristic": []}, {"nl": "Method endElement.", "Heuristic": []}, {"nl": "Gets the bean.", "Heuristic": []}, {"nl": "Queues a new item to be loaded. Thread-safe.", "Heuristic": []}, {"nl": "Tests the  {@link PathUtils#getPathComponents(String)} method to thrown an exception in case thepath is invalid.", "Heuristic": ["H1"]}, {"nl": "Empty implementation.", "Heuristic": ["H2"]}, {"nl": "Returns the chromosome location in chromosome-arm-band notation, called chromosome notation (e.g. 1q12)", "Heuristic": []}, {"nl": "Tests if some key maps into the specified value in this hashtable. This operation is more expensive than the containsKey method. Note that this method is identical in functionality to containsValue, (which is part of the Map interface in the collections framework).", "Heuristic": ["H1"]}, {"nl": "Get the environment folder name.", "Heuristic": []}, {"nl": "Retrieves a byte array field from the stream. \\param dest The byte array where the returned value will be stored. \\param off Offset into the destination buffer to start copying into. \\param len The length should be large enough to store the entire data item, if it is not, a truncated value will be returned.", "Heuristic": ["H1"]}, {"nl": "Sets the PMIDs.", "Heuristic": ["H1"]}, {"nl": "Get all inner classes not in the source.", "Heuristic": []}, {"nl": "Parses an amount expressed in the way humans are used to.  This takes string in a format understood by  {@link BigDecimal#BigDecimal(String)}, for example \"0\", \"1\", \"0.10\", \"1.23E3\", \"1234.5E-5\".", "Heuristic": ["H1"]}, {"nl": "Gets the value of the stepResult property.", "Heuristic": []}, {"nl": "Returns the string value of the specified field.", "Heuristic": []}, {"nl": "Return the difference in hours between now and the date.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.VHWParser#setMagneticHeading()}.", "Heuristic": ["H1"]}, {"nl": "Unregisters a previsouly registered server by id.", "Heuristic": ["H1"]}, {"nl": "Returns kerberos principle. Should take following form, krbtgt/REALM@REALM E.g :- krbtgt/WSO2.COM@WSO2.COM", "Heuristic": ["H1"]}, {"nl": "Checks to see if the input matrix is copied after multiple calls.  This was an actual bug.", "Heuristic": []}, {"nl": "Add a character to the word being stemmed.  When you are finished adding characters, you can call stem(void) to stem the word.", "Heuristic": []}, {"nl": "Set the individual structures", "Heuristic": []}, {"nl": "Returns the minor version number of the HTTP protocol.", "Heuristic": []}, {"nl": "Close and remove all connections in the pool.", "Heuristic": []}, {"nl": "Obtains a  {@link Map} containing the HTTP Response Headers", "Heuristic": ["H1"]}, {"nl": "Track a failure - multiply the back off interval by the multiplier", "Heuristic": []}, {"nl": "Assert that the text of the xpath node retrieved is equal to the value specified.", "Heuristic": ["H1"]}, {"nl": "Gets the Object mapped from the specified key, or the specified Object if no such mapping has been made.", "Heuristic": []}, {"nl": "Gets a byte array representation of this instance. Note: No guarantees are made regarding stability of the representation between versions.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.MWVParser#getStatus()}.", "Heuristic": ["H1"]}, {"nl": "Prepare an item view for use. See AdapterView for the basic idea at work here. This may require creating a new item view, but well-behaved implementations will re-use the view passed as convertView if present. The returned view will be populated with data from the item parameter.", "Heuristic": []}, {"nl": "Gets the Oozie Schema Version", "Heuristic": ["H1"]}, {"nl": "Helper method to convert array of Claim object to array of String objects corresponding to the ClaimURI values.", "Heuristic": []}, {"nl": "Retrieves the classification's probability.", "Heuristic": []}, {"nl": "Returns the step cost function of this online search problem.", "Heuristic": []}, {"nl": "Returns the R matrix.", "Heuristic": []}, {"nl": "Whether or not the  {@link AlluxioURI} contains wildcard(s).", "Heuristic": ["H1"]}, {"nl": "Get the number of days in a month", "Heuristic": []}, {"nl": "Test of getCollisionString method, of class CollisionDJBX33A.", "Heuristic": []}, {"nl": "Set server principal password for kerberos authentication is encrypted or not", "Heuristic": ["H1"]}, {"nl": "Gets the fetcher end time stamp.", "Heuristic": []}, {"nl": "Check if the proxy settings are provided.", "Heuristic": []}, {"nl": "Creates (and starts) a new stopwatch using  {@link System#nanoTime} as its time source.", "Heuristic": ["H1"]}, {"nl": "Get the individual structure B.", "Heuristic": []}, {"nl": "Gets the transmission dataset id.", "Heuristic": ["H1"]}, {"nl": "Test method for  {@link NotificationController#handleEvent(org.osgi.service.event.Event)}Verifies that  {@code IllegalArgumentException} is thrown when {@code Event}'s {@link Notification#NOTIFICATION_KEY_USER_ID} property is empty.", "Heuristic": ["H1"]}, {"nl": "Called for entries that have been evicted or removed. This method is invoked when a value is evicted to make space, removed by a call to {@link #remove}, or replaced by a call to  {@link #put}. The default implementation does nothing.  The method is called without synchronization: other threads may access the cache while this method is executing.", "Heuristic": ["H1"]}, {"nl": "Returns a new Result() which contains the same results but without those having a lower level than the parameter", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.parser.MWVParser#getAngle()}.", "Heuristic": ["H1"]}, {"nl": "This method returns the list of utility values for all items in that sequence.", "Heuristic": []}, {"nl": "Returns the name of the affected table.", "Heuristic": []}, {"nl": "Updates the visual representation of the card.", "Heuristic": []}, {"nl": "Returns a list of space-separated integers from the specified key.", "Heuristic": []}, {"nl": "Indicates if this permission has been allocated by default or not. Authorization View handlers may use this property to optimize the way the user selects the scopes. For example, assume that read', 'add' and 'update' scopes are supported and the  'read' scope is always allocated. This can be presented at the UI level as follows: the read-only check-box control will represent a 'read' scope and a user will be able to optionally select 'add' and/or 'update' scopes, in addition to the default 'read' one.", "Heuristic": ["H1"]}, {"nl": "Creates an instance of  {@link HeapByteBufferAllocator} to be usedby HTTP connections for allocating  {@link java.nio.ByteBuffer} objects. This method can be overridden in a super class in order to provide a different implementation of the  {@link ByteBufferAllocator} interface.", "Heuristic": ["H1"]}, {"nl": "Positions the scan before the first record, by positioning each underlying scan before their first records.", "Heuristic": []}, {"nl": "Sets the dest file name.", "Heuristic": ["H1"]}, {"nl": "Convert a time parameter such as (50s, 100ms, or 250us) to milliseconds for internal use. If no suffix is provided, the passed number is assumed to be in ms.", "Heuristic": []}, {"nl": "Retrieve the last event seen by the handler.", "Heuristic": []}, {"nl": "Gets the value of the buffering mode", "Heuristic": []}, {"nl": "Provide the start to the AllocationPool's Builder.", "Heuristic": []}, {"nl": "Gets the error description", "Heuristic": []}, {"nl": "Gets the value of the time property.", "Heuristic": []}, {"nl": "Commit the preferences asynchronously in Gingerbread and later, otherwise we have to do it synchronously", "Heuristic": []}, {"nl": "mixin interface and delegates. all class must be public.", "Heuristic": ["H1"]}, {"nl": "Specifies the Content-Type header. The default implementation sets the value of the {@link #contentType contentType} attribute.", "Heuristic": ["H1"]}, {"nl": "Adds a file as persisted.", "Heuristic": []}, {"nl": "Gets the current working Document.", "Heuristic": []}, {"nl": "Returns the instance of the configuration singleton.", "Heuristic": []}, {"nl": "Retrieves a long field from the stream.", "Heuristic": []}, {"nl": "Called by delegate method when finished", "Heuristic": []}, {"nl": "get max elapsed.", "Heuristic": ["H1"]}, {"nl": "Is this difference group a conflicting group.", "Heuristic": []}, {"nl": "Obtains the names of the registered schemes.", "Heuristic": []}, {"nl": "Returns whether the cache will behave as a shared cache or not.", "Heuristic": []}, {"nl": "Sets the error code.", "Heuristic": []}, {"nl": "Sets the time elapsed.", "Heuristic": []}, {"nl": "Reset the accumulated times for a pass.", "Heuristic": []}, {"nl": "Returns the block number component of the entry", "Heuristic": []}, {"nl": "Gets view from specified cache.", "Heuristic": []}, {"nl": "Throws an  {@link AssertionException} if the current thread is not the UI thread.", "Heuristic": ["H1"]}, {"nl": "Gets the redirect URI", "Heuristic": []}, {"nl": "Gives the controller access to the frame. This is useful to display status information.", "Heuristic": []}, {"nl": "Returns whether or not the given state is the current state", "Heuristic": ["H1"]}, {"nl": "Parses a byte array into a space separated hex string where each byte is represented in the format  {@code 0x%02x}.", "Heuristic": ["H1"]}, {"nl": "Returns the nearest enemy that is closest to the mob", "Heuristic": []}, {"nl": "Start the level.", "Heuristic": []}, {"nl": "Process an RTF command.", "Heuristic": []}, {"nl": "Parses an amount expressed in the way humans are used to.   This takes string in a format understood by  {@link BigDecimal#BigDecimal(String)}, for example \"0\", \"1\", \"0.10\", \"1.23E3\", \"1234.5E-5\".", "Heuristic": ["H1"]}, {"nl": "Returns true if the specified sentence is satisfiable. A sentence is satisfiable if it is true in, or satisfied by, some model.", "Heuristic": ["H1"]}, {"nl": "Set the individual structure A.", "Heuristic": []}, {"nl": "Set the principal associated with this SecurityToken", "Heuristic": []}, {"nl": "Return whether we can identify the typeName as a java.util collection class or interface as specified.", "Heuristic": []}, {"nl": "Returns the adapter position of the first visible view. This position does not include adapter changes that were dispatched after the last layout pass.", "Heuristic": []}, {"nl": "Updates/writes a complete team object.", "Heuristic": []}, {"nl": "update database with new portfolio's data", "Heuristic": ["H1"]}, {"nl": "This method considers the various factors of the specified output size (in blocks), and returns the highest factor that is less than the number of available buffers.", "Heuristic": []}, {"nl": "Returns true if allocations of the given size should go through the pooling mechanism and false otherwise.", "Heuristic": []}, {"nl": "Get one book by id.", "Heuristic": ["H1"]}, {"nl": "Determines whether the authentication exchange has completed.", "Heuristic": []}, {"nl": "Is checkbox item selected ?", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Here, we attempt to get the password from the private  alias/passwords map.", "Heuristic": ["H1"]}, {"nl": "Warning log message with printf formatting.", "Heuristic": ["H1"]}, {"nl": "Normalizes elements in 'u' by dividing by max and computes the norm2 of the normalized array u.  Adjust the sign of the returned value depending on the size of the first element in 'u'. Normalization is done to avoid overflow.  for i=j:numRows u[i] = u[i] / max tau = tau + u[i]u[i] end tau = sqrt(tau) if( u[j] ", "Heuristic": ["H1"]}, {"nl": "Returns the integer value of the specified field. The value is obtained from whichever scan contains the field.", "Heuristic": []}, {"nl": "Use this function instead of new String(byte[], int, int)  to avoid surprises from non-standard default encodings.", "Heuristic": ["H1"]}, {"nl": "Add a QueryString parameter", "Heuristic": []}, {"nl": "Copy a file", "Heuristic": []}, {"nl": "Returns the first header from the origin response with the given name.", "Heuristic": []}, {"nl": "Return a List value from a JSONObject.", "Heuristic": []}, {"nl": "Sets the checks if is system derived.", "Heuristic": []}, {"nl": "Reads a Json object into the given object.", "Heuristic": ["H1"]}, {"nl": "Delete an item from the system provider.", "Heuristic": []}, {"nl": "Draw a point in canvas", "Heuristic": []}, {"nl": "get failed average elapsed.", "Heuristic": ["H1"]}, {"nl": "Creates a new Hessian 1.0 deserializer.", "Heuristic": ["H1"]}, {"nl": "Is the client in an error state?", "Heuristic": []}, {"nl": "Retrieve the event type.", "Heuristic": []}, {"nl": "Sets the predecessor id.", "Heuristic": ["H1"]}, {"nl": "Create a new SharedPreferenceSaver", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Declares the argument value to be invalid. Gui will be redrawn but with a warning drawn in red above the entry widget.", "Heuristic": ["H1"]}, {"nl": "convert int array to Integer array", "Heuristic": ["H1"]}, {"nl": "Invoke the specified JavaScript function in the JavaScript runtime.", "Heuristic": ["H1"]}, {"nl": "Set an entity UID for this name. Entities group multiple names for a single real-world item. All the names of a single entity are connected via their entity unique ID.", "Heuristic": []}, {"nl": "Sets the type of this extensibility element.", "Heuristic": []}, {"nl": "Sets the current playback state.", "Heuristic": []}, {"nl": "add user you want to @", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Return the named field from the given class.", "Heuristic": []}, {"nl": "Returns a module configuration object for the passed mdoule name", "Heuristic": ["H1"]}, {"nl": "Cloned from guava's com.google.common.io.Files in r9.  It was later erased completely.  Deletes a file or directory and all contents recursively.  If the file argument is a symbolic link the link will be deleted but not the target of the link. If the argument is a directory, symbolic links within the directory will not be followed.", "Heuristic": ["H1"]}, {"nl": "Recebe um  {@link Set} de objetos do tipo {@link Vertice} e retorna um  {@link List} ordenado deles.", "Heuristic": ["H1"]}, {"nl": "Add a new ThreadCleanup", "Heuristic": []}, {"nl": "Close the output.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Method characters.", "Heuristic": ["H2"]}, {"nl": "Call when a node has changed its leaf state.", "Heuristic": []}, {"nl": "Get the EncryptionProperties to use.", "Heuristic": []}, {"nl": "Gets the Raw Content Generated by the Web API.", "Heuristic": []}, {"nl": "Indicates that this permission has been allocated by default. Authorization View handlers may use this property in order to restrict the list of scopes which may be refused to non-default scopes only", "Heuristic": []}, {"nl": "Retrieve the logical bounds (geom) of a Node.", "Heuristic": []}, {"nl": "Add a trusted service to which tokens are issued with given claims.", "Heuristic": []}, {"nl": "Registers a gauge if it has not been registered.", "Heuristic": []}, {"nl": "Gets a function as a String, which then can be passed to the execute() method.", "Heuristic": ["H1"]}, {"nl": "Retrieve the user object for the specified username.", "Heuristic": []}, {"nl": "Converts milliseconds to date.", "Heuristic": []}, {"nl": "Sets the value of the templateId property.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the description property.  This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a set method for the description property.  For example, to add a new item, do as follows:  getDescription().add(newItem);   Objects of the following type(s) are allowed in the list  {@link DescriptionType }", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.ZDAParser#getLocalZoneHours()}.", "Heuristic": ["H1"]}, {"nl": "Gets whether the message will be treated with high priority. This only makes sense for outgoing messages.", "Heuristic": []}, {"nl": "Resets the current progress towards timeout to 0.", "Heuristic": []}, {"nl": "Get the encryption algorithm to use", "Heuristic": []}, {"nl": "Tests the  {@link CustomAuthenticationProvider#getCustomProvider()} method.", "Heuristic": ["H1"]}, {"nl": "Stops the current background music.", "Heuristic": []}, {"nl": "Extracts the  {@link URI} from a header value.  This method assumes the {@link URI} is within an opening \"\".", "Heuristic": ["H1"]}, {"nl": "Test of read method, of class ComPortController.", "Heuristic": []}, {"nl": "TODO: Not ready yet", "Heuristic": ["H1"]}, {"nl": "Sets the value of the project property.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Where to find the schema.", "Heuristic": []}, {"nl": " Append a hashCode for a long. ", "Heuristic": []}, {"nl": "Gets the value of the id property.", "Heuristic": ["H1"]}, {"nl": "Starts reading the input stream and dispatching events.", "Heuristic": []}, {"nl": "Return the  {@link ServletContext} associated with this instance.", "Heuristic": ["H1"]}, {"nl": "Retrieves a byte field from the stream.", "Heuristic": []}, {"nl": "Set the LanguageVersion associated with the current source file. This may be set to null to indicate the version is unknown and should be automatically determined.", "Heuristic": []}, {"nl": "Return the dialect that this ClaimsPolicyValidator can parse", "Heuristic": []}, {"nl": "Obtains the next line of raw markdown source.", "Heuristic": []}, {"nl": "Get a MySQLbulkLoader", "Heuristic": ["H1"]}, {"nl": " Append a hashCode for a byte. ", "Heuristic": []}, {"nl": "Writes the object header to the stream (for Hessian 2.0), or a Map for Hessian 1.0.  Object writers will call writeObjectBegin followed by the map contents and then call writeObjectEnd.  C type int  C int  ", "Heuristic": ["H1"]}, {"nl": "Toggle the visibility of the system UI.", "Heuristic": []}, {"nl": "A hashCode based on the string representation of the tree.", "Heuristic": []}, {"nl": "GET  /account/sessions -> get the current open sessions.", "Heuristic": ["H1"]}, {"nl": "Convenience method for creating an appropriately typed pair.", "Heuristic": []}, {"nl": "Called when a message is sent to plugin.", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.util.Time(java.lang.String)}.", "Heuristic": ["H1"]}, {"nl": "Closes the connection, then queries and sets current remote address.", "Heuristic": []}, {"nl": "Sets URI port.", "Heuristic": []}, {"nl": "Clear  user store manager to in-memory map", "Heuristic": ["H1"]}, {"nl": "Return the properties of the SMS message", "Heuristic": []}, {"nl": "Returns the key aliases from the primary key store.", "Heuristic": []}, {"nl": "Returns a function that delegates to the  {@link Interner#intern} method of the given interner.", "Heuristic": ["H1"]}, {"nl": "Gets the Bus.  Providers may use the bus to resolve resource references. Example: ResourceUtils.getResourceStream(reference, this.getBus())", "Heuristic": ["H1"]}, {"nl": "Opens the index described by this object.", "Heuristic": []}, {"nl": "It is used to change the tag", "Heuristic": []}, {"nl": "Sets the upper end point of the interval.", "Heuristic": []}, {"nl": "Checks whether anyone is using the block lock for the given block id, returning the lock to the lock pool if it is unused.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the value property.", "Heuristic": []}, {"nl": "Removes all jump functions", "Heuristic": []}, {"nl": "Reset the stream position.", "Heuristic": []}, {"nl": "Get properties that tune nhttp transport. Preference to system properties", "Heuristic": ["H1"]}, {"nl": "Set the keystore, password, certificate type and the store type", "Heuristic": ["H1"]}, {"nl": "A straight forward transpose.  Good for small non-square matrices.", "Heuristic": []}, {"nl": "Required. The name of the scaling group, does not need to be unique.", "Heuristic": []}, {"nl": "Gets the unresolved SOAP references by referenced id.", "Heuristic": ["H1"]}, {"nl": "Sets up the server before running a test.", "Heuristic": []}, {"nl": "Sets the value of an input variable in the Fuzzy Inference System.", "Heuristic": []}, {"nl": "Returns true if a value is either the String \"true\" (regardless of case)  or Boolean.TRUE.", "Heuristic": ["H1"]}, {"nl": "Moves to the next log block in forward order, and positions it after the last record in that block.", "Heuristic": []}, {"nl": "Get the i-th itemset in this sequence.", "Heuristic": ["H1"]}, {"nl": "Writes a specific short value (2 bytes) to the output stream.", "Heuristic": []}, {"nl": "Returns the goal test.", "Heuristic": []}, {"nl": "Close the shell", "Heuristic": []}, {"nl": "Set the notation language currently used in the Project.", "Heuristic": []}, {"nl": "Returns the location one unit below this location.", "Heuristic": []}, {"nl": "Returns the char value for the specified key. If the key does not exist or the value for the key can not be interpreted as a char, the defaultValue is returned.", "Heuristic": []}, {"nl": "retrieves the loss list entry with the lowest sequence number", "Heuristic": ["H1"]}, {"nl": "Move this ball according to its position and speed and redraw.", "Heuristic": []}, {"nl": "Checks a returned Javascript value where we expect a boolean but could  get null.", "Heuristic": ["H1"]}, {"nl": "Gets the secret key", "Heuristic": []}, {"nl": "Obtains the Content-Encoding header. The default implementation returns the value of the {@link #contentEncoding contentEncoding} attribute.", "Heuristic": ["H1"]}, {"nl": "Mark this AsyncResponse as finished (completed) and set the supplied value V as the task return value.", "Heuristic": ["H1"]}, {"nl": "Set the maximum history size. If size is negative, then history size is only limited by the device memory.", "Heuristic": []}, {"nl": "Sets up all dependencies before a test runs.", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.parser.GGAParser#getTime()}.", "Heuristic": ["H1"]}, {"nl": "Determine if the java runtime found is JRE 5 Note that plugins should not rely on this method existing in it is likely to be removed without deprecation as soon as JRE 5 is no longer supported.", "Heuristic": []}, {"nl": "Beschreibung DemoClass()  Text...", "Heuristic": ["H1"]}, {"nl": "Save user options as preferences.", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.parser.ZDAParser#setTime()}.", "Heuristic": ["H1"]}, {"nl": "Debug log message with printf formatting.", "Heuristic": ["H1"]}, {"nl": "Sets the run id.", "Heuristic": ["H1"]}, {"nl": "If processing of the incoming message results in an exception, this method is called with the resulting exception. The default behavior just stores the objects and calls notifyAll to wake up threads waiting for the response.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Add a named parameter.", "Heuristic": []}, {"nl": "return the GeneWithSpec for the first gene with the given name, if any TODO: as the same gene could appear multiple times in a spec this should return a set of GeneWithSpec; for now return the 1st", "Heuristic": ["H1"]}, {"nl": "Returns the squared distance from the attack target.", "Heuristic": []}, {"nl": "Get the preferences.", "Heuristic": []}, {"nl": "Logs a new message.", "Heuristic": []}, {"nl": "Sets the permission.", "Heuristic": []}, {"nl": "Gets the cached expiration date from a Bundle.", "Heuristic": []}, {"nl": "Determines whether a specified (US-ASCII) character is an HTTP field separator", "Heuristic": []}, {"nl": "Returns a single matrix which contains the combined values of Q and R.  This is possible since Q is symmetric and R is upper triangular.", "Heuristic": ["H1"]}, {"nl": "Get string value from database, replaced by given default value if empty or any problem occured", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Convert a JSONArray into a workflows list.", "Heuristic": []}, {"nl": "Tests the  {@link FileUtils#createBlockPath(String)} method.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the id property.", "Heuristic": ["H1"]}, {"nl": "Delete the  book by id.", "Heuristic": ["H1"]}, {"nl": "Creates a JSONObject for an open graph object that is suitable for posting.", "Heuristic": []}, {"nl": "Visits each of the annotated elements of the object.", "Heuristic": []}, {"nl": "Reset the stream position.", "Heuristic": []}, {"nl": "Gets the dest file name.", "Heuristic": ["H1"]}, {"nl": "Provide the networkType to the NetworkSegment's Builder.", "Heuristic": []}, {"nl": "Returns true if the monetary value represented by this instance is greater than that of the given other Coin, otherwise false.", "Heuristic": []}, {"nl": "Adds a waiting thread. This pool makes no attempt to match waiting threads with pool entries. It is the caller's responsibility to check that there is no entry before adding a waiting thread.", "Heuristic": []}, {"nl": "Call  {@link MotionEvent#getY(int)}. If running on a pre- {@android.os.Build.VERSION_CODES #HONEYCOMB} device,{@link IndexOutOfBoundsException} is thrown.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the named field and returns it as an object.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.GSVParser#setSatelliteCount(int)}.", "Heuristic": ["H1"]}, {"nl": "Returns true if this cookie has expired.", "Heuristic": []}, {"nl": "Get correlation id of the message", "Heuristic": ["H1"]}, {"nl": "We can use this method to dispose of any system resources we previously allocated.", "Heuristic": []}, {"nl": "Returns the list of refs changed by the push.", "Heuristic": []}, {"nl": "Removes pattern from the memory", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.util.Waypoint#setDescription(java.lang.String)}.", "Heuristic": ["H1"]}, {"nl": "Retrieve the event type.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Set the alias used to select a certificate for encryption", "Heuristic": []}, {"nl": "Used to allocate location and space for a new coming block, worker will choose the appropriate storage directory which fits the initial block size by some allocation strategy. If there is not enough space on Alluxio storage  {@link alluxio.exception.WorkerOutOfSpaceException} will bethrown, if the file is already being written by the session, {@link alluxio.exception.FileAlreadyExistsException} will be thrown.", "Heuristic": ["H1"]}, {"nl": "update the springs in the system", "Heuristic": ["H1"]}, {"nl": "Sets up the file path and writer before a test runs.", "Heuristic": []}, {"nl": "The method first sorts its two underlying scans on their join field. It then returns a mergejoin scan of the two sorted table scans.", "Heuristic": ["H1"]}, {"nl": "Accessor for the directory.", "Heuristic": ["H1"]}, {"nl": "Encapsulates the logic to format a string based on the key in the resource bundle", "Heuristic": []}, {"nl": "Get the system ID (typically a URI pointing to a file) for the given XMI reference.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Sets the number of times to retry a cache update on failure", "Heuristic": []}, {"nl": "Sets the submatrix of W up give Y is already configured and if it is being cached or not.", "Heuristic": ["H1"]}, {"nl": "Acquires the read lock for this inode.", "Heuristic": ["H1"]}, {"nl": "Parse any plain urls in the text and apply URL styling to them", "Heuristic": ["H1"]}, {"nl": "Given data and error-correction codewords received, possibly corrupted by errors, attempts to correct the errors in-place.", "Heuristic": ["H1"]}, {"nl": "Clears stale users associated with this server.", "Heuristic": []}, {"nl": "Ends up being a bit faster than  {@link Math#round(float)}. This merely rounds its argument to the nearest int, where x.5 rounds up to x+1. Semantics of this shortcut differ slightly from  {@link Math#round(float)} in that half rounds down for negativevalues. -2.5 rounds to -3, not -2. For purposes here it makes no difference.", "Heuristic": ["H1"]}, {"nl": "Returns the HTTP Verb", "Heuristic": []}, {"nl": "Provide number of germline whitelist ACCEPT (return true) decisions made by this MutationFilter.", "Heuristic": ["H1"]}, {"nl": "Interprets the value of x as an unsigned byte, and returns it as integer.  For example, ubyte2int(0xFF) == 255, not -1.", "Heuristic": ["H1"]}, {"nl": "Creates a matcher of  {@link Comparable} object that matches when the examined object isless than or equal to the specified value, as reported by the compareTo method of the examined object. For example: assertThat(1, lessThanOrEqualTo(1))", "Heuristic": ["H1"]}, {"nl": "Sets the inactivation reason type.", "Heuristic": []}, {"nl": "Returns a hash of the concatenated checkpoint data.", "Heuristic": []}, {"nl": "Waits to receive the response for at most a specified time, and returns the response message.", "Heuristic": []}, {"nl": "Set the Msg value.", "Heuristic": []}, {"nl": "Gets the predecessor id.", "Heuristic": ["H1"]}, {"nl": "Removes everything.", "Heuristic": ["H2"]}, {"nl": "Removes all mappings from this map whose values are zero. This method is not atomic: the map may be visible in intermediate states, where some of the zero values have been removed and others have not.", "Heuristic": ["H1"]}, {"nl": "Add a single symbol to the set.", "Heuristic": []}, {"nl": "Return a map of  {@code AppInstanceStatus} keyed by a unique identifierfor each app instance.", "Heuristic": ["H1"]}, {"nl": "Close the single hibernate session instance.", "Heuristic": []}, {"nl": "Adds the item.", "Heuristic": []}, {"nl": "Returns the value as a 0.12 type string. More digits after the decimal place will be used if necessary, but two will always be present.", "Heuristic": []}, {"nl": "Get the value of format", "Heuristic": []}, {"nl": "Get the referenced revision label in A.", "Heuristic": []}, {"nl": "through graph name, branch1 and branch2 to check the right of fast forward strategy", "Heuristic": ["H1"]}, {"nl": "Throws an exception if the current token is not the specified delimiter.  Otherwise, moves to the next token.", "Heuristic": []}, {"nl": "Adds a new URI to the collection.", "Heuristic": []}, {"nl": "RUNNER", "Heuristic": ["H2"]}, {"nl": "Return the port number the servlet container is bound to.", "Heuristic": []}, {"nl": "Deletes the leaf record having the specified dataRID", "Heuristic": []}, {"nl": "Appends a  {@link JournalEntry} for writing to the journal.", "Heuristic": ["H1"]}, {"nl": "Converts the byte array of ASCII characters to a string. This method is to be used when decoding content of HTTP elements (such as response headers)", "Heuristic": []}, {"nl": "Get the value of rating", "Heuristic": []}, {"nl": "Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData.Seo }", "Heuristic": ["H1"]}, {"nl": "Handle event from the RawRtfParser.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "the CSS condition [attribute~=value]", "Heuristic": ["H1"]}, {"nl": "Creates a \"default\" BindingInfo object for the service.  Called by createBindingInfo(Service service, String binding, Object config) to actually create the BindingInfo.  Can return a subclass which can then process the extensors within the subclass.", "Heuristic": ["H1"]}, {"nl": "Returns the animation used during the count down.", "Heuristic": ["H1"]}, {"nl": "Get the client secret", "Heuristic": []}, {"nl": "The input matrix is always modified.", "Heuristic": []}, {"nl": "The name of the service to use when contacting the KDC.", "Heuristic": []}, {"nl": "Position in the chain for this block. The genesis block has a height of zero.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.SentenceFactory#createParser(java.lang.String)}.", "Heuristic": ["H1"]}, {"nl": "Implements BundleActivator.stop(). Does nothing since the framework will automatically unregister any registered services.", "Heuristic": []}, {"nl": "A utility method to find the Languages which have Rule support.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "decode the Hex encoded input data. It is assumed the input data is valid.", "Heuristic": ["H1"]}, {"nl": "Tests that building a  {@link DeleteLineageOptions} works.", "Heuristic": ["H1"]}, {"nl": "Removes a property change listener.", "Heuristic": []}, {"nl": "The component we are decorating.", "Heuristic": []}, {"nl": "Start client connection and return immediately.", "Heuristic": []}, {"nl": "Copies OpaqueClientData from request to response as per XKMS specification http://www.w3.org/TR/xkms2/#XKMS_2_0_Section_1 [86]", "Heuristic": []}, {"nl": "Gets the actual bind hostname on web service (used by unit test only).", "Heuristic": []}, {"nl": "Reads a specific byte value from the input byte array at the given offset.", "Heuristic": []}, {"nl": "Gets the content returned by the CGDS Server.", "Heuristic": []}, {"nl": "Tests that the stream stops at EOF when reading more than available data.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets Clean XSS User Input.", "Heuristic": []}, {"nl": "Associates the specified value with the specified attribute key. If the ObjectWithDynamicAttributes previously contained a mapping for the attribute key, the old value is replaced.", "Heuristic": []}, {"nl": "Return method return the buffered.", "Heuristic": []}, {"nl": "Gets the lineage that has the given output file.", "Heuristic": []}, {"nl": "Parse a string into a  {@code ClassMember} AST node,applying substitutions.", "Heuristic": ["H1"]}, {"nl": "Returns the value to which the specified key is mapped in this map.", "Heuristic": []}, {"nl": "Returns a string that is used to end a subgraph.", "Heuristic": ["H1"]}, {"nl": "Obtains the meaningful stream of the HttpUrlConnection, either inputStream or errorInputStream, depending on the status code", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc} This could be slow when value size is large, use this cautiously or  {@link #get(ByteBuffer)}which may avoid copying data.", "Heuristic": ["H1"]}, {"nl": "Return a collection of registered devices", "Heuristic": []}, {"nl": "Execute the specified command returning a value (if any)", "Heuristic": []}, {"nl": "Set the UsernameTokenRealmCodec instance to use to return a realm from a validated token", "Heuristic": []}, {"nl": "Used to respond to server SASL tokens.", "Heuristic": ["H1"]}, {"nl": "Writes a JSON response.", "Heuristic": []}, {"nl": "Returns a new array that appends  {@code element} to {@code array}.", "Heuristic": ["H1"]}, {"nl": "Check if generated Java classes and Java reflection information is cached.", "Heuristic": []}, {"nl": "Writes the current page to the log file.", "Heuristic": []}, {"nl": "Return Option type ID", "Heuristic": []}, {"nl": "Returns the name of the new table.", "Heuristic": []}, {"nl": "Returns the RID of the current record.", "Heuristic": []}, {"nl": "Returns the number of key-value mappings in this map. If the map contains more than {@code Integer.MAX_VALUE} elements, returns {@code Integer.MAX_VALUE}.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Sets a photo value in the object.", "Heuristic": []}, {"nl": "Retrieve the list of springs in the chain.", "Heuristic": []}, {"nl": "Finds a rule instance for the given rule class name", "Heuristic": []}, {"nl": "read lines.", "Heuristic": ["H1", "H2"]}, {"nl": "True if this describes a global, named, attribute.", "Heuristic": []}, {"nl": "Callback for when an unrecognized option is parsed.", "Heuristic": []}, {"nl": "Returns the persistence state of a given file.", "Heuristic": []}, {"nl": "Hash code for the item.", "Heuristic": []}, {"nl": "Sets the nodes expanded metric to zero.", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.parser.RMCParser#getDate()}.", "Heuristic": ["H1"]}, {"nl": "Sets the description of the third-party application.", "Heuristic": []}, {"nl": "Gets the current value at position  {@code i}.", "Heuristic": ["H1"]}, {"nl": "Get Color to be used for display", "Heuristic": []}, {"nl": "Populates a map by reading an input stream, as part of deserialization. See  {@link #writeMap} for the data format.", "Heuristic": ["H1"]}, {"nl": "Get the value of this cookie", "Heuristic": []}, {"nl": "Turn on of off element qualification.", "Heuristic": []}, {"nl": "Returns a snapshot of the connections in this pool, ordered from newest to oldest. Waits for the cleanup callable to run if it is currently scheduled.", "Heuristic": []}, {"nl": "Set the save action.", "Heuristic": []}, {"nl": "Called as a result of a delayed service resolution.", "Heuristic": []}, {"nl": "Return whether the stop watch is currently running.", "Heuristic": []}, {"nl": "Return the list of Jobs generated during the last compiler run.", "Heuristic": []}, {"nl": "Gets the value of the templateId property.", "Heuristic": ["H1"]}, {"nl": "Returns the y-coordinate of the move.", "Heuristic": []}, {"nl": "Submits the given runnable to the given  {@link Executor} catching and logging all {@linkplain RuntimeException runtime exceptions} thrown by the executor.", "Heuristic": ["H1"]}, {"nl": "Converts B and X into block matrices and calls the block matrix solve routine.", "Heuristic": []}, {"nl": "Delete an item from the system provider.", "Heuristic": []}, {"nl": "Get the corresponding triples of individual.", "Heuristic": []}, {"nl": "Sets the origin attribute of the StylesheetInfo object", "Heuristic": []}, {"nl": "Return true iff the \"Next&gt;\" button should be enabled. Subclasses should override to first check super.nextEnabled() and then check for legal context values.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link com.sqa.em.util.helper.RequestInput#getInt(java.lang.String)}.", "Heuristic": ["H1"]}, {"nl": "Return true for valid port numbers.", "Heuristic": []}, {"nl": "Non-recursive method that lists the folders in the current directory.", "Heuristic": []}, {"nl": "Creates a KDC server instance.", "Heuristic": []}, {"nl": "Gets the property id.", "Heuristic": ["H1"]}, {"nl": "Returns the name of the indexed table.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Deprecated. Please use  {@link AppEventsLogger} instead.", "Heuristic": ["H1"]}, {"nl": "Returns the ratio of cache loading attempts which threw exceptions. This is defined as {@code loadExceptionCount / (loadSuccessCount + loadExceptionCount)}, or  {@code 0.0} when{@code loadSuccessCount + loadExceptionCount == 0}.", "Heuristic": ["H1"]}, {"nl": "Check all permutations of solve for submatrices", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#setBearing()} .", "Heuristic": ["H1"]}, {"nl": "Converts a List into a Set", "Heuristic": []}, {"nl": "Test method for  {@link ActivityController#handleEvent(org.osgi.service.event.Event)}Verifies that  {@code IllegalArgumentException} is thrown when {@code Event}'s  {@link ActivityEvent#TIMESTAMP_KEY} propertyis null.", "Heuristic": ["H1"]}, {"nl": "Get a String form the internal JSONObject.", "Heuristic": ["H1"]}, {"nl": "Save configuration to file system", "Heuristic": []}, {"nl": " Returns an  {@link EigenDecomposition} which is specialized for symmetric matrices or the general problem.", "Heuristic": ["H1"]}, {"nl": "Retrieves buckets whose ttl interval has expired before the specified time, that is, the bucket's interval start time should be less than or equal to (specified time - ttl interval). The returned set is backed by the internal set.", "Heuristic": ["H1"]}, {"nl": "Make sure it doesn't change the input", "Heuristic": []}, {"nl": "This will return servlet request", "Heuristic": []}, {"nl": "Gets the authority of the  {@link AlluxioURI}.", "Heuristic": ["H1"]}, {"nl": "Set the user service. The user service authenticates local users and is responsible for persisting and retrieving all users and all teams.", "Heuristic": []}, {"nl": "Increments by one the value currently associated with  {@code key}, and returns the new value.", "Heuristic": ["H1"]}, {"nl": "Returns the next thread in the queue.", "Heuristic": []}, {"nl": "Returns true if the current value is the default value.", "Heuristic": []}, {"nl": "Starts the demo.", "Heuristic": []}, {"nl": "Checks whether there is a path between the given source and sink.", "Heuristic": []}, {"nl": "Checks if a pattern exists for the provided key", "Heuristic": []}, {"nl": "Sets the run status type.", "Heuristic": []}, {"nl": "Returns the fields mentioned in the select clause.", "Heuristic": []}, {"nl": "Does nothing, because a checkpoint record contains no undo information.", "Heuristic": []}, {"nl": "Creates a scriptPubKey that encodes payment to the given address.", "Heuristic": []}, {"nl": "Operation setRank changes the value of the attribute _rank.", "Heuristic": ["H1"]}, {"nl": "peek.", "Heuristic": ["H1", "H2"]}, {"nl": "Sets the debugger GUI frame dimensions.", "Heuristic": []}, {"nl": "Sets a specific location in the bar", "Heuristic": []}, {"nl": "Produce a comma delimited text from a JSONArray of JSONObjects. The first row will be a list of names obtained by inspecting the first JSONObject.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.HDGParser#setVariation(double)}.", "Heuristic": ["H1"]}, {"nl": "Tests the  {@link Sasl#createSaslServer(String,String,String,Map,CallbackHandler)} method tobe null when the provider is not plain.", "Heuristic": ["H1"]}, {"nl": "Tests that an exception is thrown in the  {@link SessionInfo#SessionInfo(long,int)} constructorwhen using an invalid id for the session.", "Heuristic": ["H1"]}, {"nl": "Register a new source language importer.", "Heuristic": []}, {"nl": "Gets the first header with the given name. Header name comparison is case insensitive.", "Heuristic": ["H1"]}, {"nl": "Set the HTTP status code of the response.", "Heuristic": []}, {"nl": "Returns an array containing all of the elements in the specified collection; the runtime type of the returned array is that of the specified array. If the collection fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of the specified collection. If the collection fits in the specified array with room to spare (i.e., the array has more elements than the collection), the element in the array immediately following the end of the collection is set to  {@code null}. This is useful in determining the length of the collection only if the caller knows that the collection does not contain any null elements. This method returns the elements in the order they are returned by the collection's iterator. TODO(kevinb): support concurrently modified collections?", "Heuristic": ["H1"]}, {"nl": "Locks the given inode in write mode, and adds it to this lock list.", "Heuristic": ["H1"]}, {"nl": "Removes a waiting thread, if it is queued.", "Heuristic": []}, {"nl": "Returns an index about where in the cache different variants for a given resource are stored. This maps \"variant keys\" to \"cache keys\", where the variant key is derived from the varying request headers, and the cache key is the location in the {@link org.apache.http.client.cache.HttpCacheStorage} where thatparticular variant is stored. The first variant returned is used as the \"parent\" entry to hold this index of the other variants.", "Heuristic": ["H1"]}, {"nl": "Set the name of the toolbar to display", "Heuristic": []}, {"nl": "Returns the schema of the selection, which is the same as in the underlying query.", "Heuristic": []}, {"nl": "Set the maximum lifetime in seconds for issued SAML tokens", "Heuristic": []}, {"nl": "GET  /account/sessions : get the current open sessions.", "Heuristic": ["H1"]}, {"nl": " This is a forward substitution solver for non-singular lower triangular matrices.  b = (LT)-1b  where b is a vector, L is an n by n matrix.   L is a lower triangular matrix, but it comes up with a solution as if it was an upper triangular matrix that was computed by transposing L. ", "Heuristic": ["H1"]}, {"nl": "Returns the specified federation token for this Gitblit instance.", "Heuristic": ["H1"]}, {"nl": "Get the location of the underlying figure in the diagram.", "Heuristic": []}, {"nl": "Resolve the given class name as primitive class, if appropriate, according to the JVM's naming rules for primitive classes.  Also supports the JVM's internal class names for primitive arrays. Does not support the \"[]\" suffix notation for primitive arrays; this is only supported by  {@link #forName}.", "Heuristic": ["H1"]}, {"nl": "Returns the current packed value.", "Heuristic": []}, {"nl": "Maps the specified key to the specified value in this game state. Neither the key nor the value can be null. The value can be retrieved by calling the get method with a key that is equal to the original key.", "Heuristic": []}, {"nl": "Stops the reader and event dispatching.", "Heuristic": []}, {"nl": "Sets the value of the method property.", "Heuristic": []}, {"nl": "Returns whether or not we've handled an open file event.", "Heuristic": ["H1"]}, {"nl": "GET  /audits : get a page of AuditEvents.", "Heuristic": ["H1"]}, {"nl": "Convert a well-formed (but not necessarily valid) XML string into a JSONObject. Some information may be lost in this transformation because JSON is a data format and XML is a document format. XML uses elements, attributes, and content text, while JSON uses unordered collections of name/value pairs and arrays of values. JSON does not does not like to distinguish between elements and attributes. Sequences of similar elements are represented as JSONArrays. Content text may be placed in a \"content\" member. Comments, prologs, DTDs, and &lt;[ [ ]]> are ignored.", "Heuristic": ["H1"]}, {"nl": "Retrieves a String value from preference manager. If no such key exists, it will return null.", "Heuristic": []}, {"nl": "Return e new Result() which contains the same results but without those matching the parameter sources", "Heuristic": []}, {"nl": "Constructs a String with all attributes in name = value format.", "Heuristic": []}, {"nl": "Returns whether the source for this job was explicitly specified by the user, or if it was drawn into the compilation process due to some dependency.", "Heuristic": []}, {"nl": "Get the complete java name for a package.", "Heuristic": []}, {"nl": "Returns the current project. If there is no project, a new one is created (unless we are busy creating one).", "Heuristic": []}, {"nl": "Create and return a new SocksPortListener instance.", "Heuristic": []}, {"nl": "Sets up the stream before a test runs.", "Heuristic": []}, {"nl": "Creates an instance of  {@link DefaultHttpRequestFactory} to be usedfor creating  {@link HttpRequest} objects received by over thisconnection.  This method can be overridden in a super class in order to provide a different implementation of the  {@link HttpRequestFactory} interface.", "Heuristic": ["H1"]}, {"nl": "Stores a string at the specified offset  of the specified block. The method first obtains an XLock on the block. It then reads the current value at that offset, puts it into an update log record, and  writes that record to the log. Finally, it calls the buffer to store the value, passing in the LSN of the log record and the transaction's id.", "Heuristic": ["H1"]}, {"nl": "Get the parent values for the Random Variable Xi from the provided event.", "Heuristic": []}, {"nl": "Gets the name of the group that will be created.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Create the SELECT query.", "Heuristic": []}, {"nl": "Creates an instance of  {@link SSLIOSession} decorating the given{@link IOSession}.  This method can be overridden in a super class in order to provide a different implementation of SSL I/O session.", "Heuristic": ["H1"]}, {"nl": "Build a HostAndPort instance from a host only. Note: Non-bracketed IPv6 literals are allowed. Use  {@link #requireBracketsForIPv6()} toprohibit these.", "Heuristic": ["H1"]}, {"nl": "Returns all currently registered SentenceListeners.", "Heuristic": []}, {"nl": "logs the message prepended by the filter name (copy of  {@link GenericServlet#log(String)})", "Heuristic": ["H1"]}, {"nl": "Gets a unified representation of text.", "Heuristic": []}, {"nl": "Returns the next postponed route to try.", "Heuristic": []}, {"nl": "Test case for  {@link S3UnderFileSystem#delete(String,boolean)}.", "Heuristic": ["H1"]}, {"nl": "Set the JAAS Login context name to use.", "Heuristic": ["H1"]}, {"nl": "Put a dummy task into the queue and wait for it to be run. Because it's single threaded, this means all tasks submitted before this point are now completed. Usually you won't want to use this method - it's a convenience primarily used in unit testing. If you want to wait for an event to be called the right thing to do is usually to create a  {@link com.google.common.util.concurrent.SettableFuture} and then call seton it. You can then either block on that future, compose it, add listeners to it and so on.", "Heuristic": ["H1"]}, {"nl": "Returns a live, read-only view of the map backing this  {@code AtomicLongMap}.", "Heuristic": ["H1"]}, {"nl": "Determine the space between the first two fingers", "Heuristic": []}, {"nl": "Get parent.", "Heuristic": ["H2"]}, {"nl": "Returns the first AddressFacade in list order contained by the BuyerPartyType representing the entity placing this order.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.sentence.TalkerId#parse(java.lang.String)}.", "Heuristic": ["H1"]}, {"nl": "Add a package to the current context.", "Heuristic": []}, {"nl": "Gets the fetcher end time stamp.", "Heuristic": []}, {"nl": "Clears all the clients.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#getTimeToCPA()} .", "Heuristic": ["H1"]}, {"nl": "Should be called before once before any other method is called", "Heuristic": []}, {"nl": "Sets the total elapsed seconds.", "Heuristic": []}, {"nl": "Since SimpleDB does not support null values, this method always increments the count, regardless of the field.", "Heuristic": []}, {"nl": "Usually you should set up context in the  {@link android.app.Application#onCreate()}", "Heuristic": ["H1"]}, {"nl": "Rebuild hibernate session factory", "Heuristic": []}, {"nl": "Opens a new buffered  {@link Writer} for writing to this sink. The returned stream is notrequired to be a  {@link BufferedWriter} in order to allow implementations to simply delegate to{@link #openStream()} when the stream returned by that method does not benefit from additionalbuffering. This method should return a new, independent writer each time it is called. The caller is responsible for ensuring that the returned writer is closed.", "Heuristic": ["H1"]}, {"nl": "Return the command name.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Write binary data as hex.", "Heuristic": []}, {"nl": "Gets the value of the expires property.", "Heuristic": ["H1"]}, {"nl": "Return whether the provided token will be signed or not. Default is true.", "Heuristic": []}, {"nl": "All GET methods", "Heuristic": []}, {"nl": "Gets the lineage.", "Heuristic": []}, {"nl": "Computes a metric identified by its code on a class AST node.", "Heuristic": []}, {"nl": "Set the properties for this DB.", "Heuristic": []}, {"nl": "Puts the expiration date into a Bundle.", "Heuristic": []}, {"nl": "Clears the default classification result and all rules.", "Heuristic": []}, {"nl": "Gets the requested bit, where true means black.", "Heuristic": []}, {"nl": "Scan through the passed what html user post and replace references to the site smilies with corresponding emoticons for emoji to pick up", "Heuristic": ["H1"]}, {"nl": "Set prototype.", "Heuristic": ["H2"]}, {"nl": "Sets the value of the id property.", "Heuristic": ["H1"]}, {"nl": "Check whether this is an existing session", "Heuristic": []}, {"nl": "Sets the altitude of position above or below mean sea level. Defaults to zero (-0.0).", "Heuristic": []}, {"nl": "If \"obj\" is a java.util.Iterator or a java.lang.Iterable, return a wrapping as a JavaScript Iterator. Otherwise, return null. This method is in VMBridge since Iterable is a JDK 1.5 addition.", "Heuristic": ["H1"]}, {"nl": "Evaluates the conditions for performing the actions.", "Heuristic": []}, {"nl": "Indicates whether the origin response indicated the associated resource had variants (i.e. that the Vary header was set on the origin response).", "Heuristic": []}, {"nl": "Returns the string value at the specified offset of the buffer's page. If a string was not stored at that location, the behavior of the method is unpredictable.", "Heuristic": []}, {"nl": "Returns the target.", "Heuristic": []}, {"nl": " Solves for non-singular upper triangular matrices using forward substitution.  B = U-TB  where B (m by n) is a matrix, U is a (m by m ) upper triangular matrix. ", "Heuristic": ["H1"]}, {"nl": "Gets the batch id.", "Heuristic": ["H1"]}, {"nl": "Checks if a specfied string represents a valid POST command.", "Heuristic": ["H1"]}, {"nl": "Test for getLatitude()", "Heuristic": []}, {"nl": "Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData.Merchant }", "Heuristic": ["H1"]}, {"nl": "Sets the outcome.", "Heuristic": []}, {"nl": "Creates a new iterator for traversing through a submatrix inside this matrix.  It can be traversed by row or by column.  Range of elements is inclusive, e.g. minRow = 0 and maxRow = 1 will include rows 0 and 1.  The iteration starts at (minRow,minCol) and ends at (maxRow,maxCol)", "Heuristic": ["H1"]}, {"nl": "check that all keys in ARG1 are present in ARG2.", "Heuristic": ["H1"]}, {"nl": "Sets a list of user ids suggested as request receivers", "Heuristic": ["H1"]}, {"nl": "Reset any internal state back to a blank slate. This method only needs to be implemented for stateful protocols.", "Heuristic": []}, {"nl": "Create the SELECT query.", "Heuristic": []}, {"nl": "Convert the supplied array into a List. A primitive array gets converted into a List of the appropriate wrapper type. A  {@code null} source value will be converted to anempty List.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the publicKeyHash property.", "Heuristic": []}, {"nl": "Install a listener for purchase orders on this object. If l is null, the listener is removed again.", "Heuristic": []}, {"nl": "Convenience method for defining methods on a submodule.", "Heuristic": []}, {"nl": "Obtains the 'chunked' flag. The default implementation returns the value of the {@link #chunked chunked} attribute.", "Heuristic": ["H1"]}, {"nl": "prepare() is provided to prepare state of action handler such as preparing a command that will be run on all selected sessions.", "Heuristic": ["H1"]}, {"nl": "Guaranteed to throw an exception and leave the  {@code RangeMap} unmodified.", "Heuristic": ["H1"]}, {"nl": "Retrieve UsingAddressing override flag from the context", "Heuristic": []}, {"nl": "Set the System properties into Hadoop configuration. This method won't override existing properties even if they are set as System properties.", "Heuristic": []}, {"nl": "Returns the number of elements this array can hold.", "Heuristic": []}, {"nl": "Start a named task. The results are undefined if  {@link #stop()}or timing methods are called without invoking this method.", "Heuristic": ["H1"]}, {"nl": "Getter for a property.", "Heuristic": []}, {"nl": "Sets the value of the billTo property.", "Heuristic": []}, {"nl": "This method returns the entitlement data finder", "Heuristic": []}, {"nl": "Get the triple.", "Heuristic": []}, {"nl": "Set the value to be added to the referrer URL when a person follows a link from this shared content on feed.", "Heuristic": []}, {"nl": "Is the Gene Amplified at the Copy Number Level?", "Heuristic": []}, {"nl": "clear stack.", "Heuristic": ["H1", "H2"]}, {"nl": "Sets the error code.", "Heuristic": []}, {"nl": "Sets the current folder back to the root of the Box account", "Heuristic": []}, {"nl": "Deletes the current record. Deletion is performed by just marking the record as \"deleted\"; the current record does not change.  To get to the next record, call next().", "Heuristic": []}, {"nl": "Factory method to return a BlockStoreMeta instance without blockIds.", "Heuristic": []}, {"nl": "Returns the singleton instance of SentenceFactory.", "Heuristic": []}, {"nl": "Sets the volume and the mount directory before a test runs.", "Heuristic": []}, {"nl": "Retrieves the publicKey", "Heuristic": []}, {"nl": "Set a new Action String to use", "Heuristic": []}, {"nl": "Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData.TargetGeos }", "Heuristic": ["H1"]}, {"nl": "Returns total number of connections in the pool.", "Heuristic": []}, {"nl": "Return the authentication token.", "Heuristic": []}, {"nl": "Pack a record address and partition id into a single word.", "Heuristic": ["H1"]}, {"nl": "This is to get the renewed tokens from token store", "Heuristic": []}, {"nl": "Get the full list of transactions if it is stored, otherwise null. Only one of this and getTxOutChanges() will return a non-null value.", "Heuristic": ["H1"]}, {"nl": "Gets all entitled attributes for given set of attributes this an universal method to do policy search and find entitlement attributes", "Heuristic": ["H1"]}, {"nl": "Whether the plan is empty, an empty plan means both toMove and toEvict are empty, also, an empty plan indicates no action (move or evict) needs to be taken to meet the requirement.", "Heuristic": []}, {"nl": "Gets the cached expiration date from a Bundle.", "Heuristic": []}, {"nl": "Assert that an array has no null elements. Note: Does not complain if the array is empty! Assert.noNullElements(array);", "Heuristic": []}, {"nl": "checkGameElement prueft spezifisch ob die Schlange mit einem  gameElement kollidiert ist.", "Heuristic": ["H1"]}, {"nl": "Returns the original element list, unchanged.", "Heuristic": []}, {"nl": "Deletes a given list of user stores", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Sets the value of the shipDate property.", "Heuristic": []}, {"nl": "Tests the  {@link BlockContainerIdGenerator#getNewContainerId()} method.", "Heuristic": ["H1"]}, {"nl": "Returns everything above the endpoint relative to the specified comparator, with the specified endpoint behavior.", "Heuristic": []}, {"nl": "Removes the mapping at the specified index.", "Heuristic": []}, {"nl": "Check that a list is not null and that none of its elements is null. If null or if the list has emtpy elements throws an IllegalArgumentException.", "Heuristic": ["H1"]}, {"nl": "Deprecated. Please use  {@link AppEventsLogger} instead.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the browser property.", "Heuristic": []}, {"nl": "Gets the data set id.", "Heuristic": ["H1"]}, {"nl": "Optional.", "Heuristic": ["H2"]}, {"nl": "Determines how the method is exported in JavaScript: METHOD_TYPE_REMOTE for regular methods METHOD_TYPE_REMOTE_ASYNC for methods that return a promise object to the caller.", "Heuristic": ["H1"]}, {"nl": "Sets the flags for the media transport control buttons that this client supports.", "Heuristic": []}, {"nl": "A fast method to retrieve one row of data from the matrix as a BitArray.", "Heuristic": []}, {"nl": "this will fail on older phones (Android version < 2.0)", "Heuristic": ["H1"]}, {"nl": "Sets the run id.", "Heuristic": ["H1"]}, {"nl": "Saves all torrent data.", "Heuristic": []}, {"nl": "Sets the value of the errorMessage property.", "Heuristic": []}, {"nl": "Decode a series of 4 bytes from buf, starting at position 0, and interpret them as an integer.", "Heuristic": ["H1"]}, {"nl": "Returns whether heuristic caching is enabled.", "Heuristic": []}, {"nl": "Create an instance of  {@link Item }", "Heuristic": ["H1"]}, {"nl": "Sets the load direct children flag.", "Heuristic": []}, {"nl": "Returns the foundation using the type and the base address.", "Heuristic": []}, {"nl": "Get the Entropy bytes", "Heuristic": []}, {"nl": "Unlocks the last inode that was locked.", "Heuristic": ["H1"]}, {"nl": "Adds S3 keys to the given Hadoop Configuration object if the user has specified them using System properties, and they're not already set. This function is duplicated from  {@code alluxio.underfs.hdfs.HdfsUnderFileSystemUtils}, to prevent the module alluxio-core-client from depending on the module alluxio-underfs.", "Heuristic": ["H1"]}, {"nl": "Add an alias/password pair to the callback mechanism.", "Heuristic": []}, {"nl": "Returns an immutable range map mapping a single range to a single value.", "Heuristic": ["H1"]}, {"nl": "Checks and normalizes the given path.", "Heuristic": []}, {"nl": "Sets the value of the totalTC property.", "Heuristic": []}, {"nl": "creates a Control or Data packet depending on the highest bit of the first 32 bit of data", "Heuristic": ["H1"]}, {"nl": "Gets Global Singleton Instance.", "Heuristic": []}, {"nl": "Returns the set of terms that have been counted.", "Heuristic": []}, {"nl": "Creates a Gravatar thumbnail url from the specified email address.", "Heuristic": ["H1"]}, {"nl": "Solve several linear systems and check against solution", "Heuristic": []}, {"nl": "Set timeout time for reading paused events. Default is 5000 ms.", "Heuristic": []}, {"nl": "Creates an instance of  {@link DefaultHttpResponseFactory} to be usedby HTTP connections for creating  {@link HttpResponse} objects. This method can be overridden in a super class in order to provide a different implementation of the  {@link HttpResponseFactory} interface.", "Heuristic": ["H1"]}, {"nl": "Returns result value as struct.", "Heuristic": []}, {"nl": "Request specific amount of Bitcoins from user, with feedback from the app. Result intent can be received by overriding  {@link android.app.Activity#onActivityResult()}. Result indicates either  {@link Activity#RESULT_OK} or{@link Activity#RESULT_CANCELED}. In the success case, use  {@link #transactionHashFromResult(Intent)} to read thetransaction hash from the intent. Warning: A success indication is no guarantee! To be on the safe side, you must drive your own Bitcoin infrastructure and validate the transaction.", "Heuristic": ["H1"]}, {"nl": "Set the addition difference.", "Heuristic": []}, {"nl": "Returns a list of  {@link NameValuePair NameValuePairs} as built from theURI's query portion. For example, a URI of http://example.org/path/to/file?a=1&b=2&c=3 would return a list of three NameValuePairs, one for a=1, one for b=2, and one for c=3.  This is typically useful while parsing an HTTP PUT.", "Heuristic": ["H1"]}, {"nl": "Deserialize only a byte field (addressed by recursively using field id) from a byte record.", "Heuristic": ["H1"]}, {"nl": "Returns the number of values.", "Heuristic": []}, {"nl": "Tests the constructor with an invalid length.", "Heuristic": []}, {"nl": "Gets the value of the intDefault property.", "Heuristic": []}, {"nl": "Decodes a byte array from Base64 format. No blanks or line breaks are allowed within the Base64 encoded input data.", "Heuristic": []}, {"nl": "Here, we attempt to get the password from the private alias/passwords map.", "Heuristic": []}, {"nl": "Reads from the given buffer into the internal byte array.", "Heuristic": []}, {"nl": "Deserialize the Thrift object from a Java string, using the default JVM charset encoding.", "Heuristic": ["H1"]}, {"nl": "Strafe right.", "Heuristic": ["H2"]}, {"nl": "Gets the checks if is system derived.", "Heuristic": []}, {"nl": "Gets the string value of the specified field of the current scan.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Removes the two corresponding one-way connections.", "Heuristic": []}, {"nl": "Gets a Reader for the resource identified", "Heuristic": []}, {"nl": "Returns the location one unit behind, this location.", "Heuristic": []}, {"nl": "Utility method to check if the JVM is running on a Windows OS.", "Heuristic": []}, {"nl": "Checks whether all elements of the collection are in the set", "Heuristic": []}, {"nl": "Parses a message starting from the outer wrapper format. This wrapper format is described in the protocol in section 5.1.1", "Heuristic": []}, {"nl": "Gets the run id.", "Heuristic": ["H1"]}, {"nl": "get the default cache expire time in milliseconds", "Heuristic": ["H1"]}, {"nl": "Test of getHash method, of class CollisionDJBX31A.", "Heuristic": []}, {"nl": "Puts an unsigned byte into the buffer.", "Heuristic": []}, {"nl": "Provide the enableSnat status to the ExternalGatewayInfo's Builder.", "Heuristic": ["H1"]}, {"nl": "Checks if a pattern exists for the provided key", "Heuristic": []}, {"nl": "Returns an unmodifiable view of the object's key set", "Heuristic": []}, {"nl": " Return the computed hashCode. ", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Sets the correlation Id on the message.  MSMQ specifies that the ID should be a byte array, of 20 bytes in length. But callers can use this convenience method to use a string as a correlationId.  It will be encoded as UTF-8, and limited to 20 bytes.", "Heuristic": ["H1"]}, {"nl": "Return the Payload attached to the current active bucket for |test|. Always returns a payload so the client doesn't crash on a malformed test definition.", "Heuristic": ["H1"]}, {"nl": "Test for the  {@link LocalFileBlockReader#getLength()} method.", "Heuristic": ["H1"]}, {"nl": "Throw  {@link AssertionException} with a given message. Use this method surrounded with{@code if} block with assert condition in case you plan to do string concatenation to producethe message.", "Heuristic": ["H1"]}, {"nl": "run a SPARQL query (ask) on the remote server", "Heuristic": ["H1"]}, {"nl": "Returns the current packed value.", "Heuristic": []}, {"nl": "Retrieve BPS Profiles", "Heuristic": []}, {"nl": "Sets the  {@link ConnRoutePNames#FORCED_ROUTE FORCED_ROUTE}parameter value.", "Heuristic": ["H1"]}, {"nl": "Returns an instance which specifies that the ordering of the elements is guaranteed to be determined by  {@code comparator}.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Required.", "Heuristic": ["H2"]}, {"nl": "Returns the answer to the specified question using PL-Resolution.", "Heuristic": []}, {"nl": "Gets whether the given class if one of Android's default lifecycle classes (android.app.Activity etc.)", "Heuristic": []}, {"nl": "This method should be used when you need to stub out creating NativeArrays in unit tests.", "Heuristic": []}, {"nl": "Returns  {@code true} if each element in {@code iterable} after the first is greater than orequal to the element that preceded it, according to the specified comparator. Note that this is always true when the iterable has fewer than two elements.", "Heuristic": ["H1"]}, {"nl": "Returns the value in  {@link ByteBuffer} in this partition, or null if not found.", "Heuristic": ["H1"]}, {"nl": "Returns an empty immutable range map.", "Heuristic": []}, {"nl": "Gets the list of permissions associated with this access token. Note that the most up-to-date list of permissions is maintained by the Facebook service, so this list may be outdated if permissions have been added or removed since the time the AccessToken object was created. For more information on permissions, see https://developers.facebook.com/docs/reference/login/#permissions.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMCParser#setVariation(double)} .", "Heuristic": ["H1"]}, {"nl": "Stops the stopwatch. Future reads will return the fixed duration that had elapsed up to this point.", "Heuristic": []}, {"nl": "Gets the value of the position property.", "Heuristic": []}, {"nl": "Gets the actual port that the RPC service is listening on (used by unit test only).", "Heuristic": []}, {"nl": "Return the total time in milliseconds for all tasks.", "Heuristic": []}, {"nl": "Acknowledge and cache the status of a remote Gitblit instance.", "Heuristic": ["H1"]}, {"nl": "Gets the name of the gene set.", "Heuristic": []}, {"nl": "decode the Hex encoded String data - whitespace will be ignored.", "Heuristic": ["H1"]}, {"nl": "Start a shell on the remote machine.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Get whether to use direct reference to refer to this token", "Heuristic": []}, {"nl": "Get the remaining utility of a cell in the projected q-matrix at a given  cell position (row,column).", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Sets the value of the fail property.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Provide the segmentationId to the NetworkSegment's Builder.", "Heuristic": ["H1"]}, {"nl": "Tells the database to ignore foreign key constraints, effective only for current session. Useful when you want to truncate a table that has foreign key constraints. Note that this may create orphan records in child tables.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Increments the counter associated with `term`.", "Heuristic": []}, {"nl": "Returns the type of the specified field, using the constants in  {@link java.sql.Types}.", "Heuristic": ["H1"]}, {"nl": "Gets the remote address this socket is connected to.", "Heuristic": []}, {"nl": "Sets the domain attribute.", "Heuristic": []}, {"nl": "Decrements the reference count.", "Heuristic": []}, {"nl": "Get the factory for the internal representation of WS-RM data (WS-ReliableMessaging 1.1).", "Heuristic": []}, {"nl": "Returns the conclusion of this horn clause. In horn form, the premise is called the body, and the conclusion is called the head.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets the start time.", "Heuristic": []}, {"nl": "Create an instance of  {@link JAXBElement }{@code }}", "Heuristic": ["H1"]}, {"nl": "An iterable containing a single element.", "Heuristic": []}, {"nl": "Executes the request. This method is called from the WebView thread. To do a non-trivial amount of work, use: cordova.getThreadPool().execute(runnable); To run on the UI thread, use: cordova.getActivity().runOnUiThread(runnable);", "Heuristic": ["H1"]}, {"nl": "Tests whether we can get exception when getting a login user in non-security mode.", "Heuristic": []}, {"nl": "Get the values for the Random Variable Xi's parents and its own value from the provided event.", "Heuristic": []}, {"nl": " Append a hashCode for a float array. ", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Puts the specified name/value pair in the specified JSON object.", "Heuristic": []}, {"nl": "Notifies observers about data changing", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.PositionParser#setLongitude(int,double)}.", "Heuristic": ["H1"]}, {"nl": "Test for distanceTo()", "Heuristic": []}, {"nl": "Gets the value of the id property.", "Heuristic": ["H1"]}, {"nl": "Starts a simple test frame application.", "Heuristic": []}, {"nl": "Gets the word list this code uses.", "Heuristic": []}, {"nl": "Returns the  {@link InetSocketAddress} of the remote.", "Heuristic": ["H1"]}, {"nl": "Returns a  {@link ExecutorServiceFactory} which creates threadpool executors with the given basename and number of threads. Created threads will be daemonic.", "Heuristic": ["H1"]}, {"nl": "Encoding does NOT include 'buffer' itself. See  {@link MessageEncoder}.", "Heuristic": ["H1"]}, {"nl": "Input Stream management not safe", "Heuristic": []}, {"nl": "Creates an instance of  {@link EntitySerializer} with the{@link StrictContentLengthStrategy} implementation to be used forserializing HTTP entities sent over this connection.  This method can be overridden in a super class in order to create instances of  {@link EntitySerializer} using a custom{@link ContentLengthStrategy}.", "Heuristic": ["H1"]}, {"nl": "Getter for the exit description (defaults to blank)", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Replaces the first occurence of the header with the same name. If no header with the same name is found the given header is added to the end of the list.", "Heuristic": ["H1"]}, {"nl": "Test of getProperties method, of class DBType.", "Heuristic": []}, {"nl": "Tests the  {@link FileUtils#createDir(String)} method.", "Heuristic": ["H1"]}, {"nl": "Returns the number of unique, non-ignored words, in the source file(s). This number should be used to for the size of the arrays that are passed to getWordFrequency.", "Heuristic": []}, {"nl": "Get the realm associated with the SamlAssertionWrapper parameter", "Heuristic": ["H1"]}, {"nl": "Optional.", "Heuristic": ["H2"]}, {"nl": "Template Description", "Heuristic": ["H2"]}, {"nl": "Gets the value of the double property.", "Heuristic": []}, {"nl": "Test whether the pen button is pressed", "Heuristic": []}, {"nl": "GET  /account -> get the current user.", "Heuristic": ["H1"]}, {"nl": "Override this if anything needs to be done on error (e.g. Logging)", "Heuristic": []}, {"nl": "Translates literal name to correspondent enumeration value.", "Heuristic": []}, {"nl": "Translates a string into application/x-www-form-urlencoded format using UTF-8 encoding scheme. Bytes for unsafe characters are also obtained using UTF-8 scheme.", "Heuristic": ["H1"]}, {"nl": "Get the length of the path, i.e. the number of steps", "Heuristic": []}, {"nl": "Gets the expected data unit id.", "Heuristic": ["H1"]}, {"nl": "the CSS condition that element has pseudo-class :last-child", "Heuristic": ["H1"]}, {"nl": "Gets the score.", "Heuristic": []}, {"nl": "Method called only from the Viewer. Sends the move command from input to the Model.", "Heuristic": []}, {"nl": "Tests the  {@link ShellUtils#execCommand(String)} method for a group of commands.", "Heuristic": ["H1"]}, {"nl": "Returns the number of minutes ago between the start time and the end time.", "Heuristic": []}, {"nl": "Getter for the name.", "Heuristic": []}, {"nl": "Method which prints the method to use all the commands.", "Heuristic": []}, {"nl": "Not-null value.", "Heuristic": ["H2"]}, {"nl": "Sets the Storm parallelism hint.", "Heuristic": []}, {"nl": "Check for SOAP-Fault SOAP-Fault check by finding end of closing Tag \"Fault>\"", "Heuristic": ["H1"]}, {"nl": "Actually formats a header. Called from  {@link #formatHeader}.", "Heuristic": ["H1"]}, {"nl": "It returns the attribute", "Heuristic": []}, {"nl": "Replace the current fragment with specified one in specified container", "Heuristic": []}, {"nl": "Only when plan is not null and at least one of {@link #validCascadingPlan(long,EvictionPlan,BlockMetadataManager)}, {@link #validNonCascadingPlan(long,EvictionPlan,BlockMetadataManager)} is true, the assertionwill be passed, used in unit test.", "Heuristic": ["H1"]}, {"nl": "Sets URI query.  The value is expected to be encoded form data.", "Heuristic": []}, {"nl": "Asserts that a Unicode escaper escapes the given hi/lo surrogate pair into the expected string.", "Heuristic": []}, {"nl": "Resets  {@link #nextProxy} to the first option.", "Heuristic": ["H1"]}, {"nl": "Stem the word placed into the Stemmer buffer through calls to add(). Returns true if the stemming process resulted in a word different from the input.  You can retrieve the result with getResultLength()/getResultBuffer() or toString().", "Heuristic": ["H1"]}, {"nl": "get the resource id of the big icon", "Heuristic": ["H1"]}, {"nl": "Return whether this SecurityToken is about to expire or not", "Heuristic": []}, {"nl": "Return a List of source files to import. Processing each file in turn is equivalent to a breadth first search through the directory structure.", "Heuristic": []}, {"nl": "Executes the automatic events of the map in the current object layer.", "Heuristic": []}, {"nl": "Get option by value", "Heuristic": []}, {"nl": "Create a AegisType for a Method parameter.", "Heuristic": ["H1"]}, {"nl": "Return the location of this pileup.", "Heuristic": []}, {"nl": "Convert the given byte buffer to a string. The resulting string can be converted back to the same byte buffer through  {@link #stringToBytes(String)}.", "Heuristic": ["H1"]}, {"nl": "perform UDP hole punching to the specified client by sending  a dummy packet. A local port will be chosen automatically.", "Heuristic": ["H1"]}, {"nl": "Returns the number of satoshis of this monetary value. It's deprecated in favour of accessing  {@link #value}directly.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Sets value of the  {@link CoreProtocolPNames#HTTP_CONTENT_CHARSET} parameter.", "Heuristic": ["H1"]}, {"nl": "Updates the rememberMe token", "Heuristic": ["H1"]}, {"nl": "Puts an unsigned byte into the buffer.", "Heuristic": []}, {"nl": "Access for shouldSave", "Heuristic": []}, {"nl": "Returns the size (in nodes) of the tree.", "Heuristic": []}, {"nl": "This method computes the eigen vector with the largest eigen value by using the direct power method. This technique is the easiest to implement, but the slowest to converge. Works only if all the eigenvalues are real.", "Heuristic": ["H1"]}, {"nl": "Generates the SQL statement for creating the Index", "Heuristic": []}, {"nl": "Gets the pcl data units.", "Heuristic": ["H1"]}, {"nl": "Turn on or off attribute qualification.", "Heuristic": []}, {"nl": "Test of setMeanResponseTime method, of class LogEntryInterval.", "Heuristic": []}, {"nl": "Returns the mime type of the data specified by the given URI string.", "Heuristic": []}, {"nl": "Gets the cached list of permissions from a Bundle.", "Heuristic": []}, {"nl": "Gets the feed id.", "Heuristic": ["H1"]}, {"nl": "Genesis block for this chain. The first block in every chain is a well known constant shared between all Bitcoin implemenetations. For a block to be valid, it must be eventually possible to work backwards to the genesis block by following the prevBlockHash pointers in the block headers. The genesis blocks for both test and main networks contain the timestamp of when they were created, and a message in the coinbase transaction. It says, \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\".", "Heuristic": ["H1"]}, {"nl": "Set the KeySize", "Heuristic": []}, {"nl": "Get the Hazelcast instance If null, return Default instance", "Heuristic": ["H1"]}, {"nl": "Set whether a KeyValue is used to refer to a a certificate used to sign an issued token.  The default is false.", "Heuristic": ["H1"]}, {"nl": "Calculates the position where the first record having the specified search key should be, then returns the position before it.", "Heuristic": []}, {"nl": "Create a unique namespace uri/prefix combination.", "Heuristic": ["H1"]}, {"nl": "Sets the pcl feed id.", "Heuristic": ["H1"]}, {"nl": "array end, return array value.", "Heuristic": ["H1"]}, {"nl": "Sets the Time field.", "Heuristic": []}, {"nl": "Helper for error callbacks that just returns the Status.ERROR by default", "Heuristic": ["H1"]}, {"nl": "Creates an instance of  {@link DefaultHttpRequestFactory} to be usedby HTTP connections for creating  {@link HttpRequest} objects. This method can be overridden in a super class in order to provide a different implementation of the  {@link HttpRequestFactory} interface.", "Heuristic": ["H1"]}, {"nl": "Returns the distinct values for a specified field  in the underlying table, or 1 for the indexed field.", "Heuristic": ["H1"]}, {"nl": "Returns the third element of the triplet.", "Heuristic": []}, {"nl": "Test of getDeviceName method, of class Device.", "Heuristic": []}, {"nl": "Determines whether a segment contains a black point", "Heuristic": []}, {"nl": "Called from the OSX  {@link ApplicationListener} when we receive anopen application event from Launch Services.", "Heuristic": ["H1"]}, {"nl": "Get all claim types that is need to persist in the store", "Heuristic": []}, {"nl": "Normalizes the filename by taking the casing into account, e.g. on Windows, the filename is changed to lowercase only.", "Heuristic": []}, {"nl": "Returns a string containing a concise, human-readable description of the socket.", "Heuristic": []}, {"nl": "Add a record field to the stream. \\param value The record value to be added.", "Heuristic": ["H1"]}, {"nl": "Add PropertyChangeListener.", "Heuristic": []}, {"nl": "Returns a list of currently parseable sentence types.", "Heuristic": ["H1"]}, {"nl": "Specifies whether to try to write \"typed-time\" fields instead of raw integer  values. This makes the session description more readable but may have an adverse effect on serialization time. Ordinarily time values are given in numbers of seconds, but for readability they may be specified using logical units. From RFC 2327: To make announcements more compact, times may also be given in units of days, hours or minutes. The syntax for these is a number immediately followed by a single case-sensitive character. Fractional units are not allowed - a smaller unit should be used instead. The following unit specification characters are allowed: d - days (86400 seconds) h - minutes (3600 seconds) m - minutes (60 seconds) s - seconds (allowed for completeness but not recommended)", "Heuristic": ["H1"]}, {"nl": "Unloads the maps from memory.", "Heuristic": []}, {"nl": "This is called automatically from the Storage initializer", "Heuristic": []}, {"nl": "Remove or unregister the profile from the  {@link ProfileManager}.", "Heuristic": ["H1"]}, {"nl": "Factory method, responsible for heuristic function creation.", "Heuristic": []}, {"nl": "Return an empty list.", "Heuristic": []}, {"nl": "Method setDocumentLocator.", "Heuristic": []}, {"nl": "Control WSDL validation.", "Heuristic": []}, {"nl": "Gets the reg test result details lst.", "Heuristic": ["H1"]}, {"nl": "Set whether the callback is authorized or not.", "Heuristic": []}, {"nl": "Given a FilenameFilter, expose as a File Filter.", "Heuristic": []}, {"nl": "Sets the batch id.", "Heuristic": ["H1"]}, {"nl": "get identity code", "Heuristic": ["H1"]}, {"nl": "Equality test.", "Heuristic": ["H2"]}, {"nl": "Not implemented. {@inheritDoc}", "Heuristic": []}, {"nl": "Helper method for buildModelList.  Adds those elements from source that do not have the same path as any path in paths to elements, and its path to paths. Thus elements will never contain two objects with the same path, unless they are added by other means.", "Heuristic": ["H1"]}, {"nl": "Set the individual URI.", "Heuristic": []}, {"nl": "Specifies the particular textures which must be loaded for this screen. It returns null by default.", "Heuristic": []}, {"nl": "Copies all of the bytes from  {@code in} to {@code out}. Neither stream is closed. Returns the total number of bytes transferred.", "Heuristic": ["H1"]}, {"nl": "Back to the fragment which is in the root of backstack", "Heuristic": ["H1"]}, {"nl": "Map \"jwkKeyList\" to the jwk property on this bean. Everything else returns null", "Heuristic": ["H1"]}, {"nl": "Decodes a byte array from Base64 format. No blanks or line breaks are allowed within the Base64 encoded input data.", "Heuristic": []}, {"nl": "Gets the name of the next variable which will be the objectname plus a unique number", "Heuristic": ["H1"]}, {"nl": "Sets the minimum number of threads to keep alive for background revalidations due to the  {@code stale-while-revalidate} directive.", "Heuristic": ["H1"]}, {"nl": "Sets the length of the datagram packet. This length plus the offset must be lesser than or equal to the buffer size.", "Heuristic": ["H1"]}, {"nl": "Returns the filename assigned to this table. Currently, the filename is the table name followed by \".tbl\".", "Heuristic": ["H1"]}, {"nl": "Gives providers a chance to introspect the JAX-RS model classes. For example, the JAXB provider may use the model classes to create a single composite JAXBContext supporting all the JAXB-annotated  root resource classes/types.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.SentenceFactory#createParser(java.lang.String)}.", "Heuristic": ["H1"]}, {"nl": "Gets Global Singleton Instance.", "Heuristic": []}, {"nl": "How many rows/states in the machine/table.", "Heuristic": []}, {"nl": "constructs a predicate from the given attribute", "Heuristic": ["H1"]}, {"nl": "Returns the round trip time for this ping in nanoseconds, waiting for the response to arrive if necessary. Returns -1 if the response was cancelled.", "Heuristic": []}, {"nl": "Sets the run status.", "Heuristic": []}, {"nl": "reload settings from both the property and configuration files", "Heuristic": ["H1"]}, {"nl": "Returns true if and only if this instance represents a monetary value less than zero, otherwise false.", "Heuristic": []}, {"nl": "TODO(dong): In KERBEROS mode, ... Tests that an exception is thrown when trying to use KERBEROS mode.", "Heuristic": ["H1"]}, {"nl": "Returns the x_view of a given longitude value in world coordinates.", "Heuristic": []}, {"nl": "Read bytes from the network.", "Heuristic": []}, {"nl": "Given a String Filter, expose as a File Filter. The File paths are normalized to a standard pattern using / as a path separator which can be used cross platform easily in a regular expression based String Filter.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Erase this ball at its current position.", "Heuristic": []}, {"nl": "Associate a ClientIdentity with this Authentication", "Heuristic": []}, {"nl": "This method should be used when you need to stub out creating NativeMaps in unit tests.", "Heuristic": []}, {"nl": "Returns the checked state of the specified position. The result is only valid if the choice mode has been set to AbsListView.CHOICE_MODE_SINGLE, but the code does not check this.", "Heuristic": ["H1"]}, {"nl": "Gets the stack trace.", "Heuristic": []}, {"nl": "Gets the value of the text property.", "Heuristic": []}, {"nl": "Creates a Gravatar thumbnail url from the specified email address.", "Heuristic": ["H1"]}, {"nl": "Stores the contents of a multimap in an output stream, as part of serialization. It does not support concurrent multimaps whose content may change while the method is running. The  {@link Multimap#asMap} viewdetermines the ordering in which data is written to the stream. The serialized output consists of the number of distinct keys, and then for each distinct key: the key, the number of values for that key, and the key's values.", "Heuristic": ["H1"]}, {"nl": "Clears content of the buffer. The underlying byte array is not resized.", "Heuristic": []}, {"nl": "Size of the set", "Heuristic": []}, {"nl": "Returns an event touching the character specified by the charRect Rectangle object.", "Heuristic": []}, {"nl": "Create an instance of  {@link ValidateTokenResponse }", "Heuristic": ["H1"]}, {"nl": "Set the CXF bus.", "Heuristic": []}, {"nl": "Get the app context as initialized or refreshed by initDataSource()", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link JAXBElement }{@code }}", "Heuristic": ["H1"]}, {"nl": "Called on page transitions", "Heuristic": []}, {"nl": "This static method is the only way to construct new TagSets.", "Heuristic": []}, {"nl": "Notify the system that the visibility of an action view's sub-UI such as an anchored popup has changed. This will affect how other system visibility notifications occur.", "Heuristic": []}, {"nl": "Change title in the Action Bar", "Heuristic": []}, {"nl": "Set Application management service", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMBParser#getOriginId()}.", "Heuristic": ["H1"]}, {"nl": "Gets the jaxb provider.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns the Redis key for a given search term.", "Heuristic": []}, {"nl": "Return the callable type.  The command type is used for concurrency throttling in the  {@link CallableQueueService}.", "Heuristic": ["H1"]}, {"nl": "Closes the given object, ignoring IOExceptions.", "Heuristic": []}, {"nl": "Inserts a listener to provider.", "Heuristic": []}, {"nl": "Get Parameter Value.", "Heuristic": []}, {"nl": "Checks whether the given label is the label of one of the vertices.", "Heuristic": []}, {"nl": "cleanup state before each test method", "Heuristic": ["H1"]}, {"nl": "Get a single UserInfo object by its username", "Heuristic": []}, {"nl": "Initialize WSRealm by Carbon", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Configures the api key", "Heuristic": ["H1"]}, {"nl": "Returns an UBL OrderType issue date in the LONG format as defined by java.text.DateFormat.", "Heuristic": ["H1"]}, {"nl": "Find the OpenID corresponding to the given user name.", "Heuristic": ["H1"]}, {"nl": "Returns the ID of this ItemUID as a String. If everything works all such Strings will be unique. It is possible to created a new identical ItemUID using this String.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns the client which obtained the access token", "Heuristic": []}, {"nl": " A diagonal matrix where real diagonal element contains a real eigenvalue.  If an eigenvalue is imaginary then zero is stored in its place. ", "Heuristic": []}, {"nl": "Returns all commits in the push.", "Heuristic": []}, {"nl": "Gets the value of the value property.", "Heuristic": []}, {"nl": "This makes sure the U and V matrices are being correctly by the push code.", "Heuristic": []}, {"nl": "Validates BRCA2.", "Heuristic": ["H2"]}, {"nl": "Delete the team object with the specified teamname", "Heuristic": ["H1"]}, {"nl": "Return whether a message on  {@code topic} of obscurity{@code level} should be reported, based on use of the-report command-line switches given by the user.", "Heuristic": ["H1"]}, {"nl": "Returns the name of the affected table.", "Heuristic": []}, {"nl": "Sets the metadata to attach to the content to shared. See developer docs for more info.", "Heuristic": []}, {"nl": "Send a DEBUG log message.", "Heuristic": []}, {"nl": "Add a named type object to the table.", "Heuristic": []}, {"nl": "Releases all locks by asking the lock table to unlock each one.", "Heuristic": []}, {"nl": "satisfy for all data types.", "Heuristic": ["H1"]}, {"nl": "Creates an instance of  {@link DefaultNHttpClientConnection} based on thegiven  {@link IOSession}.  This method can be overridden in a super class in order to provide a different implementation of the  {@link NHttpClientIOTarget} interface.", "Heuristic": ["H1"]}, {"nl": "Deprecated. Please use  {@link AppEventsLogger} instead.", "Heuristic": ["H1"]}, {"nl": "Produce a JSONArray of JSONObjects from a comma delimited text string, using the first row as a source of names.", "Heuristic": []}, {"nl": "Gets the array.", "Heuristic": []}, {"nl": "Process the PROPPATCH method. As this servlet does not handle the creation of custom properties, this method will always fail with a 403 (Forbidden).", "Heuristic": ["H1"]}, {"nl": "Validate Job tracker", "Heuristic": []}, {"nl": "Obtains the socket's local address", "Heuristic": []}, {"nl": "Checks if the given input passes some of the AreInputsStandard checks. Not complete.", "Heuristic": ["H1"]}, {"nl": "Get Parameter Name.", "Heuristic": []}, {"nl": "Destroy the service.", "Heuristic": []}, {"nl": "Serializes the 'type' byte followed by the message itself.", "Heuristic": []}, {"nl": "Set the BaseSpringSystem that the SpringLooper will call back to.", "Heuristic": ["H1"]}, {"nl": "Provide number of REJECT decisions for UTR Mutations.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Get body of the message", "Heuristic": []}, {"nl": "Return the ID from a child ID.", "Heuristic": []}, {"nl": "Sets the redirect uri which needs to be retained in a hidden form field", "Heuristic": ["H1"]}, {"nl": "Change the current Locale. The string with the name follows this BNF format:  language [ \"_\" country ]  Only use this before the GUI is initialized.", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link User }", "Heuristic": ["H1"]}, {"nl": "Binds this socket to the specified local serviceID.", "Heuristic": []}, {"nl": "Set up.", "Heuristic": ["H2"]}, {"nl": "The hash of the transaction to which we refer", "Heuristic": []}, {"nl": "Returns the \"version\" or \"header\" byte: the first byte of the data. This is used to disambiguate what the contents apply to, for example, which network the key or address is valid on.", "Heuristic": []}, {"nl": "Called on the event dispatching thread (not on the worker thread) after the construct method has returned.", "Heuristic": []}, {"nl": "We support  {@link JWTBearerAssertionAuthenticationToken}s only.", "Heuristic": ["H1"]}, {"nl": "check if the system is idle", "Heuristic": ["H1"]}, {"nl": "Return the application path.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Creates an ArrayType by specifying the data type of elements ( {@code elementType}). The field of  {@code containsNull} is set to {@code true}.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the orderDate property.", "Heuristic": []}, {"nl": "Returns true if this interval is upper inclusive.", "Heuristic": []}, {"nl": "Build response bytes with the status and type information specified in the headers.", "Heuristic": []}, {"nl": "Unique group identifier, usually UUID", "Heuristic": []}, {"nl": "Getter for the default UserFilesPath.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets the value of the value property.", "Heuristic": []}, {"nl": "Adds the fish tagging.", "Heuristic": []}, {"nl": "Defines the position of a location as with respect to an orthogonal coordinate system.", "Heuristic": []}, {"nl": "Set the charset for the current font.", "Heuristic": ["H1"]}, {"nl": "Validate that the Nodes validated one-by-one in the isValid method were all the Nodes expected. By default do nothing:  can override to add custom logic", "Heuristic": ["H1"]}, {"nl": "A unique name that is readable to human and it is to identify an inbound endpoint within a application server.", "Heuristic": ["H1"]}, {"nl": "Add (union) in a complete set.", "Heuristic": []}, {"nl": "Return", "Heuristic": ["H2"]}, {"nl": "Gets the query that will be used to validate the connection", "Heuristic": []}, {"nl": "Gets the error code.", "Heuristic": []}, {"nl": "Returns the task used for retransmitting the associated segment.", "Heuristic": []}, {"nl": "Sets the property id.", "Heuristic": ["H1"]}, {"nl": "Add a file to the ClassPath via the DistributedCache.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Using  {@link CachedGroupMapping} to get the group list of a user.", "Heuristic": ["H1"]}, {"nl": "Creates an instance of  {@link HttpMessageWriter} to be used forwriting out HTTP responses sent over this connection.  This method can be overridden in a super class in order to provide a different implementation of the  {@link HttpMessageWriter} interface orto pass a different implementation of  {@link LineFormatter} to thethe default implementation  {@link HttpResponseWriter}.", "Heuristic": ["H1"]}, {"nl": "Test method for  {@link ActivityController#deregisterUserSession(ServerSession,ServerMessage)}Verifies that  {@code NullPointerException} is thrown when {@code ServerSession} ID is null.", "Heuristic": ["H1"]}, {"nl": "Serializes and deserializes the specified object and verifies that the re-serialized object is equal to the provided object, that the hashcodes are identical, and that the class of the re-serialized object is identical to that of the original. GWT warning: Under GWT, this method simply returns its input, as proper GWT serialization tests require more setup.  This no-op behavior allows test authors to intersperse  {@code SerializableTester} calls withother, GWT-compatible tests. Note that the specified object may not be known by the compiler to be a {@link java.io.Serializable} instance, and is thus declared an{@code Object}. For example, it might be declared as a  {@code List}. Note also that serialization is not in general required to return an object that is  {@linkplain Object#equals equal} to the original, nor is itrequired to return even an object of the same class. For example, if sublists of  {@code MyList} instances were serializable, those sublistsmight implement a private  {@code MySubList} type but serialize as a plain{@code MyList} to save space. So long as {@code MyList} has all the publicsupertypes of  {@code MySubList}, this is safe. For these cases, for which {@code reserializeAndAssert} is too strict, use {@link #reserialize}.", "Heuristic": ["H1"]}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.parser.ZDAParser#getDay()}.", "Heuristic": ["H1"]}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.parser.MWVParser#isTrue()}.", "Heuristic": ["H1"]}, {"nl": "Notifies the Character to check for buffered movements and perform them in order.", "Heuristic": []}, {"nl": "Closes the index by closing its open leaf page, if necessary.", "Heuristic": []}, {"nl": "Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia.OfferImage }", "Heuristic": ["H1"]}, {"nl": "Performs a decomposition and makes sure the input matrix is not modified.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Sets up the fields for our test.", "Heuristic": []}, {"nl": "calls thru to { {@link #createJettyHTTPServerEngine(String,int,String)} with 'null' for host value", "Heuristic": ["H1"]}, {"nl": "Returns the list of all teams available to the login service.", "Heuristic": []}, {"nl": "Set the attached TokenReference", "Heuristic": []}, {"nl": "Add a class to the current diagram.", "Heuristic": []}, {"nl": "Adds a property change listener.Static for simplicity of use.", "Heuristic": ["H1"]}, {"nl": "Returns true.", "Heuristic": ["H2"]}, {"nl": "Get the uplinks of this node.", "Heuristic": []}, {"nl": "Convert the color to an HTML compatible color string in hex format E.g. #FF0000", "Heuristic": []}, {"nl": "Deletes the specified record from the table scan for the bucket.  The method starts at the beginning of the scan, and loops through the records until the specified record is found.", "Heuristic": []}, {"nl": "Check if an operation engaged with a workflow valid to execute", "Heuristic": []}, {"nl": "Breaks execution of the script.", "Heuristic": []}, {"nl": "Are current operations cancelled?", "Heuristic": []}, {"nl": "Get the heuristic cost for the given location. This determines in which order the locations are processed.", "Heuristic": []}, {"nl": "Test method for  {@link ActivityController#handleEvent(org.osgi.service.event.Event)}Verifies that  {@code IllegalArgumentException} is thrown when {@code Event}'s  {@link ActivityEvent#MESSAGE_KEY} property isempty.", "Heuristic": ["H1"]}, {"nl": "Sets the scope to be used for script evaluation.", "Heuristic": []}, {"nl": "Sets the value of the value property.", "Heuristic": []}, {"nl": "Sets an array of int values in the object.", "Heuristic": []}, {"nl": "Sets up the buffer before a test runs.", "Heuristic": []}, {"nl": "Set listener for any data that is not recognized as NMEA 0183.  devices and environments that produce mixed content with both NMEA and non-NMEA data.", "Heuristic": ["H1"]}, {"nl": "Returns the expiration  {@link Date} of the cookie, or nullif none exists. Note: the object returned by this method is considered immutable. Changing it (e.g. using setTime()) could result in undefined behaviour. Do so at your peril. ", "Heuristic": ["H1"]}, {"nl": "Not supported. This method is used to get the RGB color.", "Heuristic": []}, {"nl": "Accessor for the ReplyTo property.", "Heuristic": ["H1"]}, {"nl": "Create a new item view that can be re-bound to other item data later.", "Heuristic": []}, {"nl": "Closes the output stream at the end.", "Heuristic": []}, {"nl": "Launches the SIP and TURN servers.", "Heuristic": []}, {"nl": "Sets URI path. The value is expected to be unescaped and may contain non ASCII characters.", "Heuristic": []}, {"nl": "Create the specified XPath expression with the namespaces added via addNamespace().", "Heuristic": []}, {"nl": "Set whether to perform a check that the received AppliesTo address is contained in the token as one of the AudienceRestriction URIs. The default is false.", "Heuristic": []}, {"nl": "Set the type of request. If it is POST sets this to true. If GET sets to false", "Heuristic": []}, {"nl": "Writes buffer to the given file path.", "Heuristic": []}, {"nl": "Return true if this SecurityPolicyValidator implementation is capable of validating a  policy defined by the AssertionInfo parameter", "Heuristic": ["H1"]}, {"nl": "Sets whether the cache should behave as a shared cache or not.", "Heuristic": []}, {"nl": "If we are running in testnet-in-a-box mode, we allow connections to nodes with 0 non-genesis blocks.", "Heuristic": ["H1"]}, {"nl": "Returns an instance which specifies that the natural ordering of the elements is guaranteed.", "Heuristic": []}, {"nl": "Assign a Runnable object that will be invoked when the user selects \"Exit...\" or closes the Debugger main window.", "Heuristic": ["H1"]}, {"nl": "Returns the list of all teams who are allowed to bypass the access restriction placed on the specified repository.", "Heuristic": []}, {"nl": "Called by  {@link ddf.catalog.event.retrievestatus.DownloadStatusInfoImpl.cancelDownload} to fire acancel event.", "Heuristic": ["H1"]}, {"nl": "Frees a Hessian 2.0 deserializer", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link javax.xml.bind.JAXBElement }{@code }}", "Heuristic": ["H1"]}, {"nl": "Returns the verb for the access token endpoint (defaults to GET)", "Heuristic": []}, {"nl": "Tell the parse state that an anonymous class is being parsed.", "Heuristic": []}, {"nl": "Guides the allowed concurrency among update operations. Used as a hint for internal sizing. The table is internally partitioned to try to permit the indicated number of concurrent updates without contention. Because assignment of entries to these partitions is not necessarily uniform, the actual concurrency observed may vary. Ideally, you should choose a value to accommodate as many threads as will ever concurrently modify the table. Using a significantly higher value than you need can waste space and time, and a significantly lower value can lead to thread contention. But overestimates and underestimates within an order of magnitude do not usually have much noticeable impact. A value of one permits only one thread to modify the map at a time, but since read operations can proceed concurrently, this still yields higher concurrency than full synchronization. Defaults to 4. Note: Prior to Guava release 9.0, the default was 16. It is possible the default will change again in the future. If you care about this value, you should always choose it explicitly.", "Heuristic": []}, {"nl": "Perform the XSLT transformation specified in the constructor", "Heuristic": []}, {"nl": "Initializes the file, log, and buffer managers.", "Heuristic": []}, {"nl": "Checks whether this protocol can be compared to another one. Only protocol versions with the same protocol name can be {@link #compareToVersion compared}.", "Heuristic": []}, {"nl": "Loads the first page (specified in the constructor) and shows the frame.", "Heuristic": []}, {"nl": "Tests that an exception is thrown when the reference count is two.", "Heuristic": []}, {"nl": "If true the decomposition was for a lower triangular matrix. If false it was for an upper triangular matrix.", "Heuristic": []}, {"nl": "Revert all settings to their default value", "Heuristic": []}, {"nl": "Does nothing, because a rollback record contains no undo information.", "Heuristic": []}, {"nl": "Closes the connection, notifying the server it should settle the channel by broadcasting the most recent payment transaction.", "Heuristic": []}, {"nl": "overloaded method - present for test purposes", "Heuristic": ["H1"]}, {"nl": "Returns the transaction that was found to be non-final, or null.", "Heuristic": []}, {"nl": "Resolves the type of each received sentence parser and passes it to sentenceRead(T) if the type matches the expected type T. This method may be overridden, but be sure to call super.sentencerRead(SentenceEvent) before or after your additional event handling. However, for listeners that need to handle all incoming sentences, it's recommended to directly implement the  {@link net.sf.marineapi.nmea.event.SentenceListener} interface.", "Heuristic": ["H1"]}, {"nl": "Sets the exp value.", "Heuristic": []}, {"nl": "Returns the scheme name.", "Heuristic": []}, {"nl": "Closes the scan by closing the underlying scan.", "Heuristic": []}, {"nl": "Creates an instance of  {@link ToStringHelper} in the same manner as{@link #toStringHelper(Object)}, but using  {@code className} instead of using an instance's{@link Object#getClass()}.", "Heuristic": ["H1"]}, {"nl": "Attempts to move the AI to the set destination.", "Heuristic": []}, {"nl": "Sets the  {@link ConnRoutePNames#LOCAL_ADDRESS LOCAL_ADDRESS}parameter value.", "Heuristic": ["H1"]}, {"nl": "This method is called after the connection is disconnected. Implementations should clean up any additional state created for the connection.", "Heuristic": []}, {"nl": "Create an instance of  {@link CertificateCredentials }", "Heuristic": ["H1"]}, {"nl": "For REST we also consider a response to be a fault if the operation is not found or the response code is an error", "Heuristic": ["H1"]}, {"nl": "Change the default startup directory.", "Heuristic": []}, {"nl": "Retrieve the first element from the list", "Heuristic": []}, {"nl": "Control whether to log at WARN or FINE level. Note this property is ignored if a registered  {@link FaultListener} has handled the exception", "Heuristic": ["H1"]}, {"nl": "Gets total number of samples for all studies.", "Heuristic": []}, {"nl": "{@inheritDoc}Note: This hash code is consistent with exact equality of the calculated statistics, including the floating point values. See the note on  {@link #equals} for details.", "Heuristic": ["H1"]}, {"nl": "Add a node to the open list", "Heuristic": []}, {"nl": "Test of resolve method, of class ResourceResolver.", "Heuristic": []}, {"nl": "stop eclipse from whinging", "Heuristic": ["H1"]}, {"nl": "Limit the number of images that can be selected. By default the user can select infinite number of images.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Set content type for the message", "Heuristic": []}, {"nl": "Tests that an exception is thrown if the read exceeds the file length limit.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets the value of the name property.", "Heuristic": []}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.parser.RMCParser#getTime()}.", "Heuristic": ["H1"]}, {"nl": "Logs the data contained in a ByteBuffer that's ready to be written to the network.", "Heuristic": []}, {"nl": "Get value", "Heuristic": ["H2"]}, {"nl": "Determine if message is outbound.", "Heuristic": []}, {"nl": "Tests whether we can get login user with conf in SIMPLE mode.", "Heuristic": ["H1"]}, {"nl": "Executes PMD found in tempDir with the given command line arguments.", "Heuristic": []}, {"nl": "Returns true if the given height has a recorded checkpoint.", "Heuristic": []}, {"nl": "Sets the error code.", "Heuristic": []}, {"nl": "Sets the value of the arg1 property.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns a copy which contains a copy of the domains list and is in all other aspects a flat copy of this.", "Heuristic": []}, {"nl": "Handle event from the RawRtfParser.", "Heuristic": ["H1"]}, {"nl": "Estimates the distinct number of field values in the product. Since the product does not increase or decrease field values, the estimate is the same as in the appropriate underlying query.", "Heuristic": []}, {"nl": "Helper function to test for a null object and throw an exception if one is found.", "Heuristic": []}, {"nl": "Two GroupValue objects are equal if they have the same values for their grouping fields.", "Heuristic": []}, {"nl": "Back to the fragment which is in the root of backstack", "Heuristic": ["H1"]}, {"nl": "Return a line reader, if one is available.", "Heuristic": []}, {"nl": "Returns the name.", "Heuristic": []}, {"nl": "Gets the diff attribute of the DocumentDiffTest object", "Heuristic": []}, {"nl": "Gets the status.", "Heuristic": []}, {"nl": "Convert resourceBundle to usable  {@link Properties}.", "Heuristic": ["H1"]}, {"nl": "Flushes the dirty buffers modified by the specified transaction.", "Heuristic": []}, {"nl": "Prepare the output stream.", "Heuristic": []}, {"nl": "reverse a linked list", "Heuristic": ["H1"]}, {"nl": "Obtains value of the  {@link CoreConnectionPNames#STALE_CONNECTION_CHECK}parameter. If not set, defaults to true.", "Heuristic": ["H1"]}, {"nl": "Get the value of checkedFlag", "Heuristic": []}, {"nl": "Get the differences.", "Heuristic": []}, {"nl": "Gets  {@link Client} reference", "Heuristic": ["H1"]}, {"nl": "Returns whether encode type indicates the body needs to be gzip-ed.", "Heuristic": ["H1"]}, {"nl": "Return context", "Heuristic": ["H2"]}, {"nl": "Test method for  {@link net.sf.marineapi.nmea.parser.ZDAParser#getTime()}.", "Heuristic": ["H1"]}, {"nl": "Set the current font and current font encoding in the state.", "Heuristic": []}, {"nl": "Gets the custom Consumes media types", "Heuristic": []}, {"nl": "Reads an XML node encoded in UTF-8   x b16 b8 non-final xml chunk X b16 b8 final xml chunk ", "Heuristic": ["H1"]}, {"nl": "Sets the public URI of the third-party application.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "join string like javascript.", "Heuristic": ["H1"]}, {"nl": "Checks whether we have a TermCounter for a given URL.", "Heuristic": []}, {"nl": "Equivalent to calling randomPositiveBigInteger(numBits) and then flipping the sign with 50% probability.", "Heuristic": ["H1"]}, {"nl": "Resets the renderer.", "Heuristic": []}, {"nl": "Heartbeat method, checks the time out if not paused.", "Heuristic": ["H1"]}, {"nl": "get current date and time as String", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#setTime()} .", "Heuristic": ["H1"]}, {"nl": "Get proxy.", "Heuristic": ["H2"]}, {"nl": "Adds the  {@code Runnable} and accompanying {@code Executor} to the list of listeners toexecute. If execution has already begun, the listener is executed immediately. When selecting an executor, note that  {@code directExecutor} is dangerous in some cases. Seethe discussion in the  {@link ListenableFuture#addListener ListenableFuture.addListener}documentation.", "Heuristic": ["H1"]}, {"nl": "Sets the dest file name.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the executionEndDateTime property.", "Heuristic": []}, {"nl": "Sets up the handler before a test runs.", "Heuristic": []}, {"nl": "Creates a matcher of  {@link Comparable} object that matches when the examined object isequal to the specified value, as reported by the compareTo method of the examined object. For example: assertThat(1, comparesEqualTo(1))", "Heuristic": ["H1"]}, {"nl": "replace coordinates with new ones calls: none called by: centroid, codebook", "Heuristic": ["H1"]}, {"nl": "Get the content type of the message.", "Heuristic": []}, {"nl": "Returns the start offset in the scroll.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.ZDAParser#setLocalZoneMinutes()}.", "Heuristic": ["H1"]}, {"nl": "Returns an arry view of this buffer's content.", "Heuristic": ["H1"]}, {"nl": "Create type information for a Field.", "Heuristic": []}, {"nl": "Notify users by email of something.", "Heuristic": []}, {"nl": "Put data into the internal JSONObject", "Heuristic": []}, {"nl": "Methode permettant de calculer C, representant la fraction de degres perdus par rayonnement", "Heuristic": ["H1"]}, {"nl": "Returns the path from the root node to this node.", "Heuristic": []}, {"nl": "Positions the index before the first index record having the specified search key. The method hashes the search key to determine the bucket, and then opens a table scan on the file corresponding to the bucket. The table scan for the previous bucket (if any) is closed.", "Heuristic": []}, {"nl": "value.", "Heuristic": ["H1", "H2"]}, {"nl": "Returns the raw packing format string.", "Heuristic": []}, {"nl": "Replace the current fragment with specified one in specified container", "Heuristic": []}, {"nl": "set 'ReplyTo' JMS header", "Heuristic": ["H1"]}, {"nl": "Accessor for port-mapped server socket. If there are not cached sockets around, this will create a new one and return it on demand.", "Heuristic": ["H1"]}, {"nl": "Removes all vertices and all edges from the graph.", "Heuristic": []}, {"nl": "Deletes an entry from this pool. Only entries that are currently free in this pool can be deleted. Allocated entries can not be deleted.", "Heuristic": []}, {"nl": "Add an instance of  {@code AppInstanceStatus} to build the status forthe app. This will be invoked once per individual app instance.", "Heuristic": ["H1"]}, {"nl": "Encapsulates the logic related to naming the resource bundle with the given relative name for a class.", "Heuristic": []}, {"nl": "When in a sequence of characters that can be copied directly, interrupts the sequence and copies it to the output buffer.", "Heuristic": []}, {"nl": "Appends a new block to the end of the specified file and returns a reference to it. This method first obtains an XLock on the \"end of the file\", before performing the append.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the faultCode property.", "Heuristic": []}, {"nl": "Set the parent of this node", "Heuristic": []}, {"nl": "Removes a ticket by UUID from the database.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Whether to initialize shuffle FileDescriptor lazily or not. If true, file descriptors are created only when data is going to be transferred. This can reduce the number of open files.", "Heuristic": []}, {"nl": "Tests that array read methods read the correct data, for the last block of the file.", "Heuristic": []}, {"nl": "Sets the redirect URI", "Heuristic": []}, {"nl": " Returns the value as a plain string denominated in BTC. The result is unformatted with no trailing zeroes. For instance, a value of 150000 satoshis gives an output string of \"0.0015\" BTC ", "Heuristic": ["H1"]}, {"nl": "Run a group of actions (modules). Usually this group contains the actions provided by the XML coming from control panel.", "Heuristic": []}, {"nl": "Get the specified property for this object.", "Heuristic": []}, {"nl": "If there is no explicit callback, but we still need to call the Facebook component, because it's going to update some state, e.g., login, like. Then we should register a static callback that can still handle the response.", "Heuristic": []}, {"nl": "Returning the identity persistence manager instance : singleton pattern", "Heuristic": []}, {"nl": "Tests the  {@link RPCBlockReadRequest#validate()} method.", "Heuristic": ["H1"]}, {"nl": "Sets the timeout in milliseconds used when retrieving a {@link org.apache.ogt.http.conn.ManagedClientConnection} from the{@link org.apache.ogt.http.conn.ClientConnectionManager}.", "Heuristic": ["H1"]}, {"nl": "Default value. Use the convenience method from Context that takes care of calling toString, etc.", "Heuristic": []}, {"nl": "Write the 8-bit length of the given data followed by the data itself", "Heuristic": []}, {"nl": "Create an instance of  {@link BrowseOffersResponse.Return.OfferData.Geo }", "Heuristic": ["H1"]}, {"nl": "Gets the sender or destination IP address of this datagram packet.", "Heuristic": ["H1"]}, {"nl": "Number of set bits (1s)", "Heuristic": []}, {"nl": "Gets the bean.", "Heuristic": []}, {"nl": "Save property settings to the property file", "Heuristic": []}, {"nl": "Load the configuration from a specified url.", "Heuristic": ["H1"]}, {"nl": "Sets a plugin active state", "Heuristic": []}, {"nl": "Returns the access token extractor.", "Heuristic": []}, {"nl": "Defines all numeric properties by returning true.", "Heuristic": []}, {"nl": "Revert the mask removal done while reading the code words. The bit matrix should revert to its original state.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns, for a given target statement and value all associated source values, and for each the associated edge function. The return value is a mapping from source value to function.", "Heuristic": []}, {"nl": "Returns the ratio of cache requests which were misses. This is defined as {@code missCount / requestCount}, or  {@code 0.0} when {@code requestCount == 0}. Note that {@code hitRate + missRate =~ 1.0}. Cache misses include all requests which weren't cache hits, including requests which resulted in either successful or failed loading attempts, and requests which waited for other threads to finish loading. It is thus the case that {@code missCount &gt;= loadSuccessCount + loadExceptionCount}. Multiple concurrent misses for the same key will result in a single load operation.", "Heuristic": ["H1"]}, {"nl": "Gets the total count.", "Heuristic": []}, {"nl": "Gets the Case IDs.", "Heuristic": ["H1"]}, {"nl": "Get the state's AST.", "Heuristic": []}, {"nl": "Test of getDuration method, of class LogEntryRequest.", "Heuristic": []}, {"nl": "Returns the type of transducer.", "Heuristic": []}, {"nl": "Return the time in ms taken to run the pass, excluding the time in spawned passes", "Heuristic": []}, {"nl": "Adds the path attribute value from the  {@link HttpServletRequest}.", "Heuristic": ["H1"]}, {"nl": "Utility method to read Parameter from the list", "Heuristic": []}, {"nl": "If the processing of the incoming message proceeds normally, this method is called with the response context values and the resulting objects. The default behavior just stores the objects and calls notifyAll to wake up threads waiting for the response.", "Heuristic": []}, {"nl": "get succeeded average elapsed.", "Heuristic": ["H1"]}, {"nl": "Sets the id.", "Heuristic": ["H1"]}, {"nl": "Add an alias/password pair to the callback mechanism.", "Heuristic": []}, {"nl": "write saved parameters to disk", "Heuristic": ["H1"]}, {"nl": "Assert that an array has elements; that is, it must not be {@code null} and must have at least one element.Assert.notEmpty(array, \"The array must have elements\");", "Heuristic": ["H1"]}, {"nl": "Set the triple state of A.", "Heuristic": []}, {"nl": "Returns the rank of the decomposed matrix.", "Heuristic": []}, {"nl": "Factory method to create a  {@link KeyValuePartitionReader} given the {@link AlluxioURI} of akey-value partition.", "Heuristic": ["H1"]}, {"nl": "Gets the payloads for the children of the given node.", "Heuristic": []}, {"nl": "Saves parameters for startActivityForResult().", "Heuristic": []}, {"nl": "Returns a reference to the disk block that the buffer is pinned to.", "Heuristic": []}, {"nl": "Check whether the user has added the settings.", "Heuristic": []}, {"nl": "Returns a string that is used to start a graph.", "Heuristic": []}, {"nl": "Performs a matrix inversion operations that takes advantage of the special properties of a covariance matrix.", "Heuristic": []}, {"nl": "Gets the src unique file name.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Template delegator for testNode() method. OVERRIDE to add custom logic", "Heuristic": ["H1"]}, {"nl": "Concatenates two SQL WHERE clauses, handling empty or null values.", "Heuristic": []}, {"nl": "Tests if the directory is garbage directory.", "Heuristic": []}, {"nl": "Hash an integer value.", "Heuristic": []}, {"nl": "Returns a  {@link Function} that invokes {@link #escape(String)} on this escaper.", "Heuristic": ["H1"]}, {"nl": "Go to previous page in history.  (We manage our own history)", "Heuristic": []}, {"nl": "Converts the byte array of ASCII characters to a string. This method is to be used when decoding content of HTTP elements (such as response headers)", "Heuristic": []}, {"nl": "Getter for property 'currentScenario'.", "Heuristic": []}, {"nl": "Generates an localized String with arguments. The localized string is a pattern to be processed by {@link MessageFormat}.", "Heuristic": ["H1"]}, {"nl": "Compare two cancer studies.", "Heuristic": []}, {"nl": "Searches the database for a ticket with the specified UUID", "Heuristic": []}, {"nl": "Tests the  {@link BlockMetadataManagerView#getTierViewsBelow(String)} method.", "Heuristic": ["H1"]}, {"nl": "Called to reset the separator before staring to look for a new token.", "Heuristic": []}, {"nl": "Determine if a collection of assertions contains a given assertion, using the equal method from the Assertion interface.", "Heuristic": []}, {"nl": "Create an instance of  {@link Role }", "Heuristic": ["H1"]}, {"nl": "Sets the status.", "Heuristic": []}, {"nl": "Generates a validly padded message", "Heuristic": []}, {"nl": "Asserts that a Unicode escaper escapes the given code point into the expected string.", "Heuristic": []}, {"nl": "Get all the configured domains", "Heuristic": []}, {"nl": "Sets the value of the expires property.", "Heuristic": ["H1"]}, {"nl": "Gets the footer.", "Heuristic": []}, {"nl": "Get the user store manager by domain name", "Heuristic": []}, {"nl": "Sets the bit at the specified index to  {@code true}.", "Heuristic": ["H1"]}, {"nl": "Return the name of this task.", "Heuristic": []}, {"nl": "Retrieve the event type.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Gets an long value out of the object.", "Heuristic": ["H1"]}, {"nl": "As  {@link #writeToFile(BitMatrix,String,File)}, but allows customization of the output.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the x property.", "Heuristic": []}, {"nl": "Add WS-RM namespace declaration to element.", "Heuristic": []}, {"nl": "Get the OutputStream. Please be aware that the implementation MAY use an internal buffer. To make sure that the buffered data is sent over the tunnel, you have to call the flush method of the OutputStream. To signal EOF, please use the close method of the OutputStream.", "Heuristic": []}, {"nl": "Computes the p=2 norm.  If A is a matrix then the induced norm is computed. This implementation is faster, but more prone to buffer overflow or underflow problems.", "Heuristic": []}, {"nl": "Create REBASE-MANUAL-MERGE query.", "Heuristic": []}, {"nl": "See  {@link ListListIteratorTester}", "Heuristic": ["H1"]}, {"nl": "Gets the type of the object for the LikeView.", "Heuristic": []}, {"nl": "Gets the value of the ids property.  This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a set method for the ids property.  For example, to add a new item, do as follows:  getIds().add(newItem);   Objects of the following type(s) are allowed in the list {@link String }", "Heuristic": ["H1"]}, {"nl": "Generate a unique ID - that is friendly for a URL or file system", "Heuristic": []}, {"nl": "Returns the stored player's attacker.", "Heuristic": []}, {"nl": "Returns the ID of the current record.", "Heuristic": []}, {"nl": "Retrieves the CSS located at the given URI.  It's assumed the URI does point to a CSS file--the URI will be accessed (using java.io or java.net), opened, read and then passed into the CSS parser. The result is packed up into an CSSResource for later consumption.", "Heuristic": []}, {"nl": "Set the unattached TokenReference", "Heuristic": []}, {"nl": "Get the issuer of this SAML realm", "Heuristic": []}, {"nl": "Creates JSON from the specified object.", "Heuristic": []}, {"nl": "Gets the value of the given member as a list of JWS Algorithms, null if it doesn't exist", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Set the List of AttributeStatementProviders.", "Heuristic": []}, {"nl": "Returns all constraints in which the specified variable participates.", "Heuristic": []}, {"nl": " Append a hashCode for a char array. ", "Heuristic": []}, {"nl": "Ensures that the log records corresponding to the specified LSN has been written to disk. All earlier log records will also be written to disk.", "Heuristic": []}, {"nl": "TODO implement validation", "Heuristic": ["H1"]}, {"nl": "Get the Msg value.", "Heuristic": []}, {"nl": "Returns a cached sheet by its key; null if no entry for that key.", "Heuristic": []}, {"nl": "Efficiently looks up items with a  {@link RubySymbol Symbol} key", "Heuristic": ["H1"]}, {"nl": "Extract the metadata only from the input stream. Depending on media type validation, the detector could be run against input stream in order to ensure that parser supports this type of content.", "Heuristic": []}, {"nl": "Calculate the mid point of the first two fingers", "Heuristic": ["H1"]}, {"nl": "Tests that writing to a closed stream throws an exception.", "Heuristic": []}, {"nl": "Set the resolver to use for document() and xsl:include/import The resolver will not be attached to the factory.", "Heuristic": ["H1"]}, {"nl": "Calculate the weight of this node. The function distinguishes between note-nodes and standard-nodes, because a note should be positioned to the right of its first related node, if it exists. Therefor the weight is a function of the weight of the related node. For standard-nodes the weight is a function of up-/downlinks, column and uplink factor.", "Heuristic": ["H1"]}, {"nl": "Set the path of this cookie", "Heuristic": []}, {"nl": "The settings activity name.  Statically set from  {@link AccessibilityService#SERVICE_META_DATA meta-data}. ", "Heuristic": ["H1"]}, {"nl": "Given a  {@code String} path, returns an equivalent Alluxio path.", "Heuristic": ["H1"]}, {"nl": "Sets a specific location in the bar", "Heuristic": []}, {"nl": " Performs a rank one update on matrix A using vectors u and w.  The results are stored in B.  B = A + &gamma; u wT   This is called a rank1 update because the matrix u wT has a rank of 1.  Both A and B can be the same matrix instance, but there is a special rank1Update for that. ", "Heuristic": ["H1"]}, {"nl": "Set the StatusMessage for Status of Response", "Heuristic": []}, {"nl": "Gets the opened output stream for this open file entry. The value returned can be  {@code null}if the file is not open for writing.", "Heuristic": ["H1"]}, {"nl": "Set a flag indicating whether to print type type in a local declaration. This is used when pretty-printing for loops.", "Heuristic": ["H1"]}, {"nl": "Gets the value of the workflowImplName property.", "Heuristic": ["H1"]}, {"nl": "Returns the scale. 1 / 100 000 means one cm on the screen corresponds to 1 km in real world.", "Heuristic": []}, {"nl": "Obtains a single HTTP Header value, or null if undefined", "Heuristic": []}, {"nl": "Return a value indicating if the groups are empty and should be represented by an empty-string {@link #toString()}", "Heuristic": []}, {"nl": "Gets all of the headers contained within this group.", "Heuristic": ["H1"]}, {"nl": "Returns the boolean value for the specified key. If the key does not exist or the value for the key can not be interpreted as a boolean, the defaultValue is returned.", "Heuristic": []}, {"nl": "Initialize global controller that will be used for all security-related operations. The global controller takes precedence over already installed  {@link Context}-specific controllers and cause any subsequent call to {@link Context#setSecurityController(SecurityController)}to throw an exception.  The method can only be called once.", "Heuristic": ["H1"]}, {"nl": "Return the public interface of the service.", "Heuristic": []}, {"nl": "Construct a new  {@link java.util.Set} that is the intersectionof the given sets.", "Heuristic": ["H1"]}, {"nl": "Removes a listener from the listener list.", "Heuristic": []}, {"nl": "Optional.", "Heuristic": ["H2"]}, {"nl": "Visit directory in post-order fashion.", "Heuristic": []}, {"nl": "The hash of the transaction which holds this output", "Heuristic": []}, {"nl": "Returns fully qualified name of the enumeration type.", "Heuristic": []}, {"nl": "Unloads the Atlas with the texture regions from memory and deletes the temporary directory.", "Heuristic": []}, {"nl": "Convert String to Array of Strings", "Heuristic": []}, {"nl": "Returns the total of all counts.", "Heuristic": []}, {"nl": "get path of big icon", "Heuristic": ["H1"]}, {"nl": "Create an instance of  {@link GetOfferDetailsResponse.Return.DetailOfferData.OfferMedia }", "Heuristic": ["H1"]}, {"nl": "Rolls back the current transaction. Undoes any modified values, flushes those buffers, writes and flushes a rollback record to the log, releases all locks, and unpins any pinned buffers.", "Heuristic": []}, {"nl": "Gets a Builder configured as this object.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.MWVParser#setSpeedUnit(net.sf.marineapi.nmea.util.Units)}.", "Heuristic": ["H1"]}, {"nl": "Returns a  {@link PrintStream} for stdout to the debugger's internalConsole window.", "Heuristic": ["H1"]}, {"nl": "Flushes and closes the specified stream.", "Heuristic": []}, {"nl": "Builds the path for an open arc based on a PolylineOptions.", "Heuristic": ["H1"]}, {"nl": "Generating full name (standard MSMQ full path which is listen to the MSMQ service)", "Heuristic": ["H1"]}, {"nl": "Set the referenced revision label in A.", "Heuristic": []}, {"nl": "Get group id by name.", "Heuristic": ["H1"]}, {"nl": "Determines the number of error correction codewords for a specified error correction level.", "Heuristic": ["H1"]}, {"nl": "Test for setLatitude()", "Heuristic": []}, {"nl": "Create an instance of  {@link JAXBElement }{@code }}", "Heuristic": ["H1"]}, {"nl": "Creates an id for a file based on the given id of the container.", "Heuristic": ["H1"]}, {"nl": "If in debug modus, print the names of the rules.", "Heuristic": ["H1"]}, {"nl": "Return the error code for an action.", "Heuristic": []}, {"nl": "Given a block store, looks up the previous block in this chain. Convenience method for doing store.get(this.getHeader().getPrevBlockHash()).", "Heuristic": ["H1"]}, {"nl": "Tell the parse state that a classifier is an inner classifier to the current parsed classifier.", "Heuristic": []}, {"nl": "Deserialize only a double field (addressed by recursively using field id) from a byte record.", "Heuristic": ["H1"]}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.HDMParser#setHeading(double)}.", "Heuristic": ["H1"]}, {"nl": "Converts a byte array to string.", "Heuristic": []}, {"nl": "Convert a JSONArray into a nodes list.", "Heuristic": []}, {"nl": "Get time as milliseconds since beginning of day.", "Heuristic": []}, {"nl": "Called when the host view is attempting to determine if an item's position has changed. Returns  {@link #POSITION_UNCHANGED} if the position of the givenitem has not changed or  {@link #POSITION_NONE} if the item is no longer presentin the adapter. The default implementation assumes that items will never change position and always returns  {@link #POSITION_UNCHANGED}.", "Heuristic": ["H1"]}, {"nl": "Gets the offset of the message's data in the block. Make sure the message is ready before calling this method.", "Heuristic": []}, {"nl": "Stops the video stream", "Heuristic": []}, {"nl": "Gets the number of records contained in the event.", "Heuristic": []}, {"nl": "Provide the end to the AllocationPool's Builder.", "Heuristic": []}, {"nl": "read a line terminated by a new line '\\n' character", "Heuristic": ["H1"]}, {"nl": "See  {@link FloatBuffer#put(float)}", "Heuristic": ["H1"]}, {"nl": "Induces the layer of this perceptron from the specified set of examples", "Heuristic": []}, {"nl": "Closes the leaf page.", "Heuristic": []}, {"nl": "Sets the value of the state property.", "Heuristic": []}, {"nl": "Gets the batch id.", "Heuristic": ["H1"]}, {"nl": "Flag indicating whether to print a ';' after certain statements. This is used when pretty-printing for loops.", "Heuristic": []}, {"nl": "Override the specified key with the specified value.", "Heuristic": []}, {"nl": "write string.", "Heuristic": ["H1", "H2"]}, {"nl": "Returns a supplier which caches the instance retrieved during the first call to  {@code get()}and returns that value on subsequent calls to  {@code get()}. See: memoization The returned supplier is thread-safe. The delegate's  {@code get()} method will be invoked atmost once. The supplier's serialized form does not contain the cached value, which will be recalculated when  {@code get()} is called on the reserialized instance.If  {@code delegate} is an instance created by an earlier call to {@code memoize}, it is returned directly.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Test of getTsSend method, of class LogEntryRequest.", "Heuristic": []}, {"nl": "Factory method to create a  {@link KeyValuePartitionReader} given the block id of a key-valuepartition.", "Heuristic": ["H1"]}, {"nl": "Returns the equivalent  {@code java.util.Optional} value to this optional.Unfortunately, the method reference  {@code Optional::toJavaUtil} will not work, because itcould refer to either the static or instance version of this method. Write out the lambda expression  {@code o -> o.toJavaUtil()} instead.", "Heuristic": ["H1"]}, {"nl": "Gets Next Line of Input.  Filters out Empty Lines and Comments.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.RMBParser#getCrossTrackError()}.", "Heuristic": ["H1"]}, {"nl": "Creates a language with no icon.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.util.Date#Date(String)}.", "Heuristic": ["H1"]}, {"nl": "Verifies the Response message in OpenID Dumb Mode", "Heuristic": []}, {"nl": "Registers the given object for URIs matching the given pattern.", "Heuristic": []}, {"nl": "Called when the a change in the shown pages has been completed.  At this point you must ensure that all of the pages have actually been added or removed from the container as appropriate.", "Heuristic": ["H1"]}, {"nl": "Gets the class attribute of the StandardAttributeResolver object", "Heuristic": []}, {"nl": "Returns the number of distinct values for the specified field.  If the field is a grouping field, then the number of distinct values is the same as in the underlying query. If the field is an aggregate field, then we assume that all values are distinct.", "Heuristic": []}, {"nl": "Mithilfe des Randomizers werden die Diamanten auf dem Spielfeld platziert. x, y Position und der Wert werden jeweils vom Randomizer zufaellig generiert, die Anzahl wird beim Aufruf vorgegeben.", "Heuristic": ["H1"]}, {"nl": "Create instances for each rule defined in the ruleset(s) in the configuration. Please note, that the returned instances must not be used by different threads. Each thread must create its own copy of the rules.", "Heuristic": ["H1"]}, {"nl": "Skips over the next data element from the provided input TProtocol object.", "Heuristic": []}, {"nl": "Gets the batch id.", "Heuristic": ["H1"]}, {"nl": "Sets vector to a random value based upon a zero-mean multivariate Gaussian distribution with covariance 'cov'.  If repeat calls are made to this class, consider using  {@link CovarianceRandomDraw} instead.", "Heuristic": ["H1"]}, {"nl": "Sets the scopes explicitly approved by the end user. If this list is empty then the end user had no way to down-scope.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.TTMParser#setCourse()} .", "Heuristic": ["H1"]}, {"nl": "Gets the minimum encoded size of the given value.", "Heuristic": []}, {"nl": "Return the list of actions started by a signal in an instance.", "Heuristic": []}, {"nl": "Returns the X coordinate of the location in integer precision.", "Heuristic": []}, {"nl": "Set the default lifetime in seconds for issued SAML tokens", "Heuristic": []}, {"nl": "Gets the remote port number of this socket. This value is not meaningful when this instance is wrapped by a  {@code ServerSocket}.", "Heuristic": ["H1"]}, {"nl": "Convert mnemonic word list to seed.", "Heuristic": []}, {"nl": "Tests writing an increasing byte array.", "Heuristic": []}, {"nl": "Required.", "Heuristic": ["H2"]}, {"nl": "Find stations near a given location", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Returns all the headers that were on the origin response.", "Heuristic": []}, {"nl": "Determines whether a specified (US-ASCII) character is a valid hex character:  A..F a..f 0..9 ", "Heuristic": ["H1"]}, {"nl": "Creates a scriptSig that can redeem a pay-to-pubkey output. If given signature is null, incomplete scriptSig will be created with OP_0 instead of signature", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Sets the value of the return property.", "Heuristic": []}, {"nl": "Allow the recoverable field value to be overridden. Used when an override DifferenceListener is used in conjunction with a DetailedDiff.", "Heuristic": []}, {"nl": "Creates a new local Alluxio master with an isolated work directory and port.", "Heuristic": ["H1"]}, {"nl": "Load a profile from a ProfileReference.", "Heuristic": []}, {"nl": "Checking whether the user is avaiable online.", "Heuristic": ["H1"]}, {"nl": "Send buffer size (SO_SNDBUF).", "Heuristic": ["H1"]}, {"nl": "For testing", "Heuristic": ["H2"]}, {"nl": "Deprecated. Please use  {@link AppEventsLogger} instead.", "Heuristic": ["H1"]}, {"nl": "Implements BundleActivator.stop(). Does nothing since the framework will automatically unregister any registered services.", "Heuristic": []}, {"nl": "Extract the content only from the input stream. Depending on media type validation, the detector could be run against input stream in order to ensure that parser supports this type of content.", "Heuristic": []}, {"nl": "Registers a given user ID with SIP proxies so that other people can connect to her.", "Heuristic": []}, {"nl": "Returns the schema of the output table. The schema consists of the group fields, plus one field for each aggregation function.", "Heuristic": []}, {"nl": "Get the STS issuer name", "Heuristic": []}, {"nl": "Sets the src file name.", "Heuristic": []}, {"nl": "Returns the 4 byte header for BIP32 (HD) wallet - private key part.", "Heuristic": []}, {"nl": "Returns the approximate count of elements left in the format. This method does not account for repeat counts or string length encodings - so should be used as a guide only.", "Heuristic": ["H1"]}, {"nl": "The action has been activated. The argument of the method represents the 'real' action sitting in the workbench UI.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Sets the value of the email property.", "Heuristic": []}, {"nl": "Returns the CSS class for the date based on its age from Now.", "Heuristic": []}, {"nl": "Gets the array.", "Heuristic": []}, {"nl": "Get the name of the signal by which the process on the remote side was stopped - if available and applicable. Be careful - not all server implementations return this value.", "Heuristic": []}, {"nl": "Multiples the current scale with the specified factor and adjusts the view so that the objects shown at the specified view focus keep at their position.", "Heuristic": []}, {"nl": "Find index of first occurrence for given number in a sorted array", "Heuristic": []}, {"nl": "Asserts that the message back matches the block response protocols.", "Heuristic": []}, {"nl": "Simply return if the image start with keyword 'this' or 'super'.", "Heuristic": []}, {"nl": "Get Cover Art Archive (MusicBrainz) list of images", "Heuristic": ["H1"]}, {"nl": "Retrieve Workflows", "Heuristic": ["H2"]}, {"nl": "Clear all options consecutively.", "Heuristic": []}, {"nl": "Gets the total elapsed minutes.", "Heuristic": []}, {"nl": "Gets the checks if is update.", "Heuristic": []}, {"nl": "Tests that an exception is thrown when trying to delete a non-existing lineage via the {@link LineageMaster#deleteLineage(long,boolean)} method.", "Heuristic": ["H1"]}, {"nl": "Inform the listener of a group start.", "Heuristic": []}, {"nl": "Gets the checksum.", "Heuristic": []}, {"nl": "Sets the value of the someMeasure property.", "Heuristic": ["H1"]}, {"nl": "Gets the elapsed time.", "Heuristic": []}, {"nl": "checks the children and creates them if neccessary", "Heuristic": ["H1"]}, {"nl": "Determine if this service can handle the requested command.", "Heuristic": []}, {"nl": "Test method for {@link net.sf.marineapi.nmea.parser.MWVParser#setAngle(double)}.", "Heuristic": ["H1"]}, {"nl": "Retrieve the version number of the application.", "Heuristic": []}, {"nl": "Returns the date in ISO 8601 format (yyyy-mm-dd).", "Heuristic": ["H1"]}, {"nl": "Returns the old id of a ref.", "Heuristic": ["H1"]}, {"nl": "Convenience method for ensure a conjunction of probabilistic propositions.", "Heuristic": []}, {"nl": "Access the base URI for this user.", "Heuristic": []}, {"nl": "Clears the decision cache maintained by the PDP.", "Heuristic": []}, {"nl": "Check if resource has expired and delete.", "Heuristic": []}, {"nl": "Returns fully qualified name of the enumeration type.", "Heuristic": []}, {"nl": "Returns the number of key-value mappings that this SparseArray currently stores.", "Heuristic": []}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Create a lexer that performs the substitutions in  {@code subst}.", "Heuristic": ["H1"]}, {"nl": "Returns the Client associated with this token", "Heuristic": []}, {"nl": "Converts a thrift type to a wire type.", "Heuristic": []}, {"nl": "Instructs the WebView to proceed with the authentication with the given credentials.", "Heuristic": []}, {"nl": "Pins the block and keeps track of the buffer internally.", "Heuristic": []}, {"nl": "Instructs the WebView to cancel the authentication request.", "Heuristic": []}, {"nl": "Convert a column vector in Matrix form to a Categorical Distribution.", "Heuristic": []}, {"nl": "Helper for success callbacks that just returns the Status.OK by default", "Heuristic": ["H1"]}, {"nl": "Obtiene el nombre de usuario", "Heuristic": ["H1"]}, {"nl": "floats.", "Heuristic": ["H1", "H2"]}, {"nl": "The raw QH matrix that is stored internally.", "Heuristic": ["H1"]}, {"nl": "Get the number of bytes remaining in the underlying buffer. Returns -1 if this is a non-buffered transport.", "Heuristic": []}, {"nl": "Returns the list of federated gitblit instances that this instance will try to pull.", "Heuristic": ["H1"]}, {"nl": "prints a linked list", "Heuristic": ["H1"]}, {"nl": "Returns the numeric value of a configuration property.", "Heuristic": []}, {"nl": "Factory method to create a new instance of a Class Diagram.", "Heuristic": []}, {"nl": "Starts the internal timer.", "Heuristic": []}, {"nl": "Sets the password.", "Heuristic": []}, {"nl": "A string representation of the current value.", "Heuristic": []}, {"nl": "What the easiest allowable proof of work should be.", "Heuristic": []}, {"nl": "Creates and returns an instance of  {@link SystemUiHider} that isappropriate for this device. The object will be either a {@link SystemUiHiderBase} or {@link SystemUiHiderHoneycomb} depending onthe device.", "Heuristic": ["H1"]}, {"nl": "Get the cache use specified  {@link KeyGenerator}. Create cache if not existed yet.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Converts a thrift type to a wire type.", "Heuristic": []}, {"nl": "Call when the object is released after being pulled. This will begin the \"decay\" phase of the effect. After calling this method the host view should  {@link android.view.View#invalidate()} if this methodreturns true and thereby draw the results accordingly.", "Heuristic": ["H1"]}, {"nl": "Sets the value of the browser property.", "Heuristic": []}, {"nl": "Can be called after all domain information has been collected to reduce storage consumption.", "Heuristic": []}, {"nl": "Return the public interface for the memory locks services", "Heuristic": []}, {"nl": "Sets the scopes request by the client", "Heuristic": []}, {"nl": "Delete the  site by id.", "Heuristic": ["H1"]}, {"nl": "Gets the JUNG Graph.", "Heuristic": []}, {"nl": "Find the attributes or simple/text nodes", "Heuristic": []}, {"nl": "Calls the given  {@link Callable} on the JavaFX Application Thread at some unspecified timein the future, waits for it  {@code long} milliseconds to finish and returns {@code T}, otherwise times out with  {@link TimeoutException}.", "Heuristic": ["H1"]}, {"nl": "Calls a static method on the given class with the given argument. The static method is called on all superclasses of the class to. The call chain starts with the supermost class, eventually leading back to the class supplied as the argument.", "Heuristic": ["H1"]}, {"nl": "Create a callback URL for the current action.", "Heuristic": []}, {"nl": "Acquires an object of type  {@code T} from the pool. This operation is blocking if no resourceis available. Each call of  {@link #acquire()} should be paired with another call of{@link #release(Object)}} after the use of this resource completes to return this resource to the pool.", "Heuristic": ["H1"]}, {"nl": "{@inheritDoc}", "Heuristic": ["H2"]}, {"nl": "Test of getHash method, of class CollisionDJBX33A.", "Heuristic": []}, {"nl": "Sets the feed id.", "Heuristic": ["H1"]}, {"nl": "Gets the Gene.", "Heuristic": []}, {"nl": "Return false if result of Java method, which is instance of String, Number, Boolean and Character, should be used directly as JavaScript primitive type. By default the method returns true to indicate that instances of String, Number, Boolean and Character should be wrapped as any other Java object and scripts can access any Java method available in these objects. Use  {@link #setJavaPrimitiveWrap(boolean)} to change this.", "Heuristic": ["H1"]}, {"nl": "Stops scrolling", "Heuristic": ["H2"]}, {"nl": "Creates an IdentityException instance wrapping the given error message and", "Heuristic": []}]