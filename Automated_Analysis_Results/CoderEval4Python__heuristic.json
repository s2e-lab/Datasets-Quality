[{"nl": {"id": "62e60f43d76274f8a4026e28", "comment": "Convert nanoseconds to a time in fixed format."}, "Heuristic": []}, {"nl": {"id": "62e60f3bd76274f8a4026e10", "comment": "Use the value in timedelta to generate the Structure class."}, "Heuristic": ["H1"]}, {"nl": {"id": "62e60f37d76274f8a4026dfd", "comment": "Use ticks in the Time class to generate the Structure class."}, "Heuristic": []}, {"nl": {"id": "62e60f33d76274f8a4026de9", "comment": "The structure class is generated based on the value length."}, "Heuristic": []}, {"nl": {"id": "62e60ed4d76274f8a4026da0", "comment": "Returns the __keys property of a class as a List"}, "Heuristic": ["H1"]}, {"nl": {"id": "62e60ecfd76274f8a4026d6a", "comment": "Different forms of Bolt protocol handlers are returned based on the value of protocol_version."}, "Heuristic": []}, {"nl": {"id": "62e60e49d76274f8a4026d25", "comment": "Returns a decorator with metadata and timeout attributes."}, "Heuristic": []}, {"nl": {"id": "62e60e05d76274f8a4026cfd", "comment": "Returns the key in the form of int."}, "Heuristic": []}, {"nl": {"id": "62e60da4d76274f8a4026cf1", "comment": "Returns the key filtered by self.index in the form of a list."}, "Heuristic": ["H1"]}, {"nl": {"id": "62e60b10d76274f8a4026ccd", "comment": "Returns the keys processed by the transform method of the RecordExporter class."}, "Heuristic": []}, {"nl": {"id": "62e6087bd76274f8a4026bfa", "comment": "Remove the last two elements in self.data and return"}, "Heuristic": ["H1"]}, {"nl": {"id": "62e6087ad76274f8a4026bf2", "comment": "Appends a DISCARD message to the output queue.\n\n:param n: number of records to discard, default = -1 (ALL)\n:param qid: query ID to discard for, default = -1 (last query)\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object"}, "Heuristic": ["H1"]}, {"nl": {"id": "62e60879d76274f8a4026bec", "comment": "Appends a BEGIN message to the output queue.\n\n:param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n:param bookmarks: iterable of bookmark values after which this transaction should begin\n:param metadata: custom metadata dictionary to attach to the transaction\n:param timeout: timeout for transaction execution (seconds)\n:param db: name of the database against which to begin the transaction\n    Requires Bolt 4.0+.\n:param imp_user: the user to impersonate\n    Requires Bolt 4.4+\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object\n:return: Response object"}, "Heuristic": []}, {"nl": {"id": "62e60723d76274f8a4026b75", "comment": "Round a floating-point number"}, "Heuristic": []}, {"nl": {"id": "62e60707d76274f8a4026b69", "comment": "Dynamically Generating Point Class"}, "Heuristic": []}, {"nl": {"id": "62e5dc9ed76274f8a4026b5b", "comment": "Return a decorator function for deprecating functions and methods."}, "Heuristic": []}, {"nl": {"id": "62e4fc3c85ea98643089041e", "comment": "Some behaviour of R cannot be configured via env variables, but can\nonly be configured via R options once R has started. These are set here."}, "Heuristic": ["H1"]}, {"nl": {"id": "62e4fbda85ea986430890405", "comment": "Simplified Implementation of Xargs in Linux"}, "Heuristic": ["H1"]}, {"nl": {"id": "62e4fbda85ea986430890403", "comment": "Shuffle a given seq with the given FIXED_RANDOM_SEED"}, "Heuristic": []}, {"nl": {"id": "62e4fb6585ea98643089032b", "comment": "Converts a string concatenated by dot to a tuple consisting of integers."}, "Heuristic": []}, {"nl": {"id": "62e4fb4d85ea9864308902e7", "comment": "Complement the full path to exe and return it in its original form"}, "Heuristic": ["H1"]}, {"nl": {"id": "62b8d27a48ba5a41d1c3f4c6", "comment": "Returns a decorator function that saves the results in the cache"}, "Heuristic": []}, {"nl": {"id": "62b8d24048ba5a41d1c3f49f", "comment": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm with a per-item time-to-live (TTL) value."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b8d23b48ba5a41d1c3f49a", "comment": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Most Recently Used (MRU)\nalgorithm."}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": "62b8d23948ba5a41d1c3f498", "comment": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm."}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": "62b8d23748ba5a41d1c3f496", "comment": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Frequently Used (LFU)\nalgorithm."}, "Heuristic": ["H1", "H2"]}, {"nl": {"id": "62b8d22f48ba5a41d1c3f488", "comment": "Remove the value corresponding to the first inserted key and returns the key and value in tuple format."}, "Heuristic": []}, {"nl": {"id": "62b8d22a48ba5a41d1c3f47e", "comment": "If a key exists in the class, the value corresponding to the key is returned. Otherwise, the value corresponding to the key is set to default."}, "Heuristic": []}, {"nl": {"id": "62b8d22948ba5a41d1c3f47c", "comment": "If a key exists in the class, the value corresponding to the key is returned. Otherwise, default is returned."}, "Heuristic": []}, {"nl": {"id": "62b8d22548ba5a41d1c3f472", "comment": "Returns a decorator function that can call a result in the cache."}, "Heuristic": []}, {"nl": {"id": "62b8c517e0d34b282c18122e", "comment": "Format the exception as a string"}, "Heuristic": []}, {"nl": {"id": "62b8bbbfe0d34b282c181210", "comment": "Writes the data in the text buffer to a file"}, "Heuristic": []}, {"nl": {"id": "62b8bbbfe0d34b282c18120f", "comment": "Load a file toward a text buffer"}, "Heuristic": []}, {"nl": {"id": "62b8bbbce0d34b282c18120d", "comment": "Check whether file_name is an existing file."}, "Heuristic": []}, {"nl": {"id": "62b8b99de0d34b282c1811f8", "comment": "Reset the logging system"}, "Heuristic": []}, {"nl": {"id": "62b8b59feb7e40a82d2d1291", "comment": "Define this to return the implementation in use,\nwithout the 'Py' or 'Fallback' suffix."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b8b590eb7e40a82d2d1275", "comment": "Combine multiple lists in the sequence of occurrence into a list with no duplicate elements."}, "Heuristic": []}, {"nl": {"id": "62b8b58deb7e40a82d2d1269", "comment": "Return the interfaces directly provided by the given object\n\nThe value returned is an `~zope.interface.interfaces.IDeclaration`."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b8b559eb7e40a82d2d11f8", "comment": "Returns all classes without subclasses as a list."}, "Heuristic": []}, {"nl": {"id": "62b8b4b9eb7e40a82d2d1134", "comment": "Returns the name and description of the current class attribute."}, "Heuristic": []}, {"nl": {"id": "62b8b416eb7e40a82d2d1129", "comment": "Return the attribute names of current class."}, "Heuristic": []}, {"nl": {"id": "62b8b3d6eb7e40a82d2d111c", "comment": "Normalize declaration arguments\n\nNormalization arguments might contain Declarions, tuples, or single\ninterfaces.\n\nAnything but individial interfaces or implements specs will be expanded."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b8b3d5eb7e40a82d2d1110", "comment": "If available, return the C optimization module, otherwise a false value."}, "Heuristic": []}, {"nl": {"id": "62b8b3d4eb7e40a82d2d110f", "comment": "Return a true value if we use the C optimizations."}, "Heuristic": []}, {"nl": {"id": "62b8b3d4eb7e40a82d2d110e", "comment": "Return True if get \"PURE_PYTHON\" environ is not none and not 0, else return False"}, "Heuristic": ["H1"]}, {"nl": {"id": "62b8b3d4eb7e40a82d2d110d", "comment": "Return a true value if the C optimizations are required."}, "Heuristic": []}, {"nl": {"id": "62b87b989a0c4fa8b80b35ee", "comment": "Current context is reset to an empty dict, bins of the class are reinitialized with the *initial_value* or with *make_bins()*."}, "Heuristic": []}, {"nl": {"id": "62b87b859a0c4fa8b80b35d7", "comment": ".. deprecated:: 0.5 in Lena 0.5 to_csv is not used.\n      Iterables are converted to tables.\n\nConvert graph's points to CSV.\n\n*separator* delimits values, the default is comma.\n\n*header*, if not ``None``, is the first string of the output\n(new line is added automatically).\n\nSince a graph can be multidimensional,\nfor each point first its coordinate is converted to string\n(separated by *separator*), then each part of its value.\n\nTo convert :class:`Graph` to CSV inside a Lena sequence,\nuse :class:`lena.output.ToCSV`."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b87b839a0c4fa8b80b35cb", "comment": "Find all error indexes corresponding to coord_name."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b87b7e9a0c4fa8b80b35bc", "comment": "Update *context* with the properties of this graph.\n\n*context.error* is appended with indices of errors.\nExample subcontext for a graph with fields \"E,t,error_E_low\":\n{\"error\": {\"x_low\": {\"index\": 2}}}.\nNote that error names are called \"x\", \"y\" and \"z\"\n(this corresponds to first three coordinates,\nif they are present), which allows to simplify plotting.\nExisting values are not removed\nfrom *context.value* and its subcontexts.\n\nCalled on \"destruction\" of the graph (for example,\nin :class:`.ToCSV`). By destruction we mean conversion\nto another structure (like text) in the flow.\nThe graph object is not really destroyed in this process."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b87b4f9a0c4fa8b80b3580", "comment": "Calculate the area of the overall graph."}, "Heuristic": []}, {"nl": {"id": "62b87b199a0c4fa8b80b354e", "comment": "Check whether seq can be converted to FillRequestSeq and bool is returned."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b87b099a0c4fa8b80b3538", "comment": "Check whether the obj class has the fill and request attributes."}, "Heuristic": []}, {"nl": {"id": "62b87af99a0c4fa8b80b3524", "comment": "Check whether the obj class has the run method."}, "Heuristic": []}, {"nl": {"id": "62b87af69a0c4fa8b80b351a", "comment": "Check whether the obj class has the fill and compute methods."}, "Heuristic": []}, {"nl": {"id": "62b87af19a0c4fa8b80b34f7", "comment": "Return a dictionary with items from d1 not contained in d2."}, "Heuristic": []}, {"nl": {"id": "62b87af09a0c4fa8b80b34f1", "comment": "Fill histogram at *coord* with the given *weight*.\n\nCoordinates outside the histogram edges are ignored."}, "Heuristic": []}, {"nl": {"id": "62b86aa3b4d922cb0e688d36", "comment": "Check that keys and values in the given labels by validate_key() and validate_value()."}, "Heuristic": []}, {"nl": {"id": "62b86a9eb4d922cb0e688d25", "comment": "Return the regular expressions that are used to validate the name of the Krake resources"}, "Heuristic": ["H1"]}, {"nl": {"id": "62b86a4fb4d922cb0e688cf8", "comment": "Validate the given value against the corresponding regular expression."}, "Heuristic": []}, {"nl": {"id": "62b86a4fb4d922cb0e688cf7", "comment": "Validate the given key against the corresponding regular expression."}, "Heuristic": []}, {"nl": {"id": "62b86a01b4d922cb0e688ccc", "comment": "The values corresponding to different keys in the new dict are generated based on the value type (such as dict and list) in the manifest_dict file. Then new dictionary is returned."}, "Heuristic": []}, {"nl": {"id": "62b869ebb4d922cb0e688cc6", "comment": "Together with :func:``update_last_applied_manifest_dict_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (list): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (list): partial ``observer_schema``\n    response (list): partial response from the Kubernetes API.\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present"}, "Heuristic": ["H1"]}, {"nl": {"id": "62b869eab4d922cb0e688cc5", "comment": "Together with :func:``update_last_applied_manifest_list_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (dict): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (dict): partial ``observer_schema``\n    response (dict): partial response from the Kubernetes API.\n\nRaises:\n    KeyError: If the observed field is not present in the Kubernetes response\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present"}, "Heuristic": ["H1"]}, {"nl": {"id": "62b869eab4d922cb0e688cbf", "comment": "Generate the default observer schema for each Kubernetes resource present in ``spec.manifest`` for which a custom observer schema hasn't been specified."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b43427903eeb48555d3ea5", "comment": "Convert sql using self._converter.convert"}, "Heuristic": ["H1"]}, {"nl": {"id": "62b43428903eeb48555d3eaa", "comment": "Convert sql using self._converter.convert_many"}, "Heuristic": ["H1"]}, {"nl": {"id": "62b45df05108cfac7f2109ce", "comment": "Returns True if OCFL object at path or pyfs root, False otherwise."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b45df15108cfac7f2109dc", "comment": "Return a string with visiting the sorted self.messages list, each visit add prefix and the element in the sorted self.messages list."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b45df15108cfac7f2109dd", "comment": "Return string representation with self.log.status_str, with optional prefix."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b45e135108cfac7f2109f4", "comment": "Return True if identifier is valid. In this base implementation, always return True.  (D)"}, "Heuristic": []}, {"nl": {"id": "62b45e145108cfac7f210a07", "comment": "Validate a given inventory. If extract_spec_version is True then will look at the type value to determine the specification version. In the case that there is no type value or it isn't valid, then other tests will be based on the version given in self.spec_version. (D)"}, "Heuristic": ["H1"]}, {"nl": {"id": "62b45e145108cfac7f210a09", "comment": "Check all digests in manifest that are needed are present and used. Return error() in the class."}, "Heuristic": []}, {"nl": {"id": "62b45e165108cfac7f210a16", "comment": "Check that prior is a valid prior version of the current inventory object. The input variable prior is also expected to be an InventoryValidator object and both self and prior inventories are assumed to have been checked for internal consistency. Return error() in the class."}, "Heuristic": []}, {"nl": {"id": "62b45e165108cfac7f210a17", "comment": "Returns the file paths of the states in the inventory in the dict type."}, "Heuristic": []}, {"nl": {"id": "62b45e175108cfac7f210a19", "comment": "Validate fixity block in inventory. Check the structure of the fixity block and makes sure that only files listed in the manifest are referenced. Return error() in the class."}, "Heuristic": []}, {"nl": {"id": "62b463153879012d19481498", "comment": "Return the files in given path."}, "Heuristic": []}, {"nl": {"id": "62b463153879012d1948149a", "comment": "Groups files by xmls and returns data in dict format."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b463153879012d1948149b", "comment": "Given a filepath, return true if the basename of the filepath is startswith the given prefix plus \"-\" or the given prefix plus \".\""}, "Heuristic": ["H1"]}, {"nl": {"id": "62b463153879012d1948149c", "comment": "For each file in files, return all files taht match the given prefix"}, "Heuristic": ["H1"]}, {"nl": {"id": "62b463153879012d1948149d", "comment": "Groups files in the given group by using _group_files_by_xml_filename."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b463153879012d1948149f", "comment": "Identify the type of the given file. Return None if the file do not match the given prefix or the type of the file is xml. Return dict with the key of component_id, file_path if the type of the file is \"pdf\", return dict with the key of component_id, file_path, ftype, file_path if the type of the file is not \"pdf\"."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b463153879012d194814a1", "comment": "Assign the filepath invoke by filepath() in the class to \"lang\" in _renditions in the class."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b463163879012d194814a2", "comment": "Assign the filepath invoke by filepath() in the class to \"basename\" in _assets in the class."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b463163879012d194814a4", "comment": "Groups the given zip path by using _group_files_by_xml_filename."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b463163879012d194814a6", "comment": "Return the files in the given zip path."}, "Heuristic": []}, {"nl": {"id": "62b4631b3879012d194814dd", "comment": "Replace \"w:st=\" in content with \"w-st=\"."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b463283879012d1948153d", "comment": "For the given node, returns the first match in the pubdate_xpaths list."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b463303879012d19481579", "comment": "Return the possible values of number and sup from the contents of issue."}, "Heuristic": []}, {"nl": {"id": "62b46740d2f69a53b466171a", "comment": "Return a pretty formatted representation of self. obj = f\"'{self.obj}'\" if isinstance(self.obj, str) else repr(self.obj) return (\" \" * indent) + f\"{self.__class__.__name__}({debug_details}{obj})\""}, "Heuristic": ["H1"]}, {"nl": {"id": "62b46746d2f69a53b4661722", "comment": "Given an `args` sequence of expressions, return a new list of expression applying absorption."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b86707b4d922cb0e688c2a", "comment": "Return a decorator function to add a new handler to the \"hook\" in the registry in the class."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b86729b4d922cb0e688c2f", "comment": "Creates a configuration with some simple parameters, the key parameters contains \"tls\", \"authentication\", \"authorization\", \"etcd\", \"docs\", and \"log\"."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b8a4a4755ee91dce50a3d2", "comment": "Given a timezone datetime in a given timezone, calculates a timezone datetime in a new timezone."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b8982f755ee91dce50a241", "comment": "Normalize all units of time to integers."}, "Heuristic": []}, {"nl": {"id": "62b89640755ee91dce50a114", "comment": "Change unicode output into bytestrings in Python 2"}, "Heuristic": ["H1"]}, {"nl": {"id": "62b87d24d292efb640a55670", "comment": "Obtains the version information. If the version information cannot be obtained, the default value is returned."}, "Heuristic": []}, {"nl": {"id": "62b87d24d292efb640a5566f", "comment": "Input pieces and a style, render the pieces to the corresponding style."}, "Heuristic": []}, {"nl": {"id": "62b87d24d292efb640a5566d", "comment": "Return \".\" If the closet-tag of the pieces contains \"+\", otherwise, return \"+\"."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b87d23d292efb640a5566b", "comment": "Call the given command(s)."}, "Heuristic": []}, {"nl": {"id": "62b87d23d292efb640a55668", "comment": "Return a new VersioneerConfig() and set various attribute of it."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b87d23d292efb640a55667", "comment": "Create decorator to mark a method as the handler of a object"}, "Heuristic": ["H1"]}, {"nl": {"id": "62b45e945108cfac7f210a4a", "comment": "Validate storage root hierarchy.\n\nReturns:\n    num_objects - number of objects checked\n    good_objects - number of objects checked that were found to be valid"}, "Heuristic": ["H1"]}, {"nl": {"id": "62b45e515108cfac7f210a3c", "comment": "Create and initialize a new OCFL storage root."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b45e2eb89c9fd354170232", "comment": "Given next version identifier following existing pattern"}, "Heuristic": []}, {"nl": {"id": "62b45e23e0d4551b0392c90a", "comment": "Each version SHOULD have an inventory up to that point.\n\nAlso keep a record of any content digests different from those in the root inventory\nso that we can also check them when validating the content.\n\nversion_dirs is an array of version directory names and is assumed to be in\nversion sequence (1, 2, 3...)."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b45e21e0d4551b0392c8ed", "comment": "Return a string indicating the type of thing at the given path"}, "Heuristic": []}, {"nl": {"id": "62b45b396decaeff903e1001", "comment": "Amend the Bugzilla params"}, "Heuristic": ["H1"]}, {"nl": {"id": "62b4567ed7d32e5b55cc83d9", "comment": "Merge any node values corresponding to duplicate keys and return the result. If there are colliding keys with non-MappingNode values, the last of the values remains."}, "Heuristic": []}, {"nl": {"id": "62b4567ad7d32e5b55cc83af", "comment": "Given command-line arguments with which this script was invoked, parse the arguments and return  them as an ArgumentParser instance"}, "Heuristic": ["H1"]}, {"nl": {"id": "62b45679d7d32e5b55cc83a9", "comment": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b45665d7d32e5b55cc8365", "comment": "Parses parameters and returns them as dict maps"}, "Heuristic": []}, {"nl": {"id": "62b45665d7d32e5b55cc8364", "comment": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser)."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b45665d7d32e5b55cc8363", "comment": "Build a parser and its subparsers and return them as a tuple."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b438ba66fea644fe22cca2", "comment": "merge any node values corresponding to duplicate keys and return the result. If there are colliding keys with non-MappingNode values, the last of the values remains."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b438b666fea644fe22cc78", "comment": "Given command-line arguments with which this script was invoked, parse the arguments and return  them as an ArgumentParser instance"}, "Heuristic": ["H1"]}, {"nl": {"id": "62b438b666fea644fe22cc72", "comment": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b438b566fea644fe22cc70", "comment": "Produce the borgmatic command by introspecting borgmatic's command-line argument parsers."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b438a266fea644fe22cc2e", "comment": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b438a266fea644fe22cc2d", "comment": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser)."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b438a266fea644fe22cc2c", "comment": "Build a top-level parser and its subparsers and return them as a tuple."}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4982e6aefcf4aabbd5f", "comment": "Return every response with the length of max_results\n    Args:\n    response (list): WAPI response.\n    max_results (int): Maximum number of objects to be returned in one page.\n    Returns:\n        Generator object with WAPI response split page by page."}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4982e6aefcf4aabbd60", "comment": "Convert human readable file size to bytes\n\n    Args:\n            size: str, a string representing a human readable file size (eg: '500K')\n    Returns:\n            int: file size in bytes"}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4982e6aefcf4aabbd61", "comment": "Sum values with the same key in the dictionaries. And return a new dictionary.\n    Example:\n        given two dictionaries: dict1: {'a': 1, 'b': 2}, dict2: {'a': 5, 'b': 0}\n        return a dictionary: dic:{'a': 6, 'b': 2}\n    Returns: dict"}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4982e6aefcf4aabbd62", "comment": "Replace the value in url with the value in url_args\n    If url_args has a value, iterate over the keys and values from url_args.\n    Then replace the keys of the first parameter with values.\n    Returns: the modified url."}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4982e6aefcf4aabbd63", "comment": "Check if a string represents a None value.\n    Returns:\n        Return True if the type of val is string and the lowercase of val is equal to 'none', otherwise return False"}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4982e6aefcf4aabbd65", "comment": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated string.\n    Args:\n        script: argparse.ArgumentParser instance\n\n    Returns:\n        argument flags in a space-separated string"}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4982e6aefcf4aabbd66", "comment": "Check if a file or directory has already been processed.\n\n    To prevent recursion, expand the path name to an absolution path\n    call this function with a set that will store all the entries and\n    the entry to test. If the entry is already in the set, report the issue\n    and return ``True``. Otherwise, add the entry to the set and return\n    ``False`` to allow the path to be processed.\n\n    Args:\n        processed: Set to store processed pathnames\n        path_name: Path to a directory or file\n        verbose: True if verbose output is requested\n\n    Returns:\n        True if it's already in the set. False if not."}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4982e6aefcf4aabbd67", "comment": "Get 3 points for each vertex of the polygon.\n    This will include the vertex and the 2 points on both sides of the vertex\n    If the subscript is out of bounds, take the value of index as 0\n    Args:\n        vertices: vertices to be converted\n\n    Returns:\n        A list where the elements of vertices represented by tuple"}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4982e6aefcf4aabbd68", "comment": "Convert a number to a string, using the given alphabet.\n    The number represents a short uuid.\n    The output has the most significant digit first.\n    @param number: Int value\n    @param alphabet : List with letters\n    @param padding : Optional with int value\n    @return  string value corresponded to int"}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4982e6aefcf4aabbd69", "comment": "Replace the value of flow_params[register_number] with flow_params[register_value] and delete flow_params[register_value]"}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4982e6aefcf4aabbd6a", "comment": "Replaces all values of '.' to arg from the given string\n    Args:\n        value: old string\n        arg: new string to replace '.'\n    Returns:\n        str, the replaced string"}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4982e6aefcf4aabbd6b", "comment": "Return all subclasses of a class, recursively"}, "Heuristic": []}, {"nl": {"id": "62ece4982e6aefcf4aabbd6d", "comment": "Convert a string to a number, using the given alphabet.\n    :param string: a string consist of the letters in alphabet\n    :param alphabet: list of letters\n    :return: int, the corresponding number of the given string using the given transition rule."}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4982e6aefcf4aabbd6f", "comment": "Given an url and a destination path, retrieve and extract .tar.gz archive which contains 'desc' file for each package\n\n        Args:\n            url: url of the .tar.gz archive to download\n            destination_path: the path on disk where to extract archive\n        Returns:\n                path where the archive is extracted to"}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4982e6aefcf4aabbd70", "comment": "Checks if the os is macOS\n\n    :return: bool, True is macOS, otherwise False."}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4982e6aefcf4aabbd71", "comment": "Convert *.cpp keys to regex keys.\nGiven a dict where the keys are all filenames with wildcards,\nconvert only the keys into equivalent regexes and leave the values intact.\n\nArgs:\n    item: dict to convert\nReturns:\n    dict with keys converted to regexes"}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4982e6aefcf4aabbd72", "comment": "Remove quote from the given name with regular expression.\n    Args:\n        name: input name\n    Returns:\n        name after removal"}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4982e6aefcf4aabbd73", "comment": "Split the input str under given platform, return the splitting result\n    If platform equals 'this', auto-detect current platform.\n    If platform equals 1, use POSIX style.\n    If platform equals 0, use Windows/CMD style.\n    Args:\n        s: input str\n        platform: 'this' = auto from current platform; 1 = POSIX; 0 = Windows/CMD\n    Returns:\n        a list of splitting str"}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4982e6aefcf4aabbd74", "comment": "Given an existing archive_path, uncompress it.\n    Returns a file repo url which can be used as origin url.\n\n    This does not deal with the case where the archive passed along does not exist.\n    @param archive_path : archive file path\n    @param filename: File name\n    @param tmp_path: Temporary file path\n    @return Repo URL"}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4982e6aefcf4aabbd75", "comment": "Use the git command to obtain the file names\u3002\n    Turn the file names into a list, sort the list for only ignored files\n    return those files as a single string with each filename separated by a comma."}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4982e6aefcf4aabbd76", "comment": "Check if the type of the given filename is 'doxyfile'\n\n    Args:\n        filename: filename to be check\n    Returns:\n        Return True if the type of the given filename in lower case is 'doxyfile'"}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4982e6aefcf4aabbd77", "comment": "Given a frequency string with a number and a unit of time, return a corresponding\n     datetime.timedelta instance.\n     If the frequency is None or \"always\", return None.\n     Raise ValueError if the given frequency cannot be parsed.\n     For instance, given \"3 timeunit\", return datetime.timedelta(timeunit=3)\n\n     @param frequency :  A frequency string \"number timeunit\"\n\n    @return str, the corresponding datetime"}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4992e6aefcf4aabbd78", "comment": "Checks if the host is the localhost,\n    the localhost include local IP, user name, local domain name, `localhost` and `127.0.0.1`\n\n    Args:\n        host: The hostname or ip\n\n    Returns:\n        True if the host is the localhost else False"}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4992e6aefcf4aabbd79", "comment": "Given a sequence of path, transform all path into glob patterns. Pass through existing patterns untouched.\n\n    Args:\n        find_paths: sequence of path\n    Returns:\n        tuple of transformed path"}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4992e6aefcf4aabbd7a", "comment": "Check whether the current program is run in a Windows gitbash terminal\n\n    Returns:\n            boolean, True if gitbash else False"}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4992e6aefcf4aabbd7b", "comment": "Given a rendered config YAML, write it out to target file.\n    But if the file already exists and overwrite is False,\n    abort before writing anything.\n    If the file does not exist, create it.\n    Write to the file otherwise.\n\n    Returns: None"}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4992e6aefcf4aabbd7c", "comment": "Convert a script to one line command with the given seperator.\n\n        Args:\n                script: str\n                separator: str\n        Returns:\n                str, the one-line command."}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4992e6aefcf4aabbd7d", "comment": "Run a function in a sub-process\n\n    Args:\n            func: function, the function to be run. It must be in a module that is importable.\n            *args: str. Any additional command line arguments to be passed in\n                        the first argument to ``subprocess.run``.\n            extra_env: dict[str, str]. Any additional environment variables to be set for the subprocess.\n    Returns:\n            CompletedProcess instance"}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4992e6aefcf4aabbd7e", "comment": "Get the value from environment given a matcher containing a name and an optional default value in its group dict.\n    If the variable is not defined in environment and no default value is provided, an Error is raised."}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4992e6aefcf4aabbd7f", "comment": "Parse an image href into composite parts import urllib.\n\n    :param image_href: href of an image\n    :returns: a tuple of the form (image_id, netloc, use_ssl)\n    :raises ValueError:"}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4992e6aefcf4aabbd80", "comment": "If input list is None, return []\n    Iterate over a string list and remove trailing os seperator characters.\n    Each string is tested if its length is greater than one and if the last\n    character is the pathname seperator.\n    Returns:\n    A list after removing trailing os seperator characters."}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4992e6aefcf4aabbd82", "comment": "Convert a string to a regex pattern object\n\n    Args:\n            pattern: str or regex pattern object\n            strip: boolean, whether the spaces in the start/end will be stripped\n    Returns:\n            regex pattern object"}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4992e6aefcf4aabbd83", "comment": "A list of command is given. Run the given command(s) with the given arguments use a subprocess. Return the running result (stdout and returncode)"}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4992e6aefcf4aabbd84", "comment": "Test if IPv4 address or not.\n\n   Returns: Boolean, True if target is IPv4 address, else False."}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4992e6aefcf4aabbd85", "comment": " Find the roots in some sort of transitive hierarchy.\n\n    find_roots(graph, rdflib.RDFS.subClassOf)\n    will return a set of all roots of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader\n\n    Args:\n        graph: Graph Class Object\n        prop: URIRef Class Object\n        roots: Optional list with set type\n    Return:\n        roots: a set with nodes"}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4992e6aefcf4aabbd86", "comment": "Given a python object and serialize it into a YAML stream\n\n    Args:\n        obj: python object\n\n    Returns:\n        YAML stream"}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4992e6aefcf4aabbd87", "comment": "General purpose application logger. Useful mainly for debugging\n    Args:\n        name: The name of logger\n        logfile: The log file need to save\n        debug: is need to debug\n\n    Returns:\n        Returns an instantiated logger object"}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4992e6aefcf4aabbd88", "comment": "Returns a 0-filled array of the given shape and type.\n\n        Args:\n                shape : tuple\n                    shape of the array to create\n                dtype : `numpy.dtype`\n                    data-type of the array to create\n        Return: array"}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4992e6aefcf4aabbd89", "comment": "Calculate Gaussian centered with u is 0.2 and sigma is 0.1."}, "Heuristic": []}, {"nl": {"id": "62ece4992e6aefcf4aabbd8a", "comment": "Given a sequence of configuration filenames, load and validate each configuration file. If the configuration file\ncannot be read due to insufficient permissions or error parsing configuration file, the error log will\nbe recorded. Otherwise, return the results as a tuple of: dict of configuration filename to corresponding parsed configuration,\nand sequence of logging.LogRecord instances containing any parse errors."}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4992e6aefcf4aabbd8b", "comment": "Force decoding obj with 'utf-8' if it is a numpy.bytes or bytes\n\n    Args:\n        obj: consistency config\n\n    Returns:\n        returns the bytes object corresponding to `obj` in case it is a string using UTF-8 else return `obj`"}, "Heuristic": ["H1"]}, {"nl": {"id": "62e60723d76274f8a4026b76", "comment": "Create a time from ticks (nanoseconds since midnight).\n\n:param ticks: nanoseconds since midnight\n:type ticks: int\n:param tz: optional timezone\n:type tz: datetime.tzinfo\n\n:rtype: Time\n\n:raises ValueError: if ticks is out of bounds\n    (0 <= ticks < 86400000000000)"}, "Heuristic": ["H1"]}, {"nl": {"id": "62e60873d76274f8a4026bd8", "comment": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple"}, "Heuristic": ["H1"]}, {"nl": {"id": "62e60e3bd76274f8a4026d1a", "comment": "Create a Bookmarks object from a list of raw bookmark string values."}, "Heuristic": []}, {"nl": {"id": "62b87b199a0c4fa8b80b354c", "comment": "Return a (sequence, type) pair.\nSequence is derived from *seq*\n(or is *seq*, if that is of a sequence type)."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b87b4f9a0c4fa8b80b3581", "comment": "Compute or set scale (integral of the histogram).\n\nIf *other* is ``None``, return scale of this histogram.\nIf its scale was not computed before,\nit is computed and stored for subsequent use\n(unless explicitly asked to *recompute*).\nNote that after changing (filling) the histogram\none must explicitly recompute the scale\nif it was computed before.\n\nIf a float *other* is provided, rescale self to *other*.\n\nHistograms with scale equal to zero can't be rescaled.\n:exc:`.LenaValueError` is raised if one tries to do that."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b87b519a0c4fa8b80b3583", "comment": "Get or set the scale of the graph.\n\nIf *other* is ``None``, return the scale of this graph.\n\nIf a numeric *other* is provided, rescale to that value.\nIf the graph has unknown or zero scale,\nrescaling that will raise :exc:`~.LenaValueError`.\n\nTo get meaningful results, graph's fields are used.\nOnly the last coordinate is rescaled.\nFor example, if the graph has *x* and *y* coordinates,\nthen *y* will be rescaled, and for a 3-dimensional graph\n*z* will be rescaled.\nAll errors are rescaled together with their coordinate."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b87b869a0c4fa8b80b35e1", "comment": "Convert a :class:`.histogram` to a :class:`.graph`.\n\n*make_value* is a function to set the value of a graph's point.\nBy default it is bin content.\n*make_value* accepts a single value (bin content) without context.\n\nThis option could be used to create graph's error bars.\nFor example, to create a graph with errors\nfrom a histogram where bins contain\na named tuple with fields *mean*, *mean_error* and a context\none could use\n\n>>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)\n\n*get_coordinate* defines what the coordinate\nof a graph point created from a histogram bin will be.\nIt can be \"left\" (default), \"right\" and \"middle\".\n\n*field_names* set field names of the graph. Their number\nmust be the same as the dimension of the result.\nFor a *make_value* above they would be\n*(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n*scale* becomes the graph's scale (unknown by default).\nIf it is ``True``, it uses the histogram scale.\n\n*hist* must contain only numeric bins (without context)\nor *make_value* must remove context when creating a numeric graph.\n\nReturn the resulting graph."}, "Heuristic": []}, {"nl": {"id": "62b8b4baeb7e40a82d2d1136", "comment": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b8b4baeb7e40a82d2d1137", "comment": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b8b4c1eb7e40a82d2d1139", "comment": "Verify that the *candidate* might correctly provide *iface*."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b8b559eb7e40a82d2d11f6", "comment": "Determine metaclass from 1+ bases and optional explicit __metaclass__"}, "Heuristic": ["H1"]}, {"nl": {"id": "62b8d22a48ba5a41d1c3f47d", "comment": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\nIf key is not found, d is returned if given, otherwise KeyError is raised."}, "Heuristic": []}, {"nl": {"id": "62b8d23748ba5a41d1c3f497", "comment": "Remove and return the `(key, value)` pair least frequently used."}, "Heuristic": []}, {"nl": {"id": "62b8d23a48ba5a41d1c3f499", "comment": "Remove and return the `(key, value)` pair least recently used."}, "Heuristic": []}, {"nl": {"id": "62b8d23c48ba5a41d1c3f49b", "comment": "\"Remove and return the (key, value) pair most recently used."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b8d23e48ba5a41d1c3f49e", "comment": "Find, remove and return a random `(key, value)` pair via __choice in the class"}, "Heuristic": ["H1"]}, {"nl": {"id": "62b43425903eeb48555d3ea1", "comment": "Create the in-style parameter regular expression.\n\nReturns the in-style parameter regular expression (:class:`re.Pattern`)."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b43426903eeb48555d3ea2", "comment": "Create the parameter style converter.\n\nReturns the parameter style converter (:class:`._converting._Converter`)."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b8966c755ee91dce50a154", "comment": "Parse an ISO-8601 datetime string into a :class:`datetime.datetime`.\n\nAn ISO-8601 datetime string consists of a date portion, followed\noptionally by a time portion - the date and time portions are separated\nby a single character separator, which is ``T`` in the official\nstandard. Incomplete date formats (such as ``YYYY-MM``) may *not* be\ncombined with a time portion.\n\nSupported date formats are:\n\nCommon:\n\n- ``YYYY``\n- ``YYYY-MM`` or ``YYYYMM``\n- ``YYYY-MM-DD`` or ``YYYYMMDD``\n\nUncommon:\n\n- ``YYYY-Www`` or ``YYYYWww`` - ISO week (day defaults to 0)\n- ``YYYY-Www-D`` or ``YYYYWwwD`` - ISO week and day\n\nThe ISO week and day numbering follows the same logic as\n:func:`datetime.date.isocalendar`.\n\nSupported time formats are:\n\n- ``hh``\n- ``hh:mm`` or ``hhmm``\n- ``hh:mm:ss`` or ``hhmmss``\n- ``hh:mm:ss.ssssss`` (Up to 6 sub-second digits)\n\nMidnight is a special case for `hh`, as the standard supports both\n00:00 and 24:00 as a representation. The decimal separator can be\neither a dot or a comma.\n\n\n.. caution::\n\n    Support for fractional components other than seconds is part of the\n    ISO-8601 standard, but is not currently implemented in this parser.\n\nSupported time zone offset formats are:\n\n- `Z` (UTC)\n- `\u00b1HH:MM`\n- `\u00b1HHMM`\n- `\u00b1HH`\n\nOffsets will be represented as :class:`dateutil.tz.tzoffset` objects,\nwith the exception of UTC, which will be represented as\n:class:`dateutil.tz.tzutc`. Time zone offsets equivalent to UTC (such\nas `+00:00`) will also be represented as :class:`dateutil.tz.tzutc`.\n\n:param dt_str:\n    A string or stream containing only an ISO-8601 datetime string\n\n:return:\n    Returns a :class:`datetime.datetime` representing the string.\n    Unspecified components default to their lowest value.\n\n.. warning::\n\n    As of version 2.7.0, the strictness of the parser should not be\n    considered a stable part of the contract. Any valid ISO-8601 string\n    that parses correctly with the default settings will continue to\n    parse correctly in future versions, but invalid strings that\n    currently fail (e.g. ``2017-01-01T00:00+00:00:00``) are not\n    guaranteed to continue failing in future versions if they encode\n    a valid date.\n\n.. versionadded:: 2.7.0"}, "Heuristic": ["H1"]}, {"nl": {"id": "62b896de755ee91dce50a183", "comment": "Parse the date/time string into a :class:`datetime.datetime` object.\n\n:param timestr:\n    Any date/time string using the supported formats.\n\n:param default:\n    The default datetime object, if this is a datetime object and not\n    ``None``, elements specified in ``timestr`` replace elements in the\n    default object.\n\n:param ignoretz:\n    If set ``True``, time zones in parsed strings are ignored and a\n    naive :class:`datetime.datetime` object is returned.\n\n:param tzinfos:\n    Additional time zone names / aliases which may be present in the\n    string. This argument maps time zone names (and optionally offsets\n    from those time zones) to time zones. This parameter can be a\n    dictionary with timezone aliases mapping time zone names to time\n    zones or a function taking two parameters (``tzname`` and\n    ``tzoffset``) and returning a time zone.\n\n    The timezones to which the names are mapped can be an integer\n    offset from UTC in seconds or a :class:`tzinfo` object.\n\n    .. doctest::\n       :options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> from dateutil.tz import gettz\n        >>> tzinfos = {\"BRST\": -7200, \"CST\": gettz(\"America/Chicago\")}\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))\n        >>> parse(\"2012-01-19 17:21:00 CST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21,\n                          tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))\n\n    This parameter is ignored if ``ignoretz`` is set.\n\n:param \\*\\*kwargs:\n    Keyword arguments as passed to ``_parse()``.\n\n:return:\n    Returns a :class:`datetime.datetime` object or, if the\n    ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n    first element being a :class:`datetime.datetime` object, the second\n    a tuple containing the fuzzy tokens.\n\n:raises ParserError:\n    Raised for invalid or unknown string format, if the provided\n    :class:`tzinfo` is not in a valid format, or if an invalid date\n    would be created.\n\n:raises TypeError:\n    Raised for non-string or character stream input.\n\n:raises OverflowError:\n    Raised if the parsed date exceeds the largest valid C integer on\n    your system."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b8a4a4755ee91dce50a3d3", "comment": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object."}, "Heuristic": ["H1"]}, {"nl": {"id": "62b8a7b2755ee91dce50a4a7", "comment": "Sets the ``tzinfo`` parameter on naive datetimes only\n\nThis is useful for example when you are provided a datetime that may have\neither an implicit or explicit time zone, such as when parsing a time zone\nstring.\n\n.. doctest::\n\n    >>> from dateutil.tz import tzoffset\n    >>> from dateutil.parser import parse\n    >>> from dateutil.utils import default_tzinfo\n    >>> dflt_tz = tzoffset(\"EST\", -18000)\n    >>> print(default_tzinfo(parse('2014-01-01 12:30 UTC'), dflt_tz))\n    2014-01-01 12:30:00+00:00\n    >>> print(default_tzinfo(parse('2014-01-01 12:30'), dflt_tz))\n    2014-01-01 12:30:00-05:00\n\n:param dt:\n    The datetime on which to replace the time zone\n\n:param tzinfo:\n    The :py:class:`datetime.tzinfo` subclass instance to assign to\n    ``dt`` if (and only if) it is naive.\n\n:return:\n    Returns an aware :py:class:`datetime.datetime`."}, "Heuristic": ["H1"]}, {"nl": {"id": "6305f9991d275c6667163c50", "comment": "Set the bytes used to delimit slice points.\n\nArgs:\n    before: Split file before these delimiters.\n    after: Split file after these delimiters."}, "Heuristic": ["H1"]}, {"nl": {"id": "6306292052e177c0ba469f09", "comment": "Check whether the request body loaded using JSON contains events. If yes, True is returned, otherwise, check whether the tag of the XML loaded from the request body is Magic_ENV_TAG, if yes, return True. If neither of the preceding conditions is met, return False."}, "Heuristic": []}, {"nl": {"id": "6306292152e177c0ba469f0d", "comment": "Check whether the request body loaded using JSON contains events. If yes, True is returned. Otherwise, False is returned."}, "Heuristic": []}, {"nl": {"id": "6306292252e177c0ba469f11", "comment": "Use the ensure_timezone function to format the time of dt and return the time."}, "Heuristic": ["H1"]}, {"nl": {"id": "6306292352e177c0ba469f1d", "comment": "Find tags in text.\n\nTries to ignore tags inside code blocks.\n\nOptionally, if passed a \"replacer\", will also replace the tag word with the result\nof the replacer function called with the tag word.\n\nReturns a set of tags and the original or replaced text."}, "Heuristic": []}, {"nl": {"id": "6306292352e177c0ba469f1e", "comment": "Process links in text, adding some attributes and linkifying textual links."}, "Heuristic": ["H1"]}, {"nl": {"id": "6306292652e177c0ba469f34", "comment": "Set the head of the request through the URL and USER_AGENT."}, "Heuristic": []}, {"nl": {"id": "6306292a52e177c0ba469f41", "comment": "Checks whether each character in the LEEGAL_TAG_CHARS belongs to a tag. If any character belongs to a tag, the value False is returned. Otherwise, the value True is returned."}, "Heuristic": ["H1"]}, {"nl": {"id": "6306298b52e177c0ba469fdc", "comment": "Turn the children of node <xml> into a dict, keyed by tag name."}, "Heuristic": ["H1"]}, {"nl": {"id": "6306299052e177c0ba469fe8", "comment": "Check whether sender_handle is the same as entity_handle. If yes, return True. Otherwise, return False."}, "Heuristic": []}, {"nl": {"id": "630629b952e177c0ba46a043", "comment": "Returns a formatted dictionary, including information such as url and document_path."}, "Heuristic": ["H1"]}, {"nl": {"id": "630629d052e177c0ba46a0a1", "comment": "Verify the signed XML elements to have confidence that the claimed\nauthor did actually generate this message."}, "Heuristic": ["H1"]}, {"nl": {"id": "630629e052e177c0ba46a0c4", "comment": "The webfinger is obtained by reading the document in JSON format, the value of hcard_url in the webfinger is the value of href in links in the document."}, "Heuristic": ["H1"]}, {"nl": {"id": "630629e152e177c0ba46a0d1", "comment": "Try to retrieve an RFC7033 webfinger document. Does not raise if it fails."}, "Heuristic": ["H1"]}, {"nl": {"id": "630629e152e177c0ba46a0d2", "comment": "Retrieve a and parse a remote Diaspora webfinger document.\n\n:arg handle: Remote handle to retrieve\n:returns: dict"}, "Heuristic": ["H2"]}, {"nl": {"id": "630629e252e177c0ba46a0d6", "comment": "Retrieve a remote Diaspora host-meta document.\n\n:arg host: Host to retrieve from\n:returns: ``XRD`` instance"}, "Heuristic": ["H1"]}, {"nl": {"id": "630629e752e177c0ba46a0fb", "comment": "Send a response containing data through the POST method."}, "Heuristic": []}, {"nl": {"id": "6306091073426c38ae68acac", "comment": "insert a value of a nested key into a dictionary\n\nto insert value for a nested key, all ancestor keys should be given as\nmethod's arguments\n\nexample:\n  dict_insert({}, 'val', 'key1.key2'.split('.'))\n\n:param dic: a dictionary object to insert the nested key value into\n:param val: a value to insert to the given dictionary\n:param key: first key in a chain of key that will store the value\n:param keys: sub keys in the keys chain"}, "Heuristic": ["H1"]}, {"nl": {"id": "6306091a73426c38ae68acc8", "comment": "Create and return a new IniType complex type via cli.ListOfFileNames()"}, "Heuristic": ["H1"]}, {"nl": {"id": "6306091b73426c38ae68acd7", "comment": "Gets the ansible config manager via ServiceName.ANSIBLE_CONFIG_MANAGER in cls._get_service()"}, "Heuristic": ["H1"]}, {"nl": {"id": "6306091b73426c38ae68acd9", "comment": "Gets the workspace manager via ServiceName.WORKSPACE_MANAGER in cls._get_service()"}, "Heuristic": ["H1"]}, {"nl": {"id": "6306091b73426c38ae68acda", "comment": "Gets the plugin manager via ServiceName.PLUGINS_MANAGER in cls._get_service()"}, "Heuristic": ["H1"]}, {"nl": {"id": "6306091c73426c38ae68acdc", "comment": "validates that spec (YAML) content has all required fields\n\n:param spec_content: content of spec file\n:raise IRValidatorException: when mandatory data\nis missing in spec file\n:return: Dictionary with data loaded from a spec (YAML) file"}, "Heuristic": ["H1"]}, {"nl": {"id": "6306091c73426c38ae68acdd", "comment": "Loads & validates that a YAML file has all required fields\n\n:param yaml_file: Path to YAML file\n:raise IRValidatorException: when mandatory data is missing in file\n:return: Dictionary with data loaded from a YAML file"}, "Heuristic": ["H1"]}, {"nl": {"id": "6306091d73426c38ae68ace5", "comment": "Resolves the include dict directive in the spec files."}, "Heuristic": ["H1"]}, {"nl": {"id": "6306092373426c38ae68acfa", "comment": "Resolve arguments' values from spec and other sources with self._get_defaults()"}, "Heuristic": ["H1"]}, {"nl": {"id": "6306092973426c38ae68ad01", "comment": "Returning dict with options which deprecate others. options from self.spec_helper.iterate_option_specs()"}, "Heuristic": ["H1"]}, {"nl": {"id": "6306092c73426c38ae68ad02", "comment": "Validates and prints the deprecated arguments.\n\n:param cli_args: the dict of arguments from cli\n:param answer_file_args:  the dict of arguments from files"}, "Heuristic": ["H1"]}, {"nl": {"id": "6306092d73426c38ae68ad04", "comment": "Gets all the options for the specified command\n\n:param command_name: the command name (main, virsh, ospd, etc...)\n:return: the list of all command options"}, "Heuristic": []}, {"nl": {"id": "6306092d73426c38ae68ad05", "comment": "Gets the specification for the specified option name. Get options of the given command_name with self.get_parser_option_specs()"}, "Heuristic": ["H1"]}, {"nl": {"id": "6306092d73426c38ae68ad06", "comment": "list of silenced argument\n\n:param args: The received arguments.\n:return: list, slienced argument names"}, "Heuristic": ["H1"]}, {"nl": {"id": "6306092d73426c38ae68ad07", "comment": "Check if all the required arguments have been provided."}, "Heuristic": []}, {"nl": {"id": "6306092d73426c38ae68ad08", "comment": "List arguments with ``required_when`` condition matched.\n\n:param command_name: the command name.\n:param options_spec:  the list of command spec options.\n:param args: the received input arguments\n:return: list, list of argument names with matched ``required_when``\n    condition"}, "Heuristic": ["H1"]}, {"nl": {"id": "6306092e73426c38ae68ad09", "comment": "Check if value of the given args is not longer than length specified. \\n:param args: The received arguments."}, "Heuristic": ["H1"]}, {"nl": {"id": "6306092e73426c38ae68ad0a", "comment": "Check if value of the given args is one of the available choices. \\n:param args: The received arguments."}, "Heuristic": ["H1"]}, {"nl": {"id": "6306092e73426c38ae68ad0b", "comment": "Check if value of the given args is between minimum and maximum values"}, "Heuristic": ["H1"]}, {"nl": {"id": "6306092e73426c38ae68ad0d", "comment": "Returns the corresponding function in COMPLEX_TYPES based on type_name and returns the result obtained by complex_action after option_name,(self.vars, self.defaults, self.plugin_path), subcommand, spec_option) is input."}, "Heuristic": ["H1"]}, {"nl": {"id": "6306092e73426c38ae68ad0f", "comment": "Split input arguments to control nested and custom.\n\nControls arguments: control the IR behavior. These arguments\n    will not be put into the spec yml file\nNested arguments: are used by the Ansible playbooks and will be put\n    into the spec yml file.\nCustom arguments: Custom ansible variables to be used instead of the\n    normal nested usage.\n\n:param args: the collected list of args.\n:return: (dict, dict): flat dicts (control_args, nested_args)"}, "Heuristic": ["H1"]}, {"nl": {"id": "6306092e73426c38ae68ad11", "comment": "Extend ``vars_dict`` with ``extra-vars``\n\n:param vars_dict: Dictionary to merge extra-vars into\n:param extra_vars: List of extra-vars"}, "Heuristic": ["H1"]}, {"nl": {"id": "6306092f73426c38ae68ad13", "comment": "Wraps the 'ansible-playbook' CLI.\n\n:param ir_workspace: An Infrared Workspace object represents the active\nworkspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:param playbook_path: the playbook to invoke\n:param verbose: Ansible verbosity level\n:param extra_vars: dict. Passed to Ansible as extra-vars\n:param ansible_args: dict of ansible-playbook arguments to plumb down\n    directly to Ansible."}, "Heuristic": ["H1"]}, {"nl": {"id": "6306093273426c38ae68ad15", "comment": "Runs ansible cli with vars dict\n\n:param vars_dict: dict, Will be passed as Ansible extra-vars\n:param cli_args: the list  of command line arguments\n:param ir_workspace: An Infrared Workspace object represents the active\n workspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:return: ansible results"}, "Heuristic": ["H1"]}, {"nl": {"id": "63060ada73426c38ae68ad31", "comment": "Casts arguments to correct types by modifying values_dict param.\n\nBy default all the values are strings.\n\n:param parser_name: The command name, e.g. main, virsh, ospd, etc\n:param values_dict: The dict of with arguments"}, "Heuristic": ["H1"]}, {"nl": {"id": "63060b1a73426c38ae68ad3e", "comment": "Use YAML to read various information in plugin_dir and return the information in dictionary form."}, "Heuristic": ["H1"]}, {"nl": {"id": "63060b1b73426c38ae68ad42", "comment": "If the ANSIBLE_CONFIG property does not exist in os.environ, set it to self.ansible_config_path."}, "Heuristic": ["H1"]}, {"nl": {"id": "63060b1b73426c38ae68ad43", "comment": "Adds the spec cli options to to the main entry point.\n\n:param subparser: the subparser object to extend."}, "Heuristic": ["H1"]}, {"nl": {"id": "62ece4982e6aefcf4aabbd64", "comment": "Remove root from path. If fails, throw exception\n\n    Returns:\n        A path without root"}, "Heuristic": ["H1"]}]