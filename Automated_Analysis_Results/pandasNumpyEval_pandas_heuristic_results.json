[{"nl": {"id": "PandasEval/0", "comment": "# How to drop rows of Pandas DataFrame whose value in a certain column is NaN\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/1", "comment": "# replace field that's entirely space (or empty) with NaN using regex\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/1", "comment": "# return the result\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/2", "comment": "# How do I change the column labels of a pandas DataFrame from ['A', 'B', 'C'] to ['a', 'b', 'c']?\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "PandasEval/3", "comment": "# Add Leading Zeros to Strings at `col_name` in Pandas Dataframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/3", "comment": "# The maximum length of the string is 15\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/3", "comment": "# Return the dataframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/4", "comment": "# list_of_lists format: [header, [row1], [row2], ...]\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/4", "comment": "# header format: [column1, column2, ...]\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/4", "comment": "# row format: [value1, value2, ...]\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/4", "comment": "# How to convert list to dataframe?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "PandasEval/4", "comment": "# Return the dataframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/5", "comment": "# I want to make all column headers in my pandas data frame lower case\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/5", "comment": "# Return the changed dataframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/6", "comment": "# I need to change the dtype of multiple columns but the dataframe has different kind of dtypes. \n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/6", "comment": "# Some columns dtypes are float64 whereas some columns are int64\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/6", "comment": "# I need to change all float64 to float32.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/7", "comment": "# transfer column date to datetime type\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/7", "comment": "# when there is a string that is not capable of beeing turned into datetime format, skip that row,\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/7", "comment": "# use errors='coerce' for this\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/8", "comment": "# I have a dataframe that has two columns, the second column is one of only a few values. \n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/8", "comment": "# I want to return a dataframe where only the rows where that col2 had a specific value 'Jimmy' are included.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/9", "comment": "# Extract first and last row of a dataframe in pandas\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/9", "comment": "# Return the dataframe with the first and last row\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/10", "comment": "# How do I find all rows in a pandas DataFrame which have the max value for 'num' column, after grouping by 'Mt' column?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "PandasEval/11", "comment": "# How do I select rows from a DataFrame df based on column values?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "PandasEval/11", "comment": "# Return rows whose column value named `col_name` is in an iterable `values`\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/12", "comment": "\"\"\"\n    Return the row count of df\n    \"\"\""}, "Heuristic": ["H1"]}, {"nl": {"id": "PandasEval/13", "comment": "# Pandas create empty DataFrame with only column names\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/13", "comment": "# Return: DataFrame\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/14", "comment": "# I need to calculate the difference between two rows groupwise using pandas.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/14", "comment": "# To calculate the sum I would use pandas.groupby('Group').sum(), but how do you calculate the difference between rows where the row ordering is important?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "PandasEval/14", "comment": "# I think we need custom function with apply which return DataFrame for each group, for select by position is used iat:\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/14", "comment": "# Return the result\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/15", "comment": "# How to check if any value is NaN in a Pandas DataFrame? Return the result.\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "PandasEval/16", "comment": "# How to add a new column to an existing DataFrame?\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "PandasEval/16", "comment": "# I would like to add a new column data with the column name, to the existing dataframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/17", "comment": "# I have a dataframe with repeat values in column `col1`. I want to drop duplicates, keeping the row with the last value in column `col2`.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/17", "comment": "# How would I do that?\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "PandasEval/17", "comment": "# return the final dataframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/18", "comment": "\"\"\"\n    how do I get the value at an nth row of a given column name in Pandas?\n    return the value\n    \"\"\""}, "Heuristic": ["H1"]}, {"nl": {"id": "PandasEval/19", "comment": "# creating a new dataframe of all same with df_original one, but no any rows\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/19", "comment": "# return the new dataframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/20", "comment": "# # counting the number of missing/NaN in each column\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/20", "comment": "# Get a series with the number of missing/NaN in each column\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/21", "comment": "# I would like to create new dataframe out of the old one in a way that there will only be values that exceed the mean value of the column. \n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/21", "comment": "# We can compare values and then add NaNs by indexing or `where`\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/21", "comment": "# We want remove NaNs also in first rows add custom function with `dropna`\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/22", "comment": "# Normalization using pandas\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/22", "comment": "# We simply subtract the mean and divide by standard deviation on df.iloc[:,0,-1] obj with axis is zero.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/22", "comment": "# Return the normalized dataframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/23", "comment": "# How do I determine which columns contain NaN values? In particular, can I get a list of the column names containing NaNs?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "PandasEval/23", "comment": "# Return a list of the column names containing NaNs\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/24", "comment": "# Round a single column `A`\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/24", "comment": "# Return the dataframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/25", "comment": "# How to group values of pandas dataframe and select the latest by date from each group?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "PandasEval/25", "comment": "# Sorting values by `date` (ascending is True), and then grouping by `id`\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/26", "comment": "# Shift column in pandas dataframe up by one?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "PandasEval/26", "comment": "# In detail, in 'gdp' column, shift up by one and return dataframe with the changed gdp column.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/27", "comment": "# I need to remain the rows where line_num is not equal to 0. What's the most efficient way to do it?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "PandasEval/27", "comment": "# it should be as simple as:\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/28", "comment": "# In my code, I have several variables which can either contain a pandas DataFrame or nothing at all.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/28", "comment": "# Let's say I want to test and see if a certain DataFrame has been created yet or not.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/29", "comment": "# Move next value to first empty row pandas\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/29", "comment": "# how do i move each value from a column to the first empty \"row/cell\" in pandas?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "PandasEval/29", "comment": "# use sorted to align non NULL data at the top, use dropna to drop all rows with all NaN\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/30", "comment": "# I want to create a dataframe with one of the column as a list or array.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/30", "comment": "# After you assign a list like or array like value to the columns, the column should be considered as type object\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/30", "comment": "# Now I want to assign the emails to first row and the 'Email' column\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/31", "comment": "# Drop consecutive duplicates\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/31", "comment": "# Return the result\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/32", "comment": "# creating a Series from a list [56, 24, 421, 90]\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/33", "comment": "# How to get the last N rows of a pandas DataFrame?\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "PandasEval/34", "comment": "# append dictionary to data frame\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/34", "comment": "# return the data frame\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/35", "comment": "\"\"\"\n    Here's a one solution to remove columns based on duplicate column names:\n    Return the duplicated dataframe\n    \"\"\""}, "Heuristic": ["H1"]}, {"nl": {"id": "PandasEval/36", "comment": "# How to obtain pandas DataFrame without index\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/36", "comment": "# I want to print the whole dataframe, but I don't want to print the index\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/37", "comment": "# What I want is to clip the values of `col_1` between -2 to 2 if `col_0` is `a`.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/37", "comment": "# # Using `clip` function in pandas.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/38", "comment": "# How do I change the column labels of df\uff1f\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/38", "comment": "# And return the dataframe that has been renamed\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/39", "comment": "# Change all columns type of DataFrame to numeric\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/39", "comment": "# And return the new DataFrame\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/39", "comment": "# The code is:\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/40", "comment": "# return the column average/mean\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/41", "comment": "# How to determine whether a Pandas Column contains a particular value?\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "PandasEval/41", "comment": "# Return the result\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/42", "comment": "# Delete first n rows of a dataframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/42", "comment": "# Input:\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/42", "comment": "#   df: DataFrame\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/42", "comment": "#   n: int\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/42", "comment": "# Return:\n"}, "Heuristic": ["H2", "H7"]}, {"nl": {"id": "PandasEval/42", "comment": "#   DataFrame\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/43", "comment": "# You can specify a new column named `mean_along_rows` that contains the mean of each row. You also need to compute the mean along the rows, so use axis=1.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/43", "comment": "# Finally, return the dataframe with the new column. \n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/44", "comment": "# deleting a column from a Pandas DataFrame\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/44", "comment": "# return the changged dataframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/45", "comment": "# Finding the intersection between two series\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/45", "comment": "# In detail, first we create two sets, one for each series.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/45", "comment": "# Then we find the intersection of the two sets.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/46", "comment": "# How can I get the values of column `A` when column `B`=3?\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "PandasEval/47", "comment": "# I want to make all column headers in my pandas data frame lower case\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/48", "comment": "# Any word from `targets` are present in sentence.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/49", "comment": "# I have a Pandas dataframe and I want to find all the unique values in that dataframe...irrespective of row/columns. \n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/49", "comment": "# If I have a 10 x 10 dataframe, and suppose they have 84 unique values, I need to find them - Not the count.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/49", "comment": "# Using xx.values.ravel to get the flattened array of the dataframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/49", "comment": "# Getting the unique values by numpy.unique\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/50", "comment": "# I would like to add a new column C that is the sum value of A and B cell.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/51", "comment": "# Add a new column named 'Fruit Total' that sums the values of the other columns\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/51", "comment": "# Note that igonring the NaN values\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/52", "comment": "# How do I combine two dataframes with ignore index? Return the concated dataframe.\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "PandasEval/53", "comment": "# How do I retrieve the number of columns in a Pandas data frame?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "PandasEval/53", "comment": "# Return the number of columns in the dataframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/54", "comment": "# I am trying to extract the last year (YY) of a fiscal date string in the format of YYYY-YY.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/54", "comment": "# e.g The last year of this '1999-00' would be 2000.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/54", "comment": "# I need a logic to include a case where if it is the end of the century then my apply method should add to the first two digits.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/54", "comment": "# the column_name is the column name of the dataframe that contains the date strings.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/54", "comment": "# return the numerical Series obj of the last year.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/55", "comment": "# Counting consecutive positive values in Python/pandas array\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/55", "comment": "# I'm trying to count consecutive up days in equity return data; so if a positive day is 1 and a negative is 0, a list y=[0,0,1,1,1,0,0,1,0,1,1] should return z=[0,0,1,2,3,0,0,1,0,1,2].\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/55", "comment": "# Return the result\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/56", "comment": "# How to get the first largest value in column a\uff1f\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/56", "comment": "# Using nlargest and iloc to implemente this\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/57", "comment": "# Sorting columns in pandas dataframe based on column name\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/57", "comment": "# Note that axis is one\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/58", "comment": "# Example DataFrame\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/58", "comment": "# Want to remove all the numbers from the Name column.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/58", "comment": "# Any idea how to do it in a better way at the series/dataframe level.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/59", "comment": "# Delete all columns that contain all NaN values\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/59", "comment": "# Return the result.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/60", "comment": "# Convert Column `Date` to Date Format using pandas function\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/60", "comment": "# return the coverted dataframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/61", "comment": "\"\"\"\n    Inserts a row into a dataframe at a specified row with no ingore index, and sort & reset the index with drop=True. \n    Returns the new dataframe.\n    \"\"\""}, "Heuristic": ["H1"]}, {"nl": {"id": "PandasEval/62", "comment": "# make sure indexes pair with number of rows\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/62", "comment": "# (for index, row in DataFrame.iterrows) is a generator which yields both the index and row (as a Series)\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/62", "comment": "# for each row in the DataFrame, we need put the row['MSRA'] (as key) and row['THU'] (as value) into a rows_dict\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/62", "comment": "# {MSRA: THU, ...}\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/63", "comment": "# How do I merge two dataframes by index?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "PandasEval/63", "comment": "# Set left&right indexs to True\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/64", "comment": "# I was wondering if there is an elegant and shorthand way in Pandas DataFrames to select columns by data type (dtype). \n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/64", "comment": "# i.e. Select only float64 columns from a DataFrame\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/65", "comment": "# How to merge two dataframes with different column names but same number of rows?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "PandasEval/65", "comment": "# I have two different data frames in pandas. Example:\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/65", "comment": "# df1=a b  df2= c\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/65", "comment": "# 0 1       1 \n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/65", "comment": "# 1 2       2 \n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/65", "comment": "# 2 3       3 \n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/65", "comment": "# I want to merge them so\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/65", "comment": "# df1= a b c  \n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/65", "comment": "#  0 1 1\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/65", "comment": "#  1 2 2\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/65", "comment": "#  2 3 3\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/65", "comment": "# In order to merge two dataframes you can use this two examples. Both returns the same goal\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/65", "comment": "# Using merge plus additional arguments instructing it to use the indexes\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/65", "comment": "# Specially, we can set left_index and right_index to True\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/66", "comment": "# Given a pandas series that represents frequencies of a value, how can I turn those frequencies into percentages?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "PandasEval/66", "comment": "# Return the percentage of each gender.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/67", "comment": "# add the row at top in df\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/67", "comment": "# resort the index by inplace\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/68", "comment": "# We will drop all Nan rows.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/68", "comment": "# Return the changed dataframe.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/69", "comment": "# Pandas dataframe fillna() only some columns in place\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/69", "comment": "# This function fills all columns with 0\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/69", "comment": "# Return the changed dataframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/70", "comment": "# I would like to drop all data in a pandas dataframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/70", "comment": "# Using df.index to drop all rows\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/71", "comment": "# Say i have a dataframe with 100,000 entries and want to split it into 100 sections of 1000 entries.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/71", "comment": "# How do i take a random sample of say size 50 of just one of the 100 sections. \n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/71", "comment": "# the data set is already ordered such that the first 1000 results are the first section the next section the next and so on.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/71", "comment": "# You could add a \"section\" column to your data then perform a groupby and sample(n=50):\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/72", "comment": "# I have a dataframe in pandas where each column has different value range.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/72", "comment": "# Any idea how I can normalize the columns of this dataframe where each value is between 0 and 1?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "PandasEval/73", "comment": "# I want to get the counts of unique values of the dataframe. count_values implements this however I want to use its output somewhere else. \n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/73", "comment": "# How can I convert .count_values output to a pandas dataframe.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/73", "comment": "# Use rename_axis('unique_values') for name ('counts') of column from index and reset_index\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/73", "comment": "# return the final dataframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/74", "comment": "# Count the number of occurrences of a value in a series\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/74", "comment": "# Return the count\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/75", "comment": "# Selecting rows where column x2 is NaN \n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/76", "comment": "# Appending the source series to the target series, with ignoring the index or resetting index\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/77", "comment": "# Find rows in df where col_a > col_b\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/77", "comment": "# Return the rows\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/78", "comment": "# I find myself often having to check whether a column or row exists in a dataframe before trying to reference it.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/78", "comment": "# Is there any way to do this more nicely? \n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "PandasEval/78", "comment": "# For example on an arbitrary object I can do x = getattr(anobject, 'id', default) - is there anything similar to this in pandas? Really any way to achieve what I'm doing more gracefully?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "PandasEval/78", "comment": "# Output the second row of data in `mycol` column if it exists, otherwise output NaN\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/79", "comment": "# Return the dataframe with the rows with one or more NaN values\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/80", "comment": "# ceiling of a pandas series\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/80", "comment": "# Return the result.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/81", "comment": "# What is the best way to do a groupby on a Pandas dataframe, but exclude some columns from that groupby?\n"}, "Heuristic": ["H1", "H7", "H12"]}, {"nl": {"id": "PandasEval/81", "comment": "# I want to groupby the column `Country` and `Item_Code` and only compute the sum of the rows falling under the columns ['Y1961', 'Y1962' and 'Y1963']. \n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/82", "comment": "\"\"\"    \n    Params:\n        df: The dataframe to append to.\n        list_to_append: The list to append.\n        column_name_list: The column names of the list to append.\n\n    Returns:\n        The dataframe with the list appended.\n    \"\"\""}, "Heuristic": ["H1"]}, {"nl": {"id": "PandasEval/83", "comment": "# How can I map True/False to 1/0 in a Pandas DataFrame?\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "PandasEval/83", "comment": "# return the dataframe with the column converted to int\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/84", "comment": "# Pandas DataFrame to List of Dictionaries\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/84", "comment": "# Use df.to_dict() to solve it and return the result\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/85", "comment": "# Set value to an entire column `B` of a pandas dataframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/85", "comment": "# Return the changed dataframe.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/86", "comment": "# How can I delete multiple columns in one pass?\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "PandasEval/86", "comment": "# In detail, I would like to delete columns A and C, but I don't know how to do it in one pass.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/87", "comment": "# Given that all the dataframes have the same columns, you can simply concat them:\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/87", "comment": "# return the concated dataframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/88", "comment": "# How to get the last N rows of a pandas DataFrame?\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "PandasEval/89", "comment": "# Return the row-index values of the dataframe as a list\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/90", "comment": "# i want to drop 2 rows in the dataframe if zero comes in the column\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/90", "comment": "# if 0 comes on odd index drop previous row as well as current row using pandas\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/90", "comment": "# Assuming your dataframe is indexed starting from 0\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/90", "comment": "# Rows with column2 = 0 and on odd index\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/90", "comment": "# The rows above them\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/90", "comment": "# A new dataframe with those rows removed\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/91", "comment": "# I want to convert a table, represented as a list of lists, into a pandas DataFrame.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/91", "comment": "# The columns are ['one', 'two']\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/91", "comment": "# What is the best way to convert the columns to the appropriate types, in this case the 'two' column into floats?\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "PandasEval/92", "comment": "# I would simply like to slice the Data Frame and take the first n rows.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/92", "comment": "# Return the result\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/93", "comment": "# transform timestamp to pydatetime object\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/93", "comment": "# return pydatetime object\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/94", "comment": "# How do I select the given columns and return the new DataFrame?\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "PandasEval/95", "comment": "# I need to divide all ['B','C'] columns but the first column 'A' in a DataFrame by the first column.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/95", "comment": "# Return the result.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/96", "comment": "# merge the above two dataframes on column 'company'\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/97", "comment": "# How would I rename the only one column header?\n"}, "Heuristic": ["H7", "H12"]}, {"nl": {"id": "PandasEval/97", "comment": "# return the changed dataframe\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/98", "comment": "# I want to get a list of the column headers from a Pandas DataFrame. \n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/98", "comment": "# The DataFrame will come from user input, so I won't know how many columns there will be or what they will be called.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/98", "comment": "# Return a list of the column headers.\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/99", "comment": "# Finding non-numeric rows in dataframe in pandas\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/99", "comment": "# Return the raws that contain non-numeric values\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/99", "comment": "# So to get the subDataFrame of rouges, (Note: the negation, ~, of the above finds the ones which have at least one rogue non-numeric):\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/100", "comment": "# This is my DataFrame that should be repeated for 5 times:\n"}, "Heuristic": ["H7"]}, {"nl": {"id": "PandasEval/100", "comment": "# I haven't found anything practical, including those like np.repeat ---- it just doesn't work on a DataFrame.\n"}, "Heuristic": ["H1", "H7"]}, {"nl": {"id": "PandasEval/100", "comment": "# You can use the concat function:\n"}, "Heuristic": ["H1", "H7"]}]